var global = Function("return this")();

global.__snapshot = true;

var __trace = function(message) {
global.android && android.util.Log.v("SNAPSHOT", message);
};

global.__extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

(function(modules) {
var installedModules = {};
function __webpack_require__(moduleId) {
if (installedModules[moduleId]) {
var result = installedModules[moduleId].exports;
if (result && result.evalLazy && !__snapshot) {
__trace("Eval lazy: " + moduleId);
result.evalLazy();
delete result.evalLazy;
}
return result;
}
var module = installedModules[moduleId] = {
exports: {},
id: moduleId,
loaded: false
};
if (!modules[moduleId]) return;
modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
module.loaded = true;
var result = module.exports;
if (result && result.evalLazy && !__snapshot) {
__trace("Eval lazy: " + moduleId);
result.evalLazy();
delete result.evalLazy;
}
return module.exports;
}
global.__requireOverride = function(moduleId) {
__trace("Require " + moduleId);
moduleId = moduleId.replace(/^\.\/tns_modules\//, "");
if (moduleId == "application/application.js") {
return __webpack_require__(15);
}
if (moduleId == "ui/frame/frame.js") {
return __webpack_require__(9);
}
if (moduleId == "nativescript-angular/application") {
return __webpack_require__(2);
}
if (moduleId == "angular2/core") {
return __webpack_require__(106);
}
if (moduleId == "data/observable") {
return __webpack_require__(17);
}
if (moduleId == "nativescript-angular/value-accessors/text-value-accessor") {
return __webpack_require__(383);
}
if (moduleId == "nativescript-angular/value-accessors/checked-value-accessor") {
return __webpack_require__(385);
}
if (moduleId == "./_embedded_script_.js") {
return {};
}
android.util.Log.v("SNAPSHOT", "Not found " + moduleId);
};
__webpack_require__.m = modules;
__webpack_require__.c = installedModules;
__webpack_require__.p = "";
__webpack_require__(2);
__snapshot = false;
})([ function() {}, function() {}, function(module, exports, __webpack_require__) {
"use strict";
__webpack_require__(3);
global.process = {};
var oldToString = Object.prototype.toString;
Object.prototype.toString = function() {
return "[object process]";
};
__webpack_require__(100);
Object.prototype.toString = oldToString;
delete global.process;
__webpack_require__(102);
__webpack_require__(104);
var lang_1 = __webpack_require__(105);
var core_1 = __webpack_require__(106);
var di_1 = __webpack_require__(109);
var dom_adapter_1 = __webpack_require__(216);
var api_1 = __webpack_require__(195);
var renderer_1 = __webpack_require__(217);
var dom_adapter_2 = __webpack_require__(273);
var xhr_1 = __webpack_require__(302);
var xhr_2 = __webpack_require__(303);
var exception_handler_1 = __webpack_require__(119);
var application_common_providers_1 = __webpack_require__(213);
var compiler_1 = __webpack_require__(304);
var platform_common_providers_1 = __webpack_require__(212);
var common_1 = __webpack_require__(333);
var ns_directives_1 = __webpack_require__(381);
var page_1 = __webpack_require__(66);
var text_view_1 = __webpack_require__(265);
var application = __webpack_require__(15);
var platform_providers_1 = __webpack_require__(218);
core_1.enableProdMode();
var _platform = null;
function bootstrap(appComponentType, customProviders) {
if (customProviders === void 0) {
customProviders = null;
}
dom_adapter_2.NativeScriptDomAdapter.makeCurrent();
var platformProviders = [ platform_common_providers_1.PLATFORM_COMMON_PROVIDERS ];
var defaultAppProviders = [ application_common_providers_1.APPLICATION_COMMON_PROVIDERS, common_1.FORM_PROVIDERS, di_1.provide(core_1.PLATFORM_PIPES, {
useValue: common_1.COMMON_PIPES,
multi: true
}), di_1.provide(core_1.PLATFORM_DIRECTIVES, {
useValue: common_1.COMMON_DIRECTIVES,
multi: true
}), di_1.provide(core_1.PLATFORM_DIRECTIVES, {
useValue: ns_directives_1.NS_DIRECTIVES,
multi: true
}), di_1.provide(exception_handler_1.ExceptionHandler, {
useFactory: function() {
return new exception_handler_1.ExceptionHandler(dom_adapter_1.DOM, true);
},
deps: []
}), platform_providers_1.defaultPageProvider, renderer_1.NativeScriptRootRenderer, di_1.provide(api_1.RootRenderer, {
useClass: renderer_1.NativeScriptRootRenderer
}), renderer_1.NativeScriptRenderer, di_1.provide(api_1.Renderer, {
useClass: renderer_1.NativeScriptRenderer
}), compiler_1.COMPILER_PROVIDERS, di_1.provide(xhr_1.XHR, {
useClass: xhr_2.FileSystemXHR
}) ];
var appProviders = [ defaultAppProviders ];
if (lang_1.isPresent(customProviders)) {
appProviders.push(customProviders);
}
if (!_platform) {
_platform = core_1.platform(platformProviders);
}
return _platform.application(appProviders).bootstrap(appComponentType);
}
exports.bootstrap = bootstrap;
function nativeScriptBootstrap(appComponentType, customProviders, appOptions) {
if (appOptions && appOptions.cssFile) {
application.cssFile = appOptions.cssFile;
}
application.start({
create: function() {
var page = new page_1.Page();
if (appOptions) {
page.actionBarHidden = appOptions.startPageActionBarHidden;
}
var onLoadedHandler = function(args) {
page.off("loaded", onLoadedHandler);
console.log("Page loaded");
console.log("BOOTSTRAPPING...");
bootstrap(appComponentType, customProviders).then(function(appRef) {
console.log("ANGULAR BOOTSTRAP DONE.");
}, function(err) {
console.log("ERROR BOOTSTRAPPING ANGULAR");
var errorMessage = err.message + "\n\n" + err.stack;
console.log(errorMessage);
var view = new text_view_1.TextView();
view.text = errorMessage;
page.content = view;
});
};
page.on("loaded", onLoadedHandler);
return page;
}
});
}
exports.nativeScriptBootstrap = nativeScriptBootstrap;
}, function(module, exports, __webpack_require__) {
global.moduleMerge = function(sourceExports, destExports) {
for (var key in sourceExports) {
destExports[key] = sourceExports[key];
}
};
var modules = new Map();
global.registerModule = function(name, loader) {
modules.set(name, loader);
};
global.moduleExists = function(name) {
return modules.has(name);
};
global.loadModule = function(name) {
var loader = modules.get(name);
if (loader) {
return loader();
} else {
return __webpack_require__(4)(name);
}
};
global.registerModule("timer", function() {
return __webpack_require__(6);
});
global.registerModule("ui/dialogs", function() {
return __webpack_require__(7);
});
global.registerModule("xhr", function() {
return __webpack_require__(97);
});
global.registerModule("fetch", function() {
return __webpack_require__(98);
});
var __tnsGlobalMergedModules = new Map();
function registerOnGlobalContext(name, module) {
Object.defineProperty(global, name, {
get: function() {
var m = global.loadModule(module);
if (!__tnsGlobalMergedModules.has(module)) {
__tnsGlobalMergedModules.set(module, true);
global.moduleMerge(m, global);
}
var resolvedValue = m[name];
Object.defineProperty(this, name, {
value: resolvedValue,
configurable: true,
writable: true
});
return resolvedValue;
},
configurable: true
});
}
if (global.__snapshot) {
var timer = __webpack_require__(6);
global.setTimeout = timer.setTimeout;
global.clearTimeout = timer.clearTimeout;
global.setInterval = timer.setInterval;
global.clearInterval = timer.clearInterval;
var dialogs = __webpack_require__(7);
global.alert = dialogs.alert;
global.confirm = dialogs.confirm;
global.prompt = dialogs.prompt;
var xhr = __webpack_require__(97);
global.XMLHttpRequest = xhr.XMLHttpRequest;
global.FormData = xhr.FormData;
var fetch = __webpack_require__(98);
global.fetch = fetch.fetch;
} else {
registerOnGlobalContext("setTimeout", "timer");
registerOnGlobalContext("clearTimeout", "timer");
registerOnGlobalContext("setInterval", "timer");
registerOnGlobalContext("clearInterval", "timer");
registerOnGlobalContext("alert", "ui/dialogs");
registerOnGlobalContext("confirm", "ui/dialogs");
registerOnGlobalContext("prompt", "ui/dialogs");
registerOnGlobalContext("XMLHttpRequest", "xhr");
registerOnGlobalContext("FormData", "xhr");
registerOnGlobalContext("fetch", "fetch");
}
var platform = __webpack_require__(39);
var consoleModule = __webpack_require__(99);
var c = new consoleModule.Console();
if (platform.device.os === platform.platformNames.android) {
global.console = c;
} else if (platform.device.os === platform.platformNames.ios) {
global.console.dump = function(args) {
c.dump(args);
};
}
if (typeof global.__decorate !== "function") {
global.__decorate = function(decorators, target, key, desc) {
var c = arguments.length;
var r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof global.Reflect === "object" && typeof global.Reflect.decorate === "function") {
r = global.Reflect.decorate(decorators, target, key, desc);
} else {
for (var i = decorators.length - 1; i >= 0; i--) {
if (d = decorators[i]) {
r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
}
}
}
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
}
if (typeof global.__metadata !== "function") {
global.__metadata = function(k, v) {
if (typeof global.Reflect === "object" && typeof global.Reflect.metadata === "function") {
return global.Reflect.metadata(k, v);
}
};
}
if (typeof global.__param !== "function") {
global.__param = global && global.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
}
function Deprecated(target, key, descriptor) {
if (descriptor) {
var originalMethod = descriptor.value;
descriptor.value = function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
console.log(key + " is deprecated");
return originalMethod.apply(this, args);
};
return descriptor;
} else {
console.log((target && target.name || target) + " is deprecated");
return target;
}
}
exports.Deprecated = Deprecated;
global.Deprecated = Deprecated;
function Experimental(target, key, descriptor) {
if (descriptor) {
var originalMethod = descriptor.value;
descriptor.value = function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
console.log(key + " is experimental");
return originalMethod.apply(this, args);
};
return descriptor;
} else {
console.log((target && target.name || target) + " is experimental");
return target;
}
}
exports.Experimental = Experimental;
global.Experimental = Experimental;
}, function(module, exports, __webpack_require__) {
var map = {
"./globals": 3,
"./globals.js": 3
};
function webpackContext(req) {
return __webpack_require__(webpackContextResolve(req));
}
function webpackContextResolve(req) {
return map[req] || function() {
throw new Error("Cannot find module '" + req + "'.");
}();
}
webpackContext.keys = function webpackContextKeys() {
return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 4;
}, , function(module, exports) {
var timeoutHandler;
var timeoutCallbacks = {};
var timerId = 0;
function createHandlerAndGetId() {
if (!timeoutHandler) {
timeoutHandler = new android.os.Handler(android.os.Looper.getMainLooper());
}
timerId++;
return timerId;
}
function setTimeout(callback, milliseconds) {
if (milliseconds === void 0) {
milliseconds = 0;
}
var id = createHandlerAndGetId();
var runnable = new java.lang.Runnable({
run: function() {
callback();
if (timeoutCallbacks[id]) {
delete timeoutCallbacks[id];
}
}
});
if (!timeoutCallbacks[id]) {
timeoutCallbacks[id] = runnable;
}
timeoutHandler.postDelayed(runnable, long(milliseconds));
return id;
}
exports.setTimeout = setTimeout;
function clearTimeout(id) {
if (timeoutCallbacks[id]) {
timeoutHandler.removeCallbacks(timeoutCallbacks[id]);
delete timeoutCallbacks[id];
}
}
exports.clearTimeout = clearTimeout;
function setInterval(callback, milliseconds) {
if (milliseconds === void 0) {
milliseconds = 0;
}
var id = createHandlerAndGetId();
var handler = timeoutHandler;
var runnable = new java.lang.Runnable({
run: function() {
callback();
if (timeoutCallbacks[id]) {
handler.postDelayed(runnable, long(milliseconds));
}
}
});
if (!timeoutCallbacks[id]) {
timeoutCallbacks[id] = runnable;
}
timeoutHandler.postDelayed(runnable, long(milliseconds));
return id;
}
exports.setInterval = setInterval;
exports.clearInterval = clearTimeout;
}, function(module, exports, __webpack_require__) {
var dialogsCommon = __webpack_require__(8);
var appmodule = __webpack_require__(15);
var types = __webpack_require__(13);
global.moduleMerge(dialogsCommon, exports);
function createAlertDialog(options) {
var alert = new android.app.AlertDialog.Builder(appmodule.android.currentContext);
alert.setTitle(options && types.isString(options.title) ? options.title : "");
alert.setMessage(options && types.isString(options.message) ? options.message : "");
if (options && options.cancelable === false) {
alert.setCancelable(false);
}
return alert;
}
function showDialog(builder) {
var dlg = builder.show();
var labelColor = dialogsCommon.getLabelColor();
if (labelColor) {
var textViewId = dlg.getContext().getResources().getIdentifier("android:id/alertTitle", null, null);
if (textViewId) {
var tv = dlg.findViewById(textViewId);
if (tv) {
tv.setTextColor(labelColor.android);
}
}
var messageTextViewId = dlg.getContext().getResources().getIdentifier("android:id/message", null, null);
if (messageTextViewId) {
var messageTextView = dlg.findViewById(messageTextViewId);
if (messageTextView) {
messageTextView.setTextColor(labelColor.android);
}
}
}
}
function addButtonsToAlertDialog(alert, options, callback) {
if (!options) {
return;
}
if (options.okButtonText) {
alert.setPositiveButton(options.okButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
callback(true);
}
}));
}
if (options.cancelButtonText) {
alert.setNegativeButton(options.cancelButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
callback(false);
}
}));
}
if (options.neutralButtonText) {
alert.setNeutralButton(options.neutralButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
callback(undefined);
}
}));
}
alert.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
onDismiss: function() {
callback(false);
}
}));
}
function alert(arg) {
return new Promise(function(resolve, reject) {
try {
var options = !dialogsCommon.isDialogOptions(arg) ? {
title: dialogsCommon.ALERT,
okButtonText: dialogsCommon.OK,
message: arg + ""
} : arg;
var alert = createAlertDialog(options);
alert.setPositiveButton(options.okButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
resolve();
}
}));
alert.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
onDismiss: function() {
resolve();
}
}));
showDialog(alert);
} catch (ex) {
reject(ex);
}
});
}
exports.alert = alert;
function confirm(arg) {
return new Promise(function(resolve, reject) {
try {
var options = !dialogsCommon.isDialogOptions(arg) ? {
title: dialogsCommon.CONFIRM,
okButtonText: dialogsCommon.OK,
cancelButtonText: dialogsCommon.CANCEL,
message: arg + ""
} : arg;
var alert = createAlertDialog(options);
addButtonsToAlertDialog(alert, options, function(result) {
resolve(result);
});
showDialog(alert);
} catch (ex) {
reject(ex);
}
});
}
exports.confirm = confirm;
function prompt(arg) {
var options;
var defaultOptions = {
title: dialogsCommon.PROMPT,
okButtonText: dialogsCommon.OK,
cancelButtonText: dialogsCommon.CANCEL,
inputType: dialogsCommon.inputType.text
};
if (arguments.length === 1) {
if (types.isString(arg)) {
options = defaultOptions;
options.message = arg;
} else {
options = arg;
}
} else if (arguments.length === 2) {
if (types.isString(arguments[0]) && types.isString(arguments[1])) {
options = defaultOptions;
options.message = arguments[0];
options.defaultText = arguments[1];
}
}
return new Promise(function(resolve, reject) {
try {
var alert = createAlertDialog(options);
var input = new android.widget.EditText(appmodule.android.currentContext);
if (options && options.inputType === dialogsCommon.inputType.password) {
input.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);
}
input.setText(options && options.defaultText || "");
alert.setView(input);
var getText = function() {
return input.getText().toString();
};
addButtonsToAlertDialog(alert, options, function(r) {
resolve({
result: r,
text: getText()
});
});
showDialog(alert);
} catch (ex) {
reject(ex);
}
});
}
exports.prompt = prompt;
function login(arg) {
var options;
var defaultOptions = {
title: dialogsCommon.LOGIN,
okButtonText: dialogsCommon.OK,
cancelButtonText: dialogsCommon.CANCEL
};
if (arguments.length === 1) {
if (types.isString(arguments[0])) {
options = defaultOptions;
options.message = arguments[0];
} else {
options = arguments[0];
}
} else if (arguments.length === 2) {
if (types.isString(arguments[0]) && types.isString(arguments[1])) {
options = defaultOptions;
options.message = arguments[0];
options.userName = arguments[1];
}
} else if (arguments.length === 3) {
if (types.isString(arguments[0]) && types.isString(arguments[1]) && types.isString(arguments[2])) {
options = defaultOptions;
options.message = arguments[0];
options.userName = arguments[1];
options.password = arguments[2];
}
}
return new Promise(function(resolve, reject) {
try {
var context = appmodule.android.currentContext;
var alert = createAlertDialog(options);
var userNameInput = new android.widget.EditText(context);
userNameInput.setText(options.userName ? options.userName : "");
var passwordInput = new android.widget.EditText(context);
passwordInput.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);
passwordInput.setText(options.password ? options.password : "");
var layout = new android.widget.LinearLayout(context);
layout.setOrientation(1);
layout.addView(userNameInput);
layout.addView(passwordInput);
alert.setView(layout);
addButtonsToAlertDialog(alert, options, function(r) {
resolve({
result: r,
userName: userNameInput.getText().toString(),
password: passwordInput.getText().toString()
});
});
showDialog(alert);
} catch (ex) {
reject(ex);
}
});
}
exports.login = login;
function action(arg) {
var options;
var defaultOptions = {
title: null,
cancelButtonText: dialogsCommon.CANCEL
};
if (arguments.length === 1) {
if (types.isString(arguments[0])) {
options = defaultOptions;
options.message = arguments[0];
} else {
options = arguments[0];
}
} else if (arguments.length === 2) {
if (types.isString(arguments[0]) && types.isString(arguments[1])) {
options = defaultOptions;
options.message = arguments[0];
options.cancelButtonText = arguments[1];
}
} else if (arguments.length === 3) {
if (types.isString(arguments[0]) && types.isString(arguments[1]) && types.isDefined(arguments[2])) {
options = defaultOptions;
options.message = arguments[0];
options.cancelButtonText = arguments[1];
options.actions = arguments[2];
}
}
return new Promise(function(resolve, reject) {
try {
var activity = appmodule.android.foregroundActivity || appmodule.android.startActivity;
var alert = new android.app.AlertDialog.Builder(activity);
var message = options && types.isString(options.message) ? options.message : "";
var title = options && types.isString(options.title) ? options.title : "";
if (options && options.cancelable === false) {
alert.setCancelable(false);
}
if (title) {
alert.setTitle(title);
if (!options.actions) {
alert.setMessage(message);
}
} else {
alert.setTitle(message);
}
if (options.actions) {
alert.setItems(options.actions, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, which) {
resolve(options.actions[which]);
}
}));
}
if (types.isString(options.cancelButtonText)) {
alert.setNegativeButton(options.cancelButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
resolve(options.cancelButtonText);
}
}));
}
alert.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
onDismiss: function() {
if (types.isString(options.cancelButtonText)) {
resolve(options.cancelButtonText);
} else {
resolve("");
}
}
}));
showDialog(alert);
} catch (ex) {
reject(ex);
}
});
}
exports.action = action;
}, function(module, exports, __webpack_require__) {
var frame = __webpack_require__(9);
var button = __webpack_require__(46);
var textField = __webpack_require__(88);
var label = __webpack_require__(95);
var types = __webpack_require__(13);
exports.STRING = "string", exports.PROMPT = "Prompt", exports.CONFIRM = "Confirm", 
exports.ALERT = "Alert", exports.LOGIN = "Login", exports.OK = "OK", exports.CANCEL = "Cancel";
var inputType;
(function(inputType) {
inputType.text = "text";
inputType.password = "password";
})(inputType = exports.inputType || (exports.inputType = {}));
function getCurrentPage() {
var topMostFrame = frame.topmost();
if (topMostFrame) {
return topMostFrame.currentPage;
}
return undefined;
}
exports.getCurrentPage = getCurrentPage;
function applySelectors(view) {
var currentPage = getCurrentPage();
if (currentPage) {
var styleScope = currentPage._getStyleScope();
if (styleScope) {
styleScope.applySelectors(view);
}
}
}
var buttonColor;
function getButtonColor() {
if (!buttonColor) {
var btn = new button.Button();
applySelectors(btn);
buttonColor = btn.color;
}
return buttonColor;
}
exports.getButtonColor = getButtonColor;
var textFieldColor;
function getTextFieldColor() {
if (!textFieldColor) {
var tf = new textField.TextField();
applySelectors(tf);
textFieldColor = tf.color;
}
return textFieldColor;
}
exports.getTextFieldColor = getTextFieldColor;
var labelColor;
function getLabelColor() {
if (!labelColor) {
var lbl = new label.Label();
applySelectors(lbl);
labelColor = lbl.color;
}
return labelColor;
}
exports.getLabelColor = getLabelColor;
function isDialogOptions(arg) {
return !types.isNullOrUndefined(arg) && (arg.message || arg.title);
}
exports.isDialogOptions = isDialogOptions;
}, function(module, exports, __webpack_require__) {
var frameCommon = __webpack_require__(10);
var pages = __webpack_require__(66);
var transitionModule = __webpack_require__(84);
var trace = __webpack_require__(26);
var observable_1 = __webpack_require__(17);
var application = __webpack_require__(15);
var types = __webpack_require__(13);
var utils = __webpack_require__(21);
global.moduleMerge(frameCommon, exports);
var TAG = "_fragmentTag";
var HIDDEN = "_hidden";
var INTENT_EXTRA = "com.tns.activity";
var BACKSTACK_TAG = "_backstackTag";
var IS_BACK = "_isBack";
var NAV_DEPTH = "_navDepth";
var CLEARING_HISTORY = "_clearingHistory";
var FRAMEID = "_frameId";
var navDepth = -1;
var activityInitialized = false;
function onFragmentShown(fragment) {
trace.write("SHOWN " + fragment.getTag(), trace.categories.NativeLifecycle);
if (fragment[CLEARING_HISTORY]) {
trace.write(fragment.getTag() + " has been shown, but we are currently clearing history. Returning.", trace.categories.NativeLifecycle);
return null;
}
var frame = fragment.frame;
var entry = fragment.entry;
var page = entry.resolvedPage;
var currentNavigationContext;
var navigationQueue = frame._navigationQueue;
for (var i = 0; i < navigationQueue.length; i++) {
if (navigationQueue[i].entry === entry) {
currentNavigationContext = navigationQueue[i];
break;
}
}
var isBack = currentNavigationContext ? currentNavigationContext.isBackNavigation : false;
frame._addView(page);
if (!frame.isLoaded) {
frame._currentEntry = entry;
frame.onLoaded();
}
transitionModule._onFragmentShown(fragment, isBack);
}
function onFragmentHidden(fragment) {
trace.write("HIDDEN " + fragment.getTag(), trace.categories.NativeLifecycle);
if (fragment[CLEARING_HISTORY]) {
trace.write(fragment.getTag() + " has been hidden, but we are currently clearing history. Returning.", trace.categories.NativeLifecycle);
return null;
}
var isBack = fragment.entry[IS_BACK];
fragment.entry[IS_BACK] = undefined;
transitionModule._onFragmentHidden(fragment, isBack);
}
var Frame = function(_super) {
__extends(Frame, _super);
function Frame() {
_super.call(this);
this._containerViewId = -1;
this._android = new AndroidFrame(this);
this._listener = new android.view.View.OnAttachStateChangeListener({
onViewAttachedToWindow: this.onNativeViewAttachedToWindow.bind(this),
onViewDetachedFromWindow: this.onNativeViewDetachedToWindow.bind(this)
});
}
Object.defineProperty(Frame, "defaultAnimatedNavigation", {
get: function() {
return frameCommon.Frame.defaultAnimatedNavigation;
},
set: function(value) {
frameCommon.Frame.defaultAnimatedNavigation = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame, "defaultTransition", {
get: function() {
return frameCommon.Frame.defaultTransition;
},
set: function(value) {
frameCommon.Frame.defaultTransition = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "containerViewId", {
get: function() {
return this._containerViewId;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "_nativeView", {
get: function() {
return this._android.rootViewGroup;
},
enumerable: true,
configurable: true
});
Frame.prototype._navigateCore = function(backstackEntry) {
trace.write(this + "._navigateCore(page: " + backstackEntry.resolvedPage + ", backstackVisible: " + this._isEntryBackstackVisible(backstackEntry) + ", clearHistory: " + backstackEntry.entry.clearHistory + "), navDepth: " + navDepth, trace.categories.Navigation);
var activity = this._android.activity;
if (!activity) {
var currentActivity = this._android.currentActivity;
if (currentActivity) {
startActivity(currentActivity, this._android.frameId);
}
this._delayedNavigationEntry = backstackEntry;
return;
}
var manager = activity.getFragmentManager();
var isFirstNavigation = types.isNullOrUndefined(this._currentEntry);
if (backstackEntry.entry.clearHistory) {
var backStackEntryCount = manager.getBackStackEntryCount();
var i = backStackEntryCount - 1;
var fragment = void 0;
while (i >= 0) {
fragment = manager.findFragmentByTag(manager.getBackStackEntryAt(i--).getName());
trace.write(fragment.getTag() + "[CLEARING_HISTORY] = true;", trace.categories.NativeLifecycle);
fragment[CLEARING_HISTORY] = true;
}
if (this.currentPage) {
fragment = manager.findFragmentByTag(this.currentPage[TAG]);
if (fragment) {
fragment[CLEARING_HISTORY] = true;
trace.write(fragment.getTag() + "[CLEARING_HISTORY] = true;", trace.categories.NativeLifecycle);
}
}
if (backStackEntryCount) {
var firstEntryName = manager.getBackStackEntryAt(0).getName();
trace.write("manager.popBackStack(" + firstEntryName + ", android.app.FragmentManager.POP_BACK_STACK_INCLUSIVE);", trace.categories.NativeLifecycle);
manager.popBackStack(firstEntryName, android.app.FragmentManager.POP_BACK_STACK_INCLUSIVE);
}
this._currentEntry = null;
navDepth = -1;
}
navDepth++;
var fragmentTransaction = manager.beginTransaction();
var currentFragmentTag;
var currentFragment;
if (this.currentPage) {
currentFragmentTag = this.currentPage[TAG];
currentFragment = manager.findFragmentByTag(currentFragmentTag);
}
var newFragmentTag = "fragment" + navDepth;
var newFragment = new FragmentClass();
var args = new android.os.Bundle();
args.putInt(FRAMEID, this._android.frameId);
newFragment.setArguments(args);
var animated = this._getIsAnimatedNavigation(backstackEntry.entry);
var navigationTransition = this._getNavigationTransition(backstackEntry.entry);
if (currentFragment) {
transitionModule._clearForwardTransitions(currentFragment);
}
if (animated && navigationTransition) {
transitionModule._setAndroidFragmentTransitions(navigationTransition, currentFragment, newFragment, fragmentTransaction);
}
newFragment.frame = this;
newFragment.entry = backstackEntry;
backstackEntry[BACKSTACK_TAG] = newFragmentTag;
backstackEntry[NAV_DEPTH] = navDepth;
backstackEntry.resolvedPage[TAG] = newFragmentTag;
if (isFirstNavigation) {
fragmentTransaction.add(this.containerViewId, newFragment, newFragmentTag);
trace.write("fragmentTransaction.add(" + newFragmentTag + ");", trace.categories.NativeLifecycle);
} else {
if (this.android.cachePagesOnNavigate && !backstackEntry.entry.clearHistory) {
if (currentFragment) {
fragmentTransaction.hide(currentFragment);
trace.write("fragmentTransaction.hide(" + currentFragmentTag + ");", trace.categories.NativeLifecycle);
} else {
trace.write("Could not find " + currentFragmentTag + " to hide.", trace.categories.NativeLifecycle);
}
fragmentTransaction.add(this.containerViewId, newFragment, newFragmentTag);
trace.write("fragmentTransaction.add(" + newFragmentTag + ");", trace.categories.NativeLifecycle);
} else {
fragmentTransaction.replace(this.containerViewId, newFragment, newFragmentTag);
trace.write("fragmentTransaction.replace(" + newFragmentTag + ");", trace.categories.NativeLifecycle);
}
if (this.backStack.length > 0 && this._currentEntry) {
var backstackTag = this._currentEntry[BACKSTACK_TAG];
fragmentTransaction.addToBackStack(backstackTag);
trace.write("fragmentTransaction.addToBackStack(" + backstackTag + ");", trace.categories.NativeLifecycle);
}
}
if (!isFirstNavigation) {
ensureAnimationFixed();
if (this.android.cachePagesOnNavigate && animationFixed < 0) {
fragmentTransaction.setTransition(android.app.FragmentTransaction.TRANSIT_NONE);
} else {
var transit = animated ? android.app.FragmentTransaction.TRANSIT_FRAGMENT_OPEN : android.app.FragmentTransaction.TRANSIT_NONE;
fragmentTransaction.setTransition(transit);
}
}
fragmentTransaction.commit();
trace.write("fragmentTransaction.commit();", trace.categories.NativeLifecycle);
};
Frame.prototype._goBackCore = function(backstackEntry) {
navDepth = backstackEntry[NAV_DEPTH];
if (this._currentEntry) {
this._currentEntry[IS_BACK] = true;
}
trace.write(this + "._goBackCore(pageId: " + backstackEntry.resolvedPage.id + ", backstackVisible: " + this._isEntryBackstackVisible(backstackEntry) + ", clearHistory: " + backstackEntry.entry.clearHistory + "), navDepth: " + navDepth, trace.categories.Navigation);
var manager = this._android.activity.getFragmentManager();
if (manager.getBackStackEntryCount() > 0) {
manager.popBackStack(backstackEntry[BACKSTACK_TAG], android.app.FragmentManager.POP_BACK_STACK_INCLUSIVE);
}
};
Frame.prototype._createUI = function() {
var root = new org.nativescript.widgets.ContentLayout(this._context);
if (this._containerViewId < 0) {
this._containerViewId = android.view.View.generateViewId();
}
this._android.rootViewGroup = root;
this._android.rootViewGroup.setId(this._containerViewId);
this._android.rootViewGroup.addOnAttachStateChangeListener(this._listener);
};
Frame.prototype.onNativeViewAttachedToWindow = function(view) {
if (this._delayedNavigationEntry) {
this._navigateCore(this._delayedNavigationEntry);
this._delayedNavigationEntry = undefined;
}
};
Frame.prototype.onNativeViewDetachedToWindow = function(view) {};
Frame.prototype._popFromFrameStack = function() {
if (!this._isInFrameStack) {
return;
}
_super.prototype._popFromFrameStack.call(this);
if (this._android.hasOwnActivity) {
this._android.activity.finish();
}
};
Frame.prototype._clearAndroidReference = function() {
this._android.rootViewGroup.removeOnAttachStateChangeListener(this._listener);
this._android.rootViewGroup = null;
};
Frame.prototype._printNativeBackStack = function() {
if (!this._android.activity) {
return;
}
var manager = this._android.activity.getFragmentManager();
var length = manager.getBackStackEntryCount();
var i = length - 1;
console.log("---------------------------");
console.log("Fragment Manager Back Stack (" + length + ")");
while (i >= 0) {
var fragment = manager.findFragmentByTag(manager.getBackStackEntryAt(i--).getName());
console.log("[ " + fragment.getTag() + " ]");
}
};
Frame.prototype._printFrameBackStack = function() {
var length = this.backStack.length;
var i = length - 1;
console.log("---------------------------");
console.log("Frame Back Stack (" + length + ")");
while (i >= 0) {
var backstackEntry = this.backStack[i--];
console.log("[ " + backstackEntry.resolvedPage.id + " ]");
}
};
Frame.prototype._getNavBarVisible = function(page) {
if (types.isDefined(page.actionBarHidden)) {
return !page.actionBarHidden;
}
if (this._android && types.isDefined(this._android.showActionBar)) {
return this._android.showActionBar;
}
return true;
};
Frame.prototype._processNavigationContext = function(navigationContext) {
var _this = this;
var activity = this._android.activity;
if (activity) {
var isForegroundActivity = activity === application.android.foregroundActivity;
var isPaused = application.android.paused;
if (activity && !isForegroundActivity || isForegroundActivity && isPaused) {
var weakActivity_1 = new WeakRef(activity);
var resume_1 = function(args) {
var weakActivityInstance = weakActivity_1.get();
var isCurrent = args.activity === weakActivityInstance;
if (!weakActivityInstance) {
trace.write("Frame _processNavigationContext: Drop For Activity GC-ed", trace.categories.Navigation);
unsubscribe_1();
return;
}
if (isCurrent) {
trace.write("Frame _processNavigationContext: Activity.Resumed, Continue", trace.categories.Navigation);
_super.prototype._processNavigationContext.call(_this, navigationContext);
unsubscribe_1();
}
};
var unsubscribe_1 = function() {
trace.write("Frame _processNavigationContext: Unsubscribe from Activity.Resumed", trace.categories.Navigation);
application.android.off(application.AndroidApplication.activityResumedEvent, resume_1);
application.android.off(application.AndroidApplication.activityStoppedEvent, unsubscribe_1);
application.android.off(application.AndroidApplication.activityDestroyedEvent, unsubscribe_1);
};
trace.write("Frame._processNavigationContext: Subscribe for Activity.Resumed", trace.categories.Navigation);
application.android.on(application.AndroidApplication.activityResumedEvent, resume_1);
application.android.on(application.AndroidApplication.activityStoppedEvent, unsubscribe_1);
application.android.on(application.AndroidApplication.activityDestroyedEvent, unsubscribe_1);
return;
}
}
_super.prototype._processNavigationContext.call(this, navigationContext);
};
return Frame;
}(frameCommon.Frame);
exports.Frame = Frame;
var framesCounter = 0;
var framesCache = new Array();
var AndroidFrame = function(_super) {
__extends(AndroidFrame, _super);
function AndroidFrame(owner) {
_super.call(this);
this.hasOwnActivity = false;
this._showActionBar = true;
this._owner = owner;
this.frameId = framesCounter++;
framesCache.push(new WeakRef(this));
}
Object.defineProperty(AndroidFrame.prototype, "showActionBar", {
get: function() {
return this._showActionBar;
},
set: function(value) {
if (this._showActionBar !== value) {
this._showActionBar = value;
if (this.owner.currentPage) {
this.owner.currentPage.actionBar.update();
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "activity", {
get: function() {
var activity = this.owner._context;
if (activity) {
return activity;
}
var currView = this._owner.parent;
while (currView) {
if (currView instanceof Frame) {
return currView.android.activity;
}
currView = currView.parent;
}
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "actionBar", {
get: function() {
var activity = this.currentActivity;
if (!activity) {
return undefined;
}
var bar = activity.getActionBar();
if (!bar) {
return undefined;
}
return bar;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "currentActivity", {
get: function() {
var activity = this.activity;
if (activity) {
return activity;
}
var stack = frameCommon.stack(), length = stack.length, i = length - 1, frame;
for (i; i >= 0; i--) {
frame = stack[i];
activity = frame.android.activity;
if (activity) {
return activity;
}
}
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "owner", {
get: function() {
return this._owner;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "cachePagesOnNavigate", {
get: function() {
return this._cachePagesOnNavigate;
},
set: function(value) {
if (this._cachePagesOnNavigate !== value) {
if (this._owner.backStack.length > 0) {
throw new Error("Cannot set cachePagesOnNavigate if there are items in the back stack.");
}
this._cachePagesOnNavigate = value;
}
},
enumerable: true,
configurable: true
});
AndroidFrame.prototype.canGoBack = function() {
if (!this.activity) {
return false;
}
return this.activity.getIntent().getAction() !== android.content.Intent.ACTION_MAIN;
};
return AndroidFrame;
}(observable_1.Observable);
function findPageForFragment(fragment, frame) {
var fragmentTag = fragment.getTag();
var page;
var entry;
trace.write("Finding page for " + fragmentTag + ".", trace.categories.NativeLifecycle);
if (fragmentTag === pages.DIALOG_FRAGMENT_TAG) {
trace.write("No need to find page for dialog fragment.", trace.categories.NativeLifecycle);
return;
}
if (frame.currentPage && frame.currentPage[TAG] === fragmentTag) {
page = frame.currentPage;
entry = frame._currentEntry;
trace.write("Current page matches fragment " + fragmentTag + ".", trace.categories.NativeLifecycle);
} else {
var backStack = frame.backStack;
for (var i = 0; i < backStack.length; i++) {
if (backStack[i].resolvedPage[TAG] === fragmentTag) {
entry = backStack[i];
break;
}
}
if (entry) {
page = entry.resolvedPage;
trace.write("Found " + page + " for " + fragmentTag, trace.categories.NativeLifecycle);
}
}
if (page) {
fragment.frame = frame;
fragment.entry = entry;
page[TAG] = fragmentTag;
} else {}
}
function startActivity(activity, frameId) {
var intent = new android.content.Intent(activity, com.tns.NativeScriptActivity.class);
intent.setAction(android.content.Intent.ACTION_DEFAULT);
intent.putExtra(INTENT_EXTRA, frameId);
activity.startActivity(intent);
}
function getFrameById(frameId) {
for (var i = 0; i < framesCache.length; i++) {
var aliveFrame = framesCache[i].get();
if (aliveFrame && aliveFrame.frameId === frameId) {
return aliveFrame.owner;
}
}
return null;
}
var animationFixed;
function ensureAnimationFixed() {
if (!animationFixed) {
animationFixed = android.os.Build.VERSION.SDK_INT >= 19 ? 1 : -1;
}
}
var FragmentClass;
var NativeScriptActivity;
exports.evalLazy = function() {
FragmentClass = function(_super) {
__extends(FragmentClass, _super);
function FragmentClass() {
_super.call(this);
return global.__native(this);
}
FragmentClass.prototype.onHiddenChanged = function(hidden) {
trace.write(this.getTag() + ".onHiddenChanged(" + hidden + ")", trace.categories.NativeLifecycle);
_super.prototype.onHiddenChanged.call(this, hidden);
if (hidden) {
onFragmentHidden(this);
} else {
onFragmentShown(this);
}
};
FragmentClass.prototype.onCreateAnimator = function(transit, enter, nextAnim) {
var animator = transitionModule._onFragmentCreateAnimator(this, nextAnim);
if (!animator) {
animator = _super.prototype.onCreateAnimator.call(this, transit, enter, nextAnim);
}
trace.write(this.getTag() + ".onCreateAnimator(" + transit + ", " + enter + ", " + nextAnim + "): " + animator, trace.categories.NativeLifecycle);
return animator;
};
FragmentClass.prototype.onCreate = function(savedInstanceState) {
trace.write(this.getTag() + ".onCreate(" + savedInstanceState + ")", trace.categories.NativeLifecycle);
_super.prototype.onCreate.call(this, savedInstanceState);
_super.prototype.setHasOptionsMenu.call(this, true);
if (!this.entry) {
var frameId = this.getArguments().getInt(FRAMEID);
var frame = getFrameById(frameId);
if (frame) {
this.frame = frame;
} else {
throw new Error("Cannot find Frame for " + this);
}
findPageForFragment(this, this.frame);
}
};
FragmentClass.prototype.onCreateView = function(inflater, container, savedInstanceState) {
trace.write(this.getTag() + ".onCreateView(inflater, container, " + savedInstanceState + ")", trace.categories.NativeLifecycle);
var entry = this.entry;
var page = entry.resolvedPage;
if (savedInstanceState && savedInstanceState.getBoolean(HIDDEN, false)) {
this.getFragmentManager().beginTransaction().hide(this).commit();
page._onAttached(this.getActivity());
} else {
onFragmentShown(this);
}
return page._nativeView;
};
FragmentClass.prototype.onSaveInstanceState = function(outState) {
trace.write(this.getTag() + ".onSaveInstanceState(" + outState + ")", trace.categories.NativeLifecycle);
_super.prototype.onSaveInstanceState.call(this, outState);
if (this.isHidden()) {
outState.putBoolean(HIDDEN, true);
}
};
FragmentClass.prototype.onDestroyView = function() {
trace.write(this.getTag() + ".onDestroyView()", trace.categories.NativeLifecycle);
_super.prototype.onDestroyView.call(this);
onFragmentHidden(this);
var entry = this.entry;
var page = entry.resolvedPage;
if (page._context) {
page._onDetached(true);
}
};
FragmentClass.prototype.onDestroy = function() {
trace.write(this.getTag() + ".onDestroy()", trace.categories.NativeLifecycle);
_super.prototype.onDestroy.call(this);
utils.GC();
};
FragmentClass = __decorate([ JavaProxy("com.tns.FragmentClass") ], FragmentClass);
return FragmentClass;
}(android.app.Fragment);
NativeScriptActivity = function(_super) {
__extends(NativeScriptActivity, _super);
function NativeScriptActivity() {
_super.call(this);
return global.__native(this);
}
NativeScriptActivity.prototype.onCreate = function(savedInstanceState) {
trace.write("NativeScriptActivity.onCreate(" + savedInstanceState + ")", trace.categories.NativeLifecycle);
var app = application.android;
var intent = this.getIntent();
if (application.onLaunch) {
application.onLaunch(intent);
}
var args = {
eventName: application.launchEvent,
object: app,
android: intent
};
application.notify(args);
var frameId = -1;
var rootView = args.root;
var extras = intent.getExtras();
if (extras) {
frameId = extras.getInt(INTENT_EXTRA, -1);
} else if (savedInstanceState) {
frameId = savedInstanceState.getInt(INTENT_EXTRA, -1);
}
var frame;
var navParam;
if (frameId >= 0) {
rootView = getFrameById(frameId);
}
if (!rootView) {
navParam = application.mainEntry;
if (!navParam) {
navParam = application.mainModule;
}
if (navParam) {
frame = new Frame();
} else {
throw new Error("A Frame must be used to navigate to a Page.");
}
rootView = frame;
}
var isRestart = !!savedInstanceState && activityInitialized;
_super.prototype.onCreate.call(this, isRestart ? savedInstanceState : null);
this.rootView = rootView;
rootView._onAttached(this);
this.setContentView(rootView._nativeView, new org.nativescript.widgets.CommonLayoutParams());
if (frame) {
frame.navigate(navParam);
}
activityInitialized = true;
};
NativeScriptActivity.prototype.onSaveInstanceState = function(outState) {
_super.prototype.onSaveInstanceState.call(this, outState);
var view = this.rootView;
if (view instanceof Frame) {
outState.putInt(INTENT_EXTRA, view.android.frameId);
}
};
NativeScriptActivity.prototype.onStart = function() {
_super.prototype.onStart.call(this);
trace.write("NativeScriptActivity.onStart();", trace.categories.NativeLifecycle);
var rootView = this.rootView;
if (rootView && !rootView.isLoaded) {
rootView.onLoaded();
}
};
NativeScriptActivity.prototype.onStop = function() {
_super.prototype.onStop.call(this);
trace.write("NativeScriptActivity.onStop();", trace.categories.NativeLifecycle);
var rootView = this.rootView;
if (rootView && rootView.isLoaded) {
rootView.onUnloaded();
}
};
NativeScriptActivity.prototype.onDestroy = function() {
var rootView = this.rootView;
if (rootView && rootView._context) {
rootView._onDetached(true);
}
_super.prototype.onDestroy.call(this);
trace.write("NativeScriptActivity.onDestroy();", trace.categories.NativeLifecycle);
};
NativeScriptActivity.prototype.onBackPressed = function() {
trace.write("NativeScriptActivity.onBackPressed;", trace.categories.NativeLifecycle);
var args = {
eventName: "activityBackPressed",
object: application.android,
activity: this,
cancel: false
};
application.android.notify(args);
if (args.cancel) {
return;
}
if (!frameCommon.goBack()) {
_super.prototype.onBackPressed.call(this);
}
};
NativeScriptActivity.prototype.onActivityResult = function(requestCode, resultCode, data) {
_super.prototype.onActivityResult.call(this, requestCode, resultCode, data);
trace.write("NativeScriptActivity.onActivityResult(" + requestCode + ", " + resultCode + ", " + data + ")", trace.categories.NativeLifecycle);
var result = application.android.onActivityResult;
if (result) {
result(requestCode, resultCode, data);
}
application.android.notify({
eventName: "activityResult",
object: application.android,
activity: this,
requestCode: requestCode,
resultCode: resultCode,
intent: data
});
};
NativeScriptActivity = __decorate([ JavaProxy("com.tns.NativeScriptActivity") ], NativeScriptActivity);
return NativeScriptActivity;
}(android.app.Activity);
};
}, function(module, exports, __webpack_require__) {
var view_1 = __webpack_require__(11);
var page_1 = __webpack_require__(66);
var types_1 = __webpack_require__(13);
var trace = __webpack_require__(26);
var file_name_resolver_1 = __webpack_require__(38);
var fs = __webpack_require__(18);
var platform = __webpack_require__(39);
var builder;
function ensureBuilder() {
if (!builder) {
builder = __webpack_require__(75);
}
}
var frameStack = [];
function buildEntryFromArgs(arg) {
var entry;
if (arg instanceof page_1.Page) {
throw new Error("Navigating to a Page instance is no longer supported. Please navigate by using either a module name or a page factory function.");
} else if (types_1.isString(arg)) {
entry = {
moduleName: arg
};
} else if (types_1.isFunction(arg)) {
entry = {
create: arg
};
} else {
entry = arg;
}
return entry;
}
function reloadPage() {
var frame = exports.topmost();
if (frame) {
var currentEntry = frame._currentEntry.entry;
var newEntry = {
animated: false,
clearHistory: true,
context: currentEntry.context,
create: currentEntry.create,
moduleName: currentEntry.moduleName,
backstackVisible: currentEntry.backstackVisible
};
frame.navigate(newEntry);
}
}
exports.reloadPage = reloadPage;
function resolvePageFromEntry(entry) {
var page;
if (entry.create) {
page = entry.create();
if (!(page && page instanceof page_1.Page)) {
throw new Error("Failed to create Page with entry.create() function.");
}
} else if (entry.moduleName) {
var currentAppPath = fs.knownFolders.currentApp().path;
var moduleNamePath = fs.path.join(currentAppPath, entry.moduleName);
var moduleExports;
if (global.moduleExists(entry.moduleName)) {
trace.write("Loading pre-registered JS module: " + entry.moduleName, trace.categories.Navigation);
moduleExports = global.loadModule(entry.moduleName);
} else {
var moduleExportsResolvedPath = file_name_resolver_1.resolveFileName(moduleNamePath, "js");
if (moduleExportsResolvedPath) {
trace.write("Loading JS file: " + moduleExportsResolvedPath, trace.categories.Navigation);
moduleExportsResolvedPath = moduleExportsResolvedPath.substr(0, moduleExportsResolvedPath.length - 3);
moduleExports = global.loadModule(moduleExportsResolvedPath);
}
}
if (moduleExports && moduleExports.createPage) {
trace.write("Calling createPage()", trace.categories.Navigation);
page = moduleExports.createPage();
} else {
page = pageFromBuilder(moduleNamePath, moduleExports);
}
if (!(page && page instanceof page_1.Page)) {
throw new Error("Failed to load Page from entry.moduleName: " + entry.moduleName);
}
var cssFileName = file_name_resolver_1.resolveFileName(moduleNamePath, "css");
if (cssFileName && !page["cssFile"]) {
page.addCssFile(cssFileName);
}
}
return page;
}
exports.resolvePageFromEntry = resolvePageFromEntry;
function pageFromBuilder(moduleNamePath, moduleExports) {
var page;
var element;
var fileName = file_name_resolver_1.resolveFileName(moduleNamePath, "xml");
if (fileName) {
trace.write("Loading XML file: " + fileName, trace.categories.Navigation);
ensureBuilder();
element = builder.load(fileName, moduleExports);
if (element instanceof page_1.Page) {
page = element;
}
}
return page;
}
var Frame = function(_super) {
__extends(Frame, _super);
function Frame() {
_super.call(this);
this._isInFrameStack = false;
this._backStack = new Array();
this._navigationQueue = new Array();
}
Frame.prototype.canGoBack = function() {
return this._backStack.length > 0;
};
Frame.prototype.goBack = function(backstackEntry) {
trace.write("GO BACK", trace.categories.Navigation);
if (!this.canGoBack()) {
return;
}
if (!backstackEntry) {
backstackEntry = this._backStack.pop();
} else {
var backIndex = this._backStack.indexOf(backstackEntry);
if (backIndex < 0) {
return;
}
this._backStack.splice(backIndex);
}
var navigationContext = {
entry: backstackEntry,
isBackNavigation: true
};
this._navigationQueue.push(navigationContext);
if (this._navigationQueue.length === 1) {
this._processNavigationContext(navigationContext);
} else {
trace.write("Going back scheduled", trace.categories.Navigation);
}
};
Frame.prototype.navigate = function(param) {
trace.write("NAVIGATE", trace.categories.Navigation);
var entry = buildEntryFromArgs(param);
var page = resolvePageFromEntry(entry);
this._pushInFrameStack();
var backstackEntry = {
entry: entry,
resolvedPage: page
};
var navigationContext = {
entry: backstackEntry,
isBackNavigation: false
};
this._navigationQueue.push(navigationContext);
if (this._navigationQueue.length === 1) {
this._processNavigationContext(navigationContext);
} else {
trace.write("Navigation scheduled", trace.categories.Navigation);
}
};
Frame.prototype._processNavigationQueue = function(page) {
if (this._navigationQueue.length === 0) {
return;
}
var entry = this._navigationQueue[0].entry;
var currentNavigationPage = entry.resolvedPage;
if (page !== currentNavigationPage) {
throw new Error("Corrupted navigation stack; page: " + page.id + "; currentNavigationPage: " + currentNavigationPage.id);
}
this._navigationQueue.shift();
if (this._navigationQueue.length > 0) {
var navigationContext = this._navigationQueue[0];
this._processNavigationContext(navigationContext);
}
this._updateActionBar();
};
Frame.prototype.navigationQueueIsEmpty = function() {
return this._navigationQueue.length === 0;
};
Frame.prototype._isEntryBackstackVisible = function(entry) {
if (!entry) {
return false;
}
var backstackVisibleValue = entry.entry.backstackVisible;
var backstackHidden = types_1.isDefined(backstackVisibleValue) && !backstackVisibleValue;
return !backstackHidden;
};
Frame.prototype._updateActionBar = function(page) {};
Frame.prototype._processNavigationContext = function(navigationContext) {
if (navigationContext.isBackNavigation) {
this.performGoBack(navigationContext);
} else {
this.performNavigation(navigationContext);
}
};
Frame.prototype.performNavigation = function(navigationContext) {
var navContext = navigationContext.entry;
this._onNavigatingTo(navContext, navigationContext.isBackNavigation);
if (navigationContext.entry.entry.clearHistory) {
this._backStack.length = 0;
} else if (this._isEntryBackstackVisible(this._currentEntry)) {
this._backStack.push(this._currentEntry);
}
this._navigateCore(navContext);
this._onNavigatedTo(navContext, false);
};
Frame.prototype.performGoBack = function(navigationContext) {
var navContext = navigationContext.entry;
this._onNavigatingTo(navContext, navigationContext.isBackNavigation);
this._goBackCore(navContext);
this._onNavigatedTo(navContext, true);
};
Frame.prototype._goBackCore = function(backstackEntry) {};
Frame.prototype._navigateCore = function(backstackEntry) {};
Frame.prototype._onNavigatingTo = function(backstackEntry, isBack) {
if (this.currentPage) {
this.currentPage.onNavigatingFrom(isBack);
}
backstackEntry.resolvedPage.onNavigatingTo(backstackEntry.entry.context, isBack);
};
Frame.prototype._onNavigatedTo = function(backstackEntry, isBack) {
if (this.currentPage) {
this.currentPage.onNavigatedFrom(isBack);
}
};
Object.defineProperty(Frame.prototype, "animated", {
get: function() {
return this._animated;
},
set: function(value) {
this._animated = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "transition", {
get: function() {
return this._transition;
},
set: function(value) {
this._transition = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "backStack", {
get: function() {
return this._backStack.slice();
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "currentPage", {
get: function() {
if (this._currentEntry) {
return this._currentEntry.resolvedPage;
}
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "currentEntry", {
get: function() {
return this._currentEntry.entry;
},
enumerable: true,
configurable: true
});
Frame.prototype._pushInFrameStack = function() {
if (this._isInFrameStack) {
return;
}
frameStack.push(this);
this._isInFrameStack = true;
};
Frame.prototype._popFromFrameStack = function() {
if (!this._isInFrameStack) {
return;
}
var top = _topmost();
if (top !== this) {
throw new Error("Cannot pop a Frame which is not at the top of the navigation stack.");
}
frameStack.pop();
this._isInFrameStack = false;
};
Object.defineProperty(Frame.prototype, "_childrenCount", {
get: function() {
if (this.currentPage) {
return 1;
}
return 0;
},
enumerable: true,
configurable: true
});
Frame.prototype._eachChildView = function(callback) {
if (this.currentPage) {
callback(this.currentPage);
}
};
Frame.prototype._getIsAnimatedNavigation = function(entry) {
if (entry && types_1.isDefined(entry.animated)) {
return entry.animated;
}
if (types_1.isDefined(this.animated)) {
return this.animated;
}
return Frame.defaultAnimatedNavigation;
};
Frame.prototype._getNavigationTransition = function(entry) {
if (entry) {
if (platform.device.os === platform.platformNames.ios && types_1.isDefined(entry.transitioniOS)) {
return entry.transitioniOS;
}
if (platform.device.os === platform.platformNames.android && types_1.isDefined(entry.transitionAndroid)) {
return entry.transitionAndroid;
}
if (entry && types_1.isDefined(entry.transition)) {
return entry.transition;
}
}
if (types_1.isDefined(this.transition)) {
return this.transition;
}
return Frame.defaultTransition;
};
Object.defineProperty(Frame.prototype, "navigationBarHeight", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Frame.prototype._getNavBarVisible = function(page) {
throw new Error();
};
Frame.prototype._addViewToNativeVisualTree = function(child) {
return true;
};
Frame.prototype._removeViewFromNativeVisualTree = function(child) {
child._isAddedToNativeVisualTree = false;
};
Frame.androidOptionSelectedEvent = "optionSelected";
Frame.defaultAnimatedNavigation = true;
return Frame;
}(view_1.CustomLayoutView);
exports.Frame = Frame;
var _topmost = function() {
if (frameStack.length > 0) {
return frameStack[frameStack.length - 1];
}
return undefined;
};
exports.topmost = _topmost;
function goBack() {
var top = _topmost();
if (top.canGoBack()) {
top.goBack();
return true;
}
if (frameStack.length > 1) {
top._popFromFrameStack();
}
return false;
}
exports.goBack = goBack;
function stack() {
return frameStack;
}
exports.stack = stack;
}, function(module, exports, __webpack_require__) {
var viewCommon = __webpack_require__(12);
var trace = __webpack_require__(26);
var utils = __webpack_require__(21);
var types = __webpack_require__(13);
var style = __webpack_require__(14);
var enums = __webpack_require__(23);
var background = __webpack_require__(43);
global.moduleMerge(viewCommon, exports);
var ANDROID = "_android";
var NATIVE_VIEW = "_nativeView";
var VIEW_GROUP = "_viewGroup";
function onAutomationTextPropertyChanged(data) {
var view = data.object;
view._nativeView.setContentDescription(data.newValue);
}
viewCommon.View.automationTextProperty.metadata.onSetNativeValue = onAutomationTextPropertyChanged;
function onIdPropertyChanged(data) {
var view = data.object;
view._nativeView.setTag(data.newValue);
}
viewCommon.View.idProperty.metadata.onSetNativeValue = onIdPropertyChanged;
function onTranslateXPropertyChanged(data) {
var view = data.object;
view._nativeView.setTranslationX(data.newValue * utils.layout.getDisplayDensity());
}
viewCommon.View.translateXProperty.metadata.onSetNativeValue = onTranslateXPropertyChanged;
function onTranslateYPropertyChanged(data) {
var view = data.object;
view._nativeView.setTranslationY(data.newValue * utils.layout.getDisplayDensity());
}
viewCommon.View.translateYProperty.metadata.onSetNativeValue = onTranslateYPropertyChanged;
function onScaleXPropertyChanged(data) {
var view = data.object;
view._nativeView.setScaleX(data.newValue);
}
viewCommon.View.scaleXProperty.metadata.onSetNativeValue = onScaleXPropertyChanged;
function onScaleYPropertyChanged(data) {
var view = data.object;
view._nativeView.setScaleY(data.newValue);
}
viewCommon.View.scaleYProperty.metadata.onSetNativeValue = onScaleYPropertyChanged;
function onOriginXPropertyChanged(data) {
org.nativescript.widgets.OriginPoint.setX(data.object._nativeView, data.newValue);
}
viewCommon.View.originXProperty.metadata.onSetNativeValue = onOriginXPropertyChanged;
function onOriginYPropertyChanged(data) {
org.nativescript.widgets.OriginPoint.setY(data.object._nativeView, data.newValue);
}
viewCommon.View.originYProperty.metadata.onSetNativeValue = onOriginYPropertyChanged;
function onRotatePropertyChanged(data) {
var view = data.object;
view._nativeView.setRotation(data.newValue);
}
viewCommon.View.rotateProperty.metadata.onSetNativeValue = onRotatePropertyChanged;
function onIsEnabledPropertyChanged(data) {
var view = data.object;
view._nativeView.setEnabled(data.newValue);
}
viewCommon.View.isEnabledProperty.metadata.onSetNativeValue = onIsEnabledPropertyChanged;
function onIsUserInteractionEnabledPropertyChanged(data) {
var view = data.object;
view._updateOnTouchListener(data.newValue);
}
viewCommon.View.isUserInteractionEnabledProperty.metadata.onSetNativeValue = onIsUserInteractionEnabledPropertyChanged;
var View = function(_super) {
__extends(View, _super);
function View() {
_super.apply(this, arguments);
this._disableUserInteractionListener = new android.view.View.OnTouchListener({
onTouch: function(view, event) {
return true;
}
});
}
View.prototype._updateOnTouchListener = function(isUserInteractionEnabled) {
if (!isUserInteractionEnabled) {
this._nativeView.setOnTouchListener(this._disableUserInteractionListener);
return;
}
if (this._gesturesListener) {
this._nativeView.setOnTouchListener(this._gesturesListener);
return;
}
this._nativeView.setOnTouchListener(null);
};
Object.defineProperty(View.prototype, "gesturesListener", {
set: function(value) {
this._gesturesListener = value;
this._updateOnTouchListener(this.isUserInteractionEnabled);
},
enumerable: true,
configurable: true
});
View.prototype.observe = function(type, callback, thisArg) {
_super.prototype.observe.call(this, type, callback, thisArg);
if (this.isLoaded && !this.touchListenerIsSet) {
this.setOnTouchListener();
}
};
View.prototype.onLoaded = function() {
_super.prototype.onLoaded.call(this);
this.setOnTouchListener();
};
View.prototype.onUnloaded = function() {
_super.prototype.onUnloaded.call(this);
if (this._nativeView && this._nativeView.setOnTouchListener) {
this._nativeView.setOnTouchListener(null);
this.touchListenerIsSet = false;
}
};
View.prototype.hasGestureObservers = function() {
return this._gestureObservers && Object.keys(this._gestureObservers).length > 0;
};
View.prototype.setOnTouchListener = function() {
if (this._nativeView && this._nativeView.setOnTouchListener && this.hasGestureObservers()) {
this.touchListenerIsSet = true;
var that = new WeakRef(this);
if (this._nativeView.setClickable) {
this._nativeView.setClickable(true);
}
this._nativeView.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(view, motionEvent) {
var owner = that.get();
if (!owner) {
return false;
}
for (var type in owner._gestureObservers) {
var list = owner._gestureObservers[type];
for (var i = 0; i < list.length; i++) {
list[i].androidOnTouchEvent(motionEvent);
}
}
if (!owner._nativeView || !owner._nativeView.onTouchEvent) {
return false;
}
return owner._nativeView.onTouchEvent(motionEvent);
}
}));
}
};
View.prototype._addViewCore = function(view, atIndex) {
if (this._context) {
view._onAttached(this._context);
}
_super.prototype._addViewCore.call(this, view, atIndex);
};
View.prototype._removeViewCore = function(view) {
_super.prototype._removeViewCore.call(this, view);
if (view._context) {
view._onDetached();
}
};
View.prototype._onAttached = function(context) {
if (!context) {
throw new Error("Expected valid android.content.Context instance.");
}
trace.write("calling _onAttached on view " + this._domId, trace.categories.VisualTreeEvents);
if (this._context === context) {
return;
}
if (this._context) {
this._onDetached(true);
}
this._context = context;
this._onContextChanged();
trace.notifyEvent(this, "_onAttached");
if (this._childrenCount > 0) {
var that = this;
var eachChild = function(child) {
child._onAttached(context);
if (!child._isAddedToNativeVisualTree) {
child._isAddedToNativeVisualTree = that._addViewToNativeVisualTree(child);
}
return true;
};
this._eachChildView(eachChild);
}
};
View.prototype._onDetached = function(force) {
if (this._childrenCount > 0) {
var that = this;
var eachChild = function(child) {
if (child._isAddedToNativeVisualTree) {
that._removeViewFromNativeVisualTree(child);
}
if (child._context) {
child._onDetached(force);
}
return true;
};
this._eachChildView(eachChild);
}
trace.write("calling _onDetached on view " + this._domId, trace.categories.VisualTreeEvents);
this._clearAndroidReference();
this._context = undefined;
trace.notifyEvent(this, "_onDetached");
};
View.prototype._clearAndroidReference = function() {
if (this[NATIVE_VIEW] === this[ANDROID]) {
this[NATIVE_VIEW] = undefined;
}
if (this[VIEW_GROUP] === this[ANDROID]) {
this[VIEW_GROUP] = undefined;
}
this[ANDROID] = undefined;
};
View.prototype._onContextChanged = function() {
trace.write("calling _onContextChanged on view " + this._domId, trace.categories.VisualTreeEvents);
this._createUI();
if (this._nativeView && !(this._nativeView.getLayoutParams() instanceof org.nativescript.widgets.CommonLayoutParams)) {
this._nativeView.setLayoutParams(new org.nativescript.widgets.CommonLayoutParams());
}
utils.copyFrom(this._options, this);
delete this._options;
this._syncNativeProperties();
trace.notifyEvent(this, "_onContextChanged");
};
Object.defineProperty(View.prototype, "_nativeView", {
get: function() {
return this.android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isLayoutValid", {
get: function() {
if (this._nativeView) {
return !this._nativeView.isLayoutRequested();
}
return false;
},
enumerable: true,
configurable: true
});
View.prototype.layoutNativeView = function(left, top, right, bottom) {
if (this._nativeView) {
this._nativeView.layout(left, top, right, bottom);
}
};
View.prototype.requestLayout = function() {
_super.prototype.requestLayout.call(this);
if (this._nativeView) {
return this._nativeView.requestLayout();
}
};
View.prototype.measure = function(widthMeasureSpec, heightMeasureSpec) {
_super.prototype.measure.call(this, widthMeasureSpec, heightMeasureSpec);
this.onMeasure(widthMeasureSpec, heightMeasureSpec);
};
View.prototype.layout = function(left, top, right, bottom) {
_super.prototype.layout.call(this, left, top, right, bottom);
this.onLayout(left, top, right, bottom);
};
View.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var view = this._nativeView;
if (view) {
view.measure(widthMeasureSpec, heightMeasureSpec);
this.setMeasuredDimension(view.getMeasuredWidth(), view.getMeasuredHeight());
}
};
View.prototype.onLayout = function(left, top, right, bottom) {
var view = this._nativeView;
if (view) {
this.layoutNativeView(left, top, right, bottom);
}
};
View.prototype._getCurrentLayoutBounds = function() {
if (this._nativeView) {
return {
left: this._nativeView.getLeft(),
top: this._nativeView.getTop(),
right: this._nativeView.getRight(),
bottom: this._nativeView.getBottom()
};
}
return _super.prototype._getCurrentLayoutBounds.call(this);
};
View.prototype.getMeasuredWidth = function() {
if (this._nativeView) {
return this._nativeView.getMeasuredWidth();
}
return _super.prototype.getMeasuredWidth.call(this);
};
View.prototype.getMeasuredHeight = function() {
if (this._nativeView) {
return this._nativeView.getMeasuredHeight();
}
return _super.prototype.getMeasuredHeight.call(this);
};
View.prototype.focus = function() {
if (this._nativeView) {
return this._nativeView.requestFocus();
}
return false;
};
View.resolveSizeAndState = function(size, specSize, specMode, childMeasuredState) {
var result = size;
switch (specMode) {
case utils.layout.UNSPECIFIED:
result = size;
break;

case utils.layout.AT_MOST:
if (specSize < size) {
result = specSize | utils.layout.MEASURED_STATE_TOO_SMALL;
}
break;

case utils.layout.EXACTLY:
result = specSize;
break;
}
return result | childMeasuredState & utils.layout.MEASURED_STATE_MASK;
};
return View;
}(viewCommon.View);
exports.View = View;
var CustomLayoutView = function(_super) {
__extends(CustomLayoutView, _super);
function CustomLayoutView() {
_super.apply(this, arguments);
}
Object.defineProperty(CustomLayoutView.prototype, "android", {
get: function() {
return this._viewGroup;
},
enumerable: true,
configurable: true
});
Object.defineProperty(CustomLayoutView.prototype, "_nativeView", {
get: function() {
return this._viewGroup;
},
enumerable: true,
configurable: true
});
CustomLayoutView.prototype._createUI = function() {
this._viewGroup = new org.nativescript.widgets.ContentLayout(this._context);
};
CustomLayoutView.prototype._addViewToNativeVisualTree = function(child, atIndex) {
_super.prototype._addViewToNativeVisualTree.call(this, child);
if (this._nativeView && child._nativeView) {
if (types.isNullOrUndefined(atIndex) || atIndex >= this._nativeView.getChildCount()) {
this._nativeView.addView(child._nativeView);
} else {
this._nativeView.addView(child._nativeView, atIndex);
}
return true;
}
return false;
};
CustomLayoutView.prototype._removeViewFromNativeVisualTree = function(child) {
_super.prototype._removeViewFromNativeVisualTree.call(this, child);
if (this._nativeView && child._nativeView) {
this._nativeView.removeView(child._nativeView);
trace.notifyEvent(child, "childInLayoutRemovedFromNativeVisualTree");
}
};
return CustomLayoutView;
}(View);
exports.CustomLayoutView = CustomLayoutView;
var ViewStyler = function() {
function ViewStyler() {}
ViewStyler.setBackgroundBorderProperty = function(view, newValue, defaultValue) {
background.ad.onBackgroundOrBorderPropertyChanged(view);
};
ViewStyler.resetBackgroundBorderProperty = function(view, nativeValue) {
background.ad.onBackgroundOrBorderPropertyChanged(view);
};
ViewStyler.setVisibilityProperty = function(view, newValue) {
var androidValue = newValue === enums.Visibility.visible ? android.view.View.VISIBLE : android.view.View.GONE;
view._nativeView.setVisibility(androidValue);
};
ViewStyler.resetVisibilityProperty = function(view, nativeValue) {
view._nativeView.setVisibility(android.view.View.VISIBLE);
};
ViewStyler.setOpacityProperty = function(view, newValue) {
view._nativeView.setAlpha(float(newValue));
};
ViewStyler.resetOpacityProperty = function(view, nativeValue) {
view._nativeView.setAlpha(float(1));
};
ViewStyler.setMinWidthProperty = function(view, newValue) {
view._nativeView.setMinimumWidth(Math.round(newValue * utils.layout.getDisplayDensity()));
};
ViewStyler.resetMinWidthProperty = function(view, nativeValue) {
view._nativeView.setMinimumWidth(0);
};
ViewStyler.setMinHeightProperty = function(view, newValue) {
view._nativeView.setMinimumHeight(Math.round(newValue * utils.layout.getDisplayDensity()));
};
ViewStyler.resetMinHeightProperty = function(view, nativeValue) {
view._nativeView.setMinimumHeight(0);
};
ViewStyler.getNativeLayoutParams = function(nativeView) {
var lp = nativeView.getLayoutParams();
if (!(lp instanceof org.nativescript.widgets.CommonLayoutParams)) {
lp = new org.nativescript.widgets.CommonLayoutParams();
}
return lp;
};
ViewStyler.setNativeLayoutParamsProperty = function(view, params) {
var nativeView = view._nativeView;
var lp = ViewStyler.getNativeLayoutParams(nativeView);
lp.widthPercent = params.widthPercent;
lp.heightPercent = params.heightPercent;
lp.leftMarginPercent = params.leftMarginPercent;
lp.topMarginPercent = params.topMarginPercent;
lp.rightMarginPercent = params.rightMarginPercent;
lp.bottomMarginPercent = params.bottomMarginPercent;
lp.leftMargin = Math.round(params.leftMargin * utils.layout.getDisplayDensity());
lp.topMargin = Math.round(params.topMargin * utils.layout.getDisplayDensity());
lp.rightMargin = Math.round(params.rightMargin * utils.layout.getDisplayDensity());
lp.bottomMargin = Math.round(params.bottomMargin * utils.layout.getDisplayDensity());
var width = params.width * utils.layout.getDisplayDensity();
var height = params.height * utils.layout.getDisplayDensity();
if (width < 0) {
width = -2;
}
if (height < 0) {
height = -2;
}
var gravity = 0;
switch (params.horizontalAlignment) {
case enums.HorizontalAlignment.left:
gravity |= android.view.Gravity.LEFT;
break;

case enums.HorizontalAlignment.center:
gravity |= android.view.Gravity.CENTER_HORIZONTAL;
break;

case enums.HorizontalAlignment.right:
gravity |= android.view.Gravity.RIGHT;
break;

case enums.HorizontalAlignment.stretch:
gravity |= android.view.Gravity.FILL_HORIZONTAL;
if (width < 0) {
width = -1;
}
break;

default:
throw new Error("Invalid horizontalAlignment value: " + params.horizontalAlignment);
}
switch (params.verticalAlignment) {
case enums.VerticalAlignment.top:
gravity |= android.view.Gravity.TOP;
break;

case enums.VerticalAlignment.center || enums.VerticalAlignment.middle:
gravity |= android.view.Gravity.CENTER_VERTICAL;
break;

case enums.VerticalAlignment.bottom:
gravity |= android.view.Gravity.BOTTOM;
break;

case enums.VerticalAlignment.stretch:
gravity |= android.view.Gravity.FILL_VERTICAL;
if (height < 0) {
height = -1;
}
break;

default:
throw new Error("Invalid verticalAlignment value: " + params.verticalAlignment);
}
lp.gravity = gravity;
lp.width = Math.round(width);
lp.height = Math.round(height);
nativeView.setLayoutParams(lp);
};
ViewStyler.resetNativeLayoutParamsProperty = function(view, nativeValue) {
ViewStyler.setNativeLayoutParamsProperty(view, style.nativeLayoutParamsProperty.metadata.defaultValue);
};
ViewStyler.setPaddingProperty = function(view, newValue) {
var density = utils.layout.getDisplayDensity();
var left = Math.round((newValue.left + view.borderWidth) * density);
var top = Math.round((newValue.top + view.borderWidth) * density);
var right = Math.round((newValue.right + view.borderWidth) * density);
var bottom = Math.round((newValue.bottom + view.borderWidth) * density);
view._nativeView.setPadding(left, top, right, bottom);
};
ViewStyler.resetPaddingProperty = function(view, nativeValue) {
var density = utils.layout.getDisplayDensity();
var left = Math.round((nativeValue.left + view.borderWidth) * density);
var top = Math.round((nativeValue.top + view.borderWidth) * density);
var right = Math.round((nativeValue.right + view.borderWidth) * density);
var bottom = Math.round((nativeValue.bottom + view.borderWidth) * density);
view._nativeView.setPadding(left, top, right, bottom);
};
ViewStyler.registerHandlers = function() {
style.registerHandler(style.visibilityProperty, new style.StylePropertyChangedHandler(ViewStyler.setVisibilityProperty, ViewStyler.resetVisibilityProperty));
style.registerHandler(style.opacityProperty, new style.StylePropertyChangedHandler(ViewStyler.setOpacityProperty, ViewStyler.resetOpacityProperty));
style.registerHandler(style.minWidthProperty, new style.StylePropertyChangedHandler(ViewStyler.setMinWidthProperty, ViewStyler.resetMinWidthProperty));
style.registerHandler(style.minHeightProperty, new style.StylePropertyChangedHandler(ViewStyler.setMinHeightProperty, ViewStyler.resetMinHeightProperty));
var borderHandler = new style.StylePropertyChangedHandler(ViewStyler.setBackgroundBorderProperty, ViewStyler.resetBackgroundBorderProperty);
style.registerHandler(style.backgroundInternalProperty, borderHandler);
style.registerHandler(style.borderWidthProperty, borderHandler);
style.registerHandler(style.borderColorProperty, borderHandler);
style.registerHandler(style.borderRadiusProperty, borderHandler);
style.registerHandler(style.nativeLayoutParamsProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativeLayoutParamsProperty, ViewStyler.resetNativeLayoutParamsProperty));
style.registerHandler(style.nativePaddingsProperty, new style.StylePropertyChangedHandler(ViewStyler.setPaddingProperty, ViewStyler.resetPaddingProperty), "TextBase");
style.registerHandler(style.nativePaddingsProperty, new style.StylePropertyChangedHandler(ViewStyler.setPaddingProperty, ViewStyler.resetPaddingProperty), "Button");
style.registerHandler(style.nativePaddingsProperty, new style.StylePropertyChangedHandler(ViewStyler.setPaddingProperty, ViewStyler.resetPaddingProperty), "LayoutBase");
};
return ViewStyler;
}();
exports.ViewStyler = ViewStyler;
ViewStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(13);
var style = __webpack_require__(14);
var styling = __webpack_require__(63);
var trace = __webpack_require__(26);
var gestures = __webpack_require__(64);
var styleScope = __webpack_require__(30);
var enums = __webpack_require__(23);
var utils = __webpack_require__(21);
var proxy_1 = __webpack_require__(48);
var dependency_observable_1 = __webpack_require__(32);
var special_properties_1 = __webpack_require__(55);
var style_1 = __webpack_require__(14);
var visualStateConstants = __webpack_require__(37);
var bindable;
function ensureBindable() {
if (!bindable) {
bindable = __webpack_require__(49);
}
}
var visualState;
function ensureVisualState() {
if (!visualState) {
visualState = __webpack_require__(36);
}
}
special_properties_1.registerSpecialProperty("class", function(instance, propertyValue) {
instance.className = propertyValue;
});
function getEventOrGestureName(name) {
return name.indexOf("on") === 0 ? name.substr(2, name.length - 2) : name;
}
function isEventOrGesture(name, view) {
if (types.isString(name)) {
var eventOrGestureName = getEventOrGestureName(name);
var evt = eventOrGestureName + "Event";
return view.constructor && evt in view.constructor || gestures.fromString(eventOrGestureName.toLowerCase()) !== undefined;
}
return false;
}
exports.isEventOrGesture = isEventOrGesture;
function getViewById(view, id) {
if (!view) {
return undefined;
}
if (view.id === id) {
return view;
}
var retVal;
var descendantsCallback = function(child) {
if (child.id === id) {
retVal = child;
return false;
}
return true;
};
eachDescendant(view, descendantsCallback);
return retVal;
}
exports.getViewById = getViewById;
function eachDescendant(view, callback) {
if (!callback || !view) {
return;
}
var continueIteration;
var localCallback = function(child) {
continueIteration = callback(child);
if (continueIteration) {
child._eachChildView(localCallback);
}
return continueIteration;
};
view._eachChildView(localCallback);
}
exports.eachDescendant = eachDescendant;
function getAncestor(view, criterion) {
var matcher = null;
if (typeof criterion === "string") {
matcher = function(view) {
return view.typeName === criterion;
};
} else {
matcher = function(view) {
return view instanceof criterion;
};
}
for (var parent_1 = view.parent; parent_1 != null; parent_1 = parent_1.parent) {
if (matcher(parent_1)) {
return parent_1;
}
}
return null;
}
exports.getAncestor = getAncestor;
var viewIdCounter = 0;
function onCssClassPropertyChanged(data) {
var view = data.object;
if (types.isString(data.newValue)) {
view._cssClasses = data.newValue.split(" ");
} else {
view._cssClasses.length = 0;
}
}
var cssClassProperty = new dependency_observable_1.Property("cssClass", "View", new proxy_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.AffectsStyle, onCssClassPropertyChanged));
var classNameProperty = new dependency_observable_1.Property("className", "View", new proxy_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.AffectsStyle, onCssClassPropertyChanged));
var idProperty = new dependency_observable_1.Property("id", "View", new proxy_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.AffectsStyle));
var automationTextProperty = new dependency_observable_1.Property("automationText", "View", new proxy_1.PropertyMetadata(undefined));
var translateXProperty = new dependency_observable_1.Property("translateX", "View", new proxy_1.PropertyMetadata(0));
var translateYProperty = new dependency_observable_1.Property("translateY", "View", new proxy_1.PropertyMetadata(0));
var scaleXProperty = new dependency_observable_1.Property("scaleX", "View", new proxy_1.PropertyMetadata(1));
var scaleYProperty = new dependency_observable_1.Property("scaleY", "View", new proxy_1.PropertyMetadata(1));
var originXProperty = new dependency_observable_1.Property("originX", "View", new proxy_1.PropertyMetadata(.5));
var originYProperty = new dependency_observable_1.Property("originY", "View", new proxy_1.PropertyMetadata(.5));
var rotateProperty = new dependency_observable_1.Property("rotate", "View", new proxy_1.PropertyMetadata(0));
var isEnabledProperty = new dependency_observable_1.Property("isEnabled", "View", new proxy_1.PropertyMetadata(true));
var isUserInteractionEnabledProperty = new dependency_observable_1.Property("isUserInteractionEnabled", "View", new proxy_1.PropertyMetadata(true));
var View = function(_super) {
__extends(View, _super);
function View(options) {
_super.call(this);
this._isVisibleCache = true;
this._measuredWidth = Number.NaN;
this._measuredHeight = Number.NaN;
this._oldWidthMeasureSpec = Number.NaN;
this._oldHeightMeasureSpec = Number.NaN;
this._oldLeft = 0;
this._oldTop = 0;
this._oldRight = 0;
this._oldBottom = 0;
this._isLayoutValid = false;
this._isAddedToNativeVisualTree = false;
this._cssClasses = [];
this._gestureObservers = {};
this._options = options;
this._style = new style.Style(this);
this._domId = viewIdCounter++;
this._visualState = visualStateConstants.Normal;
}
View.prototype.getGestureObservers = function(type) {
return this._gestureObservers[type];
};
View.prototype.observe = function(type, callback, thisArg) {
if (!this._gestureObservers[type]) {
this._gestureObservers[type] = [];
}
this._gestureObservers[type].push(gestures.observe(this, type, callback, thisArg));
};
View.prototype.addEventListener = function(arg, callback, thisArg) {
if (types.isString(arg)) {
arg = getEventOrGestureName(arg);
var gesture = gestures.fromString(arg);
if (gesture && !this._isEvent(arg)) {
this.observe(gesture, callback, thisArg);
} else {
var events = arg.split(",");
if (events.length > 0) {
for (var i = 0; i < events.length; i++) {
var evt = events[i].trim();
var gst = gestures.fromString(evt);
if (gst && !this._isEvent(arg)) {
this.observe(gst, callback, thisArg);
} else {
_super.prototype.addEventListener.call(this, evt, callback, thisArg);
}
}
} else {
_super.prototype.addEventListener.call(this, arg, callback, thisArg);
}
}
} else if (types.isNumber(arg)) {
this.observe(arg, callback, thisArg);
}
};
View.prototype.removeEventListener = function(arg, callback, thisArg) {
if (types.isString(arg)) {
var gesture = gestures.fromString(arg);
if (gesture && !this._isEvent(arg)) {
this._disconnectGestureObservers(gesture);
} else {
var events = arg.split(",");
if (events.length > 0) {
for (var i = 0; i < events.length; i++) {
var evt = events[i].trim();
var gst = gestures.fromString(evt);
if (gst && !this._isEvent(arg)) {
this._disconnectGestureObservers(gst);
} else {
_super.prototype.removeEventListener.call(this, evt, callback, thisArg);
}
}
} else {
_super.prototype.removeEventListener.call(this, arg, callback, thisArg);
}
}
} else if (types.isNumber(arg)) {
this._disconnectGestureObservers(arg);
}
};
View.prototype._isEvent = function(name) {
return this.constructor && name + "Event" in this.constructor;
};
View.prototype._disconnectGestureObservers = function(type) {
var observers = this.getGestureObservers(type);
if (observers) {
for (var i = 0; i < observers.length; i++) {
observers[i].disconnect();
}
}
};
View.prototype.getViewById = function(id) {
return getViewById(this, id);
};
Object.defineProperty(View.prototype, "automationText", {
get: function() {
return this._getValue(View.automationTextProperty);
},
set: function(value) {
this._setValue(View.automationTextProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderRadius", {
get: function() {
return this.style.borderRadius;
},
set: function(value) {
this.style.borderRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderWidth", {
get: function() {
return this.style.borderWidth;
},
set: function(value) {
this.style.borderWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderColor", {
get: function() {
return this.style.borderColor;
},
set: function(value) {
this.style.borderColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "color", {
get: function() {
return this.style.color;
},
set: function(value) {
this.style.color = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "backgroundColor", {
get: function() {
return this.style.backgroundColor;
},
set: function(value) {
this.style.backgroundColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "backgroundImage", {
get: function() {
return this.style.backgroundImage;
},
set: function(value) {
this.style.backgroundImage = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "minWidth", {
get: function() {
return this.style.minWidth;
},
set: function(value) {
this.style.minWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "minHeight", {
get: function() {
return this.style.minHeight;
},
set: function(value) {
this.style.minHeight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "width", {
get: function() {
return this.style.width;
},
set: function(value) {
this.style.width = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "height", {
get: function() {
return this.style.height;
},
set: function(value) {
this.style.height = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "margin", {
get: function() {
return this.style.margin;
},
set: function(value) {
this.style.margin = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "marginLeft", {
get: function() {
return this.style.marginLeft;
},
set: function(value) {
this.style.marginLeft = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "marginTop", {
get: function() {
return this.style.marginTop;
},
set: function(value) {
this.style.marginTop = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "marginRight", {
get: function() {
return this.style.marginRight;
},
set: function(value) {
this.style.marginRight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "marginBottom", {
get: function() {
return this.style.marginBottom;
},
set: function(value) {
this.style.marginBottom = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "horizontalAlignment", {
get: function() {
return this.style.horizontalAlignment;
},
set: function(value) {
this.style.horizontalAlignment = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "verticalAlignment", {
get: function() {
return this.style.verticalAlignment;
},
set: function(value) {
this.style.verticalAlignment = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "visibility", {
get: function() {
return this.style.visibility;
},
set: function(value) {
this.style.visibility = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "opacity", {
get: function() {
return this.style.opacity;
},
set: function(value) {
this.style.opacity = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "translateX", {
get: function() {
return this._getValue(View.translateXProperty);
},
set: function(value) {
this._setValue(View.translateXProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "translateY", {
get: function() {
return this._getValue(View.translateYProperty);
},
set: function(value) {
this._setValue(View.translateYProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "scaleX", {
get: function() {
return this._getValue(View.scaleXProperty);
},
set: function(value) {
this._setValue(View.scaleXProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "scaleY", {
get: function() {
return this._getValue(View.scaleYProperty);
},
set: function(value) {
this._setValue(View.scaleYProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "originX", {
get: function() {
return this._getValue(View.originXProperty);
},
set: function(value) {
this._setValue(View.originXProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "originY", {
get: function() {
return this._getValue(View.originYProperty);
},
set: function(value) {
this._setValue(View.originYProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "rotate", {
get: function() {
return this._getValue(View.rotateProperty);
},
set: function(value) {
this._setValue(View.rotateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isEnabled", {
get: function() {
return this._getValue(View.isEnabledProperty);
},
set: function(value) {
this._setValue(View.isEnabledProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "page", {
get: function() {
if (this.parent) {
return this.parent.page;
}
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isUserInteractionEnabled", {
get: function() {
return this._getValue(View.isUserInteractionEnabledProperty);
},
set: function(value) {
this._setValue(View.isUserInteractionEnabledProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "id", {
get: function() {
return this._getValue(View.idProperty);
},
set: function(value) {
this._setValue(View.idProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "cssClass", {
get: function() {
return this._getValue(View.cssClassProperty);
},
set: function(value) {
this._setValue(View.cssClassProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "className", {
get: function() {
return this._getValue(View.cssClassProperty);
},
set: function(value) {
this._setValue(View.cssClassProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "style", {
get: function() {
return this._style;
},
set: function(value) {
throw new Error("View.style property is read-only.");
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isLayoutValid", {
get: function() {
return this._isLayoutValid;
},
set: function(value) {
throw new Error("isLayoutValid is read-only property.");
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "visualState", {
get: function() {
return this._visualState;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "cssType", {
get: function() {
return this.typeName.toLowerCase();
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "parent", {
get: function() {
return this._parent;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isLoaded", {
get: function() {
return this._isLoaded;
},
enumerable: true,
configurable: true
});
View.prototype.onLoaded = function() {
this._isLoaded = true;
this._loadEachChildView();
this._applyStyleFromScope();
this._emit("loaded");
};
View.prototype._loadEachChildView = function() {
if (this._childrenCount > 0) {
var eachChild = function(child) {
child.onLoaded();
return true;
};
this._eachChildView(eachChild);
}
};
View.prototype.onUnloaded = function() {
this._unloadEachChildView();
this._isLoaded = false;
this._emit("unloaded");
};
View.prototype._unloadEachChildView = function() {
if (this._childrenCount > 0) {
var eachChild = function(child) {
child.onUnloaded();
return true;
};
this._eachChildView(eachChild);
}
};
View.prototype._onPropertyChanged = function(property, oldValue, newValue) {
_super.prototype._onPropertyChanged.call(this, property, oldValue, newValue);
if (this._childrenCount > 0) {
var shouldUpdateInheritableProps = property.metadata && property.metadata.inheritable && !(property instanceof styling.Property);
var that = this;
if (shouldUpdateInheritableProps) {
var notifyEachChild = function(child) {
child._setValue(property, that._getValue(property), dependency_observable_1.ValueSource.Inherited);
return true;
};
this._updatingInheritedProperties = true;
this._eachChildView(notifyEachChild);
this._updatingInheritedProperties = false;
}
}
this._checkMetadataOnPropertyChanged(property.metadata);
};
View.prototype._isInheritedChange = function() {
if (this._updatingInheritedProperties) {
return true;
}
var parentView;
parentView = this.parent;
while (parentView) {
if (parentView._updatingInheritedProperties) {
return true;
}
parentView = parentView.parent;
}
return false;
};
View.prototype._checkMetadataOnPropertyChanged = function(metadata) {
if (metadata.affectsLayout) {
this.requestLayout();
}
if (metadata.affectsStyle) {
this.style._resetCssValues();
this._applyStyleFromScope();
}
};
View.prototype.measure = function(widthMeasureSpec, heightMeasureSpec) {
this._setCurrentMeasureSpecs(widthMeasureSpec, heightMeasureSpec);
};
View.prototype.layout = function(left, top, right, bottom) {
this._setCurrentLayoutBounds(left, top, right, bottom);
};
View.prototype.getMeasuredWidth = function() {
return this._measuredWidth & utils.layout.MEASURED_SIZE_MASK;
};
View.prototype.getMeasuredHeight = function() {
return this._measuredHeight & utils.layout.MEASURED_SIZE_MASK;
};
View.prototype.setMeasuredDimension = function(measuredWidth, measuredHeight) {
this._measuredWidth = measuredWidth;
this._measuredHeight = measuredHeight;
trace.write(this + " :setMeasuredDimension: " + measuredWidth + ", " + measuredHeight, trace.categories.Layout);
};
View.prototype.requestLayout = function() {
this._isLayoutValid = false;
};
View.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {};
View.prototype.onLayout = function(left, top, right, bottom) {};
View.prototype.layoutNativeView = function(left, top, right, bottom) {};
View.resolveSizeAndState = function(size, specSize, specMode, childMeasuredState) {
var result = size;
switch (specMode) {
case utils.layout.UNSPECIFIED:
result = size;
break;

case utils.layout.AT_MOST:
if (specSize < size) {
result = Math.round(specSize + .499) | utils.layout.MEASURED_STATE_TOO_SMALL;
}
break;

case utils.layout.EXACTLY:
result = specSize;
break;
}
return Math.round(result + .499) | childMeasuredState & utils.layout.MEASURED_STATE_MASK;
};
View.layoutChild = function(parent, child, left, top, right, bottom) {
if (!child || !child._isVisible) {
return;
}
var density = utils.layout.getDisplayDensity();
var lp = child.style._getValue(style_1.nativeLayoutParamsProperty);
var childTop;
var childLeft;
var childWidth = child.getMeasuredWidth();
var childHeight = child.getMeasuredHeight();
var vAlignment;
if (lp.height >= 0 && child.verticalAlignment === enums.VerticalAlignment.stretch) {
vAlignment = enums.VerticalAlignment.center;
} else {
vAlignment = child.verticalAlignment;
}
var marginTop = lp.topMargin;
var marginBottom = lp.bottomMargin;
var marginLeft = lp.leftMargin;
var marginRight = lp.rightMargin;
switch (vAlignment) {
case enums.VerticalAlignment.top:
childTop = top + marginTop * density;
break;

case enums.VerticalAlignment.center || enums.VerticalAlignment.middle:
childTop = top + (bottom - top - childHeight + (marginTop - marginBottom) * density) / 2;
break;

case enums.VerticalAlignment.bottom:
childTop = bottom - childHeight - marginBottom * density;
break;

case enums.VerticalAlignment.stretch:
default:
childTop = top + marginTop * density;
childHeight = bottom - top - (marginTop + marginBottom) * density;
break;
}
var hAlignment;
if (lp.width >= 0 && child.horizontalAlignment === enums.HorizontalAlignment.stretch) {
hAlignment = enums.HorizontalAlignment.center;
} else {
hAlignment = child.horizontalAlignment;
}
switch (hAlignment) {
case enums.HorizontalAlignment.left:
childLeft = left + marginLeft * density;
break;

case enums.HorizontalAlignment.center:
childLeft = left + (right - left - childWidth + (marginLeft - marginRight) * density) / 2;
break;

case enums.HorizontalAlignment.right:
childLeft = right - childWidth - marginRight * density;
break;

case enums.HorizontalAlignment.stretch:
default:
childLeft = left + marginLeft * density;
childWidth = right - left - (marginLeft + marginRight) * density;
break;
}
var childRight = Math.round(childLeft + childWidth);
var childBottom = Math.round(childTop + childHeight);
childLeft = Math.round(childLeft);
childTop = Math.round(childTop);
trace.write(child.parent + " :layoutChild: " + child + " " + childLeft + ", " + childTop + ", " + childRight + ", " + childBottom, trace.categories.Layout);
child.layout(childLeft, childTop, childRight, childBottom);
};
View.measureChild = function(parent, child, widthMeasureSpec, heightMeasureSpec) {
var measureWidth = 0;
var measureHeight = 0;
if (child && child._isVisible) {
var width = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var height = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = utils.layout.getMeasureSpecMode(heightMeasureSpec);
var childWidthMeasureSpec = View.getMeasureSpec(child, width, widthMode, true);
var childHeightMeasureSpec = View.getMeasureSpec(child, height, heightMode, false);
trace.write(child.parent + " :measureChild: " + child + " " + utils.layout.measureSpecToString(childWidthMeasureSpec) + ", " + utils.layout.measureSpecToString(childHeightMeasureSpec), trace.categories.Layout);
child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
measureWidth = child.getMeasuredWidth();
measureHeight = child.getMeasuredHeight();
var density = utils.layout.getDisplayDensity();
var lp = child.style._getValue(style.nativeLayoutParamsProperty);
measureWidth = Math.round(measureWidth + (lp.leftMargin + lp.rightMargin) * density);
measureHeight = Math.round(measureHeight + (lp.topMargin + lp.bottomMargin) * density);
}
return {
measuredWidth: measureWidth,
measuredHeight: measureHeight
};
};
View.getMeasureSpec = function(view, parentLength, parentSpecMode, horizontal) {
var lp = view.style._getValue(style.nativeLayoutParamsProperty);
var density = utils.layout.getDisplayDensity();
var margins = horizontal ? lp.leftMargin + lp.rightMargin : lp.topMargin + lp.bottomMargin;
margins = Math.round(margins * density);
var resultSize = 0;
var resultMode = 0;
var measureLength = Math.max(0, parentLength - margins);
var childLength = Math.round((horizontal ? lp.width : lp.height) * density);
if (childLength >= 0) {
if (parentSpecMode !== utils.layout.UNSPECIFIED) {
resultSize = Math.min(parentLength, childLength);
} else {
resultSize = childLength;
}
resultMode = utils.layout.EXACTLY;
} else {
switch (parentSpecMode) {
case utils.layout.EXACTLY:
resultSize = measureLength;
var stretched = horizontal ? view.horizontalAlignment === enums.HorizontalAlignment.stretch : view.verticalAlignment === enums.VerticalAlignment.stretch;
resultMode = stretched ? utils.layout.EXACTLY : utils.layout.AT_MOST;
break;

case utils.layout.AT_MOST:
resultSize = measureLength;
resultMode = utils.layout.AT_MOST;
break;

case utils.layout.UNSPECIFIED:
resultSize = 0;
resultMode = utils.layout.UNSPECIFIED;
break;
}
}
return utils.layout.makeMeasureSpec(resultSize, resultMode);
};
View.prototype._setCurrentMeasureSpecs = function(widthMeasureSpec, heightMeasureSpec) {
var changed = this._oldWidthMeasureSpec !== widthMeasureSpec || this._oldHeightMeasureSpec !== heightMeasureSpec;
this._oldWidthMeasureSpec = widthMeasureSpec;
this._oldHeightMeasureSpec = heightMeasureSpec;
return changed;
};
View.prototype._getCurrentLayoutBounds = function() {
return {
left: this._oldLeft,
top: this._oldTop,
right: this._oldRight,
bottom: this._oldBottom
};
};
View.prototype._setCurrentLayoutBounds = function(left, top, right, bottom) {
this._isLayoutValid = true;
var boundsChanged = this._oldLeft !== left || this._oldTop !== top || this._oldRight !== right || this._oldBottom !== bottom;
var sizeChanged = this._oldRight - this._oldLeft !== right - left || this._oldBottom - this._oldTop !== bottom - top;
this._oldLeft = left;
this._oldTop = top;
this._oldRight = right;
this._oldBottom = bottom;
return {
boundsChanged: boundsChanged,
sizeChanged: sizeChanged
};
};
View.prototype._applyStyleFromScope = function() {
var rootPage = this.page;
if (!rootPage || !rootPage.isLoaded) {
return;
}
var scope = rootPage._getStyleScope();
scope.applySelectors(this);
};
View.prototype._applyInlineStyle = function(inlineStyle) {
if (types.isString(inlineStyle)) {
try {
this.style._beginUpdate();
styleScope.applyInlineSyle(this, inlineStyle);
} finally {
this.style._endUpdate();
}
}
};
View.prototype._onAttached = function(context) {};
View.prototype._onDetached = function(force) {};
View.prototype._createUI = function() {};
View.prototype._onContextChanged = function() {};
Object.defineProperty(View.prototype, "_childrenCount", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
View.prototype._eachChildView = function(callback) {};
View.prototype._childIndexToNativeChildIndex = function(index) {
return index;
};
View.prototype._getNativeViewsCount = function() {
return this._isAddedToNativeVisualTree ? 1 : 0;
};
View.prototype._eachLayoutView = function(callback) {
return callback(this);
};
View.prototype._addToSuperview = function(superview, index) {
return false;
};
View.prototype._removeFromSuperview = function() {};
View.prototype._addView = function(view, atIndex) {
if (!view) {
throw new Error("Expecting a valid View instance.");
}
if (view._parent) {
throw new Error("View already has a parent. View: " + view + " Parent: " + view._parent);
}
view._parent = this;
this._addViewCore(view, atIndex);
view._parentChanged(null);
trace.write("called _addView on view " + this._domId + " for a child " + view._domId, trace.categories.ViewHierarchy);
};
View.prototype._addViewCore = function(view, atIndex) {
this._propagateInheritableProperties(view);
view.style._inheritStyleProperties();
if (!view._isAddedToNativeVisualTree) {
var nativeIndex = this._childIndexToNativeChildIndex(atIndex);
view._isAddedToNativeVisualTree = this._addViewToNativeVisualTree(view, nativeIndex);
}
if (this._isLoaded) {
view.onLoaded();
}
};
View.prototype._propagateInheritableProperties = function(view) {
view._inheritProperties(this);
};
View.prototype._inheritProperties = function(parentView) {
var that = this;
var inheritablePropertySetCallback = function(property) {
if (property instanceof styling.Property) {
return true;
}
if (property.metadata && property.metadata.inheritable) {
var baseValue = parentView._getValue(property);
that._setValue(property, baseValue, dependency_observable_1.ValueSource.Inherited);
}
return true;
};
parentView._eachSetProperty(inheritablePropertySetCallback);
};
View.prototype._removeView = function(view) {
if (view._parent !== this) {
throw new Error("View not added to this instance. View: " + view + " CurrentParent: " + view._parent + " ExpectedParent: " + this);
}
this._removeViewCore(view);
view._parent = undefined;
view._parentChanged(this);
trace.write("called _removeView on view " + this._domId + " for a child " + view._domId, trace.categories.ViewHierarchy);
};
View.prototype._removeViewCore = function(view) {
this._removeViewFromNativeVisualTree(view);
if (view.isLoaded) {
view.onUnloaded();
}
ensureBindable();
view._setValue(bindable.Bindable.bindingContextProperty, undefined, dependency_observable_1.ValueSource.Inherited);
var inheritablePropertiesSetCallback = function(property) {
if (property instanceof styling.Property) {
return true;
}
if (property.metadata && property.metadata.inheritable) {
view._resetValue(property, dependency_observable_1.ValueSource.Inherited);
}
return true;
};
view._eachSetProperty(inheritablePropertiesSetCallback);
};
View.prototype._parentChanged = function(oldParent) {};
View.prototype._addViewToNativeVisualTree = function(view, atIndex) {
if (view._isAddedToNativeVisualTree) {
throw new Error("Child already added to the native visual tree.");
}
return true;
};
View.prototype._removeViewFromNativeVisualTree = function(view) {
view._isAddedToNativeVisualTree = false;
};
View.prototype._syncNativeProperties = function() {
_super.prototype._syncNativeProperties.call(this);
this.style._syncNativeProperties();
};
View.prototype._goToVisualState = function(state) {
trace.write(this + " going to state: " + state, trace.categories.Style);
if (state === this._visualState || this._requestedVisualState === state) {
return;
}
ensureVisualState();
this._visualState = visualState.goToState(this, state);
this._requestedVisualState = state;
};
View.prototype._applyXmlAttribute = function(attribute, value) {
if (attribute === "style") {
this._applyInlineStyle(value);
return true;
}
return false;
};
View.prototype.setInlineStyle = function(style) {
if (!types.isString(style)) {
throw new Error("Parameter should be valid CSS string!");
}
this._applyInlineStyle(style);
};
View.prototype._updateLayout = function() {};
Object.defineProperty(View.prototype, "_nativeView", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "_isVisible", {
get: function() {
return this._isVisibleCache;
},
enumerable: true,
configurable: true
});
View.prototype._shouldApplyStyleHandlers = function() {
return !!this._nativeView;
};
View.prototype.focus = function() {
return undefined;
};
View.prototype.animate = function(animation) {
return this.createAnimation(animation).play();
};
View.prototype.createAnimation = function(animation) {
var animationModule = __webpack_require__(24);
var that = this;
animation.target = that;
return new animationModule.Animation([ animation ]);
};
View.prototype.toString = function() {
if (this.id) {
return this.typeName + ("<" + this.id + ">");
}
return this.typeName + ("(" + this._domId + ")");
};
View.prototype._setNativeViewFrame = function(nativeView, frame) {};
View.prototype._onStylePropertyChanged = function(property) {};
View.prototype._canApplyNativeProperty = function() {
return !!this._nativeView;
};
View.loadedEvent = "loaded";
View.unloadedEvent = "unloaded";
View.automationTextProperty = automationTextProperty;
View.idProperty = idProperty;
View.cssClassProperty = cssClassProperty;
View.classNameProperty = classNameProperty;
View.translateXProperty = translateXProperty;
View.translateYProperty = translateYProperty;
View.scaleXProperty = scaleXProperty;
View.scaleYProperty = scaleYProperty;
View.originXProperty = originXProperty;
View.originYProperty = originYProperty;
View.rotateProperty = rotateProperty;
View.isEnabledProperty = isEnabledProperty;
View.isUserInteractionEnabledProperty = isUserInteractionEnabledProperty;
return View;
}(proxy_1.ProxyObject);
exports.View = View;
}, function(module, exports) {
function isString(value) {
return typeof value === "string" || value instanceof String;
}
exports.isString = isString;
function isNumber(value) {
return typeof value === "number" || value instanceof Number;
}
exports.isNumber = isNumber;
function isFunction(value) {
if (!value) {
return false;
}
return typeof value === "function";
}
exports.isFunction = isFunction;
function isUndefined(value) {
return typeof value === "undefined";
}
exports.isUndefined = isUndefined;
function isDefined(value) {
return typeof value !== "undefined";
}
exports.isDefined = isDefined;
function isNullOrUndefined(value) {
return typeof value === "undefined" || value === null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function verifyCallback(value) {
if (value && !isFunction(value)) {
throw new TypeError("Callback must be a valid function.");
}
}
exports.verifyCallback = verifyCallback;
var classInfosMap = new Map();
var funcNameRegex = /function (.{1,})\(/;
function getClass(object) {
return getClassInfo(object).name;
}
exports.getClass = getClass;
function getClassInfo(object) {
var constructor = object.constructor;
var result = classInfosMap.get(constructor);
if (!result) {
result = new ClassInfo(constructor);
classInfosMap.set(constructor, result);
}
return result;
}
exports.getClassInfo = getClassInfo;
function getBaseClasses(object) {
var result = [];
var info = getClassInfo(object);
while (info) {
result.push(info.name);
info = info.baseClassInfo;
}
return result;
}
exports.getBaseClasses = getBaseClasses;
var ClassInfo = function() {
function ClassInfo(typeCosntructor) {
this._typeCosntructor = typeCosntructor;
}
Object.defineProperty(ClassInfo.prototype, "name", {
get: function() {
if (!this._name) {
var results = funcNameRegex.exec(this._typeCosntructor.toString());
this._name = results && results.length > 1 ? results[1] : "";
}
return this._name;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ClassInfo.prototype, "baseClassInfo", {
get: function() {
if (isUndefined(this._baseClassInfo)) {
this._baseClassInfo = ClassInfo._getBase(this);
if (this._baseClassInfo && this._baseClassInfo.name === this.name) {
this._baseClassInfo = ClassInfo._getBase(this._baseClassInfo);
}
}
return this._baseClassInfo;
},
enumerable: true,
configurable: true
});
ClassInfo._getBase = function(info) {
var result = null;
var constructorProto = info._typeCosntructor.prototype;
if (constructorProto.__proto__) {
result = getClassInfo(constructorProto.__proto__);
}
return result;
};
return ClassInfo;
}();
exports.ClassInfo = ClassInfo;
}, function(module, exports, __webpack_require__) {
var application = __webpack_require__(15);
var types = __webpack_require__(13);
var trace = __webpack_require__(26);
var dependency_observable_1 = __webpack_require__(32);
var color_1 = __webpack_require__(27);
var styleProperty = __webpack_require__(33);
var converters = __webpack_require__(40);
var enums = __webpack_require__(23);
var utils = __webpack_require__(21);
var font = __webpack_require__(41);
var background = __webpack_require__(43);
var platform = __webpack_require__(39);
var imageSource;
function ensureImageSource() {
if (!imageSource) {
imageSource = __webpack_require__(59);
}
}
var _registeredHandlers = Array();
var _handlersCache = {};
var noStylingClasses = {};
var AffectsLayout = platform.device.os === platform.platformNames.android ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
function parseMargin(value) {
if (types.isString(value)) {
var arr = value.split(/[ ,]+/);
var top_1;
var right = void 0;
var bottom = void 0;
var left = void 0;
if (arr.length === 1) {
top_1 = right = bottom = left = arr[0];
} else if (arr.length === 2) {
top_1 = bottom = arr[0];
right = left = arr[1];
} else if (arr.length === 4) {
top_1 = arr[0];
right = arr[1];
bottom = arr[2];
left = arr[3];
} else {
throw new Error("Invalid value for margin: " + value);
}
return {
top: top_1,
right: right,
bottom: bottom,
left: left
};
} else if (types.isNumber(value)) {
return {
top: value,
right: value,
bottom: value,
left: value
};
} else {
return value;
}
}
function parseThickness(value) {
var result = {
top: 0,
right: 0,
bottom: 0,
left: 0
};
if (types.isString(value)) {
var arr = value.split(/[ ,]+/);
var top = parseInt(arr[0]);
top = isNaN(top) ? 0 : top;
var right = parseInt(arr[1]);
right = isNaN(right) ? top : right;
var bottom = parseInt(arr[2]);
bottom = isNaN(bottom) ? top : bottom;
var left = parseInt(arr[3]);
left = isNaN(left) ? right : left;
result.top = top;
result.right = right;
result.bottom = bottom;
result.left = left;
} else if (types.isNumber(value)) {
result.top = result.right = result.bottom = result.left = value;
} else {
result = value;
}
return result;
}
function layoutParamsComparer(x, y) {
return x.width === y.width && x.height === y.height && x.leftMargin === y.leftMargin && x.topMargin === y.topMargin && x.rightMargin === y.rightMargin && x.bottomMargin === y.bottomMargin && x.horizontalAlignment === y.horizontalAlignment && x.verticalAlignment === y.verticalAlignment && x.widthPercent === y.widthPercent && x.heightPercent === y.heightPercent && x.leftMarginPercent === y.leftMarginPercent && x.topMarginPercent === y.topMarginPercent && x.rightMarginPercent === y.rightMarginPercent && x.bottomMarginPercent === y.bottomMarginPercent;
}
function onLayoutParamsChanged(data) {
var style = data.object;
var widthValue = convertToPercentHelper(style.width);
var width;
var widthPercent;
if (widthValue.isPercent) {
width = style.horizontalAlignment === enums.HorizontalAlignment.stretch ? -1 : -2;
widthPercent = widthValue.value / 100;
} else {
width = isNaN(widthValue.value) ? -1 : widthValue.value;
widthPercent = -1;
}
var heightValue = convertToPercentHelper(style.height);
var height;
var heightPercent;
if (heightValue.isPercent) {
height = style.verticalAlignment === enums.VerticalAlignment.stretch ? -1 : -2;
heightPercent = heightValue.value / 100;
} else {
height = isNaN(heightValue.value) ? -1 : heightValue.value;
heightPercent = -1;
}
var marginLeftValue = convertToPercentHelper(style.marginLeft);
var marginTopValue = convertToPercentHelper(style.marginTop);
var marginRightValue = convertToPercentHelper(style.marginRight);
var marginBottomValue = convertToPercentHelper(style.marginBottom);
var layoutParams = {
width: width,
height: height,
widthPercent: widthPercent,
heightPercent: heightPercent,
leftMargin: marginLeftValue.isPercent ? 0 : marginLeftValue.value,
leftMarginPercent: marginLeftValue.isPercent ? marginLeftValue.value / 100 : -1,
topMargin: marginTopValue.isPercent ? 0 : marginTopValue.value,
topMarginPercent: marginTopValue.isPercent ? marginTopValue.value / 100 : -1,
rightMargin: marginRightValue.isPercent ? 0 : marginRightValue.value,
rightMarginPercent: marginRightValue.isPercent ? marginRightValue.value / 100 : -1,
bottomMargin: marginBottomValue.isPercent ? 0 : marginBottomValue.value,
bottomMarginPercent: marginBottomValue.isPercent ? marginBottomValue.value / 100 : -1,
horizontalAlignment: style.horizontalAlignment,
verticalAlignment: style.verticalAlignment
};
style._setValue(exports.nativeLayoutParamsProperty, layoutParams);
}
function onPaddingValueChanged(data) {
var style = data.object;
var thickness = {
top: style.paddingTop,
right: style.paddingRight,
bottom: style.paddingBottom,
left: style.paddingLeft
};
style._setValue(exports.nativePaddingsProperty, thickness);
}
function thicknessComparer(x, y) {
if (x && y) {
return x.left === y.left && x.top === y.top && x.right === y.right && x.bottom === y.bottom;
}
return !x === !y;
}
function convertToPercentHelper(value) {
var numberValue = 0;
var isPercent = false;
var isError = true;
if (types.isString(value)) {
var stringValue = value.trim();
var percentIndex = stringValue.indexOf("%");
if (percentIndex !== -1) {
if (percentIndex !== stringValue.length - 1 || percentIndex === 0) {
numberValue = 0;
} else {
isPercent = true;
numberValue = converters.numberConverter(stringValue.substring(0, stringValue.length - 1).trim());
isError = numberValue === 0;
}
} else {
isError = false;
isPercent = false;
numberValue = converters.numberConverter(stringValue);
}
} else if (types.isNumber(value)) {
isError = false;
isPercent = false;
numberValue = value;
}
return {
isError: isError,
isPercent: isPercent,
value: numberValue
};
}
function numberOrPercentConverter(value) {
var result = convertToPercentHelper(value);
if (result.isError) {
throw new Error("Invalid value: " + value);
}
return result.isPercent ? value : result.value;
}
function isWidthHeightValid(value) {
var result = convertToPercentHelper(value);
if (result.isError) {
return false;
}
return isNaN(result.value) || result.value >= 0 && isFinite(result.value);
}
function isMinWidthHeightValid(value) {
return !isNaN(value) && value >= 0 && isFinite(value);
}
function onBackgroundImagePropertyChanged(data) {
var style = data.object;
var url = data.newValue;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
var isValid = false;
if (types.isString(data.newValue)) {
var pattern = /url\(('|")(.*?)\1\)/;
var match = url.match(pattern);
if (match && match[2]) {
url = match[2];
}
ensureImageSource();
if (utils.isDataURI(url)) {
var base64Data = url.split(",")[1];
if (types.isDefined(base64Data)) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withImage(imageSource.fromBase64(base64Data)));
isValid = true;
}
} else if (utils.isFileOrResourcePath(url)) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withImage(imageSource.fromFileOrResource(url)));
isValid = true;
} else if (url.indexOf("http") !== -1) {
style["_url"] = url;
style._setValue(exports.backgroundInternalProperty, currentBackground.withImage(undefined));
imageSource.fromUrl(url).then(function(r) {
if (style && style["_url"] === url) {
currentBackground = style._getValue(exports.backgroundInternalProperty);
style._setValue(exports.backgroundInternalProperty, currentBackground.withImage(r));
}
});
isValid = true;
}
}
if (!isValid) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withImage(undefined));
}
}
function onBackgroundColorPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (!color_1.Color.equals(currentBackground.color, data.newValue)) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withColor(data.newValue));
}
}
function onBackgroundSizePropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.size) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withSize(data.newValue));
}
}
function onBackgroundRepeatPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.repeat) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withRepeat(data.newValue));
}
}
function onBackgroundPositionPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.position) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withPosition(data.newValue));
}
}
function getHandlerInternal(propertyId, classInfo) {
var className = classInfo ? classInfo.name : "default";
var handlerKey = className + propertyId;
var result = _handlersCache[handlerKey];
if (types.isDefined(result)) {
return result;
}
var propertyHandlers = _registeredHandlers[propertyId];
if (noStylingClasses.hasOwnProperty(className) || !propertyHandlers) {
result = null;
} else if (propertyHandlers.hasOwnProperty(className)) {
result = propertyHandlers[className];
} else if (classInfo) {
result = getHandlerInternal(propertyId, classInfo.baseClassInfo);
} else {
result = null;
}
_handlersCache[handlerKey] = result;
return result;
}
function isVisibilityValid(value) {
return value === enums.Visibility.visible || value === enums.Visibility.collapse || value === enums.Visibility.collapsed;
}
function isTextDecorationValid(value) {
var values = (value + "").split(" ");
return values.indexOf(enums.TextDecoration.none) !== -1 || values.indexOf(enums.TextDecoration.underline) !== -1 || values.indexOf(enums.TextDecoration.lineThrough) !== -1;
}
function isTextTransformValid(value) {
return value === enums.TextTransform.none || value === enums.TextTransform.uppercase || value === enums.TextTransform.lowercase || value === enums.TextTransform.capitalize;
}
function isWhiteSpaceValid(value) {
return value === enums.WhiteSpace.nowrap || value === enums.WhiteSpace.normal;
}
function isPaddingValid(value) {
return isFinite(value) && !isNaN(value) && value >= 0;
}
function isMarginValid(value) {
var result = convertToPercentHelper(value);
if (result.isError) {
return false;
}
return isFinite(result.value) && !isNaN(result.value);
}
function isOpacityValid(value) {
var parsedValue = parseFloat(value);
return !isNaN(parsedValue) && 0 <= parsedValue && parsedValue <= 1;
}
function isFontWeightValid(value) {
return value === enums.FontWeight.normal || value === enums.FontWeight.bold;
}
function isFontStyleValid(value) {
return value === enums.FontStyle.normal || value === enums.FontStyle.italic;
}
function onVisibilityChanged(data) {
data.object._view._isVisibleCache = data.newValue === enums.Visibility.visible;
}
function onFontFamilyChanged(data) {
var style = data.object;
var currentFont = style._getValue(exports.fontInternalProperty);
if (currentFont.fontFamily !== data.newValue) {
style._setValue(exports.fontInternalProperty, currentFont.withFontFamily(data.newValue));
}
}
function onFontStyleChanged(data) {
var style = data.object;
var currentFont = style._getValue(exports.fontInternalProperty);
if (currentFont.fontStyle !== data.newValue) {
style._setValue(exports.fontInternalProperty, currentFont.withFontStyle(data.newValue));
}
}
function onFontWeightChanged(data) {
var style = data.object;
var currentFont = style._getValue(exports.fontInternalProperty);
if (currentFont.fontWeight !== data.newValue) {
style._setValue(exports.fontInternalProperty, currentFont.withFontWeight(data.newValue));
}
}
function onFontSizeChanged(data) {
var style = data.object;
var currentFont = style._getValue(exports.fontInternalProperty);
if (currentFont.fontSize !== data.newValue) {
style._setValue(exports.fontInternalProperty, currentFont.withFontSize(data.newValue));
}
}
var Style = function(_super) {
__extends(Style, _super);
function Style(parentView) {
_super.call(this);
this._updateCounter = 0;
this._nativeSetters = new Map();
this._view = parentView;
}
Object.defineProperty(Style.prototype, "color", {
get: function() {
return this._getValue(exports.colorProperty);
},
set: function(value) {
this._setValue(exports.colorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "backgroundColor", {
get: function() {
return this._getValue(exports.backgroundColorProperty);
},
set: function(value) {
this._setValue(exports.backgroundColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "backgroundImage", {
get: function() {
return this._getValue(exports.backgroundImageProperty);
},
set: function(value) {
this._setValue(exports.backgroundImageProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "backgroundRepeat", {
get: function() {
return this._getValue(exports.backgroundRepeatProperty);
},
set: function(value) {
this._setValue(exports.backgroundRepeatProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "backgroundSize", {
get: function() {
return this._getValue(exports.backgroundSizeProperty);
},
set: function(value) {
this._setValue(exports.backgroundSizeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "backgroundPosition", {
get: function() {
return this._getValue(exports.backgroundPositionProperty);
},
set: function(value) {
this._setValue(exports.backgroundPositionProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderColor", {
get: function() {
return this._getValue(exports.borderColorProperty);
},
set: function(value) {
this._setValue(exports.borderColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderWidth", {
get: function() {
return this._getValue(exports.borderWidthProperty);
},
set: function(value) {
this._setValue(exports.borderWidthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderRadius", {
get: function() {
return this._getValue(exports.borderRadiusProperty);
},
set: function(value) {
this._setValue(exports.borderRadiusProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "fontSize", {
get: function() {
return this._getValue(exports.fontSizeProperty);
},
set: function(value) {
this._setValue(exports.fontSizeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "fontFamily", {
get: function() {
return this._getValue(exports.fontFamilyProperty);
},
set: function(value) {
this._setValue(exports.fontFamilyProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "fontStyle", {
get: function() {
return this._getValue(exports.fontStyleProperty);
},
set: function(value) {
this._setValue(exports.fontStyleProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "fontWeight", {
get: function() {
return this._getValue(exports.fontWeightProperty);
},
set: function(value) {
this._setValue(exports.fontWeightProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "font", {
get: function() {
return this.fontStyle + " " + this.fontWeight + " " + this.fontSize + " " + this.fontFamily;
},
set: function(value) {
this._setShorthandProperty("font", value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "_fontInternal", {
get: function() {
return this._getValue(exports.fontInternalProperty);
},
set: function(value) {
this._setValue(exports.fontInternalProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "textAlignment", {
get: function() {
return this._getValue(exports.textAlignmentProperty);
},
set: function(value) {
this._setValue(exports.textAlignmentProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "minWidth", {
get: function() {
return this._getValue(exports.minWidthProperty);
},
set: function(value) {
this._setValue(exports.minWidthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "minHeight", {
get: function() {
return this._getValue(exports.minHeightProperty);
},
set: function(value) {
this._setValue(exports.minHeightProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "width", {
get: function() {
return this._getValue(exports.widthProperty);
},
set: function(value) {
this._setValue(exports.widthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "height", {
get: function() {
return this._getValue(exports.heightProperty);
},
set: function(value) {
this._setValue(exports.heightProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "margin", {
get: function() {
return this.marginTop + " " + this.marginRight + " " + this.marginBottom + " " + this.marginLeft;
},
set: function(value) {
this._setShorthandProperty("margin", value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "marginLeft", {
get: function() {
return this._getValue(exports.marginLeftProperty);
},
set: function(value) {
this._setValue(exports.marginLeftProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "marginTop", {
get: function() {
return this._getValue(exports.marginTopProperty);
},
set: function(value) {
this._setValue(exports.marginTopProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "marginRight", {
get: function() {
return this._getValue(exports.marginRightProperty);
},
set: function(value) {
this._setValue(exports.marginRightProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "marginBottom", {
get: function() {
return this._getValue(exports.marginBottomProperty);
},
set: function(value) {
this._setValue(exports.marginBottomProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "padding", {
get: function() {
return this.paddingTop + " " + this.paddingRight + " " + this.paddingBottom + " " + this.paddingLeft;
},
set: function(value) {
this._setShorthandProperty("padding", value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "paddingLeft", {
get: function() {
return this._getValue(exports.paddingLeftProperty);
},
set: function(value) {
this._setValue(exports.paddingLeftProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "paddingTop", {
get: function() {
return this._getValue(exports.paddingTopProperty);
},
set: function(value) {
this._setValue(exports.paddingTopProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "paddingRight", {
get: function() {
return this._getValue(exports.paddingRightProperty);
},
set: function(value) {
this._setValue(exports.paddingRightProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "paddingBottom", {
get: function() {
return this._getValue(exports.paddingBottomProperty);
},
set: function(value) {
this._setValue(exports.paddingBottomProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "horizontalAlignment", {
get: function() {
return this._getValue(exports.horizontalAlignmentProperty);
},
set: function(value) {
this._setValue(exports.horizontalAlignmentProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "verticalAlignment", {
get: function() {
return this._getValue(exports.verticalAlignmentProperty);
},
set: function(value) {
this._setValue(exports.verticalAlignmentProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "visibility", {
get: function() {
return this._getValue(exports.visibilityProperty);
},
set: function(value) {
this._setValue(exports.visibilityProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "opacity", {
get: function() {
return this._getValue(exports.opacityProperty);
},
set: function(value) {
this._setValue(exports.opacityProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "textDecoration", {
get: function() {
return this._getValue(exports.textDecorationProperty);
},
set: function(value) {
this._setValue(exports.textDecorationProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "textTransform", {
get: function() {
return this._getValue(exports.textTransformProperty);
},
set: function(value) {
this._setValue(exports.textTransformProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "whiteSpace", {
get: function() {
return this._getValue(exports.whiteSpaceProperty);
},
set: function(value) {
this._setValue(exports.whiteSpaceProperty, value);
},
enumerable: true,
configurable: true
});
Style.prototype._updateTextDecoration = function() {
if (this._getValue(exports.textDecorationProperty) !== enums.TextDecoration.none) {
this._applyProperty(exports.textDecorationProperty, this._getValue(exports.textDecorationProperty));
}
};
Style.prototype._updateTextTransform = function() {
if (this._getValue(exports.textTransformProperty) !== enums.TextTransform.none) {
this._applyProperty(exports.textTransformProperty, this._getValue(exports.textTransformProperty));
}
};
Style.prototype._beginUpdate = function() {
this._updateCounter++;
};
Style.prototype._endUpdate = function() {
var _this = this;
this._updateCounter--;
if (this._updateCounter < 0) {
throw new Error("style._endUpdate() called, but no update is in progress.");
}
if (this._updateCounter === 0) {
this._nativeSetters.forEach(function(newValue, property, map) {
_this._applyStyleProperty(property, newValue);
});
this._nativeSetters.clear();
}
};
Style.prototype._resetCssValues = function() {
var that = this;
this._eachSetProperty(function(property) {
that._resetValue(property, dependency_observable_1.ValueSource.Css);
return true;
});
};
Style.prototype._resetLocalValues = function() {
var that = this;
this._eachSetProperty(function(property) {
that._resetValue(property);
return true;
});
};
Style.prototype._onPropertyChanged = function(property, oldValue, newValue) {
trace.write("Style._onPropertyChanged view:" + this._view + ", property: " + property.name + ", oldValue: " + oldValue + ", newValue: " + newValue, trace.categories.Style);
_super.prototype._onPropertyChanged.call(this, property, oldValue, newValue);
this._view._checkMetadataOnPropertyChanged(property.metadata);
this._applyProperty(property, newValue);
};
Style.prototype._syncNativeProperties = function() {
var that = this;
styleProperty.eachProperty(function(p) {
var value = that._getValue(p);
var valueSource = that._getValueSource(p);
if (valueSource !== dependency_observable_1.ValueSource.Default && types.isDefined(value)) {
that._applyProperty(p, value);
}
});
};
Style.prototype._sizeChanged = function() {
if (!this._getValue(exports.backgroundInternalProperty).isEmpty()) {
this._applyProperty(exports.backgroundInternalProperty, this._getValue(exports.backgroundInternalProperty));
}
};
Style.prototype._applyProperty = function(property, newValue) {
this._applyStyleProperty(property, newValue);
if (this._view._childrenCount === 0 || !property.metadata.inheritable) {
return;
}
var eachChild = function(child) {
child.style._inheritStyleProperty(property);
return true;
};
this._view._eachChildView(eachChild);
};
Style.prototype._applyStyleProperty = function(property, newValue) {
if (!this._view._shouldApplyStyleHandlers()) {
return;
}
if (this._updateCounter > 0) {
this._nativeSetters.set(property, newValue);
return;
}
try {
var handler = getHandler(property, this._view);
if (!handler) {
trace.write("No handler for property: " + property.name + " with id: " + property.id + ", view:" + this._view, trace.categories.Style);
} else {
trace.write("Found handler for property: " + property.name + ", view:" + this._view, trace.categories.Style);
var shouldReset = false;
if (property.metadata.equalityComparer) {
shouldReset = property.metadata.equalityComparer(newValue, property.metadata.defaultValue);
} else {
shouldReset = newValue === property.metadata.defaultValue;
}
if (shouldReset) {
handler.resetProperty(property, this._view);
} else {
handler.applyProperty(property, this._view, newValue);
}
this._view._onStylePropertyChanged(property);
}
} catch (ex) {
trace.write("Error setting property: " + property.name + " on " + this._view + ": " + ex, trace.categories.Style, trace.messageType.error);
}
};
Style.prototype._inheritStyleProperty = function(property) {
if (!property.metadata.inheritable) {
throw new Error("An attempt was made to inherit a style property which is not marked as 'inheritable'.");
}
var currentParent = this._view.parent;
var valueSource;
while (currentParent) {
valueSource = currentParent.style._getValueSource(property);
if (valueSource > dependency_observable_1.ValueSource.Default) {
this._setValue(property, currentParent.style._getValue(property), dependency_observable_1.ValueSource.Inherited);
break;
}
currentParent = currentParent.parent;
}
};
Style.prototype._inheritStyleProperties = function() {
var that = this;
styleProperty.eachInheritableProperty(function(p) {
that._inheritStyleProperty(p);
});
};
Object.defineProperty(Style.prototype, "_nativeView", {
get: function() {
return this._view._nativeView;
},
enumerable: true,
configurable: true
});
Style.prototype._setShorthandProperty = function(name, value) {
var pairs = styleProperty.getShorthandPairs(name, value);
if (pairs) {
this._beginUpdate();
for (var j = 0; j < pairs.length; j++) {
var pair = pairs[j];
this._setValue(pair.property, pair.value, dependency_observable_1.ValueSource.Local);
}
this._endUpdate();
}
};
return Style;
}(dependency_observable_1.DependencyObservable);
exports.Style = Style;
function registerHandler(property, handler, className) {
var realClassName = className ? className : "default";
var handlerRecord = _registeredHandlers[property.id];
if (!handlerRecord) {
handlerRecord = {};
_registeredHandlers[property.id] = handlerRecord;
}
handlerRecord[realClassName] = handler;
}
exports.registerHandler = registerHandler;
function registerNoStylingClass(className) {
noStylingClasses[className] = 1;
}
exports.registerNoStylingClass = registerNoStylingClass;
function getHandler(property, view) {
return getHandlerInternal(property.id, types.getClassInfo(view));
}
exports.getHandler = getHandler;
exports.colorProperty = new styleProperty.Property("color", "color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.Inheritable, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.backgroundImageProperty = new styleProperty.Property("backgroundImage", "background-image", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBackgroundImagePropertyChanged));
exports.backgroundColorProperty = new styleProperty.Property("backgroundColor", "background-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBackgroundColorPropertyChanged, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.backgroundRepeatProperty = new styleProperty.Property("backgroundRepeat", "background-repeat", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBackgroundRepeatPropertyChanged));
exports.backgroundSizeProperty = new styleProperty.Property("backgroundSize", "background-size", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBackgroundSizePropertyChanged));
exports.backgroundPositionProperty = new styleProperty.Property("backgroundPosition", "background-position", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBackgroundPositionPropertyChanged));
exports.borderColorProperty = new styleProperty.Property("borderColor", "border-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.borderWidthProperty = new styleProperty.Property("borderWidth", "border-width", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, null, isPaddingValid), converters.numberConverter);
exports.borderRadiusProperty = new styleProperty.Property("borderRadius", "border-radius", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, null, isPaddingValid), converters.numberConverter);
exports.backgroundInternalProperty = new styleProperty.Property("_backgroundInternal", "_backgroundInternal", new dependency_observable_1.PropertyMetadata(background.Background.default, dependency_observable_1.PropertyMetadataSettings.None, undefined, undefined, background.Background.equals));
exports.fontSizeProperty = new styleProperty.Property("fontSize", "font-size", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.Inheritable, onFontSizeChanged), converters.fontSizeConverter);
exports.fontFamilyProperty = new styleProperty.Property("fontFamily", "font-family", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.Inheritable, onFontFamilyChanged));
exports.fontStyleProperty = new styleProperty.Property("fontStyle", "font-style", new dependency_observable_1.PropertyMetadata(enums.FontStyle.normal, dependency_observable_1.PropertyMetadataSettings.Inheritable, onFontStyleChanged, isFontStyleValid));
exports.fontWeightProperty = new styleProperty.Property("fontWeight", "font-weight", new dependency_observable_1.PropertyMetadata(enums.FontWeight.normal, dependency_observable_1.PropertyMetadataSettings.Inheritable, onFontWeightChanged, isFontWeightValid));
exports.fontInternalProperty = new styleProperty.Property("_fontInternal", "_fontInternal", new dependency_observable_1.PropertyMetadata(font.Font.default, AffectsLayout, null, null, font.Font.equals), font.Font.parse);
exports.textAlignmentProperty = new styleProperty.Property("textAlignment", "text-align", new dependency_observable_1.PropertyMetadata(undefined, AffectsLayout | dependency_observable_1.PropertyMetadataSettings.Inheritable), converters.textAlignConverter);
exports.minWidthProperty = new styleProperty.Property("minWidth", "min-width", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, null, isMinWidthHeightValid), converters.numberConverter);
exports.minHeightProperty = new styleProperty.Property("minHeight", "min-height", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, null, isMinWidthHeightValid), converters.numberConverter);
exports.visibilityProperty = new styleProperty.Property("visibility", "visibility", new dependency_observable_1.PropertyMetadata(enums.Visibility.visible, AffectsLayout, onVisibilityChanged, isVisibilityValid), converters.visibilityConverter);
exports.opacityProperty = new styleProperty.Property("opacity", "opacity", new dependency_observable_1.PropertyMetadata(1, dependency_observable_1.PropertyMetadataSettings.None, undefined, isOpacityValid), converters.opacityConverter);
exports.textDecorationProperty = new styleProperty.Property("textDecoration", "text-decoration", new dependency_observable_1.PropertyMetadata(enums.TextDecoration.none, dependency_observable_1.PropertyMetadataSettings.None, undefined, isTextDecorationValid), converters.textDecorationConverter);
exports.textTransformProperty = new styleProperty.Property("textTransform", "text-transform", new dependency_observable_1.PropertyMetadata(enums.TextTransform.none, dependency_observable_1.PropertyMetadataSettings.None, undefined, isTextTransformValid), converters.textTransformConverter);
exports.whiteSpaceProperty = new styleProperty.Property("whiteSpace", "white-space", new dependency_observable_1.PropertyMetadata(undefined, AffectsLayout, undefined, isWhiteSpaceValid), converters.whiteSpaceConverter);
exports.nativeLayoutParamsProperty = new styleProperty.Property("nativeLayoutParams", "nativeLayoutParams", new dependency_observable_1.PropertyMetadata({
width: -1,
widthPercent: -1,
height: -1,
heightPercent: -1,
leftMargin: 0,
leftMarginPercent: -1,
topMargin: 0,
topMarginPercent: -1,
rightMargin: 0,
rightMarginPercent: -1,
bottomMargin: 0,
bottomMarginPercent: -1,
horizontalAlignment: enums.HorizontalAlignment.stretch,
verticalAlignment: enums.VerticalAlignment.stretch
}, null, null, null, layoutParamsComparer));
exports.widthProperty = new styleProperty.Property("width", "width", new dependency_observable_1.PropertyMetadata(Number.NaN, AffectsLayout, onLayoutParamsChanged, isWidthHeightValid), numberOrPercentConverter);
exports.heightProperty = new styleProperty.Property("height", "height", new dependency_observable_1.PropertyMetadata(Number.NaN, AffectsLayout, onLayoutParamsChanged, isWidthHeightValid), numberOrPercentConverter);
exports.marginLeftProperty = new styleProperty.Property("marginLeft", "margin-left", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onLayoutParamsChanged, isMarginValid), numberOrPercentConverter);
exports.marginRightProperty = new styleProperty.Property("marginRight", "margin-right", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onLayoutParamsChanged, isMarginValid), numberOrPercentConverter);
exports.marginTopProperty = new styleProperty.Property("marginTop", "margin-top", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onLayoutParamsChanged, isMarginValid), numberOrPercentConverter);
exports.marginBottomProperty = new styleProperty.Property("marginBottom", "margin-bottom", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onLayoutParamsChanged, isMarginValid), numberOrPercentConverter);
exports.verticalAlignmentProperty = new styleProperty.Property("verticalAlignment", "vertical-align", new dependency_observable_1.PropertyMetadata(enums.VerticalAlignment.stretch, AffectsLayout, onLayoutParamsChanged));
exports.horizontalAlignmentProperty = new styleProperty.Property("horizontalAlignment", "horizontal-align", new dependency_observable_1.PropertyMetadata(enums.HorizontalAlignment.stretch, AffectsLayout, onLayoutParamsChanged));
function getNativePadding(nativeView, callback) {
return {
result: nativeView ? callback(nativeView) / utils.layout.getDisplayDensity() : 0,
cacheable: !!nativeView
};
}
function getNativePaddingLeft(instance) {
var nativeView = instance._nativeView;
return getNativePadding(nativeView, function(view) {
return view.getPaddingLeft();
});
}
function getNativePaddingTop(instance) {
var nativeView = instance._nativeView;
return getNativePadding(nativeView, function(view) {
return view.getPaddingTop();
});
}
function getNativePaddingRight(instance) {
var nativeView = instance._nativeView;
return getNativePadding(nativeView, function(view) {
return view.getPaddingRight();
});
}
function getNativePaddingBottom(instance) {
var nativeView = instance._nativeView;
return getNativePadding(nativeView, function(view) {
return view.getPaddingBottom();
});
}
exports.nativePaddingsProperty = new styleProperty.Property("paddingNative", "paddingNative", new dependency_observable_1.PropertyMetadata(undefined, null, null, null, thicknessComparer));
var defaultPadding = platform.device.os === platform.platformNames.android ? undefined : 0;
exports.paddingLeftProperty = new styleProperty.Property("paddingLeft", "padding-left", new dependency_observable_1.PropertyMetadata(defaultPadding, AffectsLayout, onPaddingValueChanged, isPaddingValid), converters.numberConverter);
exports.paddingRightProperty = new styleProperty.Property("paddingRight", "padding-right", new dependency_observable_1.PropertyMetadata(defaultPadding, AffectsLayout, onPaddingValueChanged, isPaddingValid), converters.numberConverter);
exports.paddingTopProperty = new styleProperty.Property("paddingTop", "padding-top", new dependency_observable_1.PropertyMetadata(defaultPadding, AffectsLayout, onPaddingValueChanged, isPaddingValid), converters.numberConverter);
exports.paddingBottomProperty = new styleProperty.Property("paddingBottom", "padding-bottom", new dependency_observable_1.PropertyMetadata(defaultPadding, AffectsLayout, onPaddingValueChanged, isPaddingValid), converters.numberConverter);
if (platform.device.os === platform.platformNames.android) {
exports.paddingTopProperty.defaultValueGetter = getNativePaddingTop;
exports.paddingLeftProperty.defaultValueGetter = getNativePaddingLeft;
exports.paddingRightProperty.defaultValueGetter = getNativePaddingRight;
exports.paddingBottomProperty.defaultValueGetter = getNativePaddingBottom;
}
function onPaddingChanged(value) {
var thickness = parseThickness(value);
var array = new Array();
array.push({
property: exports.paddingTopProperty,
value: thickness.top
});
array.push({
property: exports.paddingRightProperty,
value: thickness.right
});
array.push({
property: exports.paddingBottomProperty,
value: thickness.bottom
});
array.push({
property: exports.paddingLeftProperty,
value: thickness.left
});
return array;
}
function onMarginChanged(value) {
var thickness = parseMargin(value);
var array = new Array();
array.push({
property: exports.marginTopProperty,
value: thickness.top
});
array.push({
property: exports.marginRightProperty,
value: thickness.right
});
array.push({
property: exports.marginBottomProperty,
value: thickness.bottom
});
array.push({
property: exports.marginLeftProperty,
value: thickness.left
});
return array;
}
function onFontChanged(value) {
var newFont = font.Font.parse(value);
var array = new Array();
array.push({
property: exports.fontFamilyProperty,
value: newFont.fontFamily
});
array.push({
property: exports.fontStyleProperty,
value: newFont.fontStyle
});
array.push({
property: exports.fontWeightProperty,
value: newFont.fontWeight
});
array.push({
property: exports.fontSizeProperty,
value: newFont.fontSize
});
return array;
}
styleProperty.registerShorthandCallback("font", onFontChanged);
styleProperty.registerShorthandCallback("margin", onMarginChanged);
styleProperty.registerShorthandCallback("padding", onPaddingChanged);
var _defaultNativeValuesCache = {};
var StylePropertyChangedHandler = function() {
function StylePropertyChangedHandler(applyCallback, resetCallback, getNativeValue) {
this._applyProperty = applyCallback;
this._resetProperty = resetCallback;
this._getNativeValue = getNativeValue;
}
StylePropertyChangedHandler.prototype.applyProperty = function(property, view, newValue) {
var className = types.getClass(view);
if (!_defaultNativeValuesCache.hasOwnProperty(className + property.id) && this._getNativeValue) {
_defaultNativeValuesCache[className + property.id] = this._getNativeValue(view);
}
if (application.android) {
newValue = newValue.android ? newValue.android : newValue;
} else if (application.ios) {
newValue = newValue.ios ? newValue.ios : newValue;
}
this._applyProperty(view, newValue, _defaultNativeValuesCache[className + property.id]);
};
StylePropertyChangedHandler.prototype.resetProperty = function(property, view) {
var className = types.getClass(view);
this._resetProperty(view, _defaultNativeValuesCache[className + property.id]);
};
return StylePropertyChangedHandler;
}();
exports.StylePropertyChangedHandler = StylePropertyChangedHandler;
exports.ignorePropertyHandler = new StylePropertyChangedHandler(function(view, val) {}, function(view, val) {});
registerNoStylingClass("Frame");
}, function(module, exports, __webpack_require__) {
var appModule = __webpack_require__(16);
var frame = __webpack_require__(9);
var observable = __webpack_require__(17);
global.moduleMerge(appModule, exports);
var typedExports = exports;
var NativeScriptApplication;
exports.evalLazy = function() {
NativeScriptApplication = function(_super) {
__extends(NativeScriptApplication, _super);
function NativeScriptApplication() {
_super.call(this);
return global.__native(this);
}
NativeScriptApplication.prototype.onCreate = function() {
androidApp.init(this);
setupOrientationListener(androidApp);
};
NativeScriptApplication.prototype.onLowMemory = function() {
gc();
java.lang.System.gc();
_super.prototype.onLowMemory.call(this);
typedExports.notify({
eventName: typedExports.lowMemoryEvent,
object: this,
android: this
});
};
NativeScriptApplication.prototype.onTrimMemory = function(level) {
gc();
java.lang.System.gc();
_super.prototype.onTrimMemory.call(this, level);
};
NativeScriptApplication = __decorate([ JavaProxy("com.tns.NativeScriptApplication") ], NativeScriptApplication);
return NativeScriptApplication;
}(android.app.Application);
};
function initEvents() {
var lifecycleCallbacks = new android.app.Application.ActivityLifecycleCallbacks({
onActivityCreated: function(activity, bundle) {
if (!androidApp.startActivity) {
androidApp.startActivity = activity;
androidApp.notify({
eventName: "activityCreated",
object: androidApp,
activity: activity,
bundle: bundle
});
if (androidApp.onActivityCreated) {
androidApp.onActivityCreated(activity, bundle);
}
}
androidApp.currentContext = activity;
},
onActivityDestroyed: function(activity) {
if (activity === androidApp.foregroundActivity) {
androidApp.foregroundActivity = undefined;
}
if (activity === androidApp.currentContext) {
androidApp.currentContext = undefined;
}
if (activity === androidApp.startActivity) {
if (typedExports.onExit) {
typedExports.onExit();
}
typedExports.notify({
eventName: typedExports.exitEvent,
object: androidApp,
android: activity
});
androidApp.startActivity = undefined;
}
androidApp.notify({
eventName: "activityDestroyed",
object: androidApp,
activity: activity
});
if (androidApp.onActivityDestroyed) {
androidApp.onActivityDestroyed(activity);
}
gc();
},
onActivityPaused: function(activity) {
androidApp.paused = true;
if (activity === androidApp.foregroundActivity) {
if (typedExports.onSuspend) {
typedExports.onSuspend();
}
typedExports.notify({
eventName: typedExports.suspendEvent,
object: androidApp,
android: activity
});
}
androidApp.notify({
eventName: "activityPaused",
object: androidApp,
activity: activity
});
if (androidApp.onActivityPaused) {
androidApp.onActivityPaused(activity);
}
},
onActivityResumed: function(activity) {
androidApp.paused = false;
if (activity === androidApp.foregroundActivity) {
if (typedExports.onResume) {
typedExports.onResume();
}
typedExports.notify({
eventName: typedExports.resumeEvent,
object: androidApp,
android: activity
});
}
androidApp.notify({
eventName: "activityResumed",
object: androidApp,
activity: activity
});
if (androidApp.onActivityResumed) {
androidApp.onActivityResumed(activity);
}
},
onActivitySaveInstanceState: function(activity, bundle) {
androidApp.notify({
eventName: "saveActivityState",
object: androidApp,
activity: activity,
bundle: bundle
});
if (androidApp.onSaveActivityState) {
androidApp.onSaveActivityState(activity, bundle);
}
},
onActivityStarted: function(activity) {
androidApp.foregroundActivity = activity;
androidApp.notify({
eventName: "activityStarted",
object: androidApp,
activity: activity
});
if (androidApp.onActivityStarted) {
androidApp.onActivityStarted(activity);
}
},
onActivityStopped: function(activity) {
androidApp.notify({
eventName: "activityStopped",
object: androidApp,
activity: activity
});
if (androidApp.onActivityStopped) {
androidApp.onActivityStopped(activity);
}
}
});
return lifecycleCallbacks;
}
var AndroidApplication = function(_super) {
__extends(AndroidApplication, _super);
function AndroidApplication() {
_super.apply(this, arguments);
this._registeredReceivers = {};
this._pendingReceiverRegistrations = new Array();
}
AndroidApplication.prototype.init = function(nativeApp) {
this.nativeApp = nativeApp;
this.packageName = nativeApp.getPackageName();
this.context = nativeApp.getApplicationContext();
this._eventsToken = initEvents();
this.nativeApp.registerActivityLifecycleCallbacks(this._eventsToken);
this._registerPendingReceivers();
};
AndroidApplication.prototype._registerPendingReceivers = function() {
if (this._pendingReceiverRegistrations) {
var i = 0;
var length = this._pendingReceiverRegistrations.length;
for (;i < length; i++) {
var registerFunc = this._pendingReceiverRegistrations[i];
registerFunc(this.context);
}
this._pendingReceiverRegistrations = new Array();
}
};
AndroidApplication.prototype.registerBroadcastReceiver = function(intentFilter, onReceiveCallback) {
ensureBroadCastReceiverClass();
var that = this;
var registerFunc = function(context) {
var receiver = new BroadcastReceiverClass(onReceiveCallback);
context.registerReceiver(receiver, new android.content.IntentFilter(intentFilter));
that._registeredReceivers[intentFilter] = receiver;
};
if (this.context) {
registerFunc(this.context);
} else {
this._pendingReceiverRegistrations.push(registerFunc);
}
};
AndroidApplication.prototype.unregisterBroadcastReceiver = function(intentFilter) {
var receiver = this._registeredReceivers[intentFilter];
if (receiver) {
this.context.unregisterReceiver(receiver);
this._registeredReceivers[intentFilter] = undefined;
delete this._registeredReceivers[intentFilter];
}
};
AndroidApplication.activityCreatedEvent = "activityCreated";
AndroidApplication.activityDestroyedEvent = "activityDestroyed";
AndroidApplication.activityStartedEvent = "activityStarted";
AndroidApplication.activityPausedEvent = "activityPaused";
AndroidApplication.activityResumedEvent = "activityResumed";
AndroidApplication.activityStoppedEvent = "activityStopped";
AndroidApplication.saveActivityStateEvent = "saveActivityState";
AndroidApplication.activityResultEvent = "activityResult";
AndroidApplication.activityBackPressedEvent = "activityBackPressed";
return AndroidApplication;
}(observable.Observable);
exports.AndroidApplication = AndroidApplication;
var androidApp = new AndroidApplication();
typedExports.android = androidApp;
var BroadcastReceiverClass;
function ensureBroadCastReceiverClass() {
if (BroadcastReceiverClass) {
return;
}
var BroadcastReceiver = function(_super) {
__extends(BroadcastReceiver, _super);
function BroadcastReceiver(onReceiveCallback) {
_super.call(this);
this._onReceiveCallback = onReceiveCallback;
return global.__native(this);
}
BroadcastReceiver.prototype.onReceive = function(context, intent) {
if (this._onReceiveCallback) {
this._onReceiveCallback(context, intent);
}
};
return BroadcastReceiver;
}(android.content.BroadcastReceiver);
BroadcastReceiverClass = BroadcastReceiver;
}
var started = false;
function start(entry) {
if (started) {
throw new Error("Application is already started.");
}
started = true;
if (entry) {
typedExports.mainEntry = entry;
}
loadCss();
}
exports.start = start;
var currentOrientation;
function setupOrientationListener(androidApp) {
androidApp.registerBroadcastReceiver(android.content.Intent.ACTION_CONFIGURATION_CHANGED, onConfigurationChanged);
currentOrientation = androidApp.context.getResources().getConfiguration().orientation;
}
function onConfigurationChanged(context, intent) {
var orientation = context.getResources().getConfiguration().orientation;
if (currentOrientation !== orientation) {
currentOrientation = orientation;
var enums = __webpack_require__(23);
var newValue;
switch (orientation) {
case android.content.res.Configuration.ORIENTATION_LANDSCAPE:
newValue = enums.DeviceOrientation.landscape;
break;

case android.content.res.Configuration.ORIENTATION_PORTRAIT:
newValue = enums.DeviceOrientation.portrait;
break;

default:
newValue = enums.DeviceOrientation.unknown;
break;
}
typedExports.notify({
eventName: typedExports.orientationChangedEvent,
android: context,
newValue: newValue,
object: typedExports.android
});
}
}
function loadCss() {
typedExports.cssSelectorsCache = typedExports.loadCss(typedExports.cssFile);
}
global.__onLiveSync = function() {
if (typedExports.android && typedExports.android.paused) {
return;
}
var fileResolver = __webpack_require__(38);
fileResolver.clearCache();
loadCss();
frame.reloadPage();
};
global.__onUncaughtError = function(error) {
var types = __webpack_require__(13);
if (types.isFunction(typedExports.onUncaughtError)) {
typedExports.onUncaughtError(error);
}
typedExports.notify({
eventName: typedExports.uncaughtErrorEvent,
object: appModule.android,
android: error
});
};
}, function(module, exports, __webpack_require__) {
__webpack_require__(3);
var observable = __webpack_require__(17);
var events = new observable.Observable();
global.moduleMerge(events, exports);
exports.launchEvent = "launch";
exports.suspendEvent = "suspend";
exports.resumeEvent = "resume";
exports.exitEvent = "exit";
exports.lowMemoryEvent = "lowMemory";
exports.uncaughtErrorEvent = "uncaughtError";
exports.orientationChangedEvent = "orientationChanged";
exports.cssFile = "app.css";
exports.cssSelectorsCache = undefined;
exports.resources = {};
exports.onUncaughtError = undefined;
exports.onLaunch = undefined;
exports.onSuspend = undefined;
exports.onResume = undefined;
exports.onExit = undefined;
exports.onLowMemory = undefined;
exports.android = undefined;
exports.ios = undefined;
function loadCss(cssFile) {
if (!cssFile) {
return undefined;
}
var result;
var fs = __webpack_require__(18);
var styleScope = __webpack_require__(30);
var cssFileName = fs.path.join(fs.knownFolders.currentApp().path, cssFile);
if (fs.File.exists(cssFileName)) {
var file = fs.File.fromPath(cssFileName);
var applicationCss = file.readTextSync();
if (applicationCss) {
result = styleScope.StyleScope.createSelectorsFromCss(applicationCss, cssFileName);
}
}
return result;
}
exports.loadCss = loadCss;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(13);
var _wrappedIndex = 0;
var WrappedValue = function() {
function WrappedValue(value) {
this._wrapped = value;
}
Object.defineProperty(WrappedValue.prototype, "wrapped", {
get: function() {
return this._wrapped;
},
set: function(value) {
this._wrapped = value;
},
enumerable: true,
configurable: true
});
WrappedValue.unwrap = function(value) {
if (value && value.wrapped) {
return value.wrapped;
}
return value;
};
WrappedValue.wrap = function(value) {
var w = _wrappedValues[_wrappedIndex++ % 5];
w.wrapped = value;
return w;
};
return WrappedValue;
}();
exports.WrappedValue = WrappedValue;
var _wrappedValues = [ new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null) ];
var Observable = function() {
function Observable(json) {
this._observers = {};
this.disableNotifications = {};
if (json) {
this._map = new Map();
for (var prop in json) {
if (json.hasOwnProperty(prop)) {
this._defineNewProperty(prop);
this.set(prop, json[prop]);
}
}
}
}
Observable.prototype._defineNewProperty = function(propertyName) {
Object.defineProperty(this, propertyName, {
get: function() {
return this._map.get(propertyName);
},
set: function(value) {
this._map.set(propertyName, value);
this.notify(this._createPropertyChangeData(propertyName, value));
},
enumerable: true,
configurable: true
});
};
Object.defineProperty(Observable.prototype, "typeName", {
get: function() {
return types.getClass(this);
},
enumerable: true,
configurable: true
});
Observable.prototype.on = function(eventNames, callback, thisArg) {
this.addEventListener(eventNames, callback, thisArg);
};
Observable.prototype.off = function(eventNames, callback, thisArg) {
this.removeEventListener(eventNames, callback, thisArg);
};
Observable.prototype.addEventListener = function(eventNames, callback, thisArg) {
if (!types.isString(eventNames)) {
throw new TypeError("Events name(s) must be string.");
}
types.verifyCallback(callback);
var events = eventNames.split(",");
for (var i = 0, l = events.length; i < l; i++) {
var event = events[i].trim();
var list = this._getEventList(event, true);
list.push({
callback: callback,
thisArg: thisArg
});
}
};
Observable.prototype.removeEventListener = function(eventNames, callback, thisArg) {
if (!types.isString(eventNames)) {
throw new TypeError("Events name(s) must be string.");
}
var events = eventNames.split(",");
for (var i = 0, l = events.length; i < l; i++) {
var event = events[i].trim();
if (callback) {
var list = this._getEventList(event, false);
if (list) {
var index = this._indexOfListener(list, callback, thisArg);
if (index >= 0) {
list.splice(index, 1);
}
if (list.length === 0) {
delete this._observers[event];
}
}
} else {
this._observers[event] = undefined;
delete this._observers[event];
}
}
};
Observable.prototype.notifyPropertyChange = function(propertyName, newValue) {
this.notify(this._createPropertyChangeData(propertyName, newValue));
};
Observable.prototype.set = function(name, value) {
if (this[name] === value) {
return;
}
var data = this._createPropertyChangeData(name, value);
this._setCore(data);
this.notify(data);
};
Observable.prototype.get = function(name) {
return this[name];
};
Observable.prototype._setCore = function(data) {
this.disableNotifications[data.propertyName] = true;
var newValue = WrappedValue.unwrap(data.value);
this[data.propertyName] = newValue;
delete this.disableNotifications[data.propertyName];
};
Observable.prototype.notify = function(data) {
if (this.disableNotifications[data.propertyName]) {
return;
}
var observers = this._getEventList(data.eventName);
if (!observers) {
return;
}
var i;
var entry;
var observersLength = observers.length;
for (i = observersLength - 1; i >= 0; i--) {
entry = observers[i];
if (entry.thisArg) {
entry.callback.apply(entry.thisArg, [ data ]);
} else {
entry.callback(data);
}
}
};
Observable.prototype.hasListeners = function(eventName) {
return eventName in this._observers;
};
Observable.prototype._createPropertyChangeData = function(name, value) {
return {
eventName: Observable.propertyChangeEvent,
propertyName: name,
object: this,
value: value
};
};
Observable.prototype._emit = function(eventNames) {
var events = eventNames.split(",");
for (var i = 0, l = events.length; i < l; i++) {
var event = events[i].trim();
this.notify({
eventName: event,
object: this
});
}
};
Observable.prototype._getEventList = function(eventName, createIfNeeded) {
if (!eventName) {
throw new TypeError("EventName must be valid string.");
}
var list = this._observers[eventName];
if (!list && createIfNeeded) {
list = [];
this._observers[eventName] = list;
}
return list;
};
Observable.prototype._indexOfListener = function(list, callback, thisArg) {
var i;
var entry;
for (i = 0; i < list.length; i++) {
entry = list[i];
if (thisArg) {
if (entry.callback === callback && entry.thisArg === thisArg) {
return i;
}
} else {
if (entry.callback === callback) {
return i;
}
}
}
return -1;
};
Observable.prototype.toString = function() {
return this.typeName;
};
Observable.propertyChangeEvent = "propertyChange";
return Observable;
}();
exports.Observable = Observable;
}, function(module, exports, __webpack_require__) {
var file_access_module = __webpack_require__(19);
var fileAccess;
var getFileAccess = function() {
if (!fileAccess) {
fileAccess = new file_access_module.FileSystemAccess();
}
return fileAccess;
};
var nameProperty = "_name";
var pathProperty = "_path";
var isKnownProperty = "_isKnown";
var fileLockedProperty = "_locked";
var extensionProperty = "_extension";
var lastModifiedProperty = "_lastModified";
var createFile = function(info) {
var file = new File();
file[pathProperty] = info.path;
file[nameProperty] = info.name;
file[extensionProperty] = info.extension;
return file;
};
var createFolder = function(info) {
var documents = knownFolders.documents();
if (info.path === documents.path) {
return documents;
}
var temp = knownFolders.temp();
if (info.path === temp.path) {
return temp;
}
var folder = new Folder();
folder[pathProperty] = info.path;
folder[nameProperty] = info.name;
return folder;
};
var FileSystemEntity = function() {
function FileSystemEntity() {}
Object.defineProperty(FileSystemEntity.prototype, "parent", {
get: function() {
var onError = function(error) {
throw error;
};
var folderInfo = getFileAccess().getParent(this.path, onError);
if (!folderInfo) {
return undefined;
}
return createFolder(folderInfo);
},
enumerable: true,
configurable: true
});
FileSystemEntity.prototype.remove = function() {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
_this.removeSync(localError);
if (!hasError) {
resolve();
}
});
};
FileSystemEntity.prototype.removeSync = function(onError) {
if (this[isKnownProperty]) {
if (onError) {
onError({
message: "Cannot delete known folder."
});
}
return;
}
var fileAccess = getFileAccess();
if (this instanceof File) {
fileAccess.deleteFile(this.path, onError);
} else if (this instanceof Folder) {
fileAccess.deleteFolder(this.path, onError);
}
};
FileSystemEntity.prototype.rename = function(newName) {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
_this.renameSync(newName, localError);
if (!hasError) {
resolve();
}
});
};
FileSystemEntity.prototype.renameSync = function(newName, onError) {
if (this[isKnownProperty]) {
if (onError) {
onError(new Error("Cannot rename known folder."));
}
return;
}
var parentFolder = this.parent;
if (!parentFolder) {
if (onError) {
onError(new Error("No parent folder."));
}
return;
}
var fileAccess = getFileAccess();
var path = parentFolder.path;
var newPath = fileAccess.joinPath(path, newName);
var hasError = false;
var localError = function(error) {
hasError = true;
if (onError) {
onError(error);
}
return null;
};
fileAccess.rename(this.path, newPath, localError);
this[pathProperty] = newPath;
this[nameProperty] = newName;
if (this instanceof File) {
this[extensionProperty] = fileAccess.getFileExtension(newPath);
}
};
Object.defineProperty(FileSystemEntity.prototype, "name", {
get: function() {
return this[nameProperty];
},
enumerable: true,
configurable: true
});
Object.defineProperty(FileSystemEntity.prototype, "path", {
get: function() {
return this[pathProperty];
},
enumerable: true,
configurable: true
});
Object.defineProperty(FileSystemEntity.prototype, "lastModified", {
get: function() {
var value = this[lastModifiedProperty];
if (!this[lastModifiedProperty]) {
value = this[lastModifiedProperty] = getFileAccess().getLastModified(this.path);
}
return value;
},
enumerable: true,
configurable: true
});
return FileSystemEntity;
}();
exports.FileSystemEntity = FileSystemEntity;
var File = function(_super) {
__extends(File, _super);
function File() {
_super.apply(this, arguments);
}
File.fromPath = function(path) {
var onError = function(error) {
throw error;
};
var fileInfo = getFileAccess().getFile(path, onError);
if (!fileInfo) {
return undefined;
}
return createFile(fileInfo);
};
File.exists = function(path) {
return getFileAccess().fileExists(path);
};
Object.defineProperty(File.prototype, "extension", {
get: function() {
return this[extensionProperty];
},
enumerable: true,
configurable: true
});
Object.defineProperty(File.prototype, "isLocked", {
get: function() {
return !!this[fileLockedProperty];
},
enumerable: true,
configurable: true
});
File.prototype.readSync = function(onError) {
this.checkAccess();
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
var content = getFileAccess().read(this.path, localError);
this[fileLockedProperty] = false;
return content;
};
File.prototype.writeSync = function(content, onError) {
this.checkAccess();
try {
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
getFileAccess().write(this.path, content, localError);
} finally {
this[fileLockedProperty] = false;
}
};
File.prototype.readText = function(encoding) {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
var content = _this.readTextSync(localError, encoding);
if (!hasError) {
resolve(content);
}
});
};
File.prototype.readTextSync = function(onError, encoding) {
this.checkAccess();
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
var content = getFileAccess().readText(this.path, localError, encoding);
this[fileLockedProperty] = false;
return content;
};
File.prototype.writeText = function(content, encoding) {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
_this.writeTextSync(content, localError, encoding);
if (!hasError) {
resolve();
}
});
};
File.prototype.writeTextSync = function(content, onError, encoding) {
this.checkAccess();
try {
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
getFileAccess().writeText(this.path, content, localError, encoding);
} finally {
this[fileLockedProperty] = false;
}
};
File.prototype.checkAccess = function() {
if (this.isLocked) {
throw new Error("Cannot access a locked file.");
}
};
return File;
}(FileSystemEntity);
exports.File = File;
var Folder = function(_super) {
__extends(Folder, _super);
function Folder() {
_super.apply(this, arguments);
}
Folder.fromPath = function(path) {
var onError = function(error) {
throw error;
};
var folderInfo = getFileAccess().getFolder(path, onError);
if (!folderInfo) {
return undefined;
}
return createFolder(folderInfo);
};
Folder.exists = function(path) {
return getFileAccess().folderExists(path);
};
Folder.prototype.contains = function(name) {
var fileAccess = getFileAccess();
var path = fileAccess.joinPath(this.path, name);
if (fileAccess.fileExists(path)) {
return true;
}
return fileAccess.folderExists(path);
};
Folder.prototype.clear = function() {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var onError = function(error) {
hasError = true;
reject(error);
};
_this.clearSync(onError);
if (!hasError) {
resolve();
}
});
};
Folder.prototype.clearSync = function(onError) {
getFileAccess().emptyFolder(this.path, onError);
};
Object.defineProperty(Folder.prototype, "isKnown", {
get: function() {
return this[isKnownProperty];
},
enumerable: true,
configurable: true
});
Folder.prototype.getFile = function(name) {
var fileAccess = getFileAccess();
var path = fileAccess.joinPath(this.path, name);
var onError = function(error) {
throw error;
};
var fileInfo = fileAccess.getFile(path, onError);
if (!fileInfo) {
return undefined;
}
return createFile(fileInfo);
};
Folder.prototype.getFolder = function(name) {
var fileAccess = getFileAccess();
var path = fileAccess.joinPath(this.path, name);
var onError = function(error) {
throw error;
};
var folderInfo = fileAccess.getFolder(path, onError);
if (!folderInfo) {
return undefined;
}
return createFolder(folderInfo);
};
Folder.prototype.getEntities = function() {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
var entities = _this.getEntitiesSync(localError);
if (!hasError) {
resolve(entities);
}
});
};
Folder.prototype.getEntitiesSync = function(onError) {
var fileInfos = getFileAccess().getEntities(this.path, onError);
if (!fileInfos) {
return null;
}
var entities = new Array();
var i;
for (i = 0; i < fileInfos.length; i++) {
if (fileInfos[i].extension) {
entities.push(createFile(fileInfos[i]));
} else {
entities.push(createFolder(fileInfos[i]));
}
}
return entities;
};
Folder.prototype.eachEntity = function(onEntity) {
if (!onEntity) {
return;
}
var onSuccess = function(fileInfo) {
var entity;
if (fileInfo.extension) {
entity = createFile(fileInfo);
} else {
entity = createFolder(fileInfo);
}
return onEntity(entity);
};
var onError = function(error) {
throw error;
};
getFileAccess().eachEntity(this.path, onSuccess, onError);
};
return Folder;
}(FileSystemEntity);
exports.Folder = Folder;
var knownFolders;
(function(knownFolders) {
var _documents;
var _temp;
var _app;
knownFolders.documents = function() {
if (!_documents) {
var path = getFileAccess().getDocumentsFolderPath();
_documents = new Folder();
_documents[pathProperty] = path;
_documents[isKnownProperty] = true;
}
return _documents;
};
knownFolders.temp = function() {
if (!_temp) {
var path = getFileAccess().getTempFolderPath();
_temp = new Folder();
_temp[pathProperty] = path;
_temp[isKnownProperty] = true;
}
return _temp;
};
knownFolders.currentApp = function() {
if (!_app) {
_app = new Folder();
_app[pathProperty] = getFileAccess().getLogicalRootPath() + "/app";
_app[isKnownProperty] = true;
}
return _app;
};
})(knownFolders = exports.knownFolders || (exports.knownFolders = {}));
var path;
(function(path_1) {
function normalize(path) {
return getFileAccess().normalizePath(path);
}
path_1.normalize = normalize;
function join() {
var paths = [];
for (var _i = 0; _i < arguments.length; _i++) {
paths[_i - 0] = arguments[_i];
}
var fileAccess = getFileAccess();
return fileAccess.joinPaths(paths);
}
path_1.join = join;
path_1.separator = getFileAccess().getPathSeparator();
})(path = exports.path || (exports.path = {}));
}, function(module, exports, __webpack_require__) {
var textModule = __webpack_require__(20);
var utils = __webpack_require__(21);
var FileSystemAccess = function() {
function FileSystemAccess() {
this._pathSeparator = "/";
}
FileSystemAccess.prototype.getLastModified = function(path) {
var javaFile = new java.io.File(path);
return new Date(javaFile.lastModified());
};
FileSystemAccess.prototype.getParent = function(path, onError) {
try {
var javaFile = new java.io.File(path);
var parent = javaFile.getParentFile();
return {
path: parent.getAbsolutePath(),
name: parent.getName()
};
} catch (exception) {
if (onError) {
onError(exception);
}
return undefined;
}
};
FileSystemAccess.prototype.getFile = function(path, onError) {
return this.ensureFile(new java.io.File(path), false, onError);
};
FileSystemAccess.prototype.getFolder = function(path, onError) {
var javaFile = new java.io.File(path);
var dirInfo = this.ensureFile(javaFile, true, onError);
if (!dirInfo) {
return undefined;
}
return {
path: dirInfo.path,
name: dirInfo.name
};
};
FileSystemAccess.prototype.eachEntity = function(path, onEntity, onError) {
if (!onEntity) {
return;
}
this.enumEntities(path, onEntity, onError);
};
FileSystemAccess.prototype.getEntities = function(path, onError) {
var fileInfos = new Array();
var onEntity = function(entity) {
fileInfos.push(entity);
return true;
};
var errorOccurred;
var localError = function(error) {
if (onError) {
onError(error);
}
errorOccurred = true;
};
this.enumEntities(path, onEntity, localError);
if (!errorOccurred) {
return fileInfos;
}
return null;
};
FileSystemAccess.prototype.fileExists = function(path) {
var file = new java.io.File(path);
return file.exists();
};
FileSystemAccess.prototype.folderExists = function(path) {
var file = new java.io.File(path);
return file.exists() && file.isDirectory();
};
FileSystemAccess.prototype.deleteFile = function(path, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.isFile()) {
if (onError) {
onError({
message: "The specified parameter is not a File entity."
});
}
return;
}
if (!javaFile.delete()) {
if (onError) {
onError({
message: "File deletion failed"
});
}
}
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.deleteFolder = function(path, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.getCanonicalFile().isDirectory()) {
if (onError) {
onError({
message: "The specified parameter is not a Folder entity."
});
}
return;
}
this.deleteFolderContent(javaFile);
if (!javaFile.delete()) {
if (onError) {
onError({
message: "Folder deletion failed."
});
}
}
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.emptyFolder = function(path, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.getCanonicalFile().isDirectory()) {
if (onError) {
onError({
message: "The specified parameter is not a Folder entity."
});
}
return;
}
this.deleteFolderContent(javaFile);
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.rename = function(path, newPath, onError) {
var javaFile = new java.io.File(path);
if (!javaFile.exists()) {
if (onError) {
onError(new Error("The file to rename does not exist"));
}
return;
}
var newFile = new java.io.File(newPath);
if (newFile.exists()) {
if (onError) {
onError(new Error("A file with the same name already exists."));
}
return;
}
if (!javaFile.renameTo(newFile)) {
if (onError) {
onError(new Error("Failed to rename file '" + path + "' to '" + newPath + "'"));
}
}
};
FileSystemAccess.prototype.getDocumentsFolderPath = function() {
var dir = utils.ad.getApplicationContext().getFilesDir();
return dir.getAbsolutePath();
};
FileSystemAccess.prototype.getLogicalRootPath = function() {
var dir = utils.ad.getApplicationContext().getFilesDir();
return dir.getCanonicalPath();
};
FileSystemAccess.prototype.getTempFolderPath = function() {
var dir = utils.ad.getApplicationContext().getCacheDir();
return dir.getAbsolutePath();
};
FileSystemAccess.prototype.read = function(path, onError) {
try {
var javaFile = new java.io.File(path);
var stream = new java.io.FileInputStream(javaFile);
var bytes = Array.create("byte", javaFile.length());
var dataInputStream = new java.io.DataInputStream(stream);
dataInputStream.readFully(bytes);
return bytes;
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.write = function(path, bytes, onError) {
try {
var javaFile = new java.io.File(path);
var stream = new java.io.FileOutputStream(javaFile);
stream.write(bytes, 0, bytes.length);
stream.close();
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.readText = function(path, onError, encoding) {
try {
var types = __webpack_require__(13);
var javaFile = new java.io.File(path);
var stream = new java.io.FileInputStream(javaFile);
var actualEncoding = encoding;
if (!actualEncoding) {
actualEncoding = textModule.encoding.UTF_8;
}
var reader = new java.io.InputStreamReader(stream, actualEncoding);
var bufferedReader = new java.io.BufferedReader(reader);
var line = undefined;
var result = "";
while (true) {
line = bufferedReader.readLine();
if (types.isNullOrUndefined(line)) {
break;
}
if (result.length > 0) {
result += "\n";
}
result += line;
}
if (actualEncoding === textModule.encoding.UTF_8) {
result = FileSystemAccess._removeUtf8Bom(result);
}
bufferedReader.close();
return result;
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess._removeUtf8Bom = function(s) {
if (s.charCodeAt(0) === 65279) {
s = s.slice(1);
}
return s;
};
FileSystemAccess.prototype.writeText = function(path, content, onError, encoding) {
try {
var javaFile = new java.io.File(path);
var stream = new java.io.FileOutputStream(javaFile);
var actualEncoding = encoding;
if (!actualEncoding) {
actualEncoding = textModule.encoding.UTF_8;
}
var writer = new java.io.OutputStreamWriter(stream, actualEncoding);
writer.write(content);
writer.close();
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.deleteFolderContent = function(file) {
var filesList = file.listFiles();
var i, childFile, success = false;
for (i = 0; i < filesList.length; i++) {
childFile = filesList[i];
if (childFile.getCanonicalFile().isDirectory()) {
success = this.deleteFolderContent(childFile);
if (!success) {
break;
}
}
success = childFile.delete();
}
return success;
};
FileSystemAccess.prototype.ensureFile = function(javaFile, isFolder, onError) {
try {
if (!javaFile.exists()) {
var created;
if (isFolder) {
created = javaFile.mkdirs();
} else {
created = javaFile.createNewFile();
}
if (!created) {
if (onError) {
onError("Failed to create new java File for path " + javaFile.getAbsolutePath());
}
return undefined;
} else {
javaFile.setReadable(true);
javaFile.setWritable(true);
}
}
var path = javaFile.getAbsolutePath();
return {
path: path,
name: javaFile.getName(),
extension: this.getFileExtension(path)
};
} catch (exception) {
if (onError) {
onError(exception);
}
return undefined;
}
};
FileSystemAccess.prototype.getFileExtension = function(path) {
var dotIndex = path.lastIndexOf(".");
if (dotIndex && dotIndex >= 0 && dotIndex < path.length) {
return path.substring(dotIndex);
}
return "";
};
FileSystemAccess.prototype.enumEntities = function(path, callback, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.getCanonicalFile().isDirectory()) {
if (onError) {
onError("There is no folder existing at path " + path);
}
return;
}
var filesList = javaFile.listFiles();
var length = filesList.length;
var i;
var info;
var retVal;
for (i = 0; i < length; i++) {
javaFile = filesList[i];
info = {
path: javaFile.getAbsolutePath(),
name: javaFile.getName()
};
if (javaFile.isFile()) {
info.extension = this.getFileExtension(info.path);
}
retVal = callback(info);
if (retVal === false) {
break;
}
}
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.getPathSeparator = function() {
return this._pathSeparator;
};
FileSystemAccess.prototype.normalizePath = function(path) {
var file = new java.io.File(path);
return file.getAbsolutePath();
};
FileSystemAccess.prototype.joinPath = function(left, right) {
var file1 = new java.io.File(left);
var file2 = new java.io.File(file1, right);
return file2.getAbsolutePath();
};
FileSystemAccess.prototype.joinPaths = function(paths) {
if (!paths || paths.length === 0) {
return "";
}
if (paths.length === 1) {
return paths[0];
}
var i, result = paths[0];
for (i = 1; i < paths.length; i++) {
result = this.joinPath(result, paths[i]);
}
return this.normalizePath(result);
};
return FileSystemAccess;
}();
exports.FileSystemAccess = FileSystemAccess;
}, function(module, exports) {
var encoding;
(function(encoding) {
encoding.ISO_8859_1 = "ISO-8859-1";
encoding.US_ASCII = "US-ASCII";
encoding.UTF_16 = "UTF-16";
encoding.UTF_16BE = "UTF-16BE";
encoding.UTF_16LE = "UTF-16LE";
encoding.UTF_8 = "UTF-8";
})(encoding = exports.encoding || (exports.encoding = {}));
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(22);
var enums = __webpack_require__(23);
global.moduleMerge(common, exports);
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(26);
}
}
var layout;
(function(layout) {
var density = -1;
var metrics;
var MODE_SHIFT = 30;
var MODE_MASK = 3 << MODE_SHIFT;
var sdkVersion = -1;
var useOldMeasureSpec = false;
function makeMeasureSpec(size, mode) {
if (sdkVersion === -1) {
sdkVersion = ad.getApplicationContext().getApplicationInfo().targetSdkVersion;
useOldMeasureSpec = sdkVersion <= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
}
if (useOldMeasureSpec) {
return size + mode;
}
return size & ~MODE_MASK | mode & MODE_MASK;
}
layout.makeMeasureSpec = makeMeasureSpec;
function getDisplayMetrics() {
if (!metrics) {
metrics = ad.getApplicationContext().getResources().getDisplayMetrics();
}
return metrics;
}
layout.getDisplayMetrics = getDisplayMetrics;
function getDisplayDensity() {
if (density === -1) {
density = getDisplayMetrics().density;
}
return density;
}
layout.getDisplayDensity = getDisplayDensity;
function toDevicePixels(value) {
return value * getDisplayDensity();
}
layout.toDevicePixels = toDevicePixels;
function toDeviceIndependentPixels(value) {
return value / getDisplayDensity();
}
layout.toDeviceIndependentPixels = toDeviceIndependentPixels;
})(layout = exports.layout || (exports.layout = {}));
var ad;
(function(ad) {
function setTextDecoration(view, value) {
var flags = 0;
var values = (value + "").split(" ");
if (values.indexOf(enums.TextDecoration.underline) !== -1) {
flags = flags | android.graphics.Paint.UNDERLINE_TEXT_FLAG;
}
if (values.indexOf(enums.TextDecoration.lineThrough) !== -1) {
flags = flags | android.graphics.Paint.STRIKE_THRU_TEXT_FLAG;
}
if (values.indexOf(enums.TextDecoration.none) === -1) {
view.setPaintFlags(flags);
} else {
view.setPaintFlags(0);
}
}
ad.setTextDecoration = setTextDecoration;
function setTextTransform(v, value) {
var view = v._nativeView;
var str = view.getText() + "";
var result = getTransformedString(value, view, str);
if (v.formattedText) {
for (var i = 0; i < v.formattedText.spans.length; i++) {
var span = v.formattedText.spans.getItem(i);
span.text = getTransformedString(value, view, span.text);
}
} else {
view.setText(result);
}
}
ad.setTextTransform = setTextTransform;
function getTransformedString(textTransform, view, stringToTransform) {
var result;
switch (textTransform) {
case enums.TextTransform.none:
default:
result = view["originalString"] || stringToTransform;
if (view["transformationMethod"]) {
view.setTransformationMethod(view["transformationMethod"]);
}
break;

case enums.TextTransform.uppercase:
view.setTransformationMethod(null);
result = stringToTransform.toUpperCase();
break;

case enums.TextTransform.lowercase:
view.setTransformationMethod(null);
result = stringToTransform.toLowerCase();
break;

case enums.TextTransform.capitalize:
view.setTransformationMethod(null);
result = getCapitalizedString(stringToTransform);
break;
}
if (!view["originalString"]) {
view["originalString"] = stringToTransform;
view["transformationMethod"] = view.getTransformationMethod();
}
return result;
}
function getCapitalizedString(str) {
var words = str.split(" ");
var newWords = [];
for (var i = 0; i < words.length; i++) {
var word = words[i].toLowerCase();
newWords.push(word.substr(0, 1).toUpperCase() + word.substring(1));
}
return newWords.join(" ");
}
function setWhiteSpace(view, value) {
view.setSingleLine(value === enums.WhiteSpace.nowrap);
view.setEllipsize(value === enums.WhiteSpace.nowrap ? android.text.TextUtils.TruncateAt.END : null);
}
ad.setWhiteSpace = setWhiteSpace;
function getApplication() {
return com.tns.NativeScriptApplication.getInstance();
}
ad.getApplication = getApplication;
function getApplicationContext() {
return getApplication().getApplicationContext();
}
ad.getApplicationContext = getApplicationContext;
var inputMethodManager;
function getInputMethodManager() {
if (!inputMethodManager) {
inputMethodManager = getApplicationContext().getSystemService(android.content.Context.INPUT_METHOD_SERVICE);
}
return inputMethodManager;
}
ad.getInputMethodManager = getInputMethodManager;
function showSoftInput(nativeView) {
var imm = getInputMethodManager();
if (imm && nativeView instanceof android.view.View) {
imm.showSoftInput(nativeView, android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT);
}
}
ad.showSoftInput = showSoftInput;
function dismissSoftInput(nativeView) {
var imm = getInputMethodManager();
if (imm && nativeView instanceof android.view.View) {
imm.hideSoftInputFromWindow(nativeView.getWindowToken(), 0);
}
}
ad.dismissSoftInput = dismissSoftInput;
var collections;
(function(collections) {
function stringArrayToStringSet(str) {
var hashSet = new java.util.HashSet();
if ("undefined" !== typeof str) {
for (var element in str) {
hashSet.add("" + str[element]);
}
}
return hashSet;
}
collections.stringArrayToStringSet = stringArrayToStringSet;
function stringSetToStringArray(stringSet) {
var arr = [];
if ("undefined" !== typeof stringSet) {
var it = stringSet.iterator();
while (it.hasNext()) {
var element = "" + it.next();
arr.push(element);
}
}
return arr;
}
collections.stringSetToStringArray = stringSetToStringArray;
})(collections = ad.collections || (ad.collections = {}));
var resources;
(function(resources_1) {
var attr;
var attrCache = new Map();
function getDrawableId(name) {
return getId(":drawable/" + name);
}
resources_1.getDrawableId = getDrawableId;
function getStringId(name) {
return getId(":string/" + name);
}
resources_1.getStringId = getStringId;
function getId(name) {
var resources = getApplicationContext().getResources();
var packageName = getApplicationContext().getPackageName();
var uri = packageName + name;
return resources.getIdentifier(uri, null, null);
}
resources_1.getId = getId;
function getPalleteColor(name, context) {
if (attrCache.has(name)) {
return attrCache.get(name);
}
var result = 0;
try {
if (!attr) {
attr = java.lang.Class.forName("android.support.v7.appcompat.R$attr");
}
var colorID = 0;
var field = attr.getField(name);
if (field) {
colorID = field.getInt(null);
}
if (colorID) {
var typedValue = new android.util.TypedValue();
context.getTheme().resolveAttribute(colorID, typedValue, true);
result = typedValue.data;
}
} catch (ex) {
ensureTrace();
trace.write("Cannot get pallete color: " + name, trace.categories.Error, trace.messageType.error);
}
attrCache.set(name, result);
return result;
}
resources_1.getPalleteColor = getPalleteColor;
})(resources = ad.resources || (ad.resources = {}));
})(ad = exports.ad || (exports.ad = {}));
function GC() {
gc();
}
exports.GC = GC;
function openUrl(location) {
var context = ad.getApplicationContext();
try {
var intent = new android.content.Intent(android.content.Intent.ACTION_VIEW, android.net.Uri.parse(location.trim()));
intent.addFlags(android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
context.startActivity(intent);
} catch (e) {
console.error("Error in OpenURL", e);
return false;
}
return true;
}
exports.openUrl = openUrl;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(13);
exports.RESOURCE_PREFIX = "res://";
function copyFrom(source, target) {
if (types.isDefined(source) && types.isDefined(target)) {
var i;
var key;
var value;
var keys = Object.keys(source);
for (i = 0; i < keys.length; i++) {
key = keys[i];
value = source[key];
if (types.isDefined(value)) {
target[key] = value;
}
}
}
}
exports.copyFrom = copyFrom;
function parseJSON(source) {
var src = source.trim();
if (src.lastIndexOf(")") === src.length - 1) {
return JSON.parse(src.substring(src.indexOf("(") + 1, src.lastIndexOf(")")));
}
return JSON.parse(src);
}
exports.parseJSON = parseJSON;
function escapeRegexSymbols(source) {
var escapeRegex = /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g;
return source.replace(escapeRegex, "\\$&");
}
exports.escapeRegexSymbols = escapeRegexSymbols;
var layout;
(function(layout) {
var MODE_SHIFT = 30;
var MODE_MASK = 3 << MODE_SHIFT;
layout.UNSPECIFIED = 0 << MODE_SHIFT;
layout.EXACTLY = 1 << MODE_SHIFT;
layout.AT_MOST = 2 << MODE_SHIFT;
layout.MEASURED_STATE_TOO_SMALL = 16777216;
layout.MEASURED_STATE_MASK = 4278190080;
layout.MEASURED_SIZE_MASK = 16777215;
function getMode(mode) {
switch (mode) {
case layout.EXACTLY:
return "Exact";

case layout.AT_MOST:
return "AtMost";

default:
return "Unspecified";
}
}
layout.getMode = getMode;
function getMeasureSpecMode(spec) {
return spec & MODE_MASK;
}
layout.getMeasureSpecMode = getMeasureSpecMode;
function getMeasureSpecSize(spec) {
return spec & ~MODE_MASK;
}
layout.getMeasureSpecSize = getMeasureSpecSize;
function measureSpecToString(measureSpec) {
var mode = getMeasureSpecMode(measureSpec);
var size = getMeasureSpecSize(measureSpec);
var text = "MeasureSpec: ";
if (mode === layout.UNSPECIFIED) {
text += "UNSPECIFIED ";
} else if (mode === layout.EXACTLY) {
text += "EXACTLY ";
} else if (mode === layout.AT_MOST) {
text += "AT_MOST ";
} else {
text += mode + " ";
}
text += size;
return text;
}
layout.measureSpecToString = measureSpecToString;
})(layout = exports.layout || (exports.layout = {}));
function isFileOrResourcePath(path) {
if (!types.isString(path)) {
return false;
}
return path.indexOf("~/") === 0 || path.indexOf("/") === 0 || path.indexOf(exports.RESOURCE_PREFIX) === 0;
}
exports.isFileOrResourcePath = isFileOrResourcePath;
function isDataURI(uri) {
if (!types.isString(uri)) {
return false;
}
var firstSegment = uri.trim().split(",")[0];
return firstSegment && firstSegment.indexOf("data:") === 0 && firstSegment.indexOf("base64") >= 0;
}
exports.isDataURI = isDataURI;
}, function(module, exports, __webpack_require__) {
var animationModule = __webpack_require__(24);
var KeyboardType;
(function(KeyboardType) {
KeyboardType.datetime = "datetime";
KeyboardType.phone = "phone";
KeyboardType.number = "number";
KeyboardType.url = "url";
KeyboardType.email = "email";
})(KeyboardType = exports.KeyboardType || (exports.KeyboardType = {}));
var ReturnKeyType;
(function(ReturnKeyType) {
ReturnKeyType.done = "done";
ReturnKeyType.next = "next";
ReturnKeyType.go = "go";
ReturnKeyType.search = "search";
ReturnKeyType.send = "send";
})(ReturnKeyType = exports.ReturnKeyType || (exports.ReturnKeyType = {}));
var TextAlignment;
(function(TextAlignment) {
TextAlignment.left = "left";
TextAlignment.center = "center";
TextAlignment.right = "right";
})(TextAlignment = exports.TextAlignment || (exports.TextAlignment = {}));
var TextDecoration;
(function(TextDecoration) {
TextDecoration.none = "none";
TextDecoration.underline = "underline";
TextDecoration.lineThrough = "line-through";
})(TextDecoration = exports.TextDecoration || (exports.TextDecoration = {}));
var TextTransform;
(function(TextTransform) {
TextTransform.none = "none";
TextTransform.capitalize = "capitalize";
TextTransform.uppercase = "uppercase";
TextTransform.lowercase = "lowercase";
})(TextTransform = exports.TextTransform || (exports.TextTransform = {}));
var WhiteSpace;
(function(WhiteSpace) {
WhiteSpace.normal = "normal";
WhiteSpace.nowrap = "nowrap";
})(WhiteSpace = exports.WhiteSpace || (exports.WhiteSpace = {}));
var Orientation;
(function(Orientation) {
Orientation.horizontal = "horizontal";
Orientation.vertical = "vertical";
})(Orientation = exports.Orientation || (exports.Orientation = {}));
var DeviceOrientation;
(function(DeviceOrientation) {
DeviceOrientation.portrait = "portrait";
DeviceOrientation.landscape = "landscape";
DeviceOrientation.unknown = "unknown";
})(DeviceOrientation = exports.DeviceOrientation || (exports.DeviceOrientation = {}));
var HorizontalAlignment;
(function(HorizontalAlignment) {
HorizontalAlignment.left = "left";
HorizontalAlignment.center = "center";
HorizontalAlignment.right = "right";
HorizontalAlignment.stretch = "stretch";
})(HorizontalAlignment = exports.HorizontalAlignment || (exports.HorizontalAlignment = {}));
var VerticalAlignment;
(function(VerticalAlignment) {
VerticalAlignment.top = "top";
VerticalAlignment.center = "center";
VerticalAlignment.middle = "middle";
VerticalAlignment.bottom = "bottom";
VerticalAlignment.stretch = "stretch";
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));
var Stretch;
(function(Stretch) {
Stretch.none = "none";
Stretch.aspectFill = "aspectFill";
Stretch.aspectFit = "aspectFit";
Stretch.fill = "fill";
})(Stretch = exports.Stretch || (exports.Stretch = {}));
var Visibility;
(function(Visibility) {
Visibility.visible = "visible";
Visibility.collapse = "collapse";
Visibility.collapsed = "collapsed";
})(Visibility = exports.Visibility || (exports.Visibility = {}));
var FontAttributes;
(function(FontAttributes) {
FontAttributes.Normal = 0;
FontAttributes.Bold = 1;
FontAttributes.Italic = 1 << 1;
})(FontAttributes = exports.FontAttributes || (exports.FontAttributes = {}));
var DeviceType;
(function(DeviceType) {
DeviceType.Phone = "Phone";
DeviceType.Tablet = "Tablet";
})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));
var UpdateTextTrigger;
(function(UpdateTextTrigger) {
UpdateTextTrigger.focusLost = "focusLost";
UpdateTextTrigger.textChanged = "textChanged";
})(UpdateTextTrigger = exports.UpdateTextTrigger || (exports.UpdateTextTrigger = {}));
var Accuracy;
(function(Accuracy) {
Accuracy.any = 300;
Accuracy.high = 3;
})(Accuracy = exports.Accuracy || (exports.Accuracy = {}));
var Dock;
(function(Dock) {
Dock.left = "left";
Dock.top = "top";
Dock.right = "right";
Dock.bottom = "bottom";
})(Dock = exports.Dock || (exports.Dock = {}));
var AutocapitalizationType;
(function(AutocapitalizationType) {
AutocapitalizationType.none = "none";
AutocapitalizationType.words = "words";
AutocapitalizationType.sentences = "sentences";
AutocapitalizationType.allCharacters = "allCharacters";
})(AutocapitalizationType = exports.AutocapitalizationType || (exports.AutocapitalizationType = {}));
var NavigationBarVisibility;
(function(NavigationBarVisibility) {
NavigationBarVisibility.auto = "auto";
NavigationBarVisibility.never = "never";
NavigationBarVisibility.always = "always";
})(NavigationBarVisibility = exports.NavigationBarVisibility || (exports.NavigationBarVisibility = {}));
var AndroidActionBarIconVisibility;
(function(AndroidActionBarIconVisibility) {
AndroidActionBarIconVisibility.auto = "auto";
AndroidActionBarIconVisibility.never = "never";
AndroidActionBarIconVisibility.always = "always";
})(AndroidActionBarIconVisibility = exports.AndroidActionBarIconVisibility || (exports.AndroidActionBarIconVisibility = {}));
var AndroidActionItemPosition;
(function(AndroidActionItemPosition) {
AndroidActionItemPosition.actionBar = "actionBar";
AndroidActionItemPosition.actionBarIfRoom = "actionBarIfRoom";
AndroidActionItemPosition.popup = "popup";
})(AndroidActionItemPosition = exports.AndroidActionItemPosition || (exports.AndroidActionItemPosition = {}));
var IOSActionItemPosition;
(function(IOSActionItemPosition) {
IOSActionItemPosition.left = "left";
IOSActionItemPosition.right = "right";
})(IOSActionItemPosition = exports.IOSActionItemPosition || (exports.IOSActionItemPosition = {}));
var ImageFormat;
(function(ImageFormat) {
ImageFormat.png = "png";
ImageFormat.jpeg = "jpeg";
})(ImageFormat = exports.ImageFormat || (exports.ImageFormat = {}));
var FontStyle;
(function(FontStyle) {
FontStyle.normal = "normal";
FontStyle.italic = "italic";
})(FontStyle = exports.FontStyle || (exports.FontStyle = {}));
var FontWeight;
(function(FontWeight) {
FontWeight.normal = "normal";
FontWeight.bold = "bold";
})(FontWeight = exports.FontWeight || (exports.FontWeight = {}));
var BackgroundRepeat;
(function(BackgroundRepeat) {
BackgroundRepeat.repeat = "repeat";
BackgroundRepeat.repeatX = "repeat-x";
BackgroundRepeat.repeatY = "repeat-y";
BackgroundRepeat.noRepeat = "no-repeat";
})(BackgroundRepeat = exports.BackgroundRepeat || (exports.BackgroundRepeat = {}));
var AnimationCurve;
(function(AnimationCurve) {
AnimationCurve.easeIn = "easeIn";
AnimationCurve.easeOut = "easeOut";
AnimationCurve.easeInOut = "easeInOut";
AnimationCurve.linear = "linear";
AnimationCurve.spring = "spring";
function cubicBezier(x1, y1, x2, y2) {
return new animationModule.CubicBezierAnimationCurve(x1, y1, x2, y2);
}
AnimationCurve.cubicBezier = cubicBezier;
})(AnimationCurve = exports.AnimationCurve || (exports.AnimationCurve = {}));
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(25);
var utils = __webpack_require__(21);
var color = __webpack_require__(27);
var trace = __webpack_require__(26);
var types = __webpack_require__(13);
var enums = __webpack_require__(23);
global.moduleMerge(common, exports);
var argbEvaluator;
function ensureArgbEvaluator() {
if (!argbEvaluator) {
argbEvaluator = new android.animation.ArgbEvaluator();
}
}
var keyPrefix = "ui.animation.";
var propertyKeys = {};
propertyKeys[common.Properties.backgroundColor] = Symbol(keyPrefix + common.Properties.backgroundColor);
propertyKeys[common.Properties.opacity] = Symbol(keyPrefix + common.Properties.opacity);
propertyKeys[common.Properties.rotate] = Symbol(keyPrefix + common.Properties.rotate);
propertyKeys[common.Properties.scale] = Symbol(keyPrefix + common.Properties.scale);
propertyKeys[common.Properties.translate] = Symbol(keyPrefix + common.Properties.translate);
var Animation = function(_super) {
__extends(Animation, _super);
function Animation(animationDefinitions, playSequentially) {
_super.call(this, animationDefinitions, playSequentially);
var that = this;
this._animatorListener = new android.animation.Animator.AnimatorListener({
onAnimationStart: function(animator) {
trace.write("MainAnimatorListener.onAndroidAnimationStart(" + animator + ")", trace.categories.Animation);
},
onAnimationRepeat: function(animator) {
trace.write("MainAnimatorListener.onAnimationRepeat(" + animator + ")", trace.categories.Animation);
},
onAnimationEnd: function(animator) {
trace.write("MainAnimatorListener.onAnimationEnd(" + animator + ")", trace.categories.Animation);
that._onAndroidAnimationEnd();
},
onAnimationCancel: function(animator) {
trace.write("MainAnimatorListener.onAnimationCancel(" + animator + ")", trace.categories.Animation);
that._onAndroidAnimationCancel();
}
});
}
Animation.prototype.play = function() {
var animationFinishedPromise = _super.prototype.play.call(this);
var i;
var length;
this._animators = new Array();
this._propertyUpdateCallbacks = new Array();
this._propertyResetCallbacks = new Array();
i = 0;
length = this._propertyAnimations.length;
for (;i < length; i++) {
this._createAnimators(this._propertyAnimations[i]);
}
this._nativeAnimatorsArray = Array.create(android.animation.Animator, this._animators.length);
i = 0;
length = this._animators.length;
for (;i < length; i++) {
this._nativeAnimatorsArray[i] = this._animators[i];
}
this._animatorSet = new android.animation.AnimatorSet();
this._animatorSet.addListener(this._animatorListener);
if (this._playSequentially) {
this._animatorSet.playSequentially(this._nativeAnimatorsArray);
} else {
this._animatorSet.playTogether(this._nativeAnimatorsArray);
}
trace.write("Starting " + this._nativeAnimatorsArray.length + " animations " + (this._playSequentially ? "sequentially." : "together."), trace.categories.Animation);
this._animatorSet.setupStartValues();
this._animatorSet.start();
return animationFinishedPromise;
};
Animation.prototype.cancel = function() {
_super.prototype.cancel.call(this);
trace.write("Cancelling AnimatorSet.", trace.categories.Animation);
this._animatorSet.cancel();
};
Animation.prototype._onAndroidAnimationEnd = function() {
if (!this.isPlaying) {
return;
}
var i = 0;
var length = this._propertyUpdateCallbacks.length;
for (;i < length; i++) {
this._propertyUpdateCallbacks[i]();
}
this._resolveAnimationFinishedPromise();
};
Animation.prototype._onAndroidAnimationCancel = function() {
var i = 0;
var length = this._propertyResetCallbacks.length;
for (;i < length; i++) {
this._propertyResetCallbacks[i]();
}
this._rejectAnimationFinishedPromise();
};
Animation.prototype._createAnimators = function(propertyAnimation) {
trace.write("Creating ObjectAnimator(s) for animation: " + common.Animation._getAnimationInfo(propertyAnimation) + "...", trace.categories.Animation);
if (types.isNullOrUndefined(propertyAnimation.target)) {
throw new Error("Animation target cannot be null or undefined!");
}
if (types.isNullOrUndefined(propertyAnimation.property)) {
throw new Error("Animation property cannot be null or undefined!");
}
if (types.isNullOrUndefined(propertyAnimation.value)) {
throw new Error("Animation value cannot be null or undefined!");
}
var nativeArray;
var nativeView = propertyAnimation.target._nativeView;
var animators = new Array();
var propertyUpdateCallbacks = new Array();
var propertyResetCallbacks = new Array();
var originalValue1;
var originalValue2;
var density = utils.layout.getDisplayDensity();
var xyObjectAnimators;
var animatorSet;
var key = propertyKeys[propertyAnimation.property];
if (key) {
propertyAnimation.target[key] = propertyAnimation;
}
function checkAnimation(cb) {
return function() {
if (propertyAnimation.target[key] === propertyAnimation) {
delete propertyAnimation.target[key];
cb();
}
};
}
switch (propertyAnimation.property) {
case common.Properties.opacity:
originalValue1 = nativeView.getAlpha();
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value;
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.opacity = propertyAnimation.value;
}));
propertyResetCallbacks.push(checkAnimation(function() {
nativeView.setAlpha(originalValue1);
}));
animators.push(android.animation.ObjectAnimator.ofFloat(nativeView, "alpha", nativeArray));
break;

case common.Properties.backgroundColor:
ensureArgbEvaluator();
originalValue1 = nativeView.getBackground();
nativeArray = Array.create(java.lang.Object, 2);
nativeArray[0] = propertyAnimation.target.backgroundColor ? java.lang.Integer.valueOf(propertyAnimation.target.backgroundColor.argb) : java.lang.Integer.valueOf(-1);
nativeArray[1] = java.lang.Integer.valueOf(propertyAnimation.value.argb);
var animator = android.animation.ValueAnimator.ofObject(argbEvaluator, nativeArray);
animator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener({
onAnimationUpdate: function(animator) {
var argb = animator.getAnimatedValue().intValue();
propertyAnimation.target.backgroundColor = new color.Color(argb);
}
}));
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.backgroundColor = propertyAnimation.value;
}));
propertyResetCallbacks.push(checkAnimation(function() {
nativeView.setBackground(originalValue1);
}));
animators.push(animator);
break;

case common.Properties.translate:
xyObjectAnimators = Array.create(android.animation.Animator, 2);
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.x * density;
xyObjectAnimators[0] = android.animation.ObjectAnimator.ofFloat(nativeView, "translationX", nativeArray);
xyObjectAnimators[0].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.y * density;
xyObjectAnimators[1] = android.animation.ObjectAnimator.ofFloat(nativeView, "translationY", nativeArray);
xyObjectAnimators[1].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
originalValue1 = nativeView.getTranslationX();
originalValue2 = nativeView.getTranslationY();
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.translateX = propertyAnimation.value.x;
propertyAnimation.target.translateY = propertyAnimation.value.y;
}));
propertyResetCallbacks.push(checkAnimation(function() {
nativeView.setTranslationX(originalValue1);
nativeView.setTranslationY(originalValue2);
}));
animatorSet = new android.animation.AnimatorSet();
animatorSet.playTogether(xyObjectAnimators);
animatorSet.setupStartValues();
animators.push(animatorSet);
break;

case common.Properties.scale:
xyObjectAnimators = Array.create(android.animation.Animator, 2);
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.x;
xyObjectAnimators[0] = android.animation.ObjectAnimator.ofFloat(nativeView, "scaleX", nativeArray);
xyObjectAnimators[0].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.y;
xyObjectAnimators[1] = android.animation.ObjectAnimator.ofFloat(nativeView, "scaleY", nativeArray);
xyObjectAnimators[1].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
originalValue1 = nativeView.getScaleX();
originalValue2 = nativeView.getScaleY();
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.scaleX = propertyAnimation.value.x;
propertyAnimation.target.scaleY = propertyAnimation.value.y;
}));
propertyResetCallbacks.push(checkAnimation(function() {
nativeView.setScaleY(originalValue1);
nativeView.setScaleY(originalValue2);
}));
animatorSet = new android.animation.AnimatorSet();
animatorSet.playTogether(xyObjectAnimators);
animatorSet.setupStartValues();
animators.push(animatorSet);
break;

case common.Properties.rotate:
originalValue1 = nativeView.getRotation();
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value;
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.rotate = propertyAnimation.value;
}));
propertyResetCallbacks.push(checkAnimation(function() {
nativeView.setRotation(originalValue1);
}));
animators.push(android.animation.ObjectAnimator.ofFloat(nativeView, "rotation", nativeArray));
break;

default:
throw new Error("Cannot animate " + propertyAnimation.property);
}
var i = 0;
var length = animators.length;
for (;i < length; i++) {
if (propertyAnimation.duration !== undefined) {
animators[i].setDuration(propertyAnimation.duration);
}
if (propertyAnimation.delay !== undefined) {
animators[i].setStartDelay(propertyAnimation.delay);
}
if (propertyAnimation.iterations !== undefined && animators[i] instanceof android.animation.ValueAnimator) {
animators[i].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
}
if (propertyAnimation.curve !== undefined) {
animators[i].setInterpolator(propertyAnimation.curve);
}
trace.write("Animator created: " + animators[i], trace.categories.Animation);
}
this._animators = this._animators.concat(animators);
this._propertyUpdateCallbacks = this._propertyUpdateCallbacks.concat(propertyUpdateCallbacks);
this._propertyResetCallbacks = this._propertyResetCallbacks.concat(propertyResetCallbacks);
};
Animation._getAndroidRepeatCount = function(iterations) {
return iterations === Number.POSITIVE_INFINITY ? android.view.animation.Animation.INFINITE : iterations - 1;
};
return Animation;
}(common.Animation);
exports.Animation = Animation;
var easeIn;
var easeOut;
var easeInOut;
var linear;
var bounce;
function _resolveAnimationCurve(curve) {
switch (curve) {
case enums.AnimationCurve.easeIn:
trace.write("Animation curve resolved to android.view.animation.AccelerateInterpolator(1).", trace.categories.Animation);
return easeIn;

case enums.AnimationCurve.easeOut:
trace.write("Animation curve resolved to android.view.animation.DecelerateInterpolator(1).", trace.categories.Animation);
return easeOut;

case enums.AnimationCurve.easeInOut:
trace.write("Animation curve resolved to android.view.animation.AccelerateDecelerateInterpolator().", trace.categories.Animation);
return easeInOut;

case enums.AnimationCurve.linear:
trace.write("Animation curve resolved to android.view.animation.LinearInterpolator().", trace.categories.Animation);
return linear;

case enums.AnimationCurve.spring:
trace.write("Animation curve resolved to android.view.animation.BounceInterpolator().", trace.categories.Animation);
return bounce;

default:
trace.write("Animation curve resolved to original: " + curve, trace.categories.Animation);
if (curve instanceof common.CubicBezierAnimationCurve) {
var animationCurve = curve;
var interpolator = android.support.v4.view.animation.PathInterpolatorCompat.create(animationCurve.x1, animationCurve.y1, animationCurve.x2, animationCurve.y2);
return interpolator;
}
return curve;
}
}
exports._resolveAnimationCurve = _resolveAnimationCurve;
}, function(module, exports, __webpack_require__) {
var definition = __webpack_require__(24);
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(26);
}
}
var Properties;
(function(Properties) {
Properties.opacity = "opacity";
Properties.backgroundColor = "backgroundColor";
Properties.translate = "translate";
Properties.rotate = "rotate";
Properties.scale = "scale";
})(Properties = exports.Properties || (exports.Properties = {}));
var CubicBezierAnimationCurve = function() {
function CubicBezierAnimationCurve(x1, y1, x2, y2) {
this.x1 = x1;
this.y1 = y1;
this.x2 = x2;
this.y2 = y2;
}
return CubicBezierAnimationCurve;
}();
exports.CubicBezierAnimationCurve = CubicBezierAnimationCurve;
var Animation = function() {
function Animation(animationDefinitions, playSequentially) {
if (!animationDefinitions || animationDefinitions.length === 0) {
throw new Error("No animation definitions specified");
}
ensureTrace();
trace.write("Analyzing " + animationDefinitions.length + " animation definitions...", trace.categories.Animation);
this._propertyAnimations = new Array();
var i = 0;
var length = animationDefinitions.length;
for (;i < length; i++) {
animationDefinitions[i].curve = definition._resolveAnimationCurve(animationDefinitions[i].curve);
this._propertyAnimations = this._propertyAnimations.concat(Animation._createPropertyAnimations(animationDefinitions[i]));
}
if (this._propertyAnimations.length === 0) {
throw new Error("Nothing to animate.");
}
trace.write("Created " + this._propertyAnimations.length + " individual property animations.", trace.categories.Animation);
this._playSequentially = playSequentially;
}
Animation.prototype.play = function() {
var _this = this;
if (this.isPlaying) {
throw new Error("Animation is already playing.");
}
var animationFinishedPromise = new Promise(function(resolve, reject) {
_this._resolve = resolve;
_this._reject = reject;
});
this._isPlaying = true;
return animationFinishedPromise;
};
Animation.prototype.cancel = function() {
if (!this.isPlaying) {
throw new Error("Animation is not currently playing.");
}
};
Object.defineProperty(Animation.prototype, "isPlaying", {
get: function() {
return this._isPlaying;
},
enumerable: true,
configurable: true
});
Animation.prototype._resolveAnimationFinishedPromise = function() {
this._isPlaying = false;
this._resolve();
};
Animation.prototype._rejectAnimationFinishedPromise = function() {
this._isPlaying = false;
this._reject(new Error("Animation cancelled."));
};
Animation._createPropertyAnimations = function(animationDefinition) {
if (!animationDefinition.target) {
throw new Error("No animation target specified.");
}
var propertyAnimations = new Array();
if (animationDefinition.opacity !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.opacity,
value: animationDefinition.opacity,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.backgroundColor !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.backgroundColor,
value: animationDefinition.backgroundColor,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.translate !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.translate,
value: animationDefinition.translate,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.scale !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.scale,
value: animationDefinition.scale,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.rotate !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.rotate,
value: animationDefinition.rotate,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (propertyAnimations.length === 0) {
throw new Error("No animation property specified.");
}
return propertyAnimations;
};
Animation._getAnimationInfo = function(animation) {
return JSON.stringify({
target: animation.target.id,
property: animation.property,
value: animation.value,
duration: animation.duration,
delay: animation.delay,
iterations: animation.iterations,
curve: animation.curve
});
};
return Animation;
}();
exports.Animation = Animation;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(13);
var _enabled = false;
var _categories = {};
var _writers = [];
var _eventListeners = [];
function enable() {
_enabled = true;
}
exports.enable = enable;
function disable() {
_enabled = false;
}
exports.disable = disable;
function addWriter(writer) {
_writers.push(writer);
}
exports.addWriter = addWriter;
function removeWriter(writer) {
var index = _writers.indexOf(writer);
if (index >= 0) {
_writers.splice(index, 1);
}
}
exports.removeWriter = removeWriter;
function clearWriters() {
if (_writers.length > 0) {
_writers.splice(0, _writers.length);
}
}
exports.clearWriters = clearWriters;
function setCategories(categories) {
_categories = {};
addCategories(categories);
}
exports.setCategories = setCategories;
function addCategories(categories) {
var split = categories.split(",");
for (var i = 0; i < split.length; i++) {
_categories[split[i].trim()] = true;
}
}
exports.addCategories = addCategories;
function write(message, category, type) {
if (!_enabled) {
return;
}
if (!(category in _categories)) {
return;
}
var i;
for (i = 0; i < _writers.length; i++) {
_writers[i].write(message, category, type);
}
}
exports.write = write;
function notifyEvent(object, name, data) {
if (!_enabled) {
return;
}
var i, listener, filters;
for (i = 0; i < _eventListeners.length; i++) {
listener = _eventListeners[i];
if (listener.filter) {
filters = listener.filter.split(",");
filters.forEach(function(value) {
if (value.trim() === name) {
listener.on(object, name, data);
}
});
} else {
listener.on(object, name, data);
}
}
}
exports.notifyEvent = notifyEvent;
function addEventListener(listener) {
_eventListeners.push(listener);
}
exports.addEventListener = addEventListener;
function removeEventListener(listener) {
var index = _eventListeners.indexOf(listener);
if (index >= 0) {
_eventListeners.splice(index, 1);
}
}
exports.removeEventListener = removeEventListener;
var messageType;
(function(messageType) {
messageType.log = 0;
messageType.info = 1;
messageType.warn = 2;
messageType.error = 3;
})(messageType = exports.messageType || (exports.messageType = {}));
var categories;
(function(categories) {
categories.VisualTreeEvents = "VisualTreeEvents";
categories.Layout = "Layout";
categories.Style = "Style";
categories.ViewHierarchy = "ViewHierarchy";
categories.NativeLifecycle = "NativeLifecycle";
categories.Debug = "Debug";
categories.Navigation = "Navigation";
categories.Test = "Test";
categories.Binding = "Binding";
categories.Error = "Error";
categories.Animation = "Animation";
categories.Transition = "Transition";
categories.All = categories.VisualTreeEvents + "," + categories.Layout + "," + categories.Style + "," + categories.ViewHierarchy + "," + categories.NativeLifecycle + "," + categories.Debug + "," + categories.Navigation + "," + categories.Test + "," + categories.Binding + "," + categories.Error + "," + categories.Animation + "," + categories.Transition;
categories.separator = ",";
function concat() {
var i;
var result;
for (i = 0; i < arguments.length; i++) {
if (!result) {
result = arguments[i];
continue;
}
result = result.concat(categories.separator, arguments[i]);
}
return result;
}
categories.concat = concat;
})(categories = exports.categories || (exports.categories = {}));
var ConsoleWriter = function() {
function ConsoleWriter() {}
ConsoleWriter.prototype.write = function(message, category, type) {
if (!console) {
return;
}
var msgType;
if (types.isUndefined(type)) {
msgType = messageType.log;
} else {
msgType = type;
}
switch (msgType) {
case messageType.log:
console.log(category + ": " + message);
break;

case messageType.info:
console.info(category + ": " + message);
break;

case messageType.warn:
console.warn(category + ": " + message);
break;

case messageType.error:
console.error(category + ": " + message);
break;
}
};
return ConsoleWriter;
}();
addWriter(new ConsoleWriter());
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(28);
var Color = function(_super) {
__extends(Color, _super);
function Color() {
_super.apply(this, arguments);
}
Object.defineProperty(Color.prototype, "android", {
get: function() {
return this.argb;
},
enumerable: true,
configurable: true
});
Color.prototype._argbFromString = function(hex) {
return android.graphics.Color.parseColor(hex);
};
return Color;
}(common.Color);
exports.Color = Color;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(13);
var knownColors = __webpack_require__(29);
var AMP = "#";
var HEX_REGEX = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i;
var Color = function() {
function Color() {
if (arguments.length === 1) {
var arg = arguments[0];
if (types.isString(arg)) {
if (knownColors.isKnownName(arg)) {
this._hex = knownColors.getKnownColor(arg);
this._name = arg;
} else {
this._hex = this._normalizeHex(arg);
}
this._argb = this._argbFromString(this._hex);
} else if (types.isNumber(arg)) {
this._argb = arg;
} else {
throw new Error("Expected 1 or 4 constructor parameters.");
}
this._parseComponents();
if (!this._hex) {
this._hex = this._buildHex();
}
} else if (arguments.length === 4) {
this._a = arguments[0];
this._r = arguments[1];
this._g = arguments[2];
this._b = arguments[3];
this._buildArgb();
this._hex = this._buildHex();
} else {
throw new Error("Expected 1 or 4 constructor parameters.");
}
}
Object.defineProperty(Color.prototype, "a", {
get: function() {
return this._a;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "r", {
get: function() {
return this._r;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "g", {
get: function() {
return this._g;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "b", {
get: function() {
return this._b;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "argb", {
get: function() {
return this._argb;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "hex", {
get: function() {
return this._hex;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "name", {
get: function() {
return this._name;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "ios", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "android", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Color.prototype._argbFromString = function(hex) {
return undefined;
};
Color.prototype.equals = function(value) {
return this.argb === value.argb;
};
Color.equals = function(value1, value2) {
if (!value1 && !value2) {
return true;
}
if (!value1 || !value2) {
return false;
}
return value1.equals(value2);
};
Color.isValid = function(value) {
if (types.isNullOrUndefined(value) || value instanceof Color) {
return true;
}
if (!types.isString(value)) {
return false;
}
if (knownColors.isKnownName(value)) {
return true;
}
return HEX_REGEX.test(value);
};
Color.prototype._buildHex = function() {
return AMP + this._componentToHex(this._a) + this._componentToHex(this._r) + this._componentToHex(this._g) + this._componentToHex(this._b);
};
Color.prototype._componentToHex = function(component) {
var hex = component.toString(16);
if (hex.length === 1) {
hex = "0" + hex;
}
return hex;
};
Color.prototype._parseComponents = function() {
if (types.isUndefined(this._argb)) {
throw new Error("Missing the ARGB numeric value");
}
this._a = this._argb >> 24 & 255;
this._r = this._argb >> 16 & 255;
this._g = this._argb >> 8 & 255;
this._b = this._argb & 255;
};
Color.prototype._buildArgb = function() {
this._argb = this._a << 24 | this._r << 16 | this._g << 8 | this._b;
};
Color.prototype._normalizeHex = function(hexStr) {
if (hexStr.charAt(0) === AMP && hexStr.length === 4) {
hexStr = hexStr.charAt(0) + hexStr.charAt(1) + hexStr.charAt(1) + hexStr.charAt(2) + hexStr.charAt(2) + hexStr.charAt(3) + hexStr.charAt(3);
}
return hexStr;
};
return Color;
}();
exports.Color = Color;
}, function(module, exports) {
exports.Transparent = "#00000000";
exports.AliceBlue = "#F0F8FF";
exports.AntiqueWhite = "#FAEBD7";
exports.Aqua = "#00FFFF";
exports.Aquamarine = "#7FFFD4";
exports.Azure = "#F0FFFF";
exports.Beige = "#F5F5DC";
exports.Bisque = "#FFE4C4";
exports.Black = "#000000";
exports.BlanchedAlmond = "#FFEBCD";
exports.Blue = "#0000FF";
exports.BlueViolet = "#8A2BE2";
exports.Brown = "#A52A2A";
exports.BurlyWood = "#DEB887";
exports.CadetBlue = "#5F9EA0";
exports.Chartreuse = "#7FFF00";
exports.Chocolate = "#D2691E";
exports.Coral = "#FF7F50";
exports.CornflowerBlue = "#6495ED";
exports.Cornsilk = "#FFF8DC";
exports.Crimson = "#DC143C";
exports.Cyan = "#00FFFF";
exports.DarkBlue = "#00008B";
exports.DarkCyan = "#008B8B";
exports.DarkGoldenRod = "#B8860B";
exports.DarkGray = "#A9A9A9";
exports.DarkGreen = "#006400";
exports.DarkKhaki = "#BDB76B";
exports.DarkMagenta = "#8B008B";
exports.DarkOliveGreen = "#556B2F";
exports.DarkOrange = "#FF8C00";
exports.DarkOrchid = "#9932CC";
exports.DarkRed = "#8B0000";
exports.DarkSalmon = "#E9967A";
exports.DarkSeaGreen = "#8FBC8F";
exports.DarkSlateBlue = "#483D8B";
exports.DarkSlateGray = "#2F4F4F";
exports.DarkTurquoise = "#00CED1";
exports.DarkViolet = "#9400D3";
exports.DeepPink = "#FF1493";
exports.DeepSkyBlue = "#00BFFF";
exports.DimGray = "#696969";
exports.DodgerBlue = "#1E90FF";
exports.FireBrick = "#B22222";
exports.FloralWhite = "#FFFAF0";
exports.ForestGreen = "#228B22";
exports.Fuchsia = "#FF00FF";
exports.Gainsboro = "#DCDCDC";
exports.GhostWhite = "#F8F8FF";
exports.Gold = "#FFD700";
exports.GoldenRod = "#DAA520";
exports.Gray = "#808080";
exports.Green = "#008000";
exports.GreenYellow = "#ADFF2F";
exports.HoneyDew = "#F0FFF0";
exports.HotPink = "#FF69B4";
exports.IndianRed = "#CD5C5C";
exports.Indigo = "#4B0082";
exports.Ivory = "#FFFFF0";
exports.Khaki = "#F0E68C";
exports.Lavender = "#E6E6FA";
exports.LavenderBlush = "#FFF0F5";
exports.LawnGreen = "#7CFC00";
exports.LemonChiffon = "#FFFACD";
exports.LightBlue = "#ADD8E6";
exports.LightCoral = "#F08080";
exports.LightCyan = "#E0FFFF";
exports.LightGoldenRodYellow = "#FAFAD2";
exports.LightGray = "#D3D3D3";
exports.LightGreen = "#90EE90";
exports.LightPink = "#FFB6C1";
exports.LightSalmon = "#FFA07A";
exports.LightSeaGreen = "#20B2AA";
exports.LightSkyBlue = "#87CEFA";
exports.LightSlateGray = "#778899";
exports.LightSteelBlue = "#B0C4DE";
exports.LightYellow = "#FFFFE0";
exports.Lime = "#00FF00";
exports.LimeGreen = "#32CD32";
exports.Linen = "#FAF0E6";
exports.Magenta = "#FF00FF";
exports.Maroon = "#800000";
exports.MediumAquaMarine = "#66CDAA";
exports.MediumBlue = "#0000CD";
exports.MediumOrchid = "#BA55D3";
exports.MediumPurple = "#9370DB";
exports.MediumSeaGreen = "#3CB371";
exports.MediumSlateBlue = "#7B68EE";
exports.MediumSpringGreen = "#00FA9A";
exports.MediumTurquoise = "#48D1CC";
exports.MediumVioletRed = "#C71585";
exports.MidnightBlue = "#191970";
exports.MintCream = "#F5FFFA";
exports.MistyRose = "#FFE4E1";
exports.Moccasin = "#FFE4B5";
exports.NavajoWhite = "#FFDEAD";
exports.Navy = "#000080";
exports.OldLace = "#FDF5E6";
exports.Olive = "#808000";
exports.OliveDrab = "#6B8E23";
exports.Orange = "#FFA500";
exports.OrangeRed = "#FF4500";
exports.Orchid = "#DA70D6";
exports.PaleGoldenRod = "#EEE8AA";
exports.PaleGreen = "#98FB98";
exports.PaleTurquoise = "#AFEEEE";
exports.PaleVioletRed = "#DB7093";
exports.PapayaWhip = "#FFEFD5";
exports.PeachPuff = "#FFDAB9";
exports.Peru = "#CD853F";
exports.Pink = "#FFC0CB";
exports.Plum = "#DDA0DD";
exports.PowderBlue = "#B0E0E6";
exports.Purple = "#800080";
exports.Red = "#FF0000";
exports.RosyBrown = "#BC8F8F";
exports.RoyalBlue = "#4169E1";
exports.SaddleBrown = "#8B4513";
exports.Salmon = "#FA8072";
exports.SandyBrown = "#F4A460";
exports.SeaGreen = "#2E8B57";
exports.SeaShell = "#FFF5EE";
exports.Sienna = "#A0522D";
exports.Silver = "#C0C0C0";
exports.SkyBlue = "#87CEEB";
exports.SlateBlue = "#6A5ACD";
exports.SlateGray = "#708090";
exports.Snow = "#FFFAFA";
exports.SpringGreen = "#00FF7F";
exports.SteelBlue = "#4682B4";
exports.Tan = "#D2B48C";
exports.Teal = "#008080";
exports.Thistle = "#D8BFD8";
exports.Tomato = "#FF6347";
exports.Turquoise = "#40E0D0";
exports.Violet = "#EE82EE";
exports.Wheat = "#F5DEB3";
exports.White = "#FFFFFF";
exports.WhiteSmoke = "#F5F5F5";
exports.Yellow = "#FFFF00";
exports.YellowGreen = "#9ACD32";
var _allColors = {};
(function() {
var name;
var underscore = "_";
for (var p in exports) {
name = p;
if (name.charAt(0) !== underscore) {
_allColors[name.toLowerCase()] = exports[p];
}
}
})();
function isKnownName(name) {
if (!name) {
return undefined;
}
return name.toLowerCase() in _allColors;
}
exports.isKnownName = isKnownName;
function getKnownColor(name) {
if (!name) {
return undefined;
}
return _allColors[name.toLowerCase()];
}
exports.getKnownColor = getKnownColor;
}, function(module, exports, __webpack_require__) {
var trace = __webpack_require__(26);
var cssSelector = __webpack_require__(31);
var cssParser = __webpack_require__(34);
var application = __webpack_require__(15);
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(13);
}
}
var utils;
function ensureUtils() {
if (!utils) {
utils = __webpack_require__(21);
}
}
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(18);
}
}
var vs;
function ensureVisualState() {
if (!vs) {
vs = __webpack_require__(36);
}
}
var pattern = /('|")(.*?)\1/;
var StyleScope = function() {
function StyleScope() {
this._statesByKey = {};
this._viewIdToKey = {};
}
Object.defineProperty(StyleScope.prototype, "css", {
get: function() {
return this._css;
},
set: function(value) {
this._css = value;
this._cssFileName = undefined;
this._cssSelectors = undefined;
this._reset();
},
enumerable: true,
configurable: true
});
StyleScope.prototype.addCss = function(cssString, cssFileName) {
this._css = this._css ? this._css + cssString : cssString;
this._cssFileName = cssFileName;
this._reset();
if (!this._cssSelectors) {
if (application.cssSelectorsCache) {
this._cssSelectors = StyleScope._joinCssSelectorsArrays([ application.cssSelectorsCache ]);
} else {
this._cssSelectors = new Array();
}
}
var selectorsFromFile = StyleScope.createSelectorsFromCss(cssString, cssFileName);
this._cssSelectors = StyleScope._joinCssSelectorsArrays([ this._cssSelectors, selectorsFromFile ]);
};
StyleScope.createSelectorsFromCss = function(css, cssFileName) {
try {
var pageCssSyntaxTree = css ? cssParser.parse(css, {
source: cssFileName
}) : null;
var pageCssSelectors = new Array();
if (pageCssSyntaxTree) {
pageCssSelectors = StyleScope._joinCssSelectorsArrays([ pageCssSelectors, StyleScope.createSelectorsFromImports(pageCssSyntaxTree) ]);
pageCssSelectors = StyleScope._joinCssSelectorsArrays([ pageCssSelectors, StyleScope.createSelectorsFromSyntaxTree(pageCssSyntaxTree) ]);
}
return pageCssSelectors;
} catch (e) {
trace.write("Css styling failed: " + e, trace.categories.Error, trace.messageType.error);
}
};
StyleScope.createSelectorsFromImports = function(tree) {
var selectors = new Array();
ensureTypes();
if (!types.isNullOrUndefined(tree)) {
var imports = tree["stylesheet"]["rules"].filter(function(r) {
return r.type === "import";
});
for (var i = 0; i < imports.length; i++) {
var importItem = imports[i]["import"];
var match = importItem && importItem.match(pattern);
var url = match && match[2];
if (!types.isNullOrUndefined(url)) {
ensureUtils();
if (utils.isFileOrResourcePath(url)) {
ensureFS();
var fileName = types.isString(url) ? url.trim() : "";
if (fileName.indexOf("~/") === 0) {
fileName = fs.path.join(fs.knownFolders.currentApp().path, fileName.replace("~/", ""));
}
if (fs.File.exists(fileName)) {
var file = fs.File.fromPath(fileName);
var text = file.readTextSync();
if (text) {
selectors = StyleScope._joinCssSelectorsArrays([ selectors, StyleScope.createSelectorsFromCss(text, fileName) ]);
}
}
}
}
}
}
return selectors;
};
StyleScope.prototype.ensureSelectors = function() {
if (!this._cssSelectors && (this._css || application.cssSelectorsCache)) {
var applicationCssSelectors = application.cssSelectorsCache ? application.cssSelectorsCache : null;
var pageCssSelectors = StyleScope.createSelectorsFromCss(this._css, this._cssFileName);
this._cssSelectors = StyleScope._joinCssSelectorsArrays([ applicationCssSelectors, pageCssSelectors ]);
}
};
StyleScope._joinCssSelectorsArrays = function(arrays) {
var mergedResult = [];
var i;
for (i = 0; i < arrays.length; i++) {
if (arrays[i]) {
mergedResult.push.apply(mergedResult, arrays[i]);
}
}
mergedResult.sort(function(a, b) {
return a.specificity - b.specificity;
});
return mergedResult;
};
StyleScope.prototype.applySelectors = function(view) {
if (!this._cssSelectors) {
return;
}
view.style._beginUpdate();
var i, selector, matchedStateSelectors = new Array();
for (i = 0; i < this._cssSelectors.length; i++) {
selector = this._cssSelectors[i];
if (selector.matches(view)) {
if (selector instanceof cssSelector.CssVisualStateSelector) {
matchedStateSelectors.push(selector);
} else {
selector.apply(view);
}
}
}
if (matchedStateSelectors.length > 0) {
var key = "";
matchedStateSelectors.forEach(function(s) {
return key += s.key + "|";
});
this._viewIdToKey[view._domId] = key;
if (!this._statesByKey[key]) {
this._createVisualsStatesForSelectors(key, matchedStateSelectors);
}
}
view.style._endUpdate();
};
StyleScope.prototype.getVisualStates = function(view) {
var key = this._viewIdToKey[view._domId];
if (key === undefined) {
return undefined;
}
return this._statesByKey[key];
};
StyleScope.prototype._createVisualsStatesForSelectors = function(key, matchedStateSelectors) {
var i, allStates = {}, stateSelector;
this._statesByKey[key] = allStates;
ensureVisualState();
for (i = 0; i < matchedStateSelectors.length; i++) {
stateSelector = matchedStateSelectors[i];
var visualState = allStates[stateSelector.state];
if (!visualState) {
visualState = new vs.VisualState();
allStates[stateSelector.state] = visualState;
}
stateSelector.eachSetter(function(property, value) {
visualState.setters[property.name] = value;
});
}
};
StyleScope.createSelectorsFromSyntaxTree = function(ast) {
var result = [];
var rules = ast.stylesheet.rules;
var rule;
var i;
var j;
for (i = 0; i < rules.length; i++) {
rule = rules[i];
if (rule.type === "rule") {
var filteredDeclarations = [];
if (rule.declarations) {
for (j = 0; j < rule.declarations.length; j++) {
var declaration = rule.declarations[j];
if (declaration.type === "declaration") {
filteredDeclarations.push({
property: declaration.property.toLowerCase(),
value: declaration.value
});
}
}
}
for (j = 0; j < rule.selectors.length; j++) {
result.push(cssSelector.createSelector(rule.selectors[j], filteredDeclarations));
}
}
}
return result;
};
StyleScope.prototype._reset = function() {
this._statesByKey = {};
this._viewIdToKey = {};
};
return StyleScope;
}();
exports.StyleScope = StyleScope;
function applyInlineSyle(view, style) {
try {
var syntaxTree = cssParser.parse("local { " + style + " }", undefined);
var filteredDeclarations = syntaxTree.stylesheet.rules[0].declarations.filter(function(val, i, arr) {
return val.type === "declaration";
});
cssSelector.applyInlineSyle(view, filteredDeclarations);
} catch (ex) {
trace.write("Applying local style failed: " + ex, trace.categories.Error, trace.messageType.error);
}
}
exports.applyInlineSyle = applyInlineSyle;
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(32);
var trace = __webpack_require__(26);
var styleProperty = __webpack_require__(33);
var types = __webpack_require__(13);
var utils = __webpack_require__(21);
var ID_SPECIFICITY = 1e6;
var ATTR_SPECIFITY = 1e4;
var CLASS_SPECIFICITY = 100;
var TYPE_SPECIFICITY = 1;
var CssSelector = function() {
function CssSelector(expression, declarations) {
if (expression) {
var leftSquareBracketIndex = expression.indexOf(LSBRACKET);
if (leftSquareBracketIndex > 0) {
var paramsRegex = /\[\s*(.*)\s*\]/;
var attrParams = paramsRegex.exec(expression);
if (attrParams && attrParams.length > 1) {
this._attrExpression = attrParams[1].trim();
}
this._expression = expression.substr(0, leftSquareBracketIndex);
} else {
this._expression = expression;
}
}
this._declarations = declarations;
}
Object.defineProperty(CssSelector.prototype, "expression", {
get: function() {
return this._expression;
},
enumerable: true,
configurable: true
});
Object.defineProperty(CssSelector.prototype, "attrExpression", {
get: function() {
return this._attrExpression;
},
enumerable: true,
configurable: true
});
Object.defineProperty(CssSelector.prototype, "declarations", {
get: function() {
return this._declarations;
},
enumerable: true,
configurable: true
});
Object.defineProperty(CssSelector.prototype, "specificity", {
get: function() {
throw "Specificity property is abstract";
},
enumerable: true,
configurable: true
});
CssSelector.prototype.matches = function(view) {
return false;
};
CssSelector.prototype.apply = function(view) {
this.eachSetter(function(property, value) {
try {
view.style._setValue(property, value, observable.ValueSource.Css);
} catch (ex) {
trace.write("Error setting property: " + property.name + " view: " + view + " value: " + value + " " + ex, trace.categories.Style, trace.messageType.error);
}
});
};
CssSelector.prototype.eachSetter = function(callback) {
for (var i = 0; i < this._declarations.length; i++) {
var declaration = this._declarations[i];
var name_1 = declaration.property;
var resolvedValue = declaration.value;
var property = styleProperty.getPropertyByCssName(name_1);
if (property) {
callback(property, resolvedValue);
} else {
var pairs = styleProperty.getShorthandPairs(name_1, resolvedValue);
if (pairs) {
for (var j = 0; j < pairs.length; j++) {
var pair = pairs[j];
callback(pair.property, pair.value);
}
}
}
}
};
return CssSelector;
}();
exports.CssSelector = CssSelector;
var CssTypeSelector = function(_super) {
__extends(CssTypeSelector, _super);
function CssTypeSelector() {
_super.apply(this, arguments);
}
Object.defineProperty(CssTypeSelector.prototype, "specificity", {
get: function() {
return TYPE_SPECIFICITY;
},
enumerable: true,
configurable: true
});
CssTypeSelector.prototype.matches = function(view) {
var result = matchesType(this.expression, view);
if (result && this.attrExpression) {
return matchesAttr(this.attrExpression, view);
}
return result;
};
return CssTypeSelector;
}(CssSelector);
function matchesType(expression, view) {
var exprArr = expression.split(".");
var exprTypeName = exprArr[0];
var exprClassName = exprArr[1];
var typeCheck = exprTypeName.toLowerCase() === view.typeName.toLowerCase() || exprTypeName.toLowerCase() === view.typeName.split(/(?=[A-Z])/).join("-").toLowerCase();
if (typeCheck) {
if (exprClassName) {
return view._cssClasses.some(function(cssClass, i, arr) {
return cssClass === exprClassName;
});
} else {
return typeCheck;
}
} else {
return false;
}
}
var CssIdSelector = function(_super) {
__extends(CssIdSelector, _super);
function CssIdSelector() {
_super.apply(this, arguments);
}
Object.defineProperty(CssIdSelector.prototype, "specificity", {
get: function() {
return ID_SPECIFICITY;
},
enumerable: true,
configurable: true
});
CssIdSelector.prototype.matches = function(view) {
var result = this.expression === view.id;
if (result && this.attrExpression) {
return matchesAttr(this.attrExpression, view);
}
return result;
};
return CssIdSelector;
}(CssSelector);
var CssClassSelector = function(_super) {
__extends(CssClassSelector, _super);
function CssClassSelector() {
_super.apply(this, arguments);
}
Object.defineProperty(CssClassSelector.prototype, "specificity", {
get: function() {
return CLASS_SPECIFICITY;
},
enumerable: true,
configurable: true
});
CssClassSelector.prototype.matches = function(view) {
var expectedClass = this.expression;
var result = view._cssClasses.some(function(cssClass, i, arr) {
return cssClass === expectedClass;
});
if (result && this.attrExpression) {
return matchesAttr(this.attrExpression, view);
}
return result;
};
return CssClassSelector;
}(CssSelector);
var CssCompositeSelector = function(_super) {
__extends(CssCompositeSelector, _super);
function CssCompositeSelector(expr, declarations) {
_super.call(this, expr, declarations);
var expressions = this.splitExpression(expr);
var onlyParent = false;
this.parentCssSelectors = [];
for (var i = expressions.length - 1; i >= 0; i--) {
if (expressions[i].trim() === GTHAN) {
onlyParent = true;
continue;
}
this.parentCssSelectors.push({
selector: createSelector(expressions[i].trim(), null),
onlyDirectParent: onlyParent
});
onlyParent = false;
}
}
Object.defineProperty(CssCompositeSelector.prototype, "specificity", {
get: function() {
var result = 0;
for (var i = 0; i < this.parentCssSelectors.length; i++) {
result += this.parentCssSelectors[i].selector.specificity;
}
return result;
},
enumerable: true,
configurable: true
});
CssCompositeSelector.prototype.splitExpression = function(expression) {
var result = [];
var tempArr = [];
var validSpace = true;
for (var i = 0; i < expression.length; i++) {
if (expression[i] === LSBRACKET) {
validSpace = false;
}
if (expression[i] === RSBRACKET) {
validSpace = true;
}
if (expression[i] === SPACE && validSpace || expression[i] === GTHAN) {
if (tempArr.length > 0) {
result.push(tempArr.join(""));
tempArr = [];
}
if (expression[i] === GTHAN) {
result.push(GTHAN);
}
continue;
}
tempArr.push(expression[i]);
}
if (tempArr.length > 0) {
result.push(tempArr.join(""));
}
return result;
};
CssCompositeSelector.prototype.matches = function(view) {
var result = this.parentCssSelectors[0].selector.matches(view);
if (!result) {
return result;
}
var tempView = view.parent;
for (var i = 1; i < this.parentCssSelectors.length; i++) {
var parentCounter = 0;
while (tempView && parentCounter === 0) {
result = this.parentCssSelectors[i].selector.matches(tempView);
if (result) {
tempView = tempView.parent;
break;
}
if (this.parentCssSelectors[i].onlyDirectParent) {
parentCounter++;
}
tempView = tempView.parent;
}
if (!result) {
break;
}
}
return result;
};
return CssCompositeSelector;
}(CssSelector);
var CssAttrSelector = function(_super) {
__extends(CssAttrSelector, _super);
function CssAttrSelector() {
_super.apply(this, arguments);
}
Object.defineProperty(CssAttrSelector.prototype, "specificity", {
get: function() {
return ATTR_SPECIFITY;
},
enumerable: true,
configurable: true
});
CssAttrSelector.prototype.matches = function(view) {
return matchesAttr(this.attrExpression, view);
};
return CssAttrSelector;
}(CssSelector);
function matchesAttr(attrExpression, view) {
var equalSignIndex = attrExpression.indexOf(EQUAL);
if (equalSignIndex > 0) {
var nameValueRegex = /(.*[^~|\^\$\*])[~|\^\$\*]?=(.*)/;
var nameValueRegexRes = nameValueRegex.exec(attrExpression);
var attrName = void 0;
var attrValue = void 0;
if (nameValueRegexRes && nameValueRegexRes.length > 2) {
attrName = nameValueRegexRes[1].trim();
attrValue = nameValueRegexRes[2].trim().replace(/^(["'])*(.*)\1$/, "$2");
}
var escapedAttrValue = utils.escapeRegexSymbols(attrValue);
var attrCheckRegex = void 0;
switch (attrExpression.charAt(equalSignIndex - 1)) {
case "~":
attrCheckRegex = new RegExp("(^|[^a-zA-Z-])" + escapedAttrValue + "([^a-zA-Z-]|$)");
break;

case "|":
attrCheckRegex = new RegExp("^" + escapedAttrValue + "\\b");
break;

case "^":
attrCheckRegex = new RegExp("^" + escapedAttrValue);
break;

case "$":
attrCheckRegex = new RegExp(escapedAttrValue + "$");
break;

case "*":
attrCheckRegex = new RegExp(escapedAttrValue);
break;

default:
attrCheckRegex = new RegExp("^" + escapedAttrValue + "$");
break;
}
return !types.isNullOrUndefined(view[attrName]) && attrCheckRegex.test(view[attrName] + "");
} else {
return !types.isNullOrUndefined(view[attrExpression]);
}
}
var CssVisualStateSelector = function(_super) {
__extends(CssVisualStateSelector, _super);
function CssVisualStateSelector(expression, declarations) {
_super.call(this, expression, declarations);
var args = expression.split(COLON);
this._key = args[0];
this._state = args[1];
if (this._key.charAt(0) === HASH) {
this._match = this._key.substring(1);
this._isById = true;
} else if (this._key.charAt(0) === DOT) {
this._match = this._key.substring(1);
this._isByClass = true;
} else if (this._key.charAt(0) === LSBRACKET) {
this._match = this._key;
this._isByAttr = true;
} else if (this._key.length > 0) {
this._match = this._key;
this._isByType = true;
}
}
Object.defineProperty(CssVisualStateSelector.prototype, "specificity", {
get: function() {
return (this._isById ? ID_SPECIFICITY : 0) + (this._isByAttr ? ATTR_SPECIFITY : 0) + (this._isByClass ? CLASS_SPECIFICITY : 0) + (this._isByType ? TYPE_SPECIFICITY : 0);
},
enumerable: true,
configurable: true
});
Object.defineProperty(CssVisualStateSelector.prototype, "key", {
get: function() {
return this._key;
},
enumerable: true,
configurable: true
});
Object.defineProperty(CssVisualStateSelector.prototype, "state", {
get: function() {
return this._state;
},
enumerable: true,
configurable: true
});
CssVisualStateSelector.prototype.matches = function(view) {
var matches = true;
if (this._isById) {
matches = this._match === view.id;
}
if (this._isByClass) {
var expectedClass = this._match;
matches = view._cssClasses.some(function(cssClass, i, arr) {
return cssClass === expectedClass;
});
}
if (this._isByType) {
matches = matchesType(this._match, view);
}
if (this._isByAttr) {
matches = matchesAttr(this._key, view);
}
return matches;
};
return CssVisualStateSelector;
}(CssSelector);
exports.CssVisualStateSelector = CssVisualStateSelector;
var HASH = "#";
var DOT = ".";
var COLON = ":";
var SPACE = " ";
var GTHAN = ">";
var LSBRACKET = "[";
var RSBRACKET = "]";
var EQUAL = "=";
function createSelector(expression, declarations) {
var goodExpr = expression.replace(/>/g, " > ").replace(/\s\s+/g, " ");
var spaceIndex = goodExpr.indexOf(SPACE);
if (spaceIndex >= 0) {
return new CssCompositeSelector(goodExpr, declarations);
}
var leftSquareBracketIndex = goodExpr.indexOf(LSBRACKET);
if (leftSquareBracketIndex === 0) {
return new CssAttrSelector(goodExpr, declarations);
}
var colonIndex = goodExpr.indexOf(COLON);
if (colonIndex >= 0) {
return new CssVisualStateSelector(goodExpr, declarations);
}
if (goodExpr.charAt(0) === HASH) {
return new CssIdSelector(goodExpr.substring(1), declarations);
}
if (goodExpr.charAt(0) === DOT) {
return new CssClassSelector(goodExpr.substring(1), declarations);
}
return new CssTypeSelector(goodExpr, declarations);
}
exports.createSelector = createSelector;
var InlineStyleSelector = function(_super) {
__extends(InlineStyleSelector, _super);
function InlineStyleSelector(declarations) {
_super.call(this, undefined, declarations);
}
InlineStyleSelector.prototype.apply = function(view) {
this.eachSetter(function(property, value) {
view.style._setValue(property, value, observable.ValueSource.Local);
});
};
return InlineStyleSelector;
}(CssSelector);
function applyInlineSyle(view, declarations) {
var localStyleSelector = new InlineStyleSelector(declarations);
localStyleSelector.apply(view);
}
exports.applyInlineSyle = applyInlineSyle;
}, function(module, exports, __webpack_require__) {
var observable_1 = __webpack_require__(17);
var types = __webpack_require__(13);
var propertyFromKey = {};
var propertyIdCounter = 0;
function generatePropertyKey(name, ownerType, validate) {
if (validate) {
validateRegisterParameters(name, ownerType);
}
return ownerType + "." + name;
}
function validateRegisterParameters(name, ownerType) {
if (name == null || name.trim().length === 0) {
throw new Error("Name should not be null or empty string.");
}
if (ownerType == null || ownerType.trim().length === 0) {
throw new Error("OwnerType should not be null or empty string.");
}
}
function getPropertyByNameAndType(name, owner) {
var result;
var key;
var classInfo = types.getClassInfo(owner);
while (classInfo) {
key = generatePropertyKey(name, classInfo.name);
result = propertyFromKey[key];
if (result) {
break;
}
classInfo = classInfo.baseClassInfo;
}
return result;
}
var PropertyMetadataSettings;
(function(PropertyMetadataSettings) {
PropertyMetadataSettings.None = 0;
PropertyMetadataSettings.AffectsLayout = 1;
PropertyMetadataSettings.AffectsStyle = 1 << 1;
PropertyMetadataSettings.Inheritable = 1 << 2;
})(PropertyMetadataSettings = exports.PropertyMetadataSettings || (exports.PropertyMetadataSettings = {}));
var ValueSource;
(function(ValueSource) {
ValueSource.Default = 0;
ValueSource.Inherited = 1;
ValueSource.Css = 2;
ValueSource.Local = 3;
ValueSource.VisualState = 4;
})(ValueSource = exports.ValueSource || (exports.ValueSource = {}));
var PropertyMetadata = function() {
function PropertyMetadata(defaultValue, options, onChanged, onValidateValue, equalityComparer) {
this._defaultValue = defaultValue;
this._options = options;
if (types.isNullOrUndefined(this._options)) {
this._options = PropertyMetadataSettings.None;
}
this._onChanged = onChanged;
this._onValidateValue = onValidateValue;
this._equalityComparer = equalityComparer;
}
Object.defineProperty(PropertyMetadata.prototype, "defaultValue", {
get: function() {
return this._defaultValue;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyMetadata.prototype, "options", {
get: function() {
return this._options;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyMetadata.prototype, "onValueChanged", {
get: function() {
return this._onChanged;
},
set: function(value) {
this._onChanged = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyMetadata.prototype, "onValidateValue", {
get: function() {
return this._onValidateValue;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyMetadata.prototype, "equalityComparer", {
get: function() {
return this._equalityComparer;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyMetadata.prototype, "affectsLayout", {
get: function() {
return (this._options & PropertyMetadataSettings.AffectsLayout) === PropertyMetadataSettings.AffectsLayout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyMetadata.prototype, "affectsStyle", {
get: function() {
return (this._options & PropertyMetadataSettings.AffectsStyle) === PropertyMetadataSettings.AffectsStyle;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyMetadata.prototype, "inheritable", {
get: function() {
return (this._options & PropertyMetadataSettings.Inheritable) === PropertyMetadataSettings.Inheritable;
},
enumerable: true,
configurable: true
});
return PropertyMetadata;
}();
exports.PropertyMetadata = PropertyMetadata;
var Property = function() {
function Property(name, ownerType, metadata, valueConverter) {
this._key = generatePropertyKey(name, ownerType, true);
if (propertyFromKey[this._key]) {
throw new Error("Property " + name + " already registered for type " + ownerType + ".");
}
propertyFromKey[this._key] = this;
if (!metadata || !(metadata instanceof PropertyMetadata)) {
throw new Error("Expected valid PropertyMetadata instance.");
}
this._name = name;
this._ownerType = ownerType;
this._metadata = metadata;
this._id = propertyIdCounter++;
this._valueConverter = valueConverter;
}
Object.defineProperty(Property.prototype, "name", {
get: function() {
return this._name;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Property.prototype, "id", {
get: function() {
return this._id;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Property.prototype, "metadata", {
get: function() {
return this._metadata;
},
enumerable: true,
configurable: true
});
Property.prototype.isValidValue = function(value) {
if (this.metadata.onValidateValue) {
return this.metadata.onValidateValue(value);
}
return true;
};
Object.defineProperty(Property.prototype, "valueConverter", {
get: function() {
return this._valueConverter;
},
enumerable: true,
configurable: true
});
Property.prototype._getEffectiveValue = function(entry) {
if (types.isDefined(entry.localValue)) {
entry.valueSource = ValueSource.Local;
return entry.localValue;
}
if (types.isDefined(entry.inheritedValue)) {
entry.valueSource = ValueSource.Inherited;
return entry.inheritedValue;
}
entry.valueSource = ValueSource.Default;
return this.metadata.defaultValue;
};
return Property;
}();
exports.Property = Property;
var PropertyEntry = function() {
function PropertyEntry(property) {
this._property = property;
}
Object.defineProperty(PropertyEntry.prototype, "property", {
get: function() {
return this._property;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyEntry.prototype, "effectiveValue", {
get: function() {
if (!this._effectiveValue) {
this._effectiveValue = this._property._getEffectiveValue(this);
}
return this._effectiveValue;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyEntry.prototype, "valueSource", {
get: function() {
return this._valueSource;
},
set: function(value) {
this._valueSource = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyEntry.prototype, "localValue", {
get: function() {
return this._localValue;
},
set: function(value) {
this._localValue = value;
this._effectiveValue = undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyEntry.prototype, "inheritedValue", {
get: function() {
return this._inheritedValue;
},
set: function(value) {
this._inheritedValue = value;
this._effectiveValue = undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyEntry.prototype, "cssValue", {
get: function() {
return this._cssValue;
},
set: function(value) {
this._cssValue = value;
this._effectiveValue = undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyEntry.prototype, "visualStateValue", {
get: function() {
return this._visualStateValue;
},
set: function(value) {
this._visualStateValue = value;
this._effectiveValue = undefined;
},
enumerable: true,
configurable: true
});
PropertyEntry.prototype.resetValue = function() {
this._valueSource = ValueSource.Default;
this._visualStateValue = undefined;
this._localValue = undefined;
this._cssValue = undefined;
this._inheritedValue = undefined;
this._effectiveValue = undefined;
};
return PropertyEntry;
}();
exports.PropertyEntry = PropertyEntry;
var defaultValueForPropertyPerType = new Map();
var DependencyObservable = function(_super) {
__extends(DependencyObservable, _super);
function DependencyObservable() {
_super.apply(this, arguments);
this._propertyEntries = {};
}
DependencyObservable.prototype.set = function(name, value) {
var property = getPropertyByNameAndType(name, this);
if (property) {
this._setValue(property, value, ValueSource.Local);
} else {
_super.prototype.set.call(this, name, value);
}
};
DependencyObservable.prototype.get = function(name) {
var property = getPropertyByNameAndType(name, this);
if (property) {
return this._getValue(property);
} else {
return _super.prototype.get.call(this, name);
}
};
DependencyObservable.prototype._setValue = function(property, value, source) {
var realValue = observable_1.WrappedValue.unwrap(value);
if (!property.isValidValue(realValue)) {
throw new Error("Invalid value " + realValue + " for property " + property.name);
}
if (types.isUndefined(source)) {
source = ValueSource.Local;
}
this._setValueInternal(property, value, source);
};
DependencyObservable.prototype._getValueSource = function(property) {
var entry = this._propertyEntries[property.id];
if (entry) {
return entry.valueSource;
}
return ValueSource.Default;
};
DependencyObservable.prototype._getValue = function(property) {
var entry = this._propertyEntries[property.id];
if (entry) {
return entry.effectiveValue;
} else if (property.defaultValueGetter) {
var view = this._view || this;
var key = types.getClass(view) + "." + property.id;
var defaultValue = defaultValueForPropertyPerType.get(key);
if (types.isUndefined(defaultValue) && view._nativeView) {
var defaultValueResult = property.defaultValueGetter(this);
defaultValue = defaultValueResult.result;
if (defaultValueResult.cacheable) {
defaultValueForPropertyPerType.set(key, defaultValue);
}
}
return defaultValue;
}
return property.metadata.defaultValue;
};
DependencyObservable.prototype._resetValue = function(property, source) {
if (!(property.id in this._propertyEntries)) {
return;
}
if (types.isDefined(source)) {
this._setValueInternal(property, undefined, source);
} else {
var currentValue = this._getValue(property);
delete this._propertyEntries[property.id];
var newValue = this._getValue(property);
var comparer = property.metadata.equalityComparer || this._defaultComparer;
if (!comparer(currentValue, newValue)) {
this._onPropertyChanged(property, currentValue, newValue);
}
}
};
DependencyObservable.prototype._onPropertyChanged = function(property, oldValue, newValue) {
var realNewValue = observable_1.WrappedValue.unwrap(newValue);
if (property.metadata.onValueChanged) {
property.metadata.onValueChanged({
object: this,
property: property,
eventName: observable_1.Observable.propertyChangeEvent,
newValue: realNewValue,
oldValue: oldValue
});
}
if (this.hasListeners(observable_1.Observable.propertyChangeEvent)) {
var changeData = _super.prototype._createPropertyChangeData.call(this, property.name, newValue);
this.notify(changeData);
}
var eventName = property.name + "Change";
if (this.hasListeners(eventName)) {
var ngChangedData = {
eventName: eventName,
propertyName: property.name,
object: this,
value: realNewValue
};
this.notify(ngChangedData);
}
};
DependencyObservable.prototype._eachSetProperty = function(callback) {
var i;
var key;
var entry;
var retVal;
var keys = Object.keys(this._propertyEntries);
for (i = 0; i < keys.length; i++) {
key = keys[i];
entry = this._propertyEntries[key];
retVal = callback(entry.property);
if (!retVal) {
break;
}
}
};
DependencyObservable.prototype.toString = function() {
return this.typeName;
};
DependencyObservable.prototype._setValueInternal = function(property, value, source) {
var realValue = observable_1.WrappedValue.unwrap(value);
if (types.isString(realValue) && property.valueConverter) {
realValue = property.valueConverter(realValue);
}
var entry = this._propertyEntries[property.id];
if (!entry) {
entry = new PropertyEntry(property);
this._propertyEntries[property.id] = entry;
}
var currentValue = entry.effectiveValue;
switch (source) {
case ValueSource.Css:
entry.cssValue = realValue;
break;

case ValueSource.Inherited:
entry.inheritedValue = realValue;
break;

case ValueSource.Local:
entry.localValue = realValue;
break;

case ValueSource.VisualState:
entry.visualStateValue = realValue;
break;
}
var comparer = property.metadata.equalityComparer || this._defaultComparer;
if (value && value.wrapped || !comparer(currentValue, entry.effectiveValue)) {
this._onPropertyChanged(property, currentValue, entry.effectiveValue);
}
};
DependencyObservable.prototype._defaultComparer = function(x, y) {
return x === y;
};
return DependencyObservable;
}(observable_1.Observable);
exports.DependencyObservable = DependencyObservable;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(13);
var observable = __webpack_require__(32);
var propertiesByName = {};
var propertiesByCssName = {};
var callbackByShorthandName = new Map();
var inheritableProperties = [];
function registerProperty(property) {
if (propertiesByCssName[property.cssName]) {
throw new Error("Property with name " + property.cssName + " is already registered!");
}
propertiesByCssName[property.cssName] = property;
propertiesByName[property.name] = property;
if (property.metadata.inheritable) {
inheritableProperties.push(property);
}
}
function getShorthandPairs(name, value) {
var callback = callbackByShorthandName.get(name);
if (callback) {
return callback(value);
}
return undefined;
}
exports.getShorthandPairs = getShorthandPairs;
function registerShorthandCallback(name, callback) {
if (callbackByShorthandName.has(name)) {
throw new Error("Shorthand callback already registered for property: " + name);
}
callbackByShorthandName.set(name, callback);
}
exports.registerShorthandCallback = registerShorthandCallback;
function getPropertyByName(name) {
return propertiesByName[name];
}
exports.getPropertyByName = getPropertyByName;
function getPropertyByCssName(name) {
return propertiesByCssName[name];
}
exports.getPropertyByCssName = getPropertyByCssName;
function eachProperty(callback) {
types.verifyCallback(callback);
var i;
var key;
var keys = Object.keys(propertiesByName);
for (i = 0; i < keys.length; i++) {
key = keys[i];
callback(propertiesByName[key]);
}
}
exports.eachProperty = eachProperty;
function eachInheritableProperty(callback) {
types.verifyCallback(callback);
var i;
for (i = 0; i < inheritableProperties.length; i++) {
callback(inheritableProperties[i]);
}
}
exports.eachInheritableProperty = eachInheritableProperty;
var Property = function(_super) {
__extends(Property, _super);
function Property(name, cssName, metadata, valueConverter) {
_super.call(this, name, "Style", metadata, valueConverter);
this._cssName = cssName;
registerProperty(this);
}
Object.defineProperty(Property.prototype, "cssName", {
get: function() {
return this._cssName;
},
enumerable: true,
configurable: true
});
Property.prototype._getEffectiveValue = function(entry) {
if (types.isDefined(entry.visualStateValue)) {
entry.valueSource = observable.ValueSource.VisualState;
return entry.visualStateValue;
}
if (types.isDefined(entry.localValue)) {
entry.valueSource = observable.ValueSource.Local;
return entry.localValue;
}
if (types.isDefined(entry.cssValue)) {
entry.valueSource = observable.ValueSource.Css;
return entry.cssValue;
}
if (types.isDefined(entry.inheritedValue)) {
entry.valueSource = observable.ValueSource.Inherited;
return entry.inheritedValue;
}
entry.valueSource = observable.ValueSource.Default;
return this.metadata.defaultValue;
};
return Property;
}(observable.Property);
exports.Property = Property;
}, function(module, exports, __webpack_require__) {
exports.parse = __webpack_require__(35);
}, function(module, exports) {
var commentre = /\/\*[^*]*\*+([^\/*][^*]*\*+)*\//g;
module.exports = function(css, options) {
options = options || {};
var lineno = 1;
var column = 1;
function updatePosition(str) {
var lines = str.match(/\n/g);
if (lines) lineno += lines.length;
var i = str.lastIndexOf("\n");
column = ~i ? str.length - i : column + str.length;
}
function position() {
var start = {
line: lineno,
column: column
};
return function(node) {
node.position = new Position(start);
whitespace();
return node;
};
}
function Position(start) {
this.start = start;
this.end = {
line: lineno,
column: column
};
this.source = options.source;
}
Position.prototype.content = css;
var errorsList = [];
function error(msg) {
var err = new Error(options.source + ":" + lineno + ":" + column + ": " + msg);
err.reason = msg;
err.filename = options.source;
err.line = lineno;
err.column = column;
err.source = css;
if (options.silent) {
errorsList.push(err);
} else {
throw err;
}
}
function stylesheet() {
var rulesList = rules();
return {
type: "stylesheet",
stylesheet: {
rules: rulesList,
parsingErrors: errorsList
}
};
}
function open() {
return match(/^{\s*/);
}
function close() {
return match(/^}/);
}
function rules() {
var node;
var rules = [];
whitespace();
comments(rules);
while (css.length && css.charAt(0) != "}" && (node = atrule() || rule())) {
if (node !== false) {
rules.push(node);
comments(rules);
}
}
return rules;
}
function match(re) {
var m = re.exec(css);
if (!m) return;
var str = m[0];
updatePosition(str);
css = css.slice(str.length);
return m;
}
function whitespace() {
match(/^\s*/);
}
function comments(rules) {
var c;
rules = rules || [];
while (c = comment()) {
if (c !== false) {
rules.push(c);
}
}
return rules;
}
function comment() {
var pos = position();
if ("/" != css.charAt(0) || "*" != css.charAt(1)) return;
var i = 2;
while ("" != css.charAt(i) && ("*" != css.charAt(i) || "/" != css.charAt(i + 1))) ++i;
i += 2;
if ("" === css.charAt(i - 1)) {
return error("End of comment missing");
}
var str = css.slice(2, i - 2);
column += 2;
updatePosition(str);
css = css.slice(i);
column += 2;
return pos({
type: "comment",
comment: str
});
}
function selector() {
var m = match(/^([^{]+)/);
if (!m) return;
return trim(m[0]).replace(/\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*\/+/g, "").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, function(m) {
return m.replace(/,/g, "‌");
}).split(/\s*(?![^(]*\)),\s*/).map(function(s) {
return s.replace(/\u200C/g, ",");
});
}
function declaration() {
var pos = position();
var prop = match(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
if (!prop) return;
prop = trim(prop[0]);
if (!match(/^:\s*/)) return error("property missing ':'");
var val = match(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/);
var ret = pos({
type: "declaration",
property: prop.replace(commentre, ""),
value: val ? trim(val[0]).replace(commentre, "") : ""
});
match(/^[;\s]*/);
return ret;
}
function declarations() {
var decls = [];
if (!open()) return error("missing '{'");
comments(decls);
var decl;
while (decl = declaration()) {
if (decl !== false) {
decls.push(decl);
comments(decls);
}
}
if (!close()) return error("missing '}'");
return decls;
}
function keyframe() {
var m;
var vals = [];
var pos = position();
while (m = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/)) {
vals.push(m[1]);
match(/^,\s*/);
}
if (!vals.length) return;
return pos({
type: "keyframe",
values: vals,
declarations: declarations()
});
}
function atkeyframes() {
var pos = position();
var m = match(/^@([-\w]+)?keyframes\s*/);
if (!m) return;
var vendor = m[1];
var m = match(/^([-\w]+)\s*/);
if (!m) return error("@keyframes missing name");
var name = m[1];
if (!open()) return error("@keyframes missing '{'");
var frame;
var frames = comments();
while (frame = keyframe()) {
frames.push(frame);
frames = frames.concat(comments());
}
if (!close()) return error("@keyframes missing '}'");
return pos({
type: "keyframes",
name: name,
vendor: vendor,
keyframes: frames
});
}
function atsupports() {
var pos = position();
var m = match(/^@supports *([^{]+)/);
if (!m) return;
var supports = trim(m[1]);
if (!open()) return error("@supports missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@supports missing '}'");
return pos({
type: "supports",
supports: supports,
rules: style
});
}
function athost() {
var pos = position();
var m = match(/^@host\s*/);
if (!m) return;
if (!open()) return error("@host missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@host missing '}'");
return pos({
type: "host",
rules: style
});
}
function atmedia() {
var pos = position();
var m = match(/^@media *([^{]+)/);
if (!m) return;
var media = trim(m[1]);
if (!open()) return error("@media missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@media missing '}'");
return pos({
type: "media",
media: media,
rules: style
});
}
function atcustommedia() {
var pos = position();
var m = match(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
if (!m) return;
return pos({
type: "custom-media",
name: trim(m[1]),
media: trim(m[2])
});
}
function atpage() {
var pos = position();
var m = match(/^@page */);
if (!m) return;
var sel = selector() || [];
if (!open()) return error("@page missing '{'");
var decls = comments();
var decl;
while (decl = declaration()) {
decls.push(decl);
decls = decls.concat(comments());
}
if (!close()) return error("@page missing '}'");
return pos({
type: "page",
selectors: sel,
declarations: decls
});
}
function atdocument() {
var pos = position();
var m = match(/^@([-\w]+)?document *([^{]+)/);
if (!m) return;
var vendor = trim(m[1]);
var doc = trim(m[2]);
if (!open()) return error("@document missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@document missing '}'");
return pos({
type: "document",
document: doc,
vendor: vendor,
rules: style
});
}
function atfontface() {
var pos = position();
var m = match(/^@font-face\s*/);
if (!m) return;
if (!open()) return error("@font-face missing '{'");
var decls = comments();
var decl;
while (decl = declaration()) {
decls.push(decl);
decls = decls.concat(comments());
}
if (!close()) return error("@font-face missing '}'");
return pos({
type: "font-face",
declarations: decls
});
}
var atimport = _compileAtrule("import");
var atcharset = _compileAtrule("charset");
var atnamespace = _compileAtrule("namespace");
function _compileAtrule(name) {
var re = new RegExp("^@" + name + "\\s*([^;]+);");
return function() {
var pos = position();
var m = match(re);
if (!m) return;
var ret = {
type: name
};
ret[name] = m[1].trim();
return pos(ret);
};
}
function atrule() {
if (css[0] != "@") return;
return atkeyframes() || atmedia() || atcustommedia() || atsupports() || atimport() || atcharset() || atnamespace() || atdocument() || atpage() || athost() || atfontface();
}
function rule() {
var pos = position();
var sel = selector();
if (!sel) return error("selector missing");
comments();
return pos({
type: "rule",
selectors: sel,
declarations: declarations()
});
}
return addParent(stylesheet());
};
function trim(str) {
return str ? str.replace(/^\s+|\s+$/g, "") : "";
}
function addParent(obj, parent) {
var isNode = obj && typeof obj.type === "string";
var childParent = isNode ? obj : parent;
for (var k in obj) {
var value = obj[k];
if (Array.isArray(value)) {
value.forEach(function(v) {
addParent(v, childParent);
});
} else if (value && typeof value === "object") {
addParent(value, childParent);
}
}
if (isNode) {
Object.defineProperty(obj, "parent", {
configurable: true,
writable: true,
enumerable: false,
value: parent || null
});
}
return obj;
}
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(32);
var styleProperty = __webpack_require__(33);
var visualStateConstants = __webpack_require__(37);
var VisualState = function() {
function VisualState() {
this._setters = {};
}
Object.defineProperty(VisualState.prototype, "setters", {
get: function() {
return this._setters;
},
enumerable: true,
configurable: true
});
return VisualState;
}();
exports.VisualState = VisualState;
function goToState(view, state) {
var root = view.page;
if (!root) {
return undefined;
}
var allStates = root._getStyleScope().getVisualStates(view);
if (!allStates) {
return undefined;
}
if (!(state in allStates)) {
state = visualStateConstants.Normal;
}
if (state !== view.visualState) {
var newState = allStates[state];
var oldState = allStates[view.visualState];
resetProperties(view, oldState, newState);
applyProperties(view, newState);
}
return state;
}
exports.goToState = goToState;
function resetProperties(view, oldState, newState) {
if (!oldState) {
return;
}
var property;
for (var name in oldState.setters) {
if (newState && name in newState.setters) {
continue;
}
property = styleProperty.getPropertyByName(name);
if (property) {
view.style._resetValue(property, observable.ValueSource.VisualState);
}
}
}
function applyProperties(view, state) {
if (!state) {
return;
}
var property;
for (var name in state.setters) {
property = styleProperty.getPropertyByName(name);
if (property) {
view.style._setValue(property, state.setters[name], observable.ValueSource.VisualState);
}
}
}
}, function(module, exports) {
exports.Normal = "normal";
exports.Hovered = "hovered";
exports.Pressed = "pressed";
}, function(module, exports, __webpack_require__) {
var fs = __webpack_require__(18);
var types = __webpack_require__(13);
var trace = __webpack_require__(26);
var platform = __webpack_require__(39);
var MIN_WH = "minWH";
var MIN_W = "minW";
var MIN_H = "minH";
var PRIORITY_STEP = 1e4;
var minWidthHeightQualifier = {
isMatch: function(value) {
return value.indexOf(MIN_WH) === 0;
},
getMatchValue: function(value, context) {
var numVal = parseInt(value.substr(MIN_WH.length));
if (isNaN(numVal)) {
return -1;
}
var actualLength = Math.min(context.width, context.height);
if (actualLength < numVal) {
return -1;
}
return PRIORITY_STEP - (actualLength - numVal);
}
};
var minWidthQualifier = {
isMatch: function(value) {
return value.indexOf(MIN_W) === 0 && value.indexOf(MIN_WH) < 0;
},
getMatchValue: function(value, context) {
var numVal = parseInt(value.substr(MIN_W.length));
if (isNaN(numVal)) {
return -1;
}
var actualWidth = context.width;
if (actualWidth < numVal) {
return -1;
}
return PRIORITY_STEP - (actualWidth - numVal);
}
};
var minHeightQualifier = {
isMatch: function(value) {
return value.indexOf(MIN_H) === 0 && value.indexOf(MIN_WH) < 0;
},
getMatchValue: function(value, context) {
var numVal = parseInt(value.substr(MIN_H.length));
if (isNaN(numVal)) {
return -1;
}
var actualHeight = context.height;
if (actualHeight < numVal) {
return -1;
}
return PRIORITY_STEP - (actualHeight - numVal);
}
};
var paltformQualifier = {
isMatch: function(value) {
return value === "android" || value === "ios";
},
getMatchValue: function(value, context) {
return value === context.os.toLowerCase() ? 1 : -1;
}
};
var orientationQualifier = {
isMatch: function(value) {
return value === "land" || value === "port";
},
getMatchValue: function(value, context) {
var isLandscape = context.width > context.height ? 1 : -1;
return value === "land" ? isLandscape : -isLandscape;
}
};
var supportedQualifiers = [ minWidthHeightQualifier, minWidthQualifier, minHeightQualifier, orientationQualifier, paltformQualifier ];
var FileNameResolver = function() {
function FileNameResolver(context) {
this._cache = {};
this._context = context;
}
FileNameResolver.prototype.resolveFileName = function(path, ext) {
var key = path + ext;
var result = this._cache[key];
if (types.isUndefined(result)) {
result = this.resolveFileNameImpl(path, ext);
this._cache[key] = result;
}
return result;
};
FileNameResolver.prototype.clearCache = function() {
this._cache = {};
};
FileNameResolver.prototype.resolveFileNameImpl = function(path, ext) {
var result = null;
path = fs.path.normalize(path);
ext = "." + ext;
var candidates = this.getFileCandidatesFromFolder(path, ext);
result = findFileMatch(path, ext, candidates, this._context);
trace.write('Resolved file name for "' + path + ext + '" result: ' + (result ? result : "no match found"), trace.categories.Navigation);
return result;
};
FileNameResolver.prototype.getFileCandidatesFromFolder = function(path, ext) {
var candidates = new Array();
var folderPath = path.substring(0, path.lastIndexOf(fs.path.separator) + 1);
if (fs.Folder.exists(folderPath)) {
var folder = fs.Folder.fromPath(folderPath);
folder.eachEntity(function(e) {
if (e instanceof fs.File) {
var file = e;
if (file.path.indexOf(path) === 0 && file.extension === ext) {
candidates.push(file.path);
}
}
return true;
});
} else {
trace.write("Could not find folder " + folderPath + " when loading " + path + ext, trace.categories.Navigation);
}
return candidates;
};
return FileNameResolver;
}();
exports.FileNameResolver = FileNameResolver;
function findFileMatch(path, ext, candidates, context) {
var bestValue = -1;
var result = null;
trace.write("Candidates for " + path + ext + ": " + candidates.join(", "), trace.categories.Navigation);
for (var i = 0; i < candidates.length; i++) {
var filePath = candidates[i];
var qualifiersStr = filePath.substr(path.length, filePath.length - path.length - ext.length);
var qualifiers = qualifiersStr.split(".");
var value = checkQualifiers(qualifiers, context);
if (value >= 0 && value > bestValue) {
bestValue = value;
result = candidates[i];
}
}
return result;
}
exports.findFileMatch = findFileMatch;
function checkQualifiers(qualifiers, context) {
var result = 0;
for (var i = 0; i < qualifiers.length; i++) {
if (qualifiers[i]) {
var value = checkQualifier(qualifiers[i], context);
if (value < 0) {
return -1;
}
result += value;
}
}
return result;
}
function checkQualifier(value, context) {
for (var i = 0; i < supportedQualifiers.length; i++) {
if (supportedQualifiers[i].isMatch(value)) {
var result = supportedQualifiers[i].getMatchValue(value, context);
if (result > 0) {
result += (supportedQualifiers.length - i) * PRIORITY_STEP;
}
return result;
}
}
return -1;
}
var appEventAttached = false;
var resolverInstance;
function resolveFileName(path, ext) {
if (!appEventAttached) {
var app = __webpack_require__(15);
app.on(app.orientationChangedEvent, function(data) {
resolverInstance = undefined;
});
appEventAttached = true;
}
if (!resolverInstance) {
resolverInstance = new FileNameResolver({
width: platform.screen.mainScreen.widthDIPs,
height: platform.screen.mainScreen.heightDIPs,
os: platform.device.os,
deviceType: platform.device.deviceType
});
}
return resolverInstance.resolveFileName(path, ext);
}
exports.resolveFileName = resolveFileName;
function clearCache() {
if (resolverInstance) {
resolverInstance.clearCache();
}
}
exports.clearCache = clearCache;
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(21);
var platformNames;
(function(platformNames) {
platformNames.android = "Android";
platformNames.ios = "iOS";
})(platformNames = exports.platformNames || (exports.platformNames = {}));
var device = function() {
function device() {}
Object.defineProperty(device, "os", {
get: function() {
return platformNames.android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(device, "manufacturer", {
get: function() {
if (!device._manufacturer) {
device._manufacturer = android.os.Build.MANUFACTURER;
}
return device._manufacturer;
},
enumerable: true,
configurable: true
});
Object.defineProperty(device, "osVersion", {
get: function() {
if (!device._osVersion) {
device._osVersion = android.os.Build.VERSION.RELEASE;
}
return device._osVersion;
},
enumerable: true,
configurable: true
});
Object.defineProperty(device, "model", {
get: function() {
if (!device._model) {
device._model = android.os.Build.MODEL;
}
return device._model;
},
enumerable: true,
configurable: true
});
Object.defineProperty(device, "sdkVersion", {
get: function() {
if (!device._sdkVersion) {
device._sdkVersion = android.os.Build.VERSION.SDK;
}
return device._sdkVersion;
},
enumerable: true,
configurable: true
});
Object.defineProperty(device, "deviceType", {
get: function() {
if (!device._deviceType) {
var dips = Math.min(screen.mainScreen.widthPixels, screen.mainScreen.heightPixels) / screen.mainScreen.scale;
var enums = __webpack_require__(23);
if (dips >= device.MIN_TABLET_PIXELS) {
device._deviceType = enums.DeviceType.Tablet;
} else {
device._deviceType = enums.DeviceType.Phone;
}
}
return device._deviceType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(device, "uuid", {
get: function() {
if (!device._uuid) {
device._uuid = android.provider.Settings.Secure.getString(utils.ad.getApplicationContext().getContentResolver(), android.provider.Settings.Secure.ANDROID_ID);
}
return device._uuid;
},
enumerable: true,
configurable: true
});
Object.defineProperty(device, "language", {
get: function() {
if (!device._language) {
device._language = java.util.Locale.getDefault().getLanguage().replace("_", "-");
}
return device._language;
},
enumerable: true,
configurable: true
});
Object.defineProperty(device, "region", {
get: function() {
if (!device._region) {
device._region = java.util.Locale.getDefault().getCountry();
}
return device._region;
},
enumerable: true,
configurable: true
});
device.MIN_TABLET_PIXELS = 600;
return device;
}();
exports.device = device;
var mainScreen;
var screen = function() {
function screen() {}
Object.defineProperty(screen, "mainScreen", {
get: function() {
if (!mainScreen) {
var metrics = utils.ad.getApplicationContext().getResources().getDisplayMetrics();
mainScreen = new MainScreen(metrics);
}
return mainScreen;
},
enumerable: true,
configurable: true
});
return screen;
}();
exports.screen = screen;
var MainScreen = function() {
function MainScreen(metrics) {
this._metrics = metrics;
}
Object.defineProperty(MainScreen.prototype, "widthPixels", {
get: function() {
return this._metrics.widthPixels;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "heightPixels", {
get: function() {
return this._metrics.heightPixels;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "scale", {
get: function() {
return this._metrics.density;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "widthDIPs", {
get: function() {
return this._metrics.widthPixels / this._metrics.density;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "heightDIPs", {
get: function() {
return this._metrics.heightPixels / this._metrics.density;
},
enumerable: true,
configurable: true
});
return MainScreen;
}();
}, function(module, exports, __webpack_require__) {
var enums = __webpack_require__(23);
var color = __webpack_require__(27);
function colorConverter(value) {
return new color.Color(value);
}
exports.colorConverter = colorConverter;
function fontSizeConverter(value) {
var result = parseFloat(value);
return result;
}
exports.fontSizeConverter = fontSizeConverter;
function textAlignConverter(value) {
switch (value) {
case enums.TextAlignment.left:
case enums.TextAlignment.center:
case enums.TextAlignment.right:
return value;

default:
throw new Error('CSS text-align "' + value + '" is not supported.');
}
}
exports.textAlignConverter = textAlignConverter;
function textDecorationConverter(value) {
var values = (value + "").split(" ");
if (values.indexOf(enums.TextDecoration.none) !== -1 || values.indexOf(enums.TextDecoration.underline) !== -1 || values.indexOf(enums.TextDecoration.lineThrough) !== -1) {
return value;
} else {
throw new Error('CSS text-decoration "' + value + '" is not supported.');
}
}
exports.textDecorationConverter = textDecorationConverter;
function whiteSpaceConverter(value) {
switch (value) {
case enums.WhiteSpace.normal:
case enums.WhiteSpace.nowrap:
return value;

default:
throw new Error('CSS white-space "' + value + '" is not supported.');
}
}
exports.whiteSpaceConverter = whiteSpaceConverter;
function textTransformConverter(value) {
switch (value) {
case enums.TextTransform.none:
case enums.TextTransform.uppercase:
case enums.TextTransform.lowercase:
case enums.TextTransform.capitalize:
return value;

default:
throw new Error('CSS text-transform "' + value + '" is not supported.');
}
}
exports.textTransformConverter = textTransformConverter;
exports.numberConverter = parseFloat;
function visibilityConverter(value) {
if (value.toLowerCase() === enums.Visibility.collapsed) {
return enums.Visibility.collapsed;
} else if (value.toLowerCase() === enums.Visibility.collapse) {
return enums.Visibility.collapse;
}
return enums.Visibility.visible;
}
exports.visibilityConverter = visibilityConverter;
function opacityConverter(value) {
var result = parseFloat(value);
result = Math.max(0, result);
result = Math.min(1, result);
return result;
}
exports.opacityConverter = opacityConverter;
}, function(module, exports, __webpack_require__) {
var enums = __webpack_require__(23);
var common = __webpack_require__(42);
var application;
function ensureApplication() {
if (!application) {
application = __webpack_require__(15);
}
}
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(13);
}
}
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(26);
}
}
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(18);
}
}
var typefaceCache = new Map();
var appAssets;
var FONTS_BASE_PATH = "/fonts/";
var Font = function(_super) {
__extends(Font, _super);
function Font(family, size, style, weight) {
_super.call(this, family, size, style, weight);
}
Font.prototype.withFontFamily = function(family) {
return new Font(family, this.fontSize, this.fontStyle, this.fontWeight);
};
Font.prototype.withFontStyle = function(style) {
return new Font(this.fontFamily, this.fontSize, style, this.fontWeight);
};
Font.prototype.withFontWeight = function(weight) {
return new Font(this.fontFamily, this.fontSize, this.fontStyle, weight);
};
Font.prototype.withFontSize = function(size) {
return new Font(this.fontFamily, size, this.fontStyle, this.fontWeight);
};
Font.prototype.getAndroidTypeface = function() {
if (!this._typeface) {
var style = 0;
if (this.isBold) {
style |= android.graphics.Typeface.BOLD;
}
if (this.isItalic) {
style |= android.graphics.Typeface.ITALIC;
}
var typeFace = this.getTypeFace(this.fontFamily);
this._typeface = android.graphics.Typeface.create(typeFace, style);
}
return this._typeface;
};
Font.prototype.getTypeFace = function(fontFamily) {
var fonts = common.parseFontFamily(fontFamily);
var result = null;
if (fonts.length === 0) {
return null;
}
for (var i = 0; i < fonts.length; i++) {
switch (fonts[i].toLowerCase()) {
case common.genericFontFamilies.serif:
result = android.graphics.Typeface.SERIF;
break;

case common.genericFontFamilies.sansSerif:
result = android.graphics.Typeface.SANS_SERIF;
break;

case common.genericFontFamilies.monospace:
result = android.graphics.Typeface.MONOSPACE;
break;

default:
result = this.loadFontFromFile(fonts[i]);
break;
}
if (result) {
return result;
}
}
return null;
};
Font.prototype.loadFontFromFile = function(fontFamily) {
ensureApplication();
appAssets = appAssets || application.android.context.getAssets();
if (!appAssets) {
return null;
}
ensureTypes();
var result = typefaceCache.get(fontFamily);
if (types.isUndefined(result)) {
result = null;
ensureTrace();
ensureFS();
var fontAssetPath;
var basePath = fs.path.join(fs.knownFolders.currentApp().path, "fonts", fontFamily);
if (fs.File.exists(basePath + ".ttf")) {
fontAssetPath = FONTS_BASE_PATH + fontFamily + ".ttf";
} else if (fs.File.exists(basePath + ".otf")) {
fontAssetPath = FONTS_BASE_PATH + fontFamily + ".otf";
} else {
trace.write("Could not find font file for " + fontFamily, trace.categories.Error, trace.messageType.error);
}
if (fontAssetPath) {
try {
fontAssetPath = fs.path.join(fs.knownFolders.currentApp().path, fontAssetPath);
result = android.graphics.Typeface.createFromFile(fontAssetPath);
} catch (e) {
trace.write("Error loading font asset: " + fontAssetPath, trace.categories.Error, trace.messageType.error);
}
}
typefaceCache.set(fontFamily, result);
}
return result;
};
Font.default = new Font(undefined, undefined, enums.FontStyle.normal, enums.FontWeight.normal);
return Font;
}(common.Font);
exports.Font = Font;
}, function(module, exports, __webpack_require__) {
var enums = __webpack_require__(23);
var converters = __webpack_require__(40);
var Font = function() {
function Font(family, size, style, weight) {
this._fontFamily = family;
this._fontSize = size;
this._fontStyle = style;
this._fontWeight = weight;
}
Object.defineProperty(Font.prototype, "fontFamily", {
get: function() {
return this._fontFamily;
},
set: function(value) {
throw new Error("fontFamily is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(Font.prototype, "fontStyle", {
get: function() {
return this._fontStyle;
},
set: function(value) {
throw new Error("fontStyle is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(Font.prototype, "fontWeight", {
get: function() {
return this._fontWeight;
},
set: function(value) {
throw new Error("fontWeight is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(Font.prototype, "fontSize", {
get: function() {
return this._fontSize;
},
set: function(value) {
throw new Error("fontSize is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(Font.prototype, "isBold", {
get: function() {
return this._fontWeight.toLowerCase() === enums.FontWeight.bold;
},
set: function(value) {
throw new Error("isBold is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(Font.prototype, "isItalic", {
get: function() {
return this._fontStyle.toLowerCase() === enums.FontStyle.italic;
},
set: function(value) {
throw new Error("isItalic is read-only");
},
enumerable: true,
configurable: true
});
Font.prototype.getAndroidTypeface = function() {
return undefined;
};
Font.prototype.getUIFont = function(defaultFont) {
return undefined;
};
Font.prototype.withFontFamily = function(family) {
throw new Error("This should be called on the derived class");
};
Font.prototype.withFontStyle = function(style) {
throw new Error("This should be called on the derived class");
};
Font.prototype.withFontWeight = function(weight) {
throw new Error("This should be called on the derived class");
};
Font.prototype.withFontSize = function(size) {
throw new Error("This should be called on the derived class");
};
Font.equals = function(value1, value2) {
if (!value1 && !value2) {
return true;
}
if (!value1 || !value2) {
return false;
}
return value1.fontFamily === value2.fontFamily && value1.fontSize === value2.fontSize && value1.fontStyle === value2.fontStyle && value1.fontWeight === value2.fontWeight;
};
Font.parse = function(cssValue) {
var parsed = parseFont(cssValue);
var size = converters.fontSizeConverter(parsed.fontSize);
size = !!size ? size : undefined;
return new Font(parsed.fontFamily, size, parsed.fontStyle, parsed.fontWeight);
};
Font.default = undefined;
return Font;
}();
exports.Font = Font;
function parseFontFamily(value) {
var result = new Array();
if (!value) {
return result;
}
var split = value.split(",");
for (var i = 0; i < split.length; i++) {
var str = split[i].trim().replace(/['"]+/g, "");
if (str) {
result.push(str);
}
}
return result;
}
exports.parseFontFamily = parseFontFamily;
var genericFontFamilies;
(function(genericFontFamilies) {
genericFontFamilies.serif = "serif";
genericFontFamilies.sansSerif = "sans-serif";
genericFontFamilies.monospace = "monospace";
})(genericFontFamilies = exports.genericFontFamilies || (exports.genericFontFamilies = {}));
var styles = new Set();
[ "italic", "oblique" ].forEach(function(val, i, a) {
return styles.add(val);
});
var weights = new Set();
[ "bold", "bolder", "lighter", "100", "200", "300", "400", "500", "600", "700", "800", "900" ].forEach(function(val, i, a) {
return weights.add(val);
});
function parseFont(fontValue) {
var result = {
fontStyle: "normal",
fontVariant: "normal",
fontWeight: "normal"
};
var parts = fontValue.split(/\s+/);
var part;
while (part = parts.shift()) {
if (part === "normal") {} else if (part === "small-caps") {
result.fontVariant = part;
} else if (styles.has(part)) {
result.fontStyle = part;
} else if (weights.has(part)) {
result.fontWeight = part;
} else if (!result.fontSize) {
var sizes = part.split("/");
result.fontSize = sizes[0];
result.lineHeight = sizes.length > 1 ? sizes[1] : undefined;
} else {
result.fontFamily = part;
if (parts.length) {
result.fontFamily += " " + parts.join(" ");
}
break;
}
}
return result;
}
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(21);
var common = __webpack_require__(44);
var types = __webpack_require__(13);
var button;
var style;
function ensureLazyRequires() {
if (!button) {
button = __webpack_require__(46);
}
if (!style) {
style = __webpack_require__(14);
}
}
global.moduleMerge(common, exports);
var ad;
(function(ad) {
Object.defineProperty(ad, "BorderDrawable", {
get: function() {
ensureBorderDrawable();
return BorderDrawableClass;
},
configurable: true
});
var BorderDrawableClass;
function ensureBorderDrawable() {
if (BorderDrawableClass) {
return;
}
var BorderDrawable = function(_super) {
__extends(BorderDrawable, _super);
function BorderDrawable() {
_super.call(this);
this._density = utils.layout.getDisplayDensity();
return global.__native(this);
}
Object.defineProperty(BorderDrawable.prototype, "borderWidth", {
get: function() {
return this._borderWidth;
},
set: function(value) {
if (this._borderWidth !== value) {
this._borderWidth = value;
this.invalidateSelf();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(BorderDrawable.prototype, "cornerRadius", {
get: function() {
return this._cornerRadius;
},
set: function(value) {
if (this._cornerRadius !== value) {
this._cornerRadius = value;
this.invalidateSelf();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(BorderDrawable.prototype, "borderColor", {
get: function() {
return this._borderColor;
},
set: function(value) {
if (this._borderColor !== value) {
this._borderColor = value;
this.invalidateSelf();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(BorderDrawable.prototype, "background", {
get: function() {
return this._background;
},
set: function(value) {
if (this._background !== value) {
this._background = value;
this.invalidateSelf();
}
},
enumerable: true,
configurable: true
});
BorderDrawable.prototype.draw = function(canvas) {
var bounds = this.getBounds();
var borderWidth = this._borderWidth * this._density;
var halfBorderWidth = borderWidth / 2;
var normalizedBorderAlpha = android.graphics.Color.alpha(this._borderColor) / 255;
var backoffAntialias = Math.min(.5, halfBorderWidth) * normalizedBorderAlpha;
var backgroundBoundsF = new android.graphics.RectF(bounds.left + backoffAntialias, bounds.top + backoffAntialias, bounds.right - backoffAntialias, bounds.bottom - backoffAntialias);
var outerRadius = this._cornerRadius * this._density;
if (this.background.color && this.background.color.android) {
var backgroundColorPaint = new android.graphics.Paint();
backgroundColorPaint.setStyle(android.graphics.Paint.Style.FILL);
backgroundColorPaint.setColor(this.background.color.android);
backgroundColorPaint.setAntiAlias(true);
canvas.drawRoundRect(backgroundBoundsF, outerRadius, outerRadius, backgroundColorPaint);
}
if (this.background.image) {
var bitmap = this.background.image.android;
var params = this.background.getDrawParams(bounds.width(), bounds.height());
var transform = new android.graphics.Matrix();
if (params.sizeX > 0 && params.sizeY > 0) {
var scaleX = params.sizeX / bitmap.getWidth();
var scaleY = params.sizeY / bitmap.getHeight();
transform.setScale(scaleX, scaleY, 0, 0);
} else {
params.sizeX = bitmap.getWidth();
params.sizeY = bitmap.getHeight();
}
transform.postTranslate(params.posX - backoffAntialias, params.posY - backoffAntialias);
var shader = new android.graphics.BitmapShader(bitmap, android.graphics.Shader.TileMode.REPEAT, android.graphics.Shader.TileMode.REPEAT);
shader.setLocalMatrix(transform);
var backgroundImagePaint = new android.graphics.Paint();
backgroundImagePaint.setShader(shader);
var imageWidth = params.repeatX ? bounds.width() : params.sizeX;
var imageHeight = params.repeatY ? bounds.height() : params.sizeY;
params.posX = params.repeatX ? 0 : params.posX;
params.posY = params.repeatY ? 0 : params.posY;
var supportsPathOp = android.os.Build.VERSION.SDK_INT >= 19;
if (supportsPathOp) {
var backgroundPath = new android.graphics.Path();
backgroundPath.addRoundRect(backgroundBoundsF, outerRadius, outerRadius, android.graphics.Path.Direction.CCW);
var backgroundNoRepeatPath = new android.graphics.Path();
backgroundNoRepeatPath.addRect(params.posX, params.posY, params.posX + imageWidth, params.posY + imageHeight, android.graphics.Path.Direction.CCW);
backgroundPath.op(backgroundNoRepeatPath, android.graphics.Path.Op.INTERSECT);
canvas.drawPath(backgroundPath, backgroundImagePaint);
} else {
canvas.save();
canvas.clipRect(params.posX, params.posY, params.posX + imageWidth, params.posY + imageHeight);
canvas.drawRoundRect(backgroundBoundsF, outerRadius, outerRadius, backgroundImagePaint);
canvas.restore();
}
}
if (borderWidth > 0 && this._borderColor) {
var middleBoundsF = new android.graphics.RectF(bounds.left + halfBorderWidth, bounds.top + halfBorderWidth, bounds.right - halfBorderWidth, bounds.bottom - halfBorderWidth);
var borderPaint = new android.graphics.Paint();
borderPaint.setColor(this._borderColor);
borderPaint.setAntiAlias(true);
if (outerRadius <= 0) {
borderPaint.setStyle(android.graphics.Paint.Style.STROKE);
borderPaint.setStrokeWidth(borderWidth);
canvas.drawRect(middleBoundsF, borderPaint);
} else if (outerRadius >= borderWidth) {
borderPaint.setStyle(android.graphics.Paint.Style.STROKE);
borderPaint.setStrokeWidth(borderWidth);
var middleRadius = Math.max(0, outerRadius - halfBorderWidth);
canvas.drawRoundRect(middleBoundsF, middleRadius, middleRadius, borderPaint);
} else {
var borderPath = new android.graphics.Path();
var borderOuterBoundsF = new android.graphics.RectF(bounds.left, bounds.top, bounds.right, bounds.bottom);
borderPath.addRoundRect(borderOuterBoundsF, outerRadius, outerRadius, android.graphics.Path.Direction.CCW);
var borderInnerBoundsF = new android.graphics.RectF(bounds.left + borderWidth, bounds.top + borderWidth, bounds.right - borderWidth, bounds.bottom - borderWidth);
borderPath.addRect(borderInnerBoundsF, android.graphics.Path.Direction.CW);
borderPaint.setStyle(android.graphics.Paint.Style.FILL);
canvas.drawPath(borderPath, borderPaint);
}
}
};
return BorderDrawable;
}(android.graphics.drawable.ColorDrawable);
BorderDrawableClass = BorderDrawable;
}
var SDK;
function getSDK() {
if (!SDK) {
SDK = android.os.Build.VERSION.SDK_INT;
}
return SDK;
}
var _defaultBackgrounds = new Map();
function onBackgroundOrBorderPropertyChanged(v) {
var nativeView = v._nativeView;
if (!nativeView) {
return;
}
ensureBorderDrawable();
ensureLazyRequires();
var backgroundValue = v.style._getValue(style.backgroundInternalProperty);
var borderWidth = v.borderWidth;
var bkg = nativeView.getBackground();
if (v instanceof button.Button && !types.isNullOrUndefined(bkg) && types.isFunction(bkg.setColorFilter) && v.borderWidth === 0 && v.borderRadius === 0 && types.isNullOrUndefined(v.style._getValue(style.backgroundImageProperty)) && !types.isNullOrUndefined(v.style._getValue(style.backgroundColorProperty))) {
var backgroundColor = bkg.backgroundColor = v.style._getValue(style.backgroundColorProperty).android;
bkg.setColorFilter(backgroundColor, android.graphics.PorterDuff.Mode.SRC_IN);
bkg.backgroundColor = backgroundColor;
} else if (v.borderWidth !== 0 || v.borderRadius !== 0 || !backgroundValue.isEmpty()) {
if (!(bkg instanceof BorderDrawableClass)) {
bkg = new BorderDrawableClass();
var viewClass = types.getClass(v);
if (!(v instanceof button.Button) && !_defaultBackgrounds.has(viewClass)) {
_defaultBackgrounds.set(viewClass, nativeView.getBackground());
}
nativeView.setBackground(bkg);
}
bkg.borderWidth = v.borderWidth;
bkg.cornerRadius = v.borderRadius;
bkg.borderColor = v.borderColor ? v.borderColor.android : android.graphics.Color.TRANSPARENT;
bkg.background = backgroundValue;
if (getSDK() < 18) {
nativeView.setLayerType(android.view.View.LAYER_TYPE_SOFTWARE, null);
} else {
nativeView.setLayerType(android.view.View.LAYER_TYPE_HARDWARE, null);
}
} else {
if (v instanceof button.Button) {
var nativeButton = new android.widget.Button(nativeView.getContext());
nativeView.setBackground(nativeButton.getBackground());
} else {
var viewClass = types.getClass(v);
if (_defaultBackgrounds.has(viewClass)) {
nativeView.setBackground(_defaultBackgrounds.get(viewClass));
}
}
if (getSDK() < 18) {
nativeView.setLayerType(android.view.View.LAYER_TYPE_HARDWARE, null);
}
}
var density = utils.layout.getDisplayDensity();
nativeView.setPadding(Math.round((borderWidth + v.style.paddingLeft) * density), Math.round((borderWidth + v.style.paddingTop) * density), Math.round((borderWidth + v.style.paddingRight) * density), Math.round((borderWidth + v.style.paddingBottom) * density));
}
ad.onBackgroundOrBorderPropertyChanged = onBackgroundOrBorderPropertyChanged;
})(ad = exports.ad || (exports.ad = {}));
}, function(module, exports, __webpack_require__) {
var colorModule = __webpack_require__(27);
var enums = __webpack_require__(23);
var cssValue = __webpack_require__(45);
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(13);
}
}
var Background = function() {
function Background(color, image, repeat, position, size) {
this.color = color;
this.image = image;
this.repeat = repeat;
this.position = position;
this.size = size;
}
Background.prototype.withColor = function(value) {
return new Background(value, this.image, this.repeat, this.position, this.size);
};
Background.prototype.withImage = function(value) {
return new Background(this.color, value, this.repeat, this.position, this.size);
};
Background.prototype.withRepeat = function(value) {
return new Background(this.color, this.image, value, this.position, this.size);
};
Background.prototype.withPosition = function(value) {
return new Background(this.color, this.image, this.repeat, value, this.size);
};
Background.prototype.withSize = function(value) {
return new Background(this.color, this.image, this.repeat, this.position, value);
};
Background.prototype.getDrawParams = function(width, height) {
if (!this.image) {
return null;
}
var res = {
repeatX: true,
repeatY: true,
posX: 0,
posY: 0
};
if (this.repeat) {
switch (this.repeat.toLowerCase()) {
case enums.BackgroundRepeat.noRepeat:
res.repeatX = false;
res.repeatY = false;
break;

case enums.BackgroundRepeat.repeatX:
res.repeatY = false;
break;

case enums.BackgroundRepeat.repeatY:
res.repeatX = false;
break;
}
}
var imageWidth = this.image.width;
var imageHeight = this.image.height;
if (this.size) {
var values = cssValue(this.size);
if (values.length === 2) {
var vx = values[0];
var vy = values[1];
if (vx.unit === "%" && vy.unit === "%") {
imageWidth = width * vx.value / 100;
imageHeight = height * vy.value / 100;
res.sizeX = imageWidth;
res.sizeY = imageHeight;
} else if (vx.type === "number" && vy.type === "number" && (vx.unit === "px" && vy.unit === "px" || vx.unit === "" && vy.unit === "")) {
imageWidth = vx.value;
imageHeight = vy.value;
res.sizeX = imageWidth;
res.sizeY = imageHeight;
}
} else if (values.length === 1 && values[0].type === "ident") {
var scale = 0;
if (values[0].string === "cover") {
scale = Math.max(width / imageWidth, height / imageHeight);
} else if (values[0].string === "contain") {
scale = Math.min(width / imageWidth, height / imageHeight);
}
if (scale > 0) {
imageWidth *= scale;
imageHeight *= scale;
res.sizeX = imageWidth;
res.sizeY = imageHeight;
}
}
}
if (this.position) {
var v = Background.parsePosition(this.position);
if (v) {
var spaceX = width - imageWidth;
var spaceY = height - imageHeight;
if (v.x.unit === "%" && v.y.unit === "%") {
res.posX = spaceX * v.x.value / 100;
res.posY = spaceY * v.y.value / 100;
} else if (v.x.type === "number" && v.y.type === "number" && (v.x.unit === "px" && v.y.unit === "px" || v.x.unit === "" && v.y.unit === "")) {
res.posX = v.x.value;
res.posY = v.y.value;
} else if (v.x.type === "ident" && v.y.type === "ident") {
if (v.x.string.toLowerCase() === "center") {
res.posX = spaceX / 2;
} else if (v.x.string.toLowerCase() === "right") {
res.posX = spaceX;
}
if (v.y.string.toLowerCase() === "center") {
res.posY = spaceY / 2;
} else if (v.y.string.toLowerCase() === "bottom") {
res.posY = spaceY;
}
}
}
}
return res;
};
Background.parsePosition = function(pos) {
var values = cssValue(pos);
if (values.length === 2) {
return {
x: values[0],
y: values[1]
};
}
if (values.length === 1 && values[0].type === "ident") {
var val = values[0].string.toLocaleLowerCase();
var center = {
type: "ident",
string: "center"
};
if (val === "left" || val === "right") {
return {
x: values[0],
y: center
};
} else if (val === "top" || val === "bottom") {
return {
x: center,
y: values[0]
};
} else if (val === "center") {
return {
x: center,
y: center
};
}
}
return null;
};
Background.prototype.isEmpty = function() {
ensureTypes();
return types.isNullOrUndefined(this.image) && types.isNullOrUndefined(this.color);
};
Background.equals = function(value1, value2) {
if (!value1 && !value2) {
return true;
}
if (!value1 || !value2) {
return false;
}
return value1.image === value2.image && value1.position === value2.position && value1.repeat === value2.repeat && value1.size === value2.size && colorModule.Color.equals(value1.color, value2.color);
};
Background.default = new Background(undefined, undefined, undefined, undefined, undefined);
return Background;
}();
exports.Background = Background;
}, function(module, exports) {
module.exports = parse;
function parse(str) {
return new Parser(str).parse();
}
function Parser(str) {
this.str = str;
}
Parser.prototype.skip = function(m) {
this.str = this.str.slice(m[0].length);
};
Parser.prototype.comma = function() {
var m = /^, */.exec(this.str);
if (!m) return;
this.skip(m);
return {
type: "comma",
string: ","
};
};
Parser.prototype.ident = function() {
var m = /^([\w-]+) */.exec(this.str);
if (!m) return;
this.skip(m);
return {
type: "ident",
string: m[1]
};
};
Parser.prototype.int = function() {
var m = /^(([-\+]?\d+)(\S+)?) */.exec(this.str);
if (!m) return;
this.skip(m);
var n = ~~m[2];
var u = m[3];
return {
type: "number",
string: m[1],
unit: u || "",
value: n
};
};
Parser.prototype.float = function() {
var m = /^(((?:[-\+]?\d+)?\.\d+)(\S+)?) */.exec(this.str);
if (!m) return;
this.skip(m);
var n = parseFloat(m[2]);
var u = m[3];
return {
type: "number",
string: m[1],
unit: u || "",
value: n
};
};
Parser.prototype.number = function() {
return this.float() || this.int();
};
Parser.prototype.double = function() {
var m = /^"([^"]*)" */.exec(this.str);
if (!m) return m;
this.skip(m);
return {
type: "string",
quote: '"',
string: '"' + m[1] + '"',
value: m[1]
};
};
Parser.prototype.single = function() {
var m = /^'([^']*)' */.exec(this.str);
if (!m) return m;
this.skip(m);
return {
type: "string",
quote: "'",
string: "'" + m[1] + "'",
value: m[1]
};
};
Parser.prototype.string = function() {
return this.single() || this.double();
};
Parser.prototype.value = function() {
return this.number() || this.ident() || this.string() || this.comma();
};
Parser.prototype.parse = function() {
var vals = [];
while (this.str.length) {
var obj = this.value();
if (!obj) throw new Error("failed to parse near `" + this.str.slice(0, 10) + "...`");
vals.push(obj);
}
return vals;
};
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(47);
global.moduleMerge(common, exports);
var Button = function(_super) {
__extends(Button, _super);
function Button() {
_super.call(this);
this._isPressed = false;
}
Object.defineProperty(Button.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Button.prototype._createUI = function() {
var that = new WeakRef(this);
this._android = new android.widget.Button(this._context);
this._android.setOnClickListener(new android.view.View.OnClickListener({
get owner() {
return that.get();
},
onClick: function(v) {
if (this.owner) {
this.owner._emit(common.Button.tapEvent);
}
}
}));
};
Button.prototype._onTextPropertyChanged = function(data) {
if (this.android) {
this.android.setText(data.newValue + "");
}
};
Button.prototype._setFormattedTextPropertyToNative = function(value) {
if (this.android) {
this.android.setText(value._formattedText);
}
};
return Button;
}(common.Button);
exports.Button = Button;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(32);
var view = __webpack_require__(11);
var proxy = __webpack_require__(48);
var formattedString = __webpack_require__(56);
var observable = __webpack_require__(17);
var weakEvents;
function ensureWeakEvents() {
if (!weakEvents) {
weakEvents = __webpack_require__(50);
}
}
var enums;
function ensureEnums() {
if (!enums) {
enums = __webpack_require__(23);
}
}
var textProperty = new dependencyObservable.Property("text", "Button", new proxy.PropertyMetadata("", dependencyObservable.PropertyMetadataSettings.AffectsLayout));
var formattedTextProperty = new dependencyObservable.Property("formattedText", "Button", new proxy.PropertyMetadata("", dependencyObservable.PropertyMetadataSettings.AffectsLayout));
function onTextPropertyChanged(data) {
var button = data.object;
button._onTextPropertyChanged(data);
}
function onFormattedTextPropertyChanged(data) {
var button = data.object;
button._onFormattedTextPropertyChanged(data);
}
textProperty.metadata.onSetNativeValue = onTextPropertyChanged;
formattedTextProperty.metadata.onSetNativeValue = onFormattedTextPropertyChanged;
var Button = function(_super) {
__extends(Button, _super);
function Button() {
_super.apply(this, arguments);
}
Button.prototype._onBindingContextChanged = function(oldValue, newValue) {
_super.prototype._onBindingContextChanged.call(this, oldValue, newValue);
if (this.formattedText) {
this.formattedText.updateSpansBindingContext(newValue);
}
};
Object.defineProperty(Button.prototype, "text", {
get: function() {
return this._getValue(Button.textProperty);
},
set: function(value) {
this._setValue(Button.textProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Button.prototype, "formattedText", {
get: function() {
return this._getValue(Button.formattedTextProperty);
},
set: function(value) {
if (this.formattedText !== value) {
ensureWeakEvents();
if (this.formattedText) {
weakEvents.removeWeakEventListener(this.formattedText, observable.Observable.propertyChangeEvent, this.onFormattedTextChanged, this);
}
this._setValue(Button.formattedTextProperty, value);
if (value) {
weakEvents.addWeakEventListener(value, observable.Observable.propertyChangeEvent, this.onFormattedTextChanged, this);
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Button.prototype, "textWrap", {
get: function() {
return this._getValue(Button.textWrapProperty);
},
set: function(value) {
this._setValue(Button.textWrapProperty, value);
},
enumerable: true,
configurable: true
});
Button.prototype.onFormattedTextChanged = function(eventData) {
this._setFormattedTextPropertyToNative(eventData.value);
};
Button.prototype._onTextPropertyChanged = function(data) {};
Button.prototype._setFormattedTextPropertyToNative = function(value) {};
Button.prototype._onFormattedTextPropertyChanged = function(data) {
if (data.newValue) {
data.newValue.parent = this;
}
this._setFormattedTextPropertyToNative(data.newValue);
};
Button.prototype._addChildFromBuilder = function(name, value) {
formattedString.FormattedString.addFormattedStringToView(this, name, value);
};
Button.tapEvent = "tap";
Button.textProperty = textProperty;
Button.formattedTextProperty = formattedTextProperty;
Button.textWrapProperty = new dependencyObservable.Property("textWrap", "Button", new proxy.PropertyMetadata(false, dependencyObservable.PropertyMetadataSettings.AffectsLayout));
return Button;
}(view.View);
exports.Button = Button;
function onTextWrapPropertyChanged(data) {
var v = data.object;
ensureEnums();
v.style.whiteSpace = data.newValue ? enums.WhiteSpace.normal : enums.WhiteSpace.nowrap;
}
Button.textWrapProperty.metadata.onSetNativeValue = onTextWrapPropertyChanged;
}, function(module, exports, __webpack_require__) {
var bindable = __webpack_require__(49);
var dependencyObservable = __webpack_require__(32);
var types = __webpack_require__(13);
var observable = __webpack_require__(17);
var PropertyMetadata = function(_super) {
__extends(PropertyMetadata, _super);
function PropertyMetadata(defaultValue, options, onChanged, onValidateValue, onSetNativeValue) {
_super.call(this, defaultValue, options, onChanged, onValidateValue);
this._onSetNativeValue = onSetNativeValue;
}
Object.defineProperty(PropertyMetadata.prototype, "onSetNativeValue", {
get: function() {
return this._onSetNativeValue;
},
set: function(value) {
this._onSetNativeValue = value;
},
enumerable: true,
configurable: true
});
return PropertyMetadata;
}(dependencyObservable.PropertyMetadata);
exports.PropertyMetadata = PropertyMetadata;
var ProxyObject = function(_super) {
__extends(ProxyObject, _super);
function ProxyObject() {
_super.apply(this, arguments);
this._updatingJSPropertiesDict = {};
}
Object.defineProperty(ProxyObject.prototype, "android", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProxyObject.prototype, "ios", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
ProxyObject.prototype._onPropertyChanged = function(property, oldValue, newValue) {
_super.prototype._onPropertyChanged.call(this, property, oldValue, newValue);
this._trySetNativeValue(property, oldValue, newValue);
};
ProxyObject.prototype._onPropertyChangedFromNative = function(property, newValue) {
if (this._updatingJSPropertiesDict[property.name]) {
return;
}
this._updatingJSPropertiesDict[property.name] = true;
this._setValue(property, newValue);
delete this._updatingJSPropertiesDict[property.name];
};
ProxyObject.prototype._syncNativeProperties = function() {
var that = this;
var eachPropertyCallback = function(property) {
that._trySetNativeValue(property);
return true;
};
this._eachSetProperty(eachPropertyCallback);
};
ProxyObject.prototype._canApplyNativeProperty = function() {
return false;
};
ProxyObject.prototype._trySetNativeValue = function(property, oldValue, newValue) {
if (this._updatingJSPropertiesDict[property.name]) {
return;
}
if (!this._canApplyNativeProperty()) {
return;
}
var metadata = property.metadata;
if (!(metadata instanceof PropertyMetadata)) {
return;
}
var proxyMetadata = metadata;
if (proxyMetadata.onSetNativeValue) {
if (types.isUndefined(newValue)) {
newValue = this._getValue(property);
}
proxyMetadata.onSetNativeValue({
object: this,
property: property,
eventName: observable.Observable.propertyChangeEvent,
newValue: newValue,
oldValue: oldValue
});
}
};
return ProxyObject;
}(bindable.Bindable);
exports.ProxyObject = ProxyObject;
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(17);
var dependencyObservable = __webpack_require__(32);
var weakEvents = __webpack_require__(50);
var types = __webpack_require__(13);
var trace = __webpack_require__(26);
var bindingBuilder = __webpack_require__(51);
var viewModule = __webpack_require__(11);
var utils = __webpack_require__(21);
var application;
function ensureApplication() {
if (!application) {
application = __webpack_require__(15);
}
}
var expressions;
function ensureExpressions() {
if (!expressions) {
expressions = __webpack_require__(52);
}
}
var specialProperties;
function ensureSpecialProperties() {
if (!specialProperties) {
specialProperties = __webpack_require__(55);
}
}
var bindingContextProperty = new dependencyObservable.Property("bindingContext", "Bindable", new dependencyObservable.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.Inheritable, onBindingContextChanged));
function onBindingContextChanged(data) {
var bindable = data.object;
bindable._onBindingContextChanged(data.oldValue, data.newValue);
}
var contextKey = "context";
var paramsRegex = /\[\s*(['"])*(\w*)\1\s*\]/;
var bc = bindingBuilder.bindingConstants;
var Bindable = function(_super) {
__extends(Bindable, _super);
function Bindable() {
_super.apply(this, arguments);
}
Object.defineProperty(Bindable.prototype, "bindings", {
get: function() {
if (!this._bindings) {
this._bindings = {};
}
return this._bindings;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Bindable.prototype, "bindingContext", {
get: function() {
return this._getValue(Bindable.bindingContextProperty);
},
set: function(value) {
this._setValue(Bindable.bindingContextProperty, value);
},
enumerable: true,
configurable: true
});
Bindable.prototype.bind = function(options, source) {
var binding = this.bindings[options.targetProperty];
if (binding) {
binding.unbind();
}
binding = new Binding(this, options);
this.bindings[options.targetProperty] = binding;
var bindingSource = source;
if (!bindingSource) {
bindingSource = this.bindingContext;
binding.sourceIsBindingContext = true;
}
if (!types.isNullOrUndefined(bindingSource)) {
binding.bind(bindingSource);
}
};
Bindable.prototype.unbind = function(property) {
var binding = this.bindings[property];
if (binding) {
binding.unbind();
delete this.bindings[property];
}
};
Bindable.prototype._updateTwoWayBinding = function(propertyName, value) {
var binding = this.bindings[propertyName];
if (binding) {
binding.updateTwoWay(value);
}
};
Bindable.prototype._setCore = function(data) {
_super.prototype._setCore.call(this, data);
this._updateTwoWayBinding(data.propertyName, data.value);
};
Bindable.prototype._onPropertyChanged = function(property, oldValue, newValue) {
trace.write(this + "._onPropertyChanged(" + property.name + ", " + oldValue + ", " + newValue + ")", trace.categories.Binding);
_super.prototype._onPropertyChanged.call(this, property, oldValue, newValue);
if (this instanceof viewModule.View) {
if (property.metadata.inheritable && this._isInheritedChange() === true) {
return;
}
}
var binding = this.bindings[property.name];
if (binding && !binding.updating) {
if (binding.options.twoWay) {
trace.write(this + "._updateTwoWayBinding(" + property.name + ", " + newValue + ");" + property.name, trace.categories.Binding);
this._updateTwoWayBinding(property.name, newValue);
} else {
trace.write(this + ".unbind(" + property.name + ");", trace.categories.Binding);
this.unbind(property.name);
}
}
};
Bindable.prototype._onBindingContextChanged = function(oldValue, newValue) {
var binding;
for (var p in this.bindings) {
binding = this.bindings[p];
if (binding.updating || !binding.sourceIsBindingContext) {
continue;
}
trace.write("Binding " + binding.target.get() + "." + binding.options.targetProperty + " to new context " + newValue, trace.categories.Binding);
binding.unbind();
if (!types.isNullOrUndefined(newValue)) {
binding.bind(newValue);
}
}
};
Bindable.bindingContextProperty = bindingContextProperty;
return Bindable;
}(dependencyObservable.DependencyObservable);
exports.Bindable = Bindable;
var Binding = function() {
function Binding(target, options) {
this.updating = false;
this.propertyChangeListeners = {};
this.target = new WeakRef(target);
this.options = options;
}
Binding.prototype.loadedHandlerVisualTreeBinding = function(args) {
var targetInstance = args.object;
targetInstance.off(viewModule.View.loadedEvent, this.loadedHandlerVisualTreeBinding, this);
this.unbind();
if (!types.isNullOrUndefined(targetInstance.bindingContext)) {
this.bind(targetInstance.bindingContext);
}
};
Binding.prototype.bind = function(obj) {
if (types.isNullOrUndefined(obj)) {
throw new Error("Expected valid object reference as a source in the Binding.bind method.");
}
if (typeof obj === "number") {
obj = new Number(obj);
}
if (typeof obj === "boolean") {
obj = new Boolean(obj);
}
if (typeof obj === "string") {
obj = new String(obj);
}
this.source = new WeakRef(obj);
this.updateTarget(this.getSourcePropertyValue());
if (!this.sourceOptions) {
this.sourceOptions = this.resolveOptions(this.source, this.getSourceProperties());
}
this.addPropertyChangeListeners(this.source, this.getSourceProperties());
};
Binding.prototype.getSourceProperties = function() {
if (!this.sourcePropertiesArray) {
this.sourcePropertiesArray = Binding.getProperties(this.options.sourceProperty);
}
return this.sourcePropertiesArray;
};
Binding.getProperties = function(property) {
var result;
if (property) {
var parentsMatches = property.match(bindingBuilder.parentsRegex);
result = property.replace(bindingBuilder.parentsRegex, "parentsMatch").replace(/\]/g, "").split(/\.|\[/);
var i;
var resultLength = result.length;
var parentsMatchesCounter = 0;
for (i = 0; i < resultLength; i++) {
if (result[i] === "parentsMatch") {
result[i] = parentsMatches[parentsMatchesCounter];
parentsMatchesCounter++;
}
}
return result;
} else {
return [];
}
};
Binding.prototype.resolveObjectsAndProperties = function(source, propsArray) {
var result = [];
var i;
var propsArrayLength = propsArray.length;
var currentObject = source;
var objProp = "";
var currentObjectChanged = false;
for (i = 0; i < propsArrayLength; i++) {
objProp = propsArray[i];
if (propsArray[i] === bc.bindingValueKey) {
currentObjectChanged = true;
}
if (propsArray[i] === bc.parentValueKey || propsArray[i].indexOf(bc.parentsValueKey) === 0) {
var parentView = this.getParentView(this.target.get(), propsArray[i]).view;
if (parentView) {
currentObject = parentView.bindingContext;
} else {
var targetInstance = this.target.get();
targetInstance.off(viewModule.View.loadedEvent, this.loadedHandlerVisualTreeBinding, this);
targetInstance.on(viewModule.View.loadedEvent, this.loadedHandlerVisualTreeBinding, this);
}
currentObjectChanged = true;
}
result.push({
instance: currentObject,
property: objProp
});
if (!currentObjectChanged && i < propsArrayLength - 1) {
currentObject = currentObject ? currentObject[propsArray[i]] : null;
}
currentObjectChanged = false;
}
return result;
};
Binding.prototype.addPropertyChangeListeners = function(source, sourceProperty) {
var objectsAndProperties = this.resolveObjectsAndProperties(source.get(), sourceProperty);
var objectsAndPropertiesLength = objectsAndProperties.length;
if (objectsAndPropertiesLength > 0) {
var i;
for (i = 0; i < objectsAndPropertiesLength; i++) {
var prop = objectsAndProperties[i].property;
var currentObject = objectsAndProperties[i].instance;
if (currentObject && !this.propertyChangeListeners[prop] && currentObject instanceof observable.Observable) {
weakEvents.addWeakEventListener(currentObject, observable.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
this.propertyChangeListeners[prop] = currentObject;
}
}
}
};
Binding.prototype.unbind = function() {
if (!this.source) {
return;
}
var i;
var propertyChangeListenersKeys = Object.keys(this.propertyChangeListeners);
for (i = 0; i < propertyChangeListenersKeys.length; i++) {
weakEvents.removeWeakEventListener(this.propertyChangeListeners[propertyChangeListenersKeys[i]], observable.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
delete this.propertyChangeListeners[propertyChangeListenersKeys[i]];
}
if (this.source) {
this.source.clear();
}
if (this.sourceOptions) {
this.sourceOptions.instance.clear();
this.sourceOptions = undefined;
}
if (this.targetOptions) {
this.targetOptions = undefined;
}
this.sourcePropertiesArray = undefined;
};
Binding.prototype.prepareExpressionForUpdate = function() {
var escapedSourceProperty = utils.escapeRegexSymbols(this.options.sourceProperty);
var expRegex = new RegExp(escapedSourceProperty, "g");
var resultExp = this.options.expression.replace(expRegex, bc.newPropertyValueKey);
return resultExp;
};
Binding.prototype.updateTwoWay = function(value) {
if (this.updating) {
return;
}
if (this.options.twoWay) {
if (this.options.expression) {
var changedModel = {};
changedModel[bc.bindingValueKey] = value;
changedModel[bc.newPropertyValueKey] = value;
var sourcePropertyName = "";
if (this.sourceOptions) {
sourcePropertyName = this.sourceOptions.property;
} else if (typeof this.options.sourceProperty === "string" && this.options.sourceProperty.indexOf(".") === -1) {
sourcePropertyName = this.options.sourceProperty;
}
if (sourcePropertyName !== "") {
changedModel[sourcePropertyName] = value;
}
var updateExpression = this.prepareExpressionForUpdate();
this.prepareContextForExpression(changedModel, updateExpression);
var expressionValue = this._getExpressionValue(updateExpression, true, changedModel);
if (expressionValue instanceof Error) {
trace.write(expressionValue.message, trace.categories.Binding, trace.messageType.error);
} else {
this.updateSource(expressionValue);
}
} else {
this.updateSource(value);
}
}
};
Binding.prototype._getExpressionValue = function(expression, isBackConvert, changedModel) {
try {
ensureExpressions();
var exp = expressions.PolymerExpressions.getExpression(expression);
if (exp) {
var context = this.source && this.source.get && this.source.get() || global;
var model = {};
ensureApplication();
for (var prop in application.resources) {
if (application.resources.hasOwnProperty(prop) && !context.hasOwnProperty(prop)) {
context[prop] = application.resources[prop];
}
}
this.prepareContextForExpression(context, expression);
model[contextKey] = context;
return exp.getValue(model, isBackConvert, changedModel ? changedModel : model);
}
return new Error(expression + " is not a valid expression.");
} catch (e) {
var errorMessage = "Run-time error occured in file: " + e.sourceURL + " at line: " + e.line + " and column: " + e.column;
return new Error(errorMessage);
}
};
Binding.prototype.onSourcePropertyChanged = function(data) {
if (this.options.expression) {
var expressionValue = this._getExpressionValue(this.options.expression, false, undefined);
if (expressionValue instanceof Error) {
trace.write(expressionValue.message, trace.categories.Binding, trace.messageType.error);
} else {
this.updateTarget(expressionValue);
}
} else {
var propIndex = this.getSourceProperties().indexOf(data.propertyName);
if (propIndex > -1) {
var props = this.getSourceProperties().slice(propIndex + 1);
var propsLength = props.length;
if (propsLength > 0) {
var value = data.value;
var i;
for (i = 0; i < propsLength; i++) {
value = value[props[i]];
}
this.updateTarget(value);
} else if (data.propertyName === this.sourceOptions.property) {
this.updateTarget(data.value);
}
}
}
var sourceProps = Binding.getProperties(this.options.sourceProperty);
var sourcePropsLength = sourceProps.length;
var changedPropertyIndex = sourceProps.indexOf(data.propertyName);
if (changedPropertyIndex > -1) {
var probablyChangedObject = this.propertyChangeListeners[sourceProps[changedPropertyIndex + 1]];
if (probablyChangedObject && probablyChangedObject !== data.object[sourceProps[changedPropertyIndex]]) {
for (i = sourcePropsLength - 1; i > changedPropertyIndex; i--) {
weakEvents.removeWeakEventListener(this.propertyChangeListeners[sourceProps[i]], observable.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
delete this.propertyChangeListeners[sourceProps[i]];
}
var newProps = sourceProps.slice(changedPropertyIndex + 1);
this.addPropertyChangeListeners(new WeakRef(data.object[sourceProps[changedPropertyIndex]]), newProps);
}
}
};
Binding.prototype.prepareContextForExpression = function(model, expression) {
var parentViewAndIndex;
var parentView;
if (expression.indexOf(bc.bindingValueKey) > -1) {
model[bc.bindingValueKey] = model;
}
if (expression.indexOf(bc.parentValueKey) > -1) {
parentView = this.getParentView(this.target.get(), bc.parentValueKey).view;
if (parentView) {
model[bc.parentValueKey] = parentView.bindingContext;
}
}
var parentsArray = expression.match(bindingBuilder.parentsRegex);
if (parentsArray) {
var i;
for (i = 0; i < parentsArray.length; i++) {
parentViewAndIndex = this.getParentView(this.target.get(), parentsArray[i]);
if (parentViewAndIndex.view) {
model[bc.parentsValueKey] = model[bc.parentsValueKey] || {};
model[bc.parentsValueKey][parentViewAndIndex.index] = parentViewAndIndex.view.bindingContext;
}
}
}
};
Binding.prototype.getSourcePropertyValue = function() {
if (this.options.expression) {
var changedModel = {};
changedModel[bc.bindingValueKey] = this.source.get();
var expressionValue = this._getExpressionValue(this.options.expression, false, changedModel);
if (expressionValue instanceof Error) {
trace.write(expressionValue.message, trace.categories.Binding, trace.messageType.error);
} else {
return expressionValue;
}
}
if (!this.sourceOptions) {
this.sourceOptions = this.resolveOptions(this.source, this.getSourceProperties());
}
var value;
if (this.sourceOptions) {
var sourceOptionsInstance = this.sourceOptions.instance.get();
if (this.sourceOptions.property === bc.bindingValueKey) {
value = sourceOptionsInstance;
} else if (sourceOptionsInstance instanceof observable.Observable) {
value = sourceOptionsInstance.get(this.sourceOptions.property);
} else if (sourceOptionsInstance && this.sourceOptions.property && this.sourceOptions.property in sourceOptionsInstance) {
value = sourceOptionsInstance[this.sourceOptions.property];
}
}
return value;
};
Binding.prototype.updateTarget = function(value) {
if (this.updating || (!this.target || !this.target.get())) {
return;
}
if (!this.targetOptions) {
this.targetOptions = this.resolveOptions(this.target, Binding.getProperties(this.options.targetProperty));
}
this.updateOptions(this.targetOptions, value);
};
Binding.prototype.updateSource = function(value) {
if (this.updating || (!this.source || !this.source.get())) {
return;
}
if (!this.sourceOptions) {
this.sourceOptions = this.resolveOptions(this.source, this.getSourceProperties());
}
this.updateOptions(this.sourceOptions, value);
};
Binding.prototype.getParentView = function(target, property) {
if (!target || !(target instanceof viewModule.View)) {
return {
view: null,
index: null
};
}
var result;
if (property === bc.parentValueKey) {
result = target.parent;
}
if (property.indexOf(bc.parentsValueKey) === 0) {
result = target.parent;
var indexParams = paramsRegex.exec(property);
var index;
if (indexParams && indexParams.length > 1) {
index = indexParams[2];
}
if (!isNaN(index)) {
var indexAsInt = parseInt(index);
while (indexAsInt > 0) {
result = result.parent;
indexAsInt--;
}
} else if (types.isString(index)) {
while (result && result.typeName !== index) {
result = result.parent;
}
}
}
return {
view: result,
index: index
};
};
Binding.prototype.resolveOptions = function(obj, properties) {
var objectsAndProperties = this.resolveObjectsAndProperties(obj.get(), properties);
if (objectsAndProperties.length > 0) {
var resolvedObj = objectsAndProperties[objectsAndProperties.length - 1].instance;
var prop = objectsAndProperties[objectsAndProperties.length - 1].property;
if (resolvedObj) {
return {
instance: new WeakRef(resolvedObj),
property: prop
};
}
}
return null;
};
Binding.prototype.updateOptions = function(options, value) {
var optionsInstance;
if (options && options.instance) {
optionsInstance = options.instance.get();
}
if (!optionsInstance) {
return;
}
this.updating = true;
try {
if (optionsInstance instanceof Bindable && viewModule.isEventOrGesture(options.property, optionsInstance) && types.isFunction(value)) {
optionsInstance.off(options.property, null, optionsInstance.bindingContext);
optionsInstance.on(options.property, value, optionsInstance.bindingContext);
} else {
ensureSpecialProperties();
var specialSetter = specialProperties.getSpecialPropertySetter(options.property);
if (specialSetter) {
specialSetter(optionsInstance, value);
} else {
if (optionsInstance instanceof observable.Observable) {
optionsInstance.set(options.property, value);
} else {
optionsInstance[options.property] = value;
}
}
}
} catch (ex) {
trace.write("Binding error while setting property " + options.property + " of " + optionsInstance + ": " + ex, trace.categories.Binding, trace.messageType.error);
}
this.updating = false;
};
return Binding;
}();
exports.Binding = Binding;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(13);
var handlersForEventName = new Map();
var sourcesMap = new WeakMap();
var TargetHandlerPair = function() {
function TargetHandlerPair(target, handler) {
this.tagetRef = new WeakRef(target);
this.handler = handler;
}
return TargetHandlerPair;
}();
function getHandlerForEventName(eventName) {
var handler = handlersForEventName.get(eventName);
if (!handler) {
handler = function(eventData) {
var source = eventData.object;
var sourceEventMap = sourcesMap.get(source);
if (!sourceEventMap) {
source.removeEventListener(eventName, handlersForEventName.get(eventName));
return;
}
var targetHandlerPairList = sourceEventMap.get(eventName);
if (!targetHandlerPairList) {
return;
}
var deadPairsIndexes = [];
for (var i = 0; i < targetHandlerPairList.length; i++) {
var pair = targetHandlerPairList[i];
var target = pair.tagetRef.get();
if (target) {
pair.handler.call(target, eventData);
} else {
deadPairsIndexes.push(i);
}
}
if (deadPairsIndexes.length === targetHandlerPairList.length) {
source.removeEventListener(eventName, handlersForEventName.get(eventName));
sourceEventMap.delete(eventName);
} else {
for (var j = deadPairsIndexes.length - 1; j >= 0; j--) {
targetHandlerPairList.splice(deadPairsIndexes[j], 1);
}
}
};
handlersForEventName.set(eventName, handler);
}
return handler;
}
function validateArgs(source, eventName, handler, target) {
if (types.isNullOrUndefined(source)) {
throw new Error("source is null or undefined");
}
if (types.isNullOrUndefined(target)) {
throw new Error("target is null or undefined");
}
if (!types.isString(eventName)) {
throw new Error("eventName is not a string");
}
if (!types.isFunction(handler)) {
throw new Error("handler is not a function");
}
}
function addWeakEventListener(source, eventName, handler, target) {
validateArgs(source, eventName, handler, target);
var shouldAttach = false;
var sourceEventMap = sourcesMap.get(source);
if (!sourceEventMap) {
sourceEventMap = new Map();
sourcesMap.set(source, sourceEventMap);
shouldAttach = true;
}
var pairList = sourceEventMap.get(eventName);
if (!pairList) {
pairList = new Array();
sourceEventMap.set(eventName, pairList);
shouldAttach = true;
}
pairList.push(new TargetHandlerPair(target, handler));
if (shouldAttach) {
source.addEventListener(eventName, getHandlerForEventName(eventName));
}
}
exports.addWeakEventListener = addWeakEventListener;
function removeWeakEventListener(source, eventName, handler, target) {
validateArgs(source, eventName, handler, target);
var handlerForEventWithName = handlersForEventName.get(eventName);
if (!handlerForEventWithName) {
return;
}
var sourceEventMap = sourcesMap.get(source);
if (!sourceEventMap) {
return;
}
var targetHandlerPairList = sourceEventMap.get(eventName);
if (!targetHandlerPairList) {
return;
}
var targetHandlerPairsToRemove = [];
for (var i = 0; i < targetHandlerPairList.length; i++) {
var pair = targetHandlerPairList[i];
var registeredTarget = pair.tagetRef.get();
if (!registeredTarget || registeredTarget === target && handler === pair.handler) {
targetHandlerPairsToRemove.push(i);
}
}
if (targetHandlerPairsToRemove.length === targetHandlerPairList.length) {
source.removeEventListener(eventName, handlerForEventWithName);
sourceEventMap.delete(eventName);
} else {
for (var j = targetHandlerPairsToRemove.length - 1; j >= 0; j--) {
targetHandlerPairList.splice(targetHandlerPairsToRemove[j], 1);
}
}
}
exports.removeWeakEventListener = removeWeakEventListener;
}, function(module, exports) {
var expressionSymbolsRegex = /[\+\-\*\/%\?:<>=!\|&\(\)^~]/;
var bindingConstants;
(function(bindingConstants) {
bindingConstants.sourceProperty = "sourceProperty";
bindingConstants.targetProperty = "targetProperty";
bindingConstants.expression = "expression";
bindingConstants.twoWay = "twoWay";
bindingConstants.source = "source";
bindingConstants.bindingValueKey = "$value";
bindingConstants.parentValueKey = "$parent";
bindingConstants.parentsValueKey = "$parents";
bindingConstants.newPropertyValueKey = "$newPropertyValue";
})(bindingConstants = exports.bindingConstants || (exports.bindingConstants = {}));
var hasEqualSignRegex = /=+/;
var equalSignComparisionOperatorsRegex = /(==|===|>=|<=|!=|!==)/;
exports.parentsRegex = /\$parents\s*\[\s*(['"]*)\w*\1\s*\]/g;
function isNamedParam(value) {
var equalSignIndex = value.search(hasEqualSignRegex);
if (equalSignIndex > -1) {
var equalSignSurround = value.substr(equalSignIndex > 0 ? equalSignIndex - 1 : 0, 3);
if (equalSignSurround.search(equalSignComparisionOperatorsRegex) === -1) {
return true;
}
}
return false;
}
function areNamedParams(params) {
var i;
for (i = 0; i < params.length; i++) {
if (isNamedParam(params[i])) {
return true;
}
}
return false;
}
var namedParamConstants = {
propName: "propName",
propValue: "propValue"
};
function getPropertyNameValuePair(param, knownOptions, callback) {
var nameValuePair = {};
var propertyName = param.substr(0, param.indexOf("=")).trim();
var propertyValue = param.substr(param.indexOf("=") + 1).trim();
if (knownOptions) {
if (!propertyName) {
propertyName = knownOptions.defaultProperty;
} else {
propertyName = propertyName in knownOptions ? propertyName : null;
}
}
if (propertyName) {
if (callback) {
nameValuePair = callback(propertyName, propertyValue);
} else {
nameValuePair[namedParamConstants.propName] = propertyName;
nameValuePair[namedParamConstants.propValue] = propertyValue;
}
return nameValuePair;
}
return null;
}
function parseNamedProperties(parameterList, knownOptions, callback) {
var result = {};
var i;
for (i = 0; i < parameterList.length; i++) {
var nameValuePair = getPropertyNameValuePair(parameterList[i], knownOptions, callback);
if (nameValuePair) {
result[nameValuePair[namedParamConstants.propName]] = nameValuePair[namedParamConstants.propValue];
}
}
return result;
}
function getParamsArray(value) {
var result = [];
var i;
var skipComma = 0;
var indexReached = 0;
var singleQuoteBlock, doubleQuoteBlock = false;
for (i = 0; i < value.length; i++) {
if (value[i] === '"') {
doubleQuoteBlock = !doubleQuoteBlock;
}
if (value[i] === "'") {
singleQuoteBlock = !singleQuoteBlock;
}
if (value[i] === "(" || value[i] === "[") {
skipComma++;
}
if (value[i] === ")" || value[i] === "]") {
skipComma--;
}
if (value[i] === "," && skipComma === 0 && !(singleQuoteBlock || doubleQuoteBlock)) {
result.push(value.substr(indexReached, i - indexReached));
indexReached = i + 1;
}
}
result.push(value.substr(indexReached));
return result;
}
function isExpression(expression) {
if (expression.search(expressionSymbolsRegex) > -1) {
var parentsMatches = expression.match(exports.parentsRegex);
if (parentsMatches) {
var restOfExpression = expression.substr(expression.indexOf(parentsMatches[0]) + parentsMatches[0].length);
if (!(restOfExpression.search(expressionSymbolsRegex) > -1)) {
return false;
}
}
return true;
}
return false;
}
function getBindingOptions(name, value) {
var namedParams = [];
var params = getParamsArray(value);
if (!areNamedParams(params)) {
if (params.length === 1) {
var trimmedValue = params[0].trim();
var sourceProp;
if (isExpression(trimmedValue)) {
sourceProp = bindingConstants.bindingValueKey;
namedParams.push(bindingConstants.expression + " = " + trimmedValue);
} else {
sourceProp = trimmedValue;
}
namedParams.push(bindingConstants.sourceProperty + " = " + sourceProp);
namedParams.push(bindingConstants.twoWay + " = true");
} else {
namedParams.push(bindingConstants.sourceProperty + " = " + params[0].trim());
namedParams.push(bindingConstants.expression + " = " + params[1].trim());
var twoWay = params[2] ? params[2].toLowerCase().trim() === "true" : true;
namedParams.push(bindingConstants.twoWay + " = " + twoWay);
}
} else {
namedParams = params;
}
var bindingPropertyHandler = function(prop, value) {
var result = {};
result[namedParamConstants.propName] = prop;
if (prop === bindingConstants.twoWay) {
if (value === "true") {
result[namedParamConstants.propValue] = true;
} else {
result[namedParamConstants.propValue] = false;
}
} else {
result[namedParamConstants.propValue] = value;
}
return result;
};
var bindingOptionsParameters = parseNamedProperties(namedParams, xmlBindingProperties, bindingPropertyHandler);
var bindOptions = {
targetProperty: name
};
for (var prop in bindingOptionsParameters) {
if (bindingOptionsParameters.hasOwnProperty(prop)) {
bindOptions[prop] = bindingOptionsParameters[prop];
}
}
if (bindOptions[bindingConstants.twoWay] === undefined) {
bindOptions[bindingConstants.twoWay] = true;
}
return bindOptions;
}
exports.getBindingOptions = getBindingOptions;
var xmlBindingProperties = {
sourceProperty: true,
expression: true,
twoWay: true,
source: true,
defaultProperty: bindingConstants.sourceProperty
};
}, function(module, exports, __webpack_require__) {
var esprima = __webpack_require__(53).esprima;
var Path = __webpack_require__(54).Path;
(function(global) {
"use strict";
var expressionParseCache = Object.create(null);
function getExpression(expressionText) {
var expression = expressionParseCache[expressionText];
if (!expression) {
var delegate = new ASTDelegate();
esprima.parse(expressionText, delegate);
expression = new Expression(delegate);
expressionParseCache[expressionText] = expression;
}
return expression;
}
function Literal(value) {
this.value = value;
this.valueFn_ = undefined;
}
Literal.prototype = {
valueFn: function() {
if (!this.valueFn_) {
var value = this.value;
this.valueFn_ = function() {
return value;
};
}
return this.valueFn_;
}
};
function IdentPath(name) {
this.name = name;
this.path = Path.get(name);
}
IdentPath.prototype = {
valueFn: function() {
if (!this.valueFn_) {
var name = this.name;
var path = this.path;
this.valueFn_ = function(model, observer, changedModel) {
if (observer) observer.addPath(model, path);
if (changedModel) {
var result = path.getValueFrom(changedModel);
if (result !== undefined) {
return result;
}
}
return path.getValueFrom(model);
};
}
return this.valueFn_;
},
setValue: function(model, newValue) {
if (this.path.length == 1) {
model = findScope(model, this.path[0]);
}
return this.path.setValueFrom(model, newValue);
}
};
function MemberExpression(object, property, accessor) {
this.computed = accessor == "[";
this.dynamicDeps = typeof object == "function" || object.dynamicDeps || this.computed && !(property instanceof Literal);
this.simplePath = !this.dynamicDeps && (property instanceof IdentPath || property instanceof Literal) && (object instanceof MemberExpression || object instanceof IdentPath);
this.object = this.simplePath ? object : getFn(object);
this.property = !this.computed || this.simplePath ? property : getFn(property);
}
MemberExpression.prototype = {
get fullPath() {
if (!this.fullPath_) {
var parts = this.object instanceof MemberExpression ? this.object.fullPath.slice() : [ this.object.name ];
parts.push(this.property instanceof IdentPath ? this.property.name : this.property.value);
this.fullPath_ = Path.get(parts);
}
return this.fullPath_;
},
valueFn: function() {
if (!this.valueFn_) {
var object = this.object;
if (this.simplePath) {
var path = this.fullPath;
this.valueFn_ = function(model, observer) {
if (observer) observer.addPath(model, path);
return path.getValueFrom(model);
};
} else if (!this.computed) {
var path = Path.get(this.property.name);
this.valueFn_ = function(model, observer, filterRegistry) {
var context = object(model, observer, filterRegistry);
if (observer) observer.addPath(context, path);
return path.getValueFrom(context);
};
} else {
var property = this.property;
this.valueFn_ = function(model, observer, filterRegistry) {
var context = object(model, observer, filterRegistry);
var propName = property(model, observer, filterRegistry);
if (observer) observer.addPath(context, [ propName ]);
return context ? context[propName] : undefined;
};
}
}
return this.valueFn_;
},
setValue: function(model, newValue) {
if (this.simplePath) {
this.fullPath.setValueFrom(model, newValue);
return newValue;
}
var object = this.object(model);
var propName = this.property instanceof IdentPath ? this.property.name : this.property(model);
return object[propName] = newValue;
}
};
function Filter(name, args) {
this.name = name;
this.args = [];
for (var i = 0; i < args.length; i++) {
this.args[i] = getFn(args[i]);
}
}
Filter.prototype = {
transform: function(model, observer, filterRegistry, toModelDirection, initialArgs) {
var fn = filterRegistry[this.name];
var context = model;
if (fn) {
context = undefined;
} else {
fn = context[this.name];
if (!fn) {
console.error("Cannot find function or filter: " + this.name);
return;
}
}
if (toModelDirection) {
fn = fn.toModel;
} else if (typeof fn.toView == "function") {
fn = fn.toView;
}
if (typeof fn != "function") {
console.error("Cannot find function or filter: " + this.name);
return;
}
var args = initialArgs || [];
for (var i = 0; i < this.args.length; i++) {
args.push(getFn(this.args[i])(model, observer, filterRegistry));
}
return fn.apply(context, args);
}
};
function notImplemented() {
throw Error("Not Implemented");
}
var unaryOperators = {
"+": function(v) {
return +v;
},
"-": function(v) {
return -v;
},
"!": function(v) {
return !v;
}
};
var binaryOperators = {
"+": function(l, r) {
return l + r;
},
"-": function(l, r) {
return l - r;
},
"*": function(l, r) {
return l * r;
},
"/": function(l, r) {
return l / r;
},
"%": function(l, r) {
return l % r;
},
"<": function(l, r) {
return l < r;
},
">": function(l, r) {
return l > r;
},
"<=": function(l, r) {
return l <= r;
},
">=": function(l, r) {
return l >= r;
},
"==": function(l, r) {
return l == r;
},
"!=": function(l, r) {
return l != r;
},
"===": function(l, r) {
return l === r;
},
"!==": function(l, r) {
return l !== r;
},
"&&": function(l, r) {
return l && r;
},
"||": function(l, r) {
return l || r;
}
};
function getFn(arg) {
return typeof arg == "function" ? arg : arg.valueFn();
}
function ASTDelegate() {
this.expression = null;
this.filters = [];
this.deps = {};
this.currentPath = undefined;
this.scopeIdent = undefined;
this.indexIdent = undefined;
this.dynamicDeps = false;
}
ASTDelegate.prototype = {
createUnaryExpression: function(op, argument) {
if (!unaryOperators[op]) throw Error("Disallowed operator: " + op);
argument = getFn(argument);
return function(model, observer, filterRegistry) {
return unaryOperators[op](argument(model, observer, filterRegistry));
};
},
createBinaryExpression: function(op, left, right) {
if (!binaryOperators[op]) throw Error("Disallowed operator: " + op);
left = getFn(left);
right = getFn(right);
switch (op) {
case "||":
this.dynamicDeps = true;
return function(model, observer, filterRegistry) {
return left(model, observer, filterRegistry) || right(model, observer, filterRegistry);
};

case "&&":
this.dynamicDeps = true;
return function(model, observer, filterRegistry) {
return left(model, observer, filterRegistry) && right(model, observer, filterRegistry);
};
}
return function(model, observer, filterRegistry) {
return binaryOperators[op](left(model, observer, filterRegistry), right(model, observer, filterRegistry));
};
},
createConditionalExpression: function(test, consequent, alternate) {
test = getFn(test);
consequent = getFn(consequent);
alternate = getFn(alternate);
this.dynamicDeps = true;
return function(model, observer, filterRegistry) {
return test(model, observer, filterRegistry) ? consequent(model, observer, filterRegistry) : alternate(model, observer, filterRegistry);
};
},
createIdentifier: function(name) {
var ident = new IdentPath(name);
ident.type = "Identifier";
return ident;
},
createMemberExpression: function(accessor, object, property) {
var ex = new MemberExpression(object, property, accessor);
if (ex.dynamicDeps) this.dynamicDeps = true;
return ex;
},
createCallExpression: function(expression, args) {
if (!(expression instanceof IdentPath)) throw Error("Only identifier function invocations are allowed");
var filter = new Filter(expression.name, args);
return function(model, observer, filterRegistry) {
return filter.transform(model, observer, filterRegistry, false);
};
},
createLiteral: function(token) {
return new Literal(token.value);
},
createArrayExpression: function(elements) {
for (var i = 0; i < elements.length; i++) elements[i] = getFn(elements[i]);
return function(model, observer, filterRegistry) {
var arr = [];
for (var i = 0; i < elements.length; i++) arr.push(elements[i](model, observer, filterRegistry));
return arr;
};
},
createProperty: function(kind, key, value) {
return {
key: key instanceof IdentPath ? key.name : key.value,
value: value
};
},
createObjectExpression: function(properties) {
for (var i = 0; i < properties.length; i++) properties[i].value = getFn(properties[i].value);
return function(model, observer, filterRegistry) {
var obj = {};
for (var i = 0; i < properties.length; i++) obj[properties[i].key] = properties[i].value(model, observer, filterRegistry);
return obj;
};
},
createFilter: function(name, args) {
this.filters.push(new Filter(name, args));
},
createAsExpression: function(expression, scopeIdent) {
this.expression = expression;
this.scopeIdent = scopeIdent;
},
createInExpression: function(scopeIdent, indexIdent, expression) {
this.expression = expression;
this.scopeIdent = scopeIdent;
this.indexIdent = indexIdent;
},
createTopLevel: function(expression) {
this.expression = expression;
},
createThisExpression: notImplemented
};
function Expression(delegate) {
this.scopeIdent = delegate.scopeIdent;
this.indexIdent = delegate.indexIdent;
if (!delegate.expression) throw Error("No expression found.");
this.expression = delegate.expression;
getFn(this.expression);
this.filters = delegate.filters;
this.dynamicDeps = delegate.dynamicDeps;
}
Expression.prototype = {
getValue: function(model, isBackConvert, changedModel, observer) {
var value = getFn(this.expression)(model.context, observer, changedModel);
for (var i = 0; i < this.filters.length; i++) {
value = this.filters[i].transform(model.context, observer, model.context, isBackConvert, [ value ]);
}
return value;
},
setValue: function(model, newValue, filterRegistry) {
var count = this.filters ? this.filters.length : 0;
while (count-- > 0) {
newValue = this.filters[count].transform(model, undefined, filterRegistry, true, [ newValue ]);
}
if (this.expression.setValue) return this.expression.setValue(model, newValue);
}
};
function convertStylePropertyName(name) {
return String(name).replace(/[A-Z]/g, function(c) {
return "-" + c.toLowerCase();
});
}
var parentScopeName = "@" + Math.random().toString(36).slice(2);
function findScope(model, prop) {
while (model[parentScopeName] && !Object.prototype.hasOwnProperty.call(model, prop)) {
model = model[parentScopeName];
}
return model;
}
function isLiteralExpression(pathString) {
switch (pathString) {
case "":
return false;

case "false":
case "null":
case "true":
return true;
}
if (!isNaN(Number(pathString))) return true;
return false;
}
function PolymerExpressions() {}
PolymerExpressions.prototype = {
styleObject: function(value) {
var parts = [];
for (var key in value) {
parts.push(convertStylePropertyName(key) + ": " + value[key]);
}
return parts.join("; ");
},
tokenList: function(value) {
var tokens = [];
for (var key in value) {
if (value[key]) tokens.push(key);
}
return tokens.join(" ");
},
prepareInstancePositionChanged: function(template) {
var indexIdent = template.polymerExpressionIndexIdent_;
if (!indexIdent) return;
return function(templateInstance, index) {
templateInstance.model[indexIdent] = index;
};
},
prepareInstanceModel: function(template) {
var scopeName = template.polymerExpressionScopeIdent_;
if (!scopeName) return;
var parentScope = template.templateInstance ? template.templateInstance.model : template.model;
var indexName = template.polymerExpressionIndexIdent_;
return function(model) {
return createScopeObject(parentScope, model, scopeName, indexName);
};
}
};
var createScopeObject = "__proto__" in {} ? function(parentScope, model, scopeName, indexName) {
var scope = {};
scope[scopeName] = model;
scope[indexName] = undefined;
scope[parentScopeName] = parentScope;
scope.__proto__ = parentScope;
return scope;
} : function(parentScope, model, scopeName, indexName) {
var scope = Object.create(parentScope);
Object.defineProperty(scope, scopeName, {
value: model,
configurable: true,
writable: true
});
Object.defineProperty(scope, indexName, {
value: undefined,
configurable: true,
writable: true
});
Object.defineProperty(scope, parentScopeName, {
value: parentScope,
configurable: true,
writable: true
});
return scope;
};
global.PolymerExpressions = PolymerExpressions;
PolymerExpressions.getExpression = getExpression;
})(module.exports);
}, function(module, exports) {
(function(global) {
"use strict";
var Token, TokenName, Syntax, Messages, source, index, length, delegate, lookahead, state;
Token = {
BooleanLiteral: 1,
EOF: 2,
Identifier: 3,
Keyword: 4,
NullLiteral: 5,
NumericLiteral: 6,
Punctuator: 7,
StringLiteral: 8
};
TokenName = {};
TokenName[Token.BooleanLiteral] = "Boolean";
TokenName[Token.EOF] = "<end>";
TokenName[Token.Identifier] = "Identifier";
TokenName[Token.Keyword] = "Keyword";
TokenName[Token.NullLiteral] = "Null";
TokenName[Token.NumericLiteral] = "Numeric";
TokenName[Token.Punctuator] = "Punctuator";
TokenName[Token.StringLiteral] = "String";
Syntax = {
ArrayExpression: "ArrayExpression",
BinaryExpression: "BinaryExpression",
CallExpression: "CallExpression",
ConditionalExpression: "ConditionalExpression",
EmptyStatement: "EmptyStatement",
ExpressionStatement: "ExpressionStatement",
Identifier: "Identifier",
Literal: "Literal",
LabeledStatement: "LabeledStatement",
LogicalExpression: "LogicalExpression",
MemberExpression: "MemberExpression",
ObjectExpression: "ObjectExpression",
Program: "Program",
Property: "Property",
ThisExpression: "ThisExpression",
UnaryExpression: "UnaryExpression"
};
Messages = {
UnexpectedToken: "Unexpected token %0",
UnknownLabel: "Undefined label '%0'",
Redeclaration: "%0 '%1' has already been declared"
};
function assert(condition, message) {
if (!condition) {
throw new Error("ASSERT: " + message);
}
}
function isDecimalDigit(ch) {
return ch >= 48 && ch <= 57;
}
function isWhiteSpace(ch) {
return ch === 32 || ch === 9 || ch === 11 || ch === 12 || ch === 160 || ch >= 5760 && " ᠎             　\ufeff".indexOf(String.fromCharCode(ch)) > 0;
}
function isLineTerminator(ch) {
return ch === 10 || ch === 13 || ch === 8232 || ch === 8233;
}
function isIdentifierStart(ch) {
return ch === 36 || ch === 95 || ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
}
function isIdentifierPart(ch) {
return ch === 36 || ch === 95 || ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 48 && ch <= 57;
}
function isKeyword(id) {
return id === "this";
}
function skipWhitespace() {
while (index < length && isWhiteSpace(source.charCodeAt(index))) {
++index;
}
}
function getIdentifier() {
var start, ch;
start = index++;
while (index < length) {
ch = source.charCodeAt(index);
if (isIdentifierPart(ch)) {
++index;
} else {
break;
}
}
return source.slice(start, index);
}
function scanIdentifier() {
var start, id, type;
start = index;
id = getIdentifier();
if (id.length === 1) {
type = Token.Identifier;
} else if (isKeyword(id)) {
type = Token.Keyword;
} else if (id === "null") {
type = Token.NullLiteral;
} else if (id === "true" || id === "false") {
type = Token.BooleanLiteral;
} else {
type = Token.Identifier;
}
return {
type: type,
value: id,
range: [ start, index ]
};
}
function scanPunctuator() {
var start = index, code = source.charCodeAt(index), code2, ch1 = source[index], ch2;
switch (code) {
case 46:
case 40:
case 41:
case 59:
case 44:
case 123:
case 125:
case 91:
case 93:
case 58:
case 63:
++index;
return {
type: Token.Punctuator,
value: String.fromCharCode(code),
range: [ start, index ]
};

default:
code2 = source.charCodeAt(index + 1);
if (code2 === 61) {
switch (code) {
case 37:
case 38:
case 42:
case 43:
case 45:
case 47:
case 60:
case 62:
case 124:
index += 2;
return {
type: Token.Punctuator,
value: String.fromCharCode(code) + String.fromCharCode(code2),
range: [ start, index ]
};

case 33:
case 61:
index += 2;
if (source.charCodeAt(index) === 61) {
++index;
}
return {
type: Token.Punctuator,
value: source.slice(start, index),
range: [ start, index ]
};

default:
break;
}
}
break;
}
ch2 = source[index + 1];
if (ch1 === ch2 && "&|".indexOf(ch1) >= 0) {
index += 2;
return {
type: Token.Punctuator,
value: ch1 + ch2,
range: [ start, index ]
};
}
if ("<>=!+-*%&|^/".indexOf(ch1) >= 0) {
++index;
return {
type: Token.Punctuator,
value: ch1,
range: [ start, index ]
};
}
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
function scanNumericLiteral() {
var number, start, ch;
ch = source[index];
assert(isDecimalDigit(ch.charCodeAt(0)) || ch === ".", "Numeric literal must start with a decimal digit or a decimal point");
start = index;
number = "";
if (ch !== ".") {
number = source[index++];
ch = source[index];
if (number === "0") {
if (ch && isDecimalDigit(ch.charCodeAt(0))) {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
}
while (isDecimalDigit(source.charCodeAt(index))) {
number += source[index++];
}
ch = source[index];
}
if (ch === ".") {
number += source[index++];
while (isDecimalDigit(source.charCodeAt(index))) {
number += source[index++];
}
ch = source[index];
}
if (ch === "e" || ch === "E") {
number += source[index++];
ch = source[index];
if (ch === "+" || ch === "-") {
number += source[index++];
}
if (isDecimalDigit(source.charCodeAt(index))) {
while (isDecimalDigit(source.charCodeAt(index))) {
number += source[index++];
}
} else {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
}
if (isIdentifierStart(source.charCodeAt(index))) {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
return {
type: Token.NumericLiteral,
value: parseFloat(number),
range: [ start, index ]
};
}
function scanStringLiteral() {
var str = "", quote, start, ch, octal = false;
quote = source[index];
assert(quote === "'" || quote === '"', "String literal must starts with a quote");
start = index;
++index;
while (index < length) {
ch = source[index++];
if (ch === quote) {
quote = "";
break;
} else if (ch === "\\") {
ch = source[index++];
if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
switch (ch) {
case "n":
str += "\n";
break;

case "r":
str += "\r";
break;

case "t":
str += "	";
break;

case "b":
str += "\b";
break;

case "f":
str += "\f";
break;

case "v":
str += "\x0B";
break;

default:
str += ch;
break;
}
} else {
if (ch === "\r" && source[index] === "\n") {
++index;
}
}
} else if (isLineTerminator(ch.charCodeAt(0))) {
break;
} else {
str += ch;
}
}
if (quote !== "") {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
return {
type: Token.StringLiteral,
value: str,
octal: octal,
range: [ start, index ]
};
}
function isIdentifierName(token) {
return token.type === Token.Identifier || token.type === Token.Keyword || token.type === Token.BooleanLiteral || token.type === Token.NullLiteral;
}
function advance() {
var ch;
skipWhitespace();
if (index >= length) {
return {
type: Token.EOF,
range: [ index, index ]
};
}
ch = source.charCodeAt(index);
if (ch === 40 || ch === 41 || ch === 58) {
return scanPunctuator();
}
if (ch === 39 || ch === 34) {
return scanStringLiteral();
}
if (isIdentifierStart(ch)) {
return scanIdentifier();
}
if (ch === 46) {
if (isDecimalDigit(source.charCodeAt(index + 1))) {
return scanNumericLiteral();
}
return scanPunctuator();
}
if (isDecimalDigit(ch)) {
return scanNumericLiteral();
}
return scanPunctuator();
}
function lex() {
var token;
token = lookahead;
index = token.range[1];
lookahead = advance();
index = token.range[1];
return token;
}
function peek() {
var pos;
pos = index;
lookahead = advance();
index = pos;
}
function throwError(token, messageFormat) {
var error, args = Array.prototype.slice.call(arguments, 2), msg = messageFormat.replace(/%(\d)/g, function(whole, index) {
assert(index < args.length, "Message reference must be in range");
return args[index];
});
error = new Error(msg);
error.index = index;
error.description = msg;
throw error;
}
function throwUnexpected(token) {
throwError(token, Messages.UnexpectedToken, token.value);
}
function expect(value) {
var token = lex();
if (token.type !== Token.Punctuator || token.value !== value) {
throwUnexpected(token);
}
}
function match(value) {
return lookahead.type === Token.Punctuator && lookahead.value === value;
}
function matchKeyword(keyword) {
return lookahead.type === Token.Keyword && lookahead.value === keyword;
}
function consumeSemicolon() {
if (source.charCodeAt(index) === 59) {
lex();
return;
}
skipWhitespace();
if (match(";")) {
lex();
return;
}
if (lookahead.type !== Token.EOF && !match("}")) {
throwUnexpected(lookahead);
}
}
function parseArrayInitialiser() {
var elements = [];
expect("[");
while (!match("]")) {
if (match(",")) {
lex();
elements.push(null);
} else {
elements.push(parseExpression());
if (!match("]")) {
expect(",");
}
}
}
expect("]");
return delegate.createArrayExpression(elements);
}
function parseObjectPropertyKey() {
var token;
skipWhitespace();
token = lex();
if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
return delegate.createLiteral(token);
}
return delegate.createIdentifier(token.value);
}
function parseObjectProperty() {
var token, key;
token = lookahead;
skipWhitespace();
if (token.type === Token.EOF || token.type === Token.Punctuator) {
throwUnexpected(token);
}
key = parseObjectPropertyKey();
expect(":");
return delegate.createProperty("init", key, parseExpression());
}
function parseObjectInitialiser() {
var properties = [];
expect("{");
while (!match("}")) {
properties.push(parseObjectProperty());
if (!match("}")) {
expect(",");
}
}
expect("}");
return delegate.createObjectExpression(properties);
}
function parseGroupExpression() {
var expr;
expect("(");
expr = parseExpression();
expect(")");
return expr;
}
function parsePrimaryExpression() {
var type, token, expr;
if (match("(")) {
return parseGroupExpression();
}
type = lookahead.type;
if (type === Token.Identifier) {
expr = delegate.createIdentifier(lex().value);
} else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
expr = delegate.createLiteral(lex());
} else if (type === Token.Keyword) {
if (matchKeyword("this")) {
lex();
expr = delegate.createThisExpression();
}
} else if (type === Token.BooleanLiteral) {
token = lex();
token.value = token.value === "true";
expr = delegate.createLiteral(token);
} else if (type === Token.NullLiteral) {
token = lex();
token.value = null;
expr = delegate.createLiteral(token);
} else if (match("[")) {
expr = parseArrayInitialiser();
} else if (match("{")) {
expr = parseObjectInitialiser();
}
if (expr) {
return expr;
}
throwUnexpected(lex());
}
function parseArguments() {
var args = [];
expect("(");
if (!match(")")) {
while (index < length) {
args.push(parseExpression());
if (match(")")) {
break;
}
expect(",");
}
}
expect(")");
return args;
}
function parseNonComputedProperty() {
var token;
token = lex();
if (!isIdentifierName(token)) {
throwUnexpected(token);
}
return delegate.createIdentifier(token.value);
}
function parseNonComputedMember() {
expect(".");
return parseNonComputedProperty();
}
function parseComputedMember() {
var expr;
expect("[");
expr = parseExpression();
expect("]");
return expr;
}
function parseLeftHandSideExpression() {
var expr, args, property;
expr = parsePrimaryExpression();
while (true) {
if (match("[")) {
property = parseComputedMember();
expr = delegate.createMemberExpression("[", expr, property);
} else if (match(".")) {
property = parseNonComputedMember();
expr = delegate.createMemberExpression(".", expr, property);
} else if (match("(")) {
args = parseArguments();
expr = delegate.createCallExpression(expr, args);
} else {
break;
}
}
return expr;
}
var parsePostfixExpression = parseLeftHandSideExpression;
function parseUnaryExpression() {
var token, expr;
if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
expr = parsePostfixExpression();
} else if (match("+") || match("-") || match("!")) {
token = lex();
expr = parseUnaryExpression();
expr = delegate.createUnaryExpression(token.value, expr);
} else if (matchKeyword("delete") || matchKeyword("void") || matchKeyword("typeof")) {
throwError({}, Messages.UnexpectedToken);
} else {
expr = parsePostfixExpression();
}
return expr;
}
function binaryPrecedence(token) {
var prec = 0;
if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
return 0;
}
switch (token.value) {
case "||":
prec = 1;
break;

case "&&":
prec = 2;
break;

case "==":
case "!=":
case "===":
case "!==":
prec = 6;
break;

case "<":
case ">":
case "<=":
case ">=":
case "instanceof":
prec = 7;
break;

case "in":
prec = 7;
break;

case "+":
case "-":
prec = 9;
break;

case "*":
case "/":
case "%":
prec = 11;
break;

default:
break;
}
return prec;
}
function parseBinaryExpression() {
var expr, token, prec, stack, right, operator, left, i;
left = parseUnaryExpression();
token = lookahead;
prec = binaryPrecedence(token);
if (prec === 0) {
return left;
}
token.prec = prec;
lex();
right = parseUnaryExpression();
stack = [ left, token, right ];
while ((prec = binaryPrecedence(lookahead)) > 0) {
while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {
right = stack.pop();
operator = stack.pop().value;
left = stack.pop();
expr = delegate.createBinaryExpression(operator, left, right);
stack.push(expr);
}
token = lex();
token.prec = prec;
stack.push(token);
expr = parseUnaryExpression();
stack.push(expr);
}
i = stack.length - 1;
expr = stack[i];
while (i > 1) {
expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
i -= 2;
}
return expr;
}
function parseConditionalExpression() {
var expr, consequent, alternate;
expr = parseBinaryExpression();
if (match("?")) {
lex();
consequent = parseConditionalExpression();
expect(":");
alternate = parseConditionalExpression();
expr = delegate.createConditionalExpression(expr, consequent, alternate);
}
return expr;
}
var parseExpression = parseConditionalExpression;
function parseFilter() {
var identifier, args;
identifier = lex();
if (identifier.type !== Token.Identifier) {
throwUnexpected(identifier);
}
args = match("(") ? parseArguments() : [];
return delegate.createFilter(identifier.value, args);
}
function parseFilters() {
while (match("|")) {
lex();
parseFilter();
}
}
function parseTopLevel() {
skipWhitespace();
peek();
var expr = parseExpression();
if (expr) {
if (lookahead.value === "," || lookahead.value == "in" && expr.type === Syntax.Identifier) {
parseInExpression(expr);
} else {
parseFilters();
if (lookahead.value === "as") {
parseAsExpression(expr);
} else {
delegate.createTopLevel(expr);
}
}
}
if (lookahead.type !== Token.EOF) {
throwUnexpected(lookahead);
}
}
function parseAsExpression(expr) {
lex();
var identifier = lex().value;
delegate.createAsExpression(expr, identifier);
}
function parseInExpression(identifier) {
var indexName;
if (lookahead.value === ",") {
lex();
if (lookahead.type !== Token.Identifier) throwUnexpected(lookahead);
indexName = lex().value;
}
lex();
var expr = parseExpression();
parseFilters();
delegate.createInExpression(identifier.name, indexName, expr);
}
function parse(code, inDelegate) {
delegate = inDelegate;
source = code;
index = 0;
length = source.length;
lookahead = null;
state = {
labelSet: {}
};
return parseTopLevel();
}
global.esprima = {
parse: parse
};
})(module.exports);
}, function(module, exports) {
"use strict";
function detectEval() {
if (typeof chrome !== "undefined" && chrome.app && chrome.app.runtime) {
return false;
}
if (typeof navigator != "undefined" && navigator.getDeviceStorage) {
return false;
}
try {
var f = new Function("", "return true;");
return f();
} catch (ex) {
return false;
}
}
var hasEval = detectEval();
function isIndex(s) {
return +s === s >>> 0 && s !== "";
}
function toNumber(s) {
return +s;
}
function isObject(obj) {
return obj === Object(obj);
}
var numberIsNaN = Number.isNaN || function(value) {
return typeof value === "number" && isNaN(value);
};
function areSameValue(left, right) {
if (left === right) return left !== 0 || 1 / left === 1 / right;
if (numberIsNaN(left) && numberIsNaN(right)) return true;
return left !== left && right !== right;
}
var createObject = "__proto__" in {} ? function(obj) {
return obj;
} : function(obj) {
var proto = obj.__proto__;
if (!proto) return obj;
var newObject = Object.create(proto);
Object.getOwnPropertyNames(obj).forEach(function(name) {
Object.defineProperty(newObject, name, Object.getOwnPropertyDescriptor(obj, name));
});
return newObject;
};
var identStart = "[$_a-zA-Z]";
var identPart = "[$_a-zA-Z0-9]";
var identRegExp = new RegExp("^" + identStart + "+" + identPart + "*" + "$");
function getPathCharType(char) {
if (char === undefined) return "eof";
var code = char.charCodeAt(0);
switch (code) {
case 91:
case 93:
case 46:
case 34:
case 39:
case 48:
return char;

case 95:
case 36:
return "ident";

case 32:
case 9:
case 10:
case 13:
case 160:
case 65279:
case 8232:
case 8233:
return "ws";
}
if (97 <= code && code <= 122 || 65 <= code && code <= 90) return "ident";
if (49 <= code && code <= 57) return "number";
return "else";
}
var pathStateMachine = {
beforePath: {
ws: [ "beforePath" ],
ident: [ "inIdent", "append" ],
"[": [ "beforeElement" ],
eof: [ "afterPath" ]
},
inPath: {
ws: [ "inPath" ],
".": [ "beforeIdent" ],
"[": [ "beforeElement" ],
eof: [ "afterPath" ]
},
beforeIdent: {
ws: [ "beforeIdent" ],
ident: [ "inIdent", "append" ]
},
inIdent: {
ident: [ "inIdent", "append" ],
0: [ "inIdent", "append" ],
number: [ "inIdent", "append" ],
ws: [ "inPath", "push" ],
".": [ "beforeIdent", "push" ],
"[": [ "beforeElement", "push" ],
eof: [ "afterPath", "push" ]
},
beforeElement: {
ws: [ "beforeElement" ],
0: [ "afterZero", "append" ],
number: [ "inIndex", "append" ],
"'": [ "inSingleQuote", "append", "" ],
'"': [ "inDoubleQuote", "append", "" ]
},
afterZero: {
ws: [ "afterElement", "push" ],
"]": [ "inPath", "push" ]
},
inIndex: {
0: [ "inIndex", "append" ],
number: [ "inIndex", "append" ],
ws: [ "afterElement" ],
"]": [ "inPath", "push" ]
},
inSingleQuote: {
"'": [ "afterElement" ],
eof: [ "error" ],
"else": [ "inSingleQuote", "append" ]
},
inDoubleQuote: {
'"': [ "afterElement" ],
eof: [ "error" ],
"else": [ "inDoubleQuote", "append" ]
},
afterElement: {
ws: [ "afterElement" ],
"]": [ "inPath", "push" ]
}
};
function noop() {}
function parsePath(path) {
var keys = [];
var index = -1;
var c, newChar, key, type, transition, action, typeMap, mode = "beforePath";
var actions = {
push: function() {
if (key === undefined) return;
keys.push(key);
key = undefined;
},
append: function() {
if (key === undefined) key = newChar; else key += newChar;
}
};
function maybeUnescapeQuote() {
if (index >= path.length) return;
var nextChar = path[index + 1];
if (mode == "inSingleQuote" && nextChar == "'" || mode == "inDoubleQuote" && nextChar == '"') {
index++;
newChar = nextChar;
actions.append();
return true;
}
}
while (mode) {
index++;
c = path[index];
if (c == "\\" && maybeUnescapeQuote(mode)) continue;
type = getPathCharType(c);
typeMap = pathStateMachine[mode];
transition = typeMap[type] || typeMap["else"] || "error";
if (transition == "error") return;
mode = transition[0];
action = actions[transition[1]] || noop;
newChar = transition[2] === undefined ? c : transition[2];
action();
if (mode === "afterPath") {
return keys;
}
}
return;
}
function isIdent(s) {
return identRegExp.test(s);
}
var constructorIsPrivate = {};
function Path(parts, privateToken) {
if (privateToken !== constructorIsPrivate) throw Error("Use Path.get to retrieve path objects");
for (var i = 0; i < parts.length; i++) {
this.push(String(parts[i]));
}
if (hasEval && this.length) {
this.getValueFrom = this.compiledGetValueFromFn();
}
}
var pathCache = {};
function getPath(pathString) {
if (pathString instanceof Path) return pathString;
if (pathString == null || pathString.length == 0) pathString = "";
if (typeof pathString != "string") {
if (isIndex(pathString.length)) {
return new Path(pathString, constructorIsPrivate);
}
pathString = String(pathString);
}
var path = pathCache[pathString];
if (path) return path;
var parts = parsePath(pathString);
if (!parts) return invalidPath;
var path = new Path(parts, constructorIsPrivate);
pathCache[pathString] = path;
return path;
}
Path.get = getPath;
function formatAccessor(key) {
if (isIndex(key)) {
return "[" + key + "]";
} else {
return '["' + key.replace(/"/g, '\\"') + '"]';
}
}
Path.prototype = createObject({
__proto__: [],
valid: true,
toString: function() {
var pathString = "";
for (var i = 0; i < this.length; i++) {
var key = this[i];
if (isIdent(key)) {
pathString += i ? "." + key : key;
} else {
pathString += formatAccessor(key);
}
}
return pathString;
},
getValueFrom: function(obj, directObserver) {
for (var i = 0; i < this.length; i++) {
if (obj == null) return;
obj = obj[this[i]];
}
return obj;
},
iterateObjects: function(obj, observe) {
for (var i = 0; i < this.length; i++) {
if (i) obj = obj[this[i - 1]];
if (!isObject(obj)) return;
observe(obj, this[i]);
}
},
compiledGetValueFromFn: function() {
var str = "";
var pathString = "obj";
str += "if (obj != null";
var i = 0;
var key;
for (;i < this.length - 1; i++) {
key = this[i];
pathString += isIdent(key) ? "." + key : formatAccessor(key);
str += " &&\n     " + pathString + " != null";
}
str += ")\n";
var key = this[i];
pathString += isIdent(key) ? "." + key : formatAccessor(key);
str += "  return " + pathString + ";\nelse\n  return undefined;";
return new Function("obj", str);
},
setValueFrom: function(obj, value) {
if (!this.length) return false;
for (var i = 0; i < this.length - 1; i++) {
if (!isObject(obj)) return false;
obj = obj[this[i]];
}
if (!isObject(obj)) return false;
obj[this[i]] = value;
return true;
}
});
var invalidPath = new Path("", constructorIsPrivate);
invalidPath.valid = false;
invalidPath.getValueFrom = invalidPath.setValueFrom = function() {};
exports.Path = Path;
}, function(module, exports) {
var specialProperties = new Map();
function specialPropertyKey(name) {
return name.toLowerCase();
}
function registerSpecialProperty(name, setter) {
var propertyKey = specialPropertyKey(name);
if (specialProperties.has(propertyKey)) {
throw new Error("Property for " + propertyKey + " already registered");
} else {
specialProperties.set(propertyKey, setter);
}
}
exports.registerSpecialProperty = registerSpecialProperty;
function getSpecialPropertySetter(name) {
var propertyKey = specialPropertyKey(name);
return specialProperties.get(propertyKey);
}
exports.getSpecialPropertySetter = getSpecialPropertySetter;
}, function(module, exports, __webpack_require__) {
var formattedStringCommon = __webpack_require__(57);
global.moduleMerge(formattedStringCommon, exports);
var FormattedString = function(_super) {
__extends(FormattedString, _super);
function FormattedString() {
_super.apply(this, arguments);
}
FormattedString.prototype.createFormattedStringCore = function() {
var ssb = new android.text.SpannableStringBuilder();
var i;
var spanStart = 0;
var spanLength = 0;
var spanText = "";
for (i = 0; i < this.spans.length; i++) {
var span = this.spans.getItem(i);
spanText = span.text || "";
spanLength = spanText.length;
if (spanLength !== 0) {
ssb.insert(spanStart, spanText);
span.updateSpanModifiers(this);
var p;
for (p = 0; p < span.spanModifiers.length; p++) {
ssb.setSpan(span.spanModifiers[p], spanStart, spanStart + spanLength, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
}
spanStart += spanLength;
}
}
this._formattedText = ssb;
};
return FormattedString;
}(formattedStringCommon.FormattedString);
exports.FormattedString = FormattedString;
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(17);
var observableArray = __webpack_require__(58);
var types = __webpack_require__(13);
var colorModule = __webpack_require__(27);
var knownCollections;
(function(knownCollections) {
knownCollections.spans = "spans";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
var CHILD_SPAN = "Span";
var CHILD_FORMATTED_TEXT = "formattedText";
var CHILD_FORMATTED_STRING = "FormattedString";
var FormattedString = function(_super) {
__extends(FormattedString, _super);
function FormattedString() {
_super.call(this);
this._spans = new observableArray.ObservableArray();
this._spans.addEventListener(observableArray.ObservableArray.changeEvent, this.onSpansCollectionChanged, this);
this._isDirty = true;
}
Object.defineProperty(FormattedString.prototype, "parent", {
get: function() {
return this._parent;
},
set: function(value) {
if (this._parent !== value) {
this._parent = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "fontFamily", {
get: function() {
return this._fontFamily;
},
set: function(value) {
if (this._fontFamily !== value) {
this._fontFamily = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "fontSize", {
get: function() {
return this._fontSize;
},
set: function(value) {
var fSize;
if (types.isString(value)) {
fSize = parseInt(value);
} else {
fSize = value;
}
if (this._fontSize !== fSize) {
this._fontSize = fSize;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "foregroundColor", {
get: function() {
return this._foregroundColor;
},
set: function(value) {
var foreColor;
if (types.isString(value)) {
foreColor = new colorModule.Color(value);
} else {
foreColor = value;
}
if (this._foregroundColor !== foreColor) {
this._foregroundColor = foreColor;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "backgroundColor", {
get: function() {
return this._backgroundColor;
},
set: function(value) {
var backColor;
if (types.isString(value)) {
backColor = new colorModule.Color(value);
} else {
backColor = value;
}
if (this._backgroundColor !== backColor) {
this._backgroundColor = backColor;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "underline", {
get: function() {
return this._underline;
},
set: function(value) {
var underlineIntValue;
if (types.isString(value)) {
underlineIntValue = parseInt(value);
} else {
underlineIntValue = value;
}
if (this._underline !== underlineIntValue) {
this._underline = underlineIntValue;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "strikethrough", {
get: function() {
return this._strikethrough;
},
set: function(value) {
var strikethroughIntValue;
if (types.isString(value)) {
strikethroughIntValue = parseInt(value);
} else {
strikethroughIntValue = value;
}
if (this._strikethrough !== strikethroughIntValue) {
this._strikethrough = strikethroughIntValue;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "fontAttributes", {
get: function() {
return this._fontAttributes;
},
set: function(value) {
if (this._fontAttributes !== value) {
this._fontAttributes = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "spans", {
get: function() {
if (!this._spans) {
this._spans = new observableArray.ObservableArray();
}
return this._spans;
},
enumerable: true,
configurable: true
});
FormattedString.prototype.onSpansCollectionChanged = function(eventData) {
var i;
if (eventData.addedCount > 0) {
for (i = 0; i < eventData.addedCount; i++) {
var addedSpan = eventData.object.getItem(eventData.index + i);
addedSpan.parentFormattedString = this;
addedSpan.addEventListener(observable.Observable.propertyChangeEvent, this.onSpanChanged, this);
}
}
if (eventData.removed && eventData.removed.length > 0) {
var p;
for (p = 0; p < eventData.removed.length; p++) {
var removedSpan = eventData.removed[p];
removedSpan.removeEventListener(observable.Observable.propertyChangeEvent, this.onSpanChanged, this);
}
}
this.updateFormattedText(true);
};
FormattedString.prototype.onSpanChanged = function(eventData) {
this.updateFormattedText(true);
};
FormattedString.prototype.updateFormattedText = function(isDirty) {
var shouldUpdate = isDirty || this._isDirty;
if (shouldUpdate) {
this.createFormattedStringCore();
this._isDirty = false;
this.notify(this._createPropertyChangeData("", this));
}
};
FormattedString.prototype.createFormattedStringCore = function() {};
FormattedString.prototype.toString = function() {
var result = "";
var i;
for (i = 0; i < this._spans.length; i++) {
result += this._spans.getItem(i).text;
}
return result;
};
FormattedString.prototype._addArrayFromBuilder = function(name, value) {
var i;
var span;
if (name === knownCollections.spans) {
for (i = 0; i < value.length; i++) {
span = value[i];
this.spans.push(span);
}
}
};
FormattedString.prototype.updateSpansBindingContext = function(newBindingContext) {
var i;
for (i = 0; i < this.spans.length; i++) {
var span = this.spans.getItem(i);
span.bindingContext = newBindingContext;
}
};
FormattedString.prototype._addChildFromBuilder = function(name, value) {
if (name === CHILD_SPAN) {
this.spans.push(value);
}
};
FormattedString.addFormattedStringToView = function(view, name, value) {
if (name === CHILD_SPAN) {
if (!view.formattedText) {
view.formattedText = new FormattedString();
}
view.formattedText.spans.push(value);
} else if (name === CHILD_FORMATTED_TEXT || name === CHILD_FORMATTED_STRING) {
view.formattedText = value;
}
};
return FormattedString;
}(observable.Observable);
exports.FormattedString = FormattedString;
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(17);
var types = __webpack_require__(13);
var ChangeType = function() {
function ChangeType() {}
ChangeType.Add = "add";
ChangeType.Delete = "delete";
ChangeType.Update = "update";
ChangeType.Splice = "splice";
return ChangeType;
}();
exports.ChangeType = ChangeType;
var CHANGE = "change";
var ObservableArray = function(_super) {
__extends(ObservableArray, _super);
function ObservableArray() {
_super.call(this);
if (arguments.length === 1 && Array.isArray(arguments[0])) {
this._array = arguments[0].slice();
} else {
this._array = Array.apply(null, arguments);
}
this._addArgs = {
eventName: CHANGE,
object: this,
action: ChangeType.Add,
index: null,
removed: new Array(),
addedCount: 1
};
this._deleteArgs = {
eventName: CHANGE,
object: this,
action: ChangeType.Delete,
index: null,
removed: null,
addedCount: 0
};
}
ObservableArray.prototype.getItem = function(index) {
return this._array[index];
};
ObservableArray.prototype.setItem = function(index, value) {
var oldValue = this._array[index];
this._array[index] = value;
this.notify({
eventName: CHANGE,
object: this,
action: ChangeType.Update,
index: index,
removed: [ oldValue ],
addedCount: 1
});
};
Object.defineProperty(ObservableArray.prototype, "length", {
get: function() {
return this._array.length;
},
set: function(value) {
if (types.isNumber(value) && this._array && this._array.length !== value) {
this.splice(value, this._array.length - value);
}
},
enumerable: true,
configurable: true
});
ObservableArray.prototype.toString = function() {
return this._array.toString();
};
ObservableArray.prototype.toLocaleString = function() {
return this._array.toLocaleString();
};
ObservableArray.prototype.concat = function() {
this._addArgs.index = this._array.length;
var result = this._array.concat.apply(this._array, arguments);
return result;
};
ObservableArray.prototype.join = function(separator) {
return this._array.join(separator);
};
ObservableArray.prototype.pop = function() {
this._deleteArgs.index = this._array.length - 1;
var result = this._array.pop();
this._deleteArgs.removed = [ result ];
this.notify(this._deleteArgs);
this._notifyLengthChange();
return result;
};
ObservableArray.prototype.push = function() {
this._addArgs.index = this._array.length;
if (arguments.length === 1 && Array.isArray(arguments[0])) {
var source = arguments[0];
for (var i = 0, l = source.length; i < l; i++) {
this._array.push(source[i]);
}
} else {
this._array.push.apply(this._array, arguments);
}
this._addArgs.addedCount = this._array.length - this._addArgs.index;
this.notify(this._addArgs);
this._notifyLengthChange();
return this._array.length;
};
ObservableArray.prototype._notifyLengthChange = function() {
var lengthChangedData = this._createPropertyChangeData("length", this._array.length);
this.notify(lengthChangedData);
};
ObservableArray.prototype.reverse = function() {
return this._array.reverse();
};
ObservableArray.prototype.shift = function() {
var result = this._array.shift();
this._deleteArgs.index = 0;
this._deleteArgs.removed = [ result ];
this.notify(this._deleteArgs);
this._notifyLengthChange();
return result;
};
ObservableArray.prototype.slice = function(start, end) {
return this._array.slice(start, end);
};
ObservableArray.prototype.sort = function(compareFn) {
return this._array.sort(compareFn);
};
ObservableArray.prototype.splice = function(start, deleteCount) {
var length = this._array.length;
var result = this._array.splice.apply(this._array, arguments);
this.notify({
eventName: CHANGE,
object: this,
action: ChangeType.Splice,
index: start,
removed: result,
addedCount: this._array.length > length ? this._array.length - length : 0
});
if (this._array.length !== length) {
this._notifyLengthChange();
}
return result;
};
ObservableArray.prototype.unshift = function() {
var length = this._array.length;
var result = this._array.unshift.apply(this._array, arguments);
this._addArgs.index = 0;
this._addArgs.addedCount = result - length;
this.notify(this._addArgs);
this._notifyLengthChange();
return result;
};
ObservableArray.prototype.indexOf = function(searchElement, fromIndex) {
var index = fromIndex ? fromIndex : 0;
for (var i = index, l = this._array.length; i < l; i++) {
if (this._array[i] === searchElement) {
return i;
}
}
return -1;
};
ObservableArray.prototype.lastIndexOf = function(searchElement, fromIndex) {
var index = fromIndex ? fromIndex : this._array.length - 1;
for (var i = index; i >= 0; i--) {
if (this._array[i] === searchElement) {
return i;
}
}
return -1;
};
ObservableArray.prototype.every = function(callbackfn, thisArg) {
return this._array.every(callbackfn, thisArg);
};
ObservableArray.prototype.some = function(callbackfn, thisArg) {
return this._array.some(callbackfn, thisArg);
};
ObservableArray.prototype.forEach = function(callbackfn, thisArg) {
this._array.forEach(callbackfn, thisArg);
};
ObservableArray.prototype.map = function(callbackfn, thisArg) {
return this._array.map(callbackfn, thisArg);
};
ObservableArray.prototype.filter = function(callbackfn, thisArg) {
return this._array.filter(callbackfn, thisArg);
};
ObservableArray.prototype.reduce = function(callbackfn, initialValue) {
return this._array.reduce(callbackfn, initialValue);
};
ObservableArray.prototype.reduceRight = function(callbackfn, initialValue) {
return this._array.reduceRight(callbackfn, initialValue);
};
ObservableArray.changeEvent = CHANGE;
return ObservableArray;
}(observable.Observable);
exports.ObservableArray = ObservableArray;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(13);
var common = __webpack_require__(60);
global.moduleMerge(common, exports);
var utils;
function ensureUtils() {
if (!utils) {
utils = __webpack_require__(21);
}
}
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(18);
}
}
var enums;
function ensureEnums() {
if (!enums) {
enums = __webpack_require__(23);
}
}
var ImageSource = function() {
function ImageSource() {}
ImageSource.prototype.loadFromResource = function(name) {
this.android = null;
ensureUtils();
var res = utils.ad.getApplicationContext().getResources();
if (res) {
var identifier = res.getIdentifier(name, "drawable", utils.ad.getApplication().getPackageName());
if (0 < identifier) {
var bitmapDrawable = res.getDrawable(identifier);
if (bitmapDrawable && bitmapDrawable.getBitmap) {
this.android = bitmapDrawable.getBitmap();
}
}
}
return this.android != null;
};
ImageSource.prototype.loadFromFile = function(path) {
ensureFS();
var fileName = types.isString(path) ? path.trim() : "";
if (fileName.indexOf("~/") === 0) {
fileName = fs.path.join(fs.knownFolders.currentApp().path, fileName.replace("~/", ""));
}
this.android = android.graphics.BitmapFactory.decodeFile(fileName, null);
return this.android != null;
};
ImageSource.prototype.loadFromData = function(data) {
this.android = android.graphics.BitmapFactory.decodeStream(data);
return this.android != null;
};
ImageSource.prototype.loadFromBase64 = function(source) {
if (types.isString(source)) {
var bytes = android.util.Base64.decode(source, android.util.Base64.DEFAULT);
this.android = android.graphics.BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
}
return this.android != null;
};
ImageSource.prototype.setNativeSource = function(source) {
this.android = source;
return source != null;
};
ImageSource.prototype.saveToFile = function(path, format, quality) {
if (quality === void 0) {
quality = 100;
}
if (!this.android) {
return false;
}
var targetFormat = getTargetFromat(format);
var outputStream = new java.io.BufferedOutputStream(new java.io.FileOutputStream(path));
var res = this.android.compress(targetFormat, quality, outputStream);
outputStream.close();
return res;
};
ImageSource.prototype.toBase64String = function(format, quality) {
if (quality === void 0) {
quality = 100;
}
if (!this.android) {
return null;
}
var targetFormat = getTargetFromat(format);
var outputStream = new java.io.ByteArrayOutputStream();
var base64Stream = new android.util.Base64OutputStream(outputStream, android.util.Base64.NO_WRAP);
this.android.compress(targetFormat, quality, base64Stream);
base64Stream.close();
outputStream.close();
return outputStream.toString();
};
Object.defineProperty(ImageSource.prototype, "height", {
get: function() {
if (this.android) {
return this.android.getHeight();
}
return NaN;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageSource.prototype, "width", {
get: function() {
if (this.android) {
return this.android.getWidth();
}
return NaN;
},
enumerable: true,
configurable: true
});
return ImageSource;
}();
exports.ImageSource = ImageSource;
function getTargetFromat(format) {
ensureEnums();
switch (format) {
case enums.ImageFormat.jpeg:
return android.graphics.Bitmap.CompressFormat.JPEG;

default:
return android.graphics.Bitmap.CompressFormat.PNG;
}
}
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(21);
var http;
function ensureHttp() {
if (!http) {
http = __webpack_require__(61);
}
}
var definition = __webpack_require__(59);
function fromResource(name) {
var image = new definition.ImageSource();
return image.loadFromResource(name) ? image : null;
}
exports.fromResource = fromResource;
function fromFile(path) {
var image = new definition.ImageSource();
return image.loadFromFile(path) ? image : null;
}
exports.fromFile = fromFile;
function fromData(data) {
var image = new definition.ImageSource();
return image.loadFromData(data) ? image : null;
}
exports.fromData = fromData;
function fromBase64(source) {
var image = new definition.ImageSource();
return image.loadFromBase64(source) ? image : null;
}
exports.fromBase64 = fromBase64;
function fromNativeSource(source) {
var image = new definition.ImageSource();
return image.setNativeSource(source) ? image : null;
}
exports.fromNativeSource = fromNativeSource;
function fromUrl(url) {
ensureHttp();
return http.getImage(url);
}
exports.fromUrl = fromUrl;
function fromFileOrResource(path) {
if (!isFileOrResourcePath(path)) {
throw new Error('Path "' + '" is not a valid file or resource.');
}
if (path.indexOf(utils.RESOURCE_PREFIX) === 0) {
return fromResource(path.substr(utils.RESOURCE_PREFIX.length));
}
return fromFile(path);
}
exports.fromFileOrResource = fromFileOrResource;
function isFileOrResourcePath(path) {
return utils.isFileOrResourcePath(path);
}
exports.isFileOrResourcePath = isFileOrResourcePath;
}, function(module, exports, __webpack_require__) {
var httpRequest = __webpack_require__(62);
global.moduleMerge(httpRequest, exports);
function getString(arg) {
return new Promise(function(resolve, reject) {
httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(r) {
try {
var str = r.content.toString();
resolve(str);
} catch (e) {
reject(e);
}
}, function(e) {
return reject(e);
});
});
}
exports.getString = getString;
function getJSON(arg) {
return new Promise(function(resolve, reject) {
httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(r) {
try {
var json = r.content.toJSON();
resolve(json);
} catch (e) {
reject(e);
}
}, function(e) {
return reject(e);
});
});
}
exports.getJSON = getJSON;
function getImage(arg) {
return new Promise(function(resolve, reject) {
httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(r) {
r.content.toImage().then(function(source) {
return resolve(source);
}, function(e) {
return reject(e);
});
}, function(e) {
return reject(e);
});
});
}
exports.getImage = getImage;
function getFile(arg, destinationFilePath) {
return new Promise(function(resolve, reject) {
httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(r) {
try {
var file = r.content.toFile(destinationFilePath);
resolve(file);
} catch (e) {
reject(e);
}
}, function(e) {
return reject(e);
});
});
}
exports.getFile = getFile;
function addHeader(headers, key, value) {
if (!headers[key]) {
headers[key] = value;
} else if (Array.isArray(headers[key])) {
headers[key].push(value);
} else {
var values = [ headers[key] ];
values.push(value);
headers[key] = values;
}
}
exports.addHeader = addHeader;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(13);
var http = __webpack_require__(61);
var requestIdCounter = 0;
var pendingRequests = {};
var utils;
function ensureUtils() {
if (!utils) {
utils = __webpack_require__(21);
}
}
var imageSource;
function ensureImageSource() {
if (!imageSource) {
imageSource = __webpack_require__(59);
}
}
var platform;
function ensurePlatform() {
if (!platform) {
platform = __webpack_require__(39);
}
}
var completeCallback;
function ensureCompleteCallback() {
if (completeCallback) {
return;
}
completeCallback = new com.tns.Async.CompleteCallback({
onComplete: function(result, context) {
onRequestComplete(context, result);
}
});
}
function onRequestComplete(requestId, result) {
var callbacks = pendingRequests[requestId];
delete pendingRequests[requestId];
if (result.error) {
callbacks.rejectCallback(new Error(result.error.toString()));
return;
}
var headers = {};
if (result.headers) {
var jHeaders = result.headers;
var length = jHeaders.size();
var i;
var pair;
for (i = 0; i < length; i++) {
pair = jHeaders.get(i);
http.addHeader(headers, pair.key, pair.value);
}
}
callbacks.resolveCallback({
content: {
raw: result.raw,
toString: function() {
if (types.isString(result.responseAsString)) {
return result.responseAsString;
} else {
throw new Error("Response content may not be converted to string");
}
},
toJSON: function() {
ensureUtils();
return utils.parseJSON(result.responseAsString);
},
toImage: function() {
ensureImageSource();
return new Promise(function(resolveImage, rejectImage) {
if (result.responseAsImage != null) {
resolveImage(imageSource.fromNativeSource(result.responseAsImage));
} else {
rejectImage(new Error("Response content may not be converted to an Image"));
}
});
},
toFile: function(destinationFilePath) {
var fs = __webpack_require__(18);
var fileName = callbacks.url;
if (!destinationFilePath) {
destinationFilePath = fs.path.join(fs.knownFolders.documents().path, fileName.substring(fileName.lastIndexOf("/") + 1));
}
var stream;
try {
var javaFile = new java.io.File(destinationFilePath);
stream = new java.io.FileOutputStream(javaFile);
stream.write(result.raw.toByteArray());
return fs.File.fromPath(destinationFilePath);
} catch (exception) {
throw new Error("Cannot save file with path: " + destinationFilePath + ".");
} finally {
if (stream) {
stream.close();
}
}
}
},
statusCode: result.statusCode,
headers: headers
});
}
function buildJavaOptions(options) {
if (!types.isString(options.url)) {
throw new Error("Http request must provide a valid url.");
}
var javaOptions = new com.tns.Async.Http.RequestOptions();
javaOptions.url = options.url;
if (types.isString(options.method)) {
javaOptions.method = options.method;
}
if (types.isString(options.content) || options.content instanceof FormData) {
javaOptions.content = options.content.toString();
}
if (types.isNumber(options.timeout)) {
javaOptions.timeout = options.timeout;
}
if (options.headers) {
var arrayList = new java.util.ArrayList();
var pair = com.tns.Async.Http.KeyValuePair;
for (var key in options.headers) {
arrayList.add(new pair(key, options.headers[key] + ""));
}
javaOptions.headers = arrayList;
}
ensurePlatform();
var screen = platform.screen.mainScreen;
javaOptions.screenWidth = screen.widthPixels;
javaOptions.screenHeight = screen.heightPixels;
return javaOptions;
}
function request(options) {
if (!types.isDefined(options)) {
return;
}
return new Promise(function(resolve, reject) {
try {
var javaOptions = buildJavaOptions(options);
var callbacks = {
url: options.url,
resolveCallback: resolve,
rejectCallback: reject
};
pendingRequests[requestIdCounter] = callbacks;
ensureCompleteCallback();
com.tns.Async.Http.MakeRequest(javaOptions, completeCallback, new java.lang.Integer(requestIdCounter));
requestIdCounter++;
} catch (ex) {
reject(ex);
}
});
}
exports.request = request;
}, function(module, exports, __webpack_require__) {
var styleModule = __webpack_require__(14);
var stylePropertyModule = __webpack_require__(33);
var visualStateConstatnsModule = __webpack_require__(37);
var convertersModule = __webpack_require__(40);
exports.Property = stylePropertyModule.Property;
exports.Style = styleModule.Style;
var properties;
(function(properties) {
properties.fontSizeProperty = styleModule.fontSizeProperty;
properties.colorProperty = styleModule.colorProperty;
properties.backgroundColorProperty = styleModule.backgroundColorProperty;
properties.textAlignmentProperty = styleModule.textAlignmentProperty;
properties.getPropertyByName = stylePropertyModule.getPropertyByName;
properties.getPropertyByCssName = stylePropertyModule.getPropertyByCssName;
properties.eachProperty = stylePropertyModule.eachProperty;
properties.eachInheritableProperty = stylePropertyModule.eachInheritableProperty;
})(properties = exports.properties || (exports.properties = {}));
var converters;
(function(converters) {
converters.colorConverter = convertersModule.colorConverter;
converters.fontSizeConverter = convertersModule.fontSizeConverter;
converters.textAlignConverter = convertersModule.textAlignConverter;
converters.numberConverter = convertersModule.numberConverter;
converters.visibilityConverter = convertersModule.visibilityConverter;
})(converters = exports.converters || (exports.converters = {}));
var visualStates;
(function(visualStates) {
visualStates.Normal = visualStateConstatnsModule.Normal;
visualStates.Hovered = visualStateConstatnsModule.Hovered;
visualStates.Pressed = visualStateConstatnsModule.Pressed;
})(visualStates = exports.visualStates || (exports.visualStates = {}));
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(65);
var definition = __webpack_require__(64);
var view = __webpack_require__(11);
var trace = __webpack_require__(26);
var utils = __webpack_require__(21);
global.moduleMerge(common, exports);
var SWIPE_THRESHOLD = 100;
var SWIPE_VELOCITY_THRESHOLD = 100;
var INVALID_POINTER_ID = -1;
var TO_DEGREES = 180 / Math.PI;
var GesturesObserver = function(_super) {
__extends(GesturesObserver, _super);
function GesturesObserver() {
_super.apply(this, arguments);
}
GesturesObserver.prototype.observe = function(type) {
var _this = this;
if (this.target) {
this.type = type;
this._onTargetLoaded = function(args) {
trace.write(_this.target + ".target loaded. android:" + _this.target._nativeView, "gestures");
_this._attach(_this.target, type);
};
this._onTargetUnloaded = function(args) {
trace.write(_this.target + ".target unloaded. android:" + _this.target._nativeView, "gestures");
_this._detach();
};
this.target.on(view.View.loadedEvent, this._onTargetLoaded);
this.target.on(view.View.unloadedEvent, this._onTargetUnloaded);
if (this.target.isLoaded) {
this._attach(this.target, type);
}
}
};
GesturesObserver.prototype.disconnect = function() {
this._detach();
if (this.target) {
this.target.off(view.View.loadedEvent, this._onTargetLoaded);
this.target.off(view.View.unloadedEvent, this._onTargetUnloaded);
this._onTargetLoaded = null;
this._onTargetUnloaded = null;
}
_super.prototype.disconnect.call(this);
};
GesturesObserver.prototype._detach = function() {
trace.write(this.target + "._detach() android:" + this.target._nativeView, "gestures");
this._notifyTouch = false;
this._simpleGestureDetector = null;
this._scaleGestureDetector = null;
this._swipeGestureDetector = null;
this._panGestureDetector = null;
this._rotateGestureDetector = null;
this._eventData = null;
};
GesturesObserver.prototype._attach = function(target, type) {
trace.write(this.target + "._attach() android:" + this.target._nativeView, "gestures");
this._detach();
if (type & definition.GestureTypes.tap || type & definition.GestureTypes.doubleTap || type & definition.GestureTypes.longPress) {
ensureTapAndDoubleTapGestureListenerClass();
this._simpleGestureDetector = new android.support.v4.view.GestureDetectorCompat(target._context, new TapAndDoubleTapGestureListenerClass(this, this.target, type));
}
if (type & definition.GestureTypes.pinch) {
ensurePinchGestureListenerClass();
this._scaleGestureDetector = new android.view.ScaleGestureDetector(target._context, new PinchGestureListenerClass(this, this.target));
}
if (type & definition.GestureTypes.swipe) {
ensureSwipeGestureListenerClass();
this._swipeGestureDetector = new android.support.v4.view.GestureDetectorCompat(target._context, new SwipeGestureListenerClass(this, this.target));
}
if (type & definition.GestureTypes.pan) {
this._panGestureDetector = new CustomPanGestureDetector(this, this.target);
}
if (type & definition.GestureTypes.rotation) {
this._rotateGestureDetector = new CustomRotateGestureDetector(this, this.target);
}
if (type & definition.GestureTypes.touch) {
this._notifyTouch = true;
}
};
GesturesObserver.prototype.androidOnTouchEvent = function(motionEvent) {
if (this._notifyTouch) {
if (!this._eventData) {
this._eventData = new TouchGestureEventData();
}
this._eventData.prepare(this.target, motionEvent);
_executeCallback(this, this._eventData);
}
if (this._simpleGestureDetector) {
this._simpleGestureDetector.onTouchEvent(motionEvent);
}
if (this._scaleGestureDetector) {
this._scaleGestureDetector.onTouchEvent(motionEvent);
}
if (this._swipeGestureDetector) {
this._swipeGestureDetector.onTouchEvent(motionEvent);
}
if (this._panGestureDetector) {
this._panGestureDetector.onTouchEvent(motionEvent);
}
if (this._rotateGestureDetector) {
this._rotateGestureDetector.onTouchEvent(motionEvent);
}
};
return GesturesObserver;
}(common.GesturesObserver);
exports.GesturesObserver = GesturesObserver;
function _getArgs(type, view, e) {
return {
type: type,
view: view,
android: e,
ios: undefined,
object: view,
eventName: definition.toString(type)
};
}
function _getSwipeArgs(direction, view, initialEvent, currentEvent) {
return {
type: definition.GestureTypes.swipe,
view: view,
android: {
initial: initialEvent,
current: currentEvent
},
direction: direction,
ios: undefined,
object: view,
eventName: definition.toString(definition.GestureTypes.swipe)
};
}
function _getPanArgs(deltaX, deltaY, view, state, initialEvent, currentEvent) {
return {
type: definition.GestureTypes.pan,
view: view,
android: {
initial: initialEvent,
current: currentEvent
},
deltaX: deltaX,
deltaY: deltaY,
ios: undefined,
object: view,
eventName: definition.toString(definition.GestureTypes.pan),
state: state
};
}
function _executeCallback(observer, args) {
if (observer && observer.callback) {
observer.callback.call(observer._context, args);
}
}
var TapAndDoubleTapGestureListenerClass;
function ensureTapAndDoubleTapGestureListenerClass() {
if (TapAndDoubleTapGestureListenerClass) {
return;
}
var TapAndDoubleTapGestureListener = function(_super) {
__extends(TapAndDoubleTapGestureListener, _super);
function TapAndDoubleTapGestureListener(observer, target, type) {
_super.call(this);
this._observer = observer;
this._target = target;
this._type = type;
return global.__native(this);
}
TapAndDoubleTapGestureListener.prototype.onSingleTapUp = function(motionEvent) {
if (this._type & definition.GestureTypes.tap) {
var args = _getArgs(definition.GestureTypes.tap, this._target, motionEvent);
_executeCallback(this._observer, args);
}
return true;
};
TapAndDoubleTapGestureListener.prototype.onDoubleTap = function(motionEvent) {
if (this._type & definition.GestureTypes.doubleTap) {
var args = _getArgs(definition.GestureTypes.doubleTap, this._target, motionEvent);
_executeCallback(this._observer, args);
}
return true;
};
TapAndDoubleTapGestureListener.prototype.onDown = function(motionEvent) {
return true;
};
TapAndDoubleTapGestureListener.prototype.onLongPress = function(motionEvent) {
if (this._type & definition.GestureTypes.longPress) {
var args = _getArgs(definition.GestureTypes.longPress, this._target, motionEvent);
_executeCallback(this._observer, args);
}
};
return TapAndDoubleTapGestureListener;
}(android.view.GestureDetector.SimpleOnGestureListener);
TapAndDoubleTapGestureListenerClass = TapAndDoubleTapGestureListener;
}
var PinchGestureEventData = function() {
function PinchGestureEventData(view, android, scale, object, state) {
this.view = view;
this.android = android;
this.scale = scale;
this.object = object;
this.state = state;
this.type = definition.GestureTypes.pinch;
this.eventName = definition.toString(definition.GestureTypes.pinch);
}
PinchGestureEventData.prototype.getFocusX = function() {
return this.android.getFocusX() / utils.layout.getDisplayDensity();
};
PinchGestureEventData.prototype.getFocusY = function() {
return this.android.getFocusY() / utils.layout.getDisplayDensity();
};
return PinchGestureEventData;
}();
var PinchGestureListenerClass;
function ensurePinchGestureListenerClass() {
if (PinchGestureListenerClass) {
return;
}
var PinchGestureListener = function(_super) {
__extends(PinchGestureListener, _super);
function PinchGestureListener(observer, target) {
_super.call(this);
this._observer = observer;
this._target = target;
this._density = utils.layout.getDisplayDensity();
return global.__native(this);
}
PinchGestureListener.prototype.onScaleBegin = function(detector) {
this._scale = detector.getScaleFactor();
var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, common.GestureStateTypes.began);
_executeCallback(this._observer, args);
return true;
};
PinchGestureListener.prototype.onScale = function(detector) {
this._scale *= detector.getScaleFactor();
var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, common.GestureStateTypes.changed);
_executeCallback(this._observer, args);
return true;
};
PinchGestureListener.prototype.onScaleEnd = function(detector) {
this._scale *= detector.getScaleFactor();
var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, common.GestureStateTypes.ended);
_executeCallback(this._observer, args);
};
return PinchGestureListener;
}(android.view.ScaleGestureDetector.SimpleOnScaleGestureListener);
PinchGestureListenerClass = PinchGestureListener;
}
var SwipeGestureListenerClass;
function ensureSwipeGestureListenerClass() {
if (SwipeGestureListenerClass) {
return;
}
var SwipeGestureListener = function(_super) {
__extends(SwipeGestureListener, _super);
function SwipeGestureListener(observer, target) {
_super.call(this);
this._observer = observer;
this._target = target;
return global.__native(this);
}
SwipeGestureListener.prototype.onDown = function(motionEvent) {
return true;
};
SwipeGestureListener.prototype.onFling = function(initialEvent, currentEvent, velocityX, velocityY) {
var result = false;
var args;
try {
var deltaY = currentEvent.getY() - initialEvent.getY();
var deltaX = currentEvent.getX() - initialEvent.getX();
if (Math.abs(deltaX) > Math.abs(deltaY)) {
if (Math.abs(deltaX) > SWIPE_THRESHOLD && Math.abs(velocityX) > SWIPE_VELOCITY_THRESHOLD) {
if (deltaX > 0) {
args = _getSwipeArgs(definition.SwipeDirection.right, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
} else {
args = _getSwipeArgs(definition.SwipeDirection.left, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
}
}
} else {
if (Math.abs(deltaY) > SWIPE_THRESHOLD && Math.abs(velocityY) > SWIPE_VELOCITY_THRESHOLD) {
if (deltaY > 0) {
args = _getSwipeArgs(definition.SwipeDirection.down, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
} else {
args = _getSwipeArgs(definition.SwipeDirection.up, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
}
}
}
} catch (ex) {}
return result;
};
return SwipeGestureListener;
}(android.view.GestureDetector.SimpleOnGestureListener);
SwipeGestureListenerClass = SwipeGestureListener;
}
var CustomPanGestureDetector = function() {
function CustomPanGestureDetector(observer, target) {
this.observer = observer;
this.target = target;
this.isTracking = false;
this.density = utils.layout.getDisplayDensity();
}
CustomPanGestureDetector.prototype.onTouchEvent = function(event) {
switch (event.getActionMasked()) {
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
this.trackStop(event, false);
break;

case android.view.MotionEvent.ACTION_DOWN:
case android.view.MotionEvent.ACTION_POINTER_DOWN:
case android.view.MotionEvent.ACTION_POINTER_UP:
this.trackStop(event, true);
break;

case android.view.MotionEvent.ACTION_MOVE:
if (!this.isTracking) {
this.trackStart(event);
}
this.trackChange(event);
break;
}
return true;
};
CustomPanGestureDetector.prototype.trackStop = function(currentEvent, cahceEvent) {
if (this.isTracking) {
var args = _getPanArgs(this.deltaX, this.deltaY, this.target, common.GestureStateTypes.ended, null, currentEvent);
_executeCallback(this.observer, args);
this.deltaX = undefined;
this.deltaY = undefined;
this.isTracking = false;
}
if (cahceEvent) {
this.lastEventCache = currentEvent;
} else {
this.lastEventCache = undefined;
}
};
CustomPanGestureDetector.prototype.trackStart = function(currentEvent) {
var inital = this.getMotionEventCenter(this.lastEventCache ? this.lastEventCache : currentEvent);
this.initialX = inital.x;
this.initialY = inital.y;
this.isTracking = true;
var args = _getPanArgs(0, 0, this.target, common.GestureStateTypes.began, null, currentEvent);
_executeCallback(this.observer, args);
};
CustomPanGestureDetector.prototype.trackChange = function(currentEvent) {
var current = this.getMotionEventCenter(currentEvent);
this.deltaX = current.x - this.initialX;
this.deltaY = current.y - this.initialY;
var args = _getPanArgs(this.deltaX, this.deltaY, this.target, common.GestureStateTypes.changed, null, currentEvent);
_executeCallback(this.observer, args);
};
CustomPanGestureDetector.prototype.getMotionEventCenter = function(event) {
var count = event.getPointerCount();
var res = {
x: 0,
y: 0
};
for (var i = 0; i < count; i++) {
res.x += event.getX(i);
res.y += event.getY(i);
}
res.x /= count * this.density;
res.y /= count * this.density;
return res;
};
return CustomPanGestureDetector;
}();
var CustomRotateGestureDetector = function() {
function CustomRotateGestureDetector(observer, target) {
this.observer = observer;
this.target = target;
this.trackedPtrId1 = INVALID_POINTER_ID;
this.trackedPtrId2 = INVALID_POINTER_ID;
}
Object.defineProperty(CustomRotateGestureDetector.prototype, "isTracking", {
get: function() {
return this.trackedPtrId1 !== INVALID_POINTER_ID && this.trackedPtrId2 !== INVALID_POINTER_ID;
},
enumerable: true,
configurable: true
});
CustomRotateGestureDetector.prototype.onTouchEvent = function(event) {
var pointerID = event.getPointerId(event.getActionIndex());
var wasTracking = this.isTracking;
switch (event.getActionMasked()) {
case android.view.MotionEvent.ACTION_DOWN:
case android.view.MotionEvent.ACTION_POINTER_DOWN:
var assigned = false;
if (this.trackedPtrId1 === INVALID_POINTER_ID && pointerID !== this.trackedPtrId2) {
this.trackedPtrId1 = pointerID;
assigned = true;
} else if (this.trackedPtrId2 === INVALID_POINTER_ID && pointerID !== this.trackedPtrId1) {
this.trackedPtrId2 = pointerID;
assigned = true;
}
if (assigned && this.isTracking) {
this.angle = 0;
this.initalPointersAngle = this.getPointersAngle(event);
this.executeCallback(event, common.GestureStateTypes.began);
}
break;

case android.view.MotionEvent.ACTION_MOVE:
if (this.isTracking) {
this.updateAngle(event);
this.executeCallback(event, common.GestureStateTypes.changed);
}
break;

case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_POINTER_UP:
if (pointerID === this.trackedPtrId1) {
this.trackedPtrId1 = INVALID_POINTER_ID;
} else if (pointerID === this.trackedPtrId2) {
this.trackedPtrId2 = INVALID_POINTER_ID;
}
if (wasTracking && !this.isTracking) {
this.executeCallback(event, common.GestureStateTypes.ended);
}
break;

case android.view.MotionEvent.ACTION_CANCEL:
this.trackedPtrId1 = INVALID_POINTER_ID;
this.trackedPtrId2 = INVALID_POINTER_ID;
if (wasTracking) {
this.executeCallback(event, common.GestureStateTypes.cancelled);
}
break;
}
return true;
};
CustomRotateGestureDetector.prototype.executeCallback = function(event, state) {
var args = {
type: definition.GestureTypes.rotation,
view: this.target,
android: event,
rotation: this.angle,
ios: undefined,
object: this.target,
eventName: definition.toString(definition.GestureTypes.rotation),
state: state
};
_executeCallback(this.observer, args);
};
CustomRotateGestureDetector.prototype.updateAngle = function(event) {
var newPointersAngle = this.getPointersAngle(event);
var result = (newPointersAngle - this.initalPointersAngle) * TO_DEGREES % 360;
if (result < -180) {
result += 360;
}
if (result > 180) {
result -= 360;
}
this.angle = result;
};
CustomRotateGestureDetector.prototype.getPointersAngle = function(event) {
var firstX = event.getX(event.findPointerIndex(this.trackedPtrId1));
var firstY = event.getY(event.findPointerIndex(this.trackedPtrId1));
var secondX = event.getX(event.findPointerIndex(this.trackedPtrId2));
var secondY = event.getY(event.findPointerIndex(this.trackedPtrId2));
return Math.atan2(secondY - firstY, secondX - firstX);
};
return CustomRotateGestureDetector;
}();
var Pointer = function() {
function Pointer(id, event) {
this.event = event;
this.ios = undefined;
this.android = id;
}
Pointer.prototype.getX = function() {
return this.event.getX(this.android) / utils.layout.getDisplayDensity();
};
Pointer.prototype.getY = function() {
return this.event.getY(this.android) / utils.layout.getDisplayDensity();
};
return Pointer;
}();
var TouchGestureEventData = function() {
function TouchGestureEventData() {
this.eventName = definition.toString(definition.GestureTypes.touch);
this.type = definition.GestureTypes.touch;
this.ios = undefined;
}
TouchGestureEventData.prototype.prepare = function(view, e) {
this.view = view;
this.object = view;
this.android = e;
this.action = this.getActionType(e);
this._activePointers = undefined;
this._allPointers = undefined;
};
TouchGestureEventData.prototype.getPointerCount = function() {
return this.android.getPointerCount();
};
TouchGestureEventData.prototype.getActivePointers = function() {
if (!this._activePointers) {
this._activePointers = [ new Pointer(this.android.getActionIndex(), this.android) ];
}
return this._activePointers;
};
TouchGestureEventData.prototype.getAllPointers = function() {
if (!this._allPointers) {
this._allPointers = [];
for (var i = 0; i < this.getPointerCount(); i++) {
this._allPointers.push(new Pointer(i, this.android));
}
}
return this._allPointers;
};
TouchGestureEventData.prototype.getX = function() {
return this.getActivePointers()[0].getX();
};
TouchGestureEventData.prototype.getY = function() {
return this.getActivePointers()[0].getY();
};
TouchGestureEventData.prototype.getActionType = function(e) {
switch (e.getActionMasked()) {
case android.view.MotionEvent.ACTION_DOWN:
case android.view.MotionEvent.ACTION_POINTER_DOWN:
return common.TouchAction.down;

case android.view.MotionEvent.ACTION_MOVE:
return common.TouchAction.move;

case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_POINTER_UP:
return common.TouchAction.up;

case android.view.MotionEvent.ACTION_CANCEL:
return common.TouchAction.cancel;
}
return "";
};
return TouchGestureEventData;
}();
}, function(module, exports, __webpack_require__) {
var definition = __webpack_require__(64);
(function(GestureTypes) {
GestureTypes[GestureTypes["tap"] = 1] = "tap";
GestureTypes[GestureTypes["doubleTap"] = 2] = "doubleTap";
GestureTypes[GestureTypes["pinch"] = 4] = "pinch";
GestureTypes[GestureTypes["pan"] = 8] = "pan";
GestureTypes[GestureTypes["swipe"] = 16] = "swipe";
GestureTypes[GestureTypes["rotation"] = 32] = "rotation";
GestureTypes[GestureTypes["longPress"] = 64] = "longPress";
GestureTypes[GestureTypes["touch"] = 128] = "touch";
})(exports.GestureTypes || (exports.GestureTypes = {}));
var GestureTypes = exports.GestureTypes;
(function(GestureStateTypes) {
GestureStateTypes[GestureStateTypes["cancelled"] = 0] = "cancelled";
GestureStateTypes[GestureStateTypes["began"] = 1] = "began";
GestureStateTypes[GestureStateTypes["changed"] = 2] = "changed";
GestureStateTypes[GestureStateTypes["ended"] = 3] = "ended";
})(exports.GestureStateTypes || (exports.GestureStateTypes = {}));
var GestureStateTypes = exports.GestureStateTypes;
(function(SwipeDirection) {
SwipeDirection[SwipeDirection["right"] = 1] = "right";
SwipeDirection[SwipeDirection["left"] = 2] = "left";
SwipeDirection[SwipeDirection["up"] = 4] = "up";
SwipeDirection[SwipeDirection["down"] = 8] = "down";
})(exports.SwipeDirection || (exports.SwipeDirection = {}));
var SwipeDirection = exports.SwipeDirection;
var TouchAction;
(function(TouchAction) {
TouchAction.down = "down";
TouchAction.up = "up";
TouchAction.move = "move";
TouchAction.cancel = "cancel";
})(TouchAction = exports.TouchAction || (exports.TouchAction = {}));
function observe(target, type, callback, context) {
var observer = new definition.GesturesObserver(target, callback, context);
observer.observe(type);
return observer;
}
exports.observe = observe;
function toString(type, separator) {
var types = new Array();
if (type & definition.GestureTypes.tap) {
types.push("tap");
}
if (type & definition.GestureTypes.doubleTap) {
types.push("doubleTap");
}
if (type & definition.GestureTypes.pinch) {
types.push("pinch");
}
if (type & definition.GestureTypes.pan) {
types.push("pan");
}
if (type & definition.GestureTypes.swipe) {
types.push("swipe");
}
if (type & definition.GestureTypes.rotation) {
types.push("rotation");
}
if (type & definition.GestureTypes.longPress) {
types.push("longPress");
}
if (type & definition.GestureTypes.touch) {
types.push("touch");
}
return types.join(separator);
}
exports.toString = toString;
function fromString(type) {
var t = type.trim().toLowerCase();
if (t === "tap") {
return definition.GestureTypes.tap;
} else if (t === "doubletap") {
return definition.GestureTypes.doubleTap;
} else if (t === "pinch") {
return definition.GestureTypes.pinch;
} else if (t === "pan") {
return definition.GestureTypes.pan;
} else if (t === "swipe") {
return definition.GestureTypes.swipe;
} else if (t === "rotation") {
return definition.GestureTypes.rotation;
} else if (t === "longpress") {
return definition.GestureTypes.longPress;
} else if (t === "touch") {
return definition.GestureTypes.touch;
}
return undefined;
}
exports.fromString = fromString;
var GesturesObserver = function() {
function GesturesObserver(target, callback, context) {
this._target = target;
this._callback = callback;
this._context = context;
}
Object.defineProperty(GesturesObserver.prototype, "callback", {
get: function() {
return this._callback;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GesturesObserver.prototype, "target", {
get: function() {
return this._target;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GesturesObserver.prototype, "context", {
get: function() {
return this._context;
},
enumerable: true,
configurable: true
});
GesturesObserver.prototype.androidOnTouchEvent = function(motionEvent) {};
GesturesObserver.prototype.observe = function(type) {};
GesturesObserver.prototype.disconnect = function() {
if (this.target) {
var list = this.target.getGestureObservers(this.type);
if (list && list.length > 0) {
for (var i = 0; i < list.length; i++) {
if (list[i].callback === this.callback) {
break;
}
}
list.length = 0;
this.target._gestureObservers[this.type] = undefined;
delete this.target._gestureObservers[this.type];
}
}
this._target = null;
this._callback = null;
this._context = null;
};
return GesturesObserver;
}();
exports.GesturesObserver = GesturesObserver;
}, function(module, exports, __webpack_require__) {
var pageCommon = __webpack_require__(67);
var enums = __webpack_require__(23);
var actionBar = __webpack_require__(69);
var gridLayout = __webpack_require__(71);
global.moduleMerge(pageCommon, exports);
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(26);
}
}
var color;
function ensureColor() {
if (!color) {
color = __webpack_require__(27);
}
}
exports.DIALOG_FRAGMENT_TAG = "dialog";
var DialogFragmentClass;
function ensureDialogFragmentClass() {
if (DialogFragmentClass) {
return;
}
var DialogFragmentClassInner = function(_super) {
__extends(DialogFragmentClassInner, _super);
function DialogFragmentClassInner(owner, fullscreen, dismissCallback) {
_super.call(this);
this._owner = owner;
this._fullscreen = fullscreen;
this._dismissCallback = dismissCallback;
return global.__native(this);
}
DialogFragmentClassInner.prototype.onCreateDialog = function(savedInstanceState) {
var dialog = new android.app.Dialog(this._owner._context);
dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
this._owner.horizontalAlignment = this._fullscreen ? enums.HorizontalAlignment.stretch : enums.HorizontalAlignment.center;
this._owner.verticalAlignment = this._fullscreen ? enums.VerticalAlignment.stretch : enums.VerticalAlignment.center;
this._owner.actionBarHidden = true;
dialog.setContentView(this._owner._nativeView, this._owner._nativeView.getLayoutParams());
var window = dialog.getWindow();
window.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
if (this._fullscreen) {
window.setLayout(android.view.ViewGroup.LayoutParams.FILL_PARENT, android.view.ViewGroup.LayoutParams.FILL_PARENT);
}
return dialog;
};
DialogFragmentClassInner.prototype.onDismiss = function() {
if (typeof this._dismissCallback === "function") {
this._dismissCallback();
}
};
return DialogFragmentClassInner;
}(android.app.DialogFragment);
DialogFragmentClass = DialogFragmentClassInner;
}
var Page = function(_super) {
__extends(Page, _super);
function Page(options) {
_super.call(this, options);
this._isBackNavigation = false;
}
Object.defineProperty(Page.prototype, "android", {
get: function() {
return this._grid;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "_nativeView", {
get: function() {
return this._grid;
},
enumerable: true,
configurable: true
});
Page.prototype._createUI = function() {
this._grid = new org.nativescript.widgets.GridLayout(this._context);
this._grid.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.auto));
this._grid.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.star));
};
Page.prototype._addViewToNativeVisualTree = function(child, atIndex) {
if (this._nativeView && child._nativeView) {
if (child instanceof actionBar.ActionBar) {
gridLayout.GridLayout.setRow(child, 0);
child.horizontalAlignment = enums.HorizontalAlignment.stretch;
child.verticalAlignment = enums.VerticalAlignment.top;
} else {
gridLayout.GridLayout.setRow(child, 1);
}
}
return _super.prototype._addViewToNativeVisualTree.call(this, child, atIndex);
};
Page.prototype._onDetached = function(force) {
var skipDetached = !force && this.frame.android.cachePagesOnNavigate && !this._isBackNavigation;
if (skipDetached) {
ensureTrace();
trace.write("Caching " + this, trace.categories.NativeLifecycle);
} else {
_super.prototype._onDetached.call(this);
}
};
Page.prototype.onNavigatedFrom = function(isBackNavigation) {
this._isBackNavigation = isBackNavigation;
_super.prototype.onNavigatedFrom.call(this, isBackNavigation);
};
Page.prototype._showNativeModalView = function(parent, context, closeCallback, fullscreen) {
_super.prototype._showNativeModalView.call(this, parent, context, closeCallback, fullscreen);
if (!this.backgroundColor) {
ensureColor();
this.backgroundColor = new color.Color("White");
}
this._onAttached(parent._context);
this._isAddedToNativeVisualTree = true;
this.onLoaded();
ensureDialogFragmentClass();
var that = this;
this._dialogFragment = new DialogFragmentClass(this, fullscreen, function() {
that.closeModal();
});
_super.prototype._raiseShowingModallyEvent.call(this);
this._dialogFragment.show(parent.frame.android.activity.getFragmentManager(), exports.DIALOG_FRAGMENT_TAG);
_super.prototype._raiseShownModallyEvent.call(this, parent, context, closeCallback);
};
Page.prototype._hideNativeModalView = function(parent) {
this._dialogFragment.dismissAllowingStateLoss();
this._dialogFragment = null;
this.onUnloaded();
this._isAddedToNativeVisualTree = false;
this._onDetached(true);
_super.prototype._hideNativeModalView.call(this, parent);
};
Page.prototype._updateActionBar = function(hidden) {
this.actionBar.update();
};
return Page;
}(pageCommon.Page);
exports.Page = Page;
}, function(module, exports, __webpack_require__) {
var content_view_1 = __webpack_require__(68);
var view = __webpack_require__(11);
var styleScope = __webpack_require__(30);
var action_bar_1 = __webpack_require__(69);
var dependency_observable_1 = __webpack_require__(32);
var style = __webpack_require__(14);
var proxy = __webpack_require__(48);
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(18);
}
}
var frame;
function ensureFrame() {
if (!frame) {
frame = __webpack_require__(9);
}
}
var AffectsLayout = global.android ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
var backgroundSpanUnderStatusBarProperty = new dependency_observable_1.Property("backgroundSpanUnderStatusBar", "Page", new proxy.PropertyMetadata(false, AffectsLayout));
var actionBarHiddenProperty = new dependency_observable_1.Property("actionBarHidden", "Page", new proxy.PropertyMetadata(undefined, AffectsLayout));
function onActionBarHiddenPropertyChanged(data) {
var page = data.object;
if (page.isLoaded) {
page._updateActionBar(data.newValue);
}
}
actionBarHiddenProperty.metadata.onSetNativeValue = onActionBarHiddenPropertyChanged;
var Page = function(_super) {
__extends(Page, _super);
function Page(options) {
_super.call(this, options);
this._styleScope = new styleScope.StyleScope();
this._cssFiles = {};
this.actionBar = new action_bar_1.ActionBar();
}
Page.prototype.onLoaded = function() {
this.style._setValue(style.backgroundColorProperty, "white", dependency_observable_1.ValueSource.Inherited);
this._applyCss();
if (this.actionBarHidden !== undefined) {
this._updateActionBar(this.actionBarHidden);
}
_super.prototype.onLoaded.call(this);
};
Object.defineProperty(Page.prototype, "backgroundSpanUnderStatusBar", {
get: function() {
return this._getValue(Page.backgroundSpanUnderStatusBarProperty);
},
set: function(value) {
this._setValue(Page.backgroundSpanUnderStatusBarProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "actionBarHidden", {
get: function() {
return this._getValue(Page.actionBarHiddenProperty);
},
set: function(value) {
this._setValue(Page.actionBarHiddenProperty, value);
},
enumerable: true,
configurable: true
});
Page.prototype._updateActionBar = function(hidden) {};
Object.defineProperty(Page.prototype, "navigationContext", {
get: function() {
return this._navigationContext;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "css", {
get: function() {
if (this._styleScope) {
return this._styleScope.css;
}
return undefined;
},
set: function(value) {
this._styleScope.css = value;
this._refreshCss();
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "actionBar", {
get: function() {
return this._actionBar;
},
set: function(value) {
if (!value) {
throw new Error("ActionBar cannot be null or undefined.");
}
if (this._actionBar !== value) {
if (this._actionBar) {
this._actionBar.page = undefined;
this._removeView(this._actionBar);
}
this._actionBar = value;
this._actionBar.page = this;
this._addView(this._actionBar);
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "page", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
Page.prototype._refreshCss = function() {
if (this._cssApplied) {
this._resetCssValues();
}
this._cssApplied = false;
if (this.isLoaded) {
this._applyCss();
}
};
Page.prototype.addCss = function(cssString) {
this._addCssInternal(cssString, undefined);
};
Page.prototype._addCssInternal = function(cssString, cssFileName) {
this._styleScope.addCss(cssString, cssFileName);
this._refreshCss();
};
Page.prototype.addCssFile = function(cssFileName) {
ensureFS();
if (cssFileName.indexOf("~/") === 0) {
cssFileName = fs.path.join(fs.knownFolders.currentApp().path, cssFileName.replace("~/", ""));
}
if (!this._cssFiles[cssFileName]) {
if (fs.File.exists(cssFileName)) {
var file = fs.File.fromPath(cssFileName);
var text = file.readTextSync();
if (text) {
this._addCssInternal(text, cssFileName);
this._cssFiles[cssFileName] = true;
}
}
}
};
Object.defineProperty(Page.prototype, "frame", {
get: function() {
return this.parent;
},
enumerable: true,
configurable: true
});
Page.prototype.createNavigatedData = function(eventName, isBackNavigation) {
return {
eventName: eventName,
object: this,
context: this.navigationContext,
isBackNavigation: isBackNavigation
};
};
Page.prototype.onNavigatingTo = function(context, isBackNavigation) {
this._navigationContext = context;
this.notify(this.createNavigatedData(Page.navigatingToEvent, isBackNavigation));
};
Page.prototype.onNavigatedTo = function(isBackNavigation) {
this.notify(this.createNavigatedData(Page.navigatedToEvent, isBackNavigation));
};
Page.prototype.onNavigatingFrom = function(isBackNavigation) {
this.notify(this.createNavigatedData(Page.navigatingFromEvent, isBackNavigation));
};
Page.prototype.onNavigatedFrom = function(isBackNavigation) {
this.notify(this.createNavigatedData(Page.navigatedFromEvent, isBackNavigation));
this._navigationContext = undefined;
};
Page.prototype.showModal = function() {
ensureFrame();
if (arguments.length === 0) {
this._showNativeModalView(frame.topmost().currentPage, undefined, undefined, true);
} else {
var moduleName = arguments[0];
var context = arguments[1];
var closeCallback = arguments[2];
var fullscreen = arguments[3];
var page = frame.resolvePageFromEntry({
moduleName: moduleName
});
page._showNativeModalView(this, context, closeCallback, fullscreen);
}
};
Page.prototype.closeModal = function() {
if (this._closeModalCallback) {
this._closeModalCallback.apply(undefined, arguments);
}
};
Object.defineProperty(Page.prototype, "modal", {
get: function() {
return this._modal;
},
enumerable: true,
configurable: true
});
Page.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof action_bar_1.ActionBar) {
this.actionBar = value;
} else {
_super.prototype._addChildFromBuilder.call(this, name, value);
}
};
Page.prototype._showNativeModalView = function(parent, context, closeCallback, fullscreen) {
parent._modal = this;
var that = this;
this._closeModalCallback = function() {
if (that._closeModalCallback) {
that._closeModalCallback = null;
that._hideNativeModalView(parent);
if (typeof closeCallback === "function") {
closeCallback.apply(undefined, arguments);
}
}
};
};
Page.prototype._hideNativeModalView = function(parent) {
parent._modal = undefined;
};
Page.prototype._raiseShownModallyEvent = function(parent, context, closeCallback) {
this.notify({
eventName: Page.shownModallyEvent,
object: this,
context: context,
closeCallback: this._closeModalCallback
});
};
Page.prototype._raiseShowingModallyEvent = function() {
this.notify({
eventName: Page.showingModallyEvent,
object: this
});
};
Page.prototype._getStyleScope = function() {
return this._styleScope;
};
Page.prototype._eachChildView = function(callback) {
_super.prototype._eachChildView.call(this, callback);
callback(this.actionBar);
};
Object.defineProperty(Page.prototype, "_childrenCount", {
get: function() {
return (this.content ? 1 : 0) + (this.actionBar ? 1 : 0);
},
enumerable: true,
configurable: true
});
Page.prototype._applyCss = function() {
if (this._cssApplied) {
return;
}
this._styleScope.ensureSelectors();
var scope = this._styleScope;
var checkSelectors = function(view) {
scope.applySelectors(view);
return true;
};
checkSelectors(this);
view.eachDescendant(this, checkSelectors);
this._cssApplied = true;
};
Page.prototype._resetCssValues = function() {
var resetCssValuesFunc = function(view) {
view.style._resetCssValues();
return true;
};
resetCssValuesFunc(this);
view.eachDescendant(this, resetCssValuesFunc);
};
Page.backgroundSpanUnderStatusBarProperty = backgroundSpanUnderStatusBarProperty;
Page.actionBarHiddenProperty = actionBarHiddenProperty;
Page.navigatingToEvent = "navigatingTo";
Page.navigatedToEvent = "navigatedTo";
Page.navigatingFromEvent = "navigatingFrom";
Page.navigatedFromEvent = "navigatedFrom";
Page.shownModallyEvent = "shownModally";
Page.showingModallyEvent = "showingModally";
return Page;
}(content_view_1.ContentView);
exports.Page = Page;
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(11);
var utils = __webpack_require__(21);
var ContentView = function(_super) {
__extends(ContentView, _super);
function ContentView() {
_super.apply(this, arguments);
}
Object.defineProperty(ContentView.prototype, "content", {
get: function() {
return this._content;
},
set: function(value) {
var oldView = this._content;
if (this._content) {
this._removeView(this._content);
}
this._content = value;
if (this._content) {
this._addView(this._content);
}
this._onContentChanged(oldView, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ContentView.prototype, "layoutView", {
get: function() {
var result;
if (this._content) {
var first_1 = true;
this._content._eachLayoutView(function(child) {
if (first_1) {
first_1 = false;
result = child;
} else {
throw new Error("More than one layout child inside a ContentView");
}
});
}
return result;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ContentView.prototype, "_childrenCount", {
get: function() {
if (this._content) {
return 1;
}
return 0;
},
enumerable: true,
configurable: true
});
ContentView.prototype._onContentChanged = function(oldView, newView) {};
ContentView.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof view.View) {
this.content = value;
}
};
ContentView.prototype._eachChildView = function(callback) {
if (this._content) {
callback(this._content);
}
};
ContentView.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var result = view.View.measureChild(this, this.layoutView, widthMeasureSpec, heightMeasureSpec);
var width = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var height = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = utils.layout.getMeasureSpecMode(heightMeasureSpec);
var density = utils.layout.getDisplayDensity();
var measureWidth = Math.max(result.measuredWidth, this.minWidth * density);
var measureHeight = Math.max(result.measuredHeight, this.minHeight * density);
var widthAndState = view.View.resolveSizeAndState(measureWidth, width, widthMode, 0);
var heightAndState = view.View.resolveSizeAndState(measureHeight, height, heightMode, 0);
this.setMeasuredDimension(widthAndState, heightAndState);
};
ContentView.prototype.onLayout = function(left, top, right, bottom) {
view.View.layoutChild(this, this.layoutView, 0, 0, right - left, bottom - top);
};
return ContentView;
}(view.CustomLayoutView);
exports.ContentView = ContentView;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(70);
var frame = __webpack_require__(9);
var types = __webpack_require__(13);
var enums = __webpack_require__(23);
var application = __webpack_require__(15);
var style = __webpack_require__(14);
var R_ID_HOME = 16908332;
var ACTION_ITEM_ID_OFFSET = 1e3;
global.moduleMerge(common, exports);
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(26);
}
}
var utils;
function ensureUtils() {
if (!utils) {
utils = __webpack_require__(21);
}
}
var imageSource;
function ensureImageSource() {
if (!imageSource) {
imageSource = __webpack_require__(59);
}
}
var actionItemIdGenerator = ACTION_ITEM_ID_OFFSET;
function generateItemId() {
actionItemIdGenerator++;
return actionItemIdGenerator;
}
var ActionItem = function(_super) {
__extends(ActionItem, _super);
function ActionItem() {
_super.call(this);
this._androidPosition = {
position: enums.AndroidActionItemPosition.actionBar,
systemIcon: undefined
};
this._itemId = generateItemId();
}
Object.defineProperty(ActionItem.prototype, "android", {
get: function() {
return this._androidPosition;
},
set: function(value) {
throw new Error("ActionItem.android is read-only");
},
enumerable: true,
configurable: true
});
ActionItem.prototype._getItemId = function() {
return this._itemId;
};
return ActionItem;
}(common.ActionItem);
exports.ActionItem = ActionItem;
var AndroidActionBarSettings = function() {
function AndroidActionBarSettings(actionBar) {
this._iconVisibility = enums.AndroidActionBarIconVisibility.auto;
this._actionBar = actionBar;
}
Object.defineProperty(AndroidActionBarSettings.prototype, "icon", {
get: function() {
return this._icon;
},
set: function(value) {
if (value !== this._icon) {
this._icon = value;
this._actionBar._onIconPropertyChanged();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidActionBarSettings.prototype, "iconVisibility", {
get: function() {
return this._iconVisibility;
},
set: function(value) {
if (value !== this._iconVisibility) {
this._iconVisibility = value;
this._actionBar._onIconPropertyChanged();
}
},
enumerable: true,
configurable: true
});
return AndroidActionBarSettings;
}();
exports.AndroidActionBarSettings = AndroidActionBarSettings;
var NavigationButton = function(_super) {
__extends(NavigationButton, _super);
function NavigationButton() {
_super.apply(this, arguments);
}
return NavigationButton;
}(ActionItem);
exports.NavigationButton = NavigationButton;
var ActionBar = function(_super) {
__extends(ActionBar, _super);
function ActionBar() {
_super.call(this);
this._appResources = application.android.context.getResources();
this._android = new AndroidActionBarSettings(this);
}
Object.defineProperty(ActionBar.prototype, "android", {
get: function() {
return this._android;
},
set: function(value) {
throw new Error("ActionBar.android is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "_nativeView", {
get: function() {
return this._toolbar;
},
enumerable: true,
configurable: true
});
ActionBar.prototype._createUI = function() {
this._toolbar = new android.support.v7.widget.Toolbar(this._context);
var owner = this;
this._toolbar.setOnMenuItemClickListener(new android.support.v7.widget.Toolbar.OnMenuItemClickListener({
onMenuItemClick: function(item) {
var itemId = item.getItemId();
return owner._onAndroidItemSelected(itemId);
}
}));
};
ActionBar.prototype.onLoaded = function() {
_super.prototype.onLoaded.call(this);
this.update();
};
ActionBar.prototype.update = function() {
if (!this._toolbar) {
return;
}
if (!this.page.frame || !this.page.frame._getNavBarVisible(this.page)) {
this._toolbar.setVisibility(android.view.View.GONE);
return;
}
this._toolbar.setVisibility(android.view.View.VISIBLE);
this._addActionItems();
this._updateTitleAndTitleView();
this._updateIcon();
this._updateNavigationButton();
};
ActionBar.prototype._onAndroidItemSelected = function(itemId) {
if (this.navigationButton && itemId === R_ID_HOME) {
this.navigationButton._raiseTap();
return true;
}
var menuItem = undefined;
var items = this.actionItems.getItems();
for (var i = 0; i < items.length; i++) {
if (items[i]._getItemId() === itemId) {
menuItem = items[i];
break;
}
}
if (menuItem) {
menuItem._raiseTap();
return true;
}
return false;
};
ActionBar.prototype._updateNavigationButton = function() {
var navButton = this.navigationButton;
if (navButton && common.isVisible(navButton)) {
if (navButton.android.systemIcon) {
var systemResourceId = getSystemResourceId(navButton.android.systemIcon);
if (systemResourceId) {
this._toolbar.setNavigationIcon(systemResourceId);
}
} else if (navButton.icon) {
var drawableOrId = getDrawableOrResourceId(navButton.icon, this._appResources);
this._toolbar.setNavigationIcon(drawableOrId);
}
this._toolbar.setNavigationOnClickListener(new android.view.View.OnClickListener({
onClick: function(v) {
if (navButton) {
navButton._raiseTap();
}
}
}));
} else {
this._toolbar.setNavigationIcon(null);
}
};
ActionBar.prototype._updateIcon = function() {
var visibility = getIconVisibility(this.android.iconVisibility);
if (visibility) {
var icon = this.android.icon;
if (types.isDefined(icon)) {
var drawableOrId = getDrawableOrResourceId(icon, this._appResources);
if (drawableOrId) {
this._toolbar.setLogo(drawableOrId);
}
} else {
var defaultIcon = application.android.nativeApp.getApplicationInfo().icon;
this._toolbar.setLogo(defaultIcon);
}
} else {
this._toolbar.setLogo(null);
}
};
ActionBar.prototype._updateTitleAndTitleView = function() {
if (!this.titleView) {
var title = this.title;
if (types.isDefined(title)) {
this._toolbar.setTitle(title);
} else {
var appContext = application.android.context;
var appInfo = appContext.getApplicationInfo();
var appLabel = appContext.getPackageManager().getApplicationLabel(appInfo);
if (appLabel) {
this._toolbar.setTitle(appLabel);
}
}
}
};
ActionBar.prototype._addActionItems = function() {
var menu = this._toolbar.getMenu();
var items = this.actionItems.getVisibleItems();
menu.clear();
for (var i = 0; i < items.length; i++) {
var item = items[i];
var menuItem = menu.add(android.view.Menu.NONE, item._getItemId(), android.view.Menu.NONE, item.text + "");
if (item.actionView && item.actionView.android) {
item.android.position = enums.AndroidActionItemPosition.actionBar;
menuItem.setActionView(item.actionView.android);
menuItem.getActionView().setOnClickListener(new android.view.View.OnClickListener({
onClick: function() {
item._raiseTap();
}
}));
} else if (item.android.systemIcon) {
var systemResourceId = getSystemResourceId(item.android.systemIcon);
if (systemResourceId) {
menuItem.setIcon(systemResourceId);
}
} else if (item.icon) {
var drawableOrId = getDrawableOrResourceId(item.icon, this._appResources);
if (drawableOrId) {
menuItem.setIcon(drawableOrId);
} else {
throw new Error("Error loading icon from " + item.icon);
}
}
var showAsAction = getShowAsAction(item);
menuItem.setShowAsAction(showAsAction);
}
};
ActionBar.prototype._onTitlePropertyChanged = function() {
var topFrame = frame.topmost();
if (this._toolbar && topFrame && topFrame.currentPage === this.page) {
this._updateTitleAndTitleView();
}
};
ActionBar.prototype._onIconPropertyChanged = function() {
var topFrame = frame.topmost();
if (this._toolbar && topFrame && topFrame.currentPage === this.page) {
this._updateIcon();
}
};
ActionBar.prototype._clearAndroidReference = function() {
this._toolbar = undefined;
};
ActionBar.prototype._addViewToNativeVisualTree = function(child, atIndex) {
_super.prototype._addViewToNativeVisualTree.call(this, child);
if (this._toolbar && child._nativeView) {
if (types.isNullOrUndefined(atIndex) || atIndex >= this._nativeView.getChildCount()) {
this._toolbar.addView(child._nativeView);
} else {
this._toolbar.addView(child._nativeView, atIndex);
}
return true;
}
return false;
};
ActionBar.prototype._removeViewFromNativeVisualTree = function(child) {
_super.prototype._removeViewFromNativeVisualTree.call(this, child);
if (this._toolbar && child._nativeView) {
this._toolbar.removeView(child._nativeView);
ensureTrace();
trace.notifyEvent(child, "childInLayoutRemovedFromNativeVisualTree");
}
};
return ActionBar;
}(common.ActionBar);
exports.ActionBar = ActionBar;
function getDrawableOrResourceId(icon, resources) {
if (!types.isString(icon)) {
return undefined;
}
ensureUtils();
if (icon.indexOf(utils.RESOURCE_PREFIX) === 0) {
var resourceId = resources.getIdentifier(icon.substr(utils.RESOURCE_PREFIX.length), "drawable", application.android.packageName);
if (resourceId > 0) {
return resourceId;
}
} else {
var drawable;
ensureImageSource();
var is = imageSource.fromFileOrResource(icon);
if (is) {
drawable = new android.graphics.drawable.BitmapDrawable(is.android);
}
return drawable;
}
return undefined;
}
function getShowAsAction(menuItem) {
switch (menuItem.android.position) {
case enums.AndroidActionItemPosition.actionBarIfRoom:
return android.view.MenuItem.SHOW_AS_ACTION_IF_ROOM;

case enums.AndroidActionItemPosition.popup:
return android.view.MenuItem.SHOW_AS_ACTION_NEVER;

case enums.AndroidActionItemPosition.actionBar:
default:
return android.view.MenuItem.SHOW_AS_ACTION_ALWAYS;
}
}
function getIconVisibility(iconVisibility) {
switch (iconVisibility) {
case enums.AndroidActionBarIconVisibility.always:
return true;

case enums.AndroidActionBarIconVisibility.auto:
case enums.AndroidActionBarIconVisibility.never:
default:
return false;
}
}
function getSystemResourceId(systemIcon) {
return android.content.res.Resources.getSystem().getIdentifier(systemIcon, "drawable", "android");
}
var ActionBarStyler = function() {
function ActionBarStyler() {}
ActionBarStyler.setColorProperty = function(v, newValue) {
var toolbar = v._nativeView;
toolbar.setTitleTextColor(newValue);
};
ActionBarStyler.resetColorProperty = function(v, nativeValue) {
if (types.isNullOrUndefined(nativeValue)) {
nativeValue = android.graphics.Color.BLACK;
}
v._nativeView.setTitleTextColor(nativeValue);
};
ActionBarStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(ActionBarStyler.setColorProperty, ActionBarStyler.resetColorProperty), "ActionBar");
};
return ActionBarStyler;
}();
exports.ActionBarStyler = ActionBarStyler;
ActionBarStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var dts = __webpack_require__(69);
var bindable = __webpack_require__(49);
var dependencyObservable = __webpack_require__(32);
var enums = __webpack_require__(23);
var proxy = __webpack_require__(48);
var view = __webpack_require__(11);
var ACTION_ITEMS = "actionItems";
var style;
function ensureStyle() {
if (!style) {
style = __webpack_require__(14);
}
}
var knownCollections;
(function(knownCollections) {
knownCollections.actionItems = "actionItems";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
function onTitlePropertyChanged(data) {
var actionBar = data.object;
actionBar._onTitlePropertyChanged();
}
var ActionBar = function(_super) {
__extends(ActionBar, _super);
function ActionBar() {
_super.call(this);
this._actionItems = new ActionItems(this);
}
Object.defineProperty(ActionBar.prototype, "title", {
get: function() {
return this._getValue(ActionBar.titleProperty);
},
set: function(value) {
this._setValue(ActionBar.titleProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "navigationButton", {
get: function() {
return this._navigationButton;
},
set: function(value) {
if (this._navigationButton !== value) {
if (this._navigationButton) {
this._navigationButton.actionBar = undefined;
}
this._navigationButton = value;
if (this._navigationButton) {
this._navigationButton.actionBar = this;
}
this.update();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "actionItems", {
get: function() {
return this._actionItems;
},
set: function(value) {
throw new Error("actionItems property is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "titleView", {
get: function() {
return this._titleView;
},
set: function(value) {
if (this._titleView !== value) {
ensureStyle();
if (this._titleView) {
this._removeView(this._titleView);
this._titleView.style._resetValue(style.horizontalAlignmentProperty, dependencyObservable.ValueSource.Inherited);
this._titleView.style._resetValue(style.verticalAlignmentProperty, dependencyObservable.ValueSource.Inherited);
}
this._titleView = value;
if (this._titleView) {
this._titleView.style._setValue(style.horizontalAlignmentProperty, enums.HorizontalAlignment.center, dependencyObservable.ValueSource.Inherited);
this._titleView.style._setValue(style.verticalAlignmentProperty, enums.VerticalAlignment.center, dependencyObservable.ValueSource.Inherited);
this._addView(this._titleView);
}
this.update();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "page", {
get: function() {
return this._page;
},
set: function(value) {
this._page = value;
this.unbind("bindingContext");
this.bind({
sourceProperty: "bindingContext",
targetProperty: "bindingContext"
}, this._page);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "android", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "_childrenCount", {
get: function() {
var actionViewsCount = 0;
this._actionItems.getItems().forEach(function(actionItem) {
if (actionItem.actionView) {
actionViewsCount++;
}
});
return actionViewsCount + (this.titleView ? 1 : 0);
},
enumerable: true,
configurable: true
});
ActionBar.prototype.update = function() {};
ActionBar.prototype._onTitlePropertyChanged = function() {};
ActionBar.prototype._addArrayFromBuilder = function(name, value) {
if (name === ACTION_ITEMS) {
this.actionItems.setItems(value);
}
};
ActionBar.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof dts.NavigationButton) {
this.navigationButton = value;
} else if (value instanceof dts.ActionItem) {
this.actionItems.addItem(value);
} else if (value instanceof view.View) {
this.titleView = value;
}
};
ActionBar.prototype._onBindingContextChanged = function(oldValue, newValue) {
_super.prototype._onBindingContextChanged.call(this, oldValue, newValue);
if (this._navigationButton) {
this._navigationButton.bindingContext = newValue;
}
this._actionItems.getItems().forEach(function(item, i, arr) {
item.bindingContext = newValue;
});
};
ActionBar.prototype._eachChildView = function(callback) {
if (this.titleView) {
callback(this.titleView);
}
this.actionItems.getItems().forEach(function(actionItem) {
if (actionItem.actionView) {
callback(actionItem.actionView);
}
});
};
ActionBar.prototype._isEmpty = function() {
if (this.title || this.titleView || this.android && this.android.icon || this.navigationButton || this.actionItems.getItems().length > 0) {
return false;
}
return true;
};
ActionBar.titleProperty = new dependencyObservable.Property("title", "ActionBar", new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None, onTitlePropertyChanged));
return ActionBar;
}(view.View);
exports.ActionBar = ActionBar;
var ActionItems = function() {
function ActionItems(actionBar) {
this._items = new Array();
this._actionBar = actionBar;
}
ActionItems.prototype.addItem = function(item) {
if (!item) {
throw new Error("Cannot add empty item");
}
this._items.push(item);
item.actionBar = this._actionBar;
this.invalidate();
};
ActionItems.prototype.removeItem = function(item) {
if (!item) {
throw new Error("Cannot remove empty item");
}
var itemIndex = this._items.indexOf(item);
if (itemIndex < 0) {
throw new Error("Cannot find item to remove");
}
this._items.splice(itemIndex, 1);
item.actionBar = undefined;
this.invalidate();
};
ActionItems.prototype.getItems = function() {
return this._items.slice();
};
ActionItems.prototype.getVisibleItems = function() {
var visibleItems = [];
this._items.forEach(function(item) {
if (isVisible(item)) {
visibleItems.push(item);
}
});
return visibleItems;
};
ActionItems.prototype.getItemAt = function(index) {
if (index < 0 || index >= this._items.length) {
return undefined;
}
return this._items[index];
};
ActionItems.prototype.setItems = function(items) {
while (this._items.length > 0) {
this.removeItem(this._items[this._items.length - 1]);
}
for (var i = 0; i < items.length; i++) {
this.addItem(items[i]);
}
this.invalidate();
};
ActionItems.prototype.invalidate = function() {
if (this._actionBar) {
this._actionBar.update();
}
};
return ActionItems;
}();
exports.ActionItems = ActionItems;
var ActionItem = function(_super) {
__extends(ActionItem, _super);
function ActionItem() {
_super.apply(this, arguments);
}
Object.defineProperty(ActionItem.prototype, "actionView", {
get: function() {
return this._actionView;
},
set: function(value) {
if (this._actionView !== value) {
ensureStyle();
if (this._actionView && this._actionBar) {
this._actionBar._removeView(this._actionView);
this._actionView.style._resetValue(style.horizontalAlignmentProperty, dependencyObservable.ValueSource.Inherited);
this._actionView.style._resetValue(style.verticalAlignmentProperty, dependencyObservable.ValueSource.Inherited);
}
this._actionView = value;
this._addActionViewToActionBar();
if (this._actionBar) {
this._actionBar.update();
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItem.prototype, "text", {
get: function() {
return this._getValue(ActionItem.textProperty);
},
set: function(value) {
this._setValue(ActionItem.textProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItem.prototype, "icon", {
get: function() {
return this._getValue(ActionItem.iconProperty);
},
set: function(value) {
this._setValue(ActionItem.iconProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItem.prototype, "visibility", {
get: function() {
return this._getValue(ActionItem.visibilityProperty);
},
set: function(value) {
this._setValue(ActionItem.visibilityProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItem.prototype, "actionBar", {
get: function() {
return this._actionBar;
},
set: function(value) {
if (value !== this._actionBar) {
this._actionBar = value;
if (this._actionBar) {
this.bindingContext = this._actionBar.bindingContext;
this._addActionViewToActionBar();
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItem.prototype, "page", {
get: function() {
return this.actionBar ? this.actionBar.page : undefined;
},
enumerable: true,
configurable: true
});
ActionItem.prototype._raiseTap = function() {
this._emit(ActionItem.tapEvent);
};
ActionItem.onItemChanged = function(data) {
var menuItem = data.object;
if (menuItem.actionBar) {
menuItem.actionBar.update();
}
};
ActionItem.prototype._addActionViewToActionBar = function() {
if (this._actionView && !this._actionView._isAddedToNativeVisualTree && this._actionBar) {
ensureStyle();
this._actionView.style._setValue(style.horizontalAlignmentProperty, enums.HorizontalAlignment.center, dependencyObservable.ValueSource.Inherited);
this._actionView.style._setValue(style.verticalAlignmentProperty, enums.VerticalAlignment.center, dependencyObservable.ValueSource.Inherited);
this._actionBar._addView(this._actionView);
}
};
ActionItem.prototype._addChildFromBuilder = function(name, value) {
this.actionView = value;
};
ActionItem.tapEvent = "tap";
ActionItem.textProperty = new dependencyObservable.Property("text", "ActionItem", new dependencyObservable.PropertyMetadata("", null, ActionItem.onItemChanged));
ActionItem.iconProperty = new dependencyObservable.Property("icon", "ActionItem", new dependencyObservable.PropertyMetadata(null, null, ActionItem.onItemChanged));
ActionItem.visibilityProperty = new dependencyObservable.Property("visibility", "ActionItem", new dependencyObservable.PropertyMetadata(enums.Visibility.visible, null, ActionItem.onItemChanged));
return ActionItem;
}(bindable.Bindable);
exports.ActionItem = ActionItem;
function isVisible(item) {
return item.visibility === enums.Visibility.visible;
}
exports.isVisible = isVisible;
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(21);
var common = __webpack_require__(72);
var view_1 = __webpack_require__(11);
global.moduleMerge(common, exports);
function setNativeProperty(data, setter) {
var view = data.object;
if (view instanceof view_1.View) {
var nativeView = view._nativeView;
var lp = nativeView.getLayoutParams();
if (!(lp instanceof org.nativescript.widgets.CommonLayoutParams)) {
lp = new org.nativescript.widgets.CommonLayoutParams();
}
setter(lp);
nativeView.setLayoutParams(lp);
}
}
function setNativeRowProperty(data) {
setNativeProperty(data, function(lp) {
lp.row = data.newValue;
});
}
function setNativeRowSpanProperty(data) {
setNativeProperty(data, function(lp) {
lp.rowSpan = data.newValue;
});
}
function setNativeColumnProperty(data) {
setNativeProperty(data, function(lp) {
lp.column = data.newValue;
});
}
function setNativeColumnSpanProperty(data) {
setNativeProperty(data, function(lp) {
lp.columnSpan = data.newValue;
});
}
common.GridLayout.rowProperty.metadata.onSetNativeValue = setNativeRowProperty;
common.GridLayout.rowSpanProperty.metadata.onSetNativeValue = setNativeRowSpanProperty;
common.GridLayout.columnProperty.metadata.onSetNativeValue = setNativeColumnProperty;
common.GridLayout.columnSpanProperty.metadata.onSetNativeValue = setNativeColumnSpanProperty;
function createNativeSpec(itemSpec) {
switch (itemSpec.gridUnitType) {
case common.GridUnitType.auto:
return new org.nativescript.widgets.ItemSpec(itemSpec.value, org.nativescript.widgets.GridUnitType.auto);

case common.GridUnitType.star:
return new org.nativescript.widgets.ItemSpec(itemSpec.value, org.nativescript.widgets.GridUnitType.star);

case common.GridUnitType.pixel:
return new org.nativescript.widgets.ItemSpec(itemSpec.value * utils.layout.getDisplayDensity(), org.nativescript.widgets.GridUnitType.pixel);

default:
throw new Error("Invalid gridUnitType: " + itemSpec.gridUnitType);
}
}
var ItemSpec = function(_super) {
__extends(ItemSpec, _super);
function ItemSpec() {
_super.apply(this, arguments);
}
Object.defineProperty(ItemSpec.prototype, "actualLength", {
get: function() {
if (this.nativeSpec) {
return Math.round(this.nativeSpec.getActualLength() / utils.layout.getDisplayDensity());
}
return 0;
},
enumerable: true,
configurable: true
});
return ItemSpec;
}(common.ItemSpec);
exports.ItemSpec = ItemSpec;
var GridLayout = function(_super) {
__extends(GridLayout, _super);
function GridLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(GridLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GridLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
GridLayout.prototype._createUI = function() {
var _this = this;
this._layout = new org.nativescript.widgets.GridLayout(this._context);
this.getRows().forEach(function(itemSpec, index, rows) {
_this.onRowAdded(itemSpec);
}, this);
this.getColumns().forEach(function(itemSpec, index, rows) {
_this.onColumnAdded(itemSpec);
}, this);
};
GridLayout.prototype.onRowAdded = function(itemSpec) {
if (this._layout) {
var nativeSpec = createNativeSpec(itemSpec);
itemSpec.nativeSpec = nativeSpec;
this._layout.addRow(nativeSpec);
}
};
GridLayout.prototype.onColumnAdded = function(itemSpec) {
if (this._layout) {
var nativeSpec = createNativeSpec(itemSpec);
itemSpec.nativeSpec = nativeSpec;
this._layout.addColumn(nativeSpec);
}
};
GridLayout.prototype.onRowRemoved = function(itemSpec, index) {
itemSpec.nativeSpec = null;
if (this._layout) {
this._layout.removeRowAt(index);
}
};
GridLayout.prototype.onColumnRemoved = function(itemSpec, index) {
itemSpec.nativeSpec = null;
if (this._layout) {
this._layout.removeColumnAt(index);
}
};
GridLayout.prototype.invalidate = function() {};
return GridLayout;
}(common.GridLayout);
exports.GridLayout = GridLayout;
}, function(module, exports, __webpack_require__) {
var layout_base_1 = __webpack_require__(73);
var view_1 = __webpack_require__(11);
var bindable_1 = __webpack_require__(49);
var proxy_1 = __webpack_require__(48);
var dependency_observable_1 = __webpack_require__(32);
var special_properties_1 = __webpack_require__(55);
var numberUtils = __webpack_require__(74);
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(13);
}
}
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
var GridUnitType;
(function(GridUnitType) {
GridUnitType.auto = "auto";
GridUnitType.pixel = "pixel";
GridUnitType.star = "star";
})(GridUnitType = exports.GridUnitType || (exports.GridUnitType = {}));
special_properties_1.registerSpecialProperty("row", function(instance, propertyValue) {
GridLayout.setRow(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("col", function(instance, propertyValue) {
GridLayout.setColumn(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("colSpan", function(instance, propertyValue) {
GridLayout.setColumnSpan(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("rowSpan", function(instance, propertyValue) {
GridLayout.setRowSpan(instance, !isNaN(+propertyValue) && +propertyValue);
});
var ItemSpec = function(_super) {
__extends(ItemSpec, _super);
function ItemSpec() {
_super.call(this);
this._actualLength = 0;
if (arguments.length === 0) {
this._value = 1;
this._unitType = GridUnitType.star;
} else if (arguments.length === 2) {
ensureTypes();
if (types.isNumber(arguments[0]) && types.isString(arguments[1])) {
if (arguments[0] < 0 || arguments[1] !== GridUnitType.auto && arguments[1] !== GridUnitType.star && arguments[1] !== GridUnitType.pixel) {
throw new Error("Invalid values.");
}
this._value = arguments[0];
this._unitType = arguments[1];
} else {
throw new Error("Arguments must be number and string.");
}
} else {
throw new Error("ItemSpec expects 0 or 2 arguments");
}
this.index = -1;
}
ItemSpec.create = function(value, type) {
var spec = new ItemSpec();
spec._value = value;
spec._unitType = type;
return spec;
};
Object.defineProperty(ItemSpec.prototype, "actualLength", {
get: function() {
return this._actualLength;
},
set: function(value) {
throw new Error("actualLength is read-only property");
},
enumerable: true,
configurable: true
});
ItemSpec.equals = function(value1, value2) {
return value1.gridUnitType === value2.gridUnitType && value1.value === value2.value && value1.owner === value2.owner && value1.index === value2.index;
};
Object.defineProperty(ItemSpec.prototype, "gridUnitType", {
get: function() {
return this._unitType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "isAbsolute", {
get: function() {
return this._unitType === GridUnitType.pixel;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "isAuto", {
get: function() {
return this._unitType === GridUnitType.auto;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "isStar", {
get: function() {
return this._unitType === GridUnitType.star;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "value", {
get: function() {
return this._value;
},
enumerable: true,
configurable: true
});
return ItemSpec;
}(bindable_1.Bindable);
exports.ItemSpec = ItemSpec;
var GridLayout = function(_super) {
__extends(GridLayout, _super);
function GridLayout() {
_super.apply(this, arguments);
this._rows = new Array();
this._cols = new Array();
}
GridLayout.getColumn = function(element) {
return validateArgs(element)._getValue(GridLayout.columnProperty);
};
GridLayout.setColumn = function(element, value) {
validateArgs(element)._setValue(GridLayout.columnProperty, value);
};
GridLayout.getColumnSpan = function(element) {
return validateArgs(element)._getValue(GridLayout.columnSpanProperty);
};
GridLayout.setColumnSpan = function(element, value) {
validateArgs(element)._setValue(GridLayout.columnSpanProperty, value);
};
GridLayout.getRow = function(element) {
return validateArgs(element)._getValue(GridLayout.rowProperty);
};
GridLayout.setRow = function(element, value) {
validateArgs(element)._setValue(GridLayout.rowProperty, value);
};
GridLayout.getRowSpan = function(element) {
return validateArgs(element)._getValue(GridLayout.rowSpanProperty);
};
GridLayout.setRowSpan = function(element, value) {
validateArgs(element)._setValue(GridLayout.rowSpanProperty, value);
};
GridLayout.prototype.addRow = function(itemSpec) {
GridLayout.validateItemSpec(itemSpec);
itemSpec.owner = this;
this._rows.push(itemSpec);
this.onRowAdded(itemSpec);
this.invalidate();
};
GridLayout.prototype.addColumn = function(itemSpec) {
GridLayout.validateItemSpec(itemSpec);
itemSpec.owner = this;
this._cols.push(itemSpec);
this.onColumnAdded(itemSpec);
this.invalidate();
};
GridLayout.prototype.removeRow = function(itemSpec) {
if (!itemSpec) {
throw new Error("Value is null.");
}
var index = this._rows.indexOf(itemSpec);
if (itemSpec.owner !== this || index < 0) {
throw new Error("Row is not child of this GridLayout");
}
itemSpec.index = -1;
this._rows.splice(index, 1);
this.onRowRemoved(itemSpec, index);
this.invalidate();
};
GridLayout.prototype.removeColumn = function(itemSpec) {
if (!itemSpec) {
throw new Error("Value is null.");
}
var index = this._cols.indexOf(itemSpec);
if (itemSpec.owner !== this || index < 0) {
throw new Error("Column is not child of this GridLayout");
}
itemSpec.index = -1;
this._cols.splice(index, 1);
this.onColumnRemoved(itemSpec, index);
this.invalidate();
};
GridLayout.prototype.removeColumns = function() {
for (var i = 0; i < this._cols.length; i++) {
this._cols[i].index = -1;
}
this._cols.length = 0;
this.invalidate();
};
GridLayout.prototype.removeRows = function() {
for (var i = 0; i < this._rows.length; i++) {
this._rows[i].index = -1;
}
this._rows.length = 0;
this.invalidate();
};
GridLayout.prototype.onRowChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayout.prototype.onRowSpanChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayout.prototype.onColumnChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayout.prototype.onColumnSpanChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayout.prototype.onRowAdded = function(itemSpec) {};
GridLayout.prototype.onColumnAdded = function(itemSpec) {};
GridLayout.prototype.onRowRemoved = function(itemSpec, index) {};
GridLayout.prototype.onColumnRemoved = function(itemSpec, index) {};
GridLayout.prototype.getColumns = function() {
return this._cols.slice();
};
GridLayout.prototype.getRows = function() {
return this._rows.slice();
};
Object.defineProperty(GridLayout.prototype, "columnsInternal", {
get: function() {
return this._cols;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GridLayout.prototype, "rowsInternal", {
get: function() {
return this._rows;
},
enumerable: true,
configurable: true
});
GridLayout.prototype.invalidate = function() {
this.requestLayout();
};
GridLayout.prototype._applyXmlAttribute = function(attributeName, attributeValue) {
if (attributeName === "columns") {
this._setColumns(attributeValue);
return true;
} else if (attributeName === "rows") {
this._setRows(attributeValue);
return true;
}
return _super.prototype._applyXmlAttribute.call(this, attributeName, attributeValue);
};
GridLayout.parseItemSpecs = function(value) {
var result = new Array();
var arr = value.split(/[\s,]+/);
for (var i = 0; i < arr.length; i++) {
var str = arr[i].trim();
if (str.length > 0) {
result.push(GridLayout.convertGridLength(arr[i].trim()));
}
}
return result;
};
GridLayout.convertGridLength = function(value) {
if (value === "auto") {
return ItemSpec.create(1, GridUnitType.auto);
} else if (value.indexOf("*") !== -1) {
var starCount = parseInt(value.replace("*", "") || "1");
return ItemSpec.create(starCount, GridUnitType.star);
} else if (!isNaN(parseInt(value))) {
return ItemSpec.create(parseInt(value), GridUnitType.pixel);
} else {
throw new Error("Cannot parse item spec from string: " + value);
}
};
GridLayout.onRowPropertyChanged = function(data) {
var element = GridLayout.getView(data.object);
var grid = element.parent;
if (grid instanceof GridLayout) {
grid.onRowChanged(element, data.oldValue, data.newValue);
}
};
GridLayout.onColumnPropertyChanged = function(data) {
var element = GridLayout.getView(data.object);
var grid = element.parent;
if (grid instanceof GridLayout) {
grid.onColumnChanged(element, data.oldValue, data.newValue);
}
};
GridLayout.onRowSpanPropertyChanged = function(data) {
var element = GridLayout.getView(data.object);
var grid = element.parent;
if (grid instanceof GridLayout) {
grid.onRowSpanChanged(element, data.oldValue, data.newValue);
}
};
GridLayout.onColumnSpanPropertyChanged = function(data) {
var element = GridLayout.getView(data.object);
var grid = element.parent;
if (grid instanceof GridLayout) {
grid.onColumnSpanChanged(element, data.oldValue, data.newValue);
}
};
GridLayout.validateItemSpec = function(itemSpec) {
if (!itemSpec) {
throw new Error("Value cannot be undefined.");
}
if (itemSpec.owner) {
throw new Error("itemSpec is already added to GridLayout.");
}
};
GridLayout.getView = function(object) {
if (object instanceof view_1.View) {
return object;
}
throw new Error("Element is not View or its descendant.");
};
GridLayout.prototype._setColumns = function(value) {
this.removeColumns();
var columns = GridLayout.parseItemSpecs(value);
for (var i = 0, count = columns.length; i < count; i++) {
this.addColumn(columns[i]);
}
};
GridLayout.prototype._setRows = function(value) {
this.removeRows();
var rows = GridLayout.parseItemSpecs(value);
for (var i = 0, count = rows.length; i < count; i++) {
this.addRow(rows[i]);
}
};
GridLayout.columnProperty = new dependency_observable_1.Property("Column", "GridLayout", new proxy_1.PropertyMetadata(0, dependency_observable_1.PropertyMetadataSettings.None, GridLayout.onColumnPropertyChanged, numberUtils.notNegative));
GridLayout.columnSpanProperty = new dependency_observable_1.Property("ColumnSpan", "GridLayout", new proxy_1.PropertyMetadata(1, dependency_observable_1.PropertyMetadataSettings.None, GridLayout.onColumnSpanPropertyChanged, numberUtils.greaterThanZero));
GridLayout.rowProperty = new dependency_observable_1.Property("Row", "GridLayout", new proxy_1.PropertyMetadata(0, dependency_observable_1.PropertyMetadataSettings.None, GridLayout.onRowPropertyChanged, numberUtils.notNegative));
GridLayout.rowSpanProperty = new dependency_observable_1.Property("RowSpan", "GridLayout", new proxy_1.PropertyMetadata(1, dependency_observable_1.PropertyMetadataSettings.None, GridLayout.onRowSpanPropertyChanged, numberUtils.greaterThanZero));
return GridLayout;
}(layout_base_1.LayoutBase);
exports.GridLayout = GridLayout;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(13);
var view = __webpack_require__(11);
var dependencyObservable = __webpack_require__(32);
var proxy = __webpack_require__(48);
var utils = __webpack_require__(21);
var style = __webpack_require__(14);
var LayoutBase = function(_super) {
__extends(LayoutBase, _super);
function LayoutBase() {
_super.apply(this, arguments);
this._subViews = new Array();
}
LayoutBase.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof view.View) {
this.addChild(value);
}
};
LayoutBase.prototype.getChildrenCount = function() {
return this._subViews.length;
};
Object.defineProperty(LayoutBase.prototype, "_childrenCount", {
get: function() {
return this._subViews.length;
},
enumerable: true,
configurable: true
});
LayoutBase.prototype.getChildAt = function(index) {
return this._subViews[index];
};
LayoutBase.prototype.getChildIndex = function(child) {
return this._subViews.indexOf(child);
};
LayoutBase.prototype.getChildById = function(id) {
return view.getViewById(this, id);
};
LayoutBase.prototype._registerLayoutChild = function(child) {};
LayoutBase.prototype._unregisterLayoutChild = function(child) {};
LayoutBase.prototype.addChild = function(child) {
this._subViews.push(child);
this._addView(child);
this._registerLayoutChild(child);
};
LayoutBase.prototype.insertChild = function(child, atIndex) {
this._subViews.splice(atIndex, 0, child);
this._addView(child, atIndex);
this._registerLayoutChild(child);
};
LayoutBase.prototype.removeChild = function(child) {
this._removeView(child);
var index = this._subViews.indexOf(child);
this._subViews.splice(index, 1);
this._unregisterLayoutChild(child);
};
LayoutBase.prototype.removeChildren = function() {
while (this.getChildrenCount() !== 0) {
this.removeChild(this._subViews[this.getChildrenCount() - 1]);
}
};
Object.defineProperty(LayoutBase.prototype, "padding", {
get: function() {
return this.style.padding;
},
set: function(value) {
this.style.padding = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBase.prototype, "paddingTop", {
get: function() {
return this.style.paddingTop;
},
set: function(value) {
this.style.paddingTop = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBase.prototype, "paddingRight", {
get: function() {
return this.style.paddingRight;
},
set: function(value) {
this.style.paddingRight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBase.prototype, "paddingBottom", {
get: function() {
return this.style.paddingBottom;
},
set: function(value) {
this.style.paddingBottom = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBase.prototype, "paddingLeft", {
get: function() {
return this.style.paddingLeft;
},
set: function(value) {
this.style.paddingLeft = value;
},
enumerable: true,
configurable: true
});
LayoutBase.prototype.onClipToBoundsChanged = function(oldValue, newValue) {
var nativeView = this._nativeView;
if (!nativeView) {
return;
}
if (nativeView instanceof UIView) {
nativeView.clipsToBounds = newValue;
} else if (nativeView instanceof android.view.ViewGroup) {
nativeView.setClipChildren(newValue);
}
};
LayoutBase.prototype._childIndexToNativeChildIndex = function(index) {
if (types.isUndefined(index)) {
return undefined;
}
var result = 0;
for (var i = 0; i < index && i < this._subViews.length; i++) {
result += this._subViews[i]._getNativeViewsCount();
}
return result;
};
LayoutBase.prototype._eachChildView = function(callback) {
var i;
var length = this._subViews.length;
var retVal;
for (i = 0; i < length; i++) {
retVal = callback(this._subViews[i]);
if (retVal === false) {
break;
}
}
};
LayoutBase.prototype.eachLayoutChild = function(callback) {
var lastChild = null;
this._eachChildView(function(cv) {
cv._eachLayoutView(function(lv) {
if (lastChild && lastChild._isVisible) {
callback(lastChild, false);
}
lastChild = lv;
});
return true;
});
if (lastChild && lastChild._isVisible) {
callback(lastChild, true);
}
};
LayoutBase.onClipToBoundsPropertyChanged = function(data) {
var layout = data.object;
layout.onClipToBoundsChanged(data.oldValue, data.newValue);
};
LayoutBase.adjustChildrenLayoutParams = function(layoutBase, widthMeasureSpec, heightMeasureSpec) {
var availableWidth = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthSpec = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var availableHeight = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightSpec = utils.layout.getMeasureSpecMode(heightMeasureSpec);
for (var i = 0, count = layoutBase.getChildrenCount(); i < count; i++) {
var child = layoutBase.getChildAt(i);
var lp = child.style._getValue(style.nativeLayoutParamsProperty);
if (widthSpec !== utils.layout.UNSPECIFIED) {
if (lp.widthPercent > 0) {
lp.width = Math.round(availableWidth * lp.widthPercent);
}
if (lp.leftMarginPercent > 0) {
lp.leftMargin = Math.round(availableWidth * lp.leftMarginPercent);
}
if (lp.rightMarginPercent > 0) {
lp.rightMargin = Math.round(availableWidth * lp.rightMarginPercent);
}
}
if (heightSpec !== utils.layout.UNSPECIFIED) {
if (lp.heightPercent > 0) {
lp.height = Math.round(availableHeight * lp.heightPercent);
}
if (lp.topMarginPercent > 0) {
lp.topMargin = Math.round(availableHeight * lp.topMarginPercent);
}
if (lp.bottomMarginPercent > 0) {
lp.bottomMargin = Math.round(availableHeight * lp.bottomMarginPercent);
}
}
}
};
LayoutBase.restoreOriginalParams = function(layoutBase) {
for (var i = 0, count = layoutBase.getChildrenCount(); i < count; i++) {
var child = layoutBase.getChildAt(i);
var lp = child.style._getValue(style.nativeLayoutParamsProperty);
if (lp.widthPercent > 0) {
lp.width = -1;
}
if (lp.heightPercent > 0) {
lp.height = -1;
}
if (lp.leftMarginPercent > 0) {
lp.leftMargin = 0;
}
if (lp.topMarginPercent > 0) {
lp.topMargin = 0;
}
if (lp.rightMarginPercent > 0) {
lp.rightMargin = 0;
}
if (lp.bottomMarginPercent > 0) {
lp.bottomMargin = 0;
}
}
};
LayoutBase.clipToBoundsProperty = new dependencyObservable.Property("clipToBounds", "LayoutBase", new proxy.PropertyMetadata(true, dependencyObservable.PropertyMetadataSettings.None, LayoutBase.onClipToBoundsPropertyChanged));
return LayoutBase;
}(view.CustomLayoutView);
exports.LayoutBase = LayoutBase;
}, function(module, exports) {
var epsilon = 1e-5;
function areClose(value1, value2) {
return Math.abs(value1 - value2) < epsilon;
}
exports.areClose = areClose;
function greaterThanOrClose(value1, value2) {
return value1 > value2 || areClose(value1, value2);
}
exports.greaterThanOrClose = greaterThanOrClose;
function greaterThan(value1, value2) {
return value1 > value2 && !areClose(value1, value2);
}
exports.greaterThan = greaterThan;
function lessThan(value1, value2) {
return value1 < value2 && !areClose(value1, value2);
}
exports.lessThan = lessThan;
function isZero(value) {
return Math.abs(value) < epsilon;
}
exports.isZero = isZero;
function greaterThanZero(value) {
return value > 0;
}
exports.greaterThanZero = greaterThanZero;
function notNegative(value) {
return value >= 0;
}
exports.notNegative = notNegative;
}, function(module, exports, __webpack_require__) {
var debug_1 = __webpack_require__(76);
var xml = __webpack_require__(77);
var view_1 = __webpack_require__(11);
var file_system_1 = __webpack_require__(18);
var types_1 = __webpack_require__(13);
var component_builder_1 = __webpack_require__(79);
var platform_1 = __webpack_require__(39);
var page_1 = __webpack_require__(66);
var file_name_resolver_1 = __webpack_require__(38);
var defaultNameSpaceMatcher = /tns\.xsd$/i;
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(26);
}
}
function parse(value, context) {
if (types_1.isString(value)) {
var viewToReturn;
if (context instanceof view_1.View) {
context = getExports(context);
}
var componentModule = parseInternal(value, context);
if (componentModule) {
viewToReturn = componentModule.component;
}
return viewToReturn;
} else if (types_1.isFunction(value)) {
return value();
}
}
exports.parse = parse;
function parseInternal(value, context, uri) {
var start;
var ui;
var errorFormat = debug_1.debug && uri ? xml2ui.SourceErrorFormat(uri) : xml2ui.PositionErrorFormat;
(start = new xml2ui.XmlStringParser(errorFormat)).pipe(new xml2ui.PlatformFilter()).pipe(new xml2ui.XmlStateParser(ui = new xml2ui.ComponentParser(context, errorFormat)));
start.parse(value);
return ui.rootComponentModule;
}
function loadCustomComponent(componentPath, componentName, attributes, context, parentPage) {
var result;
componentPath = componentPath.replace("~/", "");
var fullComponentPathFilePathWithoutExt = componentPath;
if (!file_system_1.File.exists(componentPath) || componentPath === "." || componentPath === "./") {
fullComponentPathFilePathWithoutExt = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, componentPath, componentName);
}
var xmlFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "xml");
if (xmlFilePath) {
var jsFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "js");
var subExports = context;
if (jsFilePath) {
subExports = global.loadModule(jsFilePath);
}
result = loadInternal(xmlFilePath, subExports);
if (types_1.isDefined(result) && types_1.isDefined(result.component) && types_1.isDefined(attributes)) {
var attr;
for (attr in attributes) {
component_builder_1.setPropertyValue(result.component, subExports, context, attr, attributes[attr]);
}
}
} else {
result = component_builder_1.getComponentModule(componentName, componentPath, attributes, context);
}
var cssFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "css");
if (cssFilePath) {
if (parentPage) {
parentPage.addCssFile(cssFilePath);
} else {
ensureTrace();
trace.write("CSS file found but no page specified. Please specify page in the options!", trace.categories.Error, trace.messageType.error);
}
}
return result;
}
function load(pathOrOptions, context) {
var viewToReturn;
var componentModule;
if (!context) {
if (!types_1.isString(pathOrOptions)) {
var options = pathOrOptions;
componentModule = loadCustomComponent(options.path, options.name, undefined, options.exports, options.page);
} else {
var path_1 = pathOrOptions;
componentModule = loadInternal(path_1);
}
} else {
var path_2 = pathOrOptions;
componentModule = loadInternal(path_2, context);
}
if (componentModule) {
viewToReturn = componentModule.component;
}
return viewToReturn;
}
exports.load = load;
function loadInternal(fileName, context) {
var componentModule;
if (file_system_1.File.exists(fileName)) {
var file = file_system_1.File.fromPath(fileName);
var onError = function(error) {
throw new Error("Error loading file " + fileName + " :" + error.message);
};
var text = file.readTextSync(onError);
componentModule = parseInternal(text, context, fileName);
}
if (componentModule && componentModule.component) {
componentModule.component.exports = context;
}
return componentModule;
}
function getExports(instance) {
var parent = instance.parent;
while (parent && parent.exports === undefined) {
parent = parent.parent;
}
return parent ? parent.exports : undefined;
}
var xml2ui;
(function(xml2ui) {
var XmlProducerBase = function() {
function XmlProducerBase() {}
XmlProducerBase.prototype.pipe = function(next) {
this._next = next;
return next;
};
XmlProducerBase.prototype.next = function(args) {
this._next.parse(args);
};
return XmlProducerBase;
}();
xml2ui.XmlProducerBase = XmlProducerBase;
var XmlStringParser = function(_super) {
__extends(XmlStringParser, _super);
function XmlStringParser(error) {
_super.call(this);
this.error = error || PositionErrorFormat;
}
XmlStringParser.prototype.parse = function(value) {
var _this = this;
var xmlParser = new xml.XmlParser(function(args) {
try {
_this.next(args);
} catch (e) {
throw _this.error(e, args.position);
}
}, function(e, p) {
throw _this.error(e, p);
}, true);
if (types_1.isString(value)) {
xmlParser.parse(value);
}
};
return XmlStringParser;
}(XmlProducerBase);
xml2ui.XmlStringParser = XmlStringParser;
function PositionErrorFormat(e, p) {
return new debug_1.ScopeError(e, "Parsing XML at " + p.line + ":" + p.column);
}
xml2ui.PositionErrorFormat = PositionErrorFormat;
function SourceErrorFormat(uri) {
return function(e, p) {
var source = p ? new debug_1.Source(uri, p.line, p.column) : new debug_1.Source(uri, -1, -1);
e = new debug_1.SourceError(e, source, "Building UI from XML.");
return e;
};
}
xml2ui.SourceErrorFormat = SourceErrorFormat;
var PlatformFilter = function(_super) {
__extends(PlatformFilter, _super);
function PlatformFilter() {
_super.apply(this, arguments);
}
PlatformFilter.prototype.parse = function(args) {
if (args.eventType === xml.ParserEventType.StartElement) {
if (PlatformFilter.isPlatform(args.elementName)) {
if (this.currentPlatformContext) {
throw new Error("Already in '" + this.currentPlatformContext + "' platform context and cannot switch to '" + args.elementName + "' platform! Platform tags cannot be nested.");
}
this.currentPlatformContext = args.elementName;
return;
}
}
if (args.eventType === xml.ParserEventType.EndElement) {
if (PlatformFilter.isPlatform(args.elementName)) {
this.currentPlatformContext = undefined;
return;
}
}
if (this.currentPlatformContext && !PlatformFilter.isCurentPlatform(this.currentPlatformContext)) {
return;
}
this.next(args);
};
PlatformFilter.isPlatform = function(value) {
return value && (value.toLowerCase() === platform_1.platformNames.android.toLowerCase() || value.toLowerCase() === platform_1.platformNames.ios.toLowerCase());
};
PlatformFilter.isCurentPlatform = function(value) {
return value && value.toLowerCase() === platform_1.device.os.toLowerCase();
};
return PlatformFilter;
}(XmlProducerBase);
xml2ui.PlatformFilter = PlatformFilter;
var XmlArgsReplay = function(_super) {
__extends(XmlArgsReplay, _super);
function XmlArgsReplay(args, errorFormat) {
_super.call(this);
this.args = args;
this.error = errorFormat;
}
XmlArgsReplay.prototype.replay = function() {
var _this = this;
this.args.forEach(function(args) {
try {
_this.next(args);
} catch (e) {
throw _this.error(e, args.position);
}
});
};
return XmlArgsReplay;
}(XmlProducerBase);
xml2ui.XmlArgsReplay = XmlArgsReplay;
var XmlStateParser = function() {
function XmlStateParser(state) {
this.state = state;
}
XmlStateParser.prototype.parse = function(args) {
this.state = this.state.parse(args);
};
return XmlStateParser;
}();
xml2ui.XmlStateParser = XmlStateParser;
var TemplateParser = function() {
function TemplateParser(parent, templateProperty) {
this.parent = parent;
this._context = templateProperty.context;
this._recordedXmlStream = new Array();
this._templateProperty = templateProperty;
this._nestingLevel = 0;
this._state = 0;
}
TemplateParser.prototype.parse = function(args) {
if (args.eventType === xml.ParserEventType.StartElement) {
this.parseStartElement(args.prefix, args.namespace, args.elementName, args.attributes);
} else if (args.eventType === xml.ParserEventType.EndElement) {
this.parseEndElement(args.prefix, args.elementName);
}
this._recordedXmlStream.push(args);
return this._state === 2 ? this.parent : this;
};
Object.defineProperty(TemplateParser.prototype, "elementName", {
get: function() {
return this._templateProperty.elementName;
},
enumerable: true,
configurable: true
});
TemplateParser.prototype.parseStartElement = function(prefix, namespace, elementName, attributes) {
if (this._state === 0) {
this._state = 1;
} else if (this._state === 2) {
throw new Error("Template must have exactly one root element but multiple elements were found.");
}
this._nestingLevel++;
};
TemplateParser.prototype.parseEndElement = function(prefix, elementName) {
if (this._state === 0) {
throw new Error("Template must have exactly one root element but none was found.");
} else if (this._state === 2) {
throw new Error("No more closing elements expected for this template.");
}
this._nestingLevel--;
if (this._nestingLevel === 0) {
this._state = 2;
this.build();
}
};
TemplateParser.prototype.build = function() {
var _this = this;
if (this._templateProperty.name in this._templateProperty.parent.component) {
var context = this._context;
var errorFormat = this._templateProperty.errorFormat;
var template = function() {
var start;
var ui;
(start = new xml2ui.XmlArgsReplay(_this._recordedXmlStream, errorFormat)).pipe(new XmlStateParser(ui = new ComponentParser(context, errorFormat)));
start.replay();
return ui.rootComponentModule.component;
};
this._templateProperty.parent.component[this._templateProperty.name] = template;
}
};
return TemplateParser;
}();
xml2ui.TemplateParser = TemplateParser;
var ComponentParser = function() {
function ComponentParser(context, errorFormat) {
this.parents = new Array();
this.complexProperties = new Array();
this.context = context;
this.error = errorFormat;
}
ComponentParser.prototype.parse = function(args) {
var parent = this.parents[this.parents.length - 1];
var complexProperty = this.complexProperties[this.complexProperties.length - 1];
if (args.eventType === xml.ParserEventType.StartElement) {
if (ComponentParser.isComplexProperty(args.elementName)) {
var name = ComponentParser.getComplexPropertyName(args.elementName);
this.complexProperties.push({
parent: parent,
name: name,
items: []
});
if (ComponentParser.isKnownTemplate(name, parent.exports)) {
return new TemplateParser(this, {
context: (parent ? getExports(parent.component) : null) || this.context,
parent: parent,
name: name,
elementName: args.elementName,
templateItems: [],
errorFormat: this.error
});
}
} else {
var componentModule;
if (args.prefix && args.namespace) {
componentModule = loadCustomComponent(args.namespace, args.elementName, args.attributes, this.context, this.currentPage);
} else {
var namespace = args.namespace;
if (defaultNameSpaceMatcher.test(namespace || "")) {
namespace = undefined;
}
componentModule = component_builder_1.getComponentModule(args.elementName, namespace, args.attributes, this.context);
}
if (componentModule) {
if (parent) {
if (complexProperty) {
ComponentParser.addToComplexProperty(parent, complexProperty, componentModule);
} else if (parent.component._addChildFromBuilder) {
parent.component._addChildFromBuilder(args.elementName, componentModule.component);
}
} else if (this.parents.length === 0) {
this.rootComponentModule = componentModule;
if (this.rootComponentModule && this.rootComponentModule.component instanceof page_1.Page) {
this.currentPage = this.rootComponentModule.component;
if (this.currentPage.exports) {
this.context = this.currentPage.exports;
}
}
}
this.parents.push(componentModule);
}
}
} else if (args.eventType === xml.ParserEventType.EndElement) {
if (ComponentParser.isComplexProperty(args.elementName)) {
if (complexProperty) {
if (parent && parent.component._addArrayFromBuilder) {
parent.component._addArrayFromBuilder(complexProperty.name, complexProperty.items);
complexProperty.items = [];
}
}
this.complexProperties.pop();
} else {
this.parents.pop();
}
}
return this;
};
ComponentParser.isComplexProperty = function(name) {
return types_1.isString(name) && name.indexOf(".") !== -1;
};
ComponentParser.getComplexPropertyName = function(fullName) {
var name;
if (types_1.isString(fullName)) {
var names = fullName.split(".");
name = names[names.length - 1];
}
return name;
};
ComponentParser.isKnownTemplate = function(name, exports) {
return ComponentParser.KNOWNTEMPLATES in exports && exports[ComponentParser.KNOWNTEMPLATES] && name in exports[ComponentParser.KNOWNTEMPLATES];
};
ComponentParser.addToComplexProperty = function(parent, complexProperty, elementModule) {
var parentComponent = parent.component;
if (ComponentParser.isKnownCollection(complexProperty.name, parent.exports)) {
complexProperty.items.push(elementModule.component);
} else if (parentComponent._addChildFromBuilder) {
parentComponent._addChildFromBuilder(complexProperty.name, elementModule.component);
} else {
parentComponent[complexProperty.name] = elementModule.component;
}
};
ComponentParser.isKnownCollection = function(name, context) {
return ComponentParser.KNOWNCOLLECTIONS in context && context[ComponentParser.KNOWNCOLLECTIONS] && name in context[ComponentParser.KNOWNCOLLECTIONS];
};
ComponentParser.KNOWNCOLLECTIONS = "knownCollections";
ComponentParser.KNOWNTEMPLATES = "knownTemplates";
return ComponentParser;
}();
xml2ui.ComponentParser = ComponentParser;
})(xml2ui || (xml2ui = {}));
}, function(module, exports, __webpack_require__) {
var file_system_1 = __webpack_require__(18);
exports.debug = true;
var applicationRootPath;
function ensureAppRootPath() {
if (!applicationRootPath) {
applicationRootPath = file_system_1.knownFolders.currentApp().path;
applicationRootPath = applicationRootPath.substr(0, applicationRootPath.length - "app/".length);
}
}
var Source = function() {
function Source(uri, line, column) {
ensureAppRootPath();
if (uri.length > applicationRootPath.length && uri.substr(0, applicationRootPath.length) === applicationRootPath) {
this._uri = "file://" + uri.substr(applicationRootPath.length);
} else {
this._uri = uri;
}
this._line = line;
this._column = column;
}
Object.defineProperty(Source.prototype, "uri", {
get: function() {
return this._uri;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Source.prototype, "line", {
get: function() {
return this._line;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Source.prototype, "column", {
get: function() {
return this._column;
},
enumerable: true,
configurable: true
});
Source.prototype.toString = function() {
return this._uri + ":" + this._line + ":" + this._column;
};
Source.get = function(object) {
return object[Source._source];
};
Source.set = function(object, src) {
object[Source._source] = src;
};
Source._source = Symbol("source");
return Source;
}();
exports.Source = Source;
var ScopeError = function(_super) {
__extends(ScopeError, _super);
function ScopeError(child, message) {
_super.call(this, message);
if (!child) {
throw new Error("Required child error!");
}
this._child = child;
this._message = message;
}
Object.defineProperty(ScopeError.prototype, "child", {
get: function() {
return this._child;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScopeError.prototype, "message", {
get: function() {
if (this._message && this._childMessage) {
return this._message + "\n ↳" + this._childMessage.replace("\n", "\n  ");
}
return this._message || this._childMessage || undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScopeError.prototype, "name", {
get: function() {
return this.child.name;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScopeError.prototype, "stack", {
get: function() {
return this.child.stack;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScopeError.prototype, "_childMessage", {
get: function() {
return this.child.message;
},
enumerable: true,
configurable: true
});
ScopeError.prototype.toString = function() {
return "Error: " + this.message;
};
return ScopeError;
}(Error);
exports.ScopeError = ScopeError;
var SourceError = function(_super) {
__extends(SourceError, _super);
function SourceError(child, source, message) {
_super.call(this, child, message ? message + " @" + source + "" : source + "");
this._source = source;
}
Object.defineProperty(SourceError.prototype, "source", {
get: function() {
return this._source;
},
enumerable: true,
configurable: true
});
return SourceError;
}(ScopeError);
exports.SourceError = SourceError;
}, function(module, exports, __webpack_require__) {
var easysax = __webpack_require__(78);
var ParserEventType = function() {
function ParserEventType() {}
ParserEventType.StartElement = "StartElement";
ParserEventType.EndElement = "EndElement";
ParserEventType.Text = "Text";
ParserEventType.CDATA = "CDATA";
ParserEventType.Comment = "Comment";
return ParserEventType;
}();
exports.ParserEventType = ParserEventType;
var ParserEvent = function() {
function ParserEvent(eventType, position, prefix, namespace, elementName, attributes, data) {
this._eventType = eventType;
this._position = position;
this._prefix = prefix;
this._namespace = namespace;
this._elementName = elementName;
this._attributes = attributes;
this._data = data;
}
ParserEvent.prototype.toString = function() {
return JSON.stringify({
eventType: this.eventType,
position: this.position,
prefix: this.prefix,
namespace: this.namespace,
elementName: this.elementName,
attributes: this.attributes,
data: this.data
});
};
Object.defineProperty(ParserEvent.prototype, "eventType", {
get: function() {
return this._eventType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "position", {
get: function() {
return this._position;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "prefix", {
get: function() {
return this._prefix;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "namespace", {
get: function() {
return this._namespace;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "elementName", {
get: function() {
return this._elementName;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "attributes", {
get: function() {
return this._attributes;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "data", {
get: function() {
return this._data;
},
enumerable: true,
configurable: true
});
return ParserEvent;
}();
exports.ParserEvent = ParserEvent;
var _ampCodes;
var _entitySearchRegEx = /&#(\d+);|&#x([0123456789abcdef]+);|&(\w+);/gi;
function _generateAmpMap() {
var objCodes = {
Tab: 9,
NewLine: 10,
excl: 33,
quot: 34,
QUOT: 34,
num: 35,
dollar: 36,
percent: 37,
amp: 38,
AMP: 38,
apos: 39,
lpar: 40,
rpar: 41,
ast: 42,
midast: 42,
plus: 43,
comma: 44,
period: 46,
sol: 47,
colon: 58,
semi: 59,
lt: 60,
LT: 60,
equals: 61,
gt: 62,
GT: 62,
quest: 63,
commat: 64,
lsqb: 91,
lbrack: 91,
bsol: 92,
rsqb: 92,
rbrack: 92,
Hat: 94,
lowbar: 95,
grave: 96,
DiacriticalGrave: 96,
lcub: 123,
lbrace: 123,
verbar: 124,
vert: 124,
VerticalLine: 124,
rcub: 125,
rbrace: 125,
nbsp: 160,
iexcl: 161,
cent: 162,
pound: 163,
curren: 164,
yen: 165,
brvbar: 166,
brkbar: 166,
sect: 167,
uml: 168,
copy: 169,
ordf: 170,
laquo: 171,
not: 172,
shy: 173,
reg: 174,
macr: 175,
hibar: 175,
deg: 176,
plusmn: 177,
sup2: 178,
sup3: 179,
acute: 180,
micro: 181,
para: 182,
middot: 183,
cedil: 184,
sup1: 185,
ordm: 186,
raquo: 187,
frac14: 188,
frac12: 189,
frac34: 190,
iquest: 191,
Agrave: 192,
Aacute: 193,
Acirc: 194,
Atilde: 195,
Auml: 196,
Aring: 197,
AElig: 198,
Ccedil: 199,
Egrave: 200,
Eacute: 201,
Ecirc: 202,
Euml: 203,
Igrave: 204,
Iacute: 205,
Icirc: 206,
Iuml: 207,
ETH: 208,
Dstrok: 208,
Ntilde: 209,
Ograve: 210,
Oacute: 211,
Ocirc: 212,
Otilde: 213,
Ouml: 214,
times: 215,
Oslash: 216,
Ugrave: 217,
Uacute: 218,
Ucirc: 219,
Uuml: 220,
Yacute: 221,
THORN: 222,
szlig: 223,
agrave: 224,
aacute: 225,
acirc: 226,
atilde: 227,
auml: 228,
aring: 229,
aelig: 230,
ccedil: 231,
egrave: 232,
eacute: 233,
ecirc: 234,
euml: 235,
igrave: 236,
iacute: 237,
icirc: 238,
iuml: 239,
eth: 240,
ntilde: 241,
ograve: 242,
oacute: 243,
ocirc: 244,
otilde: 245,
ouml: 246,
divide: 247,
oslash: 248,
ugrave: 249,
uacute: 250,
ucirc: 251,
uuml: 252,
yacute: 253,
thorn: 254,
yuml: 255,
fnof: 402,
imped: 437,
gacute: 501,
jmath: 567,
circ: 710,
caron: 711,
Hacek: 711,
breve: 728,
Breve: 728,
dot: 729,
DiacriticalDot: 729,
ring: 730,
ogon: 731,
tilde: 732,
DiacriticalTilde: 732,
dblac: 733,
DiacriticalDoubleAcute: 733,
DownBreve: 785,
UnderBar: 818,
Alpha: 913,
Beta: 914,
Gamma: 915,
Delta: 916,
Epsilon: 917,
Zeta: 918,
Eta: 919,
Theta: 920,
Iota: 921,
Kappa: 922,
Lambda: 923,
Mu: 924,
Nu: 925,
Xi: 926,
Omicron: 927,
Pi: 928,
Rho: 929,
Sigma: 931,
Tau: 932,
Upsilon: 933,
Phi: 934,
Chi: 935,
Psi: 936,
Omega: 937,
alpha: 945,
beta: 946,
gamma: 947,
delta: 948,
epsilon: 949,
epsiv: 949,
varepsilon: 949,
zeta: 950,
eta: 951,
theta: 952,
iota: 953,
kappa: 954,
lambda: 955,
mu: 956,
nu: 957,
xi: 958,
omicron: 959,
pi: 960,
rho: 961,
sigmaf: 962,
sigmav: 962,
varsigma: 962,
sigma: 963,
tau: 964,
upsilon: 965,
phi: 966,
chi: 967,
psi: 968,
omega: 969,
thetav: 977,
vartheta: 977,
thetasym: 977,
Upsi: 978,
upsih: 978,
straightphi: 981,
piv: 982,
varpi: 982,
Gammad: 988,
gammad: 989,
digamma: 989,
kappav: 1008,
varkappa: 1008,
rhov: 1009,
varrho: 1009,
epsi: 1013,
straightepsilon: 1013,
bepsi: 1014,
backepsilon: 1014,
euro: 8364,
trade: 8482,
TRADE: 8482,
forall: 8704,
part: 8706,
larr: 8592,
rarr: 8593,
hyphen: 8208,
dash: 8208,
ndash: 8211,
mdash: 8212,
horbar: 8213,
Vert: 8214,
Verbar: 8214,
lsquo: 8216,
OpenCurlyQuote: 8216,
rsquo: 8217,
rsquor: 8217,
CloseCurlyQuote: 8217,
lsquor: 8218,
sbquo: 8218,
ldquo: 8220,
OpenCurlyDoubleQuote: 8220,
rdquo: 8221,
rdquor: 8221,
CloseCurlyDoubleQuote: 8221,
ldquor: 8222,
bdquo: 8222,
dagger: 8224,
Dagger: 8225,
ddagger: 8225,
bull: 8226,
bullet: 8226,
nldr: 8229,
hellip: 8230,
mldr: 8230,
hybull: 8259,
tdot: 8411,
TripleDot: 8411,
DotDot: 8412,
star: 9734,
phone: 9742,
spades: 9824,
clubs: 9827,
hearts: 9829,
diams: 9830,
female: 9792,
male: 9794,
check: 10003,
checkmark: 10003,
cross: 10007,
VerticalSeparator: 10072,
EmptySmallSquare: 9723,
FilledSmallSquare: 9724,
starf: 9733,
bigstar: 9733,
square: 9633,
squ: 9633,
Square: 9633
};
var ampCodes = new Map();
for (var key in objCodes) {
if (objCodes.hasOwnProperty(key)) {
ampCodes.set(key, objCodes[key]);
}
}
return ampCodes;
}
if (global.__snapshot) {
_ampCodes = _generateAmpMap();
}
function _HandleAmpEntities(found, decimalValue, hexValue, wordValue) {
if (wordValue) {
if (!_ampCodes) {
_ampCodes = _generateAmpMap();
}
var res = _ampCodes.get(wordValue);
if (res) {
return String.fromCharCode(res);
}
return found;
}
if (decimalValue) {
return String.fromCharCode(parseInt(decimalValue, 10));
}
return String.fromCharCode(parseInt(hexValue, 16));
}
var XmlParser = function() {
function XmlParser(onEvent, onError, processNamespaces) {
this._processNamespaces = processNamespaces;
this._parser = new easysax.EasySAXParser();
var that = this;
this._parser.on("startNode", function(elem, attr, uq, tagend, str, pos) {
var attributes = attr();
if (attributes === true) {
attributes = undefined;
}
if (attributes) {
var key;
for (key in attributes) {
if (attributes.hasOwnProperty(key)) {
attributes[key] = XmlParser._dereferenceEntities(attributes[key]);
}
}
}
var prefix = undefined;
var namespace = undefined;
var name = elem;
if (that._processNamespaces) {
var stackEntry = XmlParser._getNamespacesStackEntry(attributes);
that._namespaceStack.push(stackEntry);
var resolved = that._resolveNamespace(name);
prefix = resolved.prefix;
namespace = resolved.namespace;
name = resolved.name;
}
onEvent(new ParserEvent(ParserEventType.StartElement, pos(), prefix, namespace, name, attributes, undefined));
});
this._parser.on("textNode", function(text, uq, pos) {
var data = uq(XmlParser._dereferenceEntities(text));
onEvent(new ParserEvent(ParserEventType.Text, pos(), undefined, undefined, undefined, undefined, data));
});
this._parser.on("endNode", function(elem, uq, tagstart, str, pos) {
var prefix = undefined;
var namespace = undefined;
var name = elem;
if (that._processNamespaces) {
var resolved = that._resolveNamespace(name);
prefix = resolved.prefix;
namespace = resolved.namespace;
name = resolved.name;
}
onEvent(new ParserEvent(ParserEventType.EndElement, pos(), prefix, namespace, name, undefined, undefined));
if (that._processNamespaces) {
that._namespaceStack.pop();
}
});
this._parser.on("cdata", function(data, res, pos) {
onEvent(new ParserEvent(ParserEventType.CDATA, pos(), undefined, undefined, undefined, undefined, data));
});
this._parser.on("comment", function(text, uq, pos) {
onEvent(new ParserEvent(ParserEventType.Comment, pos(), undefined, undefined, undefined, undefined, text));
});
if (onError) {
this._parser.on("error", function(msg, pos) {
onError(new Error(msg), pos());
});
}
}
Object.defineProperty(XmlParser.prototype, "angularSyntax", {
get: function() {
return this._parser.angularSyntax;
},
set: function(value) {
this._parser.angularSyntax = value;
},
enumerable: true,
configurable: true
});
XmlParser.prototype.parse = function(xmlString) {
if (this._processNamespaces) {
this._namespaceStack = [];
}
this._parser.parse(xmlString);
};
XmlParser._getNamespacesStackEntry = function(attributes) {
var stackEntry = {};
if (!attributes) {
return stackEntry;
}
for (var key in attributes) {
if (!attributes.hasOwnProperty(key)) {
continue;
}
var attributeName = key;
if (attributeName.indexOf("xmlns") !== 0) {
continue;
}
var namespacePrefix = "";
if (attributeName.indexOf(":") !== -1) {
namespacePrefix = attributeName.split(":")[1];
}
stackEntry[namespacePrefix] = attributes[key];
}
return stackEntry;
};
XmlParser.prototype._resolveNamespace = function(fullName) {
var result = {
prefix: undefined,
namespace: undefined,
name: undefined
};
result.prefix = "";
if (fullName.indexOf(":") !== -1) {
var split = fullName.split(":");
result.prefix = split[0];
result.name = split[1];
} else {
result.name = fullName;
}
var i;
var stackEntry;
for (i = this._namespaceStack.length - 1; i >= 0; i--) {
stackEntry = this._namespaceStack[i];
for (var key in stackEntry) {
if (!stackEntry.hasOwnProperty(key)) {
continue;
}
if (result.prefix === key) {
result.namespace = stackEntry[key];
return result;
}
}
}
return result;
};
XmlParser._dereferenceEntities = function(s) {
s = String(s);
if (s.length > 3 && s.indexOf("&") !== -1) {
s = s.replace(_entitySearchRegEx, _HandleAmpEntities);
}
return s;
};
return XmlParser;
}();
exports.XmlParser = XmlParser;
}, function(module, exports, __webpack_require__) {
if (true) {
module.exports.EasySAXParser = EasySAXParser;
}
function EasySAXParser() {
"use strict";
if (!this) return null;
this.angularSyntax = false;
function nullFunc() {}
this.onTextNode = nullFunc;
this.onStartNode = nullFunc;
this.onEndNode = nullFunc;
this.onCDATA = nullFunc;
this.onError = nullFunc;
this.onComment = null;
this.onQuestion = null;
this.onAttention = null;
this.is_onComment = this.is_onQuestion = this.is_onAttention = false;
this.isNamespace = false;
this.useNS = null;
this.default_xmlns = null;
this.xmlns = null;
this.nsmatrix = {
xmlns: this.xmlns
};
this.hasSurmiseNS = false;
this.attr_string = "";
this.attr_posstart = 0;
this.attr_res;
}
EasySAXParser.prototype.on = function(name, cb) {
if (typeof cb !== "function") {
if (cb !== null) return;
}
switch (name) {
case "error":
this.onError = cb || nullFunc;
break;

case "startNode":
this.onStartNode = cb || nullFunc;
break;

case "endNode":
this.onEndNode = cb || nullFunc;
break;

case "textNode":
this.onTextNode = cb || nullFunc;
break;

case "cdata":
this.onCDATA = cb || nullFunc;
break;

case "comment":
this.onComment = cb;
this.is_onComment = !!cb;
break;

case "question":
this.onQuestion = cb;
this.is_onQuestion = !!cb;
break;

case "attention":
this.onAttention = cb;
this.is_onAttention = !!cb;
break;
}
};
EasySAXParser.prototype.ns = function(root, ns) {
if (!root || typeof root !== "string" || !ns) {
return;
}
var u, x = {}, ok, v, i;
for (i in ns) {
v = ns[i];
if (typeof v === "string") {
if (root === v) ok = true;
x[i] = v;
}
}
if (ok) {
this.isNamespace = true;
this.default_xmlns = root;
this.useNS = x;
}
};
EasySAXParser.prototype.parse = function(xml) {
if (typeof xml !== "string") {
return;
}
if (this.isNamespace) {
this.nsmatrix = {
xmlns: this.default_xmlns
};
parse(xml);
this.nsmatrix = false;
} else {
parse(xml);
}
this.attr_res = true;
};
var xharsQuot = {
constructor: false,
hasOwnProperty: false,
isPrototypeOf: false,
propertyIsEnumerable: false,
toLocaleString: false,
toString: false,
valueOf: false,
quot: '"',
QUOT: '"',
amp: "&",
AMP: "&",
nbsp: " ",
apos: "'",
lt: "<",
LT: "<",
gt: ">",
GT: ">",
copy: "©",
laquo: "«",
raquo: "»",
reg: "®",
deg: "°",
plusmn: "±",
sup2: "²",
sup3: "³",
micro: "µ",
para: "¶"
};
function rpEntities(s, d, x, z) {
if (z) {
return xharsQuot[z] || "";
}
if (d) {
return String.fromCharCode(d);
}
return String.fromCharCode(parseInt(x, 16));
}
function unEntities(s, i) {
s = String(s);
if (s.length > 3 && s.indexOf("&") !== -1) {
if (s.indexOf("&gt;") !== -1) s = s.replace(/&gt;/g, ">");
if (s.indexOf("&lt;") !== -1) s = s.replace(/&lt;/g, "<");
if (s.indexOf("&quot;") !== -1) s = s.replace(/&quot;/g, '"');
if (s.indexOf("&") !== -1) {
s = s.replace(/&#(\d+);|&#x([0123456789abcdef]+);|&(\w+);/gi, rpEntities);
}
}
return s;
}
EasySAXParser.prototype.allowedAngularAttributeChars = function(w) {
if (!this.angularSyntax) {
return false;
} else {
return w === 40 || w === 41 || w === 91 || w === 93 || w === 94 || w === 35;
}
};
EasySAXParser.prototype.getAttrs = function() {
if (this.attr_res !== null) {
return this.attr_res;
}
var u, res = {}, s = this.attr_string, i = this.attr_posstart, l = s.length, attr_list = this.hasSurmiseNS ? [] : false, name, value = "", ok = false, noValueAttribute = false, j, w, nn, n, hasNewMatrix, alias, newalias;
aa: for (;i < l; i++) {
w = s.charCodeAt(i);
if (w === 32 || w < 14 && w > 8) {
continue;
}
if (w < 65 && !this.allowedAngularAttributeChars(w) || w > 122 || w > 90 && w < 97 && !this.allowedAngularAttributeChars(w)) {
return this.attr_res = false;
}
for (j = i + 1; j < l; j++) {
w = s.charCodeAt(j);
if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w === 46) {
if (noValueAttribute) {
j--;
break;
} else {
continue;
}
}
if (this.allowedAngularAttributeChars(w)) {
continue;
}
if (w === 32 || w > 8 && w < 14) {
noValueAttribute = true;
continue;
} else if (w === 61) {
noValueAttribute = false;
break;
} else {
if (!noValueAttribute) return this.attr_res = false;
}
break;
}
name = s.substring(i, j).trim();
ok = true;
if (name === "xmlns:xmlns") {
return this.attr_res = false;
}
w = s.charCodeAt(j + 1);
while (w = s.charCodeAt(j + 1)) {
if (w === 32 || w > 8 && w < 14) {
j++;
} else {
break;
}
}
if (!noValueAttribute) {
if (w === 34) {
j = s.indexOf('"', i = j + 2);
} else {
if (w === 39) {
j = s.indexOf("'", i = j + 2);
} else {
return this.attr_res = false;
}
}
}
if (j === -1) {
return this.attr_res = false;
}
if (j + 1 < l && !noValueAttribute) {
w = s.charCodeAt(j + 1);
if (w > 32 || w < 9 || w < 32 && w > 13) {
return this.attr_res = false;
}
}
if (noValueAttribute) {
value = "";
} else {
value = s.substring(i, j);
}
i = j;
if (this.isNamespace) {
if (this.hasSurmiseNS) {
if (newalias = name === "xmlns" ? "xmlns" : name.charCodeAt(0) === 120 && name.substr(0, 6) === "xmlns:" && name.substr(6)) {
alias = this.useNS[unEntities(value)];
if (alias) {
if (this.nsmatrix[newalias] !== alias) {
if (!hasNewMatrix) {
hasNewMatrix = true;
nn = {};
for (n in this.nsmatrix) nn[n] = this.nsmatrix[n];
this.nsmatrix = nn;
}
this.nsmatrix[newalias] = alias;
}
} else {
if (this.nsmatrix[newalias]) {
if (!hasNewMatrix) {
hasNewMatrix = true;
nn = {};
for (n in this.nsmatrix) nn[n] = this.nsmatrix[n];
this.nsmatrix = nn;
}
this.nsmatrix[newalias] = false;
}
}
res[name] = value;
continue;
}
attr_list.push(name, value);
continue;
}
w = name.length;
while (--w) {
if (name.charCodeAt(w) === 58) {
if (w = this.nsmatrix[name.substring(0, w)]) {
res[w + name.substr(w)] = value;
}
continue aa;
}
}
}
res[name] = value;
noValueAttribute = false;
}
if (!ok) {
return this.attr_res = true;
}
if (this.hasSurmiseNS) {
bb: for (i = 0, l = attr_list.length; i < l; i++) {
name = attr_list[i++];
w = name.length;
while (--w) {
if (name.charCodeAt(w) === 58) {
if (w = this.nsmatrix[name.substring(0, w)]) {
res[w + name.substr(w)] = attr_list[i];
}
continue bb;
break;
}
}
res[name] = attr_list[i];
}
}
return this.attr_res = res;
};
EasySAXParser.prototype.parse = function(xml) {
var u, xml = String(xml), nodestack = [], stacknsmatrix = [], elem, tagend = false, tagstart = false, j = 0, i = 0, x, y, q, w, xmlns, stopIndex = 0, stop, _nsmatrix, ok, pos = 0, ln = 0, lnStart = -2, lnEnd = -1;
function getStringNode() {
return xml.substring(i, j + 1);
}
function findLineAndColumnFromPos() {
while (lnStart < lnEnd && lnEnd < pos) {
lnStart = lnEnd;
lnEnd = xml.indexOf("\n", lnEnd + 1);
++ln;
}
return {
line: ln,
column: pos - lnStart
};
}
function position(p) {
pos = p;
return findLineAndColumnFromPos;
}
while (j !== -1) {
stop = stopIndex > 0;
if (xml.charCodeAt(j) === 60) {
i = j;
} else {
i = xml.indexOf("<", j);
}
if (i === -1) {
if (nodestack.length) {
this.onError("end file", position(j));
return;
}
return;
}
if (j !== i && !stop) {
ok = this.onTextNode(xml.substring(j, i), unEntities, position(j));
if (ok === false) return;
}
w = xml.charCodeAt(i + 1);
if (w === 33) {
w = xml.charCodeAt(i + 2);
if (w === 91 && xml.substr(i + 3, 6) === "CDATA[") {
j = xml.indexOf("]]>", i);
if (j === -1) {
this.onError("cdata", position(i));
return;
}
if (!stop) {
ok = this.onCDATA(xml.substring(i + 9, j), false, position(i));
if (ok === false) return;
}
j += 3;
continue;
}
if (w === 45 && xml.charCodeAt(i + 3) === 45) {
j = xml.indexOf("-->", i);
if (j === -1) {
this.onError("expected -->", position(i));
return;
}
if (this.is_onComment && !stop) {
ok = this.onComment(xml.substring(i + 4, j), unEntities, position(i));
if (ok === false) return;
}
j += 3;
continue;
}
j = xml.indexOf(">", i + 1);
if (j === -1) {
this.onError('expected ">"', position(i + 1));
return;
}
if (this.is_onAttention && !stop) {
ok = this.onAttention(xml.substring(i, j + 1), unEntities, position(i));
if (ok === false) return;
}
j += 1;
continue;
} else {
if (w === 63) {
j = xml.indexOf("?>", i);
if (j === -1) {
this.onError("...?>", position(i));
return;
}
if (this.is_onQuestion) {
ok = this.onQuestion(xml.substring(i, j + 2), position(i));
if (ok === false) return;
}
j += 2;
continue;
}
}
j = xml.indexOf(">", i + 1);
if (j == -1) {
this.onError("...>", position(i + 1));
return;
}
this.attr_res = true;
if (w === 47) {
tagstart = false;
tagend = true;
x = elem = nodestack.pop();
q = i + 2 + x.length;
if (xml.substring(i + 2, q) !== x) {
this.onError("close tagname", position(i + 2));
return;
}
for (;q < j; q++) {
w = xml.charCodeAt(q);
if (w === 32 || w > 8 && w < 14) {
continue;
}
this.onError("close tag", position(i + 2));
return;
}
} else {
if (xml.charCodeAt(j - 1) === 47) {
x = elem = xml.substring(i + 1, j - 1);
tagstart = true;
tagend = true;
} else {
x = elem = xml.substring(i + 1, j);
tagstart = true;
tagend = false;
}
if (!(w > 96 && w < 123 || w > 64 && w < 91)) {
this.onError("first char nodeName", position(i + 1));
return;
}
for (q = 1, y = x.length; q < y; q++) {
w = x.charCodeAt(q);
if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w === 46) {
continue;
}
if (w === 32 || w < 14 && w > 8) {
elem = x.substring(0, q);
this.attr_res = null;
break;
}
this.onError("invalid nodeName", position(i + 1));
return;
}
if (!tagend) {
nodestack.push(elem);
}
}
if (this.isNamespace) {
if (stop) {
if (tagend) {
if (!tagstart) {
if (--stopIndex === 0) {
this.nsmatrix = stacknsmatrix.pop();
}
}
} else {
stopIndex += 1;
}
j += 1;
continue;
}
_nsmatrix = this.nsmatrix;
if (!tagend) {
stacknsmatrix.push(this.nsmatrix);
if (this.attr_res !== true) {
if (this.hasSurmiseNS = x.indexOf("xmlns", q) !== -1) {
this.attr_string = x;
this.attr_posstart = q;
this.getAttrs();
this.hasSurmiseNS = false;
}
}
}
w = elem.indexOf(":");
if (w !== -1) {
xmlns = this.nsmatrix[elem.substring(0, w)];
elem = elem.substr(w + 1);
} else {
xmlns = this.nsmatrix.xmlns;
}
if (!xmlns) {
if (tagend) {
if (tagstart) {
this.nsmatrix = _nsmatrix;
} else {
this.nsmatrix = stacknsmatrix.pop();
}
} else {
stopIndex = 1;
this.attr_res = true;
}
j += 1;
continue;
}
elem = xmlns + ":" + elem;
}
if (tagstart) {
this.attr_string = x;
this.attr_posstart = q;
var that = this;
ok = this.onStartNode(elem, function() {
return that.getAttrs();
}, unEntities, tagend, getStringNode, position(i));
if (ok === false) {
return;
}
this.attr_res = true;
}
if (tagend) {
ok = this.onEndNode(elem, unEntities, tagstart, getStringNode, position(i));
if (ok === false) {
return;
}
if (this.isNamespace) {
if (tagstart) {
this.nsmatrix = _nsmatrix;
} else {
this.nsmatrix = stacknsmatrix.pop();
}
}
}
j += 1;
}
};
}, function(module, exports, __webpack_require__) {
var types_1 = __webpack_require__(13);
var page_1 = __webpack_require__(66);
var view_1 = __webpack_require__(11);
var file_system_1 = __webpack_require__(18);
var binding_builder_1 = __webpack_require__(51);
__webpack_require__(80);
__webpack_require__(71);
__webpack_require__(82);
var special_properties_1 = __webpack_require__(55);
var UI_PATH = "ui/";
var MODULES = {
TabViewItem: "ui/tab-view",
FormattedString: "text/formatted-string",
Span: "text/span",
ActionItem: "ui/action-bar",
NavigationButton: "ui/action-bar",
SegmentedBarItem: "ui/segmented-bar"
};
var CODEFILE = "codeFile";
var CSSFILE = "cssFile";
var platform;
function ensurePlatform() {
if (!platform) {
platform = __webpack_require__(39);
}
}
function getComponentModule(elementName, namespace, attributes, exports) {
var instance;
var instanceModule;
var componentModule;
elementName = elementName.split("-").map(function(s) {
return s[0].toUpperCase() + s.substring(1);
}).join("");
var moduleId = MODULES[elementName] || UI_PATH + (elementName.toLowerCase().indexOf("layout") !== -1 ? "layouts/" : "") + elementName.split(/(?=[A-Z])/).join("-").toLowerCase();
try {
if (types_1.isString(namespace)) {
var pathInsideTNSModules = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, "tns_modules", namespace);
if (file_system_1.Folder.exists(pathInsideTNSModules)) {
moduleId = pathInsideTNSModules;
} else {
moduleId = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, namespace);
}
}
instanceModule = global.loadModule(moduleId);
var instanceType = instanceModule[elementName] || Object;
instance = new instanceType();
} catch (ex) {
var debug = __webpack_require__(76);
throw new debug.ScopeError(ex, "Module '" + moduleId + "' not found for element '" + (namespace ? namespace + ":" : "") + elementName + "'.");
}
if (attributes) {
if (attributes[CODEFILE]) {
if (instance instanceof page_1.Page) {
var codeFilePath = attributes[CODEFILE].trim();
if (codeFilePath.indexOf("~/") === 0) {
codeFilePath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, codeFilePath.replace("~/", ""));
}
var codeFilePathWithExt = codeFilePath.indexOf(".js") !== -1 ? codeFilePath : codeFilePath + ".js";
if (file_system_1.File.exists(codeFilePathWithExt)) {
exports = global.loadModule(codeFilePath);
instance.exports = exports;
} else {
throw new Error('Code file with path "' + codeFilePathWithExt + '" cannot be found!');
}
} else {
throw new Error("Code file atribute is valid only for pages!");
}
}
if (attributes[CSSFILE]) {
if (instance instanceof page_1.Page) {
var cssFilePath = attributes[CSSFILE].trim();
if (cssFilePath.indexOf("~/") === 0) {
cssFilePath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, cssFilePath.replace("~/", ""));
}
if (file_system_1.File.exists(cssFilePath)) {
instance.addCssFile(cssFilePath);
instance[CSSFILE] = true;
} else {
throw new Error('Css file with path "' + cssFilePath + '" cannot be found!');
}
} else {
throw new Error("Css file atribute is valid only for pages!");
}
}
}
if (instance && instanceModule) {
for (var attr in attributes) {
var attrValue = attributes[attr];
if (attr.indexOf(":") !== -1) {
var platformName = attr.split(":")[0].trim();
ensurePlatform();
if (platformName.toLowerCase() === platform.device.os.toLowerCase()) {
attr = attr.split(":")[1].trim();
} else {
continue;
}
}
if (attr.indexOf(".") !== -1) {
var subObj = instance;
var properties = attr.split(".");
var subPropName = properties[properties.length - 1];
var i;
for (i = 0; i < properties.length - 1; i++) {
if (types_1.isDefined(subObj)) {
subObj = subObj[properties[i]];
}
}
if (types_1.isDefined(subObj)) {
setPropertyValue(subObj, instanceModule, exports, subPropName, attrValue);
}
} else {
setPropertyValue(instance, instanceModule, exports, attr, attrValue);
}
}
componentModule = {
component: instance,
exports: instanceModule
};
}
return componentModule;
}
exports.getComponentModule = getComponentModule;
function setPropertyValue(instance, instanceModule, exports, propertyName, propertyValue) {
if (isBinding(propertyValue) && instance.bind) {
var bindOptions = binding_builder_1.getBindingOptions(propertyName, getBindingExpressionFromAttribute(propertyValue));
instance.bind({
sourceProperty: bindOptions[binding_builder_1.bindingConstants.sourceProperty],
targetProperty: bindOptions[binding_builder_1.bindingConstants.targetProperty],
expression: bindOptions[binding_builder_1.bindingConstants.expression],
twoWay: bindOptions[binding_builder_1.bindingConstants.twoWay]
}, bindOptions[binding_builder_1.bindingConstants.source]);
} else if (view_1.isEventOrGesture(propertyName, instance)) {
var handler = exports && exports[propertyValue];
if (types_1.isFunction(handler)) {
instance.on(propertyName, handler);
}
} else {
var attrHandled = false;
var specialSetter = special_properties_1.getSpecialPropertySetter(propertyName);
if (!attrHandled && specialSetter) {
specialSetter(instance, propertyValue);
attrHandled = true;
}
if (!attrHandled && instance._applyXmlAttribute) {
attrHandled = instance._applyXmlAttribute(propertyName, propertyValue);
}
if (!attrHandled) {
if (propertyValue.trim() === "") {
instance[propertyName] = propertyValue;
} else {
var valueAsNumber = +propertyValue;
if (!isNaN(valueAsNumber)) {
instance[propertyName] = valueAsNumber;
} else if (propertyValue && (propertyValue.toLowerCase() === "true" || propertyValue.toLowerCase() === "false")) {
instance[propertyName] = propertyValue.toLowerCase() === "true" ? true : false;
} else {
instance[propertyName] = propertyValue;
}
}
}
}
}
exports.setPropertyValue = setPropertyValue;
function getBindingExpressionFromAttribute(value) {
return value.replace("{{", "").replace("}}", "").trim();
}
function isBinding(value) {
var isBinding;
if (types_1.isString(value)) {
var str = value.trim();
isBinding = str.indexOf("{{") === 0 && str.lastIndexOf("}}") === str.length - 2;
}
return isBinding;
}
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(81);
var enums_1 = __webpack_require__(23);
var view_1 = __webpack_require__(11);
global.moduleMerge(common, exports);
function setNativeDockProperty(data) {
var view = data.object;
if (view instanceof view_1.View) {
var nativeView = view._nativeView;
var lp = nativeView.getLayoutParams();
if (!(lp instanceof org.nativescript.widgets.CommonLayoutParams)) {
lp = new org.nativescript.widgets.CommonLayoutParams();
}
switch (data.newValue) {
case enums_1.Dock.left:
lp.dock = org.nativescript.widgets.Dock.left;
break;

case enums_1.Dock.top:
lp.dock = org.nativescript.widgets.Dock.top;
break;

case enums_1.Dock.right:
lp.dock = org.nativescript.widgets.Dock.right;
break;

case enums_1.Dock.bottom:
lp.dock = org.nativescript.widgets.Dock.bottom;
break;

default:
throw new Error("Invalid dock value: " + data.newValue + " on element: " + view);
}
nativeView.setLayoutParams(lp);
}
}
common.DockLayout.dockProperty.metadata.onSetNativeValue = setNativeDockProperty;
function setNativeStretchLastChildProperty(data) {
var dockLayout = data.object;
var nativeView = dockLayout._nativeView;
nativeView.setStretchLastChild(data.newValue);
}
common.DockLayout.stretchLastChildProperty.metadata.onSetNativeValue = setNativeStretchLastChildProperty;
var DockLayout = function(_super) {
__extends(DockLayout, _super);
function DockLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(DockLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DockLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
DockLayout.prototype._createUI = function() {
this._layout = new org.nativescript.widgets.DockLayout(this._context);
};
return DockLayout;
}(common.DockLayout);
exports.DockLayout = DockLayout;
}, function(module, exports, __webpack_require__) {
var platform = __webpack_require__(39);
var enums_1 = __webpack_require__(23);
var layout_base_1 = __webpack_require__(73);
var view_1 = __webpack_require__(11);
var proxy_1 = __webpack_require__(48);
var dependency_observable_1 = __webpack_require__(32);
var special_properties_1 = __webpack_require__(55);
var AffectsLayout = platform.device.os === platform.platformNames.android ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
function isDockValid(value) {
return value === enums_1.Dock.left || value === enums_1.Dock.top || value === enums_1.Dock.right || value === enums_1.Dock.bottom;
}
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
special_properties_1.registerSpecialProperty("dock", function(instance, propertyValue) {
DockLayout.setDock(instance, propertyValue);
});
var DockLayout = function(_super) {
__extends(DockLayout, _super);
function DockLayout() {
_super.apply(this, arguments);
}
DockLayout.onDockPropertyChanged = function(data) {
var view = data.object;
if (view instanceof view_1.View) {
var layout = view.parent;
if (layout instanceof DockLayout) {
layout.onDockChanged(view, data.oldValue, data.newValue);
}
}
};
DockLayout.getDock = function(element) {
return validateArgs(element)._getValue(DockLayout.dockProperty);
};
DockLayout.setDock = function(element, value) {
validateArgs(element)._setValue(DockLayout.dockProperty, value);
};
Object.defineProperty(DockLayout.prototype, "stretchLastChild", {
get: function() {
return this._getValue(DockLayout.stretchLastChildProperty);
},
set: function(value) {
this._setValue(DockLayout.stretchLastChildProperty, value);
},
enumerable: true,
configurable: true
});
DockLayout.prototype.onDockChanged = function(view, oldValue, newValue) {};
DockLayout.dockProperty = new dependency_observable_1.Property("dock", "DockLayout", new proxy_1.PropertyMetadata(enums_1.Dock.left, undefined, DockLayout.onDockPropertyChanged, isDockValid));
DockLayout.stretchLastChildProperty = new dependency_observable_1.Property("stretchLastChild", "DockLayout", new proxy_1.PropertyMetadata(true, AffectsLayout));
return DockLayout;
}(layout_base_1.LayoutBase);
exports.DockLayout = DockLayout;
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(21);
var common = __webpack_require__(83);
var view_1 = __webpack_require__(11);
global.moduleMerge(common, exports);
function setNativeProperty(data, setter) {
var view = data.object;
if (view instanceof view_1.View) {
var nativeView = view._nativeView;
var lp = nativeView.getLayoutParams();
if (!(lp instanceof org.nativescript.widgets.CommonLayoutParams)) {
lp = new org.nativescript.widgets.CommonLayoutParams();
}
setter(lp);
nativeView.setLayoutParams(lp);
}
}
function setNativeLeftProperty(data) {
setNativeProperty(data, function(lp) {
lp.left = data.newValue * utils.layout.getDisplayDensity();
});
}
function setNativeTopProperty(data) {
setNativeProperty(data, function(lp) {
lp.top = data.newValue * utils.layout.getDisplayDensity();
});
}
common.AbsoluteLayout.leftProperty.metadata.onSetNativeValue = setNativeLeftProperty;
common.AbsoluteLayout.topProperty.metadata.onSetNativeValue = setNativeTopProperty;
var AbsoluteLayout = function(_super) {
__extends(AbsoluteLayout, _super);
function AbsoluteLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(AbsoluteLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbsoluteLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
AbsoluteLayout.prototype._createUI = function() {
this._layout = new org.nativescript.widgets.AbsoluteLayout(this._context);
};
return AbsoluteLayout;
}(common.AbsoluteLayout);
exports.AbsoluteLayout = AbsoluteLayout;
}, function(module, exports, __webpack_require__) {
var layout_base_1 = __webpack_require__(73);
var view_1 = __webpack_require__(11);
var proxy_1 = __webpack_require__(48);
var dependency_observable_1 = __webpack_require__(32);
var special_properties_1 = __webpack_require__(55);
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
special_properties_1.registerSpecialProperty("left", function(instance, propertyValue) {
AbsoluteLayout.setLeft(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("top", function(instance, propertyValue) {
AbsoluteLayout.setTop(instance, !isNaN(+propertyValue) && +propertyValue);
});
var AbsoluteLayout = function(_super) {
__extends(AbsoluteLayout, _super);
function AbsoluteLayout() {
_super.apply(this, arguments);
}
AbsoluteLayout.isValid = function(value) {
return isFinite(value);
};
AbsoluteLayout.onLeftPropertyChanged = function(data) {
var view = data.object;
if (view instanceof view_1.View) {
var layout = view.parent;
if (layout instanceof AbsoluteLayout) {
layout.onLeftChanged(view, data.oldValue, data.newValue);
}
}
};
AbsoluteLayout.onTopPropertyChanged = function(data) {
var view = data.object;
if (view instanceof view_1.View) {
var layout = view.parent;
if (layout instanceof AbsoluteLayout) {
layout.onTopChanged(view, data.oldValue, data.newValue);
}
}
};
AbsoluteLayout.getLeft = function(element) {
return validateArgs(element)._getValue(AbsoluteLayout.leftProperty);
};
AbsoluteLayout.setLeft = function(element, value) {
validateArgs(element)._setValue(AbsoluteLayout.leftProperty, value);
};
AbsoluteLayout.getTop = function(element) {
return validateArgs(element)._getValue(AbsoluteLayout.topProperty);
};
AbsoluteLayout.setTop = function(element, value) {
validateArgs(element)._setValue(AbsoluteLayout.topProperty, value);
};
AbsoluteLayout.prototype.onLeftChanged = function(view, oldValue, newValue) {};
AbsoluteLayout.prototype.onTopChanged = function(view, oldValue, newValue) {};
AbsoluteLayout.leftProperty = new dependency_observable_1.Property("left", "AbsoluteLayout", new proxy_1.PropertyMetadata(0, undefined, AbsoluteLayout.onLeftPropertyChanged, AbsoluteLayout.isValid));
AbsoluteLayout.topProperty = new dependency_observable_1.Property("top", "AbsoluteLayout", new proxy_1.PropertyMetadata(0, undefined, AbsoluteLayout.onTopPropertyChanged, AbsoluteLayout.isValid));
return AbsoluteLayout;
}(layout_base_1.LayoutBase);
exports.AbsoluteLayout = AbsoluteLayout;
}, function(module, exports, __webpack_require__) {
var platform = __webpack_require__(39);
var types = __webpack_require__(13);
var trace = __webpack_require__(26);
var _sdkVersion;
var _defaultInterpolator;
var ENTER_POPEXIT_TRANSITION = "ENTER_POPEXIT_TRANSITION";
var EXIT_POPENTER_TRANSITION = "EXIT_POPENTER_TRANSITION";
var COMPLETE_PAGE_ADDITION_WHEN_TRANSITION_ENDS = "COMPLETE_PAGE_ADDITION_WHEN_TRANSITION_ENDS";
var COMPLETE_PAGE_REMOVAL_WHEN_TRANSITION_ENDS = "COMPLETE_PAGE_REMOVAL_WHEN_TRANSITION_ENDS";
var enterFakeResourceId = -10;
var exitFakeResourceId = -20;
var popEnterFakeResourceId = -30;
var popExitFakeResourceId = -40;
var AndroidTransitionType;
(function(AndroidTransitionType) {
AndroidTransitionType.enter = "enter";
AndroidTransitionType.exit = "exit";
AndroidTransitionType.popEnter = "popEnter";
AndroidTransitionType.popExit = "popExit";
})(AndroidTransitionType = exports.AndroidTransitionType || (exports.AndroidTransitionType = {}));
function _clearForwardTransitions(fragment) {
if (fragment[EXIT_POPENTER_TRANSITION]) {
trace.write("Cleared EXIT_POPENTER_TRANSITION " + fragment[EXIT_POPENTER_TRANSITION] + " for " + fragment.getTag(), trace.categories.Transition);
fragment[EXIT_POPENTER_TRANSITION] = undefined;
}
if (_sdkVersion >= 21) {
var exitTransition = fragment.getExitTransition();
if (exitTransition) {
trace.write("Cleared Exit " + exitTransition.getClass().getSimpleName() + " transition for " + fragment.getTag(), trace.categories.Transition);
fragment.setExitTransition(null);
}
var reenterTransition = fragment.getReenterTransition();
if (reenterTransition) {
trace.write("Cleared Pop Enter " + reenterTransition.getClass().getSimpleName() + " transition for " + fragment.getTag(), trace.categories.Transition);
fragment.setReenterTransition(null);
}
}
}
exports._clearForwardTransitions = _clearForwardTransitions;
function _setAndroidFragmentTransitions(navigationTransition, currentFragment, newFragment, fragmentTransaction) {
var name;
if (navigationTransition.name) {
name = navigationTransition.name.toLowerCase();
}
var useLollipopTransition = name && (name.indexOf("slide") === 0 || name === "fade" || name === "explode") && _sdkVersion >= 21;
if (useLollipopTransition) {
newFragment.setAllowEnterTransitionOverlap(true);
newFragment.setAllowReturnTransitionOverlap(true);
if (currentFragment) {
currentFragment.setAllowEnterTransitionOverlap(true);
currentFragment.setAllowReturnTransitionOverlap(true);
}
if (name.indexOf("slide") === 0) {
var direction = name.substr("slide".length) || "left";
switch (direction) {
case "left":
var rightEdge = new android.transition.Slide(android.view.Gravity.RIGHT);
_setUpNativeTransition(navigationTransition, rightEdge);
_addNativeTransitionListener(newFragment, rightEdge);
newFragment.setEnterTransition(rightEdge);
if (currentFragment) {
var leftEdge_1 = new android.transition.Slide(android.view.Gravity.LEFT);
_setUpNativeTransition(navigationTransition, leftEdge_1);
_addNativeTransitionListener(currentFragment, leftEdge_1);
currentFragment.setExitTransition(leftEdge_1);
}
break;

case "right":
var leftEdge = new android.transition.Slide(android.view.Gravity.LEFT);
_setUpNativeTransition(navigationTransition, leftEdge);
_addNativeTransitionListener(newFragment, leftEdge);
newFragment.setEnterTransition(leftEdge);
if (currentFragment) {
var rightEdge_1 = new android.transition.Slide(android.view.Gravity.RIGHT);
_setUpNativeTransition(navigationTransition, rightEdge_1);
_addNativeTransitionListener(currentFragment, rightEdge_1);
currentFragment.setExitTransition(rightEdge_1);
}
break;

case "top":
var bottomEdge = new android.transition.Slide(android.view.Gravity.BOTTOM);
_setUpNativeTransition(navigationTransition, bottomEdge);
_addNativeTransitionListener(newFragment, bottomEdge);
newFragment.setEnterTransition(bottomEdge);
if (currentFragment) {
var topEdge_1 = new android.transition.Slide(android.view.Gravity.TOP);
_setUpNativeTransition(navigationTransition, topEdge_1);
_addNativeTransitionListener(currentFragment, topEdge_1);
currentFragment.setExitTransition(topEdge_1);
}
break;

case "bottom":
var topEdge = new android.transition.Slide(android.view.Gravity.TOP);
_setUpNativeTransition(navigationTransition, topEdge);
_addNativeTransitionListener(newFragment, topEdge);
newFragment.setEnterTransition(topEdge);
if (currentFragment) {
var bottomEdge_1 = new android.transition.Slide(android.view.Gravity.BOTTOM);
_setUpNativeTransition(navigationTransition, bottomEdge_1);
_addNativeTransitionListener(currentFragment, bottomEdge_1);
currentFragment.setExitTransition(bottomEdge_1);
}
break;
}
} else if (name === "fade") {
var fadeEnter = new android.transition.Fade(android.transition.Fade.IN);
_setUpNativeTransition(navigationTransition, fadeEnter);
_addNativeTransitionListener(newFragment, fadeEnter);
newFragment.setEnterTransition(fadeEnter);
var fadeReturn = new android.transition.Fade(android.transition.Fade.OUT);
_setUpNativeTransition(navigationTransition, fadeReturn);
_addNativeTransitionListener(newFragment, fadeReturn);
newFragment.setReturnTransition(fadeReturn);
if (currentFragment) {
var fadeExit = new android.transition.Fade(android.transition.Fade.OUT);
_setUpNativeTransition(navigationTransition, fadeExit);
_addNativeTransitionListener(currentFragment, fadeExit);
currentFragment.setExitTransition(fadeExit);
var fadeReenter = new android.transition.Fade(android.transition.Fade.IN);
_setUpNativeTransition(navigationTransition, fadeReenter);
_addNativeTransitionListener(currentFragment, fadeReenter);
currentFragment.setReenterTransition(fadeReenter);
}
} else if (name === "explode") {
var explodeEnter = new android.transition.Explode();
_setUpNativeTransition(navigationTransition, explodeEnter);
_addNativeTransitionListener(newFragment, explodeEnter);
newFragment.setEnterTransition(explodeEnter);
if (currentFragment) {
var explodeExit = new android.transition.Explode();
_setUpNativeTransition(navigationTransition, explodeExit);
_addNativeTransitionListener(currentFragment, explodeExit);
currentFragment.setExitTransition(explodeExit);
}
}
return;
}
var transition;
if (name) {
if (name.indexOf("slide") === 0) {
var slideTransitionModule = __webpack_require__(85);
var direction = name.substr("slide".length) || "left";
transition = new slideTransitionModule.SlideTransition(direction, navigationTransition.duration, navigationTransition.curve);
} else if (name === "fade") {
var fadeTransitionModule = __webpack_require__(86);
transition = new fadeTransitionModule.FadeTransition(navigationTransition.duration, navigationTransition.curve);
} else if (name.indexOf("flip") === 0) {
var flipTransitionModule = __webpack_require__(87);
var direction = name.substr("flip".length) || "right";
transition = new flipTransitionModule.FlipTransition(direction, navigationTransition.duration, navigationTransition.curve);
}
} else {
transition = navigationTransition.instance;
}
if (transition) {
newFragment[ENTER_POPEXIT_TRANSITION] = transition;
if (currentFragment) {
currentFragment[EXIT_POPENTER_TRANSITION] = transition;
}
fragmentTransaction.setCustomAnimations(enterFakeResourceId, exitFakeResourceId, popEnterFakeResourceId, popExitFakeResourceId);
}
}
exports._setAndroidFragmentTransitions = _setAndroidFragmentTransitions;
function _setUpNativeTransition(navigationTransition, nativeTransition) {
if (navigationTransition.duration) {
nativeTransition.setDuration(navigationTransition.duration);
}
if (navigationTransition.curve) {
var animation = __webpack_require__(24);
var interpolator = animation._resolveAnimationCurve(navigationTransition.curve);
nativeTransition.setInterpolator(interpolator);
} else {
nativeTransition.setInterpolator(_defaultInterpolator);
}
}
function _onFragmentShown(fragment, isBack) {
var transitionType = isBack ? "Pop Enter" : "Enter";
var relevantTransition = isBack ? EXIT_POPENTER_TRANSITION : ENTER_POPEXIT_TRANSITION;
if (fragment[relevantTransition]) {
trace.write(fragment.getTag() + " has been shown when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + fragment[relevantTransition] + ". Will complete page addition when transition ends.", trace.categories.Transition);
fragment[COMPLETE_PAGE_ADDITION_WHEN_TRANSITION_ENDS] = {
isBack: isBack
};
} else if (_sdkVersion >= 21) {
var nativeTransition = isBack ? fragment.getReenterTransition() : fragment.getEnterTransition();
if (nativeTransition) {
trace.write(fragment.getTag() + " has been shown when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + nativeTransition.getClass().getSimpleName() + " transition. Will complete page addition when transition ends.", trace.categories.Transition);
fragment[COMPLETE_PAGE_ADDITION_WHEN_TRANSITION_ENDS] = {
isBack: isBack
};
}
}
if (fragment[COMPLETE_PAGE_ADDITION_WHEN_TRANSITION_ENDS] === undefined) {
_completePageAddition(fragment, isBack, true);
}
}
exports._onFragmentShown = _onFragmentShown;
function _onFragmentHidden(fragment, isBack) {
var transitionType = isBack ? "Pop Exit" : "Exit";
var relevantTransition = isBack ? ENTER_POPEXIT_TRANSITION : EXIT_POPENTER_TRANSITION;
if (fragment[relevantTransition]) {
trace.write(fragment.getTag() + " has been hidden when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + fragment[relevantTransition] + ". Will complete page removal when transition ends.", trace.categories.Transition);
fragment[COMPLETE_PAGE_REMOVAL_WHEN_TRANSITION_ENDS] = true;
} else if (_sdkVersion >= 21) {
var nativeTransition = isBack ? fragment.getReturnTransition() : fragment.getExitTransition();
if (nativeTransition) {
trace.write(fragment.getTag() + " has been hidden when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + nativeTransition.getClass().getSimpleName() + " transition. Will complete page removal when transition ends.", trace.categories.Transition);
fragment[COMPLETE_PAGE_REMOVAL_WHEN_TRANSITION_ENDS] = true;
}
}
if (fragment[COMPLETE_PAGE_REMOVAL_WHEN_TRANSITION_ENDS] === undefined) {
_completePageRemoval(fragment, true);
}
}
exports._onFragmentHidden = _onFragmentHidden;
function _completePageAddition(fragment, isBack, force) {
if (fragment[COMPLETE_PAGE_ADDITION_WHEN_TRANSITION_ENDS] || force) {
fragment[COMPLETE_PAGE_ADDITION_WHEN_TRANSITION_ENDS] = undefined;
var frame = fragment.frame;
var entry = fragment.entry;
var page = entry.resolvedPage;
frame._currentEntry = entry;
page.onNavigatedTo(isBack);
frame._processNavigationQueue(page);
trace.write("ADDITION of " + page + " completed", trace.categories.Transition);
}
}
function _completePageRemoval(fragment, force) {
if (fragment[COMPLETE_PAGE_REMOVAL_WHEN_TRANSITION_ENDS] || force) {
fragment[COMPLETE_PAGE_REMOVAL_WHEN_TRANSITION_ENDS] = undefined;
var frame = fragment.frame;
var entry = fragment.entry;
var page = entry.resolvedPage;
if (page.frame) {
frame._removeView(page);
}
trace.write("REMOVAL of " + page + " completed", trace.categories.Transition);
}
}
function _addNativeTransitionListener(fragment, nativeTransition) {
var transitionListener = new android.transition.Transition.TransitionListener({
onTransitionCancel: function(transition) {
trace.write("CANCEL " + nativeTransition + " transition for " + fragment, trace.categories.Transition);
if (fragment[COMPLETE_PAGE_REMOVAL_WHEN_TRANSITION_ENDS]) {
_completePageRemoval(fragment);
}
if (fragment[COMPLETE_PAGE_ADDITION_WHEN_TRANSITION_ENDS]) {
_completePageAddition(fragment, fragment[COMPLETE_PAGE_ADDITION_WHEN_TRANSITION_ENDS].isBack);
}
},
onTransitionEnd: function(transition) {
trace.write("END " + nativeTransition + " transition for " + fragment, trace.categories.Transition);
if (fragment[COMPLETE_PAGE_REMOVAL_WHEN_TRANSITION_ENDS]) {
_completePageRemoval(fragment);
}
if (fragment[COMPLETE_PAGE_ADDITION_WHEN_TRANSITION_ENDS]) {
_completePageAddition(fragment, fragment[COMPLETE_PAGE_ADDITION_WHEN_TRANSITION_ENDS].isBack);
}
},
onTransitionPause: function(transition) {
trace.write("PAUSE " + nativeTransition + " transition for " + fragment, trace.categories.Transition);
},
onTransitionResume: function(transition) {
trace.write("RESUME " + nativeTransition + " transition for " + fragment, trace.categories.Transition);
},
onTransitionStart: function(transition) {
trace.write("START " + nativeTransition + " transition for " + fragment, trace.categories.Transition);
}
});
nativeTransition.addListener(transitionListener);
}
function _onFragmentCreateAnimator(fragment, nextAnim) {
var transitionType;
switch (nextAnim) {
case enterFakeResourceId:
transitionType = AndroidTransitionType.enter;
break;

case exitFakeResourceId:
transitionType = AndroidTransitionType.exit;
break;

case popEnterFakeResourceId:
transitionType = AndroidTransitionType.popEnter;
break;

case popExitFakeResourceId:
transitionType = AndroidTransitionType.popExit;
break;
}
var transition;
switch (transitionType) {
case AndroidTransitionType.enter:
case AndroidTransitionType.popExit:
transition = fragment[ENTER_POPEXIT_TRANSITION];
break;

case AndroidTransitionType.exit:
case AndroidTransitionType.popEnter:
transition = fragment[EXIT_POPENTER_TRANSITION];
break;
}
var animator;
if (transition) {
animator = transition.createAndroidAnimator(transitionType);
var transitionListener = new android.animation.Animator.AnimatorListener({
onAnimationStart: function(animator) {
trace.write("START " + transitionType + " " + transition + " for " + fragment.getTag(), trace.categories.Transition);
},
onAnimationRepeat: function(animator) {
trace.write("REPEAT " + transitionType + " " + transition + " for " + fragment.getTag(), trace.categories.Transition);
},
onAnimationEnd: function(animator) {
trace.write("END " + transitionType + " " + transition, trace.categories.Transition);
if (fragment[COMPLETE_PAGE_REMOVAL_WHEN_TRANSITION_ENDS]) {
_completePageRemoval(fragment);
}
if (fragment[COMPLETE_PAGE_ADDITION_WHEN_TRANSITION_ENDS]) {
_completePageAddition(fragment, fragment[COMPLETE_PAGE_ADDITION_WHEN_TRANSITION_ENDS].isBack);
}
},
onAnimationCancel: function(animator) {
trace.write("CANCEL " + transitionType + " " + transition + " for " + fragment.getTag(), trace.categories.Transition);
if (fragment[COMPLETE_PAGE_REMOVAL_WHEN_TRANSITION_ENDS]) {
_completePageRemoval(fragment);
}
if (fragment[COMPLETE_PAGE_ADDITION_WHEN_TRANSITION_ENDS]) {
_completePageAddition(fragment, fragment[COMPLETE_PAGE_ADDITION_WHEN_TRANSITION_ENDS].isBack);
}
}
});
animator.addListener(transitionListener);
}
return animator;
}
exports._onFragmentCreateAnimator = _onFragmentCreateAnimator;
var transitionId = 0;
var Transition = function() {
function Transition(duration, curve) {
this._duration = duration;
if (curve) {
var animation = __webpack_require__(24);
this._interpolator = animation._resolveAnimationCurve(curve);
} else {
this._interpolator = _defaultInterpolator;
}
this._id = transitionId++;
}
Transition.prototype.getDuration = function() {
return this._duration;
};
Transition.prototype.getCurve = function() {
return this._interpolator;
};
Transition.prototype.animateIOSTransition = function(containerView, fromView, toView, operation, completion) {
throw new Error("Abstract method call");
};
Transition.prototype.createAndroidAnimator = function(transitionType) {
throw new Error("Abstract method call");
};
Transition.prototype.toString = function() {
return types.getClass(this) + "@" + this._id;
};
return Transition;
}();
exports.Transition = Transition;
}, function(module, exports, __webpack_require__) {
var transition = __webpack_require__(84);
var platform = __webpack_require__(39);
var screenWidth;
var screenHeight;
var SlideTransition = function(_super) {
__extends(SlideTransition, _super);
function SlideTransition(direction, duration, curve) {
_super.call(this, duration, curve);
this._direction = direction;
}
SlideTransition.prototype.createAndroidAnimator = function(transitionType) {
var translationValues = Array.create("float", 2);
switch (this._direction) {
case "left":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = screenWidth;
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = -screenWidth;
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = -screenWidth;
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = screenWidth;
break;
}
break;

case "right":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = -screenWidth;
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = screenWidth;
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = screenWidth;
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = -screenWidth;
break;
}
break;

case "top":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = screenHeight;
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = -screenHeight;
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = -screenHeight;
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = screenHeight;
break;
}
break;

case "bottom":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = -screenHeight;
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = screenHeight;
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = screenHeight;
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = -screenHeight;
break;
}
break;
}
var prop;
if (this._direction === "left" || this._direction === "right") {
prop = "translationX";
} else {
prop = "translationY";
}
var animator = android.animation.ObjectAnimator.ofFloat(null, prop, translationValues);
var duration = this.getDuration();
if (duration !== undefined) {
animator.setDuration(duration);
}
animator.setInterpolator(this.getCurve());
return animator;
};
return SlideTransition;
}(transition.Transition);
exports.SlideTransition = SlideTransition;
}, function(module, exports, __webpack_require__) {
var transition_1 = __webpack_require__(84);
var FadeTransition = function(_super) {
__extends(FadeTransition, _super);
function FadeTransition() {
_super.apply(this, arguments);
}
FadeTransition.prototype.createAndroidAnimator = function(transitionType) {
var alphaValues = Array.create("float", 2);
switch (transitionType) {
case transition_1.AndroidTransitionType.enter:
case transition_1.AndroidTransitionType.popEnter:
alphaValues[0] = 0;
alphaValues[1] = 1;
break;

case transition_1.AndroidTransitionType.exit:
case transition_1.AndroidTransitionType.popExit:
alphaValues[0] = 1;
alphaValues[1] = 0;
break;
}
var animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", alphaValues);
var duration = this.getDuration();
if (duration !== undefined) {
animator.setDuration(duration);
}
animator.setInterpolator(this.getCurve());
return animator;
};
return FadeTransition;
}(transition_1.Transition);
exports.FadeTransition = FadeTransition;
}, function(module, exports, __webpack_require__) {
var transition_1 = __webpack_require__(84);
var FlipTransition = function(_super) {
__extends(FlipTransition, _super);
function FlipTransition(direction, duration, curve) {
_super.call(this, duration, curve);
this._direction = direction;
}
FlipTransition.prototype.createAndroidAnimator = function(transitionType) {
var objectAnimators;
var values;
var animator;
var animatorSet = new android.animation.AnimatorSet();
var fullDuration = this.getDuration() || 300;
var interpolator = this.getCurve();
var rotationY = this._direction === "right" ? 180 : -180;
switch (transitionType) {
case transition_1.AndroidTransitionType.enter:
objectAnimators = Array.create(android.animation.Animator, 3);
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setDuration(0);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = rotationY;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[1] = animator;
values = Array.create("float", 2);
values[0] = 0;
values[1] = 1;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[2] = animator;
break;

case transition_1.AndroidTransitionType.exit:
objectAnimators = Array.create(android.animation.Animator, 2);
values = Array.create("float", 2);
values[0] = 0;
values[1] = -rotationY;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[1] = animator;
break;

case transition_1.AndroidTransitionType.popEnter:
objectAnimators = Array.create(android.animation.Animator, 3);
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setDuration(0);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = -rotationY;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[1] = animator;
values = Array.create("float", 2);
values[0] = 0;
values[1] = 1;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[2] = animator;
break;

case transition_1.AndroidTransitionType.popExit:
objectAnimators = Array.create(android.animation.Animator, 2);
values = Array.create("float", 2);
values[0] = 0;
values[1] = rotationY;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[1] = animator;
break;
}
animatorSet.playTogether(objectAnimators);
return animatorSet;
};
return FlipTransition;
}(transition_1.Transition);
exports.FlipTransition = FlipTransition;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(89);
function onSecurePropertyChanged(data) {
var textField = data.object;
if (!textField.android) {
return;
}
var currentInputType = textField.android.getInputType();
var currentClass = currentInputType & android.text.InputType.TYPE_MASK_CLASS;
var currentFlags = currentInputType & android.text.InputType.TYPE_MASK_FLAGS;
var newInputType = currentInputType;
if (data.newValue) {
if (currentClass === android.text.InputType.TYPE_CLASS_TEXT) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD;
} else if (currentClass === android.text.InputType.TYPE_CLASS_NUMBER) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_NUMBER_VARIATION_PASSWORD;
}
newInputType = newInputType & ~28672;
} else {
if (currentClass === android.text.InputType.TYPE_CLASS_TEXT) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL;
} else if (currentClass === android.text.InputType.TYPE_CLASS_NUMBER) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL;
}
}
textField.android.setInputType(newInputType);
}
common.secureProperty.metadata.onSetNativeValue = onSecurePropertyChanged;
global.moduleMerge(common, exports);
var TextField = function(_super) {
__extends(TextField, _super);
function TextField() {
_super.apply(this, arguments);
}
TextField.prototype._configureEditText = function() {
this.android.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
this.android.setLines(1);
this.android.setMaxLines(1);
this.android.setHorizontallyScrolling(true);
};
TextField.prototype._onReturnPress = function() {
this.notify({
eventName: TextField.returnPressEvent,
object: this
});
};
return TextField;
}(common.TextField);
exports.TextField = TextField;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(32);
var proxy = __webpack_require__(48);
var textBase = __webpack_require__(90);
var editableTextBase = __webpack_require__(93);
exports.secureProperty = new dependencyObservable.Property("secure", "TextField", new proxy.PropertyMetadata(false));
global.moduleMerge(textBase, exports);
var TextField = function(_super) {
__extends(TextField, _super);
function TextField(options) {
_super.call(this, options);
}
Object.defineProperty(TextField.prototype, "secure", {
get: function() {
return this._getValue(exports.secureProperty);
},
set: function(value) {
this._setValue(exports.secureProperty, value);
},
enumerable: true,
configurable: true
});
TextField.returnPressEvent = "returnPress";
return TextField;
}(editableTextBase.EditableTextBase);
exports.TextField = TextField;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(91);
var types = __webpack_require__(13);
var TextBase = function(_super) {
__extends(TextBase, _super);
function TextBase() {
_super.apply(this, arguments);
}
TextBase.prototype._onTextPropertyChanged = function(data) {
if (this.android) {
var newValue = types.isNullOrUndefined(data.newValue) ? "" : data.newValue + "";
this.android.setText(newValue);
}
};
TextBase.prototype._setFormattedTextPropertyToNative = function(value) {
if (this.android) {
this.android.setText(value._formattedText);
}
};
return TextBase;
}(common.TextBase);
exports.TextBase = TextBase;
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(11);
var observable = __webpack_require__(17);
var dependencyObservable = __webpack_require__(32);
var proxy = __webpack_require__(48);
var formattedString = __webpack_require__(56);
var tbs = __webpack_require__(92);
var weakEvents;
function ensureWeakEvents() {
if (!weakEvents) {
weakEvents = __webpack_require__(50);
}
}
var textProperty = new dependencyObservable.Property("text", "TextBase", new proxy.PropertyMetadata("", dependencyObservable.PropertyMetadataSettings.AffectsLayout));
var formattedTextProperty = new dependencyObservable.Property("formattedText", "TextBase", new proxy.PropertyMetadata("", dependencyObservable.PropertyMetadataSettings.AffectsLayout));
function onTextPropertyChanged(data) {
var textBase = data.object;
textBase._onTextPropertyChanged(data);
}
textProperty.metadata.onSetNativeValue = onTextPropertyChanged;
function onFormattedTextPropertyChanged(data) {
var textBase = data.object;
textBase._onFormattedTextPropertyChanged(data);
}
formattedTextProperty.metadata.onSetNativeValue = onFormattedTextPropertyChanged;
var TextBase = function(_super) {
__extends(TextBase, _super);
function TextBase(options) {
_super.call(this, options);
}
TextBase.prototype._onBindingContextChanged = function(oldValue, newValue) {
_super.prototype._onBindingContextChanged.call(this, oldValue, newValue);
if (this.formattedText) {
this.formattedText.updateSpansBindingContext(newValue);
}
};
Object.defineProperty(TextBase.prototype, "text", {
get: function() {
return this._getValue(TextBase.textProperty);
},
set: function(value) {
this._setValue(TextBase.textProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBase.prototype, "fontSize", {
get: function() {
return this.style.fontSize;
},
set: function(value) {
this.style.fontSize = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBase.prototype, "textAlignment", {
get: function() {
return this.style.textAlignment;
},
set: function(value) {
this.style.textAlignment = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBase.prototype, "formattedText", {
get: function() {
return this._getValue(TextBase.formattedTextProperty);
},
set: function(value) {
if (this.formattedText !== value) {
ensureWeakEvents();
if (this.formattedText) {
weakEvents.removeWeakEventListener(this.formattedText, observable.Observable.propertyChangeEvent, this.onFormattedTextChanged, this);
}
this._setValue(TextBase.formattedTextProperty, value);
if (value) {
weakEvents.addWeakEventListener(value, observable.Observable.propertyChangeEvent, this.onFormattedTextChanged, this);
}
}
},
enumerable: true,
configurable: true
});
TextBase.prototype.onFormattedTextChanged = function(eventData) {
this._setFormattedTextPropertyToNative(eventData.value);
};
TextBase.prototype._onTextPropertyChanged = function(data) {};
TextBase.prototype._setFormattedTextPropertyToNative = function(value) {};
TextBase.prototype._onFormattedTextPropertyChanged = function(data) {
if (data.newValue) {
data.newValue.parent = this;
}
this._setFormattedTextPropertyToNative(data.newValue);
};
TextBase.prototype._addChildFromBuilder = function(name, value) {
formattedString.FormattedString.addFormattedStringToView(this, name, value);
};
TextBase.textProperty = textProperty;
TextBase.formattedTextProperty = formattedTextProperty;
return TextBase;
}(view.View);
exports.TextBase = TextBase;
tbs.TextBaseStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(21);
var style = __webpack_require__(14);
var enums = __webpack_require__(23);
var TextBaseStyler = function() {
function TextBaseStyler() {}
TextBaseStyler.setColorProperty = function(view, newValue) {
view._nativeView.setTextColor(newValue);
};
TextBaseStyler.resetColorProperty = function(view, nativeValue) {
view._nativeView.setTextColor(nativeValue);
};
TextBaseStyler.getNativeColorValue = function(view) {
return view._nativeView.getTextColors().getDefaultColor();
};
TextBaseStyler.setFontInternalProperty = function(view, newValue, nativeValue) {
var tv = view._nativeView;
var fontValue = newValue;
var typeface = fontValue.getAndroidTypeface();
if (typeface) {
tv.setTypeface(typeface);
} else {
tv.setTypeface(nativeValue.typeface);
}
if (fontValue.fontSize) {
tv.setTextSize(fontValue.fontSize);
} else {
tv.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
};
TextBaseStyler.resetFontInternalProperty = function(view, nativeValue) {
var tv = view._nativeView;
if (tv && nativeValue) {
tv.setTypeface(nativeValue.typeface);
tv.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
};
TextBaseStyler.getNativeFontInternalValue = function(view) {
var tv = view._nativeView;
return {
typeface: tv.getTypeface(),
size: tv.getTextSize()
};
};
TextBaseStyler.setTextAlignmentProperty = function(view, newValue) {
var verticalGravity = view._nativeView.getGravity() & android.view.Gravity.VERTICAL_GRAVITY_MASK;
switch (newValue) {
case enums.TextAlignment.left:
view._nativeView.setGravity(android.view.Gravity.LEFT | verticalGravity);
break;

case enums.TextAlignment.center:
view._nativeView.setGravity(android.view.Gravity.CENTER_HORIZONTAL | verticalGravity);
break;

case enums.TextAlignment.right:
view._nativeView.setGravity(android.view.Gravity.RIGHT | verticalGravity);
break;

default:
break;
}
};
TextBaseStyler.resetTextAlignmentProperty = function(view, nativeValue) {
view._nativeView.setGravity(nativeValue);
};
TextBaseStyler.getNativeTextAlignmentValue = function(view) {
return view._nativeView.getGravity();
};
TextBaseStyler.setTextDecorationProperty = function(view, newValue) {
utils.ad.setTextDecoration(view._nativeView, newValue);
};
TextBaseStyler.resetTextDecorationProperty = function(view, nativeValue) {
utils.ad.setTextDecoration(view._nativeView, enums.TextDecoration.none);
};
TextBaseStyler.setTextTransformProperty = function(view, newValue) {
utils.ad.setTextTransform(view, newValue);
};
TextBaseStyler.resetTextTransformProperty = function(view, nativeValue) {
utils.ad.setTextTransform(view, enums.TextTransform.none);
};
TextBaseStyler.setWhiteSpaceProperty = function(view, newValue) {
utils.ad.setWhiteSpace(view._nativeView, newValue);
};
TextBaseStyler.resetWhiteSpaceProperty = function(view, nativeValue) {
utils.ad.setWhiteSpace(view._nativeView, enums.WhiteSpace.normal);
};
TextBaseStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setColorProperty, TextBaseStyler.resetColorProperty, TextBaseStyler.getNativeColorValue), "TextBase");
style.registerHandler(style.fontInternalProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setFontInternalProperty, TextBaseStyler.resetFontInternalProperty, TextBaseStyler.getNativeFontInternalValue), "TextBase");
style.registerHandler(style.textAlignmentProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextAlignmentProperty, TextBaseStyler.resetTextAlignmentProperty, TextBaseStyler.getNativeTextAlignmentValue), "TextBase");
style.registerHandler(style.textDecorationProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextDecorationProperty, TextBaseStyler.resetTextDecorationProperty), "TextBase");
style.registerHandler(style.textTransformProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextTransformProperty, TextBaseStyler.resetTextTransformProperty), "TextBase");
style.registerHandler(style.whiteSpaceProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setWhiteSpaceProperty, TextBaseStyler.resetWhiteSpaceProperty), "TextBase");
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setColorProperty, TextBaseStyler.resetColorProperty, TextBaseStyler.getNativeColorValue), "Button");
style.registerHandler(style.fontInternalProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setFontInternalProperty, TextBaseStyler.resetFontInternalProperty, TextBaseStyler.getNativeFontInternalValue), "Button");
style.registerHandler(style.textAlignmentProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextAlignmentProperty, TextBaseStyler.resetTextAlignmentProperty, TextBaseStyler.getNativeTextAlignmentValue), "Button");
style.registerHandler(style.textDecorationProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextDecorationProperty, TextBaseStyler.resetTextDecorationProperty), "Button");
style.registerHandler(style.textTransformProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextTransformProperty, TextBaseStyler.resetTextTransformProperty), "Button");
style.registerHandler(style.whiteSpaceProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setWhiteSpaceProperty, TextBaseStyler.resetWhiteSpaceProperty), "Button");
};
return TextBaseStyler;
}();
exports.TextBaseStyler = TextBaseStyler;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(94);
var enums = __webpack_require__(23);
var utils = __webpack_require__(21);
var types = __webpack_require__(13);
var EditableTextBase = function(_super) {
__extends(EditableTextBase, _super);
function EditableTextBase(options) {
_super.call(this, options);
}
Object.defineProperty(EditableTextBase.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
EditableTextBase.prototype._createUI = function() {
this._android = new android.widget.EditText(this._context);
this._configureEditText();
this.android.setTag(this.android.getKeyListener());
var that = new WeakRef(this);
this._textWatcher = new android.text.TextWatcher({
beforeTextChanged: function(text, start, count, after) {},
onTextChanged: function(text, start, before, count) {
var owner = that.get();
if (!owner) {
return;
}
var selectionStart = owner.android.getSelectionStart();
owner.android.removeTextChangedListener(owner._textWatcher);
owner.style._updateTextTransform();
owner.android.addTextChangedListener(owner._textWatcher);
owner.android.setSelection(selectionStart);
},
afterTextChanged: function(editable) {
var owner = that.get();
if (!owner) {
return;
}
switch (owner.updateTextTrigger) {
case enums.UpdateTextTrigger.focusLost:
owner._dirtyTextAccumulator = editable.toString();
break;

case enums.UpdateTextTrigger.textChanged:
owner._onPropertyChangedFromNative(EditableTextBase.textProperty, editable.toString());
break;

default:
throw new Error("Invalid updateTextTrigger: " + owner.updateTextTrigger);
}
}
});
this._android.addTextChangedListener(this._textWatcher);
var focusChangeListener = new android.view.View.OnFocusChangeListener({
onFocusChange: function(view, hasFocus) {
var owner = that.get();
if (!owner) {
return;
}
if (!hasFocus) {
if (owner._dirtyTextAccumulator) {
owner._onPropertyChangedFromNative(EditableTextBase.textProperty, owner._dirtyTextAccumulator);
owner._dirtyTextAccumulator = undefined;
}
owner.dismissSoftInput();
}
}
});
this._android.setOnFocusChangeListener(focusChangeListener);
var editorActionListener = new android.widget.TextView.OnEditorActionListener({
onEditorAction: function(textView, actionId, event) {
var owner = that.get();
if (owner) {
if (actionId === android.view.inputmethod.EditorInfo.IME_ACTION_DONE || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_GO || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_SEND || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_NEXT) {
owner.dismissSoftInput();
}
if (event && event.getKeyCode() === android.view.KeyEvent.KEYCODE_ENTER) {
owner._onReturnPress();
}
}
return false;
}
});
this._android.setOnEditorActionListener(editorActionListener);
};
EditableTextBase.prototype._configureEditText = function() {};
EditableTextBase.prototype._onReturnPress = function() {};
EditableTextBase.prototype._onDetached = function(force) {
this._android = undefined;
_super.prototype._onDetached.call(this, force);
};
EditableTextBase.prototype.dismissSoftInput = function() {
utils.ad.dismissSoftInput(this._nativeView);
};
EditableTextBase.prototype.focus = function() {
var result = _super.prototype.focus.call(this);
if (result) {
utils.ad.showSoftInput(this._nativeView);
}
return result;
};
EditableTextBase.prototype._onTextPropertyChanged = function(data) {
if (this._android) {
var newValue = types.isNullOrUndefined(data.newValue) ? "" : data.newValue + "";
this.android.setText(newValue, android.widget.TextView.BufferType.EDITABLE);
}
};
EditableTextBase.prototype._onKeyboardTypePropertyChanged = function(data) {
if (!this._android) {
return;
}
var newInputType;
switch (data.newValue) {
case enums.KeyboardType.datetime:
newInputType = android.text.InputType.TYPE_CLASS_DATETIME | android.text.InputType.TYPE_DATETIME_VARIATION_NORMAL;
break;

case enums.KeyboardType.phone:
newInputType = android.text.InputType.TYPE_CLASS_PHONE;
break;

case enums.KeyboardType.number:
newInputType = android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED | android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL;
break;

case enums.KeyboardType.url:
newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_URI;
break;

case enums.KeyboardType.email:
newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS;
break;

default:
newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL;
break;
}
this._android.setInputType(newInputType);
};
EditableTextBase.prototype._onReturnKeyTypePropertyChanged = function(data) {
if (!this._android) {
return;
}
var newImeOptions;
switch (data.newValue) {
case enums.ReturnKeyType.done:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_DONE;
break;

case enums.ReturnKeyType.go:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_GO;
break;

case enums.ReturnKeyType.next:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_NEXT;
break;

case enums.ReturnKeyType.search:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH;
break;

case enums.ReturnKeyType.send:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_SEND;
break;

default:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_UNSPECIFIED;
break;
}
this._android.setImeOptions(newImeOptions);
};
EditableTextBase.prototype._onEditablePropertyChanged = function(data) {
if (!this._android) {
return;
}
if (data.newValue) {
this.android.setKeyListener(this.android.getTag());
} else {
this.android.setKeyListener(null);
}
};
EditableTextBase.prototype._onAutocapitalizationTypePropertyChanged = function(data) {
var editableTextBase = data.object;
if (!editableTextBase.android) {
return;
}
var inputType = editableTextBase.android.getInputType();
inputType = inputType & ~28672;
switch (data.newValue) {
case enums.AutocapitalizationType.none:
break;

case enums.AutocapitalizationType.words:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS;
break;

case enums.AutocapitalizationType.sentences:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
break;

case enums.AutocapitalizationType.allCharacters:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS;
break;

default:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
break;
}
editableTextBase.android.setInputType(inputType);
};
EditableTextBase.prototype._onAutocorrectPropertyChanged = function(data) {
var editableTextBase = data.object;
if (!editableTextBase.android) {
return;
}
var inputType = editableTextBase.android.getInputType();
switch (data.newValue) {
case true:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
break;

case false:
inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;
inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
break;

default:
break;
}
editableTextBase.android.setInputType(inputType);
};
EditableTextBase.prototype._onHintPropertyChanged = function(data) {
var editableTextBase = data.object;
if (!editableTextBase.android) {
return;
}
editableTextBase.android.setHint(data.newValue + "");
};
return EditableTextBase;
}(common.EditableTextBase);
exports.EditableTextBase = EditableTextBase;
}, function(module, exports, __webpack_require__) {
var textBase = __webpack_require__(90);
var proxy = __webpack_require__(48);
var dependencyObservable = __webpack_require__(32);
var enums = __webpack_require__(23);
var keyboardTypeProperty = new dependencyObservable.Property("keyboardType", "EditableTextBase", new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None));
var returnKeyTypeProperty = new dependencyObservable.Property("returnKeyType", "EditableTextBase", new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None));
var editableProperty = new dependencyObservable.Property("editable", "EditableTextBase", new proxy.PropertyMetadata(true, dependencyObservable.PropertyMetadataSettings.None));
var updateTextTriggerProperty = new dependencyObservable.Property("updateTextTrigger", "EditableTextBase", new proxy.PropertyMetadata(enums.UpdateTextTrigger.textChanged, dependencyObservable.PropertyMetadataSettings.None));
var autocapitalizationTypeProperty = new dependencyObservable.Property("autocapitalizationType", "EditableTextBase", new proxy.PropertyMetadata(enums.AutocapitalizationType.sentences, dependencyObservable.PropertyMetadataSettings.None));
var autocorrectProperty = new dependencyObservable.Property("autocorrect", "EditableTextBase", new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None));
exports.hintProperty = new dependencyObservable.Property("hint", "EditableTextBase", new proxy.PropertyMetadata(""));
function onKeyboardTypePropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onKeyboardTypePropertyChanged(data);
}
keyboardTypeProperty.metadata.onSetNativeValue = onKeyboardTypePropertyChanged;
function onReturnKeyTypePropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onReturnKeyTypePropertyChanged(data);
}
returnKeyTypeProperty.metadata.onSetNativeValue = onReturnKeyTypePropertyChanged;
function onEditablePropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onEditablePropertyChanged(data);
}
editableProperty.metadata.onSetNativeValue = onEditablePropertyChanged;
function onAutocapitalizationTypePropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onAutocapitalizationTypePropertyChanged(data);
}
autocapitalizationTypeProperty.metadata.onSetNativeValue = onAutocapitalizationTypePropertyChanged;
function onAutocorrectPropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onAutocorrectPropertyChanged(data);
}
autocorrectProperty.metadata.onSetNativeValue = onAutocorrectPropertyChanged;
function onHintPropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onHintPropertyChanged(data);
}
exports.hintProperty.metadata.onSetNativeValue = onHintPropertyChanged;
var EditableTextBase = function(_super) {
__extends(EditableTextBase, _super);
function EditableTextBase(options) {
_super.call(this, options);
}
Object.defineProperty(EditableTextBase.prototype, "keyboardType", {
get: function() {
return this._getValue(EditableTextBase.keyboardTypeProperty);
},
set: function(value) {
this._setValue(EditableTextBase.keyboardTypeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "returnKeyType", {
get: function() {
return this._getValue(EditableTextBase.returnKeyTypeProperty);
},
set: function(value) {
this._setValue(EditableTextBase.returnKeyTypeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "editable", {
get: function() {
return this._getValue(EditableTextBase.editableProperty);
},
set: function(value) {
this._setValue(EditableTextBase.editableProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "updateTextTrigger", {
get: function() {
return this._getValue(EditableTextBase.updateTextTriggerProperty);
},
set: function(value) {
this._setValue(EditableTextBase.updateTextTriggerProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "autocapitalizationType", {
get: function() {
return this._getValue(EditableTextBase.autocapitalizationTypeProperty);
},
set: function(value) {
this._setValue(EditableTextBase.autocapitalizationTypeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "autocorrect", {
get: function() {
return this._getValue(EditableTextBase.autocorrectProperty);
},
set: function(value) {
this._setValue(EditableTextBase.autocorrectProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "hint", {
get: function() {
return this._getValue(EditableTextBase.hintProperty);
},
set: function(value) {
this._setValue(EditableTextBase.hintProperty, value);
},
enumerable: true,
configurable: true
});
EditableTextBase.prototype.dismissSoftInput = function() {};
EditableTextBase.prototype._onKeyboardTypePropertyChanged = function(data) {};
EditableTextBase.prototype._onReturnKeyTypePropertyChanged = function(data) {};
EditableTextBase.prototype._onEditablePropertyChanged = function(data) {};
EditableTextBase.prototype._onAutocapitalizationTypePropertyChanged = function(data) {};
EditableTextBase.prototype._onAutocorrectPropertyChanged = function(data) {};
EditableTextBase.prototype._onHintPropertyChanged = function(data) {};
EditableTextBase.keyboardTypeProperty = keyboardTypeProperty;
EditableTextBase.returnKeyTypeProperty = returnKeyTypeProperty;
EditableTextBase.editableProperty = editableProperty;
EditableTextBase.updateTextTriggerProperty = updateTextTriggerProperty;
EditableTextBase.autocapitalizationTypeProperty = autocapitalizationTypeProperty;
EditableTextBase.autocorrectProperty = autocorrectProperty;
EditableTextBase.hintProperty = exports.hintProperty;
return EditableTextBase;
}(textBase.TextBase);
exports.EditableTextBase = EditableTextBase;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(96);
global.moduleMerge(common, exports);
var Label = function(_super) {
__extends(Label, _super);
function Label() {
_super.apply(this, arguments);
}
Object.defineProperty(Label.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Label.prototype._createUI = function() {
this._android = new android.widget.TextView(this._context);
this._android.setSingleLine(true);
this._android.setEllipsize(android.text.TextUtils.TruncateAt.END);
};
return Label;
}(common.Label);
exports.Label = Label;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(32);
var proxy = __webpack_require__(48);
var textBase = __webpack_require__(90);
var enums;
function ensureEnums() {
if (!enums) {
enums = __webpack_require__(23);
}
}
var Label = function(_super) {
__extends(Label, _super);
function Label(options) {
_super.call(this, options);
}
Object.defineProperty(Label.prototype, "textWrap", {
get: function() {
return this._getValue(Label.textWrapProperty);
},
set: function(value) {
this._setValue(Label.textWrapProperty, value);
},
enumerable: true,
configurable: true
});
Label.textWrapProperty = new dependencyObservable.Property("textWrap", "Label", new proxy.PropertyMetadata(false, dependencyObservable.PropertyMetadataSettings.AffectsLayout));
return Label;
}(textBase.TextBase);
exports.Label = Label;
function onTextWrapPropertyChanged(data) {
var v = data.object;
ensureEnums();
v.style.whiteSpace = data.newValue ? enums.WhiteSpace.normal : enums.WhiteSpace.nowrap;
}
Label.textWrapProperty.metadata.onSetNativeValue = onTextWrapPropertyChanged;
}, function(module, exports, __webpack_require__) {
var http = __webpack_require__(61);
var types = __webpack_require__(13);
var XMLHttpRequestResponseType;
(function(XMLHttpRequestResponseType) {
XMLHttpRequestResponseType.empty = "";
XMLHttpRequestResponseType.text = "text";
XMLHttpRequestResponseType.json = "json";
})(XMLHttpRequestResponseType || (XMLHttpRequestResponseType = {}));
var XMLHttpRequest = function() {
function XMLHttpRequest() {
this.UNSENT = 0;
this.OPENED = 1;
this.HEADERS_RECEIVED = 2;
this.LOADING = 3;
this.DONE = 4;
this._responseType = "";
this._listeners = new Map();
this._readyState = this.UNSENT;
}
XMLHttpRequest.prototype.open = function(method, url, async, user, password) {
if (types.isString(method) && types.isString(url)) {
this._options = {
url: url,
method: method
};
this._options.headers = {};
if (types.isString(user)) {
this._options.headers["user"] = user;
}
if (types.isString(password)) {
this._options.headers["password"] = password;
}
this._setReadyState(this.OPENED);
}
};
XMLHttpRequest.prototype.abort = function() {
this._errorFlag = true;
this._response = null;
this._responseTextReader = null;
this._headers = null;
this._status = null;
if (this._readyState === this.UNSENT || this._readyState === this.OPENED || this._readyState === this.DONE) {
this._readyState = this.UNSENT;
} else {
this._setReadyState(this.DONE);
}
};
XMLHttpRequest.prototype.send = function(data) {
var _this = this;
this._errorFlag = false;
this._response = null;
this._responseTextReader = null;
this._headers = null;
this._status = null;
if (types.isDefined(this._options)) {
if (types.isString(data) && this._options.method !== "GET") {
this._options.content = data;
} else if (data instanceof FormData) {
this._options.content = data.toString();
}
http.request(this._options).then(function(r) {
if (!_this._errorFlag) {
_this._loadResponse(r);
}
}).catch(function(e) {
_this._errorFlag = true;
_this._setReadyState(_this.DONE, e);
});
}
};
XMLHttpRequest.prototype._loadResponse = function(r) {
this._status = r.statusCode;
this._response = r.content.raw;
this._headers = r.headers;
this._setReadyState(this.HEADERS_RECEIVED);
this._setReadyState(this.LOADING);
this._setResponseType();
if (this.responseType === XMLHttpRequestResponseType.json) {
this._responseTextReader = function() {
return r.content.toString();
};
this._response = JSON.parse(this.responseText);
} else if (this.responseType === XMLHttpRequestResponseType.empty || this.responseType === XMLHttpRequestResponseType.text) {
this._responseTextReader = function() {
return r.content.toString();
};
}
this._setReadyState(this.DONE);
};
XMLHttpRequest.prototype._setResponseType = function() {
var header = this.getResponseHeader("Content-Type");
var contentType = header && header.toLowerCase();
if (contentType) {
if (contentType.indexOf("application/json") >= 0) {
this.responseType = XMLHttpRequestResponseType.json;
} else if (contentType.indexOf("text/plain") >= 0) {
this.responseType = XMLHttpRequestResponseType.text;
}
} else {
this.responseType = XMLHttpRequestResponseType.text;
}
};
XMLHttpRequest.prototype.addEventListener = function(eventName, handler) {
if (eventName !== "load" && eventName !== "error") {
throw new Error("Event not supported: " + eventName);
}
var handlers = this._listeners.get(eventName) || [];
handlers.push(handler);
this._listeners.set(eventName, handlers);
};
XMLHttpRequest.prototype.removeEventListener = function(eventName, toDetach) {
var handlers = this._listeners.get(eventName) || [];
handlers = handlers.filter(function(handler) {
return handler !== toDetach;
});
this._listeners.set(eventName, handlers);
};
XMLHttpRequest.prototype.emitEvent = function(eventName) {
var args = [];
for (var _i = 1; _i < arguments.length; _i++) {
args[_i - 1] = arguments[_i];
}
var handlers = this._listeners.get(eventName) || [];
handlers.forEach(function(handler) {
handler.apply(void 0, args);
});
};
XMLHttpRequest.prototype.setRequestHeader = function(header, value) {
if (types.isDefined(this._options) && types.isString(header) && types.isString(value)) {
this._options.headers[header] = value;
}
};
XMLHttpRequest.prototype.getAllResponseHeaders = function() {
if (this._readyState < 2 || this._errorFlag) {
return "";
}
var result = "";
for (var i in this._headers) {
if (i !== "set-cookie" && i !== "set-cookie2") {
result += i + ": " + this._headers[i] + "\r\n";
}
}
return result.substr(0, result.length - 2);
};
XMLHttpRequest.prototype.getResponseHeader = function(header) {
if (types.isString(header) && this._readyState > 1 && this._headers && this._headers[header] && !this._errorFlag) {
return this._headers[header];
}
return null;
};
XMLHttpRequest.prototype.overrideMimeType = function(mime) {};
Object.defineProperty(XMLHttpRequest.prototype, "readyState", {
get: function() {
return this._readyState;
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "responseType", {
get: function() {
return this._responseType;
},
set: function(value) {
if (value === XMLHttpRequestResponseType.empty || value in XMLHttpRequestResponseType) {
this._responseType = value;
} else {
throw new Error("Response type of '" + value + "' not supported.");
}
},
enumerable: true,
configurable: true
});
XMLHttpRequest.prototype._setReadyState = function(value, error) {
if (this._readyState !== value) {
this._readyState = value;
if (types.isFunction(this.onreadystatechange)) {
this.onreadystatechange();
}
}
if (this._readyState === this.DONE) {
if (this._errorFlag) {
if (types.isFunction(this.onerror)) {
this.onerror(error);
}
this.emitEvent("error", error);
} else {
if (types.isFunction(this.onload)) {
this.onload();
}
this.emitEvent("load");
}
}
};
Object.defineProperty(XMLHttpRequest.prototype, "responseText", {
get: function() {
if (types.isFunction(this._responseTextReader)) {
return this._responseTextReader();
}
return "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "response", {
get: function() {
return this._response;
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "status", {
get: function() {
return this._status;
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "statusText", {
get: function() {
if (this._readyState === this.UNSENT || this._readyState === this.OPENED || this._errorFlag) {
return "";
}
return statuses[this._status];
},
enumerable: true,
configurable: true
});
return XMLHttpRequest;
}();
exports.XMLHttpRequest = XMLHttpRequest;
var statuses = {
100: "Continue",
101: "Switching Protocols",
200: "OK",
201: "Created",
202: "Accepted",
203: "Non - Authoritative Information",
204: "No Content",
205: "Reset Content",
206: "Partial Content",
300: "Multiple Choices",
301: "Moved Permanently",
302: "Found",
303: "See Other",
304: "Not Modified",
305: "Use Proxy",
307: "Temporary Redirect",
400: "Bad Request",
401: "Unauthorized",
402: "Payment Required",
403: "Forbidden",
404: "Not Found",
405: "Method Not Allowed",
406: "Not Acceptable",
407: "Proxy Authentication Required",
408: "Request Timeout",
409: "Conflict",
410: "Gone",
411: "Length Required",
412: "Precondition Failed",
413: "Request Entity Too Large",
414: "Request - URI Too Long",
415: "Unsupported Media Type",
416: "Requested Range Not Satisfiable",
417: "Expectation Failed",
500: "Internal Server Error",
501: "Not Implemented",
502: "Bad Gateway",
503: "Service Unavailable",
504: "Gateway Timeout",
505: "HTTP Version Not Supported"
};
var FormData = function() {
function FormData() {
this._data = new Map();
}
FormData.prototype.append = function(name, value) {
this._data.set(name, value);
};
FormData.prototype.toString = function() {
var arr = new Array();
this._data.forEach(function(value, name, map) {
arr.push(encodeURIComponent(name) + "=" + encodeURIComponent(value));
});
return arr.join("&");
};
return FormData;
}();
exports.FormData = FormData;
}, function(module, exports, __webpack_require__) {
(function() {
"use strict";
exports.XMLHttpRequest = global.XMLHttpRequest;
exports.FormData = global.FormData;
if (!exports.XMLHttpRequest) {
var xhr = __webpack_require__(97);
exports.XMLHttpRequest = xhr.XMLHttpRequest;
exports.FormData = xhr.FormData;
}
function normalizeName(name) {
if (typeof name !== "string") {
name = name.toString();
}
if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
throw new TypeError("Invalid character in header field name");
}
return name.toLowerCase();
}
function normalizeValue(value) {
if (typeof value !== "string") {
value = value.toString();
}
return value;
}
function Headers(headers) {
this.map = {};
if (headers instanceof Headers) {
headers.forEach(function(value, name) {
this.append(name, value);
}, this);
} else if (headers) {
Object.getOwnPropertyNames(headers).forEach(function(name) {
this.append(name, headers[name]);
}, this);
}
}
Headers.prototype.append = function(name, value) {
name = normalizeName(name);
value = normalizeValue(value);
var list = this.map[name];
if (!list) {
list = [];
this.map[name] = list;
}
list.push(value);
};
Headers.prototype["delete"] = function(name) {
delete this.map[normalizeName(name)];
};
Headers.prototype.get = function(name) {
var values = this.map[normalizeName(name)];
return values ? values[0] : null;
};
Headers.prototype.getAll = function(name) {
return this.map[normalizeName(name)] || [];
};
Headers.prototype.has = function(name) {
return this.map.hasOwnProperty(normalizeName(name));
};
Headers.prototype.set = function(name, value) {
this.map[normalizeName(name)] = [ normalizeValue(value) ];
};
Headers.prototype.forEach = function(callback, thisArg) {
Object.getOwnPropertyNames(this.map).forEach(function(name) {
this.map[name].forEach(function(value) {
callback.call(thisArg, value, name, this);
}, this);
}, this);
};
function consumed(body) {
if (body.bodyUsed) {
return Promise.reject(new TypeError("Already read"));
}
body.bodyUsed = true;
}
function fileReaderReady(reader) {
return new Promise(function(resolve, reject) {
reader.onload = function() {
resolve(reader.result);
};
reader.onerror = function() {
reject(reader.error);
};
});
}
function readBlobAsArrayBuffer(blob) {
var reader = new FileReader();
reader.readAsArrayBuffer(blob);
return fileReaderReady(reader);
}
function readBlobAsText(blob) {
var reader = new FileReader();
reader.readAsText(blob);
return fileReaderReady(reader);
}
var support = {
blob: "FileReader" in exports && "Blob" in exports && function() {
try {
new Blob();
return true;
} catch (e) {
return false;
}
}(),
formData: "FormData" in exports
};
function Body() {
this.bodyUsed = false;
this._initBody = function(body) {
this._bodyInit = body;
if (typeof body === "string") {
this._bodyText = body;
} else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
this._bodyBlob = body;
} else if (support.formData && exports.FormData.prototype.isPrototypeOf(body)) {
this._bodyFormData = body;
} else if (!body) {
this._bodyText = "";
} else {
throw new Error("unsupported BodyInit type");
}
};
if (support.blob) {
this.blob = function() {
var rejected = consumed(this);
if (rejected) {
return rejected;
}
if (this._bodyBlob) {
return Promise.resolve(this._bodyBlob);
} else if (this._bodyFormData) {
throw new Error("could not read FormData body as blob");
} else {
return Promise.resolve(new Blob([ this._bodyText ]));
}
};
this.arrayBuffer = function() {
return this.blob().then(readBlobAsArrayBuffer);
};
this.text = function() {
var rejected = consumed(this);
if (rejected) {
return rejected;
}
if (this._bodyBlob) {
return readBlobAsText(this._bodyBlob);
} else if (this._bodyFormData) {
throw new Error("could not read FormData body as text");
} else {
return Promise.resolve(this._bodyText);
}
};
} else {
this.text = function() {
var rejected = consumed(this);
return rejected ? rejected : Promise.resolve(this._bodyText);
};
}
if (support.formData) {
this.formData = function() {
return this.text().then(decode);
};
}
this.json = function() {
return this.text().then(JSON.parse);
};
return this;
}
var methods = [ "DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT" ];
function normalizeMethod(method) {
var upcased = method.toUpperCase();
return methods.indexOf(upcased) > -1 ? upcased : method;
}
function Request(url, options) {
options = options || {};
this.url = url;
this.credentials = options.credentials || "omit";
this.headers = new Headers(options.headers);
this.method = normalizeMethod(options.method || "GET");
this.mode = options.mode || null;
this.referrer = null;
if ((this.method === "GET" || this.method === "HEAD") && options.body) {
throw new TypeError("Body not allowed for GET or HEAD requests");
}
this._initBody(options.body);
}
function decode(body) {
var form = new exports.FormData();
body.trim().split("&").forEach(function(bytes) {
if (bytes) {
var split = bytes.split("=");
var name = split.shift().replace(/\+/g, " ");
var value = split.join("=").replace(/\+/g, " ");
form.append(decodeURIComponent(name), decodeURIComponent(value));
}
});
return form;
}
function headers(xhr) {
var head = new Headers();
var pairs = xhr.getAllResponseHeaders().trim().split("\n");
pairs.forEach(function(header) {
var split = header.trim().split(":");
var key = split.shift().trim();
var value = split.join(":").trim();
head.append(key, value);
});
return head;
}
Body.call(Request.prototype);
function Response(bodyInit, options) {
if (!options) {
options = {};
}
this._initBody(bodyInit);
this.type = "default";
this.url = null;
this.status = options.status;
this.ok = this.status >= 200 && this.status < 300;
this.statusText = options.statusText;
this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers);
this.url = options.url || "";
}
Body.call(Response.prototype);
exports.Headers = Headers;
exports.Request = Request;
exports.Response = Response;
exports.fetch = function(input, init) {
var request;
if (Request.prototype.isPrototypeOf(input) && !init) {
request = input;
} else {
request = new Request(input, init);
}
return new Promise(function(resolve, reject) {
var xhr = new exports.XMLHttpRequest();
function responseURL() {
if ("responseURL" in xhr) {
return xhr.responseURL;
}
if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
return xhr.getResponseHeader("X-Request-URL");
}
return;
}
xhr.onload = function() {
var status = xhr.status === 1223 ? 204 : xhr.status;
if (status < 100 || status > 599) {
reject(new TypeError("Network request failed"));
return;
}
var options = {
status: status,
statusText: xhr.statusText,
headers: headers(xhr),
url: responseURL()
};
resolve(new Response(xhr.responseText, options));
};
xhr.onerror = function() {
reject(new TypeError("Network request failed"));
};
xhr.open(request.method, request.url, true);
if (request.credentials === "include") {
xhr.withCredentials = true;
}
if ("responseType" in xhr && support.blob) {
xhr.responseType = "blob";
}
request.headers.forEach(function(value, name) {
xhr.setRequestHeader(name, value);
});
xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
});
};
exports.fetch.polyfill = true;
})();
}, function(module, exports, __webpack_require__) {
var trace = __webpack_require__(26);
var platform = __webpack_require__(39);
var Console = function() {
function Console() {
this.TAG = "JS";
this.dir = this.dump;
this._timers = {};
this._stripFirstTwoLinesRegEx = /^([^\n]*?\n){2}((.|\n)*)$/gim;
}
Console.prototype.sprintf = function(message) {
var regex = /%%|%(\d+\$)?([-+\'#0 ]*)(\*\d+\$|\*|\d+)?(\.(\*\d+\$|\*|\d+))?([scboxXuideEfFgGj])/g;
var a = arguments;
var i = 0;
var format = a[i++];
var pad = function(str, len, chr, leftJustify) {
if (!chr) {
chr = " ";
}
var padding = str.length >= len ? "" : new Array(1 + len - str.length >>> 0).join(chr);
return leftJustify ? str + padding : padding + str;
};
var justify = function(value, prefix, leftJustify, minWidth, zeroPad, customPadChar) {
var diff = minWidth - value.length;
if (diff > 0) {
if (leftJustify || !zeroPad) {
value = pad(value, minWidth, customPadChar, leftJustify);
} else {
value = value.slice(0, prefix.length) + pad("", diff, "0", true) + value.slice(prefix.length);
}
}
return value;
};
var formatBaseX = function(value, base, prefix, leftJustify, minWidth, precision, zeroPad) {
var number = value >>> 0;
prefix = prefix && number && {
2: "0b",
8: "0",
16: "0x"
}[base] || "";
value = prefix + pad(number.toString(base), precision || 0, "0", false);
return justify(value, prefix, leftJustify, minWidth, zeroPad);
};
var formatString = function(value, leftJustify, minWidth, precision, zeroPad, customPadChar) {
if (precision != null) {
value = value.slice(0, precision);
}
return justify(value, "", leftJustify, minWidth, zeroPad, customPadChar);
};
var that = this;
var doFormat = function(substring, valueIndex, flags, minWidth, _, precision, type) {
var number, prefix, method, textTransform, value;
if (substring === "%%") {
return "%";
}
var leftJustify = false;
var positivePrefix = "";
var zeroPad = false;
var prefixBaseX = false;
var customPadChar = " ";
var flagsl = flags.length;
for (var j = 0; flags && j < flagsl; j++) {
switch (flags.charAt(j)) {
case " ":
positivePrefix = " ";
break;

case "+":
positivePrefix = "+";
break;

case "-":
leftJustify = true;
break;

case "'":
customPadChar = flags.charAt(j + 1);
break;

case "0":
zeroPad = true;
customPadChar = "0";
break;

case "#":
prefixBaseX = true;
break;
}
}
if (!minWidth) {
minWidth = 0;
} else if (minWidth === "*") {
minWidth = +a[i++];
} else if (minWidth.charAt(0) === "*") {
minWidth = +a[minWidth.slice(1, -1)];
} else {
minWidth = +minWidth;
}
if (minWidth < 0) {
minWidth = -minWidth;
leftJustify = true;
}
if (!isFinite(minWidth)) {
throw new Error("sprintf: (minimum-)width must be finite");
}
if (!precision) {
precision = "fFeE".indexOf(type) > -1 ? 6 : type === "d" ? 0 : undefined;
} else if (precision === "*") {
precision = +a[i++];
} else if (precision.charAt(0) === "*") {
precision = +a[precision.slice(1, -1)];
} else {
precision = +precision;
}
value = valueIndex ? a[valueIndex.slice(0, -1)] : a[i++];
switch (type) {
case "s":
return formatString(String(value), leftJustify, minWidth, precision, zeroPad, customPadChar);

case "c":
return formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, zeroPad);

case "b":
return formatBaseX(value, 2, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "o":
return formatBaseX(value, 8, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "x":
return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "X":
return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad).toUpperCase();

case "u":
return formatBaseX(value, 10, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "i":
case "d":
number = +value || 0;
number = Math.round(number - number % 1);
prefix = number < 0 ? "-" : positivePrefix;
value = prefix + pad(String(Math.abs(number)), precision, "0", false);
return justify(value, prefix, leftJustify, minWidth, zeroPad);

case "e":
case "E":
case "f":
case "F":
case "g":
case "G":
number = +value;
prefix = number < 0 ? "-" : positivePrefix;
method = [ "toExponential", "toFixed", "toPrecision" ]["efg".indexOf(type.toLowerCase())];
textTransform = [ "toString", "toUpperCase" ]["eEfFgG".indexOf(type) % 2];
value = prefix + Math.abs(number)[method](precision);
return justify(value, prefix, leftJustify, minWidth, zeroPad)[textTransform]();

case "j":
return that.createDump(value);

default:
return substring;
}
};
return format.replace(regex, doFormat);
};
Console.prototype.formatParams = function(message) {
if (arguments.length <= 1) {
return "" + message;
}
var res = this.sprintf.apply(this, arguments);
if (res === message) {
var args = Array.prototype.slice.call(arguments);
return args.join(" ");
}
return res;
};
Console.prototype.timeMillis = function() {
return java.lang.System.nanoTime() / 1e6;
};
Console.prototype.time = function(reportName) {
var name = reportName ? "__" + reportName : "__internal_console_time__";
if ("undefined" === typeof this._timers[name] || this._timers.hasOwnProperty(name)) {
this._timers[name] = this.timeMillis();
} else {
this.warn("invalid name for timer console.time(" + reportName + ")");
}
};
Console.prototype.timeEnd = function(reportName) {
var name = reportName ? "__" + reportName : "__internal_console_time__";
if (this._timers.hasOwnProperty(name)) {
var val = this._timers[name];
if (val) {
var time = this.timeMillis();
this.info("console.time(" + reportName + "): %.6f ms", time - val);
this._timers[name] = undefined;
} else {
this.warn("undefined console.time(" + reportName + ")");
}
}
};
Console.prototype.assert = function(test, message) {
var formatParams = [];
for (var _i = 2; _i < arguments.length; _i++) {
formatParams[_i - 2] = arguments[_i];
}
if (!test) {
Array.prototype.shift.apply(arguments);
var formatedMessage = this.formatParams.apply(this, arguments);
this.error(formatedMessage, trace.messageType.error);
if (global.__consoleMessage) {
global.__consoleMessage(formatedMessage, "error");
}
}
};
Console.prototype.info = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
this.logMessage(this.formatParams.apply(this, arguments), trace.messageType.info);
};
Console.prototype.warn = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
var formatedMessage = this.formatParams.apply(this, arguments);
this.logMessage(formatedMessage, trace.messageType.warn);
if (global.__consoleMessage) {
global.__consoleMessage(formatedMessage, "warning");
}
};
Console.prototype.error = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
var formatedMessage = this.formatParams.apply(this, arguments);
this.logMessage(formatedMessage, trace.messageType.error);
if (global.__consoleMessage) {
global.__consoleMessage(formatedMessage, "error");
}
};
Console.prototype.log = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
var formatedMessage = this.formatParams.apply(this, arguments);
this.logMessage(formatedMessage, trace.messageType.log);
if (global.__consoleMessage) {
global.__consoleMessage(formatedMessage, "log");
}
};
Console.prototype.logMessage = function(message, messageType) {
if (!global.android) {
return;
}
var arrayToLog = [];
if (message.length > 4e3) {
var i;
for (i = 0; i * 4e3 < message.length; i++) {
arrayToLog.push(message.substr(i * 4e3, 4e3));
}
} else {
arrayToLog.push(message);
}
for (i = 0; i < arrayToLog.length; i++) {
switch (messageType) {
case trace.messageType.log:
{
android.util.Log.v(this.TAG, arrayToLog[i]);
break;
}

case trace.messageType.warn:
{
android.util.Log.w(this.TAG, arrayToLog[i]);
break;
}

case trace.messageType.error:
{
android.util.Log.e(this.TAG, arrayToLog[i]);
break;
}

case trace.messageType.info:
{
android.util.Log.i(this.TAG, arrayToLog[i]);
break;
}
}
}
};
Console.prototype.trace = function() {
var stack;
stack = new Error().stack.toString();
stack = stack.replace(this._stripFirstTwoLinesRegEx, "$2");
stack = "Stack Trace:\n" + stack;
this.log(stack);
};
Console.prototype.createDump = function(obj) {
var result = [];
if (null == obj) {
result.push("=== dump(): object is 'null' ===");
return result.join("");
}
if ("undefined" === typeof obj) {
result.push("=== dump(): object is 'undefined' ===");
return result.join("");
}
result.push("=== dump(): dumping members ===\n");
var stringifyValueCache = [];
var stringifyKeyCache = [];
result.push(JSON.stringify(obj, function(k, v) {
stringifyKeyCache.push(k);
if (typeof v === "object" && v !== null) {
if (stringifyValueCache.indexOf(v) !== -1) {
return "#CR:" + (v.toString ? v.toString() : v);
}
stringifyValueCache.push(v);
}
if (typeof v === "function") {
return k + "()" + v;
}
return v;
}, 4));
result.push("\n=== dump(): dumping function and properties names ===\n");
for (var id in obj) {
try {
if (typeof obj[id] === "function") {
result.push(id + "()\n");
} else {
if (typeof obj[id] !== "object" && stringifyKeyCache.indexOf(id) === -1) {
result.push(id + ": " + (obj[id] + "\n"));
}
}
} catch (err) {
result.push(id + ": inaccessible");
}
}
stringifyValueCache = null;
stringifyKeyCache = null;
result.push("=== dump(): finished ===");
return result.join("");
};
Console.prototype.dump = function(obj) {
var dump = this.createDump(obj);
if (platform.device.os === platform.platformNames.android) {
this.log(dump);
} else if (platform.device.os === platform.platformNames.ios) {
console.log(dump);
}
};
return Console;
}();
exports.Console = Console;
}, function(module, exports, __webpack_require__) {
(function(process) {
(function(modules) {
var installedModules = {};
function __webpack_require__(moduleId) {
if (installedModules[moduleId]) return installedModules[moduleId].exports;
var module = installedModules[moduleId] = {
exports: {},
id: moduleId,
loaded: false
};
modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
module.loaded = true;
return module.exports;
}
__webpack_require__.m = modules;
__webpack_require__.c = installedModules;
__webpack_require__.p = "";
return __webpack_require__(0);
})([ function(module, exports, __webpack_require__) {
(function(global) {
var core = __webpack_require__(1);
var browserPatch = __webpack_require__(5);
if (global.Zone) {
console.warn("Zone already exported on window the object!");
} else {
global.Zone = core.Zone;
global.zone = new global.Zone();
browserPatch.apply();
}
exports.Zone = global.Zone;
}).call(exports, function() {
return this;
}());
}, function(module, exports, __webpack_require__) {
(function(global) {
var keys = __webpack_require__(2);
var promise = __webpack_require__(3);
var deprecated = {};
function deprecatedWarning(key, text) {
if (!deprecated.hasOwnProperty(key)) {
deprecated[key] = true;
console.warn("DEPRECATION WARNING: '" + key + "' is no longer supported and will be removed in next major release. " + text);
}
}
var Zone = function() {
function Zone(parentZone, data) {
this.parent = null;
this.onError = null;
var zone = arguments.length ? Object.create(parentZone) : this;
zone.parent = parentZone || null;
Object.keys(data || {}).forEach(function(property) {
var _property = property.substr(1);
if (property[0] === "$") {
zone[_property] = data[property](parentZone[_property] || function() {});
} else if (property[0] === "+") {
if (parentZone[_property]) {
zone[_property] = function() {
var result = parentZone[_property].apply(this, arguments);
data[property].apply(this, arguments);
return result;
};
} else {
zone[_property] = data[property];
}
} else if (property[0] === "-") {
if (parentZone[_property]) {
zone[_property] = function() {
data[property].apply(this, arguments);
return parentZone[_property].apply(this, arguments);
};
} else {
zone[_property] = data[property];
}
} else {
zone[property] = typeof data[property] === "object" ? JSON.parse(JSON.stringify(data[property])) : data[property];
}
});
zone.$id = Zone.nextId++;
return zone;
}
Zone.prototype.fork = function(locals) {
this.onZoneCreated();
return new Zone(this, locals);
};
Zone.prototype.bind = function(fn, skipEnqueue) {
if (typeof fn !== "function") {
throw new Error("Expecting function got: " + fn);
}
skipEnqueue || this.enqueueTask(fn);
var zone = this.isRootZone() ? this : this.fork();
return function zoneBoundFn() {
return zone.run(fn, this, arguments);
};
};
Zone.prototype.bindOnce = function(fn) {
deprecatedWarning("bindOnce", "There is no replacement.");
var boundZone = this;
return this.bind(function() {
var result = fn.apply(this, arguments);
boundZone.dequeueTask(fn);
return result;
});
};
Zone.prototype.isRootZone = function() {
return this.parent === null;
};
Zone.prototype.run = function(fn, applyTo, applyWith) {
applyWith = applyWith || [];
var oldZone = global.zone;
global.zone = this;
try {
this.beforeTask();
return fn.apply(applyTo, applyWith);
} catch (e) {
if (this.onError) {
this.onError(e);
} else {
throw e;
}
} finally {
this.afterTask();
global.zone = oldZone;
}
};
Zone.prototype.beforeTask = function() {};
Zone.prototype.onZoneCreated = function() {};
Zone.prototype.afterTask = function() {};
Zone.prototype.enqueueTask = function(fn) {
deprecatedWarning("enqueueTask", "Use addTask/addRepeatingTask/addMicroTask");
};
Zone.prototype.dequeueTask = function(fn) {
deprecatedWarning("dequeueTask", "Use removeTask/removeRepeatingTask/removeMicroTask");
};
Zone.prototype.addTask = function(taskFn) {
this.enqueueTask(taskFn);
};
Zone.prototype.removeTask = function(taskFn) {
this.dequeueTask(taskFn);
};
Zone.prototype.addRepeatingTask = function(taskFn) {
this.enqueueTask(taskFn);
};
Zone.prototype.removeRepeatingTask = function(taskFn) {
this.dequeueTask(taskFn);
};
Zone.prototype.addMicrotask = function(taskFn) {
this.enqueueTask(taskFn);
};
Zone.prototype.removeMicrotask = function(taskFn) {
this.dequeueTask(taskFn);
};
Zone.prototype.addEventListener = function() {
return this[keys.common.addEventListener].apply(this, arguments);
};
Zone.prototype.removeEventListener = function() {
return this[keys.common.removeEventListener].apply(this, arguments);
};
Zone.nextId = 1;
Zone.bindPromiseFn = promise.bindPromiseFn;
return Zone;
}();
exports.Zone = Zone;
}).call(exports, function() {
return this;
}());
}, function(module, exports) {
function create(name) {
return "_zone$" + name;
}
exports.create = create;
exports.common = {
addEventListener: create("addEventListener"),
removeEventListener: create("removeEventListener")
};
}, function(module, exports, __webpack_require__) {
(function(global) {
var utils = __webpack_require__(4);
if (global.Promise) {
exports.bindPromiseFn = function(delegate) {
return function() {
var delegatePromise = delegate.apply(this, arguments);
if (delegatePromise instanceof Promise) {
return delegatePromise;
}
return new Promise(function(resolve, reject) {
delegatePromise.then(resolve, reject);
});
};
};
} else {
exports.bindPromiseFn = function(delegate) {
return function() {
return _patchThenable(delegate.apply(this, arguments));
};
};
}
function _patchPromiseFnsOnObject(objectPath, fnNames) {
var obj = global;
var exists = objectPath.every(function(segment) {
obj = obj[segment];
return obj;
});
if (!exists) {
return;
}
fnNames.forEach(function(name) {
var fn = obj[name];
if (fn) {
obj[name] = exports.bindPromiseFn(fn);
}
});
}
function _patchThenable(thenable) {
var then = thenable.then;
thenable.then = function() {
var args = utils.bindArguments(arguments);
var nextThenable = then.apply(thenable, args);
return _patchThenable(nextThenable);
};
var ocatch = thenable.catch;
thenable.catch = function() {
var args = utils.bindArguments(arguments);
var nextThenable = ocatch.apply(thenable, args);
return _patchThenable(nextThenable);
};
return thenable;
}
function apply() {
if (global.Promise) {
utils.patchPrototype(Promise.prototype, [ "then", "catch" ]);
var patchFns = [ [ [], [ "fetch" ] ], [ [ "Response", "prototype" ], [ "arrayBuffer", "blob", "json", "text" ] ] ];
patchFns.forEach(function(objPathAndFns) {
_patchPromiseFnsOnObject(objPathAndFns[0], objPathAndFns[1]);
});
}
}
exports.apply = apply;
module.exports = {
apply: apply,
bindPromiseFn: exports.bindPromiseFn
};
}).call(exports, function() {
return this;
}());
}, function(module, exports, __webpack_require__) {
(function(global) {
var keys = __webpack_require__(2);
function bindArguments(args) {
for (var i = args.length - 1; i >= 0; i--) {
if (typeof args[i] === "function") {
args[i] = global.zone.bind(args[i]);
}
}
return args;
}
exports.bindArguments = bindArguments;
function patchPrototype(obj, fnNames) {
fnNames.forEach(function(name) {
var delegate = obj[name];
if (delegate) {
obj[name] = function() {
return delegate.apply(this, bindArguments(arguments));
};
}
});
}
exports.patchPrototype = patchPrototype;
function isWebWorker() {
return typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
}
exports.isWebWorker = isWebWorker;
function isNode() {
return typeof process !== "undefined" && {}.toString.call(process) === "[object process]";
}
exports.isNode = isNode;
function patchProperty(obj, prop) {
var desc = Object.getOwnPropertyDescriptor(obj, prop) || {
enumerable: true,
configurable: true
};
delete desc.writable;
delete desc.value;
var eventName = prop.substr(2);
var _prop = "_" + prop;
desc.set = function(fn) {
if (this[_prop]) {
this.removeEventListener(eventName, this[_prop]);
}
if (typeof fn === "function") {
this[_prop] = fn;
this.addEventListener(eventName, fn, false);
} else {
this[_prop] = null;
}
};
desc.get = function() {
return this[_prop];
};
Object.defineProperty(obj, prop, desc);
}
exports.patchProperty = patchProperty;
function patchProperties(obj, properties) {
(properties || function() {
var props = [];
for (var prop in obj) {
props.push(prop);
}
return props;
}().filter(function(propertyName) {
return propertyName.substr(0, 2) === "on";
})).forEach(function(eventName) {
patchProperty(obj, eventName);
});
}
exports.patchProperties = patchProperties;
var originalFnKey = keys.create("originalFn");
var boundFnsKey = keys.create("boundFns");
function patchEventTargetMethods(obj) {
obj[keys.common.addEventListener] = obj.addEventListener;
obj.addEventListener = function(eventName, handler, useCapturing) {
if (handler && handler.toString() !== "[object FunctionWrapper]") {
var eventType = eventName + (useCapturing ? "$capturing" : "$bubbling");
var fn;
if (handler.handleEvent) {
fn = function(handler) {
return function() {
handler.handleEvent.apply(handler, arguments);
};
}(handler);
} else {
fn = handler;
}
handler[originalFnKey] = fn;
handler[boundFnsKey] = handler[boundFnsKey] || {};
handler[boundFnsKey][eventType] = handler[boundFnsKey][eventType] || global.zone.bind(fn);
arguments[1] = handler[boundFnsKey][eventType];
}
var target = this || global;
return global.zone.addEventListener.apply(target, arguments);
};
obj[keys.common.removeEventListener] = obj.removeEventListener;
obj.removeEventListener = function(eventName, handler, useCapturing) {
var eventType = eventName + (useCapturing ? "$capturing" : "$bubbling");
if (handler && handler[boundFnsKey] && handler[boundFnsKey][eventType]) {
var _bound = handler[boundFnsKey];
arguments[1] = _bound[eventType];
delete _bound[eventType];
global.zone.dequeueTask(handler[originalFnKey]);
}
var target = this || global;
var result = global.zone.removeEventListener.apply(target, arguments);
return result;
};
}
exports.patchEventTargetMethods = patchEventTargetMethods;
var originalInstanceKey = keys.create("originalInstance");
function patchClass(className) {
var OriginalClass = global[className];
if (!OriginalClass) return;
global[className] = function() {
var a = bindArguments(arguments);
switch (a.length) {
case 0:
this[originalInstanceKey] = new OriginalClass();
break;

case 1:
this[originalInstanceKey] = new OriginalClass(a[0]);
break;

case 2:
this[originalInstanceKey] = new OriginalClass(a[0], a[1]);
break;

case 3:
this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);
break;

case 4:
this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);
break;

default:
throw new Error("what are you even doing?");
}
};
var instance = new OriginalClass();
var prop;
for (prop in instance) {
(function(prop) {
if (typeof instance[prop] === "function") {
global[className].prototype[prop] = function() {
return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
};
} else {
Object.defineProperty(global[className].prototype, prop, {
set: function(fn) {
if (typeof fn === "function") {
this[originalInstanceKey][prop] = global.zone.bind(fn);
} else {
this[originalInstanceKey][prop] = fn;
}
},
get: function() {
return this[originalInstanceKey][prop];
}
});
}
})(prop);
}
for (prop in OriginalClass) {
if (prop !== "prototype" && OriginalClass.hasOwnProperty(prop)) {
global[className][prop] = OriginalClass[prop];
}
}
}
exports.patchClass = patchClass;
}).call(exports, function() {
return this;
}());
}, function(module, exports, __webpack_require__) {
(function(global) {
var fnPatch = __webpack_require__(6);
var promisePatch = __webpack_require__(3);
var mutationObserverPatch = __webpack_require__(8);
var definePropertyPatch = __webpack_require__(9);
var registerElementPatch = __webpack_require__(10);
var eventTargetPatch = __webpack_require__(11);
var propertyDescriptorPatch = __webpack_require__(12);
var geolocationPatch = __webpack_require__(14);
var fileReaderPatch = __webpack_require__(15);
function apply() {
fnPatch.patchSetClearFunction(global, global.Zone, [ [ "setTimeout", "clearTimeout", false, false ], [ "setInterval", "clearInterval", true, false ], [ "setImmediate", "clearImmediate", false, false ], [ "requestAnimationFrame", "cancelAnimationFrame", false, true ], [ "mozRequestAnimationFrame", "mozCancelAnimationFrame", false, true ], [ "webkitRequestAnimationFrame", "webkitCancelAnimationFrame", false, true ] ]);
fnPatch.patchFunction(global, [ "alert", "prompt" ]);
eventTargetPatch.apply();
propertyDescriptorPatch.apply();
promisePatch.apply();
mutationObserverPatch.patchClass("MutationObserver");
mutationObserverPatch.patchClass("WebKitMutationObserver");
definePropertyPatch.apply();
registerElementPatch.apply();
geolocationPatch.apply();
fileReaderPatch.apply();
}
exports.apply = apply;
}).call(exports, function() {
return this;
}());
}, function(module, exports, __webpack_require__) {
(function(global) {
var wtf = __webpack_require__(7);
function patchSetClearFunction(window, Zone, fnNames) {
function patchMacroTaskMethod(setName, clearName, repeating, isRaf) {
var setNative = window[setName];
var clearNative = window[clearName];
var ids = {};
if (setNative) {
var wtfSetEventFn = wtf.createEvent("Zone#" + setName + "(uint32 zone, uint32 id, uint32 delay)");
var wtfClearEventFn = wtf.createEvent("Zone#" + clearName + "(uint32 zone, uint32 id)");
var wtfCallbackFn = wtf.createScope("Zone#cb:" + setName + "(uint32 zone, uint32 id, uint32 delay)");
window[setName] = function() {
return global.zone[setName].apply(global.zone, arguments);
};
window[clearName] = function() {
return global.zone[clearName].apply(global.zone, arguments);
};
Zone.prototype[setName] = function(fn, delay) {
var callbackFn = fn;
if (typeof callbackFn !== "function") {
setNative.apply(window, arguments);
}
var zone = this;
var setId = null;
arguments[0] = function() {
var callbackZone = zone.isRootZone() || isRaf ? zone : zone.fork();
var callbackThis = this;
var callbackArgs = arguments;
return wtf.leaveScope(wtfCallbackFn(callbackZone.$id, setId, delay), callbackZone.run(function() {
if (!repeating) {
delete ids[setId];
callbackZone.removeTask(callbackFn);
}
return callbackFn.apply(callbackThis, callbackArgs);
}));
};
if (repeating) {
zone.addRepeatingTask(callbackFn);
} else {
zone.addTask(callbackFn);
}
setId = setNative.apply(window, arguments);
ids[setId] = callbackFn;
wtfSetEventFn(zone.$id, setId, delay);
return setId;
};
Zone.prototype[setName + "Unpatched"] = function() {
return setNative.apply(window, arguments);
};
Zone.prototype[clearName] = function(id) {
wtfClearEventFn(this.$id, id);
if (ids.hasOwnProperty(id)) {
var callbackFn = ids[id];
delete ids[id];
if (repeating) {
this.removeRepeatingTask(callbackFn);
} else {
this.removeTask(callbackFn);
}
}
return clearNative.apply(window, arguments);
};
Zone.prototype[clearName + "Unpatched"] = function() {
return clearNative.apply(window, arguments);
};
}
}
fnNames.forEach(function(args) {
patchMacroTaskMethod.apply(null, args);
});
}
exports.patchSetClearFunction = patchSetClearFunction;
function patchFunction(obj, fnNames) {
fnNames.forEach(function(name) {
var delegate = obj[name];
global.zone[name] = function() {
return delegate.apply(obj, arguments);
};
obj[name] = function() {
return global.zone[name].apply(this, arguments);
};
});
}
exports.patchFunction = patchFunction;
}).call(exports, function() {
return this;
}());
}, function(module, exports) {
(function(global) {
var wtfTrace = null;
var wtfEvents = null;
var wtfEnabled = function() {
var wtf = global["wtf"];
if (wtf) {
wtfTrace = wtf["trace"];
if (wtfTrace) {
wtfEvents = wtfTrace["events"];
return true;
}
}
return false;
}();
function noop() {}
exports.enabled = wtfEnabled;
exports.createScope = wtfEnabled ? function(signature, flags) {
return wtfEvents.createScope(signature, flags);
} : function(s, f) {
return noop;
};
exports.createEvent = wtfEnabled ? function(signature, flags) {
return wtfEvents.createInstance(signature, flags);
} : function(s, f) {
return noop;
};
exports.leaveScope = wtfEnabled ? function(scope, returnValue) {
wtfTrace.leaveScope(scope, returnValue);
return returnValue;
} : function(s, v) {
return v;
};
exports.beginTimeRange = wtfEnabled ? function(rangeType, action) {
return wtfTrace.beginTimeRange(rangeType, action);
} : function(t, a) {
return null;
};
exports.endTimeRange = wtfEnabled ? function(range) {
wtfTrace.endTimeRange(range);
} : function(r) {};
}).call(exports, function() {
return this;
}());
}, function(module, exports, __webpack_require__) {
(function(global) {
var keys = __webpack_require__(2);
var originalInstanceKey = keys.create("originalInstance");
var creationZoneKey = keys.create("creationZone");
var isActiveKey = keys.create("isActive");
function patchClass(className) {
var OriginalClass = global[className];
if (!OriginalClass) return;
global[className] = function(fn) {
this[originalInstanceKey] = new OriginalClass(global.zone.bind(fn, true));
this[creationZoneKey] = global.zone;
};
var instance = new OriginalClass(function() {});
global[className].prototype.disconnect = function() {
var result = this[originalInstanceKey].disconnect.apply(this[originalInstanceKey], arguments);
if (this[isActiveKey]) {
this[creationZoneKey].dequeueTask();
this[isActiveKey] = false;
}
return result;
};
global[className].prototype.observe = function() {
if (!this[isActiveKey]) {
this[creationZoneKey].enqueueTask();
this[isActiveKey] = true;
}
return this[originalInstanceKey].observe.apply(this[originalInstanceKey], arguments);
};
var prop;
for (prop in instance) {
(function(prop) {
if (typeof global[className].prototype !== "undefined") {
return;
}
if (typeof instance[prop] === "function") {
global[className].prototype[prop] = function() {
return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
};
} else {
Object.defineProperty(global[className].prototype, prop, {
set: function(fn) {
if (typeof fn === "function") {
this[originalInstanceKey][prop] = global.zone.bind(fn);
} else {
this[originalInstanceKey][prop] = fn;
}
},
get: function() {
return this[originalInstanceKey][prop];
}
});
}
})(prop);
}
}
exports.patchClass = patchClass;
}).call(exports, function() {
return this;
}());
}, function(module, exports, __webpack_require__) {
var keys = __webpack_require__(2);
var _defineProperty = Object.defineProperty;
var _getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var _create = Object.create;
var unconfigurablesKey = keys.create("unconfigurables");
function apply() {
Object.defineProperty = function(obj, prop, desc) {
if (isUnconfigurable(obj, prop)) {
throw new TypeError("Cannot assign to read only property '" + prop + "' of " + obj);
}
if (prop !== "prototype") {
desc = rewriteDescriptor(obj, prop, desc);
}
return _defineProperty(obj, prop, desc);
};
Object.defineProperties = function(obj, props) {
Object.keys(props).forEach(function(prop) {
Object.defineProperty(obj, prop, props[prop]);
});
return obj;
};
Object.create = function(obj, proto) {
if (typeof proto === "object") {
Object.keys(proto).forEach(function(prop) {
proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);
});
}
return _create(obj, proto);
};
Object.getOwnPropertyDescriptor = function(obj, prop) {
var desc = _getOwnPropertyDescriptor(obj, prop);
if (isUnconfigurable(obj, prop)) {
desc.configurable = false;
}
return desc;
};
}
exports.apply = apply;
function _redefineProperty(obj, prop, desc) {
desc = rewriteDescriptor(obj, prop, desc);
return _defineProperty(obj, prop, desc);
}
exports._redefineProperty = _redefineProperty;
function isUnconfigurable(obj, prop) {
return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];
}
function rewriteDescriptor(obj, prop, desc) {
desc.configurable = true;
if (!desc.configurable) {
if (!obj[unconfigurablesKey]) {
_defineProperty(obj, unconfigurablesKey, {
writable: true,
value: {}
});
}
obj[unconfigurablesKey][prop] = true;
}
return desc;
}
}, function(module, exports, __webpack_require__) {
(function(global) {
var define_property_1 = __webpack_require__(9);
var utils = __webpack_require__(4);
function apply() {
if (utils.isWebWorker() || utils.isNode() || !("registerElement" in global.document)) {
return;
}
var _registerElement = document.registerElement;
var callbacks = [ "createdCallback", "attachedCallback", "detachedCallback", "attributeChangedCallback" ];
document.registerElement = function(name, opts) {
if (opts && opts.prototype) {
callbacks.forEach(function(callback) {
if (opts.prototype.hasOwnProperty(callback)) {
var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);
if (descriptor && descriptor.value) {
descriptor.value = global.zone.bind(descriptor.value);
define_property_1._redefineProperty(opts.prototype, callback, descriptor);
} else {
opts.prototype[callback] = global.zone.bind(opts.prototype[callback]);
}
} else if (opts.prototype[callback]) {
opts.prototype[callback] = global.zone.bind(opts.prototype[callback]);
}
});
}
return _registerElement.apply(document, [ name, opts ]);
};
}
exports.apply = apply;
}).call(exports, function() {
return this;
}());
}, function(module, exports, __webpack_require__) {
(function(global) {
"use strict";
var utils = __webpack_require__(4);
function apply() {
if (global.EventTarget) {
utils.patchEventTargetMethods(global.EventTarget.prototype);
} else {
var apis = [ "ApplicationCache", "EventSource", "FileReader", "InputMethodContext", "MediaController", "MessagePort", "Node", "Performance", "SVGElementInstance", "SharedWorker", "TextTrack", "TextTrackCue", "TextTrackList", "WebKitNamedFlow", "Worker", "WorkerGlobalScope", "XMLHttpRequest", "XMLHttpRequestEventTarget", "XMLHttpRequestUpload" ];
apis.forEach(function(api) {
var proto = global[api] && global[api].prototype;
if (proto && proto.addEventListener) {
utils.patchEventTargetMethods(proto);
}
});
if (typeof window !== "undefined") {
utils.patchEventTargetMethods(window);
}
}
}
exports.apply = apply;
}).call(exports, function() {
return this;
}());
}, function(module, exports, __webpack_require__) {
(function(global) {
var webSocketPatch = __webpack_require__(13);
var utils = __webpack_require__(4);
var keys = __webpack_require__(2);
var eventNames = "copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror".split(" ");
function apply() {
if (utils.isNode()) {
return;
}
var supportsWebSocket = typeof WebSocket !== "undefined";
if (canPatchViaPropertyDescriptor()) {
if (!utils.isWebWorker()) {
var onEventNames = eventNames.map(function(property) {
return "on" + property;
});
utils.patchProperties(HTMLElement.prototype, onEventNames);
}
utils.patchProperties(XMLHttpRequest.prototype);
if (supportsWebSocket) {
utils.patchProperties(WebSocket.prototype);
}
} else {
if (!utils.isWebWorker()) {
patchViaCapturingAllTheEvents();
}
utils.patchClass("XMLHttpRequest");
if (supportsWebSocket) {
webSocketPatch.apply();
}
}
}
exports.apply = apply;
function canPatchViaPropertyDescriptor() {
if (!utils.isWebWorker() && !Object.getOwnPropertyDescriptor(HTMLElement.prototype, "onclick") && typeof Element !== "undefined") {
var desc = Object.getOwnPropertyDescriptor(Element.prototype, "onclick");
if (desc && !desc.configurable) return false;
}
Object.defineProperty(XMLHttpRequest.prototype, "onreadystatechange", {
get: function() {
return true;
}
});
var req = new XMLHttpRequest();
var result = !!req.onreadystatechange;
Object.defineProperty(XMLHttpRequest.prototype, "onreadystatechange", {});
return result;
}
var unboundKey = keys.create("unbound");
function patchViaCapturingAllTheEvents() {
eventNames.forEach(function(property) {
var onproperty = "on" + property;
document.addEventListener(property, function(event) {
var elt = event.target, bound;
while (elt) {
if (elt[onproperty] && !elt[onproperty][unboundKey]) {
bound = global.zone.bind(elt[onproperty]);
bound[unboundKey] = elt[onproperty];
elt[onproperty] = bound;
}
elt = elt.parentElement;
}
}, true);
});
}
}).call(exports, function() {
return this;
}());
}, function(module, exports, __webpack_require__) {
(function(global) {
var utils = __webpack_require__(4);
function apply() {
var WS = global.WebSocket;
if (!global.EventTarget) {
utils.patchEventTargetMethods(WS.prototype);
}
global.WebSocket = function(a, b) {
var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);
var proxySocket;
var onmessageDesc = Object.getOwnPropertyDescriptor(socket, "onmessage");
if (onmessageDesc && onmessageDesc.configurable === false) {
proxySocket = Object.create(socket);
[ "addEventListener", "removeEventListener", "send", "close" ].forEach(function(propName) {
proxySocket[propName] = function() {
return socket[propName].apply(socket, arguments);
};
});
} else {
proxySocket = socket;
}
utils.patchProperties(proxySocket, [ "onclose", "onerror", "onmessage", "onopen" ]);
return proxySocket;
};
}
exports.apply = apply;
}).call(exports, function() {
return this;
}());
}, function(module, exports, __webpack_require__) {
(function(global) {
var utils = __webpack_require__(4);
function apply() {
if (global.navigator && global.navigator.geolocation) {
utils.patchPrototype(global.navigator.geolocation, [ "getCurrentPosition", "watchPosition" ]);
}
}
exports.apply = apply;
}).call(exports, function() {
return this;
}());
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(4);
function apply() {
utils.patchClass("FileReader");
}
exports.apply = apply;
} ]);
}).call(exports, __webpack_require__(101));
}, function(module, exports) {
var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
draining = false;
if (currentQueue.length) {
queue = currentQueue.concat(queue);
} else {
queueIndex = -1;
}
if (queue.length) {
drainQueue();
}
}
function drainQueue() {
if (draining) {
return;
}
var timeout = setTimeout(cleanUpNextTick);
draining = true;
var len = queue.length;
while (len) {
currentQueue = queue;
queue = [];
while (++queueIndex < len) {
if (currentQueue) {
currentQueue[queueIndex].run();
}
}
queueIndex = -1;
len = queue.length;
}
currentQueue = null;
draining = false;
clearTimeout(timeout);
}
process.nextTick = function(fun) {
var args = new Array(arguments.length - 1);
if (arguments.length > 1) {
for (var i = 1; i < arguments.length; i++) {
args[i - 1] = arguments[i];
}
}
queue.push(new Item(fun, args));
if (queue.length === 1 && !draining) {
setTimeout(drainQueue, 0);
}
};
function Item(fun, array) {
this.fun = fun;
this.array = array;
}
Item.prototype.run = function() {
this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = "";
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.binding = function(name) {
throw new Error("process.binding is not supported");
};
process.cwd = function() {
return "/";
};
process.chdir = function(dir) {
throw new Error("process.chdir is not supported");
};
process.umask = function() {
return 0;
};
}, function(module, exports, __webpack_require__) {
"use strict";
var Reflect;
(function(Reflect) {
var functionPrototype = Object.getPrototypeOf(Function);
var _Map = typeof Map === "function" ? Map : CreateMapPolyfill();
var _Set = typeof Set === "function" ? Set : CreateSetPolyfill();
var _WeakMap = typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
var __Metadata__ = new _WeakMap();
function decorate(decorators, target, targetKey, targetDescriptor) {
if (!IsUndefined(targetDescriptor)) {
if (!IsArray(decorators)) {
throw new TypeError();
} else if (!IsObject(target)) {
throw new TypeError();
} else if (IsUndefined(targetKey)) {
throw new TypeError();
} else if (!IsObject(targetDescriptor)) {
throw new TypeError();
}
targetKey = ToPropertyKey(targetKey);
return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);
} else if (!IsUndefined(targetKey)) {
if (!IsArray(decorators)) {
throw new TypeError();
} else if (!IsObject(target)) {
throw new TypeError();
}
targetKey = ToPropertyKey(targetKey);
return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);
} else {
if (!IsArray(decorators)) {
throw new TypeError();
} else if (!IsConstructor(target)) {
throw new TypeError();
}
return DecorateConstructor(decorators, target);
}
}
Reflect.decorate = decorate;
function metadata(metadataKey, metadataValue) {
function decorator(target, targetKey) {
if (!IsUndefined(targetKey)) {
if (!IsObject(target)) {
throw new TypeError();
}
targetKey = ToPropertyKey(targetKey);
OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
} else {
if (!IsConstructor(target)) {
throw new TypeError();
}
OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, undefined);
}
}
return decorator;
}
Reflect.metadata = metadata;
function defineMetadata(metadataKey, metadataValue, target, targetKey) {
if (!IsObject(target)) {
throw new TypeError();
} else if (!IsUndefined(targetKey)) {
targetKey = ToPropertyKey(targetKey);
}
return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
}
Reflect.defineMetadata = defineMetadata;
function hasMetadata(metadataKey, target, targetKey) {
if (!IsObject(target)) {
throw new TypeError();
} else if (!IsUndefined(targetKey)) {
targetKey = ToPropertyKey(targetKey);
}
return OrdinaryHasMetadata(metadataKey, target, targetKey);
}
Reflect.hasMetadata = hasMetadata;
function hasOwnMetadata(metadataKey, target, targetKey) {
if (!IsObject(target)) {
throw new TypeError();
} else if (!IsUndefined(targetKey)) {
targetKey = ToPropertyKey(targetKey);
}
return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);
}
Reflect.hasOwnMetadata = hasOwnMetadata;
function getMetadata(metadataKey, target, targetKey) {
if (!IsObject(target)) {
throw new TypeError();
} else if (!IsUndefined(targetKey)) {
targetKey = ToPropertyKey(targetKey);
}
return OrdinaryGetMetadata(metadataKey, target, targetKey);
}
Reflect.getMetadata = getMetadata;
function getOwnMetadata(metadataKey, target, targetKey) {
if (!IsObject(target)) {
throw new TypeError();
} else if (!IsUndefined(targetKey)) {
targetKey = ToPropertyKey(targetKey);
}
return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);
}
Reflect.getOwnMetadata = getOwnMetadata;
function getMetadataKeys(target, targetKey) {
if (!IsObject(target)) {
throw new TypeError();
} else if (!IsUndefined(targetKey)) {
targetKey = ToPropertyKey(targetKey);
}
return OrdinaryMetadataKeys(target, targetKey);
}
Reflect.getMetadataKeys = getMetadataKeys;
function getOwnMetadataKeys(target, targetKey) {
if (!IsObject(target)) {
throw new TypeError();
} else if (!IsUndefined(targetKey)) {
targetKey = ToPropertyKey(targetKey);
}
return OrdinaryOwnMetadataKeys(target, targetKey);
}
Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
function deleteMetadata(metadataKey, target, targetKey) {
if (!IsObject(target)) {
throw new TypeError();
} else if (!IsUndefined(targetKey)) {
targetKey = ToPropertyKey(targetKey);
}
var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
if (IsUndefined(metadataMap)) {
return false;
}
if (!metadataMap.delete(metadataKey)) {
return false;
}
if (metadataMap.size > 0) {
return true;
}
var targetMetadata = __Metadata__.get(target);
targetMetadata.delete(targetKey);
if (targetMetadata.size > 0) {
return true;
}
__Metadata__.delete(target);
return true;
}
Reflect.deleteMetadata = deleteMetadata;
function DecorateConstructor(decorators, target) {
for (var i = decorators.length - 1; i >= 0; --i) {
var decorator = decorators[i];
var decorated = decorator(target);
if (!IsUndefined(decorated)) {
if (!IsConstructor(decorated)) {
throw new TypeError();
}
target = decorated;
}
}
return target;
}
function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {
for (var i = decorators.length - 1; i >= 0; --i) {
var decorator = decorators[i];
var decorated = decorator(target, propertyKey, descriptor);
if (!IsUndefined(decorated)) {
if (!IsObject(decorated)) {
throw new TypeError();
}
descriptor = decorated;
}
}
return descriptor;
}
function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {
for (var i = decorators.length - 1; i >= 0; --i) {
var decorator = decorators[i];
decorator(target, propertyKey);
}
}
function GetOrCreateMetadataMap(target, targetKey, create) {
var targetMetadata = __Metadata__.get(target);
if (!targetMetadata) {
if (!create) {
return undefined;
}
targetMetadata = new _Map();
__Metadata__.set(target, targetMetadata);
}
var keyMetadata = targetMetadata.get(targetKey);
if (!keyMetadata) {
if (!create) {
return undefined;
}
keyMetadata = new _Map();
targetMetadata.set(targetKey, keyMetadata);
}
return keyMetadata;
}
function OrdinaryHasMetadata(MetadataKey, O, P) {
var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
if (hasOwn) {
return true;
}
var parent = GetPrototypeOf(O);
if (parent !== null) {
return OrdinaryHasMetadata(MetadataKey, parent, P);
}
return false;
}
function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
var metadataMap = GetOrCreateMetadataMap(O, P, false);
if (metadataMap === undefined) {
return false;
}
return Boolean(metadataMap.has(MetadataKey));
}
function OrdinaryGetMetadata(MetadataKey, O, P) {
var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
if (hasOwn) {
return OrdinaryGetOwnMetadata(MetadataKey, O, P);
}
var parent = GetPrototypeOf(O);
if (parent !== null) {
return OrdinaryGetMetadata(MetadataKey, parent, P);
}
return undefined;
}
function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
var metadataMap = GetOrCreateMetadataMap(O, P, false);
if (metadataMap === undefined) {
return undefined;
}
return metadataMap.get(MetadataKey);
}
function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
var metadataMap = GetOrCreateMetadataMap(O, P, true);
metadataMap.set(MetadataKey, MetadataValue);
}
function OrdinaryMetadataKeys(O, P) {
var ownKeys = OrdinaryOwnMetadataKeys(O, P);
var parent = GetPrototypeOf(O);
if (parent === null) {
return ownKeys;
}
var parentKeys = OrdinaryMetadataKeys(parent, P);
if (parentKeys.length <= 0) {
return ownKeys;
}
if (ownKeys.length <= 0) {
return parentKeys;
}
var set = new _Set();
var keys = [];
for (var _i = 0; _i < ownKeys.length; _i++) {
var key = ownKeys[_i];
var hasKey = set.has(key);
if (!hasKey) {
set.add(key);
keys.push(key);
}
}
for (var _a = 0; _a < parentKeys.length; _a++) {
var key = parentKeys[_a];
var hasKey = set.has(key);
if (!hasKey) {
set.add(key);
keys.push(key);
}
}
return keys;
}
function OrdinaryOwnMetadataKeys(target, targetKey) {
var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
var keys = [];
if (metadataMap) {
metadataMap.forEach(function(_, key) {
return keys.push(key);
});
}
return keys;
}
function IsUndefined(x) {
return x === undefined;
}
function IsArray(x) {
return Array.isArray(x);
}
function IsObject(x) {
return typeof x === "object" ? x !== null : typeof x === "function";
}
function IsConstructor(x) {
return typeof x === "function";
}
function IsSymbol(x) {
return typeof x === "symbol";
}
function ToPropertyKey(value) {
if (IsSymbol(value)) {
return value;
}
return String(value);
}
function GetPrototypeOf(O) {
var proto = Object.getPrototypeOf(O);
if (typeof O !== "function" || O === functionPrototype) {
return proto;
}
if (proto !== functionPrototype) {
return proto;
}
var prototype = O.prototype;
var prototypeProto = Object.getPrototypeOf(prototype);
if (prototypeProto == null || prototypeProto === Object.prototype) {
return proto;
}
var constructor = prototypeProto.constructor;
if (typeof constructor !== "function") {
return proto;
}
if (constructor === O) {
return proto;
}
return constructor;
}
function CreateMapPolyfill() {
var cacheSentinel = {};
function Map() {
this._keys = [];
this._values = [];
this._cache = cacheSentinel;
}
Map.prototype = {
get size() {
return this._keys.length;
},
has: function(key) {
if (key === this._cache) {
return true;
}
if (this._find(key) >= 0) {
this._cache = key;
return true;
}
return false;
},
get: function(key) {
var index = this._find(key);
if (index >= 0) {
this._cache = key;
return this._values[index];
}
return undefined;
},
set: function(key, value) {
this.delete(key);
this._keys.push(key);
this._values.push(value);
this._cache = key;
return this;
},
"delete": function(key) {
var index = this._find(key);
if (index >= 0) {
this._keys.splice(index, 1);
this._values.splice(index, 1);
this._cache = cacheSentinel;
return true;
}
return false;
},
clear: function() {
this._keys.length = 0;
this._values.length = 0;
this._cache = cacheSentinel;
},
forEach: function(callback, thisArg) {
var size = this.size;
for (var i = 0; i < size; ++i) {
var key = this._keys[i];
var value = this._values[i];
this._cache = key;
callback.call(this, value, key, this);
}
},
_find: function(key) {
var keys = this._keys;
var size = keys.length;
for (var i = 0; i < size; ++i) {
if (keys[i] === key) {
return i;
}
}
return -1;
}
};
return Map;
}
function CreateSetPolyfill() {
var cacheSentinel = {};
function Set() {
this._map = new _Map();
}
Set.prototype = {
get size() {
return this._map.length;
},
has: function(value) {
return this._map.has(value);
},
add: function(value) {
this._map.set(value, value);
return this;
},
"delete": function(value) {
return this._map.delete(value);
},
clear: function() {
this._map.clear();
},
forEach: function(callback, thisArg) {
this._map.forEach(callback, thisArg);
}
};
return Set;
}
function CreateWeakMapPolyfill() {
var UUID_SIZE = 16;
var isNode = typeof global !== "undefined" && Object.prototype.toString.call(global.process) === "[object process]";
var nodeCrypto = isNode && __webpack_require__(103);
var hasOwn = Object.prototype.hasOwnProperty;
var keys = {};
var rootKey = CreateUniqueKey();
function WeakMap() {
this._key = CreateUniqueKey();
}
WeakMap.prototype = {
has: function(target) {
var table = GetOrCreateWeakMapTable(target, false);
if (table) {
return this._key in table;
}
return false;
},
get: function(target) {
var table = GetOrCreateWeakMapTable(target, false);
if (table) {
return table[this._key];
}
return undefined;
},
set: function(target, value) {
var table = GetOrCreateWeakMapTable(target, true);
table[this._key] = value;
return this;
},
"delete": function(target) {
var table = GetOrCreateWeakMapTable(target, false);
if (table && this._key in table) {
return delete table[this._key];
}
return false;
},
clear: function() {
this._key = CreateUniqueKey();
}
};
function FillRandomBytes(buffer, size) {
for (var i = 0; i < size; ++i) {
buffer[i] = Math.random() * 255 | 0;
}
}
function GenRandomBytes(size) {
if (nodeCrypto) {
var data = nodeCrypto.randomBytes(size);
return data;
} else if (typeof Uint8Array === "function") {
var data = new Uint8Array(size);
if (typeof crypto !== "undefined") {
crypto.getRandomValues(data);
} else if (typeof msCrypto !== "undefined") {
msCrypto.getRandomValues(data);
} else {
FillRandomBytes(data, size);
}
return data;
} else {
var data = new Array(size);
FillRandomBytes(data, size);
return data;
}
}
function CreateUUID() {
var data = GenRandomBytes(UUID_SIZE);
data[6] = data[6] & 79 | 64;
data[8] = data[8] & 191 | 128;
var result = "";
for (var offset = 0; offset < UUID_SIZE; ++offset) {
var byte = data[offset];
if (offset === 4 || offset === 6 || offset === 8) {
result += "-";
}
if (byte < 16) {
result += "0";
}
result += byte.toString(16).toLowerCase();
}
return result;
}
function CreateUniqueKey() {
var key;
do {
key = "@@WeakMap@@" + CreateUUID();
} while (hasOwn.call(keys, key));
keys[key] = true;
return key;
}
function GetOrCreateWeakMapTable(target, create) {
if (!hasOwn.call(target, rootKey)) {
if (!create) {
return undefined;
}
Object.defineProperty(target, rootKey, {
value: Object.create(null)
});
}
return target[rootKey];
}
return WeakMap;
}
(function(__global) {
if (typeof __global.Reflect !== "undefined") {
if (__global.Reflect !== Reflect) {
for (var p in Reflect) {
__global.Reflect[p] = Reflect[p];
}
}
} else {
__global.Reflect = Reflect;
}
})(typeof window !== "undefined" ? window : typeof WorkerGlobalScope !== "undefined" ? self : typeof global !== "undefined" ? global : Function("return this;")());
})(Reflect || (Reflect = {}));
}, function(module, exports) {
module.exports = {};
}, function(module, exports) {
if (!Array.prototype.fill) {
Array.prototype.fill = function(value) {
var O = Object(this);
var len = parseInt(O.length, 10);
var start = arguments[1];
var relativeStart = parseInt(start, 10) || 0;
var k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);
var end = arguments[2];
var relativeEnd = end === undefined ? len : parseInt(end) || 0;
var final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);
for (;k < final; k++) {
O[k] = value;
}
return O;
};
}
if (!Array.from) {
Array.from = function(iterable, mapFn, thisArg) {
var results = [];
if (iterable.next) {
var step = null;
while (step = iterable.next()) {
if (step.done) break; else results.push(step.value);
}
} else {
results = [].slice.call(iterable);
}
if (mapFn) {
results = results.forEach(mapFn, thisArg);
}
return results;
};
}
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var globalScope;
if (typeof window === "undefined") {
if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) {
globalScope = self;
} else {
globalScope = global;
}
} else {
globalScope = window;
}
exports.IS_DART = false;
var _global = globalScope;
exports.global = _global;
exports.Type = Function;
function getTypeNameForDebugging(type) {
return type["name"];
}
exports.getTypeNameForDebugging = getTypeNameForDebugging;
exports.Math = _global.Math;
exports.Date = _global.Date;
var _devMode = true;
var _modeLocked = false;
function lockMode() {
_modeLocked = true;
}
exports.lockMode = lockMode;
function enableProdMode() {
if (_modeLocked) {
throw "Cannot enable prod mode after platform setup.";
}
_devMode = false;
}
exports.enableProdMode = enableProdMode;
function assertionsEnabled() {
return _devMode;
}
exports.assertionsEnabled = assertionsEnabled;
_global.assert = function assert(condition) {};
function CONST_EXPR(expr) {
return expr;
}
exports.CONST_EXPR = CONST_EXPR;
function CONST() {
return function(target) {
return target;
};
}
exports.CONST = CONST;
function isPresent(obj) {
return obj !== undefined && obj !== null;
}
exports.isPresent = isPresent;
function isBlank(obj) {
return obj === undefined || obj === null;
}
exports.isBlank = isBlank;
function isString(obj) {
return typeof obj === "string";
}
exports.isString = isString;
function isFunction(obj) {
return typeof obj === "function";
}
exports.isFunction = isFunction;
function isType(obj) {
return isFunction(obj);
}
exports.isType = isType;
function isStringMap(obj) {
return typeof obj === "object" && obj !== null;
}
exports.isStringMap = isStringMap;
function isPromise(obj) {
return obj instanceof _global.Promise;
}
exports.isPromise = isPromise;
function isArray(obj) {
return Array.isArray(obj);
}
exports.isArray = isArray;
function isNumber(obj) {
return typeof obj === "number";
}
exports.isNumber = isNumber;
function isDate(obj) {
return obj instanceof exports.Date && !isNaN(obj.valueOf());
}
exports.isDate = isDate;
function noop() {}
exports.noop = noop;
function stringify(token) {
if (typeof token === "string") {
return token;
}
if (token === undefined || token === null) {
return "" + token;
}
if (token.name) {
return token.name;
}
if (token.overriddenName) {
return token.overriddenName;
}
var res = token.toString();
var newLineIndex = res.indexOf("\n");
return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
exports.stringify = stringify;
function serializeEnum(val) {
return val;
}
exports.serializeEnum = serializeEnum;
function deserializeEnum(val, values) {
return val;
}
exports.deserializeEnum = deserializeEnum;
var StringWrapper = function() {
function StringWrapper() {}
StringWrapper.fromCharCode = function(code) {
return String.fromCharCode(code);
};
StringWrapper.charCodeAt = function(s, index) {
return s.charCodeAt(index);
};
StringWrapper.split = function(s, regExp) {
return s.split(regExp);
};
StringWrapper.equals = function(s, s2) {
return s === s2;
};
StringWrapper.stripLeft = function(s, charVal) {
if (s && s.length) {
var pos = 0;
for (var i = 0; i < s.length; i++) {
if (s[i] != charVal) break;
pos++;
}
s = s.substring(pos);
}
return s;
};
StringWrapper.stripRight = function(s, charVal) {
if (s && s.length) {
var pos = s.length;
for (var i = s.length - 1; i >= 0; i--) {
if (s[i] != charVal) break;
pos--;
}
s = s.substring(0, pos);
}
return s;
};
StringWrapper.replace = function(s, from, replace) {
return s.replace(from, replace);
};
StringWrapper.replaceAll = function(s, from, replace) {
return s.replace(from, replace);
};
StringWrapper.slice = function(s, from, to) {
if (from === void 0) {
from = 0;
}
if (to === void 0) {
to = null;
}
return s.slice(from, to === null ? undefined : to);
};
StringWrapper.replaceAllMapped = function(s, from, cb) {
return s.replace(from, function() {
var matches = [];
for (var _i = 0; _i < arguments.length; _i++) {
matches[_i - 0] = arguments[_i];
}
matches.splice(-2, 2);
return cb(matches);
});
};
StringWrapper.contains = function(s, substr) {
return s.indexOf(substr) != -1;
};
StringWrapper.compare = function(a, b) {
if (a < b) {
return -1;
} else if (a > b) {
return 1;
} else {
return 0;
}
};
return StringWrapper;
}();
exports.StringWrapper = StringWrapper;
var StringJoiner = function() {
function StringJoiner(parts) {
if (parts === void 0) {
parts = [];
}
this.parts = parts;
}
StringJoiner.prototype.add = function(part) {
this.parts.push(part);
};
StringJoiner.prototype.toString = function() {
return this.parts.join("");
};
return StringJoiner;
}();
exports.StringJoiner = StringJoiner;
var NumberParseError = function(_super) {
__extends(NumberParseError, _super);
function NumberParseError(message) {
_super.call(this);
this.message = message;
}
NumberParseError.prototype.toString = function() {
return this.message;
};
return NumberParseError;
}(Error);
exports.NumberParseError = NumberParseError;
var NumberWrapper = function() {
function NumberWrapper() {}
NumberWrapper.toFixed = function(n, fractionDigits) {
return n.toFixed(fractionDigits);
};
NumberWrapper.equal = function(a, b) {
return a === b;
};
NumberWrapper.parseIntAutoRadix = function(text) {
var result = parseInt(text);
if (isNaN(result)) {
throw new NumberParseError("Invalid integer literal when parsing " + text);
}
return result;
};
NumberWrapper.parseInt = function(text, radix) {
if (radix == 10) {
if (/^(\-|\+)?[0-9]+$/.test(text)) {
return parseInt(text, radix);
}
} else if (radix == 16) {
if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
return parseInt(text, radix);
}
} else {
var result = parseInt(text, radix);
if (!isNaN(result)) {
return result;
}
}
throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " + radix);
};
NumberWrapper.parseFloat = function(text) {
return parseFloat(text);
};
Object.defineProperty(NumberWrapper, "NaN", {
get: function() {
return NaN;
},
enumerable: true,
configurable: true
});
NumberWrapper.isNaN = function(value) {
return isNaN(value);
};
NumberWrapper.isInteger = function(value) {
return Number.isInteger(value);
};
return NumberWrapper;
}();
exports.NumberWrapper = NumberWrapper;
exports.RegExp = _global.RegExp;
var RegExpWrapper = function() {
function RegExpWrapper() {}
RegExpWrapper.create = function(regExpStr, flags) {
if (flags === void 0) {
flags = "";
}
flags = flags.replace(/g/g, "");
return new _global.RegExp(regExpStr, flags + "g");
};
RegExpWrapper.firstMatch = function(regExp, input) {
regExp.lastIndex = 0;
return regExp.exec(input);
};
RegExpWrapper.test = function(regExp, input) {
regExp.lastIndex = 0;
return regExp.test(input);
};
RegExpWrapper.matcher = function(regExp, input) {
regExp.lastIndex = 0;
return {
re: regExp,
input: input
};
};
return RegExpWrapper;
}();
exports.RegExpWrapper = RegExpWrapper;
var RegExpMatcherWrapper = function() {
function RegExpMatcherWrapper() {}
RegExpMatcherWrapper.next = function(matcher) {
return matcher.re.exec(matcher.input);
};
return RegExpMatcherWrapper;
}();
exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
var FunctionWrapper = function() {
function FunctionWrapper() {}
FunctionWrapper.apply = function(fn, posArgs) {
return fn.apply(null, posArgs);
};
return FunctionWrapper;
}();
exports.FunctionWrapper = FunctionWrapper;
function looseIdentical(a, b) {
return a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
}
exports.looseIdentical = looseIdentical;
function getMapKey(value) {
return value;
}
exports.getMapKey = getMapKey;
function normalizeBlank(obj) {
return isBlank(obj) ? null : obj;
}
exports.normalizeBlank = normalizeBlank;
function normalizeBool(obj) {
return isBlank(obj) ? false : obj;
}
exports.normalizeBool = normalizeBool;
function isJsObject(o) {
return o !== null && (typeof o === "function" || typeof o === "object");
}
exports.isJsObject = isJsObject;
function print(obj) {
console.log(obj);
}
exports.print = print;
var Json = function() {
function Json() {}
Json.parse = function(s) {
return _global.JSON.parse(s);
};
Json.stringify = function(data) {
return _global.JSON.stringify(data, null, 2);
};
return Json;
}();
exports.Json = Json;
var DateWrapper = function() {
function DateWrapper() {}
DateWrapper.create = function(year, month, day, hour, minutes, seconds, milliseconds) {
if (month === void 0) {
month = 1;
}
if (day === void 0) {
day = 1;
}
if (hour === void 0) {
hour = 0;
}
if (minutes === void 0) {
minutes = 0;
}
if (seconds === void 0) {
seconds = 0;
}
if (milliseconds === void 0) {
milliseconds = 0;
}
return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
};
DateWrapper.fromISOString = function(str) {
return new exports.Date(str);
};
DateWrapper.fromMillis = function(ms) {
return new exports.Date(ms);
};
DateWrapper.toMillis = function(date) {
return date.getTime();
};
DateWrapper.now = function() {
return new exports.Date();
};
DateWrapper.toJson = function(date) {
return date.toJSON();
};
return DateWrapper;
}();
exports.DateWrapper = DateWrapper;
function setValueOnPath(global, path, value) {
var parts = path.split(".");
var obj = global;
while (parts.length > 1) {
var name = parts.shift();
if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
obj = obj[name];
} else {
obj = obj[name] = {};
}
}
if (obj === undefined || obj === null) {
obj = {};
}
obj[parts.shift()] = value;
}
exports.setValueOnPath = setValueOnPath;
var _symbolIterator = null;
function getSymbolIterator() {
if (isBlank(_symbolIterator)) {
if (isPresent(Symbol) && isPresent(Symbol.iterator)) {
_symbolIterator = Symbol.iterator;
} else {
var keys = Object.getOwnPropertyNames(Map.prototype);
for (var i = 0; i < keys.length; ++i) {
var key = keys[i];
if (key !== "entries" && key !== "size" && Map.prototype[key] === Map.prototype["entries"]) {
_symbolIterator = key;
}
}
}
}
return _symbolIterator;
}
exports.getSymbolIterator = getSymbolIterator;
function evalExpression(sourceUrl, expr, declarations, vars) {
var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
var fnArgNames = [];
var fnArgValues = [];
for (var argName in vars) {
fnArgNames.push(argName);
fnArgValues.push(vars[argName]);
}
return new (Function.bind.apply(Function, [ void 0 ].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
}
exports.evalExpression = evalExpression;
function isPrimitive(obj) {
return !isJsObject(obj);
}
exports.isPrimitive = isPrimitive;
function hasConstructor(value, type) {
return value.constructor === type;
}
exports.hasConstructor = hasConstructor;
}, function(module, exports, __webpack_require__) {
"use strict";
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
__export(__webpack_require__(107));
__export(__webpack_require__(181));
__export(__webpack_require__(182));
__export(__webpack_require__(109));
__export(__webpack_require__(183));
var lang_1 = __webpack_require__(105);
exports.enableProdMode = lang_1.enableProdMode;
var application_ref_1 = __webpack_require__(184);
exports.platform = application_ref_1.platform;
exports.createNgZone = application_ref_1.createNgZone;
exports.PlatformRef = application_ref_1.PlatformRef;
exports.ApplicationRef = application_ref_1.ApplicationRef;
var application_tokens_1 = __webpack_require__(186);
exports.APP_ID = application_tokens_1.APP_ID;
exports.APP_COMPONENT = application_tokens_1.APP_COMPONENT;
exports.APP_INITIALIZER = application_tokens_1.APP_INITIALIZER;
exports.PACKAGE_ROOT_URL = application_tokens_1.PACKAGE_ROOT_URL;
exports.PLATFORM_INITIALIZER = application_tokens_1.PLATFORM_INITIALIZER;
__export(__webpack_require__(205));
__export(__webpack_require__(206));
__export(__webpack_require__(207));
var debug_node_1 = __webpack_require__(210);
exports.DebugElement = debug_node_1.DebugElement;
exports.DebugNode = debug_node_1.DebugNode;
exports.asNativeElements = debug_node_1.asNativeElements;
__export(__webpack_require__(187));
__export(__webpack_require__(127));
__export(__webpack_require__(211));
__export(__webpack_require__(212));
__export(__webpack_require__(213));
__export(__webpack_require__(120));
}, function(module, exports, __webpack_require__) {
"use strict";
var di_1 = __webpack_require__(108);
exports.QueryMetadata = di_1.QueryMetadata;
exports.ContentChildrenMetadata = di_1.ContentChildrenMetadata;
exports.ContentChildMetadata = di_1.ContentChildMetadata;
exports.ViewChildrenMetadata = di_1.ViewChildrenMetadata;
exports.ViewQueryMetadata = di_1.ViewQueryMetadata;
exports.ViewChildMetadata = di_1.ViewChildMetadata;
exports.AttributeMetadata = di_1.AttributeMetadata;
var directives_1 = __webpack_require__(126);
exports.ComponentMetadata = directives_1.ComponentMetadata;
exports.DirectiveMetadata = directives_1.DirectiveMetadata;
exports.PipeMetadata = directives_1.PipeMetadata;
exports.InputMetadata = directives_1.InputMetadata;
exports.OutputMetadata = directives_1.OutputMetadata;
exports.HostBindingMetadata = directives_1.HostBindingMetadata;
exports.HostListenerMetadata = directives_1.HostListenerMetadata;
var view_1 = __webpack_require__(180);
exports.ViewMetadata = view_1.ViewMetadata;
exports.ViewEncapsulation = view_1.ViewEncapsulation;
var di_2 = __webpack_require__(108);
var directives_2 = __webpack_require__(126);
var view_2 = __webpack_require__(180);
var decorators_1 = __webpack_require__(112);
exports.Component = decorators_1.makeDecorator(directives_2.ComponentMetadata, function(fn) {
return fn.View = exports.View;
});
exports.Directive = decorators_1.makeDecorator(directives_2.DirectiveMetadata);
exports.View = decorators_1.makeDecorator(view_2.ViewMetadata, function(fn) {
return fn.View = exports.View;
});
exports.Attribute = decorators_1.makeParamDecorator(di_2.AttributeMetadata);
exports.Query = decorators_1.makeParamDecorator(di_2.QueryMetadata);
exports.ContentChildren = decorators_1.makePropDecorator(di_2.ContentChildrenMetadata);
exports.ContentChild = decorators_1.makePropDecorator(di_2.ContentChildMetadata);
exports.ViewChildren = decorators_1.makePropDecorator(di_2.ViewChildrenMetadata);
exports.ViewChild = decorators_1.makePropDecorator(di_2.ViewChildMetadata);
exports.ViewQuery = decorators_1.makeParamDecorator(di_2.ViewQueryMetadata);
exports.Pipe = decorators_1.makeDecorator(directives_2.PipeMetadata);
exports.Input = decorators_1.makePropDecorator(directives_2.InputMetadata);
exports.Output = decorators_1.makePropDecorator(directives_2.OutputMetadata);
exports.HostBinding = decorators_1.makePropDecorator(directives_2.HostBindingMetadata);
exports.HostListener = decorators_1.makePropDecorator(directives_2.HostListenerMetadata);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var di_1 = __webpack_require__(109);
var metadata_1 = __webpack_require__(110);
var AttributeMetadata = function(_super) {
__extends(AttributeMetadata, _super);
function AttributeMetadata(attributeName) {
_super.call(this);
this.attributeName = attributeName;
}
Object.defineProperty(AttributeMetadata.prototype, "token", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
AttributeMetadata.prototype.toString = function() {
return "@Attribute(" + lang_1.stringify(this.attributeName) + ")";
};
AttributeMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", [ String ]) ], AttributeMetadata);
return AttributeMetadata;
}(metadata_1.DependencyMetadata);
exports.AttributeMetadata = AttributeMetadata;
var QueryMetadata = function(_super) {
__extends(QueryMetadata, _super);
function QueryMetadata(_selector, _a) {
var _b = _a === void 0 ? {} : _a, _c = _b.descendants, descendants = _c === void 0 ? false : _c, _d = _b.first, first = _d === void 0 ? false : _d;
_super.call(this);
this._selector = _selector;
this.descendants = descendants;
this.first = first;
}
Object.defineProperty(QueryMetadata.prototype, "isViewQuery", {
get: function() {
return false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(QueryMetadata.prototype, "selector", {
get: function() {
return di_1.resolveForwardRef(this._selector);
},
enumerable: true,
configurable: true
});
Object.defineProperty(QueryMetadata.prototype, "isVarBindingQuery", {
get: function() {
return lang_1.isString(this.selector);
},
enumerable: true,
configurable: true
});
Object.defineProperty(QueryMetadata.prototype, "varBindings", {
get: function() {
return this.selector.split(",");
},
enumerable: true,
configurable: true
});
QueryMetadata.prototype.toString = function() {
return "@Query(" + lang_1.stringify(this.selector) + ")";
};
QueryMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", [ Object, Object ]) ], QueryMetadata);
return QueryMetadata;
}(metadata_1.DependencyMetadata);
exports.QueryMetadata = QueryMetadata;
var ContentChildrenMetadata = function(_super) {
__extends(ContentChildrenMetadata, _super);
function ContentChildrenMetadata(_selector, _a) {
var _b = (_a === void 0 ? {} : _a).descendants, descendants = _b === void 0 ? false : _b;
_super.call(this, _selector, {
descendants: descendants
});
}
ContentChildrenMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", [ Object, Object ]) ], ContentChildrenMetadata);
return ContentChildrenMetadata;
}(QueryMetadata);
exports.ContentChildrenMetadata = ContentChildrenMetadata;
var ContentChildMetadata = function(_super) {
__extends(ContentChildMetadata, _super);
function ContentChildMetadata(_selector) {
_super.call(this, _selector, {
descendants: true,
first: true
});
}
ContentChildMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", [ Object ]) ], ContentChildMetadata);
return ContentChildMetadata;
}(QueryMetadata);
exports.ContentChildMetadata = ContentChildMetadata;
var ViewQueryMetadata = function(_super) {
__extends(ViewQueryMetadata, _super);
function ViewQueryMetadata(_selector, _a) {
var _b = _a === void 0 ? {} : _a, _c = _b.descendants, descendants = _c === void 0 ? false : _c, _d = _b.first, first = _d === void 0 ? false : _d;
_super.call(this, _selector, {
descendants: descendants,
first: first
});
}
Object.defineProperty(ViewQueryMetadata.prototype, "isViewQuery", {
get: function() {
return true;
},
enumerable: true,
configurable: true
});
ViewQueryMetadata.prototype.toString = function() {
return "@ViewQuery(" + lang_1.stringify(this.selector) + ")";
};
ViewQueryMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", [ Object, Object ]) ], ViewQueryMetadata);
return ViewQueryMetadata;
}(QueryMetadata);
exports.ViewQueryMetadata = ViewQueryMetadata;
var ViewChildrenMetadata = function(_super) {
__extends(ViewChildrenMetadata, _super);
function ViewChildrenMetadata(_selector) {
_super.call(this, _selector, {
descendants: true
});
}
ViewChildrenMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", [ Object ]) ], ViewChildrenMetadata);
return ViewChildrenMetadata;
}(ViewQueryMetadata);
exports.ViewChildrenMetadata = ViewChildrenMetadata;
var ViewChildMetadata = function(_super) {
__extends(ViewChildMetadata, _super);
function ViewChildMetadata(_selector) {
_super.call(this, _selector, {
descendants: true,
first: true
});
}
ViewChildMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", [ Object ]) ], ViewChildMetadata);
return ViewChildMetadata;
}(ViewQueryMetadata);
exports.ViewChildMetadata = ViewChildMetadata;
}, function(module, exports, __webpack_require__) {
"use strict";
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var metadata_1 = __webpack_require__(110);
exports.InjectMetadata = metadata_1.InjectMetadata;
exports.OptionalMetadata = metadata_1.OptionalMetadata;
exports.InjectableMetadata = metadata_1.InjectableMetadata;
exports.SelfMetadata = metadata_1.SelfMetadata;
exports.HostMetadata = metadata_1.HostMetadata;
exports.SkipSelfMetadata = metadata_1.SkipSelfMetadata;
exports.DependencyMetadata = metadata_1.DependencyMetadata;
__export(__webpack_require__(111));
var forward_ref_1 = __webpack_require__(113);
exports.forwardRef = forward_ref_1.forwardRef;
exports.resolveForwardRef = forward_ref_1.resolveForwardRef;
var injector_1 = __webpack_require__(114);
exports.Injector = injector_1.Injector;
var provider_1 = __webpack_require__(116);
exports.Binding = provider_1.Binding;
exports.ProviderBuilder = provider_1.ProviderBuilder;
exports.ResolvedFactory = provider_1.ResolvedFactory;
exports.Dependency = provider_1.Dependency;
exports.bind = provider_1.bind;
exports.Provider = provider_1.Provider;
exports.provide = provider_1.provide;
var key_1 = __webpack_require__(123);
exports.Key = key_1.Key;
var exceptions_1 = __webpack_require__(124);
exports.NoProviderError = exceptions_1.NoProviderError;
exports.AbstractProviderError = exceptions_1.AbstractProviderError;
exports.CyclicDependencyError = exceptions_1.CyclicDependencyError;
exports.InstantiationError = exceptions_1.InstantiationError;
exports.InvalidProviderError = exceptions_1.InvalidProviderError;
exports.NoAnnotationError = exceptions_1.NoAnnotationError;
exports.OutOfBoundsError = exceptions_1.OutOfBoundsError;
var opaque_token_1 = __webpack_require__(125);
exports.OpaqueToken = opaque_token_1.OpaqueToken;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var InjectMetadata = function() {
function InjectMetadata(token) {
this.token = token;
}
InjectMetadata.prototype.toString = function() {
return "@Inject(" + lang_1.stringify(this.token) + ")";
};
InjectMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", [ Object ]) ], InjectMetadata);
return InjectMetadata;
}();
exports.InjectMetadata = InjectMetadata;
var OptionalMetadata = function() {
function OptionalMetadata() {}
OptionalMetadata.prototype.toString = function() {
return "@Optional()";
};
OptionalMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", []) ], OptionalMetadata);
return OptionalMetadata;
}();
exports.OptionalMetadata = OptionalMetadata;
var DependencyMetadata = function() {
function DependencyMetadata() {}
Object.defineProperty(DependencyMetadata.prototype, "token", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
DependencyMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", []) ], DependencyMetadata);
return DependencyMetadata;
}();
exports.DependencyMetadata = DependencyMetadata;
var InjectableMetadata = function() {
function InjectableMetadata() {}
InjectableMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", []) ], InjectableMetadata);
return InjectableMetadata;
}();
exports.InjectableMetadata = InjectableMetadata;
var SelfMetadata = function() {
function SelfMetadata() {}
SelfMetadata.prototype.toString = function() {
return "@Self()";
};
SelfMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", []) ], SelfMetadata);
return SelfMetadata;
}();
exports.SelfMetadata = SelfMetadata;
var SkipSelfMetadata = function() {
function SkipSelfMetadata() {}
SkipSelfMetadata.prototype.toString = function() {
return "@SkipSelf()";
};
SkipSelfMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", []) ], SkipSelfMetadata);
return SkipSelfMetadata;
}();
exports.SkipSelfMetadata = SkipSelfMetadata;
var HostMetadata = function() {
function HostMetadata() {}
HostMetadata.prototype.toString = function() {
return "@Host()";
};
HostMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", []) ], HostMetadata);
return HostMetadata;
}();
exports.HostMetadata = HostMetadata;
}, function(module, exports, __webpack_require__) {
"use strict";
var metadata_1 = __webpack_require__(110);
var decorators_1 = __webpack_require__(112);
exports.Inject = decorators_1.makeParamDecorator(metadata_1.InjectMetadata);
exports.Optional = decorators_1.makeParamDecorator(metadata_1.OptionalMetadata);
exports.Injectable = decorators_1.makeDecorator(metadata_1.InjectableMetadata);
exports.Self = decorators_1.makeParamDecorator(metadata_1.SelfMetadata);
exports.Host = decorators_1.makeParamDecorator(metadata_1.HostMetadata);
exports.SkipSelf = decorators_1.makeParamDecorator(metadata_1.SkipSelfMetadata);
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var _nextClassId = 0;
function extractAnnotation(annotation) {
if (lang_1.isFunction(annotation) && annotation.hasOwnProperty("annotation")) {
annotation = annotation.annotation;
}
return annotation;
}
function applyParams(fnOrArray, key) {
if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function || fnOrArray === Number || fnOrArray === Array) {
throw new Error("Can not use native " + lang_1.stringify(fnOrArray) + " as constructor");
}
if (lang_1.isFunction(fnOrArray)) {
return fnOrArray;
} else if (fnOrArray instanceof Array) {
var annotations = fnOrArray;
var fn = fnOrArray[fnOrArray.length - 1];
if (!lang_1.isFunction(fn)) {
throw new Error("Last position of Class method array must be Function in key " + key + " was '" + lang_1.stringify(fn) + "'");
}
var annoLength = annotations.length - 1;
if (annoLength != fn.length) {
throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + lang_1.stringify(fn));
}
var paramsAnnotations = [];
for (var i = 0, ii = annotations.length - 1; i < ii; i++) {
var paramAnnotations = [];
paramsAnnotations.push(paramAnnotations);
var annotation = annotations[i];
if (annotation instanceof Array) {
for (var j = 0; j < annotation.length; j++) {
paramAnnotations.push(extractAnnotation(annotation[j]));
}
} else if (lang_1.isFunction(annotation)) {
paramAnnotations.push(extractAnnotation(annotation));
} else {
paramAnnotations.push(annotation);
}
}
Reflect.defineMetadata("parameters", paramsAnnotations, fn);
return fn;
} else {
throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + lang_1.stringify(fnOrArray) + "'");
}
}
function Class(clsDef) {
var constructor = applyParams(clsDef.hasOwnProperty("constructor") ? clsDef.constructor : undefined, "constructor");
var proto = constructor.prototype;
if (clsDef.hasOwnProperty("extends")) {
if (lang_1.isFunction(clsDef.extends)) {
constructor.prototype = proto = Object.create(clsDef.extends.prototype);
} else {
throw new Error("Class definition 'extends' property must be a constructor function was: " + lang_1.stringify(clsDef.extends));
}
}
for (var key in clsDef) {
if (key != "extends" && key != "prototype" && clsDef.hasOwnProperty(key)) {
proto[key] = applyParams(clsDef[key], key);
}
}
if (this && this.annotations instanceof Array) {
Reflect.defineMetadata("annotations", this.annotations, constructor);
}
if (!constructor["name"]) {
constructor["overriddenName"] = "class" + _nextClassId++;
}
return constructor;
}
exports.Class = Class;
var Reflect = lang_1.global.Reflect;
if (!(Reflect && Reflect.getMetadata)) {
throw "reflect-metadata shim is required when using class decorators";
}
function makeDecorator(annotationCls, chainFn) {
if (chainFn === void 0) {
chainFn = null;
}
function DecoratorFactory(objOrType) {
var annotationInstance = new annotationCls(objOrType);
if (this instanceof annotationCls) {
return annotationInstance;
} else {
var chainAnnotation = lang_1.isFunction(this) && this.annotations instanceof Array ? this.annotations : [];
chainAnnotation.push(annotationInstance);
var TypeDecorator = function TypeDecorator(cls) {
var annotations = Reflect.getOwnMetadata("annotations", cls);
annotations = annotations || [];
annotations.push(annotationInstance);
Reflect.defineMetadata("annotations", annotations, cls);
return cls;
};
TypeDecorator.annotations = chainAnnotation;
TypeDecorator.Class = Class;
if (chainFn) chainFn(TypeDecorator);
return TypeDecorator;
}
}
DecoratorFactory.prototype = Object.create(annotationCls.prototype);
return DecoratorFactory;
}
exports.makeDecorator = makeDecorator;
function makeParamDecorator(annotationCls) {
function ParamDecoratorFactory() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
var annotationInstance = Object.create(annotationCls.prototype);
annotationCls.apply(annotationInstance, args);
if (this instanceof annotationCls) {
return annotationInstance;
} else {
ParamDecorator.annotation = annotationInstance;
return ParamDecorator;
}
function ParamDecorator(cls, unusedKey, index) {
var parameters = Reflect.getMetadata("parameters", cls);
parameters = parameters || [];
while (parameters.length <= index) {
parameters.push(null);
}
parameters[index] = parameters[index] || [];
var annotationsForParam = parameters[index];
annotationsForParam.push(annotationInstance);
Reflect.defineMetadata("parameters", parameters, cls);
return cls;
}
}
ParamDecoratorFactory.prototype = Object.create(annotationCls.prototype);
return ParamDecoratorFactory;
}
exports.makeParamDecorator = makeParamDecorator;
function makePropDecorator(decoratorCls) {
function PropDecoratorFactory() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
var decoratorInstance = Object.create(decoratorCls.prototype);
decoratorCls.apply(decoratorInstance, args);
if (this instanceof decoratorCls) {
return decoratorInstance;
} else {
return function PropDecorator(target, name) {
var meta = Reflect.getOwnMetadata("propMetadata", target.constructor);
meta = meta || {};
meta[name] = meta[name] || [];
meta[name].unshift(decoratorInstance);
Reflect.defineMetadata("propMetadata", meta, target.constructor);
};
}
}
PropDecoratorFactory.prototype = Object.create(decoratorCls.prototype);
return PropDecoratorFactory;
}
exports.makePropDecorator = makePropDecorator;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
function forwardRef(forwardRefFn) {
forwardRefFn.__forward_ref__ = forwardRef;
forwardRefFn.toString = function() {
return lang_1.stringify(this());
};
return forwardRefFn;
}
exports.forwardRef = forwardRef;
function resolveForwardRef(type) {
if (lang_1.isFunction(type) && type.hasOwnProperty("__forward_ref__") && type.__forward_ref__ === forwardRef) {
return type();
} else {
return type;
}
}
exports.resolveForwardRef = resolveForwardRef;
}, function(module, exports, __webpack_require__) {
"use strict";
var collection_1 = __webpack_require__(115);
var provider_1 = __webpack_require__(116);
var exceptions_1 = __webpack_require__(124);
var lang_1 = __webpack_require__(105);
var exceptions_2 = __webpack_require__(117);
var key_1 = __webpack_require__(123);
var metadata_1 = __webpack_require__(110);
var _MAX_CONSTRUCTION_COUNTER = 10;
exports.UNDEFINED = lang_1.CONST_EXPR(new Object());
(function(Visibility) {
Visibility[Visibility["Public"] = 0] = "Public";
Visibility[Visibility["Private"] = 1] = "Private";
Visibility[Visibility["PublicAndPrivate"] = 2] = "PublicAndPrivate";
})(exports.Visibility || (exports.Visibility = {}));
var Visibility = exports.Visibility;
function canSee(src, dst) {
return src === dst || (dst === Visibility.PublicAndPrivate || src === Visibility.PublicAndPrivate);
}
var ProtoInjectorInlineStrategy = function() {
function ProtoInjectorInlineStrategy(protoEI, bwv) {
this.provider0 = null;
this.provider1 = null;
this.provider2 = null;
this.provider3 = null;
this.provider4 = null;
this.provider5 = null;
this.provider6 = null;
this.provider7 = null;
this.provider8 = null;
this.provider9 = null;
this.keyId0 = null;
this.keyId1 = null;
this.keyId2 = null;
this.keyId3 = null;
this.keyId4 = null;
this.keyId5 = null;
this.keyId6 = null;
this.keyId7 = null;
this.keyId8 = null;
this.keyId9 = null;
this.visibility0 = null;
this.visibility1 = null;
this.visibility2 = null;
this.visibility3 = null;
this.visibility4 = null;
this.visibility5 = null;
this.visibility6 = null;
this.visibility7 = null;
this.visibility8 = null;
this.visibility9 = null;
var length = bwv.length;
if (length > 0) {
this.provider0 = bwv[0].provider;
this.keyId0 = bwv[0].getKeyId();
this.visibility0 = bwv[0].visibility;
}
if (length > 1) {
this.provider1 = bwv[1].provider;
this.keyId1 = bwv[1].getKeyId();
this.visibility1 = bwv[1].visibility;
}
if (length > 2) {
this.provider2 = bwv[2].provider;
this.keyId2 = bwv[2].getKeyId();
this.visibility2 = bwv[2].visibility;
}
if (length > 3) {
this.provider3 = bwv[3].provider;
this.keyId3 = bwv[3].getKeyId();
this.visibility3 = bwv[3].visibility;
}
if (length > 4) {
this.provider4 = bwv[4].provider;
this.keyId4 = bwv[4].getKeyId();
this.visibility4 = bwv[4].visibility;
}
if (length > 5) {
this.provider5 = bwv[5].provider;
this.keyId5 = bwv[5].getKeyId();
this.visibility5 = bwv[5].visibility;
}
if (length > 6) {
this.provider6 = bwv[6].provider;
this.keyId6 = bwv[6].getKeyId();
this.visibility6 = bwv[6].visibility;
}
if (length > 7) {
this.provider7 = bwv[7].provider;
this.keyId7 = bwv[7].getKeyId();
this.visibility7 = bwv[7].visibility;
}
if (length > 8) {
this.provider8 = bwv[8].provider;
this.keyId8 = bwv[8].getKeyId();
this.visibility8 = bwv[8].visibility;
}
if (length > 9) {
this.provider9 = bwv[9].provider;
this.keyId9 = bwv[9].getKeyId();
this.visibility9 = bwv[9].visibility;
}
}
ProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function(index) {
if (index == 0) return this.provider0;
if (index == 1) return this.provider1;
if (index == 2) return this.provider2;
if (index == 3) return this.provider3;
if (index == 4) return this.provider4;
if (index == 5) return this.provider5;
if (index == 6) return this.provider6;
if (index == 7) return this.provider7;
if (index == 8) return this.provider8;
if (index == 9) return this.provider9;
throw new exceptions_1.OutOfBoundsError(index);
};
ProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function(injector) {
return new InjectorInlineStrategy(injector, this);
};
return ProtoInjectorInlineStrategy;
}();
exports.ProtoInjectorInlineStrategy = ProtoInjectorInlineStrategy;
var ProtoInjectorDynamicStrategy = function() {
function ProtoInjectorDynamicStrategy(protoInj, bwv) {
var len = bwv.length;
this.providers = collection_1.ListWrapper.createFixedSize(len);
this.keyIds = collection_1.ListWrapper.createFixedSize(len);
this.visibilities = collection_1.ListWrapper.createFixedSize(len);
for (var i = 0; i < len; i++) {
this.providers[i] = bwv[i].provider;
this.keyIds[i] = bwv[i].getKeyId();
this.visibilities[i] = bwv[i].visibility;
}
}
ProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function(index) {
if (index < 0 || index >= this.providers.length) {
throw new exceptions_1.OutOfBoundsError(index);
}
return this.providers[index];
};
ProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function(ei) {
return new InjectorDynamicStrategy(this, ei);
};
return ProtoInjectorDynamicStrategy;
}();
exports.ProtoInjectorDynamicStrategy = ProtoInjectorDynamicStrategy;
var ProtoInjector = function() {
function ProtoInjector(bwv) {
this.numberOfProviders = bwv.length;
this._strategy = bwv.length > _MAX_CONSTRUCTION_COUNTER ? new ProtoInjectorDynamicStrategy(this, bwv) : new ProtoInjectorInlineStrategy(this, bwv);
}
ProtoInjector.fromResolvedProviders = function(providers) {
var bd = providers.map(function(b) {
return new ProviderWithVisibility(b, Visibility.Public);
});
return new ProtoInjector(bd);
};
ProtoInjector.prototype.getProviderAtIndex = function(index) {
return this._strategy.getProviderAtIndex(index);
};
return ProtoInjector;
}();
exports.ProtoInjector = ProtoInjector;
var InjectorInlineStrategy = function() {
function InjectorInlineStrategy(injector, protoStrategy) {
this.injector = injector;
this.protoStrategy = protoStrategy;
this.obj0 = exports.UNDEFINED;
this.obj1 = exports.UNDEFINED;
this.obj2 = exports.UNDEFINED;
this.obj3 = exports.UNDEFINED;
this.obj4 = exports.UNDEFINED;
this.obj5 = exports.UNDEFINED;
this.obj6 = exports.UNDEFINED;
this.obj7 = exports.UNDEFINED;
this.obj8 = exports.UNDEFINED;
this.obj9 = exports.UNDEFINED;
}
InjectorInlineStrategy.prototype.resetConstructionCounter = function() {
this.injector._constructionCounter = 0;
};
InjectorInlineStrategy.prototype.instantiateProvider = function(provider, visibility) {
return this.injector._new(provider, visibility);
};
InjectorInlineStrategy.prototype.getObjByKeyId = function(keyId, visibility) {
var p = this.protoStrategy;
var inj = this.injector;
if (p.keyId0 === keyId && canSee(p.visibility0, visibility)) {
if (this.obj0 === exports.UNDEFINED) {
this.obj0 = inj._new(p.provider0, p.visibility0);
}
return this.obj0;
}
if (p.keyId1 === keyId && canSee(p.visibility1, visibility)) {
if (this.obj1 === exports.UNDEFINED) {
this.obj1 = inj._new(p.provider1, p.visibility1);
}
return this.obj1;
}
if (p.keyId2 === keyId && canSee(p.visibility2, visibility)) {
if (this.obj2 === exports.UNDEFINED) {
this.obj2 = inj._new(p.provider2, p.visibility2);
}
return this.obj2;
}
if (p.keyId3 === keyId && canSee(p.visibility3, visibility)) {
if (this.obj3 === exports.UNDEFINED) {
this.obj3 = inj._new(p.provider3, p.visibility3);
}
return this.obj3;
}
if (p.keyId4 === keyId && canSee(p.visibility4, visibility)) {
if (this.obj4 === exports.UNDEFINED) {
this.obj4 = inj._new(p.provider4, p.visibility4);
}
return this.obj4;
}
if (p.keyId5 === keyId && canSee(p.visibility5, visibility)) {
if (this.obj5 === exports.UNDEFINED) {
this.obj5 = inj._new(p.provider5, p.visibility5);
}
return this.obj5;
}
if (p.keyId6 === keyId && canSee(p.visibility6, visibility)) {
if (this.obj6 === exports.UNDEFINED) {
this.obj6 = inj._new(p.provider6, p.visibility6);
}
return this.obj6;
}
if (p.keyId7 === keyId && canSee(p.visibility7, visibility)) {
if (this.obj7 === exports.UNDEFINED) {
this.obj7 = inj._new(p.provider7, p.visibility7);
}
return this.obj7;
}
if (p.keyId8 === keyId && canSee(p.visibility8, visibility)) {
if (this.obj8 === exports.UNDEFINED) {
this.obj8 = inj._new(p.provider8, p.visibility8);
}
return this.obj8;
}
if (p.keyId9 === keyId && canSee(p.visibility9, visibility)) {
if (this.obj9 === exports.UNDEFINED) {
this.obj9 = inj._new(p.provider9, p.visibility9);
}
return this.obj9;
}
return exports.UNDEFINED;
};
InjectorInlineStrategy.prototype.getObjAtIndex = function(index) {
if (index == 0) return this.obj0;
if (index == 1) return this.obj1;
if (index == 2) return this.obj2;
if (index == 3) return this.obj3;
if (index == 4) return this.obj4;
if (index == 5) return this.obj5;
if (index == 6) return this.obj6;
if (index == 7) return this.obj7;
if (index == 8) return this.obj8;
if (index == 9) return this.obj9;
throw new exceptions_1.OutOfBoundsError(index);
};
InjectorInlineStrategy.prototype.getMaxNumberOfObjects = function() {
return _MAX_CONSTRUCTION_COUNTER;
};
return InjectorInlineStrategy;
}();
exports.InjectorInlineStrategy = InjectorInlineStrategy;
var InjectorDynamicStrategy = function() {
function InjectorDynamicStrategy(protoStrategy, injector) {
this.protoStrategy = protoStrategy;
this.injector = injector;
this.objs = collection_1.ListWrapper.createFixedSize(protoStrategy.providers.length);
collection_1.ListWrapper.fill(this.objs, exports.UNDEFINED);
}
InjectorDynamicStrategy.prototype.resetConstructionCounter = function() {
this.injector._constructionCounter = 0;
};
InjectorDynamicStrategy.prototype.instantiateProvider = function(provider, visibility) {
return this.injector._new(provider, visibility);
};
InjectorDynamicStrategy.prototype.getObjByKeyId = function(keyId, visibility) {
var p = this.protoStrategy;
for (var i = 0; i < p.keyIds.length; i++) {
if (p.keyIds[i] === keyId && canSee(p.visibilities[i], visibility)) {
if (this.objs[i] === exports.UNDEFINED) {
this.objs[i] = this.injector._new(p.providers[i], p.visibilities[i]);
}
return this.objs[i];
}
}
return exports.UNDEFINED;
};
InjectorDynamicStrategy.prototype.getObjAtIndex = function(index) {
if (index < 0 || index >= this.objs.length) {
throw new exceptions_1.OutOfBoundsError(index);
}
return this.objs[index];
};
InjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function() {
return this.objs.length;
};
return InjectorDynamicStrategy;
}();
exports.InjectorDynamicStrategy = InjectorDynamicStrategy;
var ProviderWithVisibility = function() {
function ProviderWithVisibility(provider, visibility) {
this.provider = provider;
this.visibility = visibility;
}
ProviderWithVisibility.prototype.getKeyId = function() {
return this.provider.key.id;
};
return ProviderWithVisibility;
}();
exports.ProviderWithVisibility = ProviderWithVisibility;
var Injector = function() {
function Injector(_proto, _parent, _isHostBoundary, _depProvider, _debugContext) {
if (_parent === void 0) {
_parent = null;
}
if (_isHostBoundary === void 0) {
_isHostBoundary = false;
}
if (_depProvider === void 0) {
_depProvider = null;
}
if (_debugContext === void 0) {
_debugContext = null;
}
this._isHostBoundary = _isHostBoundary;
this._depProvider = _depProvider;
this._debugContext = _debugContext;
this._constructionCounter = 0;
this._proto = _proto;
this._parent = _parent;
this._strategy = _proto._strategy.createInjectorStrategy(this);
}
Injector.resolve = function(providers) {
return provider_1.resolveProviders(providers);
};
Injector.resolveAndCreate = function(providers) {
var resolvedProviders = Injector.resolve(providers);
return Injector.fromResolvedProviders(resolvedProviders);
};
Injector.fromResolvedProviders = function(providers) {
return new Injector(ProtoInjector.fromResolvedProviders(providers));
};
Injector.fromResolvedBindings = function(providers) {
return Injector.fromResolvedProviders(providers);
};
Object.defineProperty(Injector.prototype, "hostBoundary", {
get: function() {
return this._isHostBoundary;
},
enumerable: true,
configurable: true
});
Injector.prototype.debugContext = function() {
return this._debugContext();
};
Injector.prototype.get = function(token) {
return this._getByKey(key_1.Key.get(token), null, null, false, Visibility.PublicAndPrivate);
};
Injector.prototype.getOptional = function(token) {
return this._getByKey(key_1.Key.get(token), null, null, true, Visibility.PublicAndPrivate);
};
Injector.prototype.getAt = function(index) {
return this._strategy.getObjAtIndex(index);
};
Object.defineProperty(Injector.prototype, "parent", {
get: function() {
return this._parent;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Injector.prototype, "internalStrategy", {
get: function() {
return this._strategy;
},
enumerable: true,
configurable: true
});
Injector.prototype.resolveAndCreateChild = function(providers) {
var resolvedProviders = Injector.resolve(providers);
return this.createChildFromResolved(resolvedProviders);
};
Injector.prototype.createChildFromResolved = function(providers) {
var bd = providers.map(function(b) {
return new ProviderWithVisibility(b, Visibility.Public);
});
var proto = new ProtoInjector(bd);
var inj = new Injector(proto);
inj._parent = this;
return inj;
};
Injector.prototype.resolveAndInstantiate = function(provider) {
return this.instantiateResolved(Injector.resolve([ provider ])[0]);
};
Injector.prototype.instantiateResolved = function(provider) {
return this._instantiateProvider(provider, Visibility.PublicAndPrivate);
};
Injector.prototype._new = function(provider, visibility) {
if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
throw new exceptions_1.CyclicDependencyError(this, provider.key);
}
return this._instantiateProvider(provider, visibility);
};
Injector.prototype._instantiateProvider = function(provider, visibility) {
if (provider.multiProvider) {
var res = collection_1.ListWrapper.createFixedSize(provider.resolvedFactories.length);
for (var i = 0; i < provider.resolvedFactories.length; ++i) {
res[i] = this._instantiate(provider, provider.resolvedFactories[i], visibility);
}
return res;
} else {
return this._instantiate(provider, provider.resolvedFactories[0], visibility);
}
};
Injector.prototype._instantiate = function(provider, resolvedFactory, visibility) {
var factory = resolvedFactory.factory;
var deps = resolvedFactory.dependencies;
var length = deps.length;
var d0;
var d1;
var d2;
var d3;
var d4;
var d5;
var d6;
var d7;
var d8;
var d9;
var d10;
var d11;
var d12;
var d13;
var d14;
var d15;
var d16;
var d17;
var d18;
var d19;
try {
d0 = length > 0 ? this._getByDependency(provider, deps[0], visibility) : null;
d1 = length > 1 ? this._getByDependency(provider, deps[1], visibility) : null;
d2 = length > 2 ? this._getByDependency(provider, deps[2], visibility) : null;
d3 = length > 3 ? this._getByDependency(provider, deps[3], visibility) : null;
d4 = length > 4 ? this._getByDependency(provider, deps[4], visibility) : null;
d5 = length > 5 ? this._getByDependency(provider, deps[5], visibility) : null;
d6 = length > 6 ? this._getByDependency(provider, deps[6], visibility) : null;
d7 = length > 7 ? this._getByDependency(provider, deps[7], visibility) : null;
d8 = length > 8 ? this._getByDependency(provider, deps[8], visibility) : null;
d9 = length > 9 ? this._getByDependency(provider, deps[9], visibility) : null;
d10 = length > 10 ? this._getByDependency(provider, deps[10], visibility) : null;
d11 = length > 11 ? this._getByDependency(provider, deps[11], visibility) : null;
d12 = length > 12 ? this._getByDependency(provider, deps[12], visibility) : null;
d13 = length > 13 ? this._getByDependency(provider, deps[13], visibility) : null;
d14 = length > 14 ? this._getByDependency(provider, deps[14], visibility) : null;
d15 = length > 15 ? this._getByDependency(provider, deps[15], visibility) : null;
d16 = length > 16 ? this._getByDependency(provider, deps[16], visibility) : null;
d17 = length > 17 ? this._getByDependency(provider, deps[17], visibility) : null;
d18 = length > 18 ? this._getByDependency(provider, deps[18], visibility) : null;
d19 = length > 19 ? this._getByDependency(provider, deps[19], visibility) : null;
} catch (e) {
if (e instanceof exceptions_1.AbstractProviderError || e instanceof exceptions_1.InstantiationError) {
e.addKey(this, provider.key);
}
throw e;
}
var obj;
try {
switch (length) {
case 0:
obj = factory();
break;

case 1:
obj = factory(d0);
break;

case 2:
obj = factory(d0, d1);
break;

case 3:
obj = factory(d0, d1, d2);
break;

case 4:
obj = factory(d0, d1, d2, d3);
break;

case 5:
obj = factory(d0, d1, d2, d3, d4);
break;

case 6:
obj = factory(d0, d1, d2, d3, d4, d5);
break;

case 7:
obj = factory(d0, d1, d2, d3, d4, d5, d6);
break;

case 8:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
break;

case 9:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
break;

case 10:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
break;

case 11:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
break;

case 12:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
break;

case 13:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
break;

case 14:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
break;

case 15:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
break;

case 16:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
break;

case 17:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
break;

case 18:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
break;

case 19:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
break;

case 20:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
break;

default:
throw new exceptions_2.BaseException("Cannot instantiate '" + provider.key.displayName + "' because it has more than 20 dependencies");
}
} catch (e) {
throw new exceptions_1.InstantiationError(this, e, e.stack, provider.key);
}
return obj;
};
Injector.prototype._getByDependency = function(provider, dep, providerVisibility) {
var special = lang_1.isPresent(this._depProvider) ? this._depProvider.getDependency(this, provider, dep) : exports.UNDEFINED;
if (special !== exports.UNDEFINED) {
return special;
} else {
return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional, providerVisibility);
}
};
Injector.prototype._getByKey = function(key, lowerBoundVisibility, upperBoundVisibility, optional, providerVisibility) {
if (key === INJECTOR_KEY) {
return this;
}
if (upperBoundVisibility instanceof metadata_1.SelfMetadata) {
return this._getByKeySelf(key, optional, providerVisibility);
} else if (upperBoundVisibility instanceof metadata_1.HostMetadata) {
return this._getByKeyHost(key, optional, providerVisibility, lowerBoundVisibility);
} else {
return this._getByKeyDefault(key, optional, providerVisibility, lowerBoundVisibility);
}
};
Injector.prototype._throwOrNull = function(key, optional) {
if (optional) {
return null;
} else {
throw new exceptions_1.NoProviderError(this, key);
}
};
Injector.prototype._getByKeySelf = function(key, optional, providerVisibility) {
var obj = this._strategy.getObjByKeyId(key.id, providerVisibility);
return obj !== exports.UNDEFINED ? obj : this._throwOrNull(key, optional);
};
Injector.prototype._getByKeyHost = function(key, optional, providerVisibility, lowerBoundVisibility) {
var inj = this;
if (lowerBoundVisibility instanceof metadata_1.SkipSelfMetadata) {
if (inj._isHostBoundary) {
return this._getPrivateDependency(key, optional, inj);
} else {
inj = inj._parent;
}
}
while (inj != null) {
var obj = inj._strategy.getObjByKeyId(key.id, providerVisibility);
if (obj !== exports.UNDEFINED) return obj;
if (lang_1.isPresent(inj._parent) && inj._isHostBoundary) {
return this._getPrivateDependency(key, optional, inj);
} else {
inj = inj._parent;
}
}
return this._throwOrNull(key, optional);
};
Injector.prototype._getPrivateDependency = function(key, optional, inj) {
var obj = inj._parent._strategy.getObjByKeyId(key.id, Visibility.Private);
return obj !== exports.UNDEFINED ? obj : this._throwOrNull(key, optional);
};
Injector.prototype._getByKeyDefault = function(key, optional, providerVisibility, lowerBoundVisibility) {
var inj = this;
if (lowerBoundVisibility instanceof metadata_1.SkipSelfMetadata) {
providerVisibility = inj._isHostBoundary ? Visibility.PublicAndPrivate : Visibility.Public;
inj = inj._parent;
}
while (inj != null) {
var obj = inj._strategy.getObjByKeyId(key.id, providerVisibility);
if (obj !== exports.UNDEFINED) return obj;
providerVisibility = inj._isHostBoundary ? Visibility.PublicAndPrivate : Visibility.Public;
inj = inj._parent;
}
return this._throwOrNull(key, optional);
};
Object.defineProperty(Injector.prototype, "displayName", {
get: function() {
return "Injector(providers: [" + _mapProviders(this, function(b) {
return ' "' + b.key.displayName + '" ';
}).join(", ") + "])";
},
enumerable: true,
configurable: true
});
Injector.prototype.toString = function() {
return this.displayName;
};
return Injector;
}();
exports.Injector = Injector;
var INJECTOR_KEY = key_1.Key.get(Injector);
function _mapProviders(injector, fn) {
var res = [];
for (var i = 0; i < injector._proto.numberOfProviders; ++i) {
res.push(fn(injector._proto.getProviderAtIndex(i)));
}
return res;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
exports.Map = lang_1.global.Map;
exports.Set = lang_1.global.Set;
var createMapFromPairs = function() {
try {
if (new exports.Map([ [ 1, 2 ] ]).size === 1) {
return function createMapFromPairs(pairs) {
return new exports.Map(pairs);
};
}
} catch (e) {}
return function createMapAndPopulateFromPairs(pairs) {
var map = new exports.Map();
for (var i = 0; i < pairs.length; i++) {
var pair = pairs[i];
map.set(pair[0], pair[1]);
}
return map;
};
}();
var createMapFromMap = function() {
try {
if (new exports.Map(new exports.Map())) {
return function createMapFromMap(m) {
return new exports.Map(m);
};
}
} catch (e) {}
return function createMapAndPopulateFromMap(m) {
var map = new exports.Map();
m.forEach(function(v, k) {
map.set(k, v);
});
return map;
};
}();
var _clearValues = function() {
if (new exports.Map().keys().next) {
return function _clearValues(m) {
var keyIterator = m.keys();
var k;
while (!(k = keyIterator.next()).done) {
m.set(k.value, null);
}
};
} else {
return function _clearValuesWithForeEach(m) {
m.forEach(function(v, k) {
m.set(k, null);
});
};
}
}();
var _arrayFromMap = function() {
try {
if (new exports.Map().values().next) {
return function createArrayFromMap(m, getValues) {
return getValues ? Array.from(m.values()) : Array.from(m.keys());
};
}
} catch (e) {}
return function createArrayFromMapWithForeach(m, getValues) {
var res = ListWrapper.createFixedSize(m.size), i = 0;
m.forEach(function(v, k) {
res[i] = getValues ? v : k;
i++;
});
return res;
};
}();
var MapWrapper = function() {
function MapWrapper() {}
MapWrapper.clone = function(m) {
return createMapFromMap(m);
};
MapWrapper.createFromStringMap = function(stringMap) {
var result = new exports.Map();
for (var prop in stringMap) {
result.set(prop, stringMap[prop]);
}
return result;
};
MapWrapper.toStringMap = function(m) {
var r = {};
m.forEach(function(v, k) {
return r[k] = v;
});
return r;
};
MapWrapper.createFromPairs = function(pairs) {
return createMapFromPairs(pairs);
};
MapWrapper.clearValues = function(m) {
_clearValues(m);
};
MapWrapper.iterable = function(m) {
return m;
};
MapWrapper.keys = function(m) {
return _arrayFromMap(m, false);
};
MapWrapper.values = function(m) {
return _arrayFromMap(m, true);
};
return MapWrapper;
}();
exports.MapWrapper = MapWrapper;
var StringMapWrapper = function() {
function StringMapWrapper() {}
StringMapWrapper.create = function() {
return {};
};
StringMapWrapper.contains = function(map, key) {
return map.hasOwnProperty(key);
};
StringMapWrapper.get = function(map, key) {
return map.hasOwnProperty(key) ? map[key] : undefined;
};
StringMapWrapper.set = function(map, key, value) {
map[key] = value;
};
StringMapWrapper.keys = function(map) {
return Object.keys(map);
};
StringMapWrapper.isEmpty = function(map) {
for (var prop in map) {
return false;
}
return true;
};
StringMapWrapper.delete = function(map, key) {
delete map[key];
};
StringMapWrapper.forEach = function(map, callback) {
for (var prop in map) {
if (map.hasOwnProperty(prop)) {
callback(map[prop], prop);
}
}
};
StringMapWrapper.merge = function(m1, m2) {
var m = {};
for (var attr in m1) {
if (m1.hasOwnProperty(attr)) {
m[attr] = m1[attr];
}
}
for (var attr in m2) {
if (m2.hasOwnProperty(attr)) {
m[attr] = m2[attr];
}
}
return m;
};
StringMapWrapper.equals = function(m1, m2) {
var k1 = Object.keys(m1);
var k2 = Object.keys(m2);
if (k1.length != k2.length) {
return false;
}
var key;
for (var i = 0; i < k1.length; i++) {
key = k1[i];
if (m1[key] !== m2[key]) {
return false;
}
}
return true;
};
return StringMapWrapper;
}();
exports.StringMapWrapper = StringMapWrapper;
var ListWrapper = function() {
function ListWrapper() {}
ListWrapper.createFixedSize = function(size) {
return new Array(size);
};
ListWrapper.createGrowableSize = function(size) {
return new Array(size);
};
ListWrapper.clone = function(array) {
return array.slice(0);
};
ListWrapper.createImmutable = function(array) {
var result = ListWrapper.clone(array);
Object.seal(result);
return result;
};
ListWrapper.forEachWithIndex = function(array, fn) {
for (var i = 0; i < array.length; i++) {
fn(array[i], i);
}
};
ListWrapper.first = function(array) {
if (!array) return null;
return array[0];
};
ListWrapper.last = function(array) {
if (!array || array.length == 0) return null;
return array[array.length - 1];
};
ListWrapper.indexOf = function(array, value, startIndex) {
if (startIndex === void 0) {
startIndex = 0;
}
return array.indexOf(value, startIndex);
};
ListWrapper.contains = function(list, el) {
return list.indexOf(el) !== -1;
};
ListWrapper.reversed = function(array) {
var a = ListWrapper.clone(array);
return a.reverse();
};
ListWrapper.concat = function(a, b) {
return a.concat(b);
};
ListWrapper.insert = function(list, index, value) {
list.splice(index, 0, value);
};
ListWrapper.removeAt = function(list, index) {
var res = list[index];
list.splice(index, 1);
return res;
};
ListWrapper.removeAll = function(list, items) {
for (var i = 0; i < items.length; ++i) {
var index = list.indexOf(items[i]);
list.splice(index, 1);
}
};
ListWrapper.remove = function(list, el) {
var index = list.indexOf(el);
if (index > -1) {
list.splice(index, 1);
return true;
}
return false;
};
ListWrapper.clear = function(list) {
list.length = 0;
};
ListWrapper.isEmpty = function(list) {
return list.length == 0;
};
ListWrapper.fill = function(list, value, start, end) {
if (start === void 0) {
start = 0;
}
if (end === void 0) {
end = null;
}
list.fill(value, start, end === null ? list.length : end);
};
ListWrapper.equals = function(a, b) {
if (a.length != b.length) return false;
for (var i = 0; i < a.length; ++i) {
if (a[i] !== b[i]) return false;
}
return true;
};
ListWrapper.slice = function(l, from, to) {
if (from === void 0) {
from = 0;
}
if (to === void 0) {
to = null;
}
return l.slice(from, to === null ? undefined : to);
};
ListWrapper.splice = function(l, from, length) {
return l.splice(from, length);
};
ListWrapper.sort = function(l, compareFn) {
if (lang_1.isPresent(compareFn)) {
l.sort(compareFn);
} else {
l.sort();
}
};
ListWrapper.toString = function(l) {
return l.toString();
};
ListWrapper.toJSON = function(l) {
return JSON.stringify(l);
};
ListWrapper.maximum = function(list, predicate) {
if (list.length == 0) {
return null;
}
var solution = null;
var maxValue = -Infinity;
for (var index = 0; index < list.length; index++) {
var candidate = list[index];
if (lang_1.isBlank(candidate)) {
continue;
}
var candidateValue = predicate(candidate);
if (candidateValue > maxValue) {
solution = candidate;
maxValue = candidateValue;
}
}
return solution;
};
ListWrapper.isImmutable = function(list) {
return Object.isSealed(list);
};
return ListWrapper;
}();
exports.ListWrapper = ListWrapper;
function isListLikeIterable(obj) {
if (!lang_1.isJsObject(obj)) return false;
return lang_1.isArray(obj) || !(obj instanceof exports.Map) && lang_1.getSymbolIterator() in obj;
}
exports.isListLikeIterable = isListLikeIterable;
function areIterablesEqual(a, b, comparator) {
var iterator1 = a[lang_1.getSymbolIterator()]();
var iterator2 = b[lang_1.getSymbolIterator()]();
while (true) {
var item1 = iterator1.next();
var item2 = iterator2.next();
if (item1.done && item2.done) return true;
if (item1.done || item2.done) return false;
if (!comparator(item1.value, item2.value)) return false;
}
}
exports.areIterablesEqual = areIterablesEqual;
function iterateListLike(obj, fn) {
if (lang_1.isArray(obj)) {
for (var i = 0; i < obj.length; i++) {
fn(obj[i]);
}
} else {
var iterator = obj[lang_1.getSymbolIterator()]();
var item;
while (!(item = iterator.next()).done) {
fn(item.value);
}
}
}
exports.iterateListLike = iterateListLike;
var createSetFromList = function() {
var test = new exports.Set([ 1, 2, 3 ]);
if (test.size === 3) {
return function createSetFromList(lst) {
return new exports.Set(lst);
};
} else {
return function createSetAndPopulateFromList(lst) {
var res = new exports.Set(lst);
if (res.size !== lst.length) {
for (var i = 0; i < lst.length; i++) {
res.add(lst[i]);
}
}
return res;
};
}
}();
var SetWrapper = function() {
function SetWrapper() {}
SetWrapper.createFromList = function(lst) {
return createSetFromList(lst);
};
SetWrapper.has = function(s, key) {
return s.has(key);
};
SetWrapper.delete = function(m, k) {
m.delete(k);
};
return SetWrapper;
}();
exports.SetWrapper = SetWrapper;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(115);
var reflection_1 = __webpack_require__(120);
var key_1 = __webpack_require__(123);
var metadata_1 = __webpack_require__(110);
var exceptions_2 = __webpack_require__(124);
var forward_ref_1 = __webpack_require__(113);
var Dependency = function() {
function Dependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
this.key = key;
this.optional = optional;
this.lowerBoundVisibility = lowerBoundVisibility;
this.upperBoundVisibility = upperBoundVisibility;
this.properties = properties;
}
Dependency.fromKey = function(key) {
return new Dependency(key, false, null, null, []);
};
return Dependency;
}();
exports.Dependency = Dependency;
var _EMPTY_LIST = lang_1.CONST_EXPR([]);
var Provider = function() {
function Provider(token, _a) {
var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
this.token = token;
this.useClass = useClass;
this.useValue = useValue;
this.useExisting = useExisting;
this.useFactory = useFactory;
this.dependencies = deps;
this._multi = multi;
}
Object.defineProperty(Provider.prototype, "multi", {
get: function() {
return lang_1.normalizeBool(this._multi);
},
enumerable: true,
configurable: true
});
Provider = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", [ Object, Object ]) ], Provider);
return Provider;
}();
exports.Provider = Provider;
var Binding = function(_super) {
__extends(Binding, _super);
function Binding(token, _a) {
var toClass = _a.toClass, toValue = _a.toValue, toAlias = _a.toAlias, toFactory = _a.toFactory, deps = _a.deps, multi = _a.multi;
_super.call(this, token, {
useClass: toClass,
useValue: toValue,
useExisting: toAlias,
useFactory: toFactory,
deps: deps,
multi: multi
});
}
Object.defineProperty(Binding.prototype, "toClass", {
get: function() {
return this.useClass;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Binding.prototype, "toAlias", {
get: function() {
return this.useExisting;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Binding.prototype, "toFactory", {
get: function() {
return this.useFactory;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Binding.prototype, "toValue", {
get: function() {
return this.useValue;
},
enumerable: true,
configurable: true
});
Binding = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", [ Object, Object ]) ], Binding);
return Binding;
}(Provider);
exports.Binding = Binding;
var ResolvedProvider_ = function() {
function ResolvedProvider_(key, resolvedFactories, multiProvider) {
this.key = key;
this.resolvedFactories = resolvedFactories;
this.multiProvider = multiProvider;
}
Object.defineProperty(ResolvedProvider_.prototype, "resolvedFactory", {
get: function() {
return this.resolvedFactories[0];
},
enumerable: true,
configurable: true
});
return ResolvedProvider_;
}();
exports.ResolvedProvider_ = ResolvedProvider_;
var ResolvedFactory = function() {
function ResolvedFactory(factory, dependencies) {
this.factory = factory;
this.dependencies = dependencies;
}
return ResolvedFactory;
}();
exports.ResolvedFactory = ResolvedFactory;
function bind(token) {
return new ProviderBuilder(token);
}
exports.bind = bind;
function provide(token, _a) {
var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
return new Provider(token, {
useClass: useClass,
useValue: useValue,
useExisting: useExisting,
useFactory: useFactory,
deps: deps,
multi: multi
});
}
exports.provide = provide;
var ProviderBuilder = function() {
function ProviderBuilder(token) {
this.token = token;
}
ProviderBuilder.prototype.toClass = function(type) {
if (!lang_1.isType(type)) {
throw new exceptions_1.BaseException('Trying to create a class provider but "' + lang_1.stringify(type) + '" is not a class!');
}
return new Provider(this.token, {
useClass: type
});
};
ProviderBuilder.prototype.toValue = function(value) {
return new Provider(this.token, {
useValue: value
});
};
ProviderBuilder.prototype.toAlias = function(aliasToken) {
if (lang_1.isBlank(aliasToken)) {
throw new exceptions_1.BaseException("Can not alias " + lang_1.stringify(this.token) + " to a blank value!");
}
return new Provider(this.token, {
useExisting: aliasToken
});
};
ProviderBuilder.prototype.toFactory = function(factory, dependencies) {
if (!lang_1.isFunction(factory)) {
throw new exceptions_1.BaseException('Trying to create a factory provider but "' + lang_1.stringify(factory) + '" is not a function!');
}
return new Provider(this.token, {
useFactory: factory,
deps: dependencies
});
};
return ProviderBuilder;
}();
exports.ProviderBuilder = ProviderBuilder;
function resolveFactory(provider) {
var factoryFn;
var resolvedDeps;
if (lang_1.isPresent(provider.useClass)) {
var useClass = forward_ref_1.resolveForwardRef(provider.useClass);
factoryFn = reflection_1.reflector.factory(useClass);
resolvedDeps = _dependenciesFor(useClass);
} else if (lang_1.isPresent(provider.useExisting)) {
factoryFn = function(aliasInstance) {
return aliasInstance;
};
resolvedDeps = [ Dependency.fromKey(key_1.Key.get(provider.useExisting)) ];
} else if (lang_1.isPresent(provider.useFactory)) {
factoryFn = provider.useFactory;
resolvedDeps = _constructDependencies(provider.useFactory, provider.dependencies);
} else {
factoryFn = function() {
return provider.useValue;
};
resolvedDeps = _EMPTY_LIST;
}
return new ResolvedFactory(factoryFn, resolvedDeps);
}
exports.resolveFactory = resolveFactory;
function resolveProvider(provider) {
return new ResolvedProvider_(key_1.Key.get(provider.token), [ resolveFactory(provider) ], provider.multi);
}
exports.resolveProvider = resolveProvider;
function resolveProviders(providers) {
var normalized = _normalizeProviders(providers, []);
var resolved = normalized.map(resolveProvider);
return collection_1.MapWrapper.values(mergeResolvedProviders(resolved, new Map()));
}
exports.resolveProviders = resolveProviders;
function mergeResolvedProviders(providers, normalizedProvidersMap) {
for (var i = 0; i < providers.length; i++) {
var provider = providers[i];
var existing = normalizedProvidersMap.get(provider.key.id);
if (lang_1.isPresent(existing)) {
if (provider.multiProvider !== existing.multiProvider) {
throw new exceptions_2.MixingMultiProvidersWithRegularProvidersError(existing, provider);
}
if (provider.multiProvider) {
for (var j = 0; j < provider.resolvedFactories.length; j++) {
existing.resolvedFactories.push(provider.resolvedFactories[j]);
}
} else {
normalizedProvidersMap.set(provider.key.id, provider);
}
} else {
var resolvedProvider;
if (provider.multiProvider) {
resolvedProvider = new ResolvedProvider_(provider.key, collection_1.ListWrapper.clone(provider.resolvedFactories), provider.multiProvider);
} else {
resolvedProvider = provider;
}
normalizedProvidersMap.set(provider.key.id, resolvedProvider);
}
}
return normalizedProvidersMap;
}
exports.mergeResolvedProviders = mergeResolvedProviders;
function _normalizeProviders(providers, res) {
providers.forEach(function(b) {
if (b instanceof lang_1.Type) {
res.push(provide(b, {
useClass: b
}));
} else if (b instanceof Provider) {
res.push(b);
} else if (b instanceof Array) {
_normalizeProviders(b, res);
} else if (b instanceof ProviderBuilder) {
throw new exceptions_2.InvalidProviderError(b.token);
} else {
throw new exceptions_2.InvalidProviderError(b);
}
});
return res;
}
function _constructDependencies(factoryFunction, dependencies) {
if (lang_1.isBlank(dependencies)) {
return _dependenciesFor(factoryFunction);
} else {
var params = dependencies.map(function(t) {
return [ t ];
});
return dependencies.map(function(t) {
return _extractToken(factoryFunction, t, params);
});
}
}
function _dependenciesFor(typeOrFunc) {
var params = reflection_1.reflector.parameters(typeOrFunc);
if (lang_1.isBlank(params)) return [];
if (params.some(lang_1.isBlank)) {
throw new exceptions_2.NoAnnotationError(typeOrFunc, params);
}
return params.map(function(p) {
return _extractToken(typeOrFunc, p, params);
});
}
function _extractToken(typeOrFunc, metadata, params) {
var depProps = [];
var token = null;
var optional = false;
if (!lang_1.isArray(metadata)) {
if (metadata instanceof metadata_1.InjectMetadata) {
return _createDependency(metadata.token, optional, null, null, depProps);
} else {
return _createDependency(metadata, optional, null, null, depProps);
}
}
var lowerBoundVisibility = null;
var upperBoundVisibility = null;
for (var i = 0; i < metadata.length; ++i) {
var paramMetadata = metadata[i];
if (paramMetadata instanceof lang_1.Type) {
token = paramMetadata;
} else if (paramMetadata instanceof metadata_1.InjectMetadata) {
token = paramMetadata.token;
} else if (paramMetadata instanceof metadata_1.OptionalMetadata) {
optional = true;
} else if (paramMetadata instanceof metadata_1.SelfMetadata) {
upperBoundVisibility = paramMetadata;
} else if (paramMetadata instanceof metadata_1.HostMetadata) {
upperBoundVisibility = paramMetadata;
} else if (paramMetadata instanceof metadata_1.SkipSelfMetadata) {
lowerBoundVisibility = paramMetadata;
} else if (paramMetadata instanceof metadata_1.DependencyMetadata) {
if (lang_1.isPresent(paramMetadata.token)) {
token = paramMetadata.token;
}
depProps.push(paramMetadata);
}
}
token = forward_ref_1.resolveForwardRef(token);
if (lang_1.isPresent(token)) {
return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
} else {
throw new exceptions_2.NoAnnotationError(typeOrFunc, params);
}
}
function _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps) {
return new Dependency(key_1.Key.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var base_wrapped_exception_1 = __webpack_require__(118);
var exception_handler_1 = __webpack_require__(119);
var exception_handler_2 = __webpack_require__(119);
exports.ExceptionHandler = exception_handler_2.ExceptionHandler;
var BaseException = function(_super) {
__extends(BaseException, _super);
function BaseException(message) {
if (message === void 0) {
message = "--";
}
_super.call(this, message);
this.message = message;
this.stack = new Error(message).stack;
}
BaseException.prototype.toString = function() {
return this.message;
};
return BaseException;
}(Error);
exports.BaseException = BaseException;
var WrappedException = function(_super) {
__extends(WrappedException, _super);
function WrappedException(_wrapperMessage, _originalException, _originalStack, _context) {
_super.call(this, _wrapperMessage);
this._wrapperMessage = _wrapperMessage;
this._originalException = _originalException;
this._originalStack = _originalStack;
this._context = _context;
this._wrapperStack = new Error(_wrapperMessage).stack;
}
Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
get: function() {
return this._wrapperMessage;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "wrapperStack", {
get: function() {
return this._wrapperStack;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "originalException", {
get: function() {
return this._originalException;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "originalStack", {
get: function() {
return this._originalStack;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "context", {
get: function() {
return this._context;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "message", {
get: function() {
return exception_handler_1.ExceptionHandler.exceptionToString(this);
},
enumerable: true,
configurable: true
});
WrappedException.prototype.toString = function() {
return this.message;
};
return WrappedException;
}(base_wrapped_exception_1.BaseWrappedException);
exports.WrappedException = WrappedException;
function makeTypeError(message) {
return new TypeError(message);
}
exports.makeTypeError = makeTypeError;
function unimplemented() {
throw new BaseException("unimplemented");
}
exports.unimplemented = unimplemented;
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BaseWrappedException = function(_super) {
__extends(BaseWrappedException, _super);
function BaseWrappedException(message) {
_super.call(this, message);
}
Object.defineProperty(BaseWrappedException.prototype, "wrapperMessage", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "wrapperStack", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "originalException", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "originalStack", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "context", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "message", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
return BaseWrappedException;
}(Error);
exports.BaseWrappedException = BaseWrappedException;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var base_wrapped_exception_1 = __webpack_require__(118);
var collection_1 = __webpack_require__(115);
var _ArrayLogger = function() {
function _ArrayLogger() {
this.res = [];
}
_ArrayLogger.prototype.log = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logError = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logGroup = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logGroupEnd = function() {};
return _ArrayLogger;
}();
var ExceptionHandler = function() {
function ExceptionHandler(_logger, _rethrowException) {
if (_rethrowException === void 0) {
_rethrowException = true;
}
this._logger = _logger;
this._rethrowException = _rethrowException;
}
ExceptionHandler.exceptionToString = function(exception, stackTrace, reason) {
if (stackTrace === void 0) {
stackTrace = null;
}
if (reason === void 0) {
reason = null;
}
var l = new _ArrayLogger();
var e = new ExceptionHandler(l, false);
e.call(exception, stackTrace, reason);
return l.res.join("\n");
};
ExceptionHandler.prototype.call = function(exception, stackTrace, reason) {
if (stackTrace === void 0) {
stackTrace = null;
}
if (reason === void 0) {
reason = null;
}
var originalException = this._findOriginalException(exception);
var originalStack = this._findOriginalStack(exception);
var context = this._findContext(exception);
this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
this._logger.logError("STACKTRACE:");
this._logger.logError(this._longStackTrace(stackTrace));
}
if (lang_1.isPresent(reason)) {
this._logger.logError("REASON: " + reason);
}
if (lang_1.isPresent(originalException)) {
this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
}
if (lang_1.isPresent(originalStack)) {
this._logger.logError("ORIGINAL STACKTRACE:");
this._logger.logError(this._longStackTrace(originalStack));
}
if (lang_1.isPresent(context)) {
this._logger.logError("ERROR CONTEXT:");
this._logger.logError(context);
}
this._logger.logGroupEnd();
if (this._rethrowException) throw exception;
};
ExceptionHandler.prototype._extractMessage = function(exception) {
return exception instanceof base_wrapped_exception_1.BaseWrappedException ? exception.wrapperMessage : exception.toString();
};
ExceptionHandler.prototype._longStackTrace = function(stackTrace) {
return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join("\n\n-----async gap-----\n") : stackTrace.toString();
};
ExceptionHandler.prototype._findContext = function(exception) {
try {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
return lang_1.isPresent(exception.context) ? exception.context : this._findContext(exception.originalException);
} catch (e) {
return null;
}
};
ExceptionHandler.prototype._findOriginalException = function(exception) {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
var e = exception.originalException;
while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
e = e.originalException;
}
return e;
};
ExceptionHandler.prototype._findOriginalStack = function(exception) {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
var e = exception;
var stack = exception.originalStack;
while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
e = e.originalException;
if (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
stack = e.originalStack;
}
}
return stack;
};
return ExceptionHandler;
}();
exports.ExceptionHandler = ExceptionHandler;
}, function(module, exports, __webpack_require__) {
"use strict";
var reflector_1 = __webpack_require__(121);
var reflector_2 = __webpack_require__(121);
exports.Reflector = reflector_2.Reflector;
exports.ReflectionInfo = reflector_2.ReflectionInfo;
var reflection_capabilities_1 = __webpack_require__(122);
exports.reflector = new reflector_1.Reflector(new reflection_capabilities_1.ReflectionCapabilities());
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(115);
var ReflectionInfo = function() {
function ReflectionInfo(annotations, parameters, factory, interfaces, propMetadata) {
this.annotations = annotations;
this.parameters = parameters;
this.factory = factory;
this.interfaces = interfaces;
this.propMetadata = propMetadata;
}
return ReflectionInfo;
}();
exports.ReflectionInfo = ReflectionInfo;
var Reflector = function() {
function Reflector(reflectionCapabilities) {
this._injectableInfo = new collection_1.Map();
this._getters = new collection_1.Map();
this._setters = new collection_1.Map();
this._methods = new collection_1.Map();
this._usedKeys = null;
this.reflectionCapabilities = reflectionCapabilities;
}
Reflector.prototype.isReflectionEnabled = function() {
return this.reflectionCapabilities.isReflectionEnabled();
};
Reflector.prototype.trackUsage = function() {
this._usedKeys = new collection_1.Set();
};
Reflector.prototype.listUnusedKeys = function() {
var _this = this;
if (this._usedKeys == null) {
throw new exceptions_1.BaseException("Usage tracking is disabled");
}
var allTypes = collection_1.MapWrapper.keys(this._injectableInfo);
return allTypes.filter(function(key) {
return !collection_1.SetWrapper.has(_this._usedKeys, key);
});
};
Reflector.prototype.registerFunction = function(func, funcInfo) {
this._injectableInfo.set(func, funcInfo);
};
Reflector.prototype.registerType = function(type, typeInfo) {
this._injectableInfo.set(type, typeInfo);
};
Reflector.prototype.registerGetters = function(getters) {
_mergeMaps(this._getters, getters);
};
Reflector.prototype.registerSetters = function(setters) {
_mergeMaps(this._setters, setters);
};
Reflector.prototype.registerMethods = function(methods) {
_mergeMaps(this._methods, methods);
};
Reflector.prototype.factory = function(type) {
if (this._containsReflectionInfo(type)) {
var res = this._getReflectionInfo(type).factory;
return lang_1.isPresent(res) ? res : null;
} else {
return this.reflectionCapabilities.factory(type);
}
};
Reflector.prototype.parameters = function(typeOrFunc) {
if (this._injectableInfo.has(typeOrFunc)) {
var res = this._getReflectionInfo(typeOrFunc).parameters;
return lang_1.isPresent(res) ? res : [];
} else {
return this.reflectionCapabilities.parameters(typeOrFunc);
}
};
Reflector.prototype.annotations = function(typeOrFunc) {
if (this._injectableInfo.has(typeOrFunc)) {
var res = this._getReflectionInfo(typeOrFunc).annotations;
return lang_1.isPresent(res) ? res : [];
} else {
return this.reflectionCapabilities.annotations(typeOrFunc);
}
};
Reflector.prototype.propMetadata = function(typeOrFunc) {
if (this._injectableInfo.has(typeOrFunc)) {
var res = this._getReflectionInfo(typeOrFunc).propMetadata;
return lang_1.isPresent(res) ? res : {};
} else {
return this.reflectionCapabilities.propMetadata(typeOrFunc);
}
};
Reflector.prototype.interfaces = function(type) {
if (this._injectableInfo.has(type)) {
var res = this._getReflectionInfo(type).interfaces;
return lang_1.isPresent(res) ? res : [];
} else {
return this.reflectionCapabilities.interfaces(type);
}
};
Reflector.prototype.getter = function(name) {
if (this._getters.has(name)) {
return this._getters.get(name);
} else {
return this.reflectionCapabilities.getter(name);
}
};
Reflector.prototype.setter = function(name) {
if (this._setters.has(name)) {
return this._setters.get(name);
} else {
return this.reflectionCapabilities.setter(name);
}
};
Reflector.prototype.method = function(name) {
if (this._methods.has(name)) {
return this._methods.get(name);
} else {
return this.reflectionCapabilities.method(name);
}
};
Reflector.prototype._getReflectionInfo = function(typeOrFunc) {
if (lang_1.isPresent(this._usedKeys)) {
this._usedKeys.add(typeOrFunc);
}
return this._injectableInfo.get(typeOrFunc);
};
Reflector.prototype._containsReflectionInfo = function(typeOrFunc) {
return this._injectableInfo.has(typeOrFunc);
};
Reflector.prototype.importUri = function(type) {
return this.reflectionCapabilities.importUri(type);
};
return Reflector;
}();
exports.Reflector = Reflector;
function _mergeMaps(target, config) {
collection_1.StringMapWrapper.forEach(config, function(v, k) {
return target.set(k, v);
});
}
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var ReflectionCapabilities = function() {
function ReflectionCapabilities(reflect) {
this._reflect = lang_1.isPresent(reflect) ? reflect : lang_1.global.Reflect;
}
ReflectionCapabilities.prototype.isReflectionEnabled = function() {
return true;
};
ReflectionCapabilities.prototype.factory = function(t) {
switch (t.length) {
case 0:
return function() {
return new t();
};

case 1:
return function(a1) {
return new t(a1);
};

case 2:
return function(a1, a2) {
return new t(a1, a2);
};

case 3:
return function(a1, a2, a3) {
return new t(a1, a2, a3);
};

case 4:
return function(a1, a2, a3, a4) {
return new t(a1, a2, a3, a4);
};

case 5:
return function(a1, a2, a3, a4, a5) {
return new t(a1, a2, a3, a4, a5);
};

case 6:
return function(a1, a2, a3, a4, a5, a6) {
return new t(a1, a2, a3, a4, a5, a6);
};

case 7:
return function(a1, a2, a3, a4, a5, a6, a7) {
return new t(a1, a2, a3, a4, a5, a6, a7);
};

case 8:
return function(a1, a2, a3, a4, a5, a6, a7, a8) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8);
};

case 9:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9);
};

case 10:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
};

case 11:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
};

case 12:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
};

case 13:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
};

case 14:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
};

case 15:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
};

case 16:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
};

case 17:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
};

case 18:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
};

case 19:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
};

case 20:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
};
}
throw new Error("Cannot create a factory for '" + lang_1.stringify(t) + "' because its constructor has more than 20 arguments");
};
ReflectionCapabilities.prototype._zipTypesAndAnnotations = function(paramTypes, paramAnnotations) {
var result;
if (typeof paramTypes === "undefined") {
result = new Array(paramAnnotations.length);
} else {
result = new Array(paramTypes.length);
}
for (var i = 0; i < result.length; i++) {
if (typeof paramTypes === "undefined") {
result[i] = [];
} else if (paramTypes[i] != Object) {
result[i] = [ paramTypes[i] ];
} else {
result[i] = [];
}
if (lang_1.isPresent(paramAnnotations) && lang_1.isPresent(paramAnnotations[i])) {
result[i] = result[i].concat(paramAnnotations[i]);
}
}
return result;
};
ReflectionCapabilities.prototype.parameters = function(typeOrFunc) {
if (lang_1.isPresent(typeOrFunc.parameters)) {
return typeOrFunc.parameters;
}
if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
var paramAnnotations = this._reflect.getMetadata("parameters", typeOrFunc);
var paramTypes = this._reflect.getMetadata("design:paramtypes", typeOrFunc);
if (lang_1.isPresent(paramTypes) || lang_1.isPresent(paramAnnotations)) {
return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
}
}
var parameters = new Array(typeOrFunc.length);
parameters.fill(undefined);
return parameters;
};
ReflectionCapabilities.prototype.annotations = function(typeOrFunc) {
if (lang_1.isPresent(typeOrFunc.annotations)) {
var annotations = typeOrFunc.annotations;
if (lang_1.isFunction(annotations) && annotations.annotations) {
annotations = annotations.annotations;
}
return annotations;
}
if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
var annotations = this._reflect.getMetadata("annotations", typeOrFunc);
if (lang_1.isPresent(annotations)) return annotations;
}
return [];
};
ReflectionCapabilities.prototype.propMetadata = function(typeOrFunc) {
if (lang_1.isPresent(typeOrFunc.propMetadata)) {
var propMetadata = typeOrFunc.propMetadata;
if (lang_1.isFunction(propMetadata) && propMetadata.propMetadata) {
propMetadata = propMetadata.propMetadata;
}
return propMetadata;
}
if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
var propMetadata = this._reflect.getMetadata("propMetadata", typeOrFunc);
if (lang_1.isPresent(propMetadata)) return propMetadata;
}
return {};
};
ReflectionCapabilities.prototype.interfaces = function(type) {
throw new exceptions_1.BaseException("JavaScript does not support interfaces");
};
ReflectionCapabilities.prototype.getter = function(name) {
return new Function("o", "return o." + name + ";");
};
ReflectionCapabilities.prototype.setter = function(name) {
return new Function("o", "v", "return o." + name + " = v;");
};
ReflectionCapabilities.prototype.method = function(name) {
var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
return new Function("o", "args", functionBody);
};
ReflectionCapabilities.prototype.importUri = function(type) {
return "./";
};
return ReflectionCapabilities;
}();
exports.ReflectionCapabilities = ReflectionCapabilities;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var forward_ref_1 = __webpack_require__(113);
var Key = function() {
function Key(token, id) {
this.token = token;
this.id = id;
if (lang_1.isBlank(token)) {
throw new exceptions_1.BaseException("Token must be defined!");
}
}
Object.defineProperty(Key.prototype, "displayName", {
get: function() {
return lang_1.stringify(this.token);
},
enumerable: true,
configurable: true
});
Key.get = function(token) {
return _globalKeyRegistry.get(forward_ref_1.resolveForwardRef(token));
};
Object.defineProperty(Key, "numberOfKeys", {
get: function() {
return _globalKeyRegistry.numberOfKeys;
},
enumerable: true,
configurable: true
});
return Key;
}();
exports.Key = Key;
var KeyRegistry = function() {
function KeyRegistry() {
this._allKeys = new Map();
}
KeyRegistry.prototype.get = function(token) {
if (token instanceof Key) return token;
if (this._allKeys.has(token)) {
return this._allKeys.get(token);
}
var newKey = new Key(token, Key.numberOfKeys);
this._allKeys.set(token, newKey);
return newKey;
};
Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
get: function() {
return this._allKeys.size;
},
enumerable: true,
configurable: true
});
return KeyRegistry;
}();
exports.KeyRegistry = KeyRegistry;
var _globalKeyRegistry = new KeyRegistry();
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var collection_1 = __webpack_require__(115);
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
function findFirstClosedCycle(keys) {
var res = [];
for (var i = 0; i < keys.length; ++i) {
if (collection_1.ListWrapper.contains(res, keys[i])) {
res.push(keys[i]);
return res;
} else {
res.push(keys[i]);
}
}
return res;
}
function constructResolvingPath(keys) {
if (keys.length > 1) {
var reversed = findFirstClosedCycle(collection_1.ListWrapper.reversed(keys));
var tokenStrs = reversed.map(function(k) {
return lang_1.stringify(k.token);
});
return " (" + tokenStrs.join(" -> ") + ")";
} else {
return "";
}
}
var AbstractProviderError = function(_super) {
__extends(AbstractProviderError, _super);
function AbstractProviderError(injector, key, constructResolvingMessage) {
_super.call(this, "DI Exception");
this.keys = [ key ];
this.injectors = [ injector ];
this.constructResolvingMessage = constructResolvingMessage;
this.message = this.constructResolvingMessage(this.keys);
}
AbstractProviderError.prototype.addKey = function(injector, key) {
this.injectors.push(injector);
this.keys.push(key);
this.message = this.constructResolvingMessage(this.keys);
};
Object.defineProperty(AbstractProviderError.prototype, "context", {
get: function() {
return this.injectors[this.injectors.length - 1].debugContext();
},
enumerable: true,
configurable: true
});
return AbstractProviderError;
}(exceptions_1.BaseException);
exports.AbstractProviderError = AbstractProviderError;
var NoProviderError = function(_super) {
__extends(NoProviderError, _super);
function NoProviderError(injector, key) {
_super.call(this, injector, key, function(keys) {
var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
return "No provider for " + first + "!" + constructResolvingPath(keys);
});
}
return NoProviderError;
}(AbstractProviderError);
exports.NoProviderError = NoProviderError;
var CyclicDependencyError = function(_super) {
__extends(CyclicDependencyError, _super);
function CyclicDependencyError(injector, key) {
_super.call(this, injector, key, function(keys) {
return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
});
}
return CyclicDependencyError;
}(AbstractProviderError);
exports.CyclicDependencyError = CyclicDependencyError;
var InstantiationError = function(_super) {
__extends(InstantiationError, _super);
function InstantiationError(injector, originalException, originalStack, key) {
_super.call(this, "DI Exception", originalException, originalStack, null);
this.keys = [ key ];
this.injectors = [ injector ];
}
InstantiationError.prototype.addKey = function(injector, key) {
this.injectors.push(injector);
this.keys.push(key);
};
Object.defineProperty(InstantiationError.prototype, "wrapperMessage", {
get: function() {
var first = lang_1.stringify(collection_1.ListWrapper.first(this.keys).token);
return "Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
},
enumerable: true,
configurable: true
});
Object.defineProperty(InstantiationError.prototype, "causeKey", {
get: function() {
return this.keys[0];
},
enumerable: true,
configurable: true
});
Object.defineProperty(InstantiationError.prototype, "context", {
get: function() {
return this.injectors[this.injectors.length - 1].debugContext();
},
enumerable: true,
configurable: true
});
return InstantiationError;
}(exceptions_1.WrappedException);
exports.InstantiationError = InstantiationError;
var InvalidProviderError = function(_super) {
__extends(InvalidProviderError, _super);
function InvalidProviderError(provider) {
_super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " + provider.toString());
}
return InvalidProviderError;
}(exceptions_1.BaseException);
exports.InvalidProviderError = InvalidProviderError;
var NoAnnotationError = function(_super) {
__extends(NoAnnotationError, _super);
function NoAnnotationError(typeOrFunc, params) {
_super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
}
NoAnnotationError._genMessage = function(typeOrFunc, params) {
var signature = [];
for (var i = 0, ii = params.length; i < ii; i++) {
var parameter = params[i];
if (lang_1.isBlank(parameter) || parameter.length == 0) {
signature.push("?");
} else {
signature.push(parameter.map(lang_1.stringify).join(" "));
}
}
return "Cannot resolve all parameters for '" + lang_1.stringify(typeOrFunc) + "'(" + signature.join(", ") + "). " + "Make sure that all the parameters are decorated with Inject or have valid type annotations and that '" + lang_1.stringify(typeOrFunc) + "' is decorated with Injectable.";
};
return NoAnnotationError;
}(exceptions_1.BaseException);
exports.NoAnnotationError = NoAnnotationError;
var OutOfBoundsError = function(_super) {
__extends(OutOfBoundsError, _super);
function OutOfBoundsError(index) {
_super.call(this, "Index " + index + " is out-of-bounds.");
}
return OutOfBoundsError;
}(exceptions_1.BaseException);
exports.OutOfBoundsError = OutOfBoundsError;
var MixingMultiProvidersWithRegularProvidersError = function(_super) {
__extends(MixingMultiProvidersWithRegularProvidersError, _super);
function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
_super.call(this, "Cannot mix multi providers and regular providers, got: " + provider1.toString() + " " + provider2.toString());
}
return MixingMultiProvidersWithRegularProvidersError;
}(exceptions_1.BaseException);
exports.MixingMultiProvidersWithRegularProvidersError = MixingMultiProvidersWithRegularProvidersError;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var OpaqueToken = function() {
function OpaqueToken(_desc) {
this._desc = _desc;
}
OpaqueToken.prototype.toString = function() {
return "Token " + this._desc;
};
OpaqueToken = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", [ String ]) ], OpaqueToken);
return OpaqueToken;
}();
exports.OpaqueToken = OpaqueToken;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var metadata_1 = __webpack_require__(110);
var change_detection_1 = __webpack_require__(127);
var DirectiveMetadata = function(_super) {
__extends(DirectiveMetadata, _super);
function DirectiveMetadata(_a) {
var _b = _a === void 0 ? {} : _a, selector = _b.selector, inputs = _b.inputs, outputs = _b.outputs, properties = _b.properties, events = _b.events, host = _b.host, bindings = _b.bindings, providers = _b.providers, exportAs = _b.exportAs, queries = _b.queries;
_super.call(this);
this.selector = selector;
this._inputs = inputs;
this._properties = properties;
this._outputs = outputs;
this._events = events;
this.host = host;
this.exportAs = exportAs;
this.queries = queries;
this._providers = providers;
this._bindings = bindings;
}
Object.defineProperty(DirectiveMetadata.prototype, "inputs", {
get: function() {
return lang_1.isPresent(this._properties) && this._properties.length > 0 ? this._properties : this._inputs;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DirectiveMetadata.prototype, "properties", {
get: function() {
return this.inputs;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DirectiveMetadata.prototype, "outputs", {
get: function() {
return lang_1.isPresent(this._events) && this._events.length > 0 ? this._events : this._outputs;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DirectiveMetadata.prototype, "events", {
get: function() {
return this.outputs;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DirectiveMetadata.prototype, "providers", {
get: function() {
return lang_1.isPresent(this._bindings) && this._bindings.length > 0 ? this._bindings : this._providers;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DirectiveMetadata.prototype, "bindings", {
get: function() {
return this.providers;
},
enumerable: true,
configurable: true
});
DirectiveMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", [ Object ]) ], DirectiveMetadata);
return DirectiveMetadata;
}(metadata_1.InjectableMetadata);
exports.DirectiveMetadata = DirectiveMetadata;
var ComponentMetadata = function(_super) {
__extends(ComponentMetadata, _super);
function ComponentMetadata(_a) {
var _b = _a === void 0 ? {} : _a, selector = _b.selector, inputs = _b.inputs, outputs = _b.outputs, properties = _b.properties, events = _b.events, host = _b.host, exportAs = _b.exportAs, moduleId = _b.moduleId, bindings = _b.bindings, providers = _b.providers, viewBindings = _b.viewBindings, viewProviders = _b.viewProviders, _c = _b.changeDetection, changeDetection = _c === void 0 ? change_detection_1.ChangeDetectionStrategy.Default : _c, queries = _b.queries, templateUrl = _b.templateUrl, template = _b.template, styleUrls = _b.styleUrls, styles = _b.styles, directives = _b.directives, pipes = _b.pipes, encapsulation = _b.encapsulation;
_super.call(this, {
selector: selector,
inputs: inputs,
outputs: outputs,
properties: properties,
events: events,
host: host,
exportAs: exportAs,
bindings: bindings,
providers: providers,
queries: queries
});
this.changeDetection = changeDetection;
this._viewProviders = viewProviders;
this._viewBindings = viewBindings;
this.templateUrl = templateUrl;
this.template = template;
this.styleUrls = styleUrls;
this.styles = styles;
this.directives = directives;
this.pipes = pipes;
this.encapsulation = encapsulation;
this.moduleId = moduleId;
}
Object.defineProperty(ComponentMetadata.prototype, "viewProviders", {
get: function() {
return lang_1.isPresent(this._viewBindings) && this._viewBindings.length > 0 ? this._viewBindings : this._viewProviders;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentMetadata.prototype, "viewBindings", {
get: function() {
return this.viewProviders;
},
enumerable: true,
configurable: true
});
ComponentMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", [ Object ]) ], ComponentMetadata);
return ComponentMetadata;
}(DirectiveMetadata);
exports.ComponentMetadata = ComponentMetadata;
var PipeMetadata = function(_super) {
__extends(PipeMetadata, _super);
function PipeMetadata(_a) {
var name = _a.name, pure = _a.pure;
_super.call(this);
this.name = name;
this._pure = pure;
}
Object.defineProperty(PipeMetadata.prototype, "pure", {
get: function() {
return lang_1.isPresent(this._pure) ? this._pure : true;
},
enumerable: true,
configurable: true
});
PipeMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", [ Object ]) ], PipeMetadata);
return PipeMetadata;
}(metadata_1.InjectableMetadata);
exports.PipeMetadata = PipeMetadata;
var InputMetadata = function() {
function InputMetadata(bindingPropertyName) {
this.bindingPropertyName = bindingPropertyName;
}
InputMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", [ String ]) ], InputMetadata);
return InputMetadata;
}();
exports.InputMetadata = InputMetadata;
var OutputMetadata = function() {
function OutputMetadata(bindingPropertyName) {
this.bindingPropertyName = bindingPropertyName;
}
OutputMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", [ String ]) ], OutputMetadata);
return OutputMetadata;
}();
exports.OutputMetadata = OutputMetadata;
var HostBindingMetadata = function() {
function HostBindingMetadata(hostPropertyName) {
this.hostPropertyName = hostPropertyName;
}
HostBindingMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", [ String ]) ], HostBindingMetadata);
return HostBindingMetadata;
}();
exports.HostBindingMetadata = HostBindingMetadata;
var HostListenerMetadata = function() {
function HostListenerMetadata(eventName, args) {
this.eventName = eventName;
this.args = args;
}
HostListenerMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", [ String, Array ]) ], HostListenerMetadata);
return HostListenerMetadata;
}();
exports.HostListenerMetadata = HostListenerMetadata;
}, function(module, exports, __webpack_require__) {
"use strict";
var change_detection_1 = __webpack_require__(128);
exports.ChangeDetectionStrategy = change_detection_1.ChangeDetectionStrategy;
exports.ExpressionChangedAfterItHasBeenCheckedException = change_detection_1.ExpressionChangedAfterItHasBeenCheckedException;
exports.ChangeDetectionError = change_detection_1.ChangeDetectionError;
exports.ChangeDetectorRef = change_detection_1.ChangeDetectorRef;
exports.WrappedValue = change_detection_1.WrappedValue;
exports.SimpleChange = change_detection_1.SimpleChange;
exports.IterableDiffers = change_detection_1.IterableDiffers;
exports.KeyValueDiffers = change_detection_1.KeyValueDiffers;
exports.CollectionChangeRecord = change_detection_1.CollectionChangeRecord;
exports.KeyValueChangeRecord = change_detection_1.KeyValueChangeRecord;
}, function(module, exports, __webpack_require__) {
"use strict";
var iterable_differs_1 = __webpack_require__(129);
var default_iterable_differ_1 = __webpack_require__(130);
var keyvalue_differs_1 = __webpack_require__(131);
var default_keyvalue_differ_1 = __webpack_require__(132);
var lang_1 = __webpack_require__(105);
var default_keyvalue_differ_2 = __webpack_require__(132);
exports.DefaultKeyValueDifferFactory = default_keyvalue_differ_2.DefaultKeyValueDifferFactory;
exports.KeyValueChangeRecord = default_keyvalue_differ_2.KeyValueChangeRecord;
var default_iterable_differ_2 = __webpack_require__(130);
exports.DefaultIterableDifferFactory = default_iterable_differ_2.DefaultIterableDifferFactory;
exports.CollectionChangeRecord = default_iterable_differ_2.CollectionChangeRecord;
var ast_1 = __webpack_require__(133);
exports.ASTWithSource = ast_1.ASTWithSource;
exports.AST = ast_1.AST;
exports.AstTransformer = ast_1.AstTransformer;
exports.PropertyRead = ast_1.PropertyRead;
exports.LiteralArray = ast_1.LiteralArray;
exports.ImplicitReceiver = ast_1.ImplicitReceiver;
var lexer_1 = __webpack_require__(134);
exports.Lexer = lexer_1.Lexer;
var parser_1 = __webpack_require__(135);
exports.Parser = parser_1.Parser;
var locals_1 = __webpack_require__(136);
exports.Locals = locals_1.Locals;
var exceptions_1 = __webpack_require__(137);
exports.DehydratedException = exceptions_1.DehydratedException;
exports.ExpressionChangedAfterItHasBeenCheckedException = exceptions_1.ExpressionChangedAfterItHasBeenCheckedException;
exports.ChangeDetectionError = exceptions_1.ChangeDetectionError;
var interfaces_1 = __webpack_require__(138);
exports.ChangeDetectorDefinition = interfaces_1.ChangeDetectorDefinition;
exports.DebugContext = interfaces_1.DebugContext;
exports.ChangeDetectorGenConfig = interfaces_1.ChangeDetectorGenConfig;
var constants_1 = __webpack_require__(139);
exports.ChangeDetectionStrategy = constants_1.ChangeDetectionStrategy;
exports.CHANGE_DETECTION_STRATEGY_VALUES = constants_1.CHANGE_DETECTION_STRATEGY_VALUES;
var proto_change_detector_1 = __webpack_require__(140);
exports.DynamicProtoChangeDetector = proto_change_detector_1.DynamicProtoChangeDetector;
var jit_proto_change_detector_1 = __webpack_require__(175);
exports.JitProtoChangeDetector = jit_proto_change_detector_1.JitProtoChangeDetector;
var binding_record_1 = __webpack_require__(143);
exports.BindingRecord = binding_record_1.BindingRecord;
exports.BindingTarget = binding_record_1.BindingTarget;
var directive_record_1 = __webpack_require__(144);
exports.DirectiveIndex = directive_record_1.DirectiveIndex;
exports.DirectiveRecord = directive_record_1.DirectiveRecord;
var dynamic_change_detector_1 = __webpack_require__(145);
exports.DynamicChangeDetector = dynamic_change_detector_1.DynamicChangeDetector;
var change_detector_ref_1 = __webpack_require__(147);
exports.ChangeDetectorRef = change_detector_ref_1.ChangeDetectorRef;
var iterable_differs_2 = __webpack_require__(129);
exports.IterableDiffers = iterable_differs_2.IterableDiffers;
var keyvalue_differs_2 = __webpack_require__(131);
exports.KeyValueDiffers = keyvalue_differs_2.KeyValueDiffers;
var change_detection_util_1 = __webpack_require__(141);
exports.WrappedValue = change_detection_util_1.WrappedValue;
exports.SimpleChange = change_detection_util_1.SimpleChange;
exports.keyValDiff = lang_1.CONST_EXPR([ lang_1.CONST_EXPR(new default_keyvalue_differ_1.DefaultKeyValueDifferFactory()) ]);
exports.iterableDiff = lang_1.CONST_EXPR([ lang_1.CONST_EXPR(new default_iterable_differ_1.DefaultIterableDifferFactory()) ]);
exports.defaultIterableDiffers = lang_1.CONST_EXPR(new iterable_differs_1.IterableDiffers(exports.iterableDiff));
exports.defaultKeyValueDiffers = lang_1.CONST_EXPR(new keyvalue_differs_1.KeyValueDiffers(exports.keyValDiff));
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(115);
var di_1 = __webpack_require__(109);
var IterableDiffers = function() {
function IterableDiffers(factories) {
this.factories = factories;
}
IterableDiffers.create = function(factories, parent) {
if (lang_1.isPresent(parent)) {
var copied = collection_1.ListWrapper.clone(parent.factories);
factories = factories.concat(copied);
return new IterableDiffers(factories);
} else {
return new IterableDiffers(factories);
}
};
IterableDiffers.extend = function(factories) {
return new di_1.Provider(IterableDiffers, {
useFactory: function(parent) {
if (lang_1.isBlank(parent)) {
throw new exceptions_1.BaseException("Cannot extend IterableDiffers without a parent injector");
}
return IterableDiffers.create(factories, parent);
},
deps: [ [ IterableDiffers, new di_1.SkipSelfMetadata(), new di_1.OptionalMetadata() ] ]
});
};
IterableDiffers.prototype.find = function(iterable) {
var factory = this.factories.find(function(f) {
return f.supports(iterable);
});
if (lang_1.isPresent(factory)) {
return factory;
} else {
throw new exceptions_1.BaseException("Cannot find a differ supporting object '" + iterable + "'");
}
};
IterableDiffers = __decorate([ di_1.Injectable(), lang_1.CONST(), __metadata("design:paramtypes", [ Array ]) ], IterableDiffers);
return IterableDiffers;
}();
exports.IterableDiffers = IterableDiffers;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(115);
var lang_2 = __webpack_require__(105);
var DefaultIterableDifferFactory = function() {
function DefaultIterableDifferFactory() {}
DefaultIterableDifferFactory.prototype.supports = function(obj) {
return collection_1.isListLikeIterable(obj);
};
DefaultIterableDifferFactory.prototype.create = function(cdRef, trackByFn) {
return new DefaultIterableDiffer(trackByFn);
};
DefaultIterableDifferFactory = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", []) ], DefaultIterableDifferFactory);
return DefaultIterableDifferFactory;
}();
exports.DefaultIterableDifferFactory = DefaultIterableDifferFactory;
var trackByIdentity = function(index, item) {
return item;
};
var DefaultIterableDiffer = function() {
function DefaultIterableDiffer(_trackByFn) {
this._trackByFn = _trackByFn;
this._length = null;
this._collection = null;
this._linkedRecords = null;
this._unlinkedRecords = null;
this._previousItHead = null;
this._itHead = null;
this._itTail = null;
this._additionsHead = null;
this._additionsTail = null;
this._movesHead = null;
this._movesTail = null;
this._removalsHead = null;
this._removalsTail = null;
this._identityChangesHead = null;
this._identityChangesTail = null;
this._trackByFn = lang_2.isPresent(this._trackByFn) ? this._trackByFn : trackByIdentity;
}
Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
get: function() {
return this._collection;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
get: function() {
return this._length;
},
enumerable: true,
configurable: true
});
DefaultIterableDiffer.prototype.forEachItem = function(fn) {
var record;
for (record = this._itHead; record !== null; record = record._next) {
fn(record);
}
};
DefaultIterableDiffer.prototype.forEachPreviousItem = function(fn) {
var record;
for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
fn(record);
}
};
DefaultIterableDiffer.prototype.forEachAddedItem = function(fn) {
var record;
for (record = this._additionsHead; record !== null; record = record._nextAdded) {
fn(record);
}
};
DefaultIterableDiffer.prototype.forEachMovedItem = function(fn) {
var record;
for (record = this._movesHead; record !== null; record = record._nextMoved) {
fn(record);
}
};
DefaultIterableDiffer.prototype.forEachRemovedItem = function(fn) {
var record;
for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
fn(record);
}
};
DefaultIterableDiffer.prototype.forEachIdentityChange = function(fn) {
var record;
for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
fn(record);
}
};
DefaultIterableDiffer.prototype.diff = function(collection) {
if (lang_2.isBlank(collection)) collection = [];
if (!collection_1.isListLikeIterable(collection)) {
throw new exceptions_1.BaseException("Error trying to diff '" + collection + "'");
}
if (this.check(collection)) {
return this;
} else {
return null;
}
};
DefaultIterableDiffer.prototype.onDestroy = function() {};
DefaultIterableDiffer.prototype.check = function(collection) {
var _this = this;
this._reset();
var record = this._itHead;
var mayBeDirty = false;
var index;
var item;
var itemTrackBy;
if (lang_2.isArray(collection)) {
if (collection !== this._collection || !collection_1.ListWrapper.isImmutable(collection)) {
var list = collection;
this._length = collection.length;
for (index = 0; index < this._length; index++) {
item = list[index];
itemTrackBy = this._trackByFn(index, item);
if (record === null || !lang_2.looseIdentical(record.trackById, itemTrackBy)) {
record = this._mismatch(record, item, itemTrackBy, index);
mayBeDirty = true;
} else {
if (mayBeDirty) {
record = this._verifyReinsertion(record, item, itemTrackBy, index);
}
if (!lang_2.looseIdentical(record.item, item)) this._addIdentityChange(record, item);
}
record = record._next;
}
this._truncate(record);
}
} else {
index = 0;
collection_1.iterateListLike(collection, function(item) {
itemTrackBy = _this._trackByFn(index, item);
if (record === null || !lang_2.looseIdentical(record.trackById, itemTrackBy)) {
record = _this._mismatch(record, item, itemTrackBy, index);
mayBeDirty = true;
} else {
if (mayBeDirty) {
record = _this._verifyReinsertion(record, item, itemTrackBy, index);
}
if (!lang_2.looseIdentical(record.item, item)) _this._addIdentityChange(record, item);
}
record = record._next;
index++;
});
this._length = index;
this._truncate(record);
}
this._collection = collection;
return this.isDirty;
};
Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
get: function() {
return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
},
enumerable: true,
configurable: true
});
DefaultIterableDiffer.prototype._reset = function() {
if (this.isDirty) {
var record;
var nextRecord;
for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
record._nextPrevious = record._next;
}
for (record = this._additionsHead; record !== null; record = record._nextAdded) {
record.previousIndex = record.currentIndex;
}
this._additionsHead = this._additionsTail = null;
for (record = this._movesHead; record !== null; record = nextRecord) {
record.previousIndex = record.currentIndex;
nextRecord = record._nextMoved;
}
this._movesHead = this._movesTail = null;
this._removalsHead = this._removalsTail = null;
this._identityChangesHead = this._identityChangesTail = null;
}
};
DefaultIterableDiffer.prototype._mismatch = function(record, item, itemTrackBy, index) {
var previousRecord;
if (record === null) {
previousRecord = this._itTail;
} else {
previousRecord = record._prev;
this._remove(record);
}
record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
if (record !== null) {
if (!lang_2.looseIdentical(record.item, item)) this._addIdentityChange(record, item);
this._moveAfter(record, previousRecord, index);
} else {
record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
if (record !== null) {
if (!lang_2.looseIdentical(record.item, item)) this._addIdentityChange(record, item);
this._reinsertAfter(record, previousRecord, index);
} else {
record = this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);
}
}
return record;
};
DefaultIterableDiffer.prototype._verifyReinsertion = function(record, item, itemTrackBy, index) {
var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
if (reinsertRecord !== null) {
record = this._reinsertAfter(reinsertRecord, record._prev, index);
} else if (record.currentIndex != index) {
record.currentIndex = index;
this._addToMoves(record, index);
}
return record;
};
DefaultIterableDiffer.prototype._truncate = function(record) {
while (record !== null) {
var nextRecord = record._next;
this._addToRemovals(this._unlink(record));
record = nextRecord;
}
if (this._unlinkedRecords !== null) {
this._unlinkedRecords.clear();
}
if (this._additionsTail !== null) {
this._additionsTail._nextAdded = null;
}
if (this._movesTail !== null) {
this._movesTail._nextMoved = null;
}
if (this._itTail !== null) {
this._itTail._next = null;
}
if (this._removalsTail !== null) {
this._removalsTail._nextRemoved = null;
}
if (this._identityChangesTail !== null) {
this._identityChangesTail._nextIdentityChange = null;
}
};
DefaultIterableDiffer.prototype._reinsertAfter = function(record, prevRecord, index) {
if (this._unlinkedRecords !== null) {
this._unlinkedRecords.remove(record);
}
var prev = record._prevRemoved;
var next = record._nextRemoved;
if (prev === null) {
this._removalsHead = next;
} else {
prev._nextRemoved = next;
}
if (next === null) {
this._removalsTail = prev;
} else {
next._prevRemoved = prev;
}
this._insertAfter(record, prevRecord, index);
this._addToMoves(record, index);
return record;
};
DefaultIterableDiffer.prototype._moveAfter = function(record, prevRecord, index) {
this._unlink(record);
this._insertAfter(record, prevRecord, index);
this._addToMoves(record, index);
return record;
};
DefaultIterableDiffer.prototype._addAfter = function(record, prevRecord, index) {
this._insertAfter(record, prevRecord, index);
if (this._additionsTail === null) {
this._additionsTail = this._additionsHead = record;
} else {
this._additionsTail = this._additionsTail._nextAdded = record;
}
return record;
};
DefaultIterableDiffer.prototype._insertAfter = function(record, prevRecord, index) {
var next = prevRecord === null ? this._itHead : prevRecord._next;
record._next = next;
record._prev = prevRecord;
if (next === null) {
this._itTail = record;
} else {
next._prev = record;
}
if (prevRecord === null) {
this._itHead = record;
} else {
prevRecord._next = record;
}
if (this._linkedRecords === null) {
this._linkedRecords = new _DuplicateMap();
}
this._linkedRecords.put(record);
record.currentIndex = index;
return record;
};
DefaultIterableDiffer.prototype._remove = function(record) {
return this._addToRemovals(this._unlink(record));
};
DefaultIterableDiffer.prototype._unlink = function(record) {
if (this._linkedRecords !== null) {
this._linkedRecords.remove(record);
}
var prev = record._prev;
var next = record._next;
if (prev === null) {
this._itHead = next;
} else {
prev._next = next;
}
if (next === null) {
this._itTail = prev;
} else {
next._prev = prev;
}
return record;
};
DefaultIterableDiffer.prototype._addToMoves = function(record, toIndex) {
if (record.previousIndex === toIndex) {
return record;
}
if (this._movesTail === null) {
this._movesTail = this._movesHead = record;
} else {
this._movesTail = this._movesTail._nextMoved = record;
}
return record;
};
DefaultIterableDiffer.prototype._addToRemovals = function(record) {
if (this._unlinkedRecords === null) {
this._unlinkedRecords = new _DuplicateMap();
}
this._unlinkedRecords.put(record);
record.currentIndex = null;
record._nextRemoved = null;
if (this._removalsTail === null) {
this._removalsTail = this._removalsHead = record;
record._prevRemoved = null;
} else {
record._prevRemoved = this._removalsTail;
this._removalsTail = this._removalsTail._nextRemoved = record;
}
return record;
};
DefaultIterableDiffer.prototype._addIdentityChange = function(record, item) {
record.item = item;
if (this._identityChangesTail === null) {
this._identityChangesTail = this._identityChangesHead = record;
} else {
this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
}
return record;
};
DefaultIterableDiffer.prototype.toString = function() {
var list = [];
this.forEachItem(function(record) {
return list.push(record);
});
var previous = [];
this.forEachPreviousItem(function(record) {
return previous.push(record);
});
var additions = [];
this.forEachAddedItem(function(record) {
return additions.push(record);
});
var moves = [];
this.forEachMovedItem(function(record) {
return moves.push(record);
});
var removals = [];
this.forEachRemovedItem(function(record) {
return removals.push(record);
});
var identityChanges = [];
this.forEachIdentityChange(function(record) {
return identityChanges.push(record);
});
return "collection: " + list.join(", ") + "\n" + "previous: " + previous.join(", ") + "\n" + "additions: " + additions.join(", ") + "\n" + "moves: " + moves.join(", ") + "\n" + "removals: " + removals.join(", ") + "\n" + "identityChanges: " + identityChanges.join(", ") + "\n";
};
return DefaultIterableDiffer;
}();
exports.DefaultIterableDiffer = DefaultIterableDiffer;
var CollectionChangeRecord = function() {
function CollectionChangeRecord(item, trackById) {
this.item = item;
this.trackById = trackById;
this.currentIndex = null;
this.previousIndex = null;
this._nextPrevious = null;
this._prev = null;
this._next = null;
this._prevDup = null;
this._nextDup = null;
this._prevRemoved = null;
this._nextRemoved = null;
this._nextAdded = null;
this._nextMoved = null;
this._nextIdentityChange = null;
}
CollectionChangeRecord.prototype.toString = function() {
return this.previousIndex === this.currentIndex ? lang_2.stringify(this.item) : lang_2.stringify(this.item) + "[" + lang_2.stringify(this.previousIndex) + "->" + lang_2.stringify(this.currentIndex) + "]";
};
return CollectionChangeRecord;
}();
exports.CollectionChangeRecord = CollectionChangeRecord;
var _DuplicateItemRecordList = function() {
function _DuplicateItemRecordList() {
this._head = null;
this._tail = null;
}
_DuplicateItemRecordList.prototype.add = function(record) {
if (this._head === null) {
this._head = this._tail = record;
record._nextDup = null;
record._prevDup = null;
} else {
this._tail._nextDup = record;
record._prevDup = this._tail;
record._nextDup = null;
this._tail = record;
}
};
_DuplicateItemRecordList.prototype.get = function(trackById, afterIndex) {
var record;
for (record = this._head; record !== null; record = record._nextDup) {
if ((afterIndex === null || afterIndex < record.currentIndex) && lang_2.looseIdentical(record.trackById, trackById)) {
return record;
}
}
return null;
};
_DuplicateItemRecordList.prototype.remove = function(record) {
var prev = record._prevDup;
var next = record._nextDup;
if (prev === null) {
this._head = next;
} else {
prev._nextDup = next;
}
if (next === null) {
this._tail = prev;
} else {
next._prevDup = prev;
}
return this._head === null;
};
return _DuplicateItemRecordList;
}();
var _DuplicateMap = function() {
function _DuplicateMap() {
this.map = new Map();
}
_DuplicateMap.prototype.put = function(record) {
var key = lang_2.getMapKey(record.trackById);
var duplicates = this.map.get(key);
if (!lang_2.isPresent(duplicates)) {
duplicates = new _DuplicateItemRecordList();
this.map.set(key, duplicates);
}
duplicates.add(record);
};
_DuplicateMap.prototype.get = function(trackById, afterIndex) {
if (afterIndex === void 0) {
afterIndex = null;
}
var key = lang_2.getMapKey(trackById);
var recordList = this.map.get(key);
return lang_2.isBlank(recordList) ? null : recordList.get(trackById, afterIndex);
};
_DuplicateMap.prototype.remove = function(record) {
var key = lang_2.getMapKey(record.trackById);
var recordList = this.map.get(key);
if (recordList.remove(record)) {
this.map.delete(key);
}
return record;
};
Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
get: function() {
return this.map.size === 0;
},
enumerable: true,
configurable: true
});
_DuplicateMap.prototype.clear = function() {
this.map.clear();
};
_DuplicateMap.prototype.toString = function() {
return "_DuplicateMap(" + lang_2.stringify(this.map) + ")";
};
return _DuplicateMap;
}();
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(115);
var di_1 = __webpack_require__(109);
var KeyValueDiffers = function() {
function KeyValueDiffers(factories) {
this.factories = factories;
}
KeyValueDiffers.create = function(factories, parent) {
if (lang_1.isPresent(parent)) {
var copied = collection_1.ListWrapper.clone(parent.factories);
factories = factories.concat(copied);
return new KeyValueDiffers(factories);
} else {
return new KeyValueDiffers(factories);
}
};
KeyValueDiffers.extend = function(factories) {
return new di_1.Provider(KeyValueDiffers, {
useFactory: function(parent) {
if (lang_1.isBlank(parent)) {
throw new exceptions_1.BaseException("Cannot extend KeyValueDiffers without a parent injector");
}
return KeyValueDiffers.create(factories, parent);
},
deps: [ [ KeyValueDiffers, new di_1.SkipSelfMetadata(), new di_1.OptionalMetadata() ] ]
});
};
KeyValueDiffers.prototype.find = function(kv) {
var factory = this.factories.find(function(f) {
return f.supports(kv);
});
if (lang_1.isPresent(factory)) {
return factory;
} else {
throw new exceptions_1.BaseException("Cannot find a differ supporting object '" + kv + "'");
}
};
KeyValueDiffers = __decorate([ di_1.Injectable(), lang_1.CONST(), __metadata("design:paramtypes", [ Array ]) ], KeyValueDiffers);
return KeyValueDiffers;
}();
exports.KeyValueDiffers = KeyValueDiffers;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var collection_1 = __webpack_require__(115);
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var DefaultKeyValueDifferFactory = function() {
function DefaultKeyValueDifferFactory() {}
DefaultKeyValueDifferFactory.prototype.supports = function(obj) {
return obj instanceof Map || lang_1.isJsObject(obj);
};
DefaultKeyValueDifferFactory.prototype.create = function(cdRef) {
return new DefaultKeyValueDiffer();
};
DefaultKeyValueDifferFactory = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", []) ], DefaultKeyValueDifferFactory);
return DefaultKeyValueDifferFactory;
}();
exports.DefaultKeyValueDifferFactory = DefaultKeyValueDifferFactory;
var DefaultKeyValueDiffer = function() {
function DefaultKeyValueDiffer() {
this._records = new Map();
this._mapHead = null;
this._previousMapHead = null;
this._changesHead = null;
this._changesTail = null;
this._additionsHead = null;
this._additionsTail = null;
this._removalsHead = null;
this._removalsTail = null;
}
Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
get: function() {
return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
},
enumerable: true,
configurable: true
});
DefaultKeyValueDiffer.prototype.forEachItem = function(fn) {
var record;
for (record = this._mapHead; record !== null; record = record._next) {
fn(record);
}
};
DefaultKeyValueDiffer.prototype.forEachPreviousItem = function(fn) {
var record;
for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
fn(record);
}
};
DefaultKeyValueDiffer.prototype.forEachChangedItem = function(fn) {
var record;
for (record = this._changesHead; record !== null; record = record._nextChanged) {
fn(record);
}
};
DefaultKeyValueDiffer.prototype.forEachAddedItem = function(fn) {
var record;
for (record = this._additionsHead; record !== null; record = record._nextAdded) {
fn(record);
}
};
DefaultKeyValueDiffer.prototype.forEachRemovedItem = function(fn) {
var record;
for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
fn(record);
}
};
DefaultKeyValueDiffer.prototype.diff = function(map) {
if (lang_1.isBlank(map)) map = collection_1.MapWrapper.createFromPairs([]);
if (!(map instanceof Map || lang_1.isJsObject(map))) {
throw new exceptions_1.BaseException("Error trying to diff '" + map + "'");
}
if (this.check(map)) {
return this;
} else {
return null;
}
};
DefaultKeyValueDiffer.prototype.onDestroy = function() {};
DefaultKeyValueDiffer.prototype.check = function(map) {
var _this = this;
this._reset();
var records = this._records;
var oldSeqRecord = this._mapHead;
var lastOldSeqRecord = null;
var lastNewSeqRecord = null;
var seqChanged = false;
this._forEach(map, function(value, key) {
var newSeqRecord;
if (oldSeqRecord !== null && key === oldSeqRecord.key) {
newSeqRecord = oldSeqRecord;
if (!lang_1.looseIdentical(value, oldSeqRecord.currentValue)) {
oldSeqRecord.previousValue = oldSeqRecord.currentValue;
oldSeqRecord.currentValue = value;
_this._addToChanges(oldSeqRecord);
}
} else {
seqChanged = true;
if (oldSeqRecord !== null) {
oldSeqRecord._next = null;
_this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
_this._addToRemovals(oldSeqRecord);
}
if (records.has(key)) {
newSeqRecord = records.get(key);
} else {
newSeqRecord = new KeyValueChangeRecord(key);
records.set(key, newSeqRecord);
newSeqRecord.currentValue = value;
_this._addToAdditions(newSeqRecord);
}
}
if (seqChanged) {
if (_this._isInRemovals(newSeqRecord)) {
_this._removeFromRemovals(newSeqRecord);
}
if (lastNewSeqRecord == null) {
_this._mapHead = newSeqRecord;
} else {
lastNewSeqRecord._next = newSeqRecord;
}
}
lastOldSeqRecord = oldSeqRecord;
lastNewSeqRecord = newSeqRecord;
oldSeqRecord = oldSeqRecord === null ? null : oldSeqRecord._next;
});
this._truncate(lastOldSeqRecord, oldSeqRecord);
return this.isDirty;
};
DefaultKeyValueDiffer.prototype._reset = function() {
if (this.isDirty) {
var record;
for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
record._nextPrevious = record._next;
}
for (record = this._changesHead; record !== null; record = record._nextChanged) {
record.previousValue = record.currentValue;
}
for (record = this._additionsHead; record != null; record = record._nextAdded) {
record.previousValue = record.currentValue;
}
this._changesHead = this._changesTail = null;
this._additionsHead = this._additionsTail = null;
this._removalsHead = this._removalsTail = null;
}
};
DefaultKeyValueDiffer.prototype._truncate = function(lastRecord, record) {
while (record !== null) {
if (lastRecord === null) {
this._mapHead = null;
} else {
lastRecord._next = null;
}
var nextRecord = record._next;
this._addToRemovals(record);
lastRecord = record;
record = nextRecord;
}
for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
rec.previousValue = rec.currentValue;
rec.currentValue = null;
this._records.delete(rec.key);
}
};
DefaultKeyValueDiffer.prototype._isInRemovals = function(record) {
return record === this._removalsHead || record._nextRemoved !== null || record._prevRemoved !== null;
};
DefaultKeyValueDiffer.prototype._addToRemovals = function(record) {
if (this._removalsHead === null) {
this._removalsHead = this._removalsTail = record;
} else {
this._removalsTail._nextRemoved = record;
record._prevRemoved = this._removalsTail;
this._removalsTail = record;
}
};
DefaultKeyValueDiffer.prototype._removeFromSeq = function(prev, record) {
var next = record._next;
if (prev === null) {
this._mapHead = next;
} else {
prev._next = next;
}
};
DefaultKeyValueDiffer.prototype._removeFromRemovals = function(record) {
var prev = record._prevRemoved;
var next = record._nextRemoved;
if (prev === null) {
this._removalsHead = next;
} else {
prev._nextRemoved = next;
}
if (next === null) {
this._removalsTail = prev;
} else {
next._prevRemoved = prev;
}
record._prevRemoved = record._nextRemoved = null;
};
DefaultKeyValueDiffer.prototype._addToAdditions = function(record) {
if (this._additionsHead === null) {
this._additionsHead = this._additionsTail = record;
} else {
this._additionsTail._nextAdded = record;
this._additionsTail = record;
}
};
DefaultKeyValueDiffer.prototype._addToChanges = function(record) {
if (this._changesHead === null) {
this._changesHead = this._changesTail = record;
} else {
this._changesTail._nextChanged = record;
this._changesTail = record;
}
};
DefaultKeyValueDiffer.prototype.toString = function() {
var items = [];
var previous = [];
var changes = [];
var additions = [];
var removals = [];
var record;
for (record = this._mapHead; record !== null; record = record._next) {
items.push(lang_1.stringify(record));
}
for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
previous.push(lang_1.stringify(record));
}
for (record = this._changesHead; record !== null; record = record._nextChanged) {
changes.push(lang_1.stringify(record));
}
for (record = this._additionsHead; record !== null; record = record._nextAdded) {
additions.push(lang_1.stringify(record));
}
for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
removals.push(lang_1.stringify(record));
}
return "map: " + items.join(", ") + "\n" + "previous: " + previous.join(", ") + "\n" + "additions: " + additions.join(", ") + "\n" + "changes: " + changes.join(", ") + "\n" + "removals: " + removals.join(", ") + "\n";
};
DefaultKeyValueDiffer.prototype._forEach = function(obj, fn) {
if (obj instanceof Map) {
obj.forEach(fn);
} else {
collection_1.StringMapWrapper.forEach(obj, fn);
}
};
return DefaultKeyValueDiffer;
}();
exports.DefaultKeyValueDiffer = DefaultKeyValueDiffer;
var KeyValueChangeRecord = function() {
function KeyValueChangeRecord(key) {
this.key = key;
this.previousValue = null;
this.currentValue = null;
this._nextPrevious = null;
this._next = null;
this._nextAdded = null;
this._nextRemoved = null;
this._prevRemoved = null;
this._nextChanged = null;
}
KeyValueChangeRecord.prototype.toString = function() {
return lang_1.looseIdentical(this.previousValue, this.currentValue) ? lang_1.stringify(this.key) : lang_1.stringify(this.key) + "[" + lang_1.stringify(this.previousValue) + "->" + lang_1.stringify(this.currentValue) + "]";
};
return KeyValueChangeRecord;
}();
exports.KeyValueChangeRecord = KeyValueChangeRecord;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var collection_1 = __webpack_require__(115);
var AST = function() {
function AST() {}
AST.prototype.visit = function(visitor) {
return null;
};
AST.prototype.toString = function() {
return "AST";
};
return AST;
}();
exports.AST = AST;
var Quote = function(_super) {
__extends(Quote, _super);
function Quote(prefix, uninterpretedExpression, location) {
_super.call(this);
this.prefix = prefix;
this.uninterpretedExpression = uninterpretedExpression;
this.location = location;
}
Quote.prototype.visit = function(visitor) {
return visitor.visitQuote(this);
};
Quote.prototype.toString = function() {
return "Quote";
};
return Quote;
}(AST);
exports.Quote = Quote;
var EmptyExpr = function(_super) {
__extends(EmptyExpr, _super);
function EmptyExpr() {
_super.apply(this, arguments);
}
EmptyExpr.prototype.visit = function(visitor) {};
return EmptyExpr;
}(AST);
exports.EmptyExpr = EmptyExpr;
var ImplicitReceiver = function(_super) {
__extends(ImplicitReceiver, _super);
function ImplicitReceiver() {
_super.apply(this, arguments);
}
ImplicitReceiver.prototype.visit = function(visitor) {
return visitor.visitImplicitReceiver(this);
};
return ImplicitReceiver;
}(AST);
exports.ImplicitReceiver = ImplicitReceiver;
var Chain = function(_super) {
__extends(Chain, _super);
function Chain(expressions) {
_super.call(this);
this.expressions = expressions;
}
Chain.prototype.visit = function(visitor) {
return visitor.visitChain(this);
};
return Chain;
}(AST);
exports.Chain = Chain;
var Conditional = function(_super) {
__extends(Conditional, _super);
function Conditional(condition, trueExp, falseExp) {
_super.call(this);
this.condition = condition;
this.trueExp = trueExp;
this.falseExp = falseExp;
}
Conditional.prototype.visit = function(visitor) {
return visitor.visitConditional(this);
};
return Conditional;
}(AST);
exports.Conditional = Conditional;
var PropertyRead = function(_super) {
__extends(PropertyRead, _super);
function PropertyRead(receiver, name, getter) {
_super.call(this);
this.receiver = receiver;
this.name = name;
this.getter = getter;
}
PropertyRead.prototype.visit = function(visitor) {
return visitor.visitPropertyRead(this);
};
return PropertyRead;
}(AST);
exports.PropertyRead = PropertyRead;
var PropertyWrite = function(_super) {
__extends(PropertyWrite, _super);
function PropertyWrite(receiver, name, setter, value) {
_super.call(this);
this.receiver = receiver;
this.name = name;
this.setter = setter;
this.value = value;
}
PropertyWrite.prototype.visit = function(visitor) {
return visitor.visitPropertyWrite(this);
};
return PropertyWrite;
}(AST);
exports.PropertyWrite = PropertyWrite;
var SafePropertyRead = function(_super) {
__extends(SafePropertyRead, _super);
function SafePropertyRead(receiver, name, getter) {
_super.call(this);
this.receiver = receiver;
this.name = name;
this.getter = getter;
}
SafePropertyRead.prototype.visit = function(visitor) {
return visitor.visitSafePropertyRead(this);
};
return SafePropertyRead;
}(AST);
exports.SafePropertyRead = SafePropertyRead;
var KeyedRead = function(_super) {
__extends(KeyedRead, _super);
function KeyedRead(obj, key) {
_super.call(this);
this.obj = obj;
this.key = key;
}
KeyedRead.prototype.visit = function(visitor) {
return visitor.visitKeyedRead(this);
};
return KeyedRead;
}(AST);
exports.KeyedRead = KeyedRead;
var KeyedWrite = function(_super) {
__extends(KeyedWrite, _super);
function KeyedWrite(obj, key, value) {
_super.call(this);
this.obj = obj;
this.key = key;
this.value = value;
}
KeyedWrite.prototype.visit = function(visitor) {
return visitor.visitKeyedWrite(this);
};
return KeyedWrite;
}(AST);
exports.KeyedWrite = KeyedWrite;
var BindingPipe = function(_super) {
__extends(BindingPipe, _super);
function BindingPipe(exp, name, args) {
_super.call(this);
this.exp = exp;
this.name = name;
this.args = args;
}
BindingPipe.prototype.visit = function(visitor) {
return visitor.visitPipe(this);
};
return BindingPipe;
}(AST);
exports.BindingPipe = BindingPipe;
var LiteralPrimitive = function(_super) {
__extends(LiteralPrimitive, _super);
function LiteralPrimitive(value) {
_super.call(this);
this.value = value;
}
LiteralPrimitive.prototype.visit = function(visitor) {
return visitor.visitLiteralPrimitive(this);
};
return LiteralPrimitive;
}(AST);
exports.LiteralPrimitive = LiteralPrimitive;
var LiteralArray = function(_super) {
__extends(LiteralArray, _super);
function LiteralArray(expressions) {
_super.call(this);
this.expressions = expressions;
}
LiteralArray.prototype.visit = function(visitor) {
return visitor.visitLiteralArray(this);
};
return LiteralArray;
}(AST);
exports.LiteralArray = LiteralArray;
var LiteralMap = function(_super) {
__extends(LiteralMap, _super);
function LiteralMap(keys, values) {
_super.call(this);
this.keys = keys;
this.values = values;
}
LiteralMap.prototype.visit = function(visitor) {
return visitor.visitLiteralMap(this);
};
return LiteralMap;
}(AST);
exports.LiteralMap = LiteralMap;
var Interpolation = function(_super) {
__extends(Interpolation, _super);
function Interpolation(strings, expressions) {
_super.call(this);
this.strings = strings;
this.expressions = expressions;
}
Interpolation.prototype.visit = function(visitor) {
return visitor.visitInterpolation(this);
};
return Interpolation;
}(AST);
exports.Interpolation = Interpolation;
var Binary = function(_super) {
__extends(Binary, _super);
function Binary(operation, left, right) {
_super.call(this);
this.operation = operation;
this.left = left;
this.right = right;
}
Binary.prototype.visit = function(visitor) {
return visitor.visitBinary(this);
};
return Binary;
}(AST);
exports.Binary = Binary;
var PrefixNot = function(_super) {
__extends(PrefixNot, _super);
function PrefixNot(expression) {
_super.call(this);
this.expression = expression;
}
PrefixNot.prototype.visit = function(visitor) {
return visitor.visitPrefixNot(this);
};
return PrefixNot;
}(AST);
exports.PrefixNot = PrefixNot;
var MethodCall = function(_super) {
__extends(MethodCall, _super);
function MethodCall(receiver, name, fn, args) {
_super.call(this);
this.receiver = receiver;
this.name = name;
this.fn = fn;
this.args = args;
}
MethodCall.prototype.visit = function(visitor) {
return visitor.visitMethodCall(this);
};
return MethodCall;
}(AST);
exports.MethodCall = MethodCall;
var SafeMethodCall = function(_super) {
__extends(SafeMethodCall, _super);
function SafeMethodCall(receiver, name, fn, args) {
_super.call(this);
this.receiver = receiver;
this.name = name;
this.fn = fn;
this.args = args;
}
SafeMethodCall.prototype.visit = function(visitor) {
return visitor.visitSafeMethodCall(this);
};
return SafeMethodCall;
}(AST);
exports.SafeMethodCall = SafeMethodCall;
var FunctionCall = function(_super) {
__extends(FunctionCall, _super);
function FunctionCall(target, args) {
_super.call(this);
this.target = target;
this.args = args;
}
FunctionCall.prototype.visit = function(visitor) {
return visitor.visitFunctionCall(this);
};
return FunctionCall;
}(AST);
exports.FunctionCall = FunctionCall;
var ASTWithSource = function(_super) {
__extends(ASTWithSource, _super);
function ASTWithSource(ast, source, location) {
_super.call(this);
this.ast = ast;
this.source = source;
this.location = location;
}
ASTWithSource.prototype.visit = function(visitor) {
return this.ast.visit(visitor);
};
ASTWithSource.prototype.toString = function() {
return this.source + " in " + this.location;
};
return ASTWithSource;
}(AST);
exports.ASTWithSource = ASTWithSource;
var TemplateBinding = function() {
function TemplateBinding(key, keyIsVar, name, expression) {
this.key = key;
this.keyIsVar = keyIsVar;
this.name = name;
this.expression = expression;
}
return TemplateBinding;
}();
exports.TemplateBinding = TemplateBinding;
var RecursiveAstVisitor = function() {
function RecursiveAstVisitor() {}
RecursiveAstVisitor.prototype.visitBinary = function(ast) {
ast.left.visit(this);
ast.right.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitChain = function(ast) {
return this.visitAll(ast.expressions);
};
RecursiveAstVisitor.prototype.visitConditional = function(ast) {
ast.condition.visit(this);
ast.trueExp.visit(this);
ast.falseExp.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitPipe = function(ast) {
ast.exp.visit(this);
this.visitAll(ast.args);
return null;
};
RecursiveAstVisitor.prototype.visitFunctionCall = function(ast) {
ast.target.visit(this);
this.visitAll(ast.args);
return null;
};
RecursiveAstVisitor.prototype.visitImplicitReceiver = function(ast) {
return null;
};
RecursiveAstVisitor.prototype.visitInterpolation = function(ast) {
return this.visitAll(ast.expressions);
};
RecursiveAstVisitor.prototype.visitKeyedRead = function(ast) {
ast.obj.visit(this);
ast.key.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitKeyedWrite = function(ast) {
ast.obj.visit(this);
ast.key.visit(this);
ast.value.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitLiteralArray = function(ast) {
return this.visitAll(ast.expressions);
};
RecursiveAstVisitor.prototype.visitLiteralMap = function(ast) {
return this.visitAll(ast.values);
};
RecursiveAstVisitor.prototype.visitLiteralPrimitive = function(ast) {
return null;
};
RecursiveAstVisitor.prototype.visitMethodCall = function(ast) {
ast.receiver.visit(this);
return this.visitAll(ast.args);
};
RecursiveAstVisitor.prototype.visitPrefixNot = function(ast) {
ast.expression.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitPropertyRead = function(ast) {
ast.receiver.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitPropertyWrite = function(ast) {
ast.receiver.visit(this);
ast.value.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitSafePropertyRead = function(ast) {
ast.receiver.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitSafeMethodCall = function(ast) {
ast.receiver.visit(this);
return this.visitAll(ast.args);
};
RecursiveAstVisitor.prototype.visitAll = function(asts) {
var _this = this;
asts.forEach(function(ast) {
return ast.visit(_this);
});
return null;
};
RecursiveAstVisitor.prototype.visitQuote = function(ast) {
return null;
};
return RecursiveAstVisitor;
}();
exports.RecursiveAstVisitor = RecursiveAstVisitor;
var AstTransformer = function() {
function AstTransformer() {}
AstTransformer.prototype.visitImplicitReceiver = function(ast) {
return ast;
};
AstTransformer.prototype.visitInterpolation = function(ast) {
return new Interpolation(ast.strings, this.visitAll(ast.expressions));
};
AstTransformer.prototype.visitLiteralPrimitive = function(ast) {
return new LiteralPrimitive(ast.value);
};
AstTransformer.prototype.visitPropertyRead = function(ast) {
return new PropertyRead(ast.receiver.visit(this), ast.name, ast.getter);
};
AstTransformer.prototype.visitPropertyWrite = function(ast) {
return new PropertyWrite(ast.receiver.visit(this), ast.name, ast.setter, ast.value);
};
AstTransformer.prototype.visitSafePropertyRead = function(ast) {
return new SafePropertyRead(ast.receiver.visit(this), ast.name, ast.getter);
};
AstTransformer.prototype.visitMethodCall = function(ast) {
return new MethodCall(ast.receiver.visit(this), ast.name, ast.fn, this.visitAll(ast.args));
};
AstTransformer.prototype.visitSafeMethodCall = function(ast) {
return new SafeMethodCall(ast.receiver.visit(this), ast.name, ast.fn, this.visitAll(ast.args));
};
AstTransformer.prototype.visitFunctionCall = function(ast) {
return new FunctionCall(ast.target.visit(this), this.visitAll(ast.args));
};
AstTransformer.prototype.visitLiteralArray = function(ast) {
return new LiteralArray(this.visitAll(ast.expressions));
};
AstTransformer.prototype.visitLiteralMap = function(ast) {
return new LiteralMap(ast.keys, this.visitAll(ast.values));
};
AstTransformer.prototype.visitBinary = function(ast) {
return new Binary(ast.operation, ast.left.visit(this), ast.right.visit(this));
};
AstTransformer.prototype.visitPrefixNot = function(ast) {
return new PrefixNot(ast.expression.visit(this));
};
AstTransformer.prototype.visitConditional = function(ast) {
return new Conditional(ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
};
AstTransformer.prototype.visitPipe = function(ast) {
return new BindingPipe(ast.exp.visit(this), ast.name, this.visitAll(ast.args));
};
AstTransformer.prototype.visitKeyedRead = function(ast) {
return new KeyedRead(ast.obj.visit(this), ast.key.visit(this));
};
AstTransformer.prototype.visitKeyedWrite = function(ast) {
return new KeyedWrite(ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));
};
AstTransformer.prototype.visitAll = function(asts) {
var res = collection_1.ListWrapper.createFixedSize(asts.length);
for (var i = 0; i < asts.length; ++i) {
res[i] = asts[i].visit(this);
}
return res;
};
AstTransformer.prototype.visitChain = function(ast) {
return new Chain(this.visitAll(ast.expressions));
};
AstTransformer.prototype.visitQuote = function(ast) {
return new Quote(ast.prefix, ast.uninterpretedExpression, ast.location);
};
return AstTransformer;
}();
exports.AstTransformer = AstTransformer;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var decorators_1 = __webpack_require__(111);
var collection_1 = __webpack_require__(115);
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
(function(TokenType) {
TokenType[TokenType["Character"] = 0] = "Character";
TokenType[TokenType["Identifier"] = 1] = "Identifier";
TokenType[TokenType["Keyword"] = 2] = "Keyword";
TokenType[TokenType["String"] = 3] = "String";
TokenType[TokenType["Operator"] = 4] = "Operator";
TokenType[TokenType["Number"] = 5] = "Number";
})(exports.TokenType || (exports.TokenType = {}));
var TokenType = exports.TokenType;
var Lexer = function() {
function Lexer() {}
Lexer.prototype.tokenize = function(text) {
var scanner = new _Scanner(text);
var tokens = [];
var token = scanner.scanToken();
while (token != null) {
tokens.push(token);
token = scanner.scanToken();
}
return tokens;
};
Lexer = __decorate([ decorators_1.Injectable(), __metadata("design:paramtypes", []) ], Lexer);
return Lexer;
}();
exports.Lexer = Lexer;
var Token = function() {
function Token(index, type, numValue, strValue) {
this.index = index;
this.type = type;
this.numValue = numValue;
this.strValue = strValue;
}
Token.prototype.isCharacter = function(code) {
return this.type == TokenType.Character && this.numValue == code;
};
Token.prototype.isNumber = function() {
return this.type == TokenType.Number;
};
Token.prototype.isString = function() {
return this.type == TokenType.String;
};
Token.prototype.isOperator = function(operater) {
return this.type == TokenType.Operator && this.strValue == operater;
};
Token.prototype.isIdentifier = function() {
return this.type == TokenType.Identifier;
};
Token.prototype.isKeyword = function() {
return this.type == TokenType.Keyword;
};
Token.prototype.isKeywordVar = function() {
return this.type == TokenType.Keyword && this.strValue == "var";
};
Token.prototype.isKeywordNull = function() {
return this.type == TokenType.Keyword && this.strValue == "null";
};
Token.prototype.isKeywordUndefined = function() {
return this.type == TokenType.Keyword && this.strValue == "undefined";
};
Token.prototype.isKeywordTrue = function() {
return this.type == TokenType.Keyword && this.strValue == "true";
};
Token.prototype.isKeywordFalse = function() {
return this.type == TokenType.Keyword && this.strValue == "false";
};
Token.prototype.toNumber = function() {
return this.type == TokenType.Number ? this.numValue : -1;
};
Token.prototype.toString = function() {
switch (this.type) {
case TokenType.Character:
case TokenType.Identifier:
case TokenType.Keyword:
case TokenType.Operator:
case TokenType.String:
return this.strValue;

case TokenType.Number:
return this.numValue.toString();

default:
return null;
}
};
return Token;
}();
exports.Token = Token;
function newCharacterToken(index, code) {
return new Token(index, TokenType.Character, code, lang_1.StringWrapper.fromCharCode(code));
}
function newIdentifierToken(index, text) {
return new Token(index, TokenType.Identifier, 0, text);
}
function newKeywordToken(index, text) {
return new Token(index, TokenType.Keyword, 0, text);
}
function newOperatorToken(index, text) {
return new Token(index, TokenType.Operator, 0, text);
}
function newStringToken(index, text) {
return new Token(index, TokenType.String, 0, text);
}
function newNumberToken(index, n) {
return new Token(index, TokenType.Number, n, "");
}
exports.EOF = new Token(-1, TokenType.Character, 0, "");
exports.$EOF = 0;
exports.$TAB = 9;
exports.$LF = 10;
exports.$VTAB = 11;
exports.$FF = 12;
exports.$CR = 13;
exports.$SPACE = 32;
exports.$BANG = 33;
exports.$DQ = 34;
exports.$HASH = 35;
exports.$$ = 36;
exports.$PERCENT = 37;
exports.$AMPERSAND = 38;
exports.$SQ = 39;
exports.$LPAREN = 40;
exports.$RPAREN = 41;
exports.$STAR = 42;
exports.$PLUS = 43;
exports.$COMMA = 44;
exports.$MINUS = 45;
exports.$PERIOD = 46;
exports.$SLASH = 47;
exports.$COLON = 58;
exports.$SEMICOLON = 59;
exports.$LT = 60;
exports.$EQ = 61;
exports.$GT = 62;
exports.$QUESTION = 63;
var $0 = 48;
var $9 = 57;
var $A = 65, $E = 69, $Z = 90;
exports.$LBRACKET = 91;
exports.$BACKSLASH = 92;
exports.$RBRACKET = 93;
var $CARET = 94;
var $_ = 95;
var $a = 97, $e = 101, $f = 102, $n = 110, $r = 114, $t = 116, $u = 117, $v = 118, $z = 122;
exports.$LBRACE = 123;
exports.$BAR = 124;
exports.$RBRACE = 125;
var $NBSP = 160;
var ScannerError = function(_super) {
__extends(ScannerError, _super);
function ScannerError(message) {
_super.call(this);
this.message = message;
}
ScannerError.prototype.toString = function() {
return this.message;
};
return ScannerError;
}(exceptions_1.BaseException);
exports.ScannerError = ScannerError;
var _Scanner = function() {
function _Scanner(input) {
this.input = input;
this.peek = 0;
this.index = -1;
this.length = input.length;
this.advance();
}
_Scanner.prototype.advance = function() {
this.peek = ++this.index >= this.length ? exports.$EOF : lang_1.StringWrapper.charCodeAt(this.input, this.index);
};
_Scanner.prototype.scanToken = function() {
var input = this.input, length = this.length, peek = this.peek, index = this.index;
while (peek <= exports.$SPACE) {
if (++index >= length) {
peek = exports.$EOF;
break;
} else {
peek = lang_1.StringWrapper.charCodeAt(input, index);
}
}
this.peek = peek;
this.index = index;
if (index >= length) {
return null;
}
if (isIdentifierStart(peek)) return this.scanIdentifier();
if (isDigit(peek)) return this.scanNumber(index);
var start = index;
switch (peek) {
case exports.$PERIOD:
this.advance();
return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, exports.$PERIOD);

case exports.$LPAREN:
case exports.$RPAREN:
case exports.$LBRACE:
case exports.$RBRACE:
case exports.$LBRACKET:
case exports.$RBRACKET:
case exports.$COMMA:
case exports.$COLON:
case exports.$SEMICOLON:
return this.scanCharacter(start, peek);

case exports.$SQ:
case exports.$DQ:
return this.scanString();

case exports.$HASH:
case exports.$PLUS:
case exports.$MINUS:
case exports.$STAR:
case exports.$SLASH:
case exports.$PERCENT:
case $CARET:
return this.scanOperator(start, lang_1.StringWrapper.fromCharCode(peek));

case exports.$QUESTION:
return this.scanComplexOperator(start, "?", exports.$PERIOD, ".");

case exports.$LT:
case exports.$GT:
return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), exports.$EQ, "=");

case exports.$BANG:
case exports.$EQ:
return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), exports.$EQ, "=", exports.$EQ, "=");

case exports.$AMPERSAND:
return this.scanComplexOperator(start, "&", exports.$AMPERSAND, "&");

case exports.$BAR:
return this.scanComplexOperator(start, "|", exports.$BAR, "|");

case $NBSP:
while (isWhitespace(this.peek)) this.advance();
return this.scanToken();
}
this.error("Unexpected character [" + lang_1.StringWrapper.fromCharCode(peek) + "]", 0);
return null;
};
_Scanner.prototype.scanCharacter = function(start, code) {
this.advance();
return newCharacterToken(start, code);
};
_Scanner.prototype.scanOperator = function(start, str) {
this.advance();
return newOperatorToken(start, str);
};
_Scanner.prototype.scanComplexOperator = function(start, one, twoCode, two, threeCode, three) {
this.advance();
var str = one;
if (this.peek == twoCode) {
this.advance();
str += two;
}
if (lang_1.isPresent(threeCode) && this.peek == threeCode) {
this.advance();
str += three;
}
return newOperatorToken(start, str);
};
_Scanner.prototype.scanIdentifier = function() {
var start = this.index;
this.advance();
while (isIdentifierPart(this.peek)) this.advance();
var str = this.input.substring(start, this.index);
if (collection_1.SetWrapper.has(KEYWORDS, str)) {
return newKeywordToken(start, str);
} else {
return newIdentifierToken(start, str);
}
};
_Scanner.prototype.scanNumber = function(start) {
var simple = this.index === start;
this.advance();
while (true) {
if (isDigit(this.peek)) {} else if (this.peek == exports.$PERIOD) {
simple = false;
} else if (isExponentStart(this.peek)) {
this.advance();
if (isExponentSign(this.peek)) this.advance();
if (!isDigit(this.peek)) this.error("Invalid exponent", -1);
simple = false;
} else {
break;
}
this.advance();
}
var str = this.input.substring(start, this.index);
var value = simple ? lang_1.NumberWrapper.parseIntAutoRadix(str) : lang_1.NumberWrapper.parseFloat(str);
return newNumberToken(start, value);
};
_Scanner.prototype.scanString = function() {
var start = this.index;
var quote = this.peek;
this.advance();
var buffer;
var marker = this.index;
var input = this.input;
while (this.peek != quote) {
if (this.peek == exports.$BACKSLASH) {
if (buffer == null) buffer = new lang_1.StringJoiner();
buffer.add(input.substring(marker, this.index));
this.advance();
var unescapedCode;
if (this.peek == $u) {
var hex = input.substring(this.index + 1, this.index + 5);
try {
unescapedCode = lang_1.NumberWrapper.parseInt(hex, 16);
} catch (e) {
this.error("Invalid unicode escape [\\u" + hex + "]", 0);
}
for (var i = 0; i < 5; i++) {
this.advance();
}
} else {
unescapedCode = unescape(this.peek);
this.advance();
}
buffer.add(lang_1.StringWrapper.fromCharCode(unescapedCode));
marker = this.index;
} else if (this.peek == exports.$EOF) {
this.error("Unterminated quote", 0);
} else {
this.advance();
}
}
var last = input.substring(marker, this.index);
this.advance();
var unescaped = last;
if (buffer != null) {
buffer.add(last);
unescaped = buffer.toString();
}
return newStringToken(start, unescaped);
};
_Scanner.prototype.error = function(message, offset) {
var position = this.index + offset;
throw new ScannerError("Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
};
return _Scanner;
}();
function isWhitespace(code) {
return code >= exports.$TAB && code <= exports.$SPACE || code == $NBSP;
}
function isIdentifierStart(code) {
return $a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == exports.$$;
}
function isIdentifier(input) {
if (input.length == 0) return false;
var scanner = new _Scanner(input);
if (!isIdentifierStart(scanner.peek)) return false;
scanner.advance();
while (scanner.peek !== exports.$EOF) {
if (!isIdentifierPart(scanner.peek)) return false;
scanner.advance();
}
return true;
}
exports.isIdentifier = isIdentifier;
function isIdentifierPart(code) {
return $a <= code && code <= $z || $A <= code && code <= $Z || $0 <= code && code <= $9 || code == $_ || code == exports.$$;
}
function isDigit(code) {
return $0 <= code && code <= $9;
}
function isExponentStart(code) {
return code == $e || code == $E;
}
function isExponentSign(code) {
return code == exports.$MINUS || code == exports.$PLUS;
}
function unescape(code) {
switch (code) {
case $n:
return exports.$LF;

case $f:
return exports.$FF;

case $r:
return exports.$CR;

case $t:
return exports.$TAB;

case $v:
return exports.$VTAB;

default:
return code;
}
}
var OPERATORS = collection_1.SetWrapper.createFromList([ "+", "-", "*", "/", "%", "^", "=", "==", "!=", "===", "!==", "<", ">", "<=", ">=", "&&", "||", "&", "|", "!", "?", "#", "?." ]);
var KEYWORDS = collection_1.SetWrapper.createFromList([ "var", "null", "undefined", "true", "false", "if", "else" ]);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var decorators_1 = __webpack_require__(111);
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(115);
var lexer_1 = __webpack_require__(134);
var reflection_1 = __webpack_require__(120);
var ast_1 = __webpack_require__(133);
var _implicitReceiver = new ast_1.ImplicitReceiver();
var INTERPOLATION_REGEXP = /\{\{([\s\S]*?)\}\}/g;
var ParseException = function(_super) {
__extends(ParseException, _super);
function ParseException(message, input, errLocation, ctxLocation) {
_super.call(this, "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation);
}
return ParseException;
}(exceptions_1.BaseException);
var Parser = function() {
function Parser(_lexer, providedReflector) {
if (providedReflector === void 0) {
providedReflector = null;
}
this._lexer = _lexer;
this._reflector = lang_1.isPresent(providedReflector) ? providedReflector : reflection_1.reflector;
}
Parser.prototype.parseAction = function(input, location) {
this._checkNoInterpolation(input, location);
var tokens = this._lexer.tokenize(input);
var ast = new _ParseAST(input, location, tokens, this._reflector, true).parseChain();
return new ast_1.ASTWithSource(ast, input, location);
};
Parser.prototype.parseBinding = function(input, location) {
var ast = this._parseBindingAst(input, location);
return new ast_1.ASTWithSource(ast, input, location);
};
Parser.prototype.parseSimpleBinding = function(input, location) {
var ast = this._parseBindingAst(input, location);
if (!SimpleExpressionChecker.check(ast)) {
throw new ParseException("Host binding expression can only contain field access and constants", input, location);
}
return new ast_1.ASTWithSource(ast, input, location);
};
Parser.prototype._parseBindingAst = function(input, location) {
var quote = this._parseQuote(input, location);
if (lang_1.isPresent(quote)) {
return quote;
}
this._checkNoInterpolation(input, location);
var tokens = this._lexer.tokenize(input);
return new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
};
Parser.prototype._parseQuote = function(input, location) {
if (lang_1.isBlank(input)) return null;
var prefixSeparatorIndex = input.indexOf(":");
if (prefixSeparatorIndex == -1) return null;
var prefix = input.substring(0, prefixSeparatorIndex).trim();
if (!lexer_1.isIdentifier(prefix)) return null;
var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
return new ast_1.Quote(prefix, uninterpretedExpression, location);
};
Parser.prototype.parseTemplateBindings = function(input, location) {
var tokens = this._lexer.tokenize(input);
return new _ParseAST(input, location, tokens, this._reflector, false).parseTemplateBindings();
};
Parser.prototype.parseInterpolation = function(input, location) {
var parts = lang_1.StringWrapper.split(input, INTERPOLATION_REGEXP);
if (parts.length <= 1) {
return null;
}
var strings = [];
var expressions = [];
for (var i = 0; i < parts.length; i++) {
var part = parts[i];
if (i % 2 === 0) {
strings.push(part);
} else if (part.trim().length > 0) {
var tokens = this._lexer.tokenize(part);
var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
expressions.push(ast);
} else {
throw new ParseException("Blank expressions are not allowed in interpolated strings", input, "at column " + this._findInterpolationErrorColumn(parts, i) + " in", location);
}
}
return new ast_1.ASTWithSource(new ast_1.Interpolation(strings, expressions), input, location);
};
Parser.prototype.wrapLiteralPrimitive = function(input, location) {
return new ast_1.ASTWithSource(new ast_1.LiteralPrimitive(input), input, location);
};
Parser.prototype._checkNoInterpolation = function(input, location) {
var parts = lang_1.StringWrapper.split(input, INTERPOLATION_REGEXP);
if (parts.length > 1) {
throw new ParseException("Got interpolation ({{}}) where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1) + " in", location);
}
};
Parser.prototype._findInterpolationErrorColumn = function(parts, partInErrIdx) {
var errLocation = "";
for (var j = 0; j < partInErrIdx; j++) {
errLocation += j % 2 === 0 ? parts[j] : "{{" + parts[j] + "}}";
}
return errLocation.length;
};
Parser = __decorate([ decorators_1.Injectable(), __metadata("design:paramtypes", [ lexer_1.Lexer, reflection_1.Reflector ]) ], Parser);
return Parser;
}();
exports.Parser = Parser;
var _ParseAST = function() {
function _ParseAST(input, location, tokens, reflector, parseAction) {
this.input = input;
this.location = location;
this.tokens = tokens;
this.reflector = reflector;
this.parseAction = parseAction;
this.index = 0;
}
_ParseAST.prototype.peek = function(offset) {
var i = this.index + offset;
return i < this.tokens.length ? this.tokens[i] : lexer_1.EOF;
};
Object.defineProperty(_ParseAST.prototype, "next", {
get: function() {
return this.peek(0);
},
enumerable: true,
configurable: true
});
Object.defineProperty(_ParseAST.prototype, "inputIndex", {
get: function() {
return this.index < this.tokens.length ? this.next.index : this.input.length;
},
enumerable: true,
configurable: true
});
_ParseAST.prototype.advance = function() {
this.index++;
};
_ParseAST.prototype.optionalCharacter = function(code) {
if (this.next.isCharacter(code)) {
this.advance();
return true;
} else {
return false;
}
};
_ParseAST.prototype.optionalKeywordVar = function() {
if (this.peekKeywordVar()) {
this.advance();
return true;
} else {
return false;
}
};
_ParseAST.prototype.peekKeywordVar = function() {
return this.next.isKeywordVar() || this.next.isOperator("#");
};
_ParseAST.prototype.expectCharacter = function(code) {
if (this.optionalCharacter(code)) return;
this.error("Missing expected " + lang_1.StringWrapper.fromCharCode(code));
};
_ParseAST.prototype.optionalOperator = function(op) {
if (this.next.isOperator(op)) {
this.advance();
return true;
} else {
return false;
}
};
_ParseAST.prototype.expectOperator = function(operator) {
if (this.optionalOperator(operator)) return;
this.error("Missing expected operator " + operator);
};
_ParseAST.prototype.expectIdentifierOrKeyword = function() {
var n = this.next;
if (!n.isIdentifier() && !n.isKeyword()) {
this.error("Unexpected token " + n + ", expected identifier or keyword");
}
this.advance();
return n.toString();
};
_ParseAST.prototype.expectIdentifierOrKeywordOrString = function() {
var n = this.next;
if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
}
this.advance();
return n.toString();
};
_ParseAST.prototype.parseChain = function() {
var exprs = [];
while (this.index < this.tokens.length) {
var expr = this.parsePipe();
exprs.push(expr);
if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
if (!this.parseAction) {
this.error("Binding expression cannot contain chained expression");
}
while (this.optionalCharacter(lexer_1.$SEMICOLON)) {}
} else if (this.index < this.tokens.length) {
this.error("Unexpected token '" + this.next + "'");
}
}
if (exprs.length == 0) return new ast_1.EmptyExpr();
if (exprs.length == 1) return exprs[0];
return new ast_1.Chain(exprs);
};
_ParseAST.prototype.parsePipe = function() {
var result = this.parseExpression();
if (this.optionalOperator("|")) {
if (this.parseAction) {
this.error("Cannot have a pipe in an action expression");
}
do {
var name = this.expectIdentifierOrKeyword();
var args = [];
while (this.optionalCharacter(lexer_1.$COLON)) {
args.push(this.parseExpression());
}
result = new ast_1.BindingPipe(result, name, args);
} while (this.optionalOperator("|"));
}
return result;
};
_ParseAST.prototype.parseExpression = function() {
return this.parseConditional();
};
_ParseAST.prototype.parseConditional = function() {
var start = this.inputIndex;
var result = this.parseLogicalOr();
if (this.optionalOperator("?")) {
var yes = this.parsePipe();
if (!this.optionalCharacter(lexer_1.$COLON)) {
var end = this.inputIndex;
var expression = this.input.substring(start, end);
this.error("Conditional expression " + expression + " requires all 3 expressions");
}
var no = this.parsePipe();
return new ast_1.Conditional(result, yes, no);
} else {
return result;
}
};
_ParseAST.prototype.parseLogicalOr = function() {
var result = this.parseLogicalAnd();
while (this.optionalOperator("||")) {
result = new ast_1.Binary("||", result, this.parseLogicalAnd());
}
return result;
};
_ParseAST.prototype.parseLogicalAnd = function() {
var result = this.parseEquality();
while (this.optionalOperator("&&")) {
result = new ast_1.Binary("&&", result, this.parseEquality());
}
return result;
};
_ParseAST.prototype.parseEquality = function() {
var result = this.parseRelational();
while (true) {
if (this.optionalOperator("==")) {
result = new ast_1.Binary("==", result, this.parseRelational());
} else if (this.optionalOperator("===")) {
result = new ast_1.Binary("===", result, this.parseRelational());
} else if (this.optionalOperator("!=")) {
result = new ast_1.Binary("!=", result, this.parseRelational());
} else if (this.optionalOperator("!==")) {
result = new ast_1.Binary("!==", result, this.parseRelational());
} else {
return result;
}
}
};
_ParseAST.prototype.parseRelational = function() {
var result = this.parseAdditive();
while (true) {
if (this.optionalOperator("<")) {
result = new ast_1.Binary("<", result, this.parseAdditive());
} else if (this.optionalOperator(">")) {
result = new ast_1.Binary(">", result, this.parseAdditive());
} else if (this.optionalOperator("<=")) {
result = new ast_1.Binary("<=", result, this.parseAdditive());
} else if (this.optionalOperator(">=")) {
result = new ast_1.Binary(">=", result, this.parseAdditive());
} else {
return result;
}
}
};
_ParseAST.prototype.parseAdditive = function() {
var result = this.parseMultiplicative();
while (true) {
if (this.optionalOperator("+")) {
result = new ast_1.Binary("+", result, this.parseMultiplicative());
} else if (this.optionalOperator("-")) {
result = new ast_1.Binary("-", result, this.parseMultiplicative());
} else {
return result;
}
}
};
_ParseAST.prototype.parseMultiplicative = function() {
var result = this.parsePrefix();
while (true) {
if (this.optionalOperator("*")) {
result = new ast_1.Binary("*", result, this.parsePrefix());
} else if (this.optionalOperator("%")) {
result = new ast_1.Binary("%", result, this.parsePrefix());
} else if (this.optionalOperator("/")) {
result = new ast_1.Binary("/", result, this.parsePrefix());
} else {
return result;
}
}
};
_ParseAST.prototype.parsePrefix = function() {
if (this.optionalOperator("+")) {
return this.parsePrefix();
} else if (this.optionalOperator("-")) {
return new ast_1.Binary("-", new ast_1.LiteralPrimitive(0), this.parsePrefix());
} else if (this.optionalOperator("!")) {
return new ast_1.PrefixNot(this.parsePrefix());
} else {
return this.parseCallChain();
}
};
_ParseAST.prototype.parseCallChain = function() {
var result = this.parsePrimary();
while (true) {
if (this.optionalCharacter(lexer_1.$PERIOD)) {
result = this.parseAccessMemberOrMethodCall(result, false);
} else if (this.optionalOperator("?.")) {
result = this.parseAccessMemberOrMethodCall(result, true);
} else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
var key = this.parsePipe();
this.expectCharacter(lexer_1.$RBRACKET);
if (this.optionalOperator("=")) {
var value = this.parseConditional();
result = new ast_1.KeyedWrite(result, key, value);
} else {
result = new ast_1.KeyedRead(result, key);
}
} else if (this.optionalCharacter(lexer_1.$LPAREN)) {
var args = this.parseCallArguments();
this.expectCharacter(lexer_1.$RPAREN);
result = new ast_1.FunctionCall(result, args);
} else {
return result;
}
}
};
_ParseAST.prototype.parsePrimary = function() {
if (this.optionalCharacter(lexer_1.$LPAREN)) {
var result = this.parsePipe();
this.expectCharacter(lexer_1.$RPAREN);
return result;
} else if (this.next.isKeywordNull() || this.next.isKeywordUndefined()) {
this.advance();
return new ast_1.LiteralPrimitive(null);
} else if (this.next.isKeywordTrue()) {
this.advance();
return new ast_1.LiteralPrimitive(true);
} else if (this.next.isKeywordFalse()) {
this.advance();
return new ast_1.LiteralPrimitive(false);
} else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
var elements = this.parseExpressionList(lexer_1.$RBRACKET);
this.expectCharacter(lexer_1.$RBRACKET);
return new ast_1.LiteralArray(elements);
} else if (this.next.isCharacter(lexer_1.$LBRACE)) {
return this.parseLiteralMap();
} else if (this.next.isIdentifier()) {
return this.parseAccessMemberOrMethodCall(_implicitReceiver, false);
} else if (this.next.isNumber()) {
var value = this.next.toNumber();
this.advance();
return new ast_1.LiteralPrimitive(value);
} else if (this.next.isString()) {
var literalValue = this.next.toString();
this.advance();
return new ast_1.LiteralPrimitive(literalValue);
} else if (this.index >= this.tokens.length) {
this.error("Unexpected end of expression: " + this.input);
} else {
this.error("Unexpected token " + this.next);
}
throw new exceptions_1.BaseException("Fell through all cases in parsePrimary");
};
_ParseAST.prototype.parseExpressionList = function(terminator) {
var result = [];
if (!this.next.isCharacter(terminator)) {
do {
result.push(this.parsePipe());
} while (this.optionalCharacter(lexer_1.$COMMA));
}
return result;
};
_ParseAST.prototype.parseLiteralMap = function() {
var keys = [];
var values = [];
this.expectCharacter(lexer_1.$LBRACE);
if (!this.optionalCharacter(lexer_1.$RBRACE)) {
do {
var key = this.expectIdentifierOrKeywordOrString();
keys.push(key);
this.expectCharacter(lexer_1.$COLON);
values.push(this.parsePipe());
} while (this.optionalCharacter(lexer_1.$COMMA));
this.expectCharacter(lexer_1.$RBRACE);
}
return new ast_1.LiteralMap(keys, values);
};
_ParseAST.prototype.parseAccessMemberOrMethodCall = function(receiver, isSafe) {
if (isSafe === void 0) {
isSafe = false;
}
var id = this.expectIdentifierOrKeyword();
if (this.optionalCharacter(lexer_1.$LPAREN)) {
var args = this.parseCallArguments();
this.expectCharacter(lexer_1.$RPAREN);
var fn = this.reflector.method(id);
return isSafe ? new ast_1.SafeMethodCall(receiver, id, fn, args) : new ast_1.MethodCall(receiver, id, fn, args);
} else {
if (isSafe) {
if (this.optionalOperator("=")) {
this.error("The '?.' operator cannot be used in the assignment");
} else {
return new ast_1.SafePropertyRead(receiver, id, this.reflector.getter(id));
}
} else {
if (this.optionalOperator("=")) {
if (!this.parseAction) {
this.error("Bindings cannot contain assignments");
}
var value = this.parseConditional();
return new ast_1.PropertyWrite(receiver, id, this.reflector.setter(id), value);
} else {
return new ast_1.PropertyRead(receiver, id, this.reflector.getter(id));
}
}
}
return null;
};
_ParseAST.prototype.parseCallArguments = function() {
if (this.next.isCharacter(lexer_1.$RPAREN)) return [];
var positionals = [];
do {
positionals.push(this.parsePipe());
} while (this.optionalCharacter(lexer_1.$COMMA));
return positionals;
};
_ParseAST.prototype.parseBlockContent = function() {
if (!this.parseAction) {
this.error("Binding expression cannot contain chained expression");
}
var exprs = [];
while (this.index < this.tokens.length && !this.next.isCharacter(lexer_1.$RBRACE)) {
var expr = this.parseExpression();
exprs.push(expr);
if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
while (this.optionalCharacter(lexer_1.$SEMICOLON)) {}
}
}
if (exprs.length == 0) return new ast_1.EmptyExpr();
if (exprs.length == 1) return exprs[0];
return new ast_1.Chain(exprs);
};
_ParseAST.prototype.expectTemplateBindingKey = function() {
var result = "";
var operatorFound = false;
do {
result += this.expectIdentifierOrKeywordOrString();
operatorFound = this.optionalOperator("-");
if (operatorFound) {
result += "-";
}
} while (operatorFound);
return result.toString();
};
_ParseAST.prototype.parseTemplateBindings = function() {
var bindings = [];
var prefix = null;
while (this.index < this.tokens.length) {
var keyIsVar = this.optionalKeywordVar();
var key = this.expectTemplateBindingKey();
if (!keyIsVar) {
if (prefix == null) {
prefix = key;
} else {
key = prefix + key[0].toUpperCase() + key.substring(1);
}
}
this.optionalCharacter(lexer_1.$COLON);
var name = null;
var expression = null;
if (keyIsVar) {
if (this.optionalOperator("=")) {
name = this.expectTemplateBindingKey();
} else {
name = "$implicit";
}
} else if (this.next !== lexer_1.EOF && !this.peekKeywordVar()) {
var start = this.inputIndex;
var ast = this.parsePipe();
var source = this.input.substring(start, this.inputIndex);
expression = new ast_1.ASTWithSource(ast, source, this.location);
}
bindings.push(new ast_1.TemplateBinding(key, keyIsVar, name, expression));
if (!this.optionalCharacter(lexer_1.$SEMICOLON)) {
this.optionalCharacter(lexer_1.$COMMA);
}
}
return bindings;
};
_ParseAST.prototype.error = function(message, index) {
if (index === void 0) {
index = null;
}
if (lang_1.isBlank(index)) index = this.index;
var location = index < this.tokens.length ? "at column " + (this.tokens[index].index + 1) + " in" : "at the end of the expression";
throw new ParseException(message, this.input, location, this.location);
};
return _ParseAST;
}();
exports._ParseAST = _ParseAST;
var SimpleExpressionChecker = function() {
function SimpleExpressionChecker() {
this.simple = true;
}
SimpleExpressionChecker.check = function(ast) {
var s = new SimpleExpressionChecker();
ast.visit(s);
return s.simple;
};
SimpleExpressionChecker.prototype.visitImplicitReceiver = function(ast) {};
SimpleExpressionChecker.prototype.visitInterpolation = function(ast) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitLiteralPrimitive = function(ast) {};
SimpleExpressionChecker.prototype.visitPropertyRead = function(ast) {};
SimpleExpressionChecker.prototype.visitPropertyWrite = function(ast) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitSafePropertyRead = function(ast) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitMethodCall = function(ast) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitSafeMethodCall = function(ast) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitFunctionCall = function(ast) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitLiteralArray = function(ast) {
this.visitAll(ast.expressions);
};
SimpleExpressionChecker.prototype.visitLiteralMap = function(ast) {
this.visitAll(ast.values);
};
SimpleExpressionChecker.prototype.visitBinary = function(ast) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitPrefixNot = function(ast) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitConditional = function(ast) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitPipe = function(ast) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitKeyedRead = function(ast) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitKeyedWrite = function(ast) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitAll = function(asts) {
var res = collection_1.ListWrapper.createFixedSize(asts.length);
for (var i = 0; i < asts.length; ++i) {
res[i] = asts[i].visit(this);
}
return res;
};
SimpleExpressionChecker.prototype.visitChain = function(ast) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitQuote = function(ast) {
this.simple = false;
};
return SimpleExpressionChecker;
}();
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(115);
var Locals = function() {
function Locals(parent, current) {
this.parent = parent;
this.current = current;
}
Locals.prototype.contains = function(name) {
if (this.current.has(name)) {
return true;
}
if (lang_1.isPresent(this.parent)) {
return this.parent.contains(name);
}
return false;
};
Locals.prototype.get = function(name) {
if (this.current.has(name)) {
return this.current.get(name);
}
if (lang_1.isPresent(this.parent)) {
return this.parent.get(name);
}
throw new exceptions_1.BaseException("Cannot find '" + name + "'");
};
Locals.prototype.set = function(name, value) {
if (this.current.has(name)) {
this.current.set(name, value);
} else {
throw new exceptions_1.BaseException("Setting of new keys post-construction is not supported. Key: " + name + ".");
}
};
Locals.prototype.clearLocalValues = function() {
collection_1.MapWrapper.clearValues(this.current);
};
return Locals;
}();
exports.Locals = Locals;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var exceptions_1 = __webpack_require__(117);
var ExpressionChangedAfterItHasBeenCheckedException = function(_super) {
__extends(ExpressionChangedAfterItHasBeenCheckedException, _super);
function ExpressionChangedAfterItHasBeenCheckedException(exp, oldValue, currValue, context) {
_super.call(this, "Expression '" + exp + "' has changed after it was checked. " + ("Previous value: '" + oldValue + "'. Current value: '" + currValue + "'"));
}
return ExpressionChangedAfterItHasBeenCheckedException;
}(exceptions_1.BaseException);
exports.ExpressionChangedAfterItHasBeenCheckedException = ExpressionChangedAfterItHasBeenCheckedException;
var ChangeDetectionError = function(_super) {
__extends(ChangeDetectionError, _super);
function ChangeDetectionError(exp, originalException, originalStack, context) {
_super.call(this, originalException + " in [" + exp + "]", originalException, originalStack, context);
this.location = exp;
}
return ChangeDetectionError;
}(exceptions_1.WrappedException);
exports.ChangeDetectionError = ChangeDetectionError;
var DehydratedException = function(_super) {
__extends(DehydratedException, _super);
function DehydratedException(details) {
_super.call(this, "Attempt to use a dehydrated detector: " + details);
}
return DehydratedException;
}(exceptions_1.BaseException);
exports.DehydratedException = DehydratedException;
var EventEvaluationError = function(_super) {
__extends(EventEvaluationError, _super);
function EventEvaluationError(eventName, originalException, originalStack, context) {
_super.call(this, 'Error during evaluation of "' + eventName + '"', originalException, originalStack, context);
}
return EventEvaluationError;
}(exceptions_1.WrappedException);
exports.EventEvaluationError = EventEvaluationError;
var EventEvaluationErrorContext = function() {
function EventEvaluationErrorContext(element, componentElement, context, locals, injector) {
this.element = element;
this.componentElement = componentElement;
this.context = context;
this.locals = locals;
this.injector = injector;
}
return EventEvaluationErrorContext;
}();
exports.EventEvaluationErrorContext = EventEvaluationErrorContext;
}, function(module, exports) {
"use strict";
var DebugContext = function() {
function DebugContext(element, componentElement, directive, context, locals, injector) {
this.element = element;
this.componentElement = componentElement;
this.directive = directive;
this.context = context;
this.locals = locals;
this.injector = injector;
}
return DebugContext;
}();
exports.DebugContext = DebugContext;
var ChangeDetectorGenConfig = function() {
function ChangeDetectorGenConfig(genDebugInfo, logBindingUpdate, useJit) {
this.genDebugInfo = genDebugInfo;
this.logBindingUpdate = logBindingUpdate;
this.useJit = useJit;
}
return ChangeDetectorGenConfig;
}();
exports.ChangeDetectorGenConfig = ChangeDetectorGenConfig;
var ChangeDetectorDefinition = function() {
function ChangeDetectorDefinition(id, strategy, variableNames, bindingRecords, eventRecords, directiveRecords, genConfig) {
this.id = id;
this.strategy = strategy;
this.variableNames = variableNames;
this.bindingRecords = bindingRecords;
this.eventRecords = eventRecords;
this.directiveRecords = directiveRecords;
this.genConfig = genConfig;
}
return ChangeDetectorDefinition;
}();
exports.ChangeDetectorDefinition = ChangeDetectorDefinition;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
(function(ChangeDetectorState) {
ChangeDetectorState[ChangeDetectorState["NeverChecked"] = 0] = "NeverChecked";
ChangeDetectorState[ChangeDetectorState["CheckedBefore"] = 1] = "CheckedBefore";
ChangeDetectorState[ChangeDetectorState["Errored"] = 2] = "Errored";
})(exports.ChangeDetectorState || (exports.ChangeDetectorState = {}));
var ChangeDetectorState = exports.ChangeDetectorState;
(function(ChangeDetectionStrategy) {
ChangeDetectionStrategy[ChangeDetectionStrategy["CheckOnce"] = 0] = "CheckOnce";
ChangeDetectionStrategy[ChangeDetectionStrategy["Checked"] = 1] = "Checked";
ChangeDetectionStrategy[ChangeDetectionStrategy["CheckAlways"] = 2] = "CheckAlways";
ChangeDetectionStrategy[ChangeDetectionStrategy["Detached"] = 3] = "Detached";
ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 4] = "OnPush";
ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 5] = "Default";
})(exports.ChangeDetectionStrategy || (exports.ChangeDetectionStrategy = {}));
var ChangeDetectionStrategy = exports.ChangeDetectionStrategy;
exports.CHANGE_DETECTION_STRATEGY_VALUES = [ ChangeDetectionStrategy.CheckOnce, ChangeDetectionStrategy.Checked, ChangeDetectionStrategy.CheckAlways, ChangeDetectionStrategy.Detached, ChangeDetectionStrategy.OnPush, ChangeDetectionStrategy.Default ];
exports.CHANGE_DETECTOR_STATE_VALUES = [ ChangeDetectorState.NeverChecked, ChangeDetectorState.CheckedBefore, ChangeDetectorState.Errored ];
function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
return lang_1.isBlank(changeDetectionStrategy) || changeDetectionStrategy === ChangeDetectionStrategy.Default;
}
exports.isDefaultChangeDetectionStrategy = isDefaultChangeDetectionStrategy;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(115);
var ast_1 = __webpack_require__(133);
var change_detection_util_1 = __webpack_require__(141);
var dynamic_change_detector_1 = __webpack_require__(145);
var directive_record_1 = __webpack_require__(144);
var event_binding_1 = __webpack_require__(173);
var coalesce_1 = __webpack_require__(174);
var proto_record_1 = __webpack_require__(172);
var DynamicProtoChangeDetector = function() {
function DynamicProtoChangeDetector(_definition) {
this._definition = _definition;
this._propertyBindingRecords = createPropertyRecords(_definition);
this._eventBindingRecords = createEventRecords(_definition);
this._propertyBindingTargets = this._definition.bindingRecords.map(function(b) {
return b.target;
});
this._directiveIndices = this._definition.directiveRecords.map(function(d) {
return d.directiveIndex;
});
}
DynamicProtoChangeDetector.prototype.instantiate = function() {
return new dynamic_change_detector_1.DynamicChangeDetector(this._definition.id, this._propertyBindingRecords.length, this._propertyBindingTargets, this._directiveIndices, this._definition.strategy, this._propertyBindingRecords, this._eventBindingRecords, this._definition.directiveRecords, this._definition.genConfig);
};
return DynamicProtoChangeDetector;
}();
exports.DynamicProtoChangeDetector = DynamicProtoChangeDetector;
function createPropertyRecords(definition) {
var recordBuilder = new ProtoRecordBuilder();
collection_1.ListWrapper.forEachWithIndex(definition.bindingRecords, function(b, index) {
return recordBuilder.add(b, definition.variableNames, index);
});
return coalesce_1.coalesce(recordBuilder.records);
}
exports.createPropertyRecords = createPropertyRecords;
function createEventRecords(definition) {
var varNames = collection_1.ListWrapper.concat([ "$event" ], definition.variableNames);
return definition.eventRecords.map(function(er) {
var records = _ConvertAstIntoProtoRecords.create(er, varNames);
var dirIndex = er.implicitReceiver instanceof directive_record_1.DirectiveIndex ? er.implicitReceiver : null;
return new event_binding_1.EventBinding(er.target.name, er.target.elementIndex, dirIndex, records);
});
}
exports.createEventRecords = createEventRecords;
var ProtoRecordBuilder = function() {
function ProtoRecordBuilder() {
this.records = [];
}
ProtoRecordBuilder.prototype.add = function(b, variableNames, bindingIndex) {
var oldLast = collection_1.ListWrapper.last(this.records);
if (lang_1.isPresent(oldLast) && oldLast.bindingRecord.directiveRecord == b.directiveRecord) {
oldLast.lastInDirective = false;
}
var numberOfRecordsBefore = this.records.length;
this._appendRecords(b, variableNames, bindingIndex);
var newLast = collection_1.ListWrapper.last(this.records);
if (lang_1.isPresent(newLast) && newLast !== oldLast) {
newLast.lastInBinding = true;
newLast.lastInDirective = true;
this._setArgumentToPureFunction(numberOfRecordsBefore);
}
};
ProtoRecordBuilder.prototype._setArgumentToPureFunction = function(startIndex) {
var _this = this;
for (var i = startIndex; i < this.records.length; ++i) {
var rec = this.records[i];
if (rec.isPureFunction()) {
rec.args.forEach(function(recordIndex) {
return _this.records[recordIndex - 1].argumentToPureFunction = true;
});
}
if (rec.mode === proto_record_1.RecordType.Pipe) {
rec.args.forEach(function(recordIndex) {
return _this.records[recordIndex - 1].argumentToPureFunction = true;
});
this.records[rec.contextIndex - 1].argumentToPureFunction = true;
}
}
};
ProtoRecordBuilder.prototype._appendRecords = function(b, variableNames, bindingIndex) {
if (b.isDirectiveLifecycle()) {
this.records.push(new proto_record_1.ProtoRecord(proto_record_1.RecordType.DirectiveLifecycle, b.lifecycleEvent, null, [], [], -1, null, this.records.length + 1, b, false, false, false, false, null));
} else {
_ConvertAstIntoProtoRecords.append(this.records, b, variableNames, bindingIndex);
}
};
return ProtoRecordBuilder;
}();
exports.ProtoRecordBuilder = ProtoRecordBuilder;
var _ConvertAstIntoProtoRecords = function() {
function _ConvertAstIntoProtoRecords(_records, _bindingRecord, _variableNames, _bindingIndex) {
this._records = _records;
this._bindingRecord = _bindingRecord;
this._variableNames = _variableNames;
this._bindingIndex = _bindingIndex;
}
_ConvertAstIntoProtoRecords.append = function(records, b, variableNames, bindingIndex) {
var c = new _ConvertAstIntoProtoRecords(records, b, variableNames, bindingIndex);
b.ast.visit(c);
};
_ConvertAstIntoProtoRecords.create = function(b, variableNames) {
var rec = [];
_ConvertAstIntoProtoRecords.append(rec, b, variableNames, null);
rec[rec.length - 1].lastInBinding = true;
return rec;
};
_ConvertAstIntoProtoRecords.prototype.visitImplicitReceiver = function(ast) {
return this._bindingRecord.implicitReceiver;
};
_ConvertAstIntoProtoRecords.prototype.visitInterpolation = function(ast) {
var args = this._visitAll(ast.expressions);
return this._addRecord(proto_record_1.RecordType.Interpolate, "interpolate", _interpolationFn(ast.strings), args, ast.strings, 0);
};
_ConvertAstIntoProtoRecords.prototype.visitLiteralPrimitive = function(ast) {
return this._addRecord(proto_record_1.RecordType.Const, "literal", ast.value, [], null, 0);
};
_ConvertAstIntoProtoRecords.prototype.visitPropertyRead = function(ast) {
var receiver = ast.receiver.visit(this);
if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name) && ast.receiver instanceof ast_1.ImplicitReceiver) {
return this._addRecord(proto_record_1.RecordType.Local, ast.name, ast.name, [], null, receiver);
} else {
return this._addRecord(proto_record_1.RecordType.PropertyRead, ast.name, ast.getter, [], null, receiver);
}
};
_ConvertAstIntoProtoRecords.prototype.visitPropertyWrite = function(ast) {
if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name) && ast.receiver instanceof ast_1.ImplicitReceiver) {
throw new exceptions_1.BaseException("Cannot reassign a variable binding " + ast.name);
} else {
var receiver = ast.receiver.visit(this);
var value = ast.value.visit(this);
return this._addRecord(proto_record_1.RecordType.PropertyWrite, ast.name, ast.setter, [ value ], null, receiver);
}
};
_ConvertAstIntoProtoRecords.prototype.visitKeyedWrite = function(ast) {
var obj = ast.obj.visit(this);
var key = ast.key.visit(this);
var value = ast.value.visit(this);
return this._addRecord(proto_record_1.RecordType.KeyedWrite, null, null, [ key, value ], null, obj);
};
_ConvertAstIntoProtoRecords.prototype.visitSafePropertyRead = function(ast) {
var receiver = ast.receiver.visit(this);
return this._addRecord(proto_record_1.RecordType.SafeProperty, ast.name, ast.getter, [], null, receiver);
};
_ConvertAstIntoProtoRecords.prototype.visitMethodCall = function(ast) {
var receiver = ast.receiver.visit(this);
var args = this._visitAll(ast.args);
if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name)) {
var target = this._addRecord(proto_record_1.RecordType.Local, ast.name, ast.name, [], null, receiver);
return this._addRecord(proto_record_1.RecordType.InvokeClosure, "closure", null, args, null, target);
} else {
return this._addRecord(proto_record_1.RecordType.InvokeMethod, ast.name, ast.fn, args, null, receiver);
}
};
_ConvertAstIntoProtoRecords.prototype.visitSafeMethodCall = function(ast) {
var receiver = ast.receiver.visit(this);
var args = this._visitAll(ast.args);
return this._addRecord(proto_record_1.RecordType.SafeMethodInvoke, ast.name, ast.fn, args, null, receiver);
};
_ConvertAstIntoProtoRecords.prototype.visitFunctionCall = function(ast) {
var target = ast.target.visit(this);
var args = this._visitAll(ast.args);
return this._addRecord(proto_record_1.RecordType.InvokeClosure, "closure", null, args, null, target);
};
_ConvertAstIntoProtoRecords.prototype.visitLiteralArray = function(ast) {
var primitiveName = "arrayFn" + ast.expressions.length;
return this._addRecord(proto_record_1.RecordType.CollectionLiteral, primitiveName, _arrayFn(ast.expressions.length), this._visitAll(ast.expressions), null, 0);
};
_ConvertAstIntoProtoRecords.prototype.visitLiteralMap = function(ast) {
return this._addRecord(proto_record_1.RecordType.CollectionLiteral, _mapPrimitiveName(ast.keys), change_detection_util_1.ChangeDetectionUtil.mapFn(ast.keys), this._visitAll(ast.values), null, 0);
};
_ConvertAstIntoProtoRecords.prototype.visitBinary = function(ast) {
var left = ast.left.visit(this);
switch (ast.operation) {
case "&&":
var branchEnd = [ null ];
this._addRecord(proto_record_1.RecordType.SkipRecordsIfNot, "SkipRecordsIfNot", null, [], branchEnd, left);
var right = ast.right.visit(this);
branchEnd[0] = right;
return this._addRecord(proto_record_1.RecordType.PrimitiveOp, "cond", change_detection_util_1.ChangeDetectionUtil.cond, [ left, right, left ], null, 0);

case "||":
var branchEnd = [ null ];
this._addRecord(proto_record_1.RecordType.SkipRecordsIf, "SkipRecordsIf", null, [], branchEnd, left);
var right = ast.right.visit(this);
branchEnd[0] = right;
return this._addRecord(proto_record_1.RecordType.PrimitiveOp, "cond", change_detection_util_1.ChangeDetectionUtil.cond, [ left, left, right ], null, 0);

default:
var right = ast.right.visit(this);
return this._addRecord(proto_record_1.RecordType.PrimitiveOp, _operationToPrimitiveName(ast.operation), _operationToFunction(ast.operation), [ left, right ], null, 0);
}
};
_ConvertAstIntoProtoRecords.prototype.visitPrefixNot = function(ast) {
var exp = ast.expression.visit(this);
return this._addRecord(proto_record_1.RecordType.PrimitiveOp, "operation_negate", change_detection_util_1.ChangeDetectionUtil.operation_negate, [ exp ], null, 0);
};
_ConvertAstIntoProtoRecords.prototype.visitConditional = function(ast) {
var condition = ast.condition.visit(this);
var startOfFalseBranch = [ null ];
var endOfFalseBranch = [ null ];
this._addRecord(proto_record_1.RecordType.SkipRecordsIfNot, "SkipRecordsIfNot", null, [], startOfFalseBranch, condition);
var whenTrue = ast.trueExp.visit(this);
var skip = this._addRecord(proto_record_1.RecordType.SkipRecords, "SkipRecords", null, [], endOfFalseBranch, 0);
var whenFalse = ast.falseExp.visit(this);
startOfFalseBranch[0] = skip;
endOfFalseBranch[0] = whenFalse;
return this._addRecord(proto_record_1.RecordType.PrimitiveOp, "cond", change_detection_util_1.ChangeDetectionUtil.cond, [ condition, whenTrue, whenFalse ], null, 0);
};
_ConvertAstIntoProtoRecords.prototype.visitPipe = function(ast) {
var value = ast.exp.visit(this);
var args = this._visitAll(ast.args);
return this._addRecord(proto_record_1.RecordType.Pipe, ast.name, ast.name, args, null, value);
};
_ConvertAstIntoProtoRecords.prototype.visitKeyedRead = function(ast) {
var obj = ast.obj.visit(this);
var key = ast.key.visit(this);
return this._addRecord(proto_record_1.RecordType.KeyedRead, "keyedAccess", change_detection_util_1.ChangeDetectionUtil.keyedAccess, [ key ], null, obj);
};
_ConvertAstIntoProtoRecords.prototype.visitChain = function(ast) {
var _this = this;
var args = ast.expressions.map(function(e) {
return e.visit(_this);
});
return this._addRecord(proto_record_1.RecordType.Chain, "chain", null, args, null, 0);
};
_ConvertAstIntoProtoRecords.prototype.visitQuote = function(ast) {
throw new exceptions_1.BaseException("Caught uninterpreted expression at " + ast.location + ": " + ast.uninterpretedExpression + ". " + ("Expression prefix " + ast.prefix + " did not match a template transformer to interpret the expression."));
};
_ConvertAstIntoProtoRecords.prototype._visitAll = function(asts) {
var res = collection_1.ListWrapper.createFixedSize(asts.length);
for (var i = 0; i < asts.length; ++i) {
res[i] = asts[i].visit(this);
}
return res;
};
_ConvertAstIntoProtoRecords.prototype._addRecord = function(type, name, funcOrValue, args, fixedArgs, context) {
var selfIndex = this._records.length + 1;
if (context instanceof directive_record_1.DirectiveIndex) {
this._records.push(new proto_record_1.ProtoRecord(type, name, funcOrValue, args, fixedArgs, -1, context, selfIndex, this._bindingRecord, false, false, false, false, this._bindingIndex));
} else {
this._records.push(new proto_record_1.ProtoRecord(type, name, funcOrValue, args, fixedArgs, context, null, selfIndex, this._bindingRecord, false, false, false, false, this._bindingIndex));
}
return selfIndex;
};
return _ConvertAstIntoProtoRecords;
}();
function _arrayFn(length) {
switch (length) {
case 0:
return change_detection_util_1.ChangeDetectionUtil.arrayFn0;

case 1:
return change_detection_util_1.ChangeDetectionUtil.arrayFn1;

case 2:
return change_detection_util_1.ChangeDetectionUtil.arrayFn2;

case 3:
return change_detection_util_1.ChangeDetectionUtil.arrayFn3;

case 4:
return change_detection_util_1.ChangeDetectionUtil.arrayFn4;

case 5:
return change_detection_util_1.ChangeDetectionUtil.arrayFn5;

case 6:
return change_detection_util_1.ChangeDetectionUtil.arrayFn6;

case 7:
return change_detection_util_1.ChangeDetectionUtil.arrayFn7;

case 8:
return change_detection_util_1.ChangeDetectionUtil.arrayFn8;

case 9:
return change_detection_util_1.ChangeDetectionUtil.arrayFn9;

default:
throw new exceptions_1.BaseException("Does not support literal maps with more than 9 elements");
}
}
function _mapPrimitiveName(keys) {
var stringifiedKeys = keys.map(function(k) {
return lang_1.isString(k) ? '"' + k + '"' : "" + k;
}).join(", ");
return "mapFn([" + stringifiedKeys + "])";
}
function _operationToPrimitiveName(operation) {
switch (operation) {
case "+":
return "operation_add";

case "-":
return "operation_subtract";

case "*":
return "operation_multiply";

case "/":
return "operation_divide";

case "%":
return "operation_remainder";

case "==":
return "operation_equals";

case "!=":
return "operation_not_equals";

case "===":
return "operation_identical";

case "!==":
return "operation_not_identical";

case "<":
return "operation_less_then";

case ">":
return "operation_greater_then";

case "<=":
return "operation_less_or_equals_then";

case ">=":
return "operation_greater_or_equals_then";

default:
throw new exceptions_1.BaseException("Unsupported operation " + operation);
}
}
function _operationToFunction(operation) {
switch (operation) {
case "+":
return change_detection_util_1.ChangeDetectionUtil.operation_add;

case "-":
return change_detection_util_1.ChangeDetectionUtil.operation_subtract;

case "*":
return change_detection_util_1.ChangeDetectionUtil.operation_multiply;

case "/":
return change_detection_util_1.ChangeDetectionUtil.operation_divide;

case "%":
return change_detection_util_1.ChangeDetectionUtil.operation_remainder;

case "==":
return change_detection_util_1.ChangeDetectionUtil.operation_equals;

case "!=":
return change_detection_util_1.ChangeDetectionUtil.operation_not_equals;

case "===":
return change_detection_util_1.ChangeDetectionUtil.operation_identical;

case "!==":
return change_detection_util_1.ChangeDetectionUtil.operation_not_identical;

case "<":
return change_detection_util_1.ChangeDetectionUtil.operation_less_then;

case ">":
return change_detection_util_1.ChangeDetectionUtil.operation_greater_then;

case "<=":
return change_detection_util_1.ChangeDetectionUtil.operation_less_or_equals_then;

case ">=":
return change_detection_util_1.ChangeDetectionUtil.operation_greater_or_equals_then;

default:
throw new exceptions_1.BaseException("Unsupported operation " + operation);
}
}
function s(v) {
return lang_1.isPresent(v) ? "" + v : "";
}
function _interpolationFn(strings) {
var length = strings.length;
var c0 = length > 0 ? strings[0] : null;
var c1 = length > 1 ? strings[1] : null;
var c2 = length > 2 ? strings[2] : null;
var c3 = length > 3 ? strings[3] : null;
var c4 = length > 4 ? strings[4] : null;
var c5 = length > 5 ? strings[5] : null;
var c6 = length > 6 ? strings[6] : null;
var c7 = length > 7 ? strings[7] : null;
var c8 = length > 8 ? strings[8] : null;
var c9 = length > 9 ? strings[9] : null;
switch (length - 1) {
case 1:
return function(a1) {
return c0 + s(a1) + c1;
};

case 2:
return function(a1, a2) {
return c0 + s(a1) + c1 + s(a2) + c2;
};

case 3:
return function(a1, a2, a3) {
return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3;
};

case 4:
return function(a1, a2, a3, a4) {
return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4;
};

case 5:
return function(a1, a2, a3, a4, a5) {
return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5;
};

case 6:
return function(a1, a2, a3, a4, a5, a6) {
return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6;
};

case 7:
return function(a1, a2, a3, a4, a5, a6, a7) {
return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7;
};

case 8:
return function(a1, a2, a3, a4, a5, a6, a7, a8) {
return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) + c8;
};

case 9:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9) {
return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) + c8 + s(a9) + c9;
};

default:
throw new exceptions_1.BaseException("Does not support more than 9 expressions");
}
}
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(115);
var constants_1 = __webpack_require__(139);
var pipe_lifecycle_reflector_1 = __webpack_require__(142);
var binding_record_1 = __webpack_require__(143);
var directive_record_1 = __webpack_require__(144);
var WrappedValue = function() {
function WrappedValue(wrapped) {
this.wrapped = wrapped;
}
WrappedValue.wrap = function(value) {
var w = _wrappedValues[_wrappedIndex++ % 5];
w.wrapped = value;
return w;
};
return WrappedValue;
}();
exports.WrappedValue = WrappedValue;
var _wrappedValues = [ new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null) ];
var _wrappedIndex = 0;
var SimpleChange = function() {
function SimpleChange(previousValue, currentValue) {
this.previousValue = previousValue;
this.currentValue = currentValue;
}
SimpleChange.prototype.isFirstChange = function() {
return this.previousValue === ChangeDetectionUtil.uninitialized;
};
return SimpleChange;
}();
exports.SimpleChange = SimpleChange;
var _simpleChangesIndex = 0;
var _simpleChanges = [ new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null) ];
function _simpleChange(previousValue, currentValue) {
var index = _simpleChangesIndex++ % 20;
var s = _simpleChanges[index];
s.previousValue = previousValue;
s.currentValue = currentValue;
return s;
}
var ChangeDetectionUtil = function() {
function ChangeDetectionUtil() {}
ChangeDetectionUtil.arrayFn0 = function() {
return [];
};
ChangeDetectionUtil.arrayFn1 = function(a1) {
return [ a1 ];
};
ChangeDetectionUtil.arrayFn2 = function(a1, a2) {
return [ a1, a2 ];
};
ChangeDetectionUtil.arrayFn3 = function(a1, a2, a3) {
return [ a1, a2, a3 ];
};
ChangeDetectionUtil.arrayFn4 = function(a1, a2, a3, a4) {
return [ a1, a2, a3, a4 ];
};
ChangeDetectionUtil.arrayFn5 = function(a1, a2, a3, a4, a5) {
return [ a1, a2, a3, a4, a5 ];
};
ChangeDetectionUtil.arrayFn6 = function(a1, a2, a3, a4, a5, a6) {
return [ a1, a2, a3, a4, a5, a6 ];
};
ChangeDetectionUtil.arrayFn7 = function(a1, a2, a3, a4, a5, a6, a7) {
return [ a1, a2, a3, a4, a5, a6, a7 ];
};
ChangeDetectionUtil.arrayFn8 = function(a1, a2, a3, a4, a5, a6, a7, a8) {
return [ a1, a2, a3, a4, a5, a6, a7, a8 ];
};
ChangeDetectionUtil.arrayFn9 = function(a1, a2, a3, a4, a5, a6, a7, a8, a9) {
return [ a1, a2, a3, a4, a5, a6, a7, a8, a9 ];
};
ChangeDetectionUtil.operation_negate = function(value) {
return !value;
};
ChangeDetectionUtil.operation_add = function(left, right) {
return left + right;
};
ChangeDetectionUtil.operation_subtract = function(left, right) {
return left - right;
};
ChangeDetectionUtil.operation_multiply = function(left, right) {
return left * right;
};
ChangeDetectionUtil.operation_divide = function(left, right) {
return left / right;
};
ChangeDetectionUtil.operation_remainder = function(left, right) {
return left % right;
};
ChangeDetectionUtil.operation_equals = function(left, right) {
return left == right;
};
ChangeDetectionUtil.operation_not_equals = function(left, right) {
return left != right;
};
ChangeDetectionUtil.operation_identical = function(left, right) {
return left === right;
};
ChangeDetectionUtil.operation_not_identical = function(left, right) {
return left !== right;
};
ChangeDetectionUtil.operation_less_then = function(left, right) {
return left < right;
};
ChangeDetectionUtil.operation_greater_then = function(left, right) {
return left > right;
};
ChangeDetectionUtil.operation_less_or_equals_then = function(left, right) {
return left <= right;
};
ChangeDetectionUtil.operation_greater_or_equals_then = function(left, right) {
return left >= right;
};
ChangeDetectionUtil.cond = function(cond, trueVal, falseVal) {
return cond ? trueVal : falseVal;
};
ChangeDetectionUtil.mapFn = function(keys) {
function buildMap(values) {
var res = collection_1.StringMapWrapper.create();
for (var i = 0; i < keys.length; ++i) {
collection_1.StringMapWrapper.set(res, keys[i], values[i]);
}
return res;
}
switch (keys.length) {
case 0:
return function() {
return [];
};

case 1:
return function(a1) {
return buildMap([ a1 ]);
};

case 2:
return function(a1, a2) {
return buildMap([ a1, a2 ]);
};

case 3:
return function(a1, a2, a3) {
return buildMap([ a1, a2, a3 ]);
};

case 4:
return function(a1, a2, a3, a4) {
return buildMap([ a1, a2, a3, a4 ]);
};

case 5:
return function(a1, a2, a3, a4, a5) {
return buildMap([ a1, a2, a3, a4, a5 ]);
};

case 6:
return function(a1, a2, a3, a4, a5, a6) {
return buildMap([ a1, a2, a3, a4, a5, a6 ]);
};

case 7:
return function(a1, a2, a3, a4, a5, a6, a7) {
return buildMap([ a1, a2, a3, a4, a5, a6, a7 ]);
};

case 8:
return function(a1, a2, a3, a4, a5, a6, a7, a8) {
return buildMap([ a1, a2, a3, a4, a5, a6, a7, a8 ]);
};

case 9:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9) {
return buildMap([ a1, a2, a3, a4, a5, a6, a7, a8, a9 ]);
};

default:
throw new exceptions_1.BaseException("Does not support literal maps with more than 9 elements");
}
};
ChangeDetectionUtil.keyedAccess = function(obj, args) {
return obj[args[0]];
};
ChangeDetectionUtil.unwrapValue = function(value) {
if (value instanceof WrappedValue) {
return value.wrapped;
} else {
return value;
}
};
ChangeDetectionUtil.changeDetectionMode = function(strategy) {
return constants_1.isDefaultChangeDetectionStrategy(strategy) ? constants_1.ChangeDetectionStrategy.CheckAlways : constants_1.ChangeDetectionStrategy.CheckOnce;
};
ChangeDetectionUtil.simpleChange = function(previousValue, currentValue) {
return _simpleChange(previousValue, currentValue);
};
ChangeDetectionUtil.isValueBlank = function(value) {
return lang_1.isBlank(value);
};
ChangeDetectionUtil.s = function(value) {
return lang_1.isPresent(value) ? "" + value : "";
};
ChangeDetectionUtil.protoByIndex = function(protos, selfIndex) {
return selfIndex < 1 ? null : protos[selfIndex - 1];
};
ChangeDetectionUtil.callPipeOnDestroy = function(selectedPipe) {
if (pipe_lifecycle_reflector_1.implementsOnDestroy(selectedPipe.pipe)) {
selectedPipe.pipe.ngOnDestroy();
}
};
ChangeDetectionUtil.bindingTarget = function(mode, elementIndex, name, unit, debug) {
return new binding_record_1.BindingTarget(mode, elementIndex, name, unit, debug);
};
ChangeDetectionUtil.directiveIndex = function(elementIndex, directiveIndex) {
return new directive_record_1.DirectiveIndex(elementIndex, directiveIndex);
};
ChangeDetectionUtil.looseNotIdentical = function(a, b) {
return !lang_1.looseIdentical(a, b);
};
ChangeDetectionUtil.devModeEqual = function(a, b) {
if (collection_1.isListLikeIterable(a) && collection_1.isListLikeIterable(b)) {
return collection_1.areIterablesEqual(a, b, ChangeDetectionUtil.devModeEqual);
} else if (!collection_1.isListLikeIterable(a) && !lang_1.isPrimitive(a) && !collection_1.isListLikeIterable(b) && !lang_1.isPrimitive(b)) {
return true;
} else {
return lang_1.looseIdentical(a, b);
}
};
ChangeDetectionUtil.uninitialized = lang_1.CONST_EXPR(new Object());
return ChangeDetectionUtil;
}();
exports.ChangeDetectionUtil = ChangeDetectionUtil;
}, function(module, exports) {
"use strict";
function implementsOnDestroy(pipe) {
return pipe.constructor.prototype.ngOnDestroy;
}
exports.implementsOnDestroy = implementsOnDestroy;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var DIRECTIVE_LIFECYCLE = "directiveLifecycle";
var BINDING = "native";
var DIRECTIVE = "directive";
var ELEMENT_PROPERTY = "elementProperty";
var ELEMENT_ATTRIBUTE = "elementAttribute";
var ELEMENT_CLASS = "elementClass";
var ELEMENT_STYLE = "elementStyle";
var TEXT_NODE = "textNode";
var EVENT = "event";
var HOST_EVENT = "hostEvent";
var BindingTarget = function() {
function BindingTarget(mode, elementIndex, name, unit, debug) {
this.mode = mode;
this.elementIndex = elementIndex;
this.name = name;
this.unit = unit;
this.debug = debug;
}
BindingTarget.prototype.isDirective = function() {
return this.mode === DIRECTIVE;
};
BindingTarget.prototype.isElementProperty = function() {
return this.mode === ELEMENT_PROPERTY;
};
BindingTarget.prototype.isElementAttribute = function() {
return this.mode === ELEMENT_ATTRIBUTE;
};
BindingTarget.prototype.isElementClass = function() {
return this.mode === ELEMENT_CLASS;
};
BindingTarget.prototype.isElementStyle = function() {
return this.mode === ELEMENT_STYLE;
};
BindingTarget.prototype.isTextNode = function() {
return this.mode === TEXT_NODE;
};
return BindingTarget;
}();
exports.BindingTarget = BindingTarget;
var BindingRecord = function() {
function BindingRecord(mode, target, implicitReceiver, ast, setter, lifecycleEvent, directiveRecord) {
this.mode = mode;
this.target = target;
this.implicitReceiver = implicitReceiver;
this.ast = ast;
this.setter = setter;
this.lifecycleEvent = lifecycleEvent;
this.directiveRecord = directiveRecord;
}
BindingRecord.prototype.isDirectiveLifecycle = function() {
return this.mode === DIRECTIVE_LIFECYCLE;
};
BindingRecord.prototype.callOnChanges = function() {
return lang_1.isPresent(this.directiveRecord) && this.directiveRecord.callOnChanges;
};
BindingRecord.prototype.isDefaultChangeDetection = function() {
return lang_1.isBlank(this.directiveRecord) || this.directiveRecord.isDefaultChangeDetection();
};
BindingRecord.createDirectiveDoCheck = function(directiveRecord) {
return new BindingRecord(DIRECTIVE_LIFECYCLE, null, 0, null, null, "DoCheck", directiveRecord);
};
BindingRecord.createDirectiveOnInit = function(directiveRecord) {
return new BindingRecord(DIRECTIVE_LIFECYCLE, null, 0, null, null, "OnInit", directiveRecord);
};
BindingRecord.createDirectiveOnChanges = function(directiveRecord) {
return new BindingRecord(DIRECTIVE_LIFECYCLE, null, 0, null, null, "OnChanges", directiveRecord);
};
BindingRecord.createForDirective = function(ast, propertyName, setter, directiveRecord) {
var elementIndex = directiveRecord.directiveIndex.elementIndex;
var t = new BindingTarget(DIRECTIVE, elementIndex, propertyName, null, ast.toString());
return new BindingRecord(DIRECTIVE, t, 0, ast, setter, null, directiveRecord);
};
BindingRecord.createForElementProperty = function(ast, elementIndex, propertyName) {
var t = new BindingTarget(ELEMENT_PROPERTY, elementIndex, propertyName, null, ast.toString());
return new BindingRecord(BINDING, t, 0, ast, null, null, null);
};
BindingRecord.createForElementAttribute = function(ast, elementIndex, attributeName) {
var t = new BindingTarget(ELEMENT_ATTRIBUTE, elementIndex, attributeName, null, ast.toString());
return new BindingRecord(BINDING, t, 0, ast, null, null, null);
};
BindingRecord.createForElementClass = function(ast, elementIndex, className) {
var t = new BindingTarget(ELEMENT_CLASS, elementIndex, className, null, ast.toString());
return new BindingRecord(BINDING, t, 0, ast, null, null, null);
};
BindingRecord.createForElementStyle = function(ast, elementIndex, styleName, unit) {
var t = new BindingTarget(ELEMENT_STYLE, elementIndex, styleName, unit, ast.toString());
return new BindingRecord(BINDING, t, 0, ast, null, null, null);
};
BindingRecord.createForHostProperty = function(directiveIndex, ast, propertyName) {
var t = new BindingTarget(ELEMENT_PROPERTY, directiveIndex.elementIndex, propertyName, null, ast.toString());
return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
};
BindingRecord.createForHostAttribute = function(directiveIndex, ast, attributeName) {
var t = new BindingTarget(ELEMENT_ATTRIBUTE, directiveIndex.elementIndex, attributeName, null, ast.toString());
return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
};
BindingRecord.createForHostClass = function(directiveIndex, ast, className) {
var t = new BindingTarget(ELEMENT_CLASS, directiveIndex.elementIndex, className, null, ast.toString());
return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
};
BindingRecord.createForHostStyle = function(directiveIndex, ast, styleName, unit) {
var t = new BindingTarget(ELEMENT_STYLE, directiveIndex.elementIndex, styleName, unit, ast.toString());
return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
};
BindingRecord.createForTextNode = function(ast, elementIndex) {
var t = new BindingTarget(TEXT_NODE, elementIndex, null, null, ast.toString());
return new BindingRecord(BINDING, t, 0, ast, null, null, null);
};
BindingRecord.createForEvent = function(ast, eventName, elementIndex) {
var t = new BindingTarget(EVENT, elementIndex, eventName, null, ast.toString());
return new BindingRecord(EVENT, t, 0, ast, null, null, null);
};
BindingRecord.createForHostEvent = function(ast, eventName, directiveRecord) {
var directiveIndex = directiveRecord.directiveIndex;
var t = new BindingTarget(HOST_EVENT, directiveIndex.elementIndex, eventName, null, ast.toString());
return new BindingRecord(HOST_EVENT, t, directiveIndex, ast, null, null, directiveRecord);
};
return BindingRecord;
}();
exports.BindingRecord = BindingRecord;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var constants_1 = __webpack_require__(139);
var DirectiveIndex = function() {
function DirectiveIndex(elementIndex, directiveIndex) {
this.elementIndex = elementIndex;
this.directiveIndex = directiveIndex;
}
Object.defineProperty(DirectiveIndex.prototype, "name", {
get: function() {
return this.elementIndex + "_" + this.directiveIndex;
},
enumerable: true,
configurable: true
});
return DirectiveIndex;
}();
exports.DirectiveIndex = DirectiveIndex;
var DirectiveRecord = function() {
function DirectiveRecord(_a) {
var _b = _a === void 0 ? {} : _a, directiveIndex = _b.directiveIndex, callAfterContentInit = _b.callAfterContentInit, callAfterContentChecked = _b.callAfterContentChecked, callAfterViewInit = _b.callAfterViewInit, callAfterViewChecked = _b.callAfterViewChecked, callOnChanges = _b.callOnChanges, callDoCheck = _b.callDoCheck, callOnInit = _b.callOnInit, callOnDestroy = _b.callOnDestroy, changeDetection = _b.changeDetection, outputs = _b.outputs;
this.directiveIndex = directiveIndex;
this.callAfterContentInit = lang_1.normalizeBool(callAfterContentInit);
this.callAfterContentChecked = lang_1.normalizeBool(callAfterContentChecked);
this.callOnChanges = lang_1.normalizeBool(callOnChanges);
this.callAfterViewInit = lang_1.normalizeBool(callAfterViewInit);
this.callAfterViewChecked = lang_1.normalizeBool(callAfterViewChecked);
this.callDoCheck = lang_1.normalizeBool(callDoCheck);
this.callOnInit = lang_1.normalizeBool(callOnInit);
this.callOnDestroy = lang_1.normalizeBool(callOnDestroy);
this.changeDetection = changeDetection;
this.outputs = outputs;
}
DirectiveRecord.prototype.isDefaultChangeDetection = function() {
return constants_1.isDefaultChangeDetectionStrategy(this.changeDetection);
};
return DirectiveRecord;
}();
exports.DirectiveRecord = DirectiveRecord;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(115);
var abstract_change_detector_1 = __webpack_require__(146);
var change_detection_util_1 = __webpack_require__(141);
var constants_1 = __webpack_require__(139);
var proto_record_1 = __webpack_require__(172);
var reflection_1 = __webpack_require__(120);
var async_1 = __webpack_require__(150);
var DynamicChangeDetector = function(_super) {
__extends(DynamicChangeDetector, _super);
function DynamicChangeDetector(id, numberOfPropertyProtoRecords, propertyBindingTargets, directiveIndices, strategy, _records, _eventBindings, _directiveRecords, _genConfig) {
_super.call(this, id, numberOfPropertyProtoRecords, propertyBindingTargets, directiveIndices, strategy);
this._records = _records;
this._eventBindings = _eventBindings;
this._directiveRecords = _directiveRecords;
this._genConfig = _genConfig;
var len = _records.length + 1;
this.values = collection_1.ListWrapper.createFixedSize(len);
this.localPipes = collection_1.ListWrapper.createFixedSize(len);
this.prevContexts = collection_1.ListWrapper.createFixedSize(len);
this.changes = collection_1.ListWrapper.createFixedSize(len);
this.dehydrateDirectives(false);
}
DynamicChangeDetector.prototype.handleEventInternal = function(eventName, elIndex, locals) {
var _this = this;
var preventDefault = false;
this._matchingEventBindings(eventName, elIndex).forEach(function(rec) {
var res = _this._processEventBinding(rec, locals);
if (res === false) {
preventDefault = true;
}
});
return preventDefault;
};
DynamicChangeDetector.prototype._processEventBinding = function(eb, locals) {
var values = collection_1.ListWrapper.createFixedSize(eb.records.length);
values[0] = this.values[0];
for (var protoIdx = 0; protoIdx < eb.records.length; ++protoIdx) {
var proto = eb.records[protoIdx];
if (proto.isSkipRecord()) {
protoIdx += this._computeSkipLength(protoIdx, proto, values);
} else {
if (proto.lastInBinding) {
this._markPathAsCheckOnce(proto);
}
var res = this._calculateCurrValue(proto, values, locals);
if (proto.lastInBinding) {
return res;
} else {
this._writeSelf(proto, res, values);
}
}
}
throw new exceptions_1.BaseException("Cannot be reached");
};
DynamicChangeDetector.prototype._computeSkipLength = function(protoIndex, proto, values) {
if (proto.mode === proto_record_1.RecordType.SkipRecords) {
return proto.fixedArgs[0] - protoIndex - 1;
}
if (proto.mode === proto_record_1.RecordType.SkipRecordsIf) {
var condition = this._readContext(proto, values);
return condition ? proto.fixedArgs[0] - protoIndex - 1 : 0;
}
if (proto.mode === proto_record_1.RecordType.SkipRecordsIfNot) {
var condition = this._readContext(proto, values);
return condition ? 0 : proto.fixedArgs[0] - protoIndex - 1;
}
throw new exceptions_1.BaseException("Cannot be reached");
};
DynamicChangeDetector.prototype._markPathAsCheckOnce = function(proto) {
if (!proto.bindingRecord.isDefaultChangeDetection()) {
var dir = proto.bindingRecord.directiveRecord;
this._getDetectorFor(dir.directiveIndex).markPathToRootAsCheckOnce();
}
};
DynamicChangeDetector.prototype._matchingEventBindings = function(eventName, elIndex) {
return this._eventBindings.filter(function(eb) {
return eb.eventName == eventName && eb.elIndex === elIndex;
});
};
DynamicChangeDetector.prototype.hydrateDirectives = function(dispatcher) {
var _this = this;
this.values[0] = this.context;
this.dispatcher = dispatcher;
this.outputSubscriptions = [];
for (var i = 0; i < this._directiveRecords.length; ++i) {
var r = this._directiveRecords[i];
if (lang_1.isPresent(r.outputs)) {
r.outputs.forEach(function(output) {
var eventHandler = _this._createEventHandler(r.directiveIndex.elementIndex, output[1]);
var directive = _this._getDirectiveFor(r.directiveIndex);
var getter = reflection_1.reflector.getter(output[0]);
_this.outputSubscriptions.push(async_1.ObservableWrapper.subscribe(getter(directive), eventHandler));
});
}
}
};
DynamicChangeDetector.prototype._createEventHandler = function(boundElementIndex, eventName) {
var _this = this;
return function(event) {
return _this.handleEvent(eventName, boundElementIndex, event);
};
};
DynamicChangeDetector.prototype.dehydrateDirectives = function(destroyPipes) {
if (destroyPipes) {
this._destroyPipes();
this._destroyDirectives();
}
this.values[0] = null;
collection_1.ListWrapper.fill(this.values, change_detection_util_1.ChangeDetectionUtil.uninitialized, 1);
collection_1.ListWrapper.fill(this.changes, false);
collection_1.ListWrapper.fill(this.localPipes, null);
collection_1.ListWrapper.fill(this.prevContexts, change_detection_util_1.ChangeDetectionUtil.uninitialized);
};
DynamicChangeDetector.prototype._destroyPipes = function() {
for (var i = 0; i < this.localPipes.length; ++i) {
if (lang_1.isPresent(this.localPipes[i])) {
change_detection_util_1.ChangeDetectionUtil.callPipeOnDestroy(this.localPipes[i]);
}
}
};
DynamicChangeDetector.prototype._destroyDirectives = function() {
for (var i = 0; i < this._directiveRecords.length; ++i) {
var record = this._directiveRecords[i];
if (record.callOnDestroy) {
this._getDirectiveFor(record.directiveIndex).ngOnDestroy();
}
}
};
DynamicChangeDetector.prototype.checkNoChanges = function() {
this.runDetectChanges(true);
};
DynamicChangeDetector.prototype.detectChangesInRecordsInternal = function(throwOnChange) {
var protos = this._records;
var changes = null;
var isChanged = false;
for (var protoIdx = 0; protoIdx < protos.length; ++protoIdx) {
var proto = protos[protoIdx];
var bindingRecord = proto.bindingRecord;
var directiveRecord = bindingRecord.directiveRecord;
if (this._firstInBinding(proto)) {
this.propertyBindingIndex = proto.propertyBindingIndex;
}
if (proto.isLifeCycleRecord()) {
if (proto.name === "DoCheck" && !throwOnChange) {
this._getDirectiveFor(directiveRecord.directiveIndex).ngDoCheck();
} else if (proto.name === "OnInit" && !throwOnChange && this.state == constants_1.ChangeDetectorState.NeverChecked) {
this._getDirectiveFor(directiveRecord.directiveIndex).ngOnInit();
} else if (proto.name === "OnChanges" && lang_1.isPresent(changes) && !throwOnChange) {
this._getDirectiveFor(directiveRecord.directiveIndex).ngOnChanges(changes);
}
} else if (proto.isSkipRecord()) {
protoIdx += this._computeSkipLength(protoIdx, proto, this.values);
} else {
var change = this._check(proto, throwOnChange, this.values, this.locals);
if (lang_1.isPresent(change)) {
this._updateDirectiveOrElement(change, bindingRecord);
isChanged = true;
changes = this._addChange(bindingRecord, change, changes);
}
}
if (proto.lastInDirective) {
changes = null;
if (isChanged && !bindingRecord.isDefaultChangeDetection()) {
this._getDetectorFor(directiveRecord.directiveIndex).markAsCheckOnce();
}
isChanged = false;
}
}
};
DynamicChangeDetector.prototype._firstInBinding = function(r) {
var prev = change_detection_util_1.ChangeDetectionUtil.protoByIndex(this._records, r.selfIndex - 1);
return lang_1.isBlank(prev) || prev.bindingRecord !== r.bindingRecord;
};
DynamicChangeDetector.prototype.afterContentLifecycleCallbacksInternal = function() {
var dirs = this._directiveRecords;
for (var i = dirs.length - 1; i >= 0; --i) {
var dir = dirs[i];
if (dir.callAfterContentInit && this.state == constants_1.ChangeDetectorState.NeverChecked) {
this._getDirectiveFor(dir.directiveIndex).ngAfterContentInit();
}
if (dir.callAfterContentChecked) {
this._getDirectiveFor(dir.directiveIndex).ngAfterContentChecked();
}
}
};
DynamicChangeDetector.prototype.afterViewLifecycleCallbacksInternal = function() {
var dirs = this._directiveRecords;
for (var i = dirs.length - 1; i >= 0; --i) {
var dir = dirs[i];
if (dir.callAfterViewInit && this.state == constants_1.ChangeDetectorState.NeverChecked) {
this._getDirectiveFor(dir.directiveIndex).ngAfterViewInit();
}
if (dir.callAfterViewChecked) {
this._getDirectiveFor(dir.directiveIndex).ngAfterViewChecked();
}
}
};
DynamicChangeDetector.prototype._updateDirectiveOrElement = function(change, bindingRecord) {
if (lang_1.isBlank(bindingRecord.directiveRecord)) {
_super.prototype.notifyDispatcher.call(this, change.currentValue);
} else {
var directiveIndex = bindingRecord.directiveRecord.directiveIndex;
bindingRecord.setter(this._getDirectiveFor(directiveIndex), change.currentValue);
}
if (this._genConfig.logBindingUpdate) {
_super.prototype.logBindingUpdate.call(this, change.currentValue);
}
};
DynamicChangeDetector.prototype._addChange = function(bindingRecord, change, changes) {
if (bindingRecord.callOnChanges()) {
return _super.prototype.addChange.call(this, changes, change.previousValue, change.currentValue);
} else {
return changes;
}
};
DynamicChangeDetector.prototype._getDirectiveFor = function(directiveIndex) {
return this.dispatcher.getDirectiveFor(directiveIndex);
};
DynamicChangeDetector.prototype._getDetectorFor = function(directiveIndex) {
return this.dispatcher.getDetectorFor(directiveIndex);
};
DynamicChangeDetector.prototype._check = function(proto, throwOnChange, values, locals) {
if (proto.isPipeRecord()) {
return this._pipeCheck(proto, throwOnChange, values);
} else {
return this._referenceCheck(proto, throwOnChange, values, locals);
}
};
DynamicChangeDetector.prototype._referenceCheck = function(proto, throwOnChange, values, locals) {
if (this._pureFuncAndArgsDidNotChange(proto)) {
this._setChanged(proto, false);
return null;
}
var currValue = this._calculateCurrValue(proto, values, locals);
if (proto.shouldBeChecked()) {
var prevValue = this._readSelf(proto, values);
var detectedChange = throwOnChange ? !change_detection_util_1.ChangeDetectionUtil.devModeEqual(prevValue, currValue) : change_detection_util_1.ChangeDetectionUtil.looseNotIdentical(prevValue, currValue);
if (detectedChange) {
if (proto.lastInBinding) {
var change = change_detection_util_1.ChangeDetectionUtil.simpleChange(prevValue, currValue);
if (throwOnChange) this.throwOnChangeError(prevValue, currValue);
this._writeSelf(proto, currValue, values);
this._setChanged(proto, true);
return change;
} else {
this._writeSelf(proto, currValue, values);
this._setChanged(proto, true);
return null;
}
} else {
this._setChanged(proto, false);
return null;
}
} else {
this._writeSelf(proto, currValue, values);
this._setChanged(proto, true);
return null;
}
};
DynamicChangeDetector.prototype._calculateCurrValue = function(proto, values, locals) {
switch (proto.mode) {
case proto_record_1.RecordType.Self:
return this._readContext(proto, values);

case proto_record_1.RecordType.Const:
return proto.funcOrValue;

case proto_record_1.RecordType.PropertyRead:
var context = this._readContext(proto, values);
return proto.funcOrValue(context);

case proto_record_1.RecordType.SafeProperty:
var context = this._readContext(proto, values);
return lang_1.isBlank(context) ? null : proto.funcOrValue(context);

case proto_record_1.RecordType.PropertyWrite:
var context = this._readContext(proto, values);
var value = this._readArgs(proto, values)[0];
proto.funcOrValue(context, value);
return value;

case proto_record_1.RecordType.KeyedWrite:
var context = this._readContext(proto, values);
var key = this._readArgs(proto, values)[0];
var value = this._readArgs(proto, values)[1];
context[key] = value;
return value;

case proto_record_1.RecordType.Local:
return locals.get(proto.name);

case proto_record_1.RecordType.InvokeMethod:
var context = this._readContext(proto, values);
var args = this._readArgs(proto, values);
return proto.funcOrValue(context, args);

case proto_record_1.RecordType.SafeMethodInvoke:
var context = this._readContext(proto, values);
if (lang_1.isBlank(context)) {
return null;
}
var args = this._readArgs(proto, values);
return proto.funcOrValue(context, args);

case proto_record_1.RecordType.KeyedRead:
var arg = this._readArgs(proto, values)[0];
return this._readContext(proto, values)[arg];

case proto_record_1.RecordType.Chain:
var args = this._readArgs(proto, values);
return args[args.length - 1];

case proto_record_1.RecordType.InvokeClosure:
return lang_1.FunctionWrapper.apply(this._readContext(proto, values), this._readArgs(proto, values));

case proto_record_1.RecordType.Interpolate:
case proto_record_1.RecordType.PrimitiveOp:
case proto_record_1.RecordType.CollectionLiteral:
return lang_1.FunctionWrapper.apply(proto.funcOrValue, this._readArgs(proto, values));

default:
throw new exceptions_1.BaseException("Unknown operation " + proto.mode);
}
};
DynamicChangeDetector.prototype._pipeCheck = function(proto, throwOnChange, values) {
var context = this._readContext(proto, values);
var selectedPipe = this._pipeFor(proto, context);
if (!selectedPipe.pure || this._argsOrContextChanged(proto)) {
var args = this._readArgs(proto, values);
var currValue = selectedPipe.pipe.transform(context, args);
if (proto.shouldBeChecked()) {
var prevValue = this._readSelf(proto, values);
var detectedChange = throwOnChange ? !change_detection_util_1.ChangeDetectionUtil.devModeEqual(prevValue, currValue) : change_detection_util_1.ChangeDetectionUtil.looseNotIdentical(prevValue, currValue);
if (detectedChange) {
currValue = change_detection_util_1.ChangeDetectionUtil.unwrapValue(currValue);
if (proto.lastInBinding) {
var change = change_detection_util_1.ChangeDetectionUtil.simpleChange(prevValue, currValue);
if (throwOnChange) this.throwOnChangeError(prevValue, currValue);
this._writeSelf(proto, currValue, values);
this._setChanged(proto, true);
return change;
} else {
this._writeSelf(proto, currValue, values);
this._setChanged(proto, true);
return null;
}
} else {
this._setChanged(proto, false);
return null;
}
} else {
this._writeSelf(proto, currValue, values);
this._setChanged(proto, true);
return null;
}
}
};
DynamicChangeDetector.prototype._pipeFor = function(proto, context) {
var storedPipe = this._readPipe(proto);
if (lang_1.isPresent(storedPipe)) return storedPipe;
var pipe = this.pipes.get(proto.name);
this._writePipe(proto, pipe);
return pipe;
};
DynamicChangeDetector.prototype._readContext = function(proto, values) {
if (proto.contextIndex == -1) {
return this._getDirectiveFor(proto.directiveIndex);
}
return values[proto.contextIndex];
};
DynamicChangeDetector.prototype._readSelf = function(proto, values) {
return values[proto.selfIndex];
};
DynamicChangeDetector.prototype._writeSelf = function(proto, value, values) {
values[proto.selfIndex] = value;
};
DynamicChangeDetector.prototype._readPipe = function(proto) {
return this.localPipes[proto.selfIndex];
};
DynamicChangeDetector.prototype._writePipe = function(proto, value) {
this.localPipes[proto.selfIndex] = value;
};
DynamicChangeDetector.prototype._setChanged = function(proto, value) {
if (proto.argumentToPureFunction) this.changes[proto.selfIndex] = value;
};
DynamicChangeDetector.prototype._pureFuncAndArgsDidNotChange = function(proto) {
return proto.isPureFunction() && !this._argsChanged(proto);
};
DynamicChangeDetector.prototype._argsChanged = function(proto) {
var args = proto.args;
for (var i = 0; i < args.length; ++i) {
if (this.changes[args[i]]) {
return true;
}
}
return false;
};
DynamicChangeDetector.prototype._argsOrContextChanged = function(proto) {
return this._argsChanged(proto) || this.changes[proto.contextIndex];
};
DynamicChangeDetector.prototype._readArgs = function(proto, values) {
var res = collection_1.ListWrapper.createFixedSize(proto.args.length);
var args = proto.args;
for (var i = 0; i < args.length; ++i) {
res[i] = values[args[i]];
}
return res;
};
return DynamicChangeDetector;
}(abstract_change_detector_1.AbstractChangeDetector);
exports.DynamicChangeDetector = DynamicChangeDetector;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var collection_1 = __webpack_require__(115);
var change_detection_util_1 = __webpack_require__(141);
var change_detector_ref_1 = __webpack_require__(147);
var exceptions_1 = __webpack_require__(137);
var locals_1 = __webpack_require__(136);
var constants_1 = __webpack_require__(139);
var profile_1 = __webpack_require__(148);
var async_1 = __webpack_require__(150);
var _scope_check = profile_1.wtfCreateScope("ChangeDetector#check(ascii id, bool throwOnChange)");
var _Context = function() {
function _Context(element, componentElement, context, locals, injector, expression) {
this.element = element;
this.componentElement = componentElement;
this.context = context;
this.locals = locals;
this.injector = injector;
this.expression = expression;
}
return _Context;
}();
var AbstractChangeDetector = function() {
function AbstractChangeDetector(id, numberOfPropertyProtoRecords, bindingTargets, directiveIndices, strategy) {
this.id = id;
this.numberOfPropertyProtoRecords = numberOfPropertyProtoRecords;
this.bindingTargets = bindingTargets;
this.directiveIndices = directiveIndices;
this.strategy = strategy;
this.contentChildren = [];
this.viewChildren = [];
this.state = constants_1.ChangeDetectorState.NeverChecked;
this.locals = null;
this.mode = null;
this.pipes = null;
this.ref = new change_detector_ref_1.ChangeDetectorRef_(this);
}
AbstractChangeDetector.prototype.addContentChild = function(cd) {
this.contentChildren.push(cd);
cd.parent = this;
};
AbstractChangeDetector.prototype.removeContentChild = function(cd) {
collection_1.ListWrapper.remove(this.contentChildren, cd);
};
AbstractChangeDetector.prototype.addViewChild = function(cd) {
this.viewChildren.push(cd);
cd.parent = this;
};
AbstractChangeDetector.prototype.removeViewChild = function(cd) {
collection_1.ListWrapper.remove(this.viewChildren, cd);
};
AbstractChangeDetector.prototype.remove = function() {
this.parent.removeContentChild(this);
};
AbstractChangeDetector.prototype.handleEvent = function(eventName, elIndex, event) {
if (!this.hydrated()) {
this.throwDehydratedError(this.id + " -> " + eventName);
}
try {
var locals = new Map();
locals.set("$event", event);
var res = !this.handleEventInternal(eventName, elIndex, new locals_1.Locals(this.locals, locals));
this.markPathToRootAsCheckOnce();
return res;
} catch (e) {
var c = this.dispatcher.getDebugContext(null, elIndex, null);
var context = lang_1.isPresent(c) ? new exceptions_1.EventEvaluationErrorContext(c.element, c.componentElement, c.context, c.locals, c.injector) : null;
throw new exceptions_1.EventEvaluationError(eventName, e, e.stack, context);
}
};
AbstractChangeDetector.prototype.handleEventInternal = function(eventName, elIndex, locals) {
return false;
};
AbstractChangeDetector.prototype.detectChanges = function() {
this.runDetectChanges(false);
};
AbstractChangeDetector.prototype.checkNoChanges = function() {
if (lang_1.assertionsEnabled()) {
this.runDetectChanges(true);
}
};
AbstractChangeDetector.prototype.runDetectChanges = function(throwOnChange) {
if (this.mode === constants_1.ChangeDetectionStrategy.Detached || this.mode === constants_1.ChangeDetectionStrategy.Checked || this.state === constants_1.ChangeDetectorState.Errored) return;
var s = _scope_check(this.id, throwOnChange);
this.detectChangesInRecords(throwOnChange);
this._detectChangesContentChildren(throwOnChange);
if (!throwOnChange) this.afterContentLifecycleCallbacks();
this._detectChangesInViewChildren(throwOnChange);
if (!throwOnChange) this.afterViewLifecycleCallbacks();
if (this.mode === constants_1.ChangeDetectionStrategy.CheckOnce) this.mode = constants_1.ChangeDetectionStrategy.Checked;
this.state = constants_1.ChangeDetectorState.CheckedBefore;
profile_1.wtfLeave(s);
};
AbstractChangeDetector.prototype.detectChangesInRecords = function(throwOnChange) {
if (!this.hydrated()) {
this.throwDehydratedError(this.id);
}
try {
this.detectChangesInRecordsInternal(throwOnChange);
} catch (e) {
if (!(e instanceof exceptions_1.ExpressionChangedAfterItHasBeenCheckedException)) {
this.state = constants_1.ChangeDetectorState.Errored;
}
this._throwError(e, e.stack);
}
};
AbstractChangeDetector.prototype.detectChangesInRecordsInternal = function(throwOnChange) {};
AbstractChangeDetector.prototype.hydrate = function(context, locals, dispatcher, pipes) {
this.dispatcher = dispatcher;
this.mode = change_detection_util_1.ChangeDetectionUtil.changeDetectionMode(this.strategy);
this.context = context;
this.locals = locals;
this.pipes = pipes;
this.hydrateDirectives(dispatcher);
this.state = constants_1.ChangeDetectorState.NeverChecked;
};
AbstractChangeDetector.prototype.hydrateDirectives = function(dispatcher) {};
AbstractChangeDetector.prototype.dehydrate = function() {
this.dehydrateDirectives(true);
this._unsubscribeFromOutputs();
this.dispatcher = null;
this.context = null;
this.locals = null;
this.pipes = null;
};
AbstractChangeDetector.prototype.dehydrateDirectives = function(destroyPipes) {};
AbstractChangeDetector.prototype.hydrated = function() {
return lang_1.isPresent(this.context);
};
AbstractChangeDetector.prototype.destroyRecursive = function() {
this.dispatcher.notifyOnDestroy();
this.dehydrate();
var children = this.contentChildren;
for (var i = 0; i < children.length; i++) {
children[i].destroyRecursive();
}
children = this.viewChildren;
for (var i = 0; i < children.length; i++) {
children[i].destroyRecursive();
}
};
AbstractChangeDetector.prototype.afterContentLifecycleCallbacks = function() {
this.dispatcher.notifyAfterContentChecked();
this.afterContentLifecycleCallbacksInternal();
};
AbstractChangeDetector.prototype.afterContentLifecycleCallbacksInternal = function() {};
AbstractChangeDetector.prototype.afterViewLifecycleCallbacks = function() {
this.dispatcher.notifyAfterViewChecked();
this.afterViewLifecycleCallbacksInternal();
};
AbstractChangeDetector.prototype.afterViewLifecycleCallbacksInternal = function() {};
AbstractChangeDetector.prototype._detectChangesContentChildren = function(throwOnChange) {
var c = this.contentChildren;
for (var i = 0; i < c.length; ++i) {
c[i].runDetectChanges(throwOnChange);
}
};
AbstractChangeDetector.prototype._detectChangesInViewChildren = function(throwOnChange) {
var c = this.viewChildren;
for (var i = 0; i < c.length; ++i) {
c[i].runDetectChanges(throwOnChange);
}
};
AbstractChangeDetector.prototype.markAsCheckOnce = function() {
this.mode = constants_1.ChangeDetectionStrategy.CheckOnce;
};
AbstractChangeDetector.prototype.markPathToRootAsCheckOnce = function() {
var c = this;
while (lang_1.isPresent(c) && c.mode !== constants_1.ChangeDetectionStrategy.Detached) {
if (c.mode === constants_1.ChangeDetectionStrategy.Checked) c.mode = constants_1.ChangeDetectionStrategy.CheckOnce;
c = c.parent;
}
};
AbstractChangeDetector.prototype._unsubscribeFromOutputs = function() {
if (lang_1.isPresent(this.outputSubscriptions)) {
for (var i = 0; i < this.outputSubscriptions.length; ++i) {
async_1.ObservableWrapper.dispose(this.outputSubscriptions[i]);
this.outputSubscriptions[i] = null;
}
}
};
AbstractChangeDetector.prototype.getDirectiveFor = function(directives, index) {
return directives.getDirectiveFor(this.directiveIndices[index]);
};
AbstractChangeDetector.prototype.getDetectorFor = function(directives, index) {
return directives.getDetectorFor(this.directiveIndices[index]);
};
AbstractChangeDetector.prototype.notifyDispatcher = function(value) {
this.dispatcher.notifyOnBinding(this._currentBinding(), value);
};
AbstractChangeDetector.prototype.logBindingUpdate = function(value) {
this.dispatcher.logBindingUpdate(this._currentBinding(), value);
};
AbstractChangeDetector.prototype.addChange = function(changes, oldValue, newValue) {
if (lang_1.isBlank(changes)) {
changes = {};
}
changes[this._currentBinding().name] = change_detection_util_1.ChangeDetectionUtil.simpleChange(oldValue, newValue);
return changes;
};
AbstractChangeDetector.prototype._throwError = function(exception, stack) {
var error;
try {
var c = this.dispatcher.getDebugContext(null, this._currentBinding().elementIndex, null);
var context = lang_1.isPresent(c) ? new _Context(c.element, c.componentElement, c.context, c.locals, c.injector, this._currentBinding().debug) : null;
error = new exceptions_1.ChangeDetectionError(this._currentBinding().debug, exception, stack, context);
} catch (e) {
error = new exceptions_1.ChangeDetectionError(null, exception, stack, null);
}
throw error;
};
AbstractChangeDetector.prototype.throwOnChangeError = function(oldValue, newValue) {
throw new exceptions_1.ExpressionChangedAfterItHasBeenCheckedException(this._currentBinding().debug, oldValue, newValue, null);
};
AbstractChangeDetector.prototype.throwDehydratedError = function(detail) {
throw new exceptions_1.DehydratedException(detail);
};
AbstractChangeDetector.prototype._currentBinding = function() {
return this.bindingTargets[this.propertyBindingIndex];
};
return AbstractChangeDetector;
}();
exports.AbstractChangeDetector = AbstractChangeDetector;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var constants_1 = __webpack_require__(139);
var ChangeDetectorRef = function() {
function ChangeDetectorRef() {}
return ChangeDetectorRef;
}();
exports.ChangeDetectorRef = ChangeDetectorRef;
var ChangeDetectorRef_ = function(_super) {
__extends(ChangeDetectorRef_, _super);
function ChangeDetectorRef_(_cd) {
_super.call(this);
this._cd = _cd;
}
ChangeDetectorRef_.prototype.markForCheck = function() {
this._cd.markPathToRootAsCheckOnce();
};
ChangeDetectorRef_.prototype.detach = function() {
this._cd.mode = constants_1.ChangeDetectionStrategy.Detached;
};
ChangeDetectorRef_.prototype.detectChanges = function() {
this._cd.detectChanges();
};
ChangeDetectorRef_.prototype.checkNoChanges = function() {
this._cd.checkNoChanges();
};
ChangeDetectorRef_.prototype.reattach = function() {
this._cd.mode = constants_1.ChangeDetectionStrategy.CheckAlways;
this.markForCheck();
};
return ChangeDetectorRef_;
}(ChangeDetectorRef);
exports.ChangeDetectorRef_ = ChangeDetectorRef_;
}, function(module, exports, __webpack_require__) {
"use strict";
var impl = __webpack_require__(149);
exports.wtfEnabled = impl.detectWTF();
function noopScope(arg0, arg1) {
return null;
}
exports.wtfCreateScope = exports.wtfEnabled ? impl.createScope : function(signature, flags) {
return noopScope;
};
exports.wtfLeave = exports.wtfEnabled ? impl.leave : function(s, r) {
return r;
};
exports.wtfStartTimeRange = exports.wtfEnabled ? impl.startTimeRange : function(rangeType, action) {
return null;
};
exports.wtfEndTimeRange = exports.wtfEnabled ? impl.endTimeRange : function(r) {
return null;
};
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var trace;
var events;
function detectWTF() {
var wtf = lang_1.global["wtf"];
if (wtf) {
trace = wtf["trace"];
if (trace) {
events = trace["events"];
return true;
}
}
return false;
}
exports.detectWTF = detectWTF;
function createScope(signature, flags) {
if (flags === void 0) {
flags = null;
}
return events.createScope(signature, flags);
}
exports.createScope = createScope;
function leave(scope, returnValue) {
trace.leaveScope(scope, returnValue);
return returnValue;
}
exports.leave = leave;
function startTimeRange(rangeType, action) {
return trace.beginTimeRange(rangeType, action);
}
exports.startTimeRange = startTimeRange;
function endTimeRange(range) {
trace.endTimeRange(range);
}
exports.endTimeRange = endTimeRange;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(105);
var promise_1 = __webpack_require__(151);
exports.PromiseWrapper = promise_1.PromiseWrapper;
var Subject_1 = __webpack_require__(152);
var PromiseObservable_1 = __webpack_require__(170);
var toPromise_1 = __webpack_require__(171);
var Observable_1 = __webpack_require__(153);
exports.Observable = Observable_1.Observable;
var Subject_2 = __webpack_require__(152);
exports.Subject = Subject_2.Subject;
var TimerWrapper = function() {
function TimerWrapper() {}
TimerWrapper.setTimeout = function(fn, millis) {
return lang_1.global.setTimeout(fn, millis);
};
TimerWrapper.clearTimeout = function(id) {
lang_1.global.clearTimeout(id);
};
TimerWrapper.setInterval = function(fn, millis) {
return lang_1.global.setInterval(fn, millis);
};
TimerWrapper.clearInterval = function(id) {
lang_1.global.clearInterval(id);
};
return TimerWrapper;
}();
exports.TimerWrapper = TimerWrapper;
var ObservableWrapper = function() {
function ObservableWrapper() {}
ObservableWrapper.subscribe = function(emitter, onNext, onError, onComplete) {
if (onComplete === void 0) {
onComplete = function() {};
}
onError = typeof onError === "function" && onError || lang_1.noop;
onComplete = typeof onComplete === "function" && onComplete || lang_1.noop;
return emitter.subscribe({
next: onNext,
error: onError,
complete: onComplete
});
};
ObservableWrapper.isObservable = function(obs) {
return !!obs.subscribe;
};
ObservableWrapper.hasSubscribers = function(obs) {
return obs.observers.length > 0;
};
ObservableWrapper.dispose = function(subscription) {
subscription.unsubscribe();
};
ObservableWrapper.callNext = function(emitter, value) {
emitter.next(value);
};
ObservableWrapper.callEmit = function(emitter, value) {
emitter.emit(value);
};
ObservableWrapper.callError = function(emitter, error) {
emitter.error(error);
};
ObservableWrapper.callComplete = function(emitter) {
emitter.complete();
};
ObservableWrapper.fromPromise = function(promise) {
return PromiseObservable_1.PromiseObservable.create(promise);
};
ObservableWrapper.toPromise = function(obj) {
return toPromise_1.toPromise.call(obj);
};
return ObservableWrapper;
}();
exports.ObservableWrapper = ObservableWrapper;
var EventEmitter = function(_super) {
__extends(EventEmitter, _super);
function EventEmitter(isAsync) {
if (isAsync === void 0) {
isAsync = true;
}
_super.call(this);
this._isAsync = isAsync;
}
EventEmitter.prototype.emit = function(value) {
_super.prototype.next.call(this, value);
};
EventEmitter.prototype.next = function(value) {
_super.prototype.next.call(this, value);
};
EventEmitter.prototype.subscribe = function(generatorOrNext, error, complete) {
var schedulerFn;
var errorFn = function(err) {
return null;
};
var completeFn = function() {
return null;
};
if (generatorOrNext && typeof generatorOrNext === "object") {
schedulerFn = this._isAsync ? function(value) {
setTimeout(function() {
return generatorOrNext.next(value);
});
} : function(value) {
generatorOrNext.next(value);
};
if (generatorOrNext.error) {
errorFn = this._isAsync ? function(err) {
setTimeout(function() {
return generatorOrNext.error(err);
});
} : function(err) {
generatorOrNext.error(err);
};
}
if (generatorOrNext.complete) {
completeFn = this._isAsync ? function() {
setTimeout(function() {
return generatorOrNext.complete();
});
} : function() {
generatorOrNext.complete();
};
}
} else {
schedulerFn = this._isAsync ? function(value) {
setTimeout(function() {
return generatorOrNext(value);
});
} : function(value) {
generatorOrNext(value);
};
if (error) {
errorFn = this._isAsync ? function(err) {
setTimeout(function() {
return error(err);
});
} : function(err) {
error(err);
};
}
if (complete) {
completeFn = this._isAsync ? function() {
setTimeout(function() {
return complete();
});
} : function() {
complete();
};
}
}
return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
};
return EventEmitter;
}(Subject_1.Subject);
exports.EventEmitter = EventEmitter;
}, function(module, exports) {
"use strict";
var PromiseWrapper = function() {
function PromiseWrapper() {}
PromiseWrapper.resolve = function(obj) {
return Promise.resolve(obj);
};
PromiseWrapper.reject = function(obj, _) {
return Promise.reject(obj);
};
PromiseWrapper.catchError = function(promise, onError) {
return promise.catch(onError);
};
PromiseWrapper.all = function(promises) {
if (promises.length == 0) return Promise.resolve([]);
return Promise.all(promises);
};
PromiseWrapper.then = function(promise, success, rejection) {
return promise.then(success, rejection);
};
PromiseWrapper.wrap = function(computation) {
return new Promise(function(res, rej) {
try {
res(computation());
} catch (e) {
rej(e);
}
});
};
PromiseWrapper.scheduleMicrotask = function(computation) {
PromiseWrapper.then(PromiseWrapper.resolve(null), computation, function(_) {});
};
PromiseWrapper.isPromise = function(obj) {
return obj instanceof Promise;
};
PromiseWrapper.completer = function() {
var resolve;
var reject;
var p = new Promise(function(res, rej) {
resolve = res;
reject = rej;
});
return {
promise: p,
resolve: resolve,
reject: reject
};
};
return PromiseWrapper;
}();
exports.PromiseWrapper = PromiseWrapper;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(153);
var Subscriber_1 = __webpack_require__(158);
var Subscription_1 = __webpack_require__(160);
var SubjectSubscription_1 = __webpack_require__(167);
var rxSubscriber_1 = __webpack_require__(165);
var throwError_1 = __webpack_require__(168);
var ObjectUnsubscribedError_1 = __webpack_require__(169);
var Subject = function(_super) {
__extends(Subject, _super);
function Subject(destination, source) {
_super.call(this);
this.destination = destination;
this.source = source;
this.observers = [];
this.isUnsubscribed = false;
this.isStopped = false;
this.hasErrored = false;
this.dispatching = false;
this.hasCompleted = false;
}
Subject.prototype.lift = function(operator) {
var subject = new Subject(this.destination || this, this);
subject.operator = operator;
return subject;
};
Subject.prototype.add = function(subscription) {
Subscription_1.Subscription.prototype.add.call(this, subscription);
};
Subject.prototype.remove = function(subscription) {
Subscription_1.Subscription.prototype.remove.call(this, subscription);
};
Subject.prototype.unsubscribe = function() {
Subscription_1.Subscription.prototype.unsubscribe.call(this);
};
Subject.prototype._subscribe = function(subscriber) {
if (this.source) {
return this.source.subscribe(subscriber);
} else {
if (subscriber.isUnsubscribed) {
return;
} else if (this.hasErrored) {
return subscriber.error(this.errorValue);
} else if (this.hasCompleted) {
return subscriber.complete();
}
this.throwIfUnsubscribed();
var subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
this.observers.push(subscriber);
return subscription;
}
};
Subject.prototype._unsubscribe = function() {
this.source = null;
this.isStopped = true;
this.observers = null;
this.destination = null;
};
Subject.prototype.next = function(value) {
this.throwIfUnsubscribed();
if (this.isStopped) {
return;
}
this.dispatching = true;
this._next(value);
this.dispatching = false;
if (this.hasErrored) {
this._error(this.errorValue);
} else if (this.hasCompleted) {
this._complete();
}
};
Subject.prototype.error = function(err) {
this.throwIfUnsubscribed();
if (this.isStopped) {
return;
}
this.isStopped = true;
this.hasErrored = true;
this.errorValue = err;
if (this.dispatching) {
return;
}
this._error(err);
};
Subject.prototype.complete = function() {
this.throwIfUnsubscribed();
if (this.isStopped) {
return;
}
this.isStopped = true;
this.hasCompleted = true;
if (this.dispatching) {
return;
}
this._complete();
};
Subject.prototype.asObservable = function() {
var observable = new SubjectObservable(this);
return observable;
};
Subject.prototype._next = function(value) {
if (this.destination) {
this.destination.next(value);
} else {
this._finalNext(value);
}
};
Subject.prototype._finalNext = function(value) {
var index = -1;
var observers = this.observers.slice(0);
var len = observers.length;
while (++index < len) {
observers[index].next(value);
}
};
Subject.prototype._error = function(err) {
if (this.destination) {
this.destination.error(err);
} else {
this._finalError(err);
}
};
Subject.prototype._finalError = function(err) {
var index = -1;
var observers = this.observers;
this.observers = null;
this.isUnsubscribed = true;
if (observers) {
var len = observers.length;
while (++index < len) {
observers[index].error(err);
}
}
this.isUnsubscribed = false;
this.unsubscribe();
};
Subject.prototype._complete = function() {
if (this.destination) {
this.destination.complete();
} else {
this._finalComplete();
}
};
Subject.prototype._finalComplete = function() {
var index = -1;
var observers = this.observers;
this.observers = null;
this.isUnsubscribed = true;
if (observers) {
var len = observers.length;
while (++index < len) {
observers[index].complete();
}
}
this.isUnsubscribed = false;
this.unsubscribe();
};
Subject.prototype.throwIfUnsubscribed = function() {
if (this.isUnsubscribed) {
throwError_1.throwError(new ObjectUnsubscribedError_1.ObjectUnsubscribedError());
}
};
Subject.prototype[rxSubscriber_1.rxSubscriber] = function() {
return new Subscriber_1.Subscriber(this);
};
Subject.create = function(destination, source) {
return new Subject(destination, source);
};
return Subject;
}(Observable_1.Observable);
exports.Subject = Subject;
var SubjectObservable = function(_super) {
__extends(SubjectObservable, _super);
function SubjectObservable(source) {
_super.call(this);
this.source = source;
}
return SubjectObservable;
}(Observable_1.Observable);
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(154);
var SymbolShim_1 = __webpack_require__(156);
var toSubscriber_1 = __webpack_require__(157);
var tryCatch_1 = __webpack_require__(163);
var errorObject_1 = __webpack_require__(164);
var Observable = function() {
function Observable(subscribe) {
this._isScalar = false;
if (subscribe) {
this._subscribe = subscribe;
}
}
Observable.prototype.lift = function(operator) {
var observable = new Observable();
observable.source = this;
observable.operator = operator;
return observable;
};
Observable.prototype.subscribe = function(observerOrNext, error, complete) {
var operator = this.operator;
var subscriber = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
if (operator) {
subscriber.add(this._subscribe(operator.call(subscriber)));
} else {
subscriber.add(this._subscribe(subscriber));
}
if (subscriber.syncErrorThrowable) {
subscriber.syncErrorThrowable = false;
if (subscriber.syncErrorThrown) {
throw subscriber.syncErrorValue;
}
}
return subscriber;
};
Observable.prototype.forEach = function(next, thisArg, PromiseCtor) {
if (!PromiseCtor) {
if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
PromiseCtor = root_1.root.Rx.config.Promise;
} else if (root_1.root.Promise) {
PromiseCtor = root_1.root.Promise;
}
}
if (!PromiseCtor) {
throw new Error("no Promise impl found");
}
var source = this;
return new PromiseCtor(function(resolve, reject) {
source.subscribe(function(value) {
var result = tryCatch_1.tryCatch(next).call(thisArg, value);
if (result === errorObject_1.errorObject) {
reject(errorObject_1.errorObject.e);
}
}, reject, resolve);
});
};
Observable.prototype._subscribe = function(subscriber) {
return this.source.subscribe(subscriber);
};
Observable.prototype[SymbolShim_1.SymbolShim.observable] = function() {
return this;
};
Observable.create = function(subscribe) {
return new Observable(subscribe);
};
return Observable;
}();
exports.Observable = Observable;
}, function(module, exports, __webpack_require__) {
(function(module) {
"use strict";
var objectTypes = {
"boolean": false,
"function": true,
object: true,
number: false,
string: false,
undefined: false
};
exports.root = objectTypes[typeof self] && self || objectTypes[typeof window] && window;
var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
var freeGlobal = objectTypes[typeof global] && global;
if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
exports.root = freeGlobal;
}
}).call(exports, __webpack_require__(155)(module));
}, function(module, exports) {
module.exports = function(module) {
if (!module.webpackPolyfill) {
module.deprecate = function() {};
module.paths = [];
module.children = [];
module.webpackPolyfill = 1;
}
return module;
};
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(154);
function polyfillSymbol(root) {
var Symbol = ensureSymbol(root);
ensureIterator(Symbol, root);
ensureObservable(Symbol);
ensureFor(Symbol);
return Symbol;
}
exports.polyfillSymbol = polyfillSymbol;
function ensureFor(Symbol) {
if (!Symbol.for) {
Symbol.for = symbolForPolyfill;
}
}
exports.ensureFor = ensureFor;
var id = 0;
function ensureSymbol(root) {
if (!root.Symbol) {
root.Symbol = function symbolFuncPolyfill(description) {
return "@@Symbol(" + description + "):" + id++;
};
}
return root.Symbol;
}
exports.ensureSymbol = ensureSymbol;
function symbolForPolyfill(key) {
return "@@" + key;
}
exports.symbolForPolyfill = symbolForPolyfill;
function ensureIterator(Symbol, root) {
if (!Symbol.iterator) {
if (typeof Symbol.for === "function") {
Symbol.iterator = Symbol.for("iterator");
} else if (root.Set && typeof new root.Set()["@@iterator"] === "function") {
Symbol.iterator = "@@iterator";
} else if (root.Map) {
var keys = Object.getOwnPropertyNames(root.Map.prototype);
for (var i = 0; i < keys.length; ++i) {
var key = keys[i];
if (key !== "entries" && key !== "size" && root.Map.prototype[key] === root.Map.prototype["entries"]) {
Symbol.iterator = key;
break;
}
}
} else {
Symbol.iterator = "@@iterator";
}
}
}
exports.ensureIterator = ensureIterator;
function ensureObservable(Symbol) {
if (!Symbol.observable) {
if (typeof Symbol.for === "function") {
Symbol.observable = Symbol.for("observable");
} else {
Symbol.observable = "@@observable";
}
}
}
exports.ensureObservable = ensureObservable;
exports.SymbolShim = polyfillSymbol(root_1.root);
}, function(module, exports, __webpack_require__) {
"use strict";
var Subscriber_1 = __webpack_require__(158);
var rxSubscriber_1 = __webpack_require__(165);
function toSubscriber(nextOrObserver, error, complete) {
if (nextOrObserver && typeof nextOrObserver === "object") {
if (nextOrObserver instanceof Subscriber_1.Subscriber) {
return nextOrObserver;
} else if (typeof nextOrObserver[rxSubscriber_1.rxSubscriber] === "function") {
return nextOrObserver[rxSubscriber_1.rxSubscriber]();
}
}
return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
}
exports.toSubscriber = toSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isFunction_1 = __webpack_require__(159);
var Subscription_1 = __webpack_require__(160);
var rxSubscriber_1 = __webpack_require__(165);
var Observer_1 = __webpack_require__(166);
var Subscriber = function(_super) {
__extends(Subscriber, _super);
function Subscriber(destinationOrNext, error, complete) {
_super.call(this);
this.syncErrorValue = null;
this.syncErrorThrown = false;
this.syncErrorThrowable = false;
this.isStopped = false;
switch (arguments.length) {
case 0:
this.destination = Observer_1.empty;
break;

case 1:
if (!destinationOrNext) {
this.destination = Observer_1.empty;
break;
}
if (typeof destinationOrNext === "object") {
if (destinationOrNext instanceof Subscriber) {
this.destination = destinationOrNext;
} else {
this.syncErrorThrowable = true;
this.destination = new SafeSubscriber(this, destinationOrNext);
}
break;
}

default:
this.syncErrorThrowable = true;
this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
break;
}
}
Subscriber.create = function(next, error, complete) {
var subscriber = new Subscriber(next, error, complete);
subscriber.syncErrorThrowable = false;
return subscriber;
};
Subscriber.prototype.next = function(value) {
if (!this.isStopped) {
this._next(value);
}
};
Subscriber.prototype.error = function(err) {
if (!this.isStopped) {
this.isStopped = true;
this._error(err);
}
};
Subscriber.prototype.complete = function() {
if (!this.isStopped) {
this.isStopped = true;
this._complete();
}
};
Subscriber.prototype.unsubscribe = function() {
if (this.isUnsubscribed) {
return;
}
this.isStopped = true;
_super.prototype.unsubscribe.call(this);
};
Subscriber.prototype._next = function(value) {
this.destination.next(value);
};
Subscriber.prototype._error = function(err) {
this.destination.error(err);
this.unsubscribe();
};
Subscriber.prototype._complete = function() {
this.destination.complete();
this.unsubscribe();
};
Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function() {
return this;
};
return Subscriber;
}(Subscription_1.Subscription);
exports.Subscriber = Subscriber;
var SafeSubscriber = function(_super) {
__extends(SafeSubscriber, _super);
function SafeSubscriber(_parent, observerOrNext, error, complete) {
_super.call(this);
this._parent = _parent;
var next;
var context = this;
if (isFunction_1.isFunction(observerOrNext)) {
next = observerOrNext;
} else if (observerOrNext) {
context = observerOrNext;
next = observerOrNext.next;
error = observerOrNext.error;
complete = observerOrNext.complete;
}
this._context = context;
this._next = next;
this._error = error;
this._complete = complete;
}
SafeSubscriber.prototype.next = function(value) {
if (!this.isStopped && this._next) {
var _parent = this._parent;
if (!_parent.syncErrorThrowable) {
this.__tryOrUnsub(this._next, value);
} else if (this.__tryOrSetError(_parent, this._next, value)) {
this.unsubscribe();
}
}
};
SafeSubscriber.prototype.error = function(err) {
if (!this.isStopped) {
var _parent = this._parent;
if (this._error) {
if (!_parent.syncErrorThrowable) {
this.__tryOrUnsub(this._error, err);
this.unsubscribe();
} else {
this.__tryOrSetError(_parent, this._error, err);
this.unsubscribe();
}
} else if (!_parent.syncErrorThrowable) {
this.unsubscribe();
throw err;
} else {
_parent.syncErrorValue = err;
_parent.syncErrorThrown = true;
this.unsubscribe();
}
}
};
SafeSubscriber.prototype.complete = function() {
if (!this.isStopped) {
var _parent = this._parent;
if (this._complete) {
if (!_parent.syncErrorThrowable) {
this.__tryOrUnsub(this._complete);
this.unsubscribe();
} else {
this.__tryOrSetError(_parent, this._complete);
this.unsubscribe();
}
} else {
this.unsubscribe();
}
}
};
SafeSubscriber.prototype.__tryOrUnsub = function(fn, value) {
try {
fn.call(this._context, value);
} catch (err) {
this.unsubscribe();
throw err;
}
};
SafeSubscriber.prototype.__tryOrSetError = function(parent, fn, value) {
try {
fn.call(this._context, value);
} catch (err) {
parent.syncErrorValue = err;
parent.syncErrorThrown = true;
return true;
}
return false;
};
SafeSubscriber.prototype._unsubscribe = function() {
var _parent = this._parent;
this._context = null;
this._parent = null;
_parent.unsubscribe();
};
return SafeSubscriber;
}(Subscriber);
}, function(module, exports) {
"use strict";
function isFunction(x) {
return typeof x === "function";
}
exports.isFunction = isFunction;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isArray_1 = __webpack_require__(161);
var isObject_1 = __webpack_require__(162);
var isFunction_1 = __webpack_require__(159);
var tryCatch_1 = __webpack_require__(163);
var errorObject_1 = __webpack_require__(164);
var Subscription = function() {
function Subscription(_unsubscribe) {
this.isUnsubscribed = false;
if (_unsubscribe) {
this._unsubscribe = _unsubscribe;
}
}
Subscription.prototype.unsubscribe = function() {
var hasErrors = false;
var errors;
if (this.isUnsubscribed) {
return;
}
this.isUnsubscribed = true;
var _a = this, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
this._subscriptions = null;
if (isFunction_1.isFunction(_unsubscribe)) {
var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
if (trial === errorObject_1.errorObject) {
hasErrors = true;
(errors = errors || []).push(errorObject_1.errorObject.e);
}
}
if (isArray_1.isArray(_subscriptions)) {
var index = -1;
var len = _subscriptions.length;
while (++index < len) {
var sub = _subscriptions[index];
if (isObject_1.isObject(sub)) {
var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
if (trial === errorObject_1.errorObject) {
hasErrors = true;
errors = errors || [];
var err = errorObject_1.errorObject.e;
if (err instanceof UnsubscriptionError) {
errors = errors.concat(err.errors);
} else {
errors.push(err);
}
}
}
}
}
if (hasErrors) {
throw new UnsubscriptionError(errors);
}
};
Subscription.prototype.add = function(subscription) {
if (!subscription || subscription === this || subscription === Subscription.EMPTY) {
return;
}
var sub = subscription;
switch (typeof subscription) {
case "function":
sub = new Subscription(subscription);

case "object":
if (sub.isUnsubscribed || typeof sub.unsubscribe !== "function") {
break;
} else if (this.isUnsubscribed) {
sub.unsubscribe();
} else {
(this._subscriptions || (this._subscriptions = [])).push(sub);
}
break;

default:
throw new Error("Unrecognized subscription " + subscription + " added to Subscription.");
}
};
Subscription.prototype.remove = function(subscription) {
if (subscription == null || subscription === this || subscription === Subscription.EMPTY) {
return;
}
var subscriptions = this._subscriptions;
if (subscriptions) {
var subscriptionIndex = subscriptions.indexOf(subscription);
if (subscriptionIndex !== -1) {
subscriptions.splice(subscriptionIndex, 1);
}
}
};
Subscription.EMPTY = function(empty) {
empty.isUnsubscribed = true;
return empty;
}(new Subscription());
return Subscription;
}();
exports.Subscription = Subscription;
var UnsubscriptionError = function(_super) {
__extends(UnsubscriptionError, _super);
function UnsubscriptionError(errors) {
_super.call(this, "unsubscriptoin error(s)");
this.errors = errors;
this.name = "UnsubscriptionError";
}
return UnsubscriptionError;
}(Error);
exports.UnsubscriptionError = UnsubscriptionError;
}, function(module, exports) {
"use strict";
exports.isArray = Array.isArray || function(x) {
return x && typeof x.length === "number";
};
}, function(module, exports) {
"use strict";
function isObject(x) {
return x != null && typeof x === "object";
}
exports.isObject = isObject;
}, function(module, exports, __webpack_require__) {
"use strict";
var errorObject_1 = __webpack_require__(164);
var tryCatchTarget;
function tryCatcher() {
try {
return tryCatchTarget.apply(this, arguments);
} catch (e) {
errorObject_1.errorObject.e = e;
return errorObject_1.errorObject;
}
}
function tryCatch(fn) {
tryCatchTarget = fn;
return tryCatcher;
}
exports.tryCatch = tryCatch;
}, function(module, exports) {
"use strict";
exports.errorObject = {
e: {}
};
}, function(module, exports, __webpack_require__) {
"use strict";
var SymbolShim_1 = __webpack_require__(156);
exports.rxSubscriber = SymbolShim_1.SymbolShim.for("rxSubscriber");
}, function(module, exports) {
"use strict";
exports.empty = {
isUnsubscribed: true,
next: function(value) {},
error: function(err) {
throw err;
},
complete: function() {}
};
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__(160);
var SubjectSubscription = function(_super) {
__extends(SubjectSubscription, _super);
function SubjectSubscription(subject, observer) {
_super.call(this);
this.subject = subject;
this.observer = observer;
this.isUnsubscribed = false;
}
SubjectSubscription.prototype.unsubscribe = function() {
if (this.isUnsubscribed) {
return;
}
this.isUnsubscribed = true;
var subject = this.subject;
var observers = subject.observers;
this.subject = null;
if (!observers || observers.length === 0 || subject.isUnsubscribed) {
return;
}
var subscriberIndex = observers.indexOf(this.observer);
if (subscriberIndex !== -1) {
observers.splice(subscriberIndex, 1);
}
};
return SubjectSubscription;
}(Subscription_1.Subscription);
exports.SubjectSubscription = SubjectSubscription;
}, function(module, exports) {
"use strict";
function throwError(e) {
throw e;
}
exports.throwError = throwError;
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ObjectUnsubscribedError = function(_super) {
__extends(ObjectUnsubscribedError, _super);
function ObjectUnsubscribedError() {
_super.call(this, "object unsubscribed");
this.name = "ObjectUnsubscribedError";
}
return ObjectUnsubscribedError;
}(Error);
exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = __webpack_require__(154);
var Observable_1 = __webpack_require__(153);
var PromiseObservable = function(_super) {
__extends(PromiseObservable, _super);
function PromiseObservable(promise, scheduler) {
if (scheduler === void 0) {
scheduler = null;
}
_super.call(this);
this.promise = promise;
this.scheduler = scheduler;
}
PromiseObservable.create = function(promise, scheduler) {
if (scheduler === void 0) {
scheduler = null;
}
return new PromiseObservable(promise, scheduler);
};
PromiseObservable.prototype._subscribe = function(subscriber) {
var _this = this;
var promise = this.promise;
var scheduler = this.scheduler;
if (scheduler == null) {
if (this._isScalar) {
if (!subscriber.isUnsubscribed) {
subscriber.next(this.value);
subscriber.complete();
}
} else {
promise.then(function(value) {
_this.value = value;
_this._isScalar = true;
if (!subscriber.isUnsubscribed) {
subscriber.next(value);
subscriber.complete();
}
}, function(err) {
if (!subscriber.isUnsubscribed) {
subscriber.error(err);
}
}).then(null, function(err) {
root_1.root.setTimeout(function() {
throw err;
});
});
}
} else {
if (this._isScalar) {
if (!subscriber.isUnsubscribed) {
return scheduler.schedule(dispatchNext, 0, {
value: this.value,
subscriber: subscriber
});
}
} else {
promise.then(function(value) {
_this.value = value;
_this._isScalar = true;
if (!subscriber.isUnsubscribed) {
subscriber.add(scheduler.schedule(dispatchNext, 0, {
value: value,
subscriber: subscriber
}));
}
}, function(err) {
if (!subscriber.isUnsubscribed) {
subscriber.add(scheduler.schedule(dispatchError, 0, {
err: err,
subscriber: subscriber
}));
}
}).then(null, function(err) {
root_1.root.setTimeout(function() {
throw err;
});
});
}
}
};
return PromiseObservable;
}(Observable_1.Observable);
exports.PromiseObservable = PromiseObservable;
function dispatchNext(_a) {
var value = _a.value, subscriber = _a.subscriber;
if (!subscriber.isUnsubscribed) {
subscriber.next(value);
subscriber.complete();
}
}
function dispatchError(_a) {
var err = _a.err, subscriber = _a.subscriber;
if (!subscriber.isUnsubscribed) {
subscriber.error(err);
}
}
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(154);
function toPromise(PromiseCtor) {
var _this = this;
if (!PromiseCtor) {
if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
PromiseCtor = root_1.root.Rx.config.Promise;
} else if (root_1.root.Promise) {
PromiseCtor = root_1.root.Promise;
}
}
if (!PromiseCtor) {
throw new Error("no Promise impl found");
}
return new PromiseCtor(function(resolve, reject) {
var value;
_this.subscribe(function(x) {
return value = x;
}, function(err) {
return reject(err);
}, function() {
return resolve(value);
});
});
}
exports.toPromise = toPromise;
}, function(module, exports) {
"use strict";
(function(RecordType) {
RecordType[RecordType["Self"] = 0] = "Self";
RecordType[RecordType["Const"] = 1] = "Const";
RecordType[RecordType["PrimitiveOp"] = 2] = "PrimitiveOp";
RecordType[RecordType["PropertyRead"] = 3] = "PropertyRead";
RecordType[RecordType["PropertyWrite"] = 4] = "PropertyWrite";
RecordType[RecordType["Local"] = 5] = "Local";
RecordType[RecordType["InvokeMethod"] = 6] = "InvokeMethod";
RecordType[RecordType["InvokeClosure"] = 7] = "InvokeClosure";
RecordType[RecordType["KeyedRead"] = 8] = "KeyedRead";
RecordType[RecordType["KeyedWrite"] = 9] = "KeyedWrite";
RecordType[RecordType["Pipe"] = 10] = "Pipe";
RecordType[RecordType["Interpolate"] = 11] = "Interpolate";
RecordType[RecordType["SafeProperty"] = 12] = "SafeProperty";
RecordType[RecordType["CollectionLiteral"] = 13] = "CollectionLiteral";
RecordType[RecordType["SafeMethodInvoke"] = 14] = "SafeMethodInvoke";
RecordType[RecordType["DirectiveLifecycle"] = 15] = "DirectiveLifecycle";
RecordType[RecordType["Chain"] = 16] = "Chain";
RecordType[RecordType["SkipRecordsIf"] = 17] = "SkipRecordsIf";
RecordType[RecordType["SkipRecordsIfNot"] = 18] = "SkipRecordsIfNot";
RecordType[RecordType["SkipRecords"] = 19] = "SkipRecords";
})(exports.RecordType || (exports.RecordType = {}));
var RecordType = exports.RecordType;
var ProtoRecord = function() {
function ProtoRecord(mode, name, funcOrValue, args, fixedArgs, contextIndex, directiveIndex, selfIndex, bindingRecord, lastInBinding, lastInDirective, argumentToPureFunction, referencedBySelf, propertyBindingIndex) {
this.mode = mode;
this.name = name;
this.funcOrValue = funcOrValue;
this.args = args;
this.fixedArgs = fixedArgs;
this.contextIndex = contextIndex;
this.directiveIndex = directiveIndex;
this.selfIndex = selfIndex;
this.bindingRecord = bindingRecord;
this.lastInBinding = lastInBinding;
this.lastInDirective = lastInDirective;
this.argumentToPureFunction = argumentToPureFunction;
this.referencedBySelf = referencedBySelf;
this.propertyBindingIndex = propertyBindingIndex;
}
ProtoRecord.prototype.isPureFunction = function() {
return this.mode === RecordType.Interpolate || this.mode === RecordType.CollectionLiteral;
};
ProtoRecord.prototype.isUsedByOtherRecord = function() {
return !this.lastInBinding || this.referencedBySelf;
};
ProtoRecord.prototype.shouldBeChecked = function() {
return this.argumentToPureFunction || this.lastInBinding || this.isPureFunction() || this.isPipeRecord();
};
ProtoRecord.prototype.isPipeRecord = function() {
return this.mode === RecordType.Pipe;
};
ProtoRecord.prototype.isConditionalSkipRecord = function() {
return this.mode === RecordType.SkipRecordsIfNot || this.mode === RecordType.SkipRecordsIf;
};
ProtoRecord.prototype.isUnconditionalSkipRecord = function() {
return this.mode === RecordType.SkipRecords;
};
ProtoRecord.prototype.isSkipRecord = function() {
return this.isConditionalSkipRecord() || this.isUnconditionalSkipRecord();
};
ProtoRecord.prototype.isLifeCycleRecord = function() {
return this.mode === RecordType.DirectiveLifecycle;
};
return ProtoRecord;
}();
exports.ProtoRecord = ProtoRecord;
}, function(module, exports) {
"use strict";
var EventBinding = function() {
function EventBinding(eventName, elIndex, dirIndex, records) {
this.eventName = eventName;
this.elIndex = elIndex;
this.dirIndex = dirIndex;
this.records = records;
}
return EventBinding;
}();
exports.EventBinding = EventBinding;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var collection_1 = __webpack_require__(115);
var proto_record_1 = __webpack_require__(172);
function coalesce(srcRecords) {
var dstRecords = [];
var excludedIdxs = [];
var indexMap = new collection_1.Map();
var skipDepth = 0;
var skipSources = collection_1.ListWrapper.createFixedSize(srcRecords.length);
for (var protoIndex = 0; protoIndex < srcRecords.length; protoIndex++) {
var skipRecord = skipSources[protoIndex];
if (lang_1.isPresent(skipRecord)) {
skipDepth--;
skipRecord.fixedArgs[0] = dstRecords.length;
}
var src = srcRecords[protoIndex];
var dst = _cloneAndUpdateIndexes(src, dstRecords, indexMap);
if (dst.isSkipRecord()) {
dstRecords.push(dst);
skipDepth++;
skipSources[dst.fixedArgs[0]] = dst;
} else {
var record = _mayBeAddRecord(dst, dstRecords, excludedIdxs, skipDepth > 0);
indexMap.set(src.selfIndex, record.selfIndex);
}
}
return _optimizeSkips(dstRecords);
}
exports.coalesce = coalesce;
function _optimizeSkips(srcRecords) {
var dstRecords = [];
var skipSources = collection_1.ListWrapper.createFixedSize(srcRecords.length);
var indexMap = new collection_1.Map();
for (var protoIndex = 0; protoIndex < srcRecords.length; protoIndex++) {
var skipRecord = skipSources[protoIndex];
if (lang_1.isPresent(skipRecord)) {
skipRecord.fixedArgs[0] = dstRecords.length;
}
var src = srcRecords[protoIndex];
if (src.isSkipRecord()) {
if (src.isConditionalSkipRecord() && src.fixedArgs[0] === protoIndex + 2 && protoIndex < srcRecords.length - 1 && srcRecords[protoIndex + 1].mode === proto_record_1.RecordType.SkipRecords) {
src.mode = src.mode === proto_record_1.RecordType.SkipRecordsIf ? proto_record_1.RecordType.SkipRecordsIfNot : proto_record_1.RecordType.SkipRecordsIf;
src.fixedArgs[0] = srcRecords[protoIndex + 1].fixedArgs[0];
protoIndex++;
}
if (src.fixedArgs[0] > protoIndex + 1) {
var dst = _cloneAndUpdateIndexes(src, dstRecords, indexMap);
dstRecords.push(dst);
skipSources[dst.fixedArgs[0]] = dst;
}
} else {
var dst = _cloneAndUpdateIndexes(src, dstRecords, indexMap);
dstRecords.push(dst);
indexMap.set(src.selfIndex, dst.selfIndex);
}
}
return dstRecords;
}
function _mayBeAddRecord(record, dstRecords, excludedIdxs, excluded) {
var match = _findFirstMatch(record, dstRecords, excludedIdxs);
if (lang_1.isPresent(match)) {
if (record.lastInBinding) {
dstRecords.push(_createSelfRecord(record, match.selfIndex, dstRecords.length + 1));
match.referencedBySelf = true;
} else {
if (record.argumentToPureFunction) {
match.argumentToPureFunction = true;
}
}
return match;
}
if (excluded) {
excludedIdxs.push(record.selfIndex);
}
dstRecords.push(record);
return record;
}
function _findFirstMatch(record, dstRecords, excludedIdxs) {
return dstRecords.find(function(rr) {
return excludedIdxs.indexOf(rr.selfIndex) == -1 && rr.mode !== proto_record_1.RecordType.DirectiveLifecycle && _haveSameDirIndex(rr, record) && rr.mode === record.mode && lang_1.looseIdentical(rr.funcOrValue, record.funcOrValue) && rr.contextIndex === record.contextIndex && lang_1.looseIdentical(rr.name, record.name) && collection_1.ListWrapper.equals(rr.args, record.args);
});
}
function _cloneAndUpdateIndexes(record, dstRecords, indexMap) {
var args = record.args.map(function(src) {
return _srcToDstSelfIndex(indexMap, src);
});
var contextIndex = _srcToDstSelfIndex(indexMap, record.contextIndex);
var selfIndex = dstRecords.length + 1;
return new proto_record_1.ProtoRecord(record.mode, record.name, record.funcOrValue, args, record.fixedArgs, contextIndex, record.directiveIndex, selfIndex, record.bindingRecord, record.lastInBinding, record.lastInDirective, record.argumentToPureFunction, record.referencedBySelf, record.propertyBindingIndex);
}
function _srcToDstSelfIndex(indexMap, srcIdx) {
var dstIdx = indexMap.get(srcIdx);
return lang_1.isPresent(dstIdx) ? dstIdx : srcIdx;
}
function _createSelfRecord(r, contextIndex, selfIndex) {
return new proto_record_1.ProtoRecord(proto_record_1.RecordType.Self, "self", null, [], r.fixedArgs, contextIndex, r.directiveIndex, selfIndex, r.bindingRecord, r.lastInBinding, r.lastInDirective, false, false, r.propertyBindingIndex);
}
function _haveSameDirIndex(a, b) {
var di1 = lang_1.isBlank(a.directiveIndex) ? null : a.directiveIndex.directiveIndex;
var ei1 = lang_1.isBlank(a.directiveIndex) ? null : a.directiveIndex.elementIndex;
var di2 = lang_1.isBlank(b.directiveIndex) ? null : b.directiveIndex.directiveIndex;
var ei2 = lang_1.isBlank(b.directiveIndex) ? null : b.directiveIndex.elementIndex;
return di1 === di2 && ei1 === ei2;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var change_detection_jit_generator_1 = __webpack_require__(176);
var JitProtoChangeDetector = function() {
function JitProtoChangeDetector(definition) {
this.definition = definition;
this._factory = this._createFactory(definition);
}
JitProtoChangeDetector.isSupported = function() {
return true;
};
JitProtoChangeDetector.prototype.instantiate = function() {
return this._factory();
};
JitProtoChangeDetector.prototype._createFactory = function(definition) {
return new change_detection_jit_generator_1.ChangeDetectorJITGenerator(definition, "util", "AbstractChangeDetector", "ChangeDetectorStatus").generate();
};
return JitProtoChangeDetector;
}();
exports.JitProtoChangeDetector = JitProtoChangeDetector;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(115);
var abstract_change_detector_1 = __webpack_require__(146);
var change_detection_util_1 = __webpack_require__(141);
var proto_record_1 = __webpack_require__(172);
var codegen_name_util_1 = __webpack_require__(177);
var codegen_logic_util_1 = __webpack_require__(178);
var codegen_facade_1 = __webpack_require__(179);
var constants_1 = __webpack_require__(139);
var proto_change_detector_1 = __webpack_require__(140);
var IS_CHANGED_LOCAL = "isChanged";
var CHANGES_LOCAL = "changes";
var ChangeDetectorJITGenerator = function() {
function ChangeDetectorJITGenerator(definition, changeDetectionUtilVarName, abstractChangeDetectorVarName, changeDetectorStateVarName) {
this.changeDetectionUtilVarName = changeDetectionUtilVarName;
this.abstractChangeDetectorVarName = abstractChangeDetectorVarName;
this.changeDetectorStateVarName = changeDetectorStateVarName;
var propertyBindingRecords = proto_change_detector_1.createPropertyRecords(definition);
var eventBindingRecords = proto_change_detector_1.createEventRecords(definition);
var propertyBindingTargets = definition.bindingRecords.map(function(b) {
return b.target;
});
this.id = definition.id;
this.changeDetectionStrategy = definition.strategy;
this.genConfig = definition.genConfig;
this.records = propertyBindingRecords;
this.propertyBindingTargets = propertyBindingTargets;
this.eventBindings = eventBindingRecords;
this.directiveRecords = definition.directiveRecords;
this._names = new codegen_name_util_1.CodegenNameUtil(this.records, this.eventBindings, this.directiveRecords, this.changeDetectionUtilVarName);
this._logic = new codegen_logic_util_1.CodegenLogicUtil(this._names, this.changeDetectionUtilVarName, this.changeDetectorStateVarName);
this.typeName = codegen_name_util_1.sanitizeName("ChangeDetector_" + this.id);
}
ChangeDetectorJITGenerator.prototype.generate = function() {
var factorySource = "\n      " + this.generateSource() + "\n      return function() {\n        return new " + this.typeName + "();\n      }\n    ";
return new Function(this.abstractChangeDetectorVarName, this.changeDetectionUtilVarName, this.changeDetectorStateVarName, factorySource)(abstract_change_detector_1.AbstractChangeDetector, change_detection_util_1.ChangeDetectionUtil, constants_1.ChangeDetectorState);
};
ChangeDetectorJITGenerator.prototype.generateSource = function() {
return "\n      var " + this.typeName + " = function " + this.typeName + "() {\n        " + this.abstractChangeDetectorVarName + ".call(\n            this, " + JSON.stringify(this.id) + ", " + this.records.length + ",\n            " + this.typeName + ".gen_propertyBindingTargets, " + this.typeName + ".gen_directiveIndices,\n            " + codegen_facade_1.codify(this.changeDetectionStrategy) + ");\n        this.dehydrateDirectives(false);\n      }\n\n      " + this.typeName + ".prototype = Object.create(" + this.abstractChangeDetectorVarName + ".prototype);\n\n      " + this.typeName + ".prototype.detectChangesInRecordsInternal = function(throwOnChange) {\n        " + this._names.genInitLocals() + "\n        var " + IS_CHANGED_LOCAL + " = false;\n        var " + CHANGES_LOCAL + " = null;\n\n        " + this._genAllRecords(this.records) + "\n      }\n\n      " + this._maybeGenHandleEventInternal() + "\n\n      " + this._maybeGenAfterContentLifecycleCallbacks() + "\n\n      " + this._maybeGenAfterViewLifecycleCallbacks() + "\n\n      " + this._maybeGenHydrateDirectives() + "\n\n      " + this._maybeGenDehydrateDirectives() + "\n\n      " + this._genPropertyBindingTargets() + "\n\n      " + this._genDirectiveIndices() + "\n    ";
};
ChangeDetectorJITGenerator.prototype._genPropertyBindingTargets = function() {
var targets = this._logic.genPropertyBindingTargets(this.propertyBindingTargets, this.genConfig.genDebugInfo);
return this.typeName + ".gen_propertyBindingTargets = " + targets + ";";
};
ChangeDetectorJITGenerator.prototype._genDirectiveIndices = function() {
var indices = this._logic.genDirectiveIndices(this.directiveRecords);
return this.typeName + ".gen_directiveIndices = " + indices + ";";
};
ChangeDetectorJITGenerator.prototype._maybeGenHandleEventInternal = function() {
var _this = this;
if (this.eventBindings.length > 0) {
var handlers = this.eventBindings.map(function(eb) {
return _this._genEventBinding(eb);
}).join("\n");
return "\n        " + this.typeName + ".prototype.handleEventInternal = function(eventName, elIndex, locals) {\n          var " + this._names.getPreventDefaultAccesor() + " = false;\n          " + this._names.genInitEventLocals() + "\n          " + handlers + "\n          return " + this._names.getPreventDefaultAccesor() + ";\n        }\n      ";
} else {
return "";
}
};
ChangeDetectorJITGenerator.prototype._genEventBinding = function(eb) {
var _this = this;
var codes = [];
this._endOfBlockIdxs = [];
collection_1.ListWrapper.forEachWithIndex(eb.records, function(r, i) {
var code;
if (r.isConditionalSkipRecord()) {
code = _this._genConditionalSkip(r, _this._names.getEventLocalName(eb, i));
} else if (r.isUnconditionalSkipRecord()) {
code = _this._genUnconditionalSkip(r);
} else {
code = _this._genEventBindingEval(eb, r);
}
code += _this._genEndOfSkipBlock(i);
codes.push(code);
});
return '\n    if (eventName === "' + eb.eventName + '" && elIndex === ' + eb.elIndex + ") {\n      " + codes.join("\n") + "\n    }";
};
ChangeDetectorJITGenerator.prototype._genEventBindingEval = function(eb, r) {
if (r.lastInBinding) {
var evalRecord = this._logic.genEventBindingEvalValue(eb, r);
var markPath = this._genMarkPathToRootAsCheckOnce(r);
var prevDefault = this._genUpdatePreventDefault(eb, r);
return markPath + "\n" + evalRecord + "\n" + prevDefault;
} else {
return this._logic.genEventBindingEvalValue(eb, r);
}
};
ChangeDetectorJITGenerator.prototype._genMarkPathToRootAsCheckOnce = function(r) {
var br = r.bindingRecord;
if (br.isDefaultChangeDetection()) {
return "";
} else {
return this._names.getDetectorName(br.directiveRecord.directiveIndex) + ".markPathToRootAsCheckOnce();";
}
};
ChangeDetectorJITGenerator.prototype._genUpdatePreventDefault = function(eb, r) {
var local = this._names.getEventLocalName(eb, r.selfIndex);
return "if (" + local + " === false) { " + this._names.getPreventDefaultAccesor() + " = true};";
};
ChangeDetectorJITGenerator.prototype._maybeGenDehydrateDirectives = function() {
var destroyPipesCode = this._names.genPipeOnDestroy();
var destroyDirectivesCode = this._logic.genDirectivesOnDestroy(this.directiveRecords);
var dehydrateFieldsCode = this._names.genDehydrateFields();
if (!destroyPipesCode && !destroyDirectivesCode && !dehydrateFieldsCode) return "";
return this.typeName + ".prototype.dehydrateDirectives = function(destroyPipes) {\n        if (destroyPipes) {\n          " + destroyPipesCode + "\n          " + destroyDirectivesCode + "\n        }\n        " + dehydrateFieldsCode + "\n    }";
};
ChangeDetectorJITGenerator.prototype._maybeGenHydrateDirectives = function() {
var hydrateDirectivesCode = this._logic.genHydrateDirectives(this.directiveRecords);
var hydrateDetectorsCode = this._logic.genHydrateDetectors(this.directiveRecords);
if (!hydrateDirectivesCode && !hydrateDetectorsCode) return "";
return this.typeName + ".prototype.hydrateDirectives = function(directives) {\n      " + hydrateDirectivesCode + "\n      " + hydrateDetectorsCode + "\n    }";
};
ChangeDetectorJITGenerator.prototype._maybeGenAfterContentLifecycleCallbacks = function() {
var notifications = this._logic.genContentLifecycleCallbacks(this.directiveRecords);
if (notifications.length > 0) {
var directiveNotifications = notifications.join("\n");
return "\n        " + this.typeName + ".prototype.afterContentLifecycleCallbacksInternal = function() {\n          " + directiveNotifications + "\n        }\n      ";
} else {
return "";
}
};
ChangeDetectorJITGenerator.prototype._maybeGenAfterViewLifecycleCallbacks = function() {
var notifications = this._logic.genViewLifecycleCallbacks(this.directiveRecords);
if (notifications.length > 0) {
var directiveNotifications = notifications.join("\n");
return "\n        " + this.typeName + ".prototype.afterViewLifecycleCallbacksInternal = function() {\n          " + directiveNotifications + "\n        }\n      ";
} else {
return "";
}
};
ChangeDetectorJITGenerator.prototype._genAllRecords = function(rs) {
var codes = [];
this._endOfBlockIdxs = [];
for (var i = 0; i < rs.length; i++) {
var code = void 0;
var r = rs[i];
if (r.isLifeCycleRecord()) {
code = this._genDirectiveLifecycle(r);
} else if (r.isPipeRecord()) {
code = this._genPipeCheck(r);
} else if (r.isConditionalSkipRecord()) {
code = this._genConditionalSkip(r, this._names.getLocalName(r.contextIndex));
} else if (r.isUnconditionalSkipRecord()) {
code = this._genUnconditionalSkip(r);
} else {
code = this._genReferenceCheck(r);
}
code = "\n        " + this._maybeFirstInBinding(r) + "\n        " + code + "\n        " + this._maybeGenLastInDirective(r) + "\n        " + this._genEndOfSkipBlock(i) + "\n      ";
codes.push(code);
}
return codes.join("\n");
};
ChangeDetectorJITGenerator.prototype._genConditionalSkip = function(r, condition) {
var maybeNegate = r.mode === proto_record_1.RecordType.SkipRecordsIf ? "!" : "";
this._endOfBlockIdxs.push(r.fixedArgs[0] - 1);
return "if (" + maybeNegate + condition + ") {";
};
ChangeDetectorJITGenerator.prototype._genUnconditionalSkip = function(r) {
this._endOfBlockIdxs.pop();
this._endOfBlockIdxs.push(r.fixedArgs[0] - 1);
return "} else {";
};
ChangeDetectorJITGenerator.prototype._genEndOfSkipBlock = function(protoIndex) {
if (!collection_1.ListWrapper.isEmpty(this._endOfBlockIdxs)) {
var endOfBlock = collection_1.ListWrapper.last(this._endOfBlockIdxs);
if (protoIndex === endOfBlock) {
this._endOfBlockIdxs.pop();
return "}";
}
}
return "";
};
ChangeDetectorJITGenerator.prototype._genDirectiveLifecycle = function(r) {
if (r.name === "DoCheck") {
return this._genOnCheck(r);
} else if (r.name === "OnInit") {
return this._genOnInit(r);
} else if (r.name === "OnChanges") {
return this._genOnChange(r);
} else {
throw new exceptions_1.BaseException("Unknown lifecycle event '" + r.name + "'");
}
};
ChangeDetectorJITGenerator.prototype._genPipeCheck = function(r) {
var _this = this;
var context = this._names.getLocalName(r.contextIndex);
var argString = r.args.map(function(arg) {
return _this._names.getLocalName(arg);
}).join(", ");
var oldValue = this._names.getFieldName(r.selfIndex);
var newValue = this._names.getLocalName(r.selfIndex);
var pipe = this._names.getPipeName(r.selfIndex);
var pipeName = r.name;
var init = "\n      if (" + pipe + " === " + this.changeDetectionUtilVarName + ".uninitialized) {\n        " + pipe + " = " + this._names.getPipesAccessorName() + ".get('" + pipeName + "');\n      }\n    ";
var read = newValue + " = " + pipe + ".pipe.transform(" + context + ", [" + argString + "]);";
var contexOrArgCheck = r.args.map(function(a) {
return _this._names.getChangeName(a);
});
contexOrArgCheck.push(this._names.getChangeName(r.contextIndex));
var condition = "!" + pipe + ".pure || (" + contexOrArgCheck.join(" || ") + ")";
var check = "\n      " + this._genThrowOnChangeCheck(oldValue, newValue) + "\n      if (" + this.changeDetectionUtilVarName + ".looseNotIdentical(" + oldValue + ", " + newValue + ")) {\n        " + newValue + " = " + this.changeDetectionUtilVarName + ".unwrapValue(" + newValue + ")\n        " + this._genChangeMarker(r) + "\n        " + this._genUpdateDirectiveOrElement(r) + "\n        " + this._genAddToChanges(r) + "\n        " + oldValue + " = " + newValue + ";\n      }\n    ";
var genCode = r.shouldBeChecked() ? "" + read + check : read;
if (r.isUsedByOtherRecord()) {
return init + " if (" + condition + ") { " + genCode + " } else { " + newValue + " = " + oldValue + "; }";
} else {
return init + " if (" + condition + ") { " + genCode + " }";
}
};
ChangeDetectorJITGenerator.prototype._genReferenceCheck = function(r) {
var _this = this;
var oldValue = this._names.getFieldName(r.selfIndex);
var newValue = this._names.getLocalName(r.selfIndex);
var read = "\n      " + this._logic.genPropertyBindingEvalValue(r) + "\n    ";
var check = "\n      " + this._genThrowOnChangeCheck(oldValue, newValue) + "\n      if (" + this.changeDetectionUtilVarName + ".looseNotIdentical(" + oldValue + ", " + newValue + ")) {\n        " + this._genChangeMarker(r) + "\n        " + this._genUpdateDirectiveOrElement(r) + "\n        " + this._genAddToChanges(r) + "\n        " + oldValue + " = " + newValue + ";\n      }\n    ";
var genCode = r.shouldBeChecked() ? "" + read + check : read;
if (r.isPureFunction()) {
var condition = r.args.map(function(a) {
return _this._names.getChangeName(a);
}).join(" || ");
if (r.isUsedByOtherRecord()) {
return "if (" + condition + ") { " + genCode + " } else { " + newValue + " = " + oldValue + "; }";
} else {
return "if (" + condition + ") { " + genCode + " }";
}
} else {
return genCode;
}
};
ChangeDetectorJITGenerator.prototype._genChangeMarker = function(r) {
return r.argumentToPureFunction ? this._names.getChangeName(r.selfIndex) + " = true" : "";
};
ChangeDetectorJITGenerator.prototype._genUpdateDirectiveOrElement = function(r) {
if (!r.lastInBinding) return "";
var newValue = this._names.getLocalName(r.selfIndex);
var notifyDebug = this.genConfig.logBindingUpdate ? "this.logBindingUpdate(" + newValue + ");" : "";
var br = r.bindingRecord;
if (br.target.isDirective()) {
var directiveProperty = this._names.getDirectiveName(br.directiveRecord.directiveIndex) + "." + br.target.name;
return "\n        " + directiveProperty + " = " + newValue + ";\n        " + notifyDebug + "\n        " + IS_CHANGED_LOCAL + " = true;\n      ";
} else {
return "\n        this.notifyDispatcher(" + newValue + ");\n        " + notifyDebug + "\n      ";
}
};
ChangeDetectorJITGenerator.prototype._genThrowOnChangeCheck = function(oldValue, newValue) {
if (lang_1.assertionsEnabled()) {
return "\n        if (throwOnChange && !" + this.changeDetectionUtilVarName + ".devModeEqual(" + oldValue + ", " + newValue + ")) {\n          this.throwOnChangeError(" + oldValue + ", " + newValue + ");\n        }\n        ";
} else {
return "";
}
};
ChangeDetectorJITGenerator.prototype._genAddToChanges = function(r) {
var newValue = this._names.getLocalName(r.selfIndex);
var oldValue = this._names.getFieldName(r.selfIndex);
if (!r.bindingRecord.callOnChanges()) return "";
return CHANGES_LOCAL + " = this.addChange(" + CHANGES_LOCAL + ", " + oldValue + ", " + newValue + ");";
};
ChangeDetectorJITGenerator.prototype._maybeFirstInBinding = function(r) {
var prev = change_detection_util_1.ChangeDetectionUtil.protoByIndex(this.records, r.selfIndex - 1);
var firstInBinding = lang_1.isBlank(prev) || prev.bindingRecord !== r.bindingRecord;
return firstInBinding && !r.bindingRecord.isDirectiveLifecycle() ? this._names.getPropertyBindingIndex() + " = " + r.propertyBindingIndex + ";" : "";
};
ChangeDetectorJITGenerator.prototype._maybeGenLastInDirective = function(r) {
if (!r.lastInDirective) return "";
return "\n      " + CHANGES_LOCAL + " = null;\n      " + this._genNotifyOnPushDetectors(r) + "\n      " + IS_CHANGED_LOCAL + " = false;\n    ";
};
ChangeDetectorJITGenerator.prototype._genOnCheck = function(r) {
var br = r.bindingRecord;
return "if (!throwOnChange) " + this._names.getDirectiveName(br.directiveRecord.directiveIndex) + ".ngDoCheck();";
};
ChangeDetectorJITGenerator.prototype._genOnInit = function(r) {
var br = r.bindingRecord;
return "if (!throwOnChange && " + this._names.getStateName() + " === " + this.changeDetectorStateVarName + ".NeverChecked) " + this._names.getDirectiveName(br.directiveRecord.directiveIndex) + ".ngOnInit();";
};
ChangeDetectorJITGenerator.prototype._genOnChange = function(r) {
var br = r.bindingRecord;
return "if (!throwOnChange && " + CHANGES_LOCAL + ") " + this._names.getDirectiveName(br.directiveRecord.directiveIndex) + ".ngOnChanges(" + CHANGES_LOCAL + ");";
};
ChangeDetectorJITGenerator.prototype._genNotifyOnPushDetectors = function(r) {
var br = r.bindingRecord;
if (!r.lastInDirective || br.isDefaultChangeDetection()) return "";
var retVal = "\n      if(" + IS_CHANGED_LOCAL + ") {\n        " + this._names.getDetectorName(br.directiveRecord.directiveIndex) + ".markAsCheckOnce();\n      }\n    ";
return retVal;
};
return ChangeDetectorJITGenerator;
}();
exports.ChangeDetectorJITGenerator = ChangeDetectorJITGenerator;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var collection_1 = __webpack_require__(115);
var _STATE_ACCESSOR = "state";
var _CONTEXT_ACCESSOR = "context";
var _PROP_BINDING_INDEX = "propertyBindingIndex";
var _DIRECTIVES_ACCESSOR = "directiveIndices";
var _DISPATCHER_ACCESSOR = "dispatcher";
var _LOCALS_ACCESSOR = "locals";
var _MODE_ACCESSOR = "mode";
var _PIPES_ACCESSOR = "pipes";
var _PROTOS_ACCESSOR = "protos";
exports.CONTEXT_ACCESSOR = "context";
exports.CONTEXT_INDEX = 0;
var _FIELD_PREFIX = "this.";
var _whiteSpaceRegExp = /\W/g;
function sanitizeName(s) {
return lang_1.StringWrapper.replaceAll(s, _whiteSpaceRegExp, "");
}
exports.sanitizeName = sanitizeName;
var CodegenNameUtil = function() {
function CodegenNameUtil(_records, _eventBindings, _directiveRecords, _utilName) {
this._records = _records;
this._eventBindings = _eventBindings;
this._directiveRecords = _directiveRecords;
this._utilName = _utilName;
this._sanitizedEventNames = new collection_1.Map();
this._sanitizedNames = collection_1.ListWrapper.createFixedSize(this._records.length + 1);
this._sanitizedNames[exports.CONTEXT_INDEX] = exports.CONTEXT_ACCESSOR;
for (var i = 0, iLen = this._records.length; i < iLen; ++i) {
this._sanitizedNames[i + 1] = sanitizeName("" + this._records[i].name + i);
}
for (var ebIndex = 0; ebIndex < _eventBindings.length; ++ebIndex) {
var eb = _eventBindings[ebIndex];
var names = [ exports.CONTEXT_ACCESSOR ];
for (var i = 0, iLen = eb.records.length; i < iLen; ++i) {
names.push(sanitizeName("" + eb.records[i].name + i + "_" + ebIndex));
}
this._sanitizedEventNames.set(eb, names);
}
}
CodegenNameUtil.prototype._addFieldPrefix = function(name) {
return "" + _FIELD_PREFIX + name;
};
CodegenNameUtil.prototype.getDispatcherName = function() {
return this._addFieldPrefix(_DISPATCHER_ACCESSOR);
};
CodegenNameUtil.prototype.getPipesAccessorName = function() {
return this._addFieldPrefix(_PIPES_ACCESSOR);
};
CodegenNameUtil.prototype.getProtosName = function() {
return this._addFieldPrefix(_PROTOS_ACCESSOR);
};
CodegenNameUtil.prototype.getDirectivesAccessorName = function() {
return this._addFieldPrefix(_DIRECTIVES_ACCESSOR);
};
CodegenNameUtil.prototype.getLocalsAccessorName = function() {
return this._addFieldPrefix(_LOCALS_ACCESSOR);
};
CodegenNameUtil.prototype.getStateName = function() {
return this._addFieldPrefix(_STATE_ACCESSOR);
};
CodegenNameUtil.prototype.getModeName = function() {
return this._addFieldPrefix(_MODE_ACCESSOR);
};
CodegenNameUtil.prototype.getPropertyBindingIndex = function() {
return this._addFieldPrefix(_PROP_BINDING_INDEX);
};
CodegenNameUtil.prototype.getLocalName = function(idx) {
return "l_" + this._sanitizedNames[idx];
};
CodegenNameUtil.prototype.getEventLocalName = function(eb, idx) {
return "l_" + this._sanitizedEventNames.get(eb)[idx];
};
CodegenNameUtil.prototype.getChangeName = function(idx) {
return "c_" + this._sanitizedNames[idx];
};
CodegenNameUtil.prototype.genInitLocals = function() {
var declarations = [];
var assignments = [];
for (var i = 0, iLen = this.getFieldCount(); i < iLen; ++i) {
if (i == exports.CONTEXT_INDEX) {
declarations.push(this.getLocalName(i) + " = " + this.getFieldName(i));
} else {
var rec = this._records[i - 1];
if (rec.argumentToPureFunction) {
var changeName = this.getChangeName(i);
declarations.push(this.getLocalName(i) + "," + changeName);
assignments.push(changeName);
} else {
declarations.push("" + this.getLocalName(i));
}
}
}
var assignmentsCode = collection_1.ListWrapper.isEmpty(assignments) ? "" : assignments.join("=") + " = false;";
return "var " + declarations.join(",") + ";" + assignmentsCode;
};
CodegenNameUtil.prototype.genInitEventLocals = function() {
var _this = this;
var res = [ this.getLocalName(exports.CONTEXT_INDEX) + " = " + this.getFieldName(exports.CONTEXT_INDEX) ];
this._sanitizedEventNames.forEach(function(names, eb) {
for (var i = 0; i < names.length; ++i) {
if (i !== exports.CONTEXT_INDEX) {
res.push("" + _this.getEventLocalName(eb, i));
}
}
});
return res.length > 1 ? "var " + res.join(",") + ";" : "";
};
CodegenNameUtil.prototype.getPreventDefaultAccesor = function() {
return "preventDefault";
};
CodegenNameUtil.prototype.getFieldCount = function() {
return this._sanitizedNames.length;
};
CodegenNameUtil.prototype.getFieldName = function(idx) {
return this._addFieldPrefix(this._sanitizedNames[idx]);
};
CodegenNameUtil.prototype.getAllFieldNames = function() {
var fieldList = [];
for (var k = 0, kLen = this.getFieldCount(); k < kLen; ++k) {
if (k === 0 || this._records[k - 1].shouldBeChecked()) {
fieldList.push(this.getFieldName(k));
}
}
for (var i = 0, iLen = this._records.length; i < iLen; ++i) {
var rec = this._records[i];
if (rec.isPipeRecord()) {
fieldList.push(this.getPipeName(rec.selfIndex));
}
}
for (var j = 0, jLen = this._directiveRecords.length; j < jLen; ++j) {
var dRec = this._directiveRecords[j];
fieldList.push(this.getDirectiveName(dRec.directiveIndex));
if (!dRec.isDefaultChangeDetection()) {
fieldList.push(this.getDetectorName(dRec.directiveIndex));
}
}
return fieldList;
};
CodegenNameUtil.prototype.genDehydrateFields = function() {
var fields = this.getAllFieldNames();
collection_1.ListWrapper.removeAt(fields, exports.CONTEXT_INDEX);
if (collection_1.ListWrapper.isEmpty(fields)) return "";
fields.push(this._utilName + ".uninitialized;");
return fields.join(" = ");
};
CodegenNameUtil.prototype.genPipeOnDestroy = function() {
var _this = this;
return this._records.filter(function(r) {
return r.isPipeRecord();
}).map(function(r) {
return _this._utilName + ".callPipeOnDestroy(" + _this.getPipeName(r.selfIndex) + ");";
}).join("\n");
};
CodegenNameUtil.prototype.getPipeName = function(idx) {
return this._addFieldPrefix(this._sanitizedNames[idx] + "_pipe");
};
CodegenNameUtil.prototype.getDirectiveName = function(d) {
return this._addFieldPrefix("directive_" + d.name);
};
CodegenNameUtil.prototype.getDetectorName = function(d) {
return this._addFieldPrefix("detector_" + d.name);
};
return CodegenNameUtil;
}();
exports.CodegenNameUtil = CodegenNameUtil;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var codegen_facade_1 = __webpack_require__(179);
var proto_record_1 = __webpack_require__(172);
var exceptions_1 = __webpack_require__(117);
var CodegenLogicUtil = function() {
function CodegenLogicUtil(_names, _utilName, _changeDetectorStateName) {
this._names = _names;
this._utilName = _utilName;
this._changeDetectorStateName = _changeDetectorStateName;
}
CodegenLogicUtil.prototype.genPropertyBindingEvalValue = function(protoRec) {
var _this = this;
return this._genEvalValue(protoRec, function(idx) {
return _this._names.getLocalName(idx);
}, this._names.getLocalsAccessorName());
};
CodegenLogicUtil.prototype.genEventBindingEvalValue = function(eventRecord, protoRec) {
var _this = this;
return this._genEvalValue(protoRec, function(idx) {
return _this._names.getEventLocalName(eventRecord, idx);
}, "locals");
};
CodegenLogicUtil.prototype._genEvalValue = function(protoRec, getLocalName, localsAccessor) {
var context = protoRec.contextIndex == -1 ? this._names.getDirectiveName(protoRec.directiveIndex) : getLocalName(protoRec.contextIndex);
var argString = protoRec.args.map(function(arg) {
return getLocalName(arg);
}).join(", ");
var rhs;
switch (protoRec.mode) {
case proto_record_1.RecordType.Self:
rhs = context;
break;

case proto_record_1.RecordType.Const:
rhs = codegen_facade_1.codify(protoRec.funcOrValue);
break;

case proto_record_1.RecordType.PropertyRead:
rhs = context + "." + protoRec.name;
break;

case proto_record_1.RecordType.SafeProperty:
var read = context + "." + protoRec.name;
rhs = this._utilName + ".isValueBlank(" + context + ") ? null : " + read;
break;

case proto_record_1.RecordType.PropertyWrite:
rhs = context + "." + protoRec.name + " = " + getLocalName(protoRec.args[0]);
break;

case proto_record_1.RecordType.Local:
rhs = localsAccessor + ".get(" + codegen_facade_1.rawString(protoRec.name) + ")";
break;

case proto_record_1.RecordType.InvokeMethod:
rhs = context + "." + protoRec.name + "(" + argString + ")";
break;

case proto_record_1.RecordType.SafeMethodInvoke:
var invoke = context + "." + protoRec.name + "(" + argString + ")";
rhs = this._utilName + ".isValueBlank(" + context + ") ? null : " + invoke;
break;

case proto_record_1.RecordType.InvokeClosure:
rhs = context + "(" + argString + ")";
break;

case proto_record_1.RecordType.PrimitiveOp:
rhs = this._utilName + "." + protoRec.name + "(" + argString + ")";
break;

case proto_record_1.RecordType.CollectionLiteral:
rhs = this._utilName + "." + protoRec.name + "(" + argString + ")";
break;

case proto_record_1.RecordType.Interpolate:
rhs = this._genInterpolation(protoRec);
break;

case proto_record_1.RecordType.KeyedRead:
rhs = context + "[" + getLocalName(protoRec.args[0]) + "]";
break;

case proto_record_1.RecordType.KeyedWrite:
rhs = context + "[" + getLocalName(protoRec.args[0]) + "] = " + getLocalName(protoRec.args[1]);
break;

case proto_record_1.RecordType.Chain:
rhs = "" + getLocalName(protoRec.args[protoRec.args.length - 1]);
break;

default:
throw new exceptions_1.BaseException("Unknown operation " + protoRec.mode);
}
return getLocalName(protoRec.selfIndex) + " = " + rhs + ";";
};
CodegenLogicUtil.prototype.genPropertyBindingTargets = function(propertyBindingTargets, genDebugInfo) {
var _this = this;
var bs = propertyBindingTargets.map(function(b) {
if (lang_1.isBlank(b)) return "null";
var debug = genDebugInfo ? codegen_facade_1.codify(b.debug) : "null";
return _this._utilName + ".bindingTarget(" + codegen_facade_1.codify(b.mode) + ", " + b.elementIndex + ", " + codegen_facade_1.codify(b.name) + ", " + codegen_facade_1.codify(b.unit) + ", " + debug + ")";
});
return "[" + bs.join(", ") + "]";
};
CodegenLogicUtil.prototype.genDirectiveIndices = function(directiveRecords) {
var _this = this;
var bs = directiveRecords.map(function(b) {
return _this._utilName + ".directiveIndex(" + b.directiveIndex.elementIndex + ", " + b.directiveIndex.directiveIndex + ")";
});
return "[" + bs.join(", ") + "]";
};
CodegenLogicUtil.prototype._genInterpolation = function(protoRec) {
var iVals = [];
for (var i = 0; i < protoRec.args.length; ++i) {
iVals.push(codegen_facade_1.codify(protoRec.fixedArgs[i]));
iVals.push(this._utilName + ".s(" + this._names.getLocalName(protoRec.args[i]) + ")");
}
iVals.push(codegen_facade_1.codify(protoRec.fixedArgs[protoRec.args.length]));
return codegen_facade_1.combineGeneratedStrings(iVals);
};
CodegenLogicUtil.prototype.genHydrateDirectives = function(directiveRecords) {
var _this = this;
var res = [];
var outputCount = 0;
for (var i = 0; i < directiveRecords.length; ++i) {
var r = directiveRecords[i];
var dirVarName = this._names.getDirectiveName(r.directiveIndex);
res.push(dirVarName + " = " + this._genReadDirective(i) + ";");
if (lang_1.isPresent(r.outputs)) {
r.outputs.forEach(function(output) {
var eventHandlerExpr = _this._genEventHandler(r.directiveIndex.elementIndex, output[1]);
var statementStart = "this.outputSubscriptions[" + outputCount++ + "] = " + dirVarName + "." + output[0];
if (lang_1.IS_DART) {
res.push(statementStart + ".listen(" + eventHandlerExpr + ");");
} else {
res.push(statementStart + ".subscribe({next: " + eventHandlerExpr + "});");
}
});
}
}
if (outputCount > 0) {
var statementStart = "this.outputSubscriptions";
if (lang_1.IS_DART) {
res.unshift(statementStart + " = new List(" + outputCount + ");");
} else {
res.unshift(statementStart + " = new Array(" + outputCount + ");");
}
}
return res.join("\n");
};
CodegenLogicUtil.prototype.genDirectivesOnDestroy = function(directiveRecords) {
var res = [];
for (var i = 0; i < directiveRecords.length; ++i) {
var r = directiveRecords[i];
if (r.callOnDestroy) {
var dirVarName = this._names.getDirectiveName(r.directiveIndex);
res.push(dirVarName + ".ngOnDestroy();");
}
}
return res.join("\n");
};
CodegenLogicUtil.prototype._genEventHandler = function(boundElementIndex, eventName) {
if (lang_1.IS_DART) {
return "(event) => this.handleEvent('" + eventName + "', " + boundElementIndex + ", event)";
} else {
return "(function(event) { return this.handleEvent('" + eventName + "', " + boundElementIndex + ", event); }).bind(this)";
}
};
CodegenLogicUtil.prototype._genReadDirective = function(index) {
return "this.getDirectiveFor(directives, " + index + ")";
};
CodegenLogicUtil.prototype.genHydrateDetectors = function(directiveRecords) {
var res = [];
for (var i = 0; i < directiveRecords.length; ++i) {
var r = directiveRecords[i];
if (!r.isDefaultChangeDetection()) {
res.push(this._names.getDetectorName(r.directiveIndex) + " = this.getDetectorFor(directives, " + i + ");");
}
}
return res.join("\n");
};
CodegenLogicUtil.prototype.genContentLifecycleCallbacks = function(directiveRecords) {
var res = [];
var eq = lang_1.IS_DART ? "==" : "===";
for (var i = directiveRecords.length - 1; i >= 0; --i) {
var dir = directiveRecords[i];
if (dir.callAfterContentInit) {
res.push("if(" + this._names.getStateName() + " " + eq + " " + this._changeDetectorStateName + ".NeverChecked) " + this._names.getDirectiveName(dir.directiveIndex) + ".ngAfterContentInit();");
}
if (dir.callAfterContentChecked) {
res.push(this._names.getDirectiveName(dir.directiveIndex) + ".ngAfterContentChecked();");
}
}
return res;
};
CodegenLogicUtil.prototype.genViewLifecycleCallbacks = function(directiveRecords) {
var res = [];
var eq = lang_1.IS_DART ? "==" : "===";
for (var i = directiveRecords.length - 1; i >= 0; --i) {
var dir = directiveRecords[i];
if (dir.callAfterViewInit) {
res.push("if(" + this._names.getStateName() + " " + eq + " " + this._changeDetectorStateName + ".NeverChecked) " + this._names.getDirectiveName(dir.directiveIndex) + ".ngAfterViewInit();");
}
if (dir.callAfterViewChecked) {
res.push(this._names.getDirectiveName(dir.directiveIndex) + ".ngAfterViewChecked();");
}
}
return res;
};
return CodegenLogicUtil;
}();
exports.CodegenLogicUtil = CodegenLogicUtil;
}, function(module, exports) {
"use strict";
function codify(obj) {
return JSON.stringify(obj);
}
exports.codify = codify;
function rawString(str) {
return "'" + str + "'";
}
exports.rawString = rawString;
function combineGeneratedStrings(vals) {
return vals.join(" + ");
}
exports.combineGeneratedStrings = combineGeneratedStrings;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
(function(ViewEncapsulation) {
ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
})(exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));
var ViewEncapsulation = exports.ViewEncapsulation;
exports.VIEW_ENCAPSULATION_VALUES = [ ViewEncapsulation.Emulated, ViewEncapsulation.Native, ViewEncapsulation.None ];
var ViewMetadata = function() {
function ViewMetadata(_a) {
var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, directives = _b.directives, pipes = _b.pipes, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls;
this.templateUrl = templateUrl;
this.template = template;
this.styleUrls = styleUrls;
this.styles = styles;
this.directives = directives;
this.pipes = pipes;
this.encapsulation = encapsulation;
}
ViewMetadata = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", [ Object ]) ], ViewMetadata);
return ViewMetadata;
}();
exports.ViewMetadata = ViewMetadata;
}, function(module, exports, __webpack_require__) {
"use strict";
var decorators_1 = __webpack_require__(112);
exports.Class = decorators_1.Class;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
exports.enableProdMode = lang_1.enableProdMode;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
exports.Type = lang_1.Type;
var async_1 = __webpack_require__(150);
exports.EventEmitter = async_1.EventEmitter;
var exceptions_1 = __webpack_require__(117);
exports.WrappedException = exceptions_1.WrappedException;
var exception_handler_1 = __webpack_require__(119);
exports.ExceptionHandler = exception_handler_1.ExceptionHandler;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ng_zone_1 = __webpack_require__(185);
var lang_1 = __webpack_require__(105);
var di_1 = __webpack_require__(109);
var application_tokens_1 = __webpack_require__(186);
var async_1 = __webpack_require__(150);
var collection_1 = __webpack_require__(115);
var testability_1 = __webpack_require__(187);
var dynamic_component_loader_1 = __webpack_require__(188);
var exceptions_1 = __webpack_require__(117);
var console_1 = __webpack_require__(204);
var profile_1 = __webpack_require__(148);
var lang_2 = __webpack_require__(105);
function _componentProviders(appComponentType) {
return [ di_1.provide(application_tokens_1.APP_COMPONENT, {
useValue: appComponentType
}), di_1.provide(application_tokens_1.APP_COMPONENT_REF_PROMISE, {
useFactory: function(dynamicComponentLoader, appRef, injector) {
var ref;
return dynamicComponentLoader.loadAsRoot(appComponentType, null, injector, function() {
appRef._unloadComponent(ref);
}).then(function(componentRef) {
ref = componentRef;
var testability = injector.getOptional(testability_1.Testability);
if (lang_1.isPresent(testability)) {
injector.get(testability_1.TestabilityRegistry).registerApplication(componentRef.location.nativeElement, testability);
}
return componentRef;
});
},
deps: [ dynamic_component_loader_1.DynamicComponentLoader, ApplicationRef, di_1.Injector ]
}), di_1.provide(appComponentType, {
useFactory: function(p) {
return p.then(function(ref) {
return ref.instance;
});
},
deps: [ application_tokens_1.APP_COMPONENT_REF_PROMISE ]
}) ];
}
function createNgZone() {
return new ng_zone_1.NgZone({
enableLongStackTrace: lang_1.assertionsEnabled()
});
}
exports.createNgZone = createNgZone;
var _platform;
var _platformProviders;
function platform(providers) {
lang_2.lockMode();
if (lang_1.isPresent(_platform)) {
if (collection_1.ListWrapper.equals(_platformProviders, providers)) {
return _platform;
} else {
throw new exceptions_1.BaseException("platform cannot be initialized with different sets of providers.");
}
} else {
return _createPlatform(providers);
}
}
exports.platform = platform;
function disposePlatform() {
if (lang_1.isPresent(_platform)) {
_platform.dispose();
_platform = null;
}
}
exports.disposePlatform = disposePlatform;
function _createPlatform(providers) {
_platformProviders = providers;
var injector = di_1.Injector.resolveAndCreate(providers);
_platform = new PlatformRef_(injector, function() {
_platform = null;
_platformProviders = null;
});
_runPlatformInitializers(injector);
return _platform;
}
function _runPlatformInitializers(injector) {
var inits = injector.getOptional(application_tokens_1.PLATFORM_INITIALIZER);
if (lang_1.isPresent(inits)) inits.forEach(function(init) {
return init();
});
}
var PlatformRef = function() {
function PlatformRef() {}
Object.defineProperty(PlatformRef.prototype, "injector", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return PlatformRef;
}();
exports.PlatformRef = PlatformRef;
var PlatformRef_ = function(_super) {
__extends(PlatformRef_, _super);
function PlatformRef_(_injector, _dispose) {
_super.call(this);
this._injector = _injector;
this._dispose = _dispose;
this._applications = [];
this._disposeListeners = [];
}
PlatformRef_.prototype.registerDisposeListener = function(dispose) {
this._disposeListeners.push(dispose);
};
Object.defineProperty(PlatformRef_.prototype, "injector", {
get: function() {
return this._injector;
},
enumerable: true,
configurable: true
});
PlatformRef_.prototype.application = function(providers) {
var app = this._initApp(createNgZone(), providers);
if (async_1.PromiseWrapper.isPromise(app)) {
throw new exceptions_1.BaseException("Cannot use asyncronous app initializers with application. Use asyncApplication instead.");
}
return app;
};
PlatformRef_.prototype.asyncApplication = function(bindingFn, additionalProviders) {
var _this = this;
var zone = createNgZone();
var completer = async_1.PromiseWrapper.completer();
if (bindingFn === null) {
completer.resolve(this._initApp(zone, additionalProviders));
} else {
zone.run(function() {
async_1.PromiseWrapper.then(bindingFn(zone), function(providers) {
if (lang_1.isPresent(additionalProviders)) {
providers = collection_1.ListWrapper.concat(providers, additionalProviders);
}
var promise = _this._initApp(zone, providers);
completer.resolve(promise);
});
});
}
return completer.promise;
};
PlatformRef_.prototype._initApp = function(zone, providers) {
var _this = this;
var injector;
var app;
zone.run(function() {
providers = collection_1.ListWrapper.concat(providers, [ di_1.provide(ng_zone_1.NgZone, {
useValue: zone
}), di_1.provide(ApplicationRef, {
useFactory: function() {
return app;
},
deps: []
}) ]);
var exceptionHandler;
try {
injector = _this.injector.resolveAndCreateChild(providers);
exceptionHandler = injector.get(exceptions_1.ExceptionHandler);
zone.overrideOnErrorHandler(function(e, s) {
return exceptionHandler.call(e, s);
});
} catch (e) {
if (lang_1.isPresent(exceptionHandler)) {
exceptionHandler.call(e, e.stack);
} else {
lang_1.print(e.toString());
}
}
});
app = new ApplicationRef_(this, zone, injector);
this._applications.push(app);
var promise = _runAppInitializers(injector);
if (promise !== null) {
return async_1.PromiseWrapper.then(promise, function(_) {
return app;
});
} else {
return app;
}
};
PlatformRef_.prototype.dispose = function() {
collection_1.ListWrapper.clone(this._applications).forEach(function(app) {
return app.dispose();
});
this._disposeListeners.forEach(function(dispose) {
return dispose();
});
this._dispose();
};
PlatformRef_.prototype._applicationDisposed = function(app) {
collection_1.ListWrapper.remove(this._applications, app);
};
return PlatformRef_;
}(PlatformRef);
exports.PlatformRef_ = PlatformRef_;
function _runAppInitializers(injector) {
var inits = injector.getOptional(application_tokens_1.APP_INITIALIZER);
var promises = [];
if (lang_1.isPresent(inits)) {
inits.forEach(function(init) {
var retVal = init();
if (async_1.PromiseWrapper.isPromise(retVal)) {
promises.push(retVal);
}
});
}
if (promises.length > 0) {
return async_1.PromiseWrapper.all(promises);
} else {
return null;
}
}
var ApplicationRef = function() {
function ApplicationRef() {}
Object.defineProperty(ApplicationRef.prototype, "injector", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ApplicationRef.prototype, "zone", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return ApplicationRef;
}();
exports.ApplicationRef = ApplicationRef;
var ApplicationRef_ = function(_super) {
__extends(ApplicationRef_, _super);
function ApplicationRef_(_platform, _zone, _injector) {
var _this = this;
_super.call(this);
this._platform = _platform;
this._zone = _zone;
this._injector = _injector;
this._bootstrapListeners = [];
this._disposeListeners = [];
this._rootComponents = [];
this._rootComponentTypes = [];
this._changeDetectorRefs = [];
this._runningTick = false;
this._enforceNoNewChanges = false;
if (lang_1.isPresent(this._zone)) {
async_1.ObservableWrapper.subscribe(this._zone.onTurnDone, function(_) {
_this._zone.run(function() {
_this.tick();
});
});
}
this._enforceNoNewChanges = lang_1.assertionsEnabled();
}
ApplicationRef_.prototype.registerBootstrapListener = function(listener) {
this._bootstrapListeners.push(listener);
};
ApplicationRef_.prototype.registerDisposeListener = function(dispose) {
this._disposeListeners.push(dispose);
};
ApplicationRef_.prototype.registerChangeDetector = function(changeDetector) {
this._changeDetectorRefs.push(changeDetector);
};
ApplicationRef_.prototype.unregisterChangeDetector = function(changeDetector) {
collection_1.ListWrapper.remove(this._changeDetectorRefs, changeDetector);
};
ApplicationRef_.prototype.bootstrap = function(componentType, providers) {
var _this = this;
var completer = async_1.PromiseWrapper.completer();
this._zone.run(function() {
var componentProviders = _componentProviders(componentType);
if (lang_1.isPresent(providers)) {
componentProviders.push(providers);
}
var exceptionHandler = _this._injector.get(exceptions_1.ExceptionHandler);
_this._rootComponentTypes.push(componentType);
try {
var injector = _this._injector.resolveAndCreateChild(componentProviders);
var compRefToken = injector.get(application_tokens_1.APP_COMPONENT_REF_PROMISE);
var tick = function(componentRef) {
_this._loadComponent(componentRef);
completer.resolve(componentRef);
};
var tickResult = async_1.PromiseWrapper.then(compRefToken, tick);
if (lang_1.IS_DART) {
async_1.PromiseWrapper.then(tickResult, function(_) {});
}
async_1.PromiseWrapper.then(tickResult, null, function(err, stackTrace) {
return completer.reject(err, stackTrace);
});
} catch (e) {
exceptionHandler.call(e, e.stack);
completer.reject(e, e.stack);
}
});
return completer.promise.then(function(_) {
var c = _this._injector.get(console_1.Console);
if (lang_1.assertionsEnabled()) {
c.log("Angular 2 is running in the development mode. Call enableProdMode() to enable the production mode.");
}
return _;
});
};
ApplicationRef_.prototype._loadComponent = function(componentRef) {
var appChangeDetector = componentRef.location.internalElement.parentView.changeDetector;
this._changeDetectorRefs.push(appChangeDetector.ref);
this.tick();
this._rootComponents.push(componentRef);
this._bootstrapListeners.forEach(function(listener) {
return listener(componentRef);
});
};
ApplicationRef_.prototype._unloadComponent = function(componentRef) {
if (!collection_1.ListWrapper.contains(this._rootComponents, componentRef)) {
return;
}
this.unregisterChangeDetector(componentRef.location.internalElement.parentView.changeDetector.ref);
collection_1.ListWrapper.remove(this._rootComponents, componentRef);
};
Object.defineProperty(ApplicationRef_.prototype, "injector", {
get: function() {
return this._injector;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ApplicationRef_.prototype, "zone", {
get: function() {
return this._zone;
},
enumerable: true,
configurable: true
});
ApplicationRef_.prototype.tick = function() {
if (this._runningTick) {
throw new exceptions_1.BaseException("ApplicationRef.tick is called recursively");
}
var s = ApplicationRef_._tickScope();
try {
this._runningTick = true;
this._changeDetectorRefs.forEach(function(detector) {
return detector.detectChanges();
});
if (this._enforceNoNewChanges) {
this._changeDetectorRefs.forEach(function(detector) {
return detector.checkNoChanges();
});
}
} finally {
this._runningTick = false;
profile_1.wtfLeave(s);
}
};
ApplicationRef_.prototype.dispose = function() {
collection_1.ListWrapper.clone(this._rootComponents).forEach(function(ref) {
return ref.dispose();
});
this._disposeListeners.forEach(function(dispose) {
return dispose();
});
this._platform._applicationDisposed(this);
};
Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
get: function() {
return this._rootComponentTypes;
},
enumerable: true,
configurable: true
});
ApplicationRef_._tickScope = profile_1.wtfCreateScope("ApplicationRef#tick()");
return ApplicationRef_;
}(ApplicationRef);
exports.ApplicationRef_ = ApplicationRef_;
}, function(module, exports, __webpack_require__) {
"use strict";
var collection_1 = __webpack_require__(115);
var lang_1 = __webpack_require__(105);
var async_1 = __webpack_require__(150);
var profile_1 = __webpack_require__(148);
var NgZoneError = function() {
function NgZoneError(error, stackTrace) {
this.error = error;
this.stackTrace = stackTrace;
}
return NgZoneError;
}();
exports.NgZoneError = NgZoneError;
var NgZone = function() {
function NgZone(_a) {
var enableLongStackTrace = _a.enableLongStackTrace;
this._runScope = profile_1.wtfCreateScope("NgZone#run()");
this._microtaskScope = profile_1.wtfCreateScope("NgZone#microtask()");
this._pendingMicrotasks = 0;
this._hasExecutedCodeInInnerZone = false;
this._nestedRun = 0;
this._inVmTurnDone = false;
this._pendingTimeouts = [];
if (lang_1.global.zone) {
this._disabled = false;
this._mountZone = lang_1.global.zone;
this._innerZone = this._createInnerZone(this._mountZone, enableLongStackTrace);
} else {
this._disabled = true;
this._mountZone = null;
}
this._onTurnStartEvents = new async_1.EventEmitter(false);
this._onTurnDoneEvents = new async_1.EventEmitter(false);
this._onEventDoneEvents = new async_1.EventEmitter(false);
this._onErrorEvents = new async_1.EventEmitter(false);
}
NgZone.prototype.overrideOnTurnStart = function(onTurnStartHook) {
this._onTurnStart = lang_1.normalizeBlank(onTurnStartHook);
};
Object.defineProperty(NgZone.prototype, "onTurnStart", {
get: function() {
return this._onTurnStartEvents;
},
enumerable: true,
configurable: true
});
NgZone.prototype._notifyOnTurnStart = function(parentRun) {
var _this = this;
parentRun.call(this._innerZone, function() {
_this._onTurnStartEvents.emit(null);
});
};
NgZone.prototype.overrideOnTurnDone = function(onTurnDoneHook) {
this._onTurnDone = lang_1.normalizeBlank(onTurnDoneHook);
};
Object.defineProperty(NgZone.prototype, "onTurnDone", {
get: function() {
return this._onTurnDoneEvents;
},
enumerable: true,
configurable: true
});
NgZone.prototype._notifyOnTurnDone = function(parentRun) {
var _this = this;
parentRun.call(this._innerZone, function() {
_this._onTurnDoneEvents.emit(null);
});
};
NgZone.prototype.overrideOnEventDone = function(onEventDoneFn, opt_waitForAsync) {
var _this = this;
if (opt_waitForAsync === void 0) {
opt_waitForAsync = false;
}
var normalizedOnEventDone = lang_1.normalizeBlank(onEventDoneFn);
if (opt_waitForAsync) {
this._onEventDone = function() {
if (!_this._pendingTimeouts.length) {
normalizedOnEventDone();
}
};
} else {
this._onEventDone = normalizedOnEventDone;
}
};
Object.defineProperty(NgZone.prototype, "onEventDone", {
get: function() {
return this._onEventDoneEvents;
},
enumerable: true,
configurable: true
});
NgZone.prototype._notifyOnEventDone = function() {
var _this = this;
this.runOutsideAngular(function() {
_this._onEventDoneEvents.emit(null);
});
};
Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
get: function() {
return this._pendingMicrotasks > 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgZone.prototype, "hasPendingTimers", {
get: function() {
return this._pendingTimeouts.length > 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgZone.prototype, "hasPendingAsyncTasks", {
get: function() {
return this.hasPendingMicrotasks || this.hasPendingTimers;
},
enumerable: true,
configurable: true
});
NgZone.prototype.overrideOnErrorHandler = function(errorHandler) {
this._onErrorHandler = lang_1.normalizeBlank(errorHandler);
};
Object.defineProperty(NgZone.prototype, "onError", {
get: function() {
return this._onErrorEvents;
},
enumerable: true,
configurable: true
});
NgZone.prototype.run = function(fn) {
if (this._disabled) {
return fn();
} else {
var s = this._runScope();
try {
return this._innerZone.run(fn);
} finally {
profile_1.wtfLeave(s);
}
}
};
NgZone.prototype.runOutsideAngular = function(fn) {
if (this._disabled) {
return fn();
} else {
return this._mountZone.run(fn);
}
};
NgZone.prototype._createInnerZone = function(zone, enableLongStackTrace) {
var microtaskScope = this._microtaskScope;
var ngZone = this;
var errorHandling;
if (enableLongStackTrace) {
errorHandling = collection_1.StringMapWrapper.merge(lang_1.global.Zone.longStackTraceZone, {
onError: function(e) {
ngZone._notifyOnError(this, e);
}
});
} else {
errorHandling = {
onError: function(e) {
ngZone._notifyOnError(this, e);
}
};
}
return zone.fork(errorHandling).fork({
$run: function(parentRun) {
return function() {
try {
ngZone._nestedRun++;
if (!ngZone._hasExecutedCodeInInnerZone) {
ngZone._hasExecutedCodeInInnerZone = true;
ngZone._notifyOnTurnStart(parentRun);
if (ngZone._onTurnStart) {
parentRun.call(ngZone._innerZone, ngZone._onTurnStart);
}
}
return parentRun.apply(this, arguments);
} finally {
ngZone._nestedRun--;
if (ngZone._pendingMicrotasks == 0 && ngZone._nestedRun == 0 && !this._inVmTurnDone) {
if (ngZone._hasExecutedCodeInInnerZone) {
try {
this._inVmTurnDone = true;
ngZone._notifyOnTurnDone(parentRun);
if (ngZone._onTurnDone) {
parentRun.call(ngZone._innerZone, ngZone._onTurnDone);
}
} finally {
this._inVmTurnDone = false;
ngZone._hasExecutedCodeInInnerZone = false;
}
}
if (ngZone._pendingMicrotasks === 0) {
ngZone._notifyOnEventDone();
if (lang_1.isPresent(ngZone._onEventDone)) {
ngZone.runOutsideAngular(ngZone._onEventDone);
}
}
}
}
};
},
$scheduleMicrotask: function(parentScheduleMicrotask) {
return function(fn) {
ngZone._pendingMicrotasks++;
var microtask = function() {
var s = microtaskScope();
try {
fn();
} finally {
ngZone._pendingMicrotasks--;
profile_1.wtfLeave(s);
}
};
parentScheduleMicrotask.call(this, microtask);
};
},
$setTimeout: function(parentSetTimeout) {
return function(fn, delay) {
var args = [];
for (var _i = 2; _i < arguments.length; _i++) {
args[_i - 2] = arguments[_i];
}
var id;
var cb = function() {
fn();
collection_1.ListWrapper.remove(ngZone._pendingTimeouts, id);
};
id = parentSetTimeout.call(this, cb, delay, args);
ngZone._pendingTimeouts.push(id);
return id;
};
},
$clearTimeout: function(parentClearTimeout) {
return function(id) {
parentClearTimeout.call(this, id);
collection_1.ListWrapper.remove(ngZone._pendingTimeouts, id);
};
},
_innerZone: true
});
};
NgZone.prototype._notifyOnError = function(zone, e) {
if (lang_1.isPresent(this._onErrorHandler) || async_1.ObservableWrapper.hasSubscribers(this._onErrorEvents)) {
var trace = [ lang_1.normalizeBlank(e.stack) ];
while (zone && zone.constructedAtException) {
trace.push(zone.constructedAtException.get());
zone = zone.parent;
}
if (async_1.ObservableWrapper.hasSubscribers(this._onErrorEvents)) {
async_1.ObservableWrapper.callEmit(this._onErrorEvents, new NgZoneError(e, trace));
}
if (lang_1.isPresent(this._onErrorHandler)) {
this._onErrorHandler(e, trace);
}
} else {
console.log("## _notifyOnError ##");
console.log(e.stack);
throw e;
}
};
return NgZone;
}();
exports.NgZone = NgZone;
}, function(module, exports, __webpack_require__) {
"use strict";
var di_1 = __webpack_require__(109);
var lang_1 = __webpack_require__(105);
exports.APP_COMPONENT_REF_PROMISE = lang_1.CONST_EXPR(new di_1.OpaqueToken("Promise<ComponentRef>"));
exports.APP_COMPONENT = lang_1.CONST_EXPR(new di_1.OpaqueToken("AppComponent"));
exports.APP_ID = lang_1.CONST_EXPR(new di_1.OpaqueToken("AppId"));
function _appIdRandomProviderFactory() {
return "" + _randomChar() + _randomChar() + _randomChar();
}
exports.APP_ID_RANDOM_PROVIDER = lang_1.CONST_EXPR(new di_1.Provider(exports.APP_ID, {
useFactory: _appIdRandomProviderFactory,
deps: []
}));
function _randomChar() {
return lang_1.StringWrapper.fromCharCode(97 + lang_1.Math.floor(lang_1.Math.random() * 25));
}
exports.PLATFORM_INITIALIZER = lang_1.CONST_EXPR(new di_1.OpaqueToken("Platform Initializer"));
exports.APP_INITIALIZER = lang_1.CONST_EXPR(new di_1.OpaqueToken("Application Initializer"));
exports.PACKAGE_ROOT_URL = lang_1.CONST_EXPR(new di_1.OpaqueToken("Application Packages Root URL"));
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = __webpack_require__(109);
var collection_1 = __webpack_require__(115);
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var ng_zone_1 = __webpack_require__(185);
var async_1 = __webpack_require__(150);
var Testability = function() {
function Testability(_ngZone) {
this._pendingCount = 0;
this._didWork = false;
this._callbacks = [];
this._isAngularEventPending = false;
this._watchAngularEvents(_ngZone);
}
Testability.prototype._watchAngularEvents = function(_ngZone) {
var _this = this;
async_1.ObservableWrapper.subscribe(_ngZone.onTurnStart, function(_) {
_this._didWork = true;
_this._isAngularEventPending = true;
});
_ngZone.runOutsideAngular(function() {
async_1.ObservableWrapper.subscribe(_ngZone.onEventDone, function(_) {
if (!_ngZone.hasPendingTimers) {
_this._isAngularEventPending = false;
_this._runCallbacksIfReady();
}
});
});
};
Testability.prototype.increasePendingRequestCount = function() {
this._pendingCount += 1;
this._didWork = true;
return this._pendingCount;
};
Testability.prototype.decreasePendingRequestCount = function() {
this._pendingCount -= 1;
if (this._pendingCount < 0) {
throw new exceptions_1.BaseException("pending async requests below zero");
}
this._runCallbacksIfReady();
return this._pendingCount;
};
Testability.prototype.isStable = function() {
return this._pendingCount == 0 && !this._isAngularEventPending;
};
Testability.prototype._runCallbacksIfReady = function() {
var _this = this;
if (!this.isStable()) {
this._didWork = true;
return;
}
async_1.PromiseWrapper.resolve(null).then(function(_) {
while (_this._callbacks.length !== 0) {
_this._callbacks.pop()(_this._didWork);
}
_this._didWork = false;
});
};
Testability.prototype.whenStable = function(callback) {
this._callbacks.push(callback);
this._runCallbacksIfReady();
};
Testability.prototype.getPendingRequestCount = function() {
return this._pendingCount;
};
Testability.prototype.isAngularEventPending = function() {
return this._isAngularEventPending;
};
Testability.prototype.findBindings = function(using, provider, exactMatch) {
return [];
};
Testability.prototype.findProviders = function(using, provider, exactMatch) {
return [];
};
Testability = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", [ ng_zone_1.NgZone ]) ], Testability);
return Testability;
}();
exports.Testability = Testability;
var TestabilityRegistry = function() {
function TestabilityRegistry() {
this._applications = new collection_1.Map();
_testabilityGetter.addToWindow(this);
}
TestabilityRegistry.prototype.registerApplication = function(token, testability) {
this._applications.set(token, testability);
};
TestabilityRegistry.prototype.getTestability = function(elem) {
return this._applications.get(elem);
};
TestabilityRegistry.prototype.getAllTestabilities = function() {
return collection_1.MapWrapper.values(this._applications);
};
TestabilityRegistry.prototype.getAllRootElements = function() {
return collection_1.MapWrapper.keys(this._applications);
};
TestabilityRegistry.prototype.findTestabilityInTree = function(elem, findInAncestors) {
if (findInAncestors === void 0) {
findInAncestors = true;
}
return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
};
TestabilityRegistry = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", []) ], TestabilityRegistry);
return TestabilityRegistry;
}();
exports.TestabilityRegistry = TestabilityRegistry;
var _NoopGetTestability = function() {
function _NoopGetTestability() {}
_NoopGetTestability.prototype.addToWindow = function(registry) {};
_NoopGetTestability.prototype.findTestabilityInTree = function(registry, elem, findInAncestors) {
return null;
};
_NoopGetTestability = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", []) ], _NoopGetTestability);
return _NoopGetTestability;
}();
function setTestabilityGetter(getter) {
_testabilityGetter = getter;
}
exports.setTestabilityGetter = setTestabilityGetter;
var _testabilityGetter = lang_1.CONST_EXPR(new _NoopGetTestability());
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = __webpack_require__(109);
var compiler_1 = __webpack_require__(189);
var lang_1 = __webpack_require__(105);
var view_manager_1 = __webpack_require__(203);
var ComponentRef = function() {
function ComponentRef() {}
Object.defineProperty(ComponentRef.prototype, "hostView", {
get: function() {
return this.location.internalElement.parentView.ref;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef.prototype, "hostComponent", {
get: function() {
return this.instance;
},
enumerable: true,
configurable: true
});
return ComponentRef;
}();
exports.ComponentRef = ComponentRef;
var ComponentRef_ = function(_super) {
__extends(ComponentRef_, _super);
function ComponentRef_(location, instance, componentType, injector, _dispose) {
_super.call(this);
this._dispose = _dispose;
this.location = location;
this.instance = instance;
this.componentType = componentType;
this.injector = injector;
}
Object.defineProperty(ComponentRef_.prototype, "hostComponentType", {
get: function() {
return this.componentType;
},
enumerable: true,
configurable: true
});
ComponentRef_.prototype.dispose = function() {
this._dispose();
};
return ComponentRef_;
}(ComponentRef);
exports.ComponentRef_ = ComponentRef_;
var DynamicComponentLoader = function() {
function DynamicComponentLoader() {}
return DynamicComponentLoader;
}();
exports.DynamicComponentLoader = DynamicComponentLoader;
var DynamicComponentLoader_ = function(_super) {
__extends(DynamicComponentLoader_, _super);
function DynamicComponentLoader_(_compiler, _viewManager) {
_super.call(this);
this._compiler = _compiler;
this._viewManager = _viewManager;
}
DynamicComponentLoader_.prototype.loadAsRoot = function(type, overrideSelector, injector, onDispose, projectableNodes) {
var _this = this;
return this._compiler.compileInHost(type).then(function(hostProtoViewRef) {
var hostViewRef = _this._viewManager.createRootHostView(hostProtoViewRef, overrideSelector, injector, projectableNodes);
var newLocation = _this._viewManager.getHostElement(hostViewRef);
var component = _this._viewManager.getComponent(newLocation);
var dispose = function() {
if (lang_1.isPresent(onDispose)) {
onDispose();
}
_this._viewManager.destroyRootHostView(hostViewRef);
};
return new ComponentRef_(newLocation, component, type, injector, dispose);
});
};
DynamicComponentLoader_.prototype.loadIntoLocation = function(type, hostLocation, anchorName, providers, projectableNodes) {
if (providers === void 0) {
providers = null;
}
if (projectableNodes === void 0) {
projectableNodes = null;
}
return this.loadNextToLocation(type, this._viewManager.getNamedElementInComponentView(hostLocation, anchorName), providers, projectableNodes);
};
DynamicComponentLoader_.prototype.loadNextToLocation = function(type, location, providers, projectableNodes) {
var _this = this;
if (providers === void 0) {
providers = null;
}
if (projectableNodes === void 0) {
projectableNodes = null;
}
return this._compiler.compileInHost(type).then(function(hostProtoViewRef) {
var viewContainer = _this._viewManager.getViewContainer(location);
var hostViewRef = viewContainer.createHostView(hostProtoViewRef, viewContainer.length, providers, projectableNodes);
var newLocation = _this._viewManager.getHostElement(hostViewRef);
var component = _this._viewManager.getComponent(newLocation);
var dispose = function() {
var index = viewContainer.indexOf(hostViewRef);
if (!hostViewRef.destroyed && index !== -1) {
viewContainer.remove(index);
}
};
return new ComponentRef_(newLocation, component, type, null, dispose);
});
};
DynamicComponentLoader_ = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", [ compiler_1.Compiler, view_manager_1.AppViewManager ]) ], DynamicComponentLoader_);
return DynamicComponentLoader_;
}(DynamicComponentLoader);
exports.DynamicComponentLoader_ = DynamicComponentLoader_;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = __webpack_require__(109);
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var async_1 = __webpack_require__(150);
var reflection_1 = __webpack_require__(120);
var view_1 = __webpack_require__(190);
var view_ref_1 = __webpack_require__(199);
var Compiler = function() {
function Compiler() {}
return Compiler;
}();
exports.Compiler = Compiler;
function isHostViewFactory(type) {
return type instanceof view_1.HostViewFactory;
}
var Compiler_ = function(_super) {
__extends(Compiler_, _super);
function Compiler_() {
_super.apply(this, arguments);
}
Compiler_.prototype.compileInHost = function(componentType) {
var metadatas = reflection_1.reflector.annotations(componentType);
var hostViewFactory = metadatas.find(isHostViewFactory);
if (lang_1.isBlank(hostViewFactory)) {
throw new exceptions_1.BaseException("No precompiled component " + lang_1.stringify(componentType) + " found");
}
return async_1.PromiseWrapper.resolve(new view_ref_1.HostViewFactoryRef_(hostViewFactory));
};
Compiler_.prototype.clearCache = function() {};
Compiler_ = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", []) ], Compiler_);
return Compiler_;
}(Compiler);
exports.Compiler_ = Compiler_;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var collection_1 = __webpack_require__(115);
var change_detection_1 = __webpack_require__(128);
var interfaces_1 = __webpack_require__(138);
var element_1 = __webpack_require__(191);
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var api_1 = __webpack_require__(195);
var view_ref_1 = __webpack_require__(199);
var pipes_1 = __webpack_require__(200);
var util_1 = __webpack_require__(202);
var interfaces_2 = __webpack_require__(138);
exports.DebugContext = interfaces_2.DebugContext;
var pipes_2 = __webpack_require__(200);
var view_type_1 = __webpack_require__(192);
var REFLECT_PREFIX = "ng-reflect-";
var EMPTY_CONTEXT = lang_1.CONST_EXPR(new Object());
var AppView = function() {
function AppView(proto, renderer, viewManager, projectableNodes, containerAppElement, imperativelyCreatedProviders, rootInjector, changeDetector) {
this.proto = proto;
this.renderer = renderer;
this.viewManager = viewManager;
this.projectableNodes = projectableNodes;
this.containerAppElement = containerAppElement;
this.changeDetector = changeDetector;
this.context = null;
this.destroyed = false;
this.ref = new view_ref_1.ViewRef_(this);
var injectorWithHostBoundary = element_1.AppElement.getViewParentInjector(this.proto.type, containerAppElement, imperativelyCreatedProviders, rootInjector);
this.parentInjector = injectorWithHostBoundary.injector;
this.hostInjectorBoundary = injectorWithHostBoundary.hostInjectorBoundary;
var pipes;
var context;
switch (proto.type) {
case view_type_1.ViewType.COMPONENT:
pipes = new pipes_2.Pipes(proto.protoPipes, containerAppElement.getInjector());
context = containerAppElement.getComponent();
break;

case view_type_1.ViewType.EMBEDDED:
pipes = containerAppElement.parentView.pipes;
context = containerAppElement.parentView.context;
break;

case view_type_1.ViewType.HOST:
pipes = null;
context = EMPTY_CONTEXT;
break;
}
this.pipes = pipes;
this.context = context;
}
AppView.prototype.init = function(rootNodesOrAppElements, allNodes, disposables, appElements) {
this.rootNodesOrAppElements = rootNodesOrAppElements;
this.allNodes = allNodes;
this.disposables = disposables;
this.appElements = appElements;
var localsMap = new collection_1.Map();
collection_1.StringMapWrapper.forEach(this.proto.templateVariableBindings, function(templateName, _) {
localsMap.set(templateName, null);
});
for (var i = 0; i < appElements.length; i++) {
var appEl = appElements[i];
var providerTokens = [];
if (lang_1.isPresent(appEl.proto.protoInjector)) {
for (var j = 0; j < appEl.proto.protoInjector.numberOfProviders; j++) {
providerTokens.push(appEl.proto.protoInjector.getProviderAtIndex(j).key.token);
}
}
collection_1.StringMapWrapper.forEach(appEl.proto.directiveVariableBindings, function(directiveIndex, name) {
if (lang_1.isBlank(directiveIndex)) {
localsMap.set(name, appEl.nativeElement);
} else {
localsMap.set(name, appEl.getDirectiveAtIndex(directiveIndex));
}
});
this.renderer.setElementDebugInfo(appEl.nativeElement, new api_1.RenderDebugInfo(appEl.getInjector(), appEl.getComponent(), providerTokens, localsMap));
}
var parentLocals = null;
if (this.proto.type !== view_type_1.ViewType.COMPONENT) {
parentLocals = lang_1.isPresent(this.containerAppElement) ? this.containerAppElement.parentView.locals : null;
}
if (this.proto.type === view_type_1.ViewType.COMPONENT) {
this.containerAppElement.attachComponentView(this);
this.containerAppElement.parentView.changeDetector.addViewChild(this.changeDetector);
}
this.locals = new change_detection_1.Locals(parentLocals, localsMap);
this.changeDetector.hydrate(this.context, this.locals, this, this.pipes);
this.viewManager.onViewCreated(this);
};
AppView.prototype.destroy = function() {
if (this.destroyed) {
throw new exceptions_1.BaseException("This view has already been destroyed!");
}
this.changeDetector.destroyRecursive();
};
AppView.prototype.notifyOnDestroy = function() {
this.destroyed = true;
var hostElement = this.proto.type === view_type_1.ViewType.COMPONENT ? this.containerAppElement.nativeElement : null;
this.renderer.destroyView(hostElement, this.allNodes);
for (var i = 0; i < this.disposables.length; i++) {
this.disposables[i]();
}
this.viewManager.onViewDestroyed(this);
};
Object.defineProperty(AppView.prototype, "changeDetectorRef", {
get: function() {
return this.changeDetector.ref;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AppView.prototype, "flatRootNodes", {
get: function() {
return flattenNestedViewRenderNodes(this.rootNodesOrAppElements);
},
enumerable: true,
configurable: true
});
AppView.prototype.hasLocal = function(contextName) {
return collection_1.StringMapWrapper.contains(this.proto.templateVariableBindings, contextName);
};
AppView.prototype.setLocal = function(contextName, value) {
if (!this.hasLocal(contextName)) {
return;
}
var templateName = this.proto.templateVariableBindings[contextName];
this.locals.set(templateName, value);
};
AppView.prototype.notifyOnBinding = function(b, currentValue) {
if (b.isTextNode()) {
this.renderer.setText(this.allNodes[b.elementIndex], currentValue);
} else {
var nativeElement = this.appElements[b.elementIndex].nativeElement;
if (b.isElementProperty()) {
this.renderer.setElementProperty(nativeElement, b.name, currentValue);
} else if (b.isElementAttribute()) {
this.renderer.setElementAttribute(nativeElement, b.name, lang_1.isPresent(currentValue) ? "" + currentValue : null);
} else if (b.isElementClass()) {
this.renderer.setElementClass(nativeElement, b.name, currentValue);
} else if (b.isElementStyle()) {
var unit = lang_1.isPresent(b.unit) ? b.unit : "";
this.renderer.setElementStyle(nativeElement, b.name, lang_1.isPresent(currentValue) ? "" + currentValue + unit : null);
} else {
throw new exceptions_1.BaseException("Unsupported directive record");
}
}
};
AppView.prototype.logBindingUpdate = function(b, value) {
if (b.isDirective() || b.isElementProperty()) {
var nativeElement = this.appElements[b.elementIndex].nativeElement;
this.renderer.setBindingDebugInfo(nativeElement, "" + REFLECT_PREFIX + util_1.camelCaseToDashCase(b.name), "" + value);
}
};
AppView.prototype.notifyAfterContentChecked = function() {
var count = this.appElements.length;
for (var i = count - 1; i >= 0; i--) {
this.appElements[i].ngAfterContentChecked();
}
};
AppView.prototype.notifyAfterViewChecked = function() {
var count = this.appElements.length;
for (var i = count - 1; i >= 0; i--) {
this.appElements[i].ngAfterViewChecked();
}
};
AppView.prototype.getDebugContext = function(appElement, elementIndex, directiveIndex) {
try {
if (lang_1.isBlank(appElement) && elementIndex < this.appElements.length) {
appElement = this.appElements[elementIndex];
}
var container = this.containerAppElement;
var element = lang_1.isPresent(appElement) ? appElement.nativeElement : null;
var componentElement = lang_1.isPresent(container) ? container.nativeElement : null;
var directive = lang_1.isPresent(directiveIndex) ? appElement.getDirectiveAtIndex(directiveIndex) : null;
var injector = lang_1.isPresent(appElement) ? appElement.getInjector() : null;
return new interfaces_1.DebugContext(element, componentElement, directive, this.context, _localsToStringMap(this.locals), injector);
} catch (e) {
return null;
}
};
AppView.prototype.getDirectiveFor = function(directive) {
return this.appElements[directive.elementIndex].getDirectiveAtIndex(directive.directiveIndex);
};
AppView.prototype.getDetectorFor = function(directive) {
var componentView = this.appElements[directive.elementIndex].componentView;
return lang_1.isPresent(componentView) ? componentView.changeDetector : null;
};
AppView.prototype.triggerEventHandlers = function(eventName, eventObj, boundElementIndex) {
return this.changeDetector.handleEvent(eventName, boundElementIndex, eventObj);
};
return AppView;
}();
exports.AppView = AppView;
function _localsToStringMap(locals) {
var res = {};
var c = locals;
while (lang_1.isPresent(c)) {
res = collection_1.StringMapWrapper.merge(res, collection_1.MapWrapper.toStringMap(c.current));
c = c.parent;
}
return res;
}
var AppProtoView = function() {
function AppProtoView(type, protoPipes, templateVariableBindings) {
this.type = type;
this.protoPipes = protoPipes;
this.templateVariableBindings = templateVariableBindings;
}
AppProtoView.create = function(metadataCache, type, pipes, templateVariableBindings) {
var protoPipes = null;
if (lang_1.isPresent(pipes) && pipes.length > 0) {
var boundPipes = collection_1.ListWrapper.createFixedSize(pipes.length);
for (var i = 0; i < pipes.length; i++) {
boundPipes[i] = metadataCache.getResolvedPipeMetadata(pipes[i]);
}
protoPipes = pipes_1.ProtoPipes.fromProviders(boundPipes);
}
return new AppProtoView(type, protoPipes, templateVariableBindings);
};
return AppProtoView;
}();
exports.AppProtoView = AppProtoView;
var HostViewFactory = function() {
function HostViewFactory(selector, viewFactory) {
this.selector = selector;
this.viewFactory = viewFactory;
}
HostViewFactory = __decorate([ lang_1.CONST(), __metadata("design:paramtypes", [ String, Function ]) ], HostViewFactory);
return HostViewFactory;
}();
exports.HostViewFactory = HostViewFactory;
function flattenNestedViewRenderNodes(nodes) {
return _flattenNestedViewRenderNodes(nodes, []);
}
exports.flattenNestedViewRenderNodes = flattenNestedViewRenderNodes;
function _flattenNestedViewRenderNodes(nodes, renderNodes) {
for (var i = 0; i < nodes.length; i++) {
var node = nodes[i];
if (node instanceof element_1.AppElement) {
var appEl = node;
renderNodes.push(appEl.nativeElement);
if (lang_1.isPresent(appEl.nestedViews)) {
for (var k = 0; k < appEl.nestedViews.length; k++) {
_flattenNestedViewRenderNodes(appEl.nestedViews[k].rootNodesOrAppElements, renderNodes);
}
}
} else {
renderNodes.push(node);
}
}
return renderNodes;
}
function findLastRenderNode(node) {
var lastNode;
if (node instanceof element_1.AppElement) {
var appEl = node;
lastNode = appEl.nativeElement;
if (lang_1.isPresent(appEl.nestedViews)) {
for (var i = appEl.nestedViews.length - 1; i >= 0; i--) {
var nestedView = appEl.nestedViews[i];
if (nestedView.rootNodesOrAppElements.length > 0) {
lastNode = findLastRenderNode(nestedView.rootNodesOrAppElements[nestedView.rootNodesOrAppElements.length - 1]);
}
}
}
} else {
lastNode = node;
}
return lastNode;
}
exports.findLastRenderNode = findLastRenderNode;
function checkSlotCount(componentName, expectedSlotCount, projectableNodes) {
var givenSlotCount = lang_1.isPresent(projectableNodes) ? projectableNodes.length : 0;
if (givenSlotCount < expectedSlotCount) {
throw new exceptions_1.BaseException("The component " + componentName + " has " + expectedSlotCount + " <ng-content> elements," + (" but only " + givenSlotCount + " slots were provided."));
}
}
exports.checkSlotCount = checkSlotCount;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(115);
var di_1 = __webpack_require__(109);
var provider_1 = __webpack_require__(116);
var injector_1 = __webpack_require__(114);
var provider_2 = __webpack_require__(116);
var di_2 = __webpack_require__(108);
var view_type_1 = __webpack_require__(192);
var element_ref_1 = __webpack_require__(193);
var view_container_ref_1 = __webpack_require__(194);
var element_ref_2 = __webpack_require__(193);
var api_1 = __webpack_require__(195);
var template_ref_1 = __webpack_require__(196);
var directives_1 = __webpack_require__(126);
var change_detection_1 = __webpack_require__(128);
var query_list_1 = __webpack_require__(197);
var reflection_1 = __webpack_require__(120);
var pipe_provider_1 = __webpack_require__(198);
var view_container_ref_2 = __webpack_require__(194);
var _staticKeys;
var StaticKeys = function() {
function StaticKeys() {
this.templateRefId = di_1.Key.get(template_ref_1.TemplateRef).id;
this.viewContainerId = di_1.Key.get(view_container_ref_1.ViewContainerRef).id;
this.changeDetectorRefId = di_1.Key.get(change_detection_1.ChangeDetectorRef).id;
this.elementRefId = di_1.Key.get(element_ref_2.ElementRef).id;
this.rendererId = di_1.Key.get(api_1.Renderer).id;
}
StaticKeys.instance = function() {
if (lang_1.isBlank(_staticKeys)) _staticKeys = new StaticKeys();
return _staticKeys;
};
return StaticKeys;
}();
exports.StaticKeys = StaticKeys;
var DirectiveDependency = function(_super) {
__extends(DirectiveDependency, _super);
function DirectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties, attributeName, queryDecorator) {
_super.call(this, key, optional, lowerBoundVisibility, upperBoundVisibility, properties);
this.attributeName = attributeName;
this.queryDecorator = queryDecorator;
this._verify();
}
DirectiveDependency.prototype._verify = function() {
var count = 0;
if (lang_1.isPresent(this.queryDecorator)) count++;
if (lang_1.isPresent(this.attributeName)) count++;
if (count > 1) throw new exceptions_1.BaseException("A directive injectable can contain only one of the following @Attribute or @Query.");
};
DirectiveDependency.createFrom = function(d) {
return new DirectiveDependency(d.key, d.optional, d.lowerBoundVisibility, d.upperBoundVisibility, d.properties, DirectiveDependency._attributeName(d.properties), DirectiveDependency._query(d.properties));
};
DirectiveDependency._attributeName = function(properties) {
var p = properties.find(function(p) {
return p instanceof di_2.AttributeMetadata;
});
return lang_1.isPresent(p) ? p.attributeName : null;
};
DirectiveDependency._query = function(properties) {
return properties.find(function(p) {
return p instanceof di_2.QueryMetadata;
});
};
return DirectiveDependency;
}(di_1.Dependency);
exports.DirectiveDependency = DirectiveDependency;
var DirectiveProvider = function(_super) {
__extends(DirectiveProvider, _super);
function DirectiveProvider(key, factory, deps, isComponent, providers, viewProviders, queries) {
_super.call(this, key, [ new provider_2.ResolvedFactory(factory, deps) ], false);
this.isComponent = isComponent;
this.providers = providers;
this.viewProviders = viewProviders;
this.queries = queries;
}
Object.defineProperty(DirectiveProvider.prototype, "displayName", {
get: function() {
return this.key.displayName;
},
enumerable: true,
configurable: true
});
DirectiveProvider.createFromType = function(type, meta) {
var provider = new di_1.Provider(type, {
useClass: type
});
if (lang_1.isBlank(meta)) {
meta = new directives_1.DirectiveMetadata();
}
var rb = provider_2.resolveProvider(provider);
var rf = rb.resolvedFactories[0];
var deps = rf.dependencies.map(DirectiveDependency.createFrom);
var isComponent = meta instanceof directives_1.ComponentMetadata;
var resolvedProviders = lang_1.isPresent(meta.providers) ? di_1.Injector.resolve(meta.providers) : null;
var resolvedViewProviders = meta instanceof directives_1.ComponentMetadata && lang_1.isPresent(meta.viewProviders) ? di_1.Injector.resolve(meta.viewProviders) : null;
var queries = [];
if (lang_1.isPresent(meta.queries)) {
collection_1.StringMapWrapper.forEach(meta.queries, function(meta, fieldName) {
var setter = reflection_1.reflector.setter(fieldName);
queries.push(new QueryMetadataWithSetter(setter, meta));
});
}
deps.forEach(function(d) {
if (lang_1.isPresent(d.queryDecorator)) {
queries.push(new QueryMetadataWithSetter(null, d.queryDecorator));
}
});
return new DirectiveProvider(rb.key, rf.factory, deps, isComponent, resolvedProviders, resolvedViewProviders, queries);
};
return DirectiveProvider;
}(provider_2.ResolvedProvider_);
exports.DirectiveProvider = DirectiveProvider;
var QueryMetadataWithSetter = function() {
function QueryMetadataWithSetter(setter, metadata) {
this.setter = setter;
this.metadata = metadata;
}
return QueryMetadataWithSetter;
}();
exports.QueryMetadataWithSetter = QueryMetadataWithSetter;
function setProvidersVisibility(providers, visibility, result) {
for (var i = 0; i < providers.length; i++) {
result.set(providers[i].key.id, visibility);
}
}
var AppProtoElement = function() {
function AppProtoElement(firstProviderIsComponent, index, attributes, pwvs, protoQueryRefs, directiveVariableBindings) {
this.firstProviderIsComponent = firstProviderIsComponent;
this.index = index;
this.attributes = attributes;
this.protoQueryRefs = protoQueryRefs;
this.directiveVariableBindings = directiveVariableBindings;
var length = pwvs.length;
if (length > 0) {
this.protoInjector = new injector_1.ProtoInjector(pwvs);
} else {
this.protoInjector = null;
this.protoQueryRefs = [];
}
}
AppProtoElement.create = function(metadataCache, index, attributes, directiveTypes, directiveVariableBindings) {
var componentDirProvider = null;
var mergedProvidersMap = new Map();
var providerVisibilityMap = new Map();
var providers = collection_1.ListWrapper.createGrowableSize(directiveTypes.length);
var protoQueryRefs = [];
for (var i = 0; i < directiveTypes.length; i++) {
var dirProvider = metadataCache.getResolvedDirectiveMetadata(directiveTypes[i]);
providers[i] = new injector_1.ProviderWithVisibility(dirProvider, dirProvider.isComponent ? injector_1.Visibility.PublicAndPrivate : injector_1.Visibility.Public);
if (dirProvider.isComponent) {
componentDirProvider = dirProvider;
} else {
if (lang_1.isPresent(dirProvider.providers)) {
provider_1.mergeResolvedProviders(dirProvider.providers, mergedProvidersMap);
setProvidersVisibility(dirProvider.providers, injector_1.Visibility.Public, providerVisibilityMap);
}
}
if (lang_1.isPresent(dirProvider.viewProviders)) {
provider_1.mergeResolvedProviders(dirProvider.viewProviders, mergedProvidersMap);
setProvidersVisibility(dirProvider.viewProviders, injector_1.Visibility.Private, providerVisibilityMap);
}
for (var queryIdx = 0; queryIdx < dirProvider.queries.length; queryIdx++) {
var q = dirProvider.queries[queryIdx];
protoQueryRefs.push(new ProtoQueryRef(i, q.setter, q.metadata));
}
}
if (lang_1.isPresent(componentDirProvider) && lang_1.isPresent(componentDirProvider.providers)) {
provider_1.mergeResolvedProviders(componentDirProvider.providers, mergedProvidersMap);
setProvidersVisibility(componentDirProvider.providers, injector_1.Visibility.Public, providerVisibilityMap);
}
mergedProvidersMap.forEach(function(provider, _) {
providers.push(new injector_1.ProviderWithVisibility(provider, providerVisibilityMap.get(provider.key.id)));
});
return new AppProtoElement(lang_1.isPresent(componentDirProvider), index, attributes, providers, protoQueryRefs, directiveVariableBindings);
};
AppProtoElement.prototype.getProviderAtIndex = function(index) {
return this.protoInjector.getProviderAtIndex(index);
};
return AppProtoElement;
}();
exports.AppProtoElement = AppProtoElement;
var _Context = function() {
function _Context(element, componentElement, injector) {
this.element = element;
this.componentElement = componentElement;
this.injector = injector;
}
return _Context;
}();
var InjectorWithHostBoundary = function() {
function InjectorWithHostBoundary(injector, hostInjectorBoundary) {
this.injector = injector;
this.hostInjectorBoundary = hostInjectorBoundary;
}
return InjectorWithHostBoundary;
}();
exports.InjectorWithHostBoundary = InjectorWithHostBoundary;
var AppElement = function() {
function AppElement(proto, parentView, parent, nativeElement, embeddedViewFactory) {
var _this = this;
this.proto = proto;
this.parentView = parentView;
this.parent = parent;
this.nativeElement = nativeElement;
this.embeddedViewFactory = embeddedViewFactory;
this.nestedViews = null;
this.componentView = null;
this.ref = new element_ref_1.ElementRef_(this);
var parentInjector = lang_1.isPresent(parent) ? parent._injector : parentView.parentInjector;
if (lang_1.isPresent(this.proto.protoInjector)) {
var isBoundary;
if (lang_1.isPresent(parent) && lang_1.isPresent(parent.proto.protoInjector)) {
isBoundary = false;
} else {
isBoundary = parentView.hostInjectorBoundary;
}
this._queryStrategy = this._buildQueryStrategy();
this._injector = new di_1.Injector(this.proto.protoInjector, parentInjector, isBoundary, this, function() {
return _this._debugContext();
});
var injectorStrategy = this._injector.internalStrategy;
this._strategy = injectorStrategy instanceof injector_1.InjectorInlineStrategy ? new ElementDirectiveInlineStrategy(injectorStrategy, this) : new ElementDirectiveDynamicStrategy(injectorStrategy, this);
this._strategy.init();
} else {
this._queryStrategy = null;
this._injector = parentInjector;
this._strategy = null;
}
}
AppElement.getViewParentInjector = function(parentViewType, containerAppElement, imperativelyCreatedProviders, rootInjector) {
var parentInjector;
var hostInjectorBoundary;
switch (parentViewType) {
case view_type_1.ViewType.COMPONENT:
parentInjector = containerAppElement._injector;
hostInjectorBoundary = true;
break;

case view_type_1.ViewType.EMBEDDED:
parentInjector = lang_1.isPresent(containerAppElement.proto.protoInjector) ? containerAppElement._injector.parent : containerAppElement._injector;
hostInjectorBoundary = containerAppElement._injector.hostBoundary;
break;

case view_type_1.ViewType.HOST:
if (lang_1.isPresent(containerAppElement)) {
parentInjector = lang_1.isPresent(containerAppElement.proto.protoInjector) ? containerAppElement._injector.parent : containerAppElement._injector;
if (lang_1.isPresent(imperativelyCreatedProviders)) {
var imperativeProvidersWithVisibility = imperativelyCreatedProviders.map(function(p) {
return new injector_1.ProviderWithVisibility(p, injector_1.Visibility.Public);
});
parentInjector = new di_1.Injector(new injector_1.ProtoInjector(imperativeProvidersWithVisibility), parentInjector, true, null, null);
hostInjectorBoundary = false;
} else {
hostInjectorBoundary = containerAppElement._injector.hostBoundary;
}
} else {
parentInjector = rootInjector;
hostInjectorBoundary = true;
}
break;
}
return new InjectorWithHostBoundary(parentInjector, hostInjectorBoundary);
};
AppElement.prototype.attachComponentView = function(componentView) {
this.componentView = componentView;
};
AppElement.prototype._debugContext = function() {
var c = this.parentView.getDebugContext(this, null, null);
return lang_1.isPresent(c) ? new _Context(c.element, c.componentElement, c.injector) : null;
};
AppElement.prototype.hasVariableBinding = function(name) {
var vb = this.proto.directiveVariableBindings;
return lang_1.isPresent(vb) && collection_1.StringMapWrapper.contains(vb, name);
};
AppElement.prototype.getVariableBinding = function(name) {
var index = this.proto.directiveVariableBindings[name];
return lang_1.isPresent(index) ? this.getDirectiveAtIndex(index) : this.getElementRef();
};
AppElement.prototype.get = function(token) {
return this._injector.get(token);
};
AppElement.prototype.hasDirective = function(type) {
return lang_1.isPresent(this._injector.getOptional(type));
};
AppElement.prototype.getComponent = function() {
return lang_1.isPresent(this._strategy) ? this._strategy.getComponent() : null;
};
AppElement.prototype.getInjector = function() {
return this._injector;
};
AppElement.prototype.getElementRef = function() {
return this.ref;
};
AppElement.prototype.getViewContainerRef = function() {
return new view_container_ref_2.ViewContainerRef_(this);
};
AppElement.prototype.getTemplateRef = function() {
if (lang_1.isPresent(this.embeddedViewFactory)) {
return new template_ref_1.TemplateRef_(this.ref);
}
return null;
};
AppElement.prototype.getDependency = function(injector, provider, dep) {
if (provider instanceof DirectiveProvider) {
var dirDep = dep;
if (lang_1.isPresent(dirDep.attributeName)) return this._buildAttribute(dirDep);
if (lang_1.isPresent(dirDep.queryDecorator)) return this._queryStrategy.findQuery(dirDep.queryDecorator).list;
if (dirDep.key.id === StaticKeys.instance().changeDetectorRefId) {
if (this.proto.firstProviderIsComponent) {
return new _ComponentViewChangeDetectorRef(this);
} else {
return this.parentView.changeDetector.ref;
}
}
if (dirDep.key.id === StaticKeys.instance().elementRefId) {
return this.getElementRef();
}
if (dirDep.key.id === StaticKeys.instance().viewContainerId) {
return this.getViewContainerRef();
}
if (dirDep.key.id === StaticKeys.instance().templateRefId) {
var tr = this.getTemplateRef();
if (lang_1.isBlank(tr) && !dirDep.optional) {
throw new di_1.NoProviderError(null, dirDep.key);
}
return tr;
}
if (dirDep.key.id === StaticKeys.instance().rendererId) {
return this.parentView.renderer;
}
} else if (provider instanceof pipe_provider_1.PipeProvider) {
if (dep.key.id === StaticKeys.instance().changeDetectorRefId) {
if (this.proto.firstProviderIsComponent) {
return new _ComponentViewChangeDetectorRef(this);
} else {
return this.parentView.changeDetector;
}
}
}
return injector_1.UNDEFINED;
};
AppElement.prototype._buildAttribute = function(dep) {
var attributes = this.proto.attributes;
if (lang_1.isPresent(attributes) && collection_1.StringMapWrapper.contains(attributes, dep.attributeName)) {
return attributes[dep.attributeName];
} else {
return null;
}
};
AppElement.prototype.addDirectivesMatchingQuery = function(query, list) {
var templateRef = this.getTemplateRef();
if (query.selector === template_ref_1.TemplateRef && lang_1.isPresent(templateRef)) {
list.push(templateRef);
}
if (this._strategy != null) {
this._strategy.addDirectivesMatchingQuery(query, list);
}
};
AppElement.prototype._buildQueryStrategy = function() {
if (this.proto.protoQueryRefs.length === 0) {
return _emptyQueryStrategy;
} else if (this.proto.protoQueryRefs.length <= InlineQueryStrategy.NUMBER_OF_SUPPORTED_QUERIES) {
return new InlineQueryStrategy(this);
} else {
return new DynamicQueryStrategy(this);
}
};
AppElement.prototype.getDirectiveAtIndex = function(index) {
return this._injector.getAt(index);
};
AppElement.prototype.ngAfterViewChecked = function() {
if (lang_1.isPresent(this._queryStrategy)) this._queryStrategy.updateViewQueries();
};
AppElement.prototype.ngAfterContentChecked = function() {
if (lang_1.isPresent(this._queryStrategy)) this._queryStrategy.updateContentQueries();
};
AppElement.prototype.traverseAndSetQueriesAsDirty = function() {
var inj = this;
while (lang_1.isPresent(inj)) {
inj._setQueriesAsDirty();
if (lang_1.isBlank(inj.parent) && inj.parentView.proto.type === view_type_1.ViewType.EMBEDDED) {
inj = inj.parentView.containerAppElement;
} else {
inj = inj.parent;
}
}
};
AppElement.prototype._setQueriesAsDirty = function() {
if (lang_1.isPresent(this._queryStrategy)) {
this._queryStrategy.setContentQueriesAsDirty();
}
if (this.parentView.proto.type === view_type_1.ViewType.COMPONENT) {
this.parentView.containerAppElement._queryStrategy.setViewQueriesAsDirty();
}
};
return AppElement;
}();
exports.AppElement = AppElement;
var _EmptyQueryStrategy = function() {
function _EmptyQueryStrategy() {}
_EmptyQueryStrategy.prototype.setContentQueriesAsDirty = function() {};
_EmptyQueryStrategy.prototype.setViewQueriesAsDirty = function() {};
_EmptyQueryStrategy.prototype.updateContentQueries = function() {};
_EmptyQueryStrategy.prototype.updateViewQueries = function() {};
_EmptyQueryStrategy.prototype.findQuery = function(query) {
throw new exceptions_1.BaseException("Cannot find query for directive " + query + ".");
};
return _EmptyQueryStrategy;
}();
var _emptyQueryStrategy = new _EmptyQueryStrategy();
var InlineQueryStrategy = function() {
function InlineQueryStrategy(ei) {
var protoRefs = ei.proto.protoQueryRefs;
if (protoRefs.length > 0) this.query0 = new QueryRef(protoRefs[0], ei);
if (protoRefs.length > 1) this.query1 = new QueryRef(protoRefs[1], ei);
if (protoRefs.length > 2) this.query2 = new QueryRef(protoRefs[2], ei);
}
InlineQueryStrategy.prototype.setContentQueriesAsDirty = function() {
if (lang_1.isPresent(this.query0) && !this.query0.isViewQuery) this.query0.dirty = true;
if (lang_1.isPresent(this.query1) && !this.query1.isViewQuery) this.query1.dirty = true;
if (lang_1.isPresent(this.query2) && !this.query2.isViewQuery) this.query2.dirty = true;
};
InlineQueryStrategy.prototype.setViewQueriesAsDirty = function() {
if (lang_1.isPresent(this.query0) && this.query0.isViewQuery) this.query0.dirty = true;
if (lang_1.isPresent(this.query1) && this.query1.isViewQuery) this.query1.dirty = true;
if (lang_1.isPresent(this.query2) && this.query2.isViewQuery) this.query2.dirty = true;
};
InlineQueryStrategy.prototype.updateContentQueries = function() {
if (lang_1.isPresent(this.query0) && !this.query0.isViewQuery) {
this.query0.update();
}
if (lang_1.isPresent(this.query1) && !this.query1.isViewQuery) {
this.query1.update();
}
if (lang_1.isPresent(this.query2) && !this.query2.isViewQuery) {
this.query2.update();
}
};
InlineQueryStrategy.prototype.updateViewQueries = function() {
if (lang_1.isPresent(this.query0) && this.query0.isViewQuery) {
this.query0.update();
}
if (lang_1.isPresent(this.query1) && this.query1.isViewQuery) {
this.query1.update();
}
if (lang_1.isPresent(this.query2) && this.query2.isViewQuery) {
this.query2.update();
}
};
InlineQueryStrategy.prototype.findQuery = function(query) {
if (lang_1.isPresent(this.query0) && this.query0.protoQueryRef.query === query) {
return this.query0;
}
if (lang_1.isPresent(this.query1) && this.query1.protoQueryRef.query === query) {
return this.query1;
}
if (lang_1.isPresent(this.query2) && this.query2.protoQueryRef.query === query) {
return this.query2;
}
throw new exceptions_1.BaseException("Cannot find query for directive " + query + ".");
};
InlineQueryStrategy.NUMBER_OF_SUPPORTED_QUERIES = 3;
return InlineQueryStrategy;
}();
var DynamicQueryStrategy = function() {
function DynamicQueryStrategy(ei) {
this.queries = ei.proto.protoQueryRefs.map(function(p) {
return new QueryRef(p, ei);
});
}
DynamicQueryStrategy.prototype.setContentQueriesAsDirty = function() {
for (var i = 0; i < this.queries.length; ++i) {
var q = this.queries[i];
if (!q.isViewQuery) q.dirty = true;
}
};
DynamicQueryStrategy.prototype.setViewQueriesAsDirty = function() {
for (var i = 0; i < this.queries.length; ++i) {
var q = this.queries[i];
if (q.isViewQuery) q.dirty = true;
}
};
DynamicQueryStrategy.prototype.updateContentQueries = function() {
for (var i = 0; i < this.queries.length; ++i) {
var q = this.queries[i];
if (!q.isViewQuery) {
q.update();
}
}
};
DynamicQueryStrategy.prototype.updateViewQueries = function() {
for (var i = 0; i < this.queries.length; ++i) {
var q = this.queries[i];
if (q.isViewQuery) {
q.update();
}
}
};
DynamicQueryStrategy.prototype.findQuery = function(query) {
for (var i = 0; i < this.queries.length; ++i) {
var q = this.queries[i];
if (q.protoQueryRef.query === query) {
return q;
}
}
throw new exceptions_1.BaseException("Cannot find query for directive " + query + ".");
};
return DynamicQueryStrategy;
}();
var ElementDirectiveInlineStrategy = function() {
function ElementDirectiveInlineStrategy(injectorStrategy, _ei) {
this.injectorStrategy = injectorStrategy;
this._ei = _ei;
}
ElementDirectiveInlineStrategy.prototype.init = function() {
var i = this.injectorStrategy;
var p = i.protoStrategy;
i.resetConstructionCounter();
if (p.provider0 instanceof DirectiveProvider && lang_1.isPresent(p.keyId0) && i.obj0 === injector_1.UNDEFINED) i.obj0 = i.instantiateProvider(p.provider0, p.visibility0);
if (p.provider1 instanceof DirectiveProvider && lang_1.isPresent(p.keyId1) && i.obj1 === injector_1.UNDEFINED) i.obj1 = i.instantiateProvider(p.provider1, p.visibility1);
if (p.provider2 instanceof DirectiveProvider && lang_1.isPresent(p.keyId2) && i.obj2 === injector_1.UNDEFINED) i.obj2 = i.instantiateProvider(p.provider2, p.visibility2);
if (p.provider3 instanceof DirectiveProvider && lang_1.isPresent(p.keyId3) && i.obj3 === injector_1.UNDEFINED) i.obj3 = i.instantiateProvider(p.provider3, p.visibility3);
if (p.provider4 instanceof DirectiveProvider && lang_1.isPresent(p.keyId4) && i.obj4 === injector_1.UNDEFINED) i.obj4 = i.instantiateProvider(p.provider4, p.visibility4);
if (p.provider5 instanceof DirectiveProvider && lang_1.isPresent(p.keyId5) && i.obj5 === injector_1.UNDEFINED) i.obj5 = i.instantiateProvider(p.provider5, p.visibility5);
if (p.provider6 instanceof DirectiveProvider && lang_1.isPresent(p.keyId6) && i.obj6 === injector_1.UNDEFINED) i.obj6 = i.instantiateProvider(p.provider6, p.visibility6);
if (p.provider7 instanceof DirectiveProvider && lang_1.isPresent(p.keyId7) && i.obj7 === injector_1.UNDEFINED) i.obj7 = i.instantiateProvider(p.provider7, p.visibility7);
if (p.provider8 instanceof DirectiveProvider && lang_1.isPresent(p.keyId8) && i.obj8 === injector_1.UNDEFINED) i.obj8 = i.instantiateProvider(p.provider8, p.visibility8);
if (p.provider9 instanceof DirectiveProvider && lang_1.isPresent(p.keyId9) && i.obj9 === injector_1.UNDEFINED) i.obj9 = i.instantiateProvider(p.provider9, p.visibility9);
};
ElementDirectiveInlineStrategy.prototype.getComponent = function() {
return this.injectorStrategy.obj0;
};
ElementDirectiveInlineStrategy.prototype.isComponentKey = function(key) {
return this._ei.proto.firstProviderIsComponent && lang_1.isPresent(key) && key.id === this.injectorStrategy.protoStrategy.keyId0;
};
ElementDirectiveInlineStrategy.prototype.addDirectivesMatchingQuery = function(query, list) {
var i = this.injectorStrategy;
var p = i.protoStrategy;
if (lang_1.isPresent(p.provider0) && p.provider0.key.token === query.selector) {
if (i.obj0 === injector_1.UNDEFINED) i.obj0 = i.instantiateProvider(p.provider0, p.visibility0);
list.push(i.obj0);
}
if (lang_1.isPresent(p.provider1) && p.provider1.key.token === query.selector) {
if (i.obj1 === injector_1.UNDEFINED) i.obj1 = i.instantiateProvider(p.provider1, p.visibility1);
list.push(i.obj1);
}
if (lang_1.isPresent(p.provider2) && p.provider2.key.token === query.selector) {
if (i.obj2 === injector_1.UNDEFINED) i.obj2 = i.instantiateProvider(p.provider2, p.visibility2);
list.push(i.obj2);
}
if (lang_1.isPresent(p.provider3) && p.provider3.key.token === query.selector) {
if (i.obj3 === injector_1.UNDEFINED) i.obj3 = i.instantiateProvider(p.provider3, p.visibility3);
list.push(i.obj3);
}
if (lang_1.isPresent(p.provider4) && p.provider4.key.token === query.selector) {
if (i.obj4 === injector_1.UNDEFINED) i.obj4 = i.instantiateProvider(p.provider4, p.visibility4);
list.push(i.obj4);
}
if (lang_1.isPresent(p.provider5) && p.provider5.key.token === query.selector) {
if (i.obj5 === injector_1.UNDEFINED) i.obj5 = i.instantiateProvider(p.provider5, p.visibility5);
list.push(i.obj5);
}
if (lang_1.isPresent(p.provider6) && p.provider6.key.token === query.selector) {
if (i.obj6 === injector_1.UNDEFINED) i.obj6 = i.instantiateProvider(p.provider6, p.visibility6);
list.push(i.obj6);
}
if (lang_1.isPresent(p.provider7) && p.provider7.key.token === query.selector) {
if (i.obj7 === injector_1.UNDEFINED) i.obj7 = i.instantiateProvider(p.provider7, p.visibility7);
list.push(i.obj7);
}
if (lang_1.isPresent(p.provider8) && p.provider8.key.token === query.selector) {
if (i.obj8 === injector_1.UNDEFINED) i.obj8 = i.instantiateProvider(p.provider8, p.visibility8);
list.push(i.obj8);
}
if (lang_1.isPresent(p.provider9) && p.provider9.key.token === query.selector) {
if (i.obj9 === injector_1.UNDEFINED) i.obj9 = i.instantiateProvider(p.provider9, p.visibility9);
list.push(i.obj9);
}
};
return ElementDirectiveInlineStrategy;
}();
var ElementDirectiveDynamicStrategy = function() {
function ElementDirectiveDynamicStrategy(injectorStrategy, _ei) {
this.injectorStrategy = injectorStrategy;
this._ei = _ei;
}
ElementDirectiveDynamicStrategy.prototype.init = function() {
var inj = this.injectorStrategy;
var p = inj.protoStrategy;
inj.resetConstructionCounter();
for (var i = 0; i < p.keyIds.length; i++) {
if (p.providers[i] instanceof DirectiveProvider && lang_1.isPresent(p.keyIds[i]) && inj.objs[i] === injector_1.UNDEFINED) {
inj.objs[i] = inj.instantiateProvider(p.providers[i], p.visibilities[i]);
}
}
};
ElementDirectiveDynamicStrategy.prototype.getComponent = function() {
return this.injectorStrategy.objs[0];
};
ElementDirectiveDynamicStrategy.prototype.isComponentKey = function(key) {
var p = this.injectorStrategy.protoStrategy;
return this._ei.proto.firstProviderIsComponent && lang_1.isPresent(key) && key.id === p.keyIds[0];
};
ElementDirectiveDynamicStrategy.prototype.addDirectivesMatchingQuery = function(query, list) {
var ist = this.injectorStrategy;
var p = ist.protoStrategy;
for (var i = 0; i < p.providers.length; i++) {
if (p.providers[i].key.token === query.selector) {
if (ist.objs[i] === injector_1.UNDEFINED) {
ist.objs[i] = ist.instantiateProvider(p.providers[i], p.visibilities[i]);
}
list.push(ist.objs[i]);
}
}
};
return ElementDirectiveDynamicStrategy;
}();
var ProtoQueryRef = function() {
function ProtoQueryRef(dirIndex, setter, query) {
this.dirIndex = dirIndex;
this.setter = setter;
this.query = query;
}
Object.defineProperty(ProtoQueryRef.prototype, "usesPropertySyntax", {
get: function() {
return lang_1.isPresent(this.setter);
},
enumerable: true,
configurable: true
});
return ProtoQueryRef;
}();
exports.ProtoQueryRef = ProtoQueryRef;
var QueryRef = function() {
function QueryRef(protoQueryRef, originator) {
this.protoQueryRef = protoQueryRef;
this.originator = originator;
this.list = new query_list_1.QueryList();
this.dirty = true;
}
Object.defineProperty(QueryRef.prototype, "isViewQuery", {
get: function() {
return this.protoQueryRef.query.isViewQuery;
},
enumerable: true,
configurable: true
});
QueryRef.prototype.update = function() {
if (!this.dirty) return;
this._update();
this.dirty = false;
if (this.protoQueryRef.usesPropertySyntax) {
var dir = this.originator.getDirectiveAtIndex(this.protoQueryRef.dirIndex);
if (this.protoQueryRef.query.first) {
this.protoQueryRef.setter(dir, this.list.length > 0 ? this.list.first : null);
} else {
this.protoQueryRef.setter(dir, this.list);
}
}
this.list.notifyOnChanges();
};
QueryRef.prototype._update = function() {
var aggregator = [];
if (this.protoQueryRef.query.isViewQuery) {
var nestedView = this.originator.componentView;
if (lang_1.isPresent(nestedView)) this._visitView(nestedView, aggregator);
} else {
this._visit(this.originator, aggregator);
}
this.list.reset(aggregator);
};
QueryRef.prototype._visit = function(inj, aggregator) {
var view = inj.parentView;
var startIdx = inj.proto.index;
for (var i = startIdx; i < view.appElements.length; i++) {
var curInj = view.appElements[i];
if (i > startIdx && (lang_1.isBlank(curInj.parent) || curInj.parent.proto.index < startIdx)) {
break;
}
if (!this.protoQueryRef.query.descendants && !(curInj.parent == this.originator || curInj == this.originator)) continue;
this._visitInjector(curInj, aggregator);
this._visitViewContainerViews(curInj.nestedViews, aggregator);
}
};
QueryRef.prototype._visitInjector = function(inj, aggregator) {
if (this.protoQueryRef.query.isVarBindingQuery) {
this._aggregateVariableBinding(inj, aggregator);
} else {
this._aggregateDirective(inj, aggregator);
}
};
QueryRef.prototype._visitViewContainerViews = function(views, aggregator) {
if (lang_1.isPresent(views)) {
for (var j = 0; j < views.length; j++) {
this._visitView(views[j], aggregator);
}
}
};
QueryRef.prototype._visitView = function(view, aggregator) {
for (var i = 0; i < view.appElements.length; i++) {
var inj = view.appElements[i];
this._visitInjector(inj, aggregator);
this._visitViewContainerViews(inj.nestedViews, aggregator);
}
};
QueryRef.prototype._aggregateVariableBinding = function(inj, aggregator) {
var vb = this.protoQueryRef.query.varBindings;
for (var i = 0; i < vb.length; ++i) {
if (inj.hasVariableBinding(vb[i])) {
aggregator.push(inj.getVariableBinding(vb[i]));
}
}
};
QueryRef.prototype._aggregateDirective = function(inj, aggregator) {
inj.addDirectivesMatchingQuery(this.protoQueryRef.query, aggregator);
};
return QueryRef;
}();
exports.QueryRef = QueryRef;
var _ComponentViewChangeDetectorRef = function(_super) {
__extends(_ComponentViewChangeDetectorRef, _super);
function _ComponentViewChangeDetectorRef(_appElement) {
_super.call(this);
this._appElement = _appElement;
}
_ComponentViewChangeDetectorRef.prototype.markForCheck = function() {
this._appElement.componentView.changeDetector.ref.markForCheck();
};
_ComponentViewChangeDetectorRef.prototype.detach = function() {
this._appElement.componentView.changeDetector.ref.detach();
};
_ComponentViewChangeDetectorRef.prototype.detectChanges = function() {
this._appElement.componentView.changeDetector.ref.detectChanges();
};
_ComponentViewChangeDetectorRef.prototype.checkNoChanges = function() {
this._appElement.componentView.changeDetector.ref.checkNoChanges();
};
_ComponentViewChangeDetectorRef.prototype.reattach = function() {
this._appElement.componentView.changeDetector.ref.reattach();
};
return _ComponentViewChangeDetectorRef;
}(change_detection_1.ChangeDetectorRef);
}, function(module, exports) {
"use strict";
(function(ViewType) {
ViewType[ViewType["HOST"] = 0] = "HOST";
ViewType[ViewType["COMPONENT"] = 1] = "COMPONENT";
ViewType[ViewType["EMBEDDED"] = 2] = "EMBEDDED";
})(exports.ViewType || (exports.ViewType = {}));
var ViewType = exports.ViewType;
}, function(module, exports, __webpack_require__) {
"use strict";
var exceptions_1 = __webpack_require__(117);
var ElementRef = function() {
function ElementRef() {}
Object.defineProperty(ElementRef.prototype, "nativeElement", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return ElementRef;
}();
exports.ElementRef = ElementRef;
var ElementRef_ = function() {
function ElementRef_(_appElement) {
this._appElement = _appElement;
}
Object.defineProperty(ElementRef_.prototype, "internalElement", {
get: function() {
return this._appElement;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ElementRef_.prototype, "nativeElement", {
get: function() {
return this._appElement.nativeElement;
},
enumerable: true,
configurable: true
});
return ElementRef_;
}();
exports.ElementRef_ = ElementRef_;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var collection_1 = __webpack_require__(115);
var exceptions_1 = __webpack_require__(117);
var lang_1 = __webpack_require__(105);
var ViewContainerRef = function() {
function ViewContainerRef() {}
Object.defineProperty(ViewContainerRef.prototype, "element", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
ViewContainerRef.prototype.clear = function() {
for (var i = this.length - 1; i >= 0; i--) {
this.remove(i);
}
};
Object.defineProperty(ViewContainerRef.prototype, "length", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return ViewContainerRef;
}();
exports.ViewContainerRef = ViewContainerRef;
var ViewContainerRef_ = function(_super) {
__extends(ViewContainerRef_, _super);
function ViewContainerRef_(_element) {
_super.call(this);
this._element = _element;
}
ViewContainerRef_.prototype.get = function(index) {
return this._element.nestedViews[index].ref;
};
Object.defineProperty(ViewContainerRef_.prototype, "length", {
get: function() {
var views = this._element.nestedViews;
return lang_1.isPresent(views) ? views.length : 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewContainerRef_.prototype, "element", {
get: function() {
return this._element.ref;
},
enumerable: true,
configurable: true
});
ViewContainerRef_.prototype.createEmbeddedView = function(templateRef, index) {
if (index === void 0) {
index = -1;
}
if (index == -1) index = this.length;
var vm = this._element.parentView.viewManager;
return vm.createEmbeddedViewInContainer(this._element.ref, index, templateRef);
};
ViewContainerRef_.prototype.createHostView = function(hostViewFactoryRef, index, dynamicallyCreatedProviders, projectableNodes) {
if (index === void 0) {
index = -1;
}
if (dynamicallyCreatedProviders === void 0) {
dynamicallyCreatedProviders = null;
}
if (projectableNodes === void 0) {
projectableNodes = null;
}
if (index == -1) index = this.length;
var vm = this._element.parentView.viewManager;
return vm.createHostViewInContainer(this._element.ref, index, hostViewFactoryRef, dynamicallyCreatedProviders, projectableNodes);
};
ViewContainerRef_.prototype.insert = function(viewRef, index) {
if (index === void 0) {
index = -1;
}
if (index == -1) index = this.length;
var vm = this._element.parentView.viewManager;
return vm.attachViewInContainer(this._element.ref, index, viewRef);
};
ViewContainerRef_.prototype.indexOf = function(viewRef) {
return collection_1.ListWrapper.indexOf(this._element.nestedViews, viewRef.internalView);
};
ViewContainerRef_.prototype.remove = function(index) {
if (index === void 0) {
index = -1;
}
if (index == -1) index = this.length - 1;
var vm = this._element.parentView.viewManager;
return vm.destroyViewInContainer(this._element.ref, index);
};
ViewContainerRef_.prototype.detach = function(index) {
if (index === void 0) {
index = -1;
}
if (index == -1) index = this.length - 1;
var vm = this._element.parentView.viewManager;
return vm.detachViewInContainer(this._element.ref, index);
};
return ViewContainerRef_;
}(ViewContainerRef);
exports.ViewContainerRef_ = ViewContainerRef_;
}, function(module, exports) {
"use strict";
var RenderComponentType = function() {
function RenderComponentType(id, encapsulation, styles) {
this.id = id;
this.encapsulation = encapsulation;
this.styles = styles;
}
return RenderComponentType;
}();
exports.RenderComponentType = RenderComponentType;
var RenderDebugInfo = function() {
function RenderDebugInfo(injector, component, providerTokens, locals) {
this.injector = injector;
this.component = component;
this.providerTokens = providerTokens;
this.locals = locals;
}
return RenderDebugInfo;
}();
exports.RenderDebugInfo = RenderDebugInfo;
var Renderer = function() {
function Renderer() {}
return Renderer;
}();
exports.Renderer = Renderer;
var RootRenderer = function() {
function RootRenderer() {}
return RootRenderer;
}();
exports.RootRenderer = RootRenderer;
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var TemplateRef = function() {
function TemplateRef() {}
Object.defineProperty(TemplateRef.prototype, "elementRef", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
return TemplateRef;
}();
exports.TemplateRef = TemplateRef;
var TemplateRef_ = function(_super) {
__extends(TemplateRef_, _super);
function TemplateRef_(_elementRef) {
_super.call(this);
this._elementRef = _elementRef;
}
Object.defineProperty(TemplateRef_.prototype, "elementRef", {
get: function() {
return this._elementRef;
},
enumerable: true,
configurable: true
});
return TemplateRef_;
}(TemplateRef);
exports.TemplateRef_ = TemplateRef_;
}, function(module, exports, __webpack_require__) {
"use strict";
var collection_1 = __webpack_require__(115);
var lang_1 = __webpack_require__(105);
var async_1 = __webpack_require__(150);
var QueryList = function() {
function QueryList() {
this._results = [];
this._emitter = new async_1.EventEmitter();
}
Object.defineProperty(QueryList.prototype, "changes", {
get: function() {
return this._emitter;
},
enumerable: true,
configurable: true
});
Object.defineProperty(QueryList.prototype, "length", {
get: function() {
return this._results.length;
},
enumerable: true,
configurable: true
});
Object.defineProperty(QueryList.prototype, "first", {
get: function() {
return collection_1.ListWrapper.first(this._results);
},
enumerable: true,
configurable: true
});
Object.defineProperty(QueryList.prototype, "last", {
get: function() {
return collection_1.ListWrapper.last(this._results);
},
enumerable: true,
configurable: true
});
QueryList.prototype.map = function(fn) {
return this._results.map(fn);
};
QueryList.prototype.filter = function(fn) {
return this._results.filter(fn);
};
QueryList.prototype.reduce = function(fn, init) {
return this._results.reduce(fn, init);
};
QueryList.prototype.forEach = function(fn) {
this._results.forEach(fn);
};
QueryList.prototype.toArray = function() {
return collection_1.ListWrapper.clone(this._results);
};
QueryList.prototype[lang_1.getSymbolIterator()] = function() {
return this._results[lang_1.getSymbolIterator()]();
};
QueryList.prototype.toString = function() {
return this._results.toString();
};
QueryList.prototype.reset = function(res) {
this._results = res;
};
QueryList.prototype.notifyOnChanges = function() {
this._emitter.emit(this);
};
return QueryList;
}();
exports.QueryList = QueryList;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var provider_1 = __webpack_require__(116);
var di_1 = __webpack_require__(109);
var PipeProvider = function(_super) {
__extends(PipeProvider, _super);
function PipeProvider(name, pure, key, resolvedFactories, multiBinding) {
_super.call(this, key, resolvedFactories, multiBinding);
this.name = name;
this.pure = pure;
}
PipeProvider.createFromType = function(type, metadata) {
var provider = new di_1.Provider(type, {
useClass: type
});
var rb = provider_1.resolveProvider(provider);
return new PipeProvider(metadata.name, metadata.pure, rb.key, rb.resolvedFactories, rb.multiProvider);
};
return PipeProvider;
}(provider_1.ResolvedProvider_);
exports.PipeProvider = PipeProvider;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var exceptions_1 = __webpack_require__(117);
var ViewRef = function() {
function ViewRef() {}
Object.defineProperty(ViewRef.prototype, "changeDetectorRef", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewRef.prototype, "destroyed", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return ViewRef;
}();
exports.ViewRef = ViewRef;
var HostViewRef = function(_super) {
__extends(HostViewRef, _super);
function HostViewRef() {
_super.apply(this, arguments);
}
Object.defineProperty(HostViewRef.prototype, "rootNodes", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return HostViewRef;
}(ViewRef);
exports.HostViewRef = HostViewRef;
var EmbeddedViewRef = function(_super) {
__extends(EmbeddedViewRef, _super);
function EmbeddedViewRef() {
_super.apply(this, arguments);
}
Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return EmbeddedViewRef;
}(ViewRef);
exports.EmbeddedViewRef = EmbeddedViewRef;
var ViewRef_ = function() {
function ViewRef_(_view) {
this._view = _view;
this._view = _view;
}
Object.defineProperty(ViewRef_.prototype, "internalView", {
get: function() {
return this._view;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewRef_.prototype, "changeDetectorRef", {
get: function() {
return this._view.changeDetector.ref;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewRef_.prototype, "rootNodes", {
get: function() {
return this._view.flatRootNodes;
},
enumerable: true,
configurable: true
});
ViewRef_.prototype.setLocal = function(variableName, value) {
this._view.setLocal(variableName, value);
};
ViewRef_.prototype.hasLocal = function(variableName) {
return this._view.hasLocal(variableName);
};
Object.defineProperty(ViewRef_.prototype, "destroyed", {
get: function() {
return this._view.destroyed;
},
enumerable: true,
configurable: true
});
return ViewRef_;
}();
exports.ViewRef_ = ViewRef_;
var HostViewFactoryRef = function() {
function HostViewFactoryRef() {}
return HostViewFactoryRef;
}();
exports.HostViewFactoryRef = HostViewFactoryRef;
var HostViewFactoryRef_ = function() {
function HostViewFactoryRef_(_hostViewFactory) {
this._hostViewFactory = _hostViewFactory;
}
Object.defineProperty(HostViewFactoryRef_.prototype, "internalHostViewFactory", {
get: function() {
return this._hostViewFactory;
},
enumerable: true,
configurable: true
});
return HostViewFactoryRef_;
}();
exports.HostViewFactoryRef_ = HostViewFactoryRef_;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(115);
var cd = __webpack_require__(201);
var ProtoPipes = function() {
function ProtoPipes(config) {
this.config = config;
this.config = config;
}
ProtoPipes.fromProviders = function(providers) {
var config = {};
providers.forEach(function(b) {
return config[b.name] = b;
});
return new ProtoPipes(config);
};
ProtoPipes.prototype.get = function(name) {
var provider = this.config[name];
if (lang_1.isBlank(provider)) throw new exceptions_1.BaseException("Cannot find pipe '" + name + "'.");
return provider;
};
return ProtoPipes;
}();
exports.ProtoPipes = ProtoPipes;
var Pipes = function() {
function Pipes(proto, injector) {
this.proto = proto;
this.injector = injector;
this._config = {};
}
Pipes.prototype.get = function(name) {
var cached = collection_1.StringMapWrapper.get(this._config, name);
if (lang_1.isPresent(cached)) return cached;
var p = this.proto.get(name);
var transform = this.injector.instantiateResolved(p);
var res = new cd.SelectedPipe(transform, p.pure);
if (p.pure) {
collection_1.StringMapWrapper.set(this._config, name, res);
}
return res;
};
return Pipes;
}();
exports.Pipes = Pipes;
}, function(module, exports) {
"use strict";
var SelectedPipe = function() {
function SelectedPipe(pipe, pure) {
this.pipe = pipe;
this.pure = pure;
}
return SelectedPipe;
}();
exports.SelectedPipe = SelectedPipe;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var CAMEL_CASE_REGEXP = /([A-Z])/g;
var DASH_CASE_REGEXP = /-([a-z])/g;
function camelCaseToDashCase(input) {
return lang_1.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function(m) {
return "-" + m[1].toLowerCase();
});
}
exports.camelCaseToDashCase = camelCaseToDashCase;
function dashCaseToCamelCase(input) {
return lang_1.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function(m) {
return m[1].toUpperCase();
});
}
exports.dashCaseToCamelCase = dashCaseToCamelCase;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var di_1 = __webpack_require__(109);
var lang_1 = __webpack_require__(105);
var collection_1 = __webpack_require__(115);
var exceptions_1 = __webpack_require__(117);
var view_1 = __webpack_require__(190);
var api_1 = __webpack_require__(195);
var profile_1 = __webpack_require__(148);
var application_tokens_1 = __webpack_require__(186);
var view_type_1 = __webpack_require__(192);
var AppViewManager = function() {
function AppViewManager() {}
return AppViewManager;
}();
exports.AppViewManager = AppViewManager;
var AppViewManager_ = function(_super) {
__extends(AppViewManager_, _super);
function AppViewManager_(_renderer, _appId) {
_super.call(this);
this._renderer = _renderer;
this._appId = _appId;
this._nextCompTypeId = 0;
this._createRootHostViewScope = profile_1.wtfCreateScope("AppViewManager#createRootHostView()");
this._destroyRootHostViewScope = profile_1.wtfCreateScope("AppViewManager#destroyRootHostView()");
this._createEmbeddedViewInContainerScope = profile_1.wtfCreateScope("AppViewManager#createEmbeddedViewInContainer()");
this._createHostViewInContainerScope = profile_1.wtfCreateScope("AppViewManager#createHostViewInContainer()");
this._destroyViewInContainerScope = profile_1.wtfCreateScope("AppViewMananger#destroyViewInContainer()");
this._attachViewInContainerScope = profile_1.wtfCreateScope("AppViewMananger#attachViewInContainer()");
this._detachViewInContainerScope = profile_1.wtfCreateScope("AppViewMananger#detachViewInContainer()");
}
AppViewManager_.prototype.getViewContainer = function(location) {
return location.internalElement.getViewContainerRef();
};
AppViewManager_.prototype.getHostElement = function(hostViewRef) {
var hostView = hostViewRef.internalView;
if (hostView.proto.type !== view_type_1.ViewType.HOST) {
throw new exceptions_1.BaseException("This operation is only allowed on host views");
}
return hostView.appElements[0].ref;
};
AppViewManager_.prototype.getNamedElementInComponentView = function(hostLocation, variableName) {
var appEl = hostLocation.internalElement;
var componentView = appEl.componentView;
if (lang_1.isBlank(componentView)) {
throw new exceptions_1.BaseException("There is no component directive at element " + hostLocation);
}
for (var i = 0; i < componentView.appElements.length; i++) {
var compAppEl = componentView.appElements[i];
if (collection_1.StringMapWrapper.contains(compAppEl.proto.directiveVariableBindings, variableName)) {
return compAppEl.ref;
}
}
throw new exceptions_1.BaseException("Could not find variable " + variableName);
};
AppViewManager_.prototype.getComponent = function(hostLocation) {
return hostLocation.internalElement.getComponent();
};
AppViewManager_.prototype.createRootHostView = function(hostViewFactoryRef, overrideSelector, injector, projectableNodes) {
if (projectableNodes === void 0) {
projectableNodes = null;
}
var s = this._createRootHostViewScope();
var hostViewFactory = hostViewFactoryRef.internalHostViewFactory;
var selector = lang_1.isPresent(overrideSelector) ? overrideSelector : hostViewFactory.selector;
var view = hostViewFactory.viewFactory(this._renderer, this, null, projectableNodes, selector, null, injector);
return profile_1.wtfLeave(s, view.ref);
};
AppViewManager_.prototype.destroyRootHostView = function(hostViewRef) {
var s = this._destroyRootHostViewScope();
var hostView = hostViewRef.internalView;
hostView.renderer.detachView(view_1.flattenNestedViewRenderNodes(hostView.rootNodesOrAppElements));
hostView.destroy();
profile_1.wtfLeave(s);
};
AppViewManager_.prototype.createEmbeddedViewInContainer = function(viewContainerLocation, index, templateRef) {
var s = this._createEmbeddedViewInContainerScope();
var contextEl = templateRef.elementRef.internalElement;
var view = contextEl.embeddedViewFactory(contextEl.parentView.renderer, this, contextEl, contextEl.parentView.projectableNodes, null, null, null);
this._attachViewToContainer(view, viewContainerLocation.internalElement, index);
return profile_1.wtfLeave(s, view.ref);
};
AppViewManager_.prototype.createHostViewInContainer = function(viewContainerLocation, index, hostViewFactoryRef, dynamicallyCreatedProviders, projectableNodes) {
var s = this._createHostViewInContainerScope();
var viewContainerLocation_ = viewContainerLocation;
var contextEl = viewContainerLocation_.internalElement;
var hostViewFactory = hostViewFactoryRef.internalHostViewFactory;
var view = hostViewFactory.viewFactory(contextEl.parentView.renderer, contextEl.parentView.viewManager, contextEl, projectableNodes, null, dynamicallyCreatedProviders, null);
this._attachViewToContainer(view, viewContainerLocation_.internalElement, index);
return profile_1.wtfLeave(s, view.ref);
};
AppViewManager_.prototype.destroyViewInContainer = function(viewContainerLocation, index) {
var s = this._destroyViewInContainerScope();
var view = this._detachViewInContainer(viewContainerLocation.internalElement, index);
view.destroy();
profile_1.wtfLeave(s);
};
AppViewManager_.prototype.attachViewInContainer = function(viewContainerLocation, index, viewRef) {
var viewRef_ = viewRef;
var s = this._attachViewInContainerScope();
this._attachViewToContainer(viewRef_.internalView, viewContainerLocation.internalElement, index);
return profile_1.wtfLeave(s, viewRef_);
};
AppViewManager_.prototype.detachViewInContainer = function(viewContainerLocation, index) {
var s = this._detachViewInContainerScope();
var view = this._detachViewInContainer(viewContainerLocation.internalElement, index);
return profile_1.wtfLeave(s, view.ref);
};
AppViewManager_.prototype.onViewCreated = function(view) {};
AppViewManager_.prototype.onViewDestroyed = function(view) {};
AppViewManager_.prototype.createRenderComponentType = function(encapsulation, styles) {
return new api_1.RenderComponentType(this._appId + "-" + this._nextCompTypeId++, encapsulation, styles);
};
AppViewManager_.prototype._attachViewToContainer = function(view, vcAppElement, viewIndex) {
if (view.proto.type === view_type_1.ViewType.COMPONENT) {
throw new exceptions_1.BaseException("Component views can't be moved!");
}
var nestedViews = vcAppElement.nestedViews;
if (nestedViews == null) {
nestedViews = [];
vcAppElement.nestedViews = nestedViews;
}
collection_1.ListWrapper.insert(nestedViews, viewIndex, view);
var refNode;
if (viewIndex > 0) {
var prevView = nestedViews[viewIndex - 1];
refNode = prevView.rootNodesOrAppElements.length > 0 ? prevView.rootNodesOrAppElements[prevView.rootNodesOrAppElements.length - 1] : null;
} else {
refNode = vcAppElement.nativeElement;
}
if (lang_1.isPresent(refNode)) {
var refRenderNode = view_1.findLastRenderNode(refNode);
view.renderer.attachViewAfter(refRenderNode, view_1.flattenNestedViewRenderNodes(view.rootNodesOrAppElements));
}
vcAppElement.parentView.changeDetector.addContentChild(view.changeDetector);
vcAppElement.traverseAndSetQueriesAsDirty();
};
AppViewManager_.prototype._detachViewInContainer = function(vcAppElement, viewIndex) {
var view = collection_1.ListWrapper.removeAt(vcAppElement.nestedViews, viewIndex);
if (view.proto.type === view_type_1.ViewType.COMPONENT) {
throw new exceptions_1.BaseException("Component views can't be moved!");
}
vcAppElement.traverseAndSetQueriesAsDirty();
view.renderer.detachView(view_1.flattenNestedViewRenderNodes(view.rootNodesOrAppElements));
view.changeDetector.remove();
return view;
};
AppViewManager_ = __decorate([ di_1.Injectable(), __param(1, di_1.Inject(application_tokens_1.APP_ID)), __metadata("design:paramtypes", [ api_1.RootRenderer, String ]) ], AppViewManager_);
return AppViewManager_;
}(AppViewManager);
exports.AppViewManager_ = AppViewManager_;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = __webpack_require__(109);
var lang_1 = __webpack_require__(105);
var Console = function() {
function Console() {}
Console.prototype.log = function(message) {
lang_1.print(message);
};
Console = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", []) ], Console);
return Console;
}();
exports.Console = Console;
}, function(module, exports, __webpack_require__) {
"use strict";
var ng_zone_1 = __webpack_require__(185);
exports.NgZone = ng_zone_1.NgZone;
exports.NgZoneError = ng_zone_1.NgZoneError;
}, function(module, exports, __webpack_require__) {
"use strict";
var api_1 = __webpack_require__(195);
exports.RootRenderer = api_1.RootRenderer;
exports.Renderer = api_1.Renderer;
exports.RenderComponentType = api_1.RenderComponentType;
}, function(module, exports, __webpack_require__) {
"use strict";
var directive_resolver_1 = __webpack_require__(208);
exports.DirectiveResolver = directive_resolver_1.DirectiveResolver;
var view_resolver_1 = __webpack_require__(209);
exports.ViewResolver = view_resolver_1.ViewResolver;
var compiler_1 = __webpack_require__(189);
exports.Compiler = compiler_1.Compiler;
var view_manager_1 = __webpack_require__(203);
exports.AppViewManager = view_manager_1.AppViewManager;
var query_list_1 = __webpack_require__(197);
exports.QueryList = query_list_1.QueryList;
var dynamic_component_loader_1 = __webpack_require__(188);
exports.DynamicComponentLoader = dynamic_component_loader_1.DynamicComponentLoader;
var element_ref_1 = __webpack_require__(193);
exports.ElementRef = element_ref_1.ElementRef;
var template_ref_1 = __webpack_require__(196);
exports.TemplateRef = template_ref_1.TemplateRef;
var view_ref_1 = __webpack_require__(199);
exports.EmbeddedViewRef = view_ref_1.EmbeddedViewRef;
exports.HostViewRef = view_ref_1.HostViewRef;
exports.ViewRef = view_ref_1.ViewRef;
exports.HostViewFactoryRef = view_ref_1.HostViewFactoryRef;
var view_container_ref_1 = __webpack_require__(194);
exports.ViewContainerRef = view_container_ref_1.ViewContainerRef;
var dynamic_component_loader_2 = __webpack_require__(188);
exports.ComponentRef = dynamic_component_loader_2.ComponentRef;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = __webpack_require__(109);
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(115);
var metadata_1 = __webpack_require__(107);
var reflection_1 = __webpack_require__(120);
function _isDirectiveMetadata(type) {
return type instanceof metadata_1.DirectiveMetadata;
}
var DirectiveResolver = function() {
function DirectiveResolver() {}
DirectiveResolver.prototype.resolve = function(type) {
var typeMetadata = reflection_1.reflector.annotations(di_1.resolveForwardRef(type));
if (lang_1.isPresent(typeMetadata)) {
var metadata = typeMetadata.find(_isDirectiveMetadata);
if (lang_1.isPresent(metadata)) {
var propertyMetadata = reflection_1.reflector.propMetadata(type);
return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
}
}
throw new exceptions_1.BaseException("No Directive annotation found on " + lang_1.stringify(type));
};
DirectiveResolver.prototype._mergeWithPropertyMetadata = function(dm, propertyMetadata, directiveType) {
var inputs = [];
var outputs = [];
var host = {};
var queries = {};
collection_1.StringMapWrapper.forEach(propertyMetadata, function(metadata, propName) {
metadata.forEach(function(a) {
if (a instanceof metadata_1.InputMetadata) {
if (lang_1.isPresent(a.bindingPropertyName)) {
inputs.push(propName + ": " + a.bindingPropertyName);
} else {
inputs.push(propName);
}
}
if (a instanceof metadata_1.OutputMetadata) {
if (lang_1.isPresent(a.bindingPropertyName)) {
outputs.push(propName + ": " + a.bindingPropertyName);
} else {
outputs.push(propName);
}
}
if (a instanceof metadata_1.HostBindingMetadata) {
if (lang_1.isPresent(a.hostPropertyName)) {
host["[" + a.hostPropertyName + "]"] = propName;
} else {
host["[" + propName + "]"] = propName;
}
}
if (a instanceof metadata_1.HostListenerMetadata) {
var args = lang_1.isPresent(a.args) ? a.args.join(", ") : "";
host["(" + a.eventName + ")"] = propName + "(" + args + ")";
}
if (a instanceof metadata_1.ContentChildrenMetadata) {
queries[propName] = a;
}
if (a instanceof metadata_1.ViewChildrenMetadata) {
queries[propName] = a;
}
if (a instanceof metadata_1.ContentChildMetadata) {
queries[propName] = a;
}
if (a instanceof metadata_1.ViewChildMetadata) {
queries[propName] = a;
}
});
});
return this._merge(dm, inputs, outputs, host, queries, directiveType);
};
DirectiveResolver.prototype._merge = function(dm, inputs, outputs, host, queries, directiveType) {
var mergedInputs = lang_1.isPresent(dm.inputs) ? collection_1.ListWrapper.concat(dm.inputs, inputs) : inputs;
var mergedOutputs;
if (lang_1.isPresent(dm.outputs)) {
dm.outputs.forEach(function(propName) {
if (collection_1.ListWrapper.contains(outputs, propName)) {
throw new exceptions_1.BaseException("Output event '" + propName + "' defined multiple times in '" + lang_1.stringify(directiveType) + "'");
}
});
mergedOutputs = collection_1.ListWrapper.concat(dm.outputs, outputs);
} else {
mergedOutputs = outputs;
}
var mergedHost = lang_1.isPresent(dm.host) ? collection_1.StringMapWrapper.merge(dm.host, host) : host;
var mergedQueries = lang_1.isPresent(dm.queries) ? collection_1.StringMapWrapper.merge(dm.queries, queries) : queries;
if (dm instanceof metadata_1.ComponentMetadata) {
return new metadata_1.ComponentMetadata({
selector: dm.selector,
inputs: mergedInputs,
outputs: mergedOutputs,
host: mergedHost,
exportAs: dm.exportAs,
moduleId: dm.moduleId,
queries: mergedQueries,
changeDetection: dm.changeDetection,
providers: dm.providers,
viewProviders: dm.viewProviders
});
} else {
return new metadata_1.DirectiveMetadata({
selector: dm.selector,
inputs: mergedInputs,
outputs: mergedOutputs,
host: mergedHost,
exportAs: dm.exportAs,
queries: mergedQueries,
providers: dm.providers
});
}
};
DirectiveResolver = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", []) ], DirectiveResolver);
return DirectiveResolver;
}();
exports.DirectiveResolver = DirectiveResolver;
exports.CODEGEN_DIRECTIVE_RESOLVER = new DirectiveResolver();
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = __webpack_require__(109);
var view_1 = __webpack_require__(180);
var directives_1 = __webpack_require__(126);
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(115);
var reflection_1 = __webpack_require__(120);
var ViewResolver = function() {
function ViewResolver() {
this._cache = new collection_1.Map();
}
ViewResolver.prototype.resolve = function(component) {
var view = this._cache.get(component);
if (lang_1.isBlank(view)) {
view = this._resolve(component);
this._cache.set(component, view);
}
return view;
};
ViewResolver.prototype._resolve = function(component) {
var compMeta;
var viewMeta;
reflection_1.reflector.annotations(component).forEach(function(m) {
if (m instanceof view_1.ViewMetadata) {
viewMeta = m;
}
if (m instanceof directives_1.ComponentMetadata) {
compMeta = m;
}
});
if (lang_1.isPresent(compMeta)) {
if (lang_1.isBlank(compMeta.template) && lang_1.isBlank(compMeta.templateUrl) && lang_1.isBlank(viewMeta)) {
throw new exceptions_1.BaseException("Component '" + lang_1.stringify(component) + "' must have either 'template', 'templateUrl', or '@View' set.");
} else if (lang_1.isPresent(compMeta.template) && lang_1.isPresent(viewMeta)) {
this._throwMixingViewAndComponent("template", component);
} else if (lang_1.isPresent(compMeta.templateUrl) && lang_1.isPresent(viewMeta)) {
this._throwMixingViewAndComponent("templateUrl", component);
} else if (lang_1.isPresent(compMeta.directives) && lang_1.isPresent(viewMeta)) {
this._throwMixingViewAndComponent("directives", component);
} else if (lang_1.isPresent(compMeta.pipes) && lang_1.isPresent(viewMeta)) {
this._throwMixingViewAndComponent("pipes", component);
} else if (lang_1.isPresent(compMeta.encapsulation) && lang_1.isPresent(viewMeta)) {
this._throwMixingViewAndComponent("encapsulation", component);
} else if (lang_1.isPresent(compMeta.styles) && lang_1.isPresent(viewMeta)) {
this._throwMixingViewAndComponent("styles", component);
} else if (lang_1.isPresent(compMeta.styleUrls) && lang_1.isPresent(viewMeta)) {
this._throwMixingViewAndComponent("styleUrls", component);
} else if (lang_1.isPresent(viewMeta)) {
return viewMeta;
} else {
return new view_1.ViewMetadata({
templateUrl: compMeta.templateUrl,
template: compMeta.template,
directives: compMeta.directives,
pipes: compMeta.pipes,
encapsulation: compMeta.encapsulation,
styles: compMeta.styles,
styleUrls: compMeta.styleUrls
});
}
} else {
if (lang_1.isBlank(viewMeta)) {
throw new exceptions_1.BaseException("No View decorator found on component '" + lang_1.stringify(component) + "'");
} else {
return viewMeta;
}
}
return null;
};
ViewResolver.prototype._throwMixingViewAndComponent = function(propertyName, component) {
throw new exceptions_1.BaseException("Component '" + lang_1.stringify(component) + "' cannot have both '" + propertyName + "' and '@View' set at the same time\"");
};
ViewResolver = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", []) ], ViewResolver);
return ViewResolver;
}();
exports.ViewResolver = ViewResolver;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(105);
var collection_1 = __webpack_require__(115);
var EventListener = function() {
function EventListener(name, callback) {
this.name = name;
this.callback = callback;
}
return EventListener;
}();
exports.EventListener = EventListener;
var DebugNode = function() {
function DebugNode(nativeNode, parent) {
this.nativeNode = nativeNode;
if (lang_1.isPresent(parent) && parent instanceof DebugElement) {
parent.addChild(this);
} else {
this.parent = null;
}
this.listeners = [];
this.providerTokens = [];
}
DebugNode.prototype.setDebugInfo = function(info) {
this.injector = info.injector;
this.providerTokens = info.providerTokens;
this.locals = info.locals;
this.componentInstance = info.component;
};
DebugNode.prototype.inject = function(token) {
return this.injector.get(token);
};
DebugNode.prototype.getLocal = function(name) {
return this.locals.get(name);
};
return DebugNode;
}();
exports.DebugNode = DebugNode;
var DebugElement = function(_super) {
__extends(DebugElement, _super);
function DebugElement(nativeNode, parent) {
_super.call(this, nativeNode, parent);
this.properties = new Map();
this.attributes = new Map();
this.childNodes = [];
this.nativeElement = nativeNode;
}
DebugElement.prototype.addChild = function(child) {
if (lang_1.isPresent(child)) {
this.childNodes.push(child);
child.parent = this;
}
};
DebugElement.prototype.removeChild = function(child) {
var childIndex = this.childNodes.indexOf(child);
if (childIndex !== -1) {
child.parent = null;
this.childNodes.splice(childIndex, 1);
}
};
DebugElement.prototype.insertChildrenAfter = function(child, newChildren) {
var siblingIndex = this.childNodes.indexOf(child);
if (siblingIndex !== -1) {
var previousChildren = this.childNodes.slice(0, siblingIndex + 1);
var nextChildren = this.childNodes.slice(siblingIndex + 1);
this.childNodes = collection_1.ListWrapper.concat(collection_1.ListWrapper.concat(previousChildren, newChildren), nextChildren);
for (var i = 0; i < newChildren.length; ++i) {
var newChild = newChildren[i];
if (lang_1.isPresent(newChild.parent)) {
newChild.parent.removeChild(newChild);
}
newChild.parent = this;
}
}
};
DebugElement.prototype.query = function(predicate) {
var results = this.queryAll(predicate);
return results.length > 0 ? results[0] : null;
};
DebugElement.prototype.queryAll = function(predicate) {
var matches = [];
_queryElementChildren(this, predicate, matches);
return matches;
};
DebugElement.prototype.queryAllNodes = function(predicate) {
var matches = [];
_queryNodeChildren(this, predicate, matches);
return matches;
};
Object.defineProperty(DebugElement.prototype, "children", {
get: function() {
var children = [];
this.childNodes.forEach(function(node) {
if (node instanceof DebugElement) {
children.push(node);
}
});
return children;
},
enumerable: true,
configurable: true
});
DebugElement.prototype.triggerEventHandler = function(eventName, eventObj) {
this.listeners.forEach(function(listener) {
if (listener.name == eventName) {
listener.callback(eventObj);
}
});
};
return DebugElement;
}(DebugNode);
exports.DebugElement = DebugElement;
function asNativeElements(debugEls) {
return debugEls.map(function(el) {
return el.nativeElement;
});
}
exports.asNativeElements = asNativeElements;
function _queryElementChildren(element, predicate, matches) {
element.childNodes.forEach(function(node) {
if (node instanceof DebugElement) {
if (predicate(node)) {
matches.push(node);
}
_queryElementChildren(node, predicate, matches);
}
});
}
function _queryNodeChildren(parentNode, predicate, matches) {
if (parentNode instanceof DebugElement) {
parentNode.childNodes.forEach(function(node) {
if (predicate(node)) {
matches.push(node);
}
if (node instanceof DebugElement) {
_queryNodeChildren(node, predicate, matches);
}
});
}
}
var _nativeNodeToDebugNode = new Map();
function getDebugNode(nativeNode) {
return _nativeNodeToDebugNode.get(nativeNode);
}
exports.getDebugNode = getDebugNode;
function getAllDebugNodes() {
return collection_1.MapWrapper.values(_nativeNodeToDebugNode);
}
exports.getAllDebugNodes = getAllDebugNodes;
function indexDebugNode(node) {
_nativeNodeToDebugNode.set(node.nativeNode, node);
}
exports.indexDebugNode = indexDebugNode;
function removeDebugNodeFromIndex(node) {
_nativeNodeToDebugNode.delete(node.nativeNode);
}
exports.removeDebugNodeFromIndex = removeDebugNodeFromIndex;
}, function(module, exports, __webpack_require__) {
"use strict";
var di_1 = __webpack_require__(109);
var lang_1 = __webpack_require__(105);
exports.PLATFORM_DIRECTIVES = lang_1.CONST_EXPR(new di_1.OpaqueToken("Platform Directives"));
exports.PLATFORM_PIPES = lang_1.CONST_EXPR(new di_1.OpaqueToken("Platform Pipes"));
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var di_1 = __webpack_require__(109);
var console_1 = __webpack_require__(204);
var reflection_1 = __webpack_require__(120);
var testability_1 = __webpack_require__(187);
function _reflector() {
return reflection_1.reflector;
}
exports.PLATFORM_COMMON_PROVIDERS = lang_1.CONST_EXPR([ new di_1.Provider(reflection_1.Reflector, {
useFactory: _reflector,
deps: []
}), testability_1.TestabilityRegistry, console_1.Console ]);
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var di_1 = __webpack_require__(109);
var application_tokens_1 = __webpack_require__(186);
var change_detection_1 = __webpack_require__(128);
var resolved_metadata_cache_1 = __webpack_require__(214);
var view_manager_1 = __webpack_require__(203);
var view_manager_2 = __webpack_require__(203);
var view_resolver_1 = __webpack_require__(209);
var directive_resolver_1 = __webpack_require__(208);
var pipe_resolver_1 = __webpack_require__(215);
var compiler_1 = __webpack_require__(189);
var compiler_2 = __webpack_require__(189);
var dynamic_component_loader_1 = __webpack_require__(188);
var dynamic_component_loader_2 = __webpack_require__(188);
exports.APPLICATION_COMMON_PROVIDERS = lang_1.CONST_EXPR([ new di_1.Provider(compiler_1.Compiler, {
useClass: compiler_2.Compiler_
}), application_tokens_1.APP_ID_RANDOM_PROVIDER, resolved_metadata_cache_1.ResolvedMetadataCache, new di_1.Provider(view_manager_1.AppViewManager, {
useClass: view_manager_2.AppViewManager_
}), view_resolver_1.ViewResolver, new di_1.Provider(change_detection_1.IterableDiffers, {
useValue: change_detection_1.defaultIterableDiffers
}), new di_1.Provider(change_detection_1.KeyValueDiffers, {
useValue: change_detection_1.defaultKeyValueDiffers
}), directive_resolver_1.DirectiveResolver, pipe_resolver_1.PipeResolver, new di_1.Provider(dynamic_component_loader_1.DynamicComponentLoader, {
useClass: dynamic_component_loader_2.DynamicComponentLoader_
}) ]);
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = __webpack_require__(109);
var lang_1 = __webpack_require__(105);
var element_1 = __webpack_require__(191);
var directive_resolver_1 = __webpack_require__(208);
var pipe_provider_1 = __webpack_require__(198);
var pipe_resolver_1 = __webpack_require__(215);
var ResolvedMetadataCache = function() {
function ResolvedMetadataCache(_directiveResolver, _pipeResolver) {
this._directiveResolver = _directiveResolver;
this._pipeResolver = _pipeResolver;
this._directiveCache = new Map();
this._pipeCache = new Map();
}
ResolvedMetadataCache.prototype.getResolvedDirectiveMetadata = function(type) {
var result = this._directiveCache.get(type);
if (lang_1.isBlank(result)) {
result = element_1.DirectiveProvider.createFromType(type, this._directiveResolver.resolve(type));
this._directiveCache.set(type, result);
}
return result;
};
ResolvedMetadataCache.prototype.getResolvedPipeMetadata = function(type) {
var result = this._pipeCache.get(type);
if (lang_1.isBlank(result)) {
result = pipe_provider_1.PipeProvider.createFromType(type, this._pipeResolver.resolve(type));
this._pipeCache.set(type, result);
}
return result;
};
ResolvedMetadataCache = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", [ directive_resolver_1.DirectiveResolver, pipe_resolver_1.PipeResolver ]) ], ResolvedMetadataCache);
return ResolvedMetadataCache;
}();
exports.ResolvedMetadataCache = ResolvedMetadataCache;
exports.CODEGEN_RESOLVED_METADATA_CACHE = new ResolvedMetadataCache(directive_resolver_1.CODEGEN_DIRECTIVE_RESOLVER, pipe_resolver_1.CODEGEN_PIPE_RESOLVER);
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = __webpack_require__(109);
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var metadata_1 = __webpack_require__(107);
var reflection_1 = __webpack_require__(120);
function _isPipeMetadata(type) {
return type instanceof metadata_1.PipeMetadata;
}
var PipeResolver = function() {
function PipeResolver() {}
PipeResolver.prototype.resolve = function(type) {
var metas = reflection_1.reflector.annotations(di_1.resolveForwardRef(type));
if (lang_1.isPresent(metas)) {
var annotation = metas.find(_isPipeMetadata);
if (lang_1.isPresent(annotation)) {
return annotation;
}
}
throw new exceptions_1.BaseException("No Pipe decorator found on " + lang_1.stringify(type));
};
PipeResolver = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", []) ], PipeResolver);
return PipeResolver;
}();
exports.PipeResolver = PipeResolver;
exports.CODEGEN_PIPE_RESOLVER = new PipeResolver();
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
exports.DOM = null;
function setRootDomAdapter(adapter) {
if (lang_1.isBlank(exports.DOM)) {
exports.DOM = adapter;
}
}
exports.setRootDomAdapter = setRootDomAdapter;
var DomAdapter = function() {
function DomAdapter() {}
Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
get: function() {
return this._attrToPropMap;
},
set: function(value) {
this._attrToPropMap = value;
},
enumerable: true,
configurable: true
});
return DomAdapter;
}();
exports.DomAdapter = DomAdapter;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var di_1 = __webpack_require__(109);
var api_1 = __webpack_require__(195);
var platform_providers_1 = __webpack_require__(218);
var lang_1 = __webpack_require__(105);
var dom_renderer_1 = __webpack_require__(219);
var view_1 = __webpack_require__(11);
var frame_1 = __webpack_require__(9);
var util = __webpack_require__(230);
var view_util_1 = __webpack_require__(230);
exports.rendererTraceCategory = view_util_1.rendererTraceCategory;
var NativeScriptRootRenderer = function() {
function NativeScriptRootRenderer(rootView) {
this._rootView = null;
this._registeredComponents = new Map();
this._rootView = rootView;
}
Object.defineProperty(NativeScriptRootRenderer.prototype, "rootView", {
get: function() {
if (!this._rootView) {
this._rootView = frame_1.topmost().currentPage;
}
return this._rootView;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NativeScriptRootRenderer.prototype, "page", {
get: function() {
return this.rootView.page;
},
enumerable: true,
configurable: true
});
NativeScriptRootRenderer.prototype.renderComponent = function(componentProto) {
var renderer = this._registeredComponents.get(componentProto.id);
if (lang_1.isBlank(renderer)) {
renderer = new NativeScriptRenderer(this, componentProto);
this._registeredComponents.set(componentProto.id, renderer);
}
return renderer;
};
NativeScriptRootRenderer = __decorate([ di_1.Injectable(), __param(0, di_1.Optional()), __param(0, di_1.Inject(platform_providers_1.APP_ROOT_VIEW)), __metadata("design:paramtypes", [ view_1.View ]) ], NativeScriptRootRenderer);
return NativeScriptRootRenderer;
}();
exports.NativeScriptRootRenderer = NativeScriptRootRenderer;
var NativeScriptRenderer = function(_super) {
__extends(NativeScriptRenderer, _super);
function NativeScriptRenderer(_rootRenderer, componentProto) {
_super.call(this);
this._rootRenderer = _rootRenderer;
this.componentProto = componentProto;
this.rootRenderer = _rootRenderer;
var page = this.rootRenderer.page;
var stylesLength = componentProto.styles.length;
this.componentProtoId = componentProto.id;
for (var i = 0; i < stylesLength; i++) {
this.hasComponentStyles = true;
var cssString = componentProto.styles[i] + "";
page.addCss(cssString.replace(dom_renderer_1.COMPONENT_VARIABLE, componentProto.id));
}
util.traceLog("NativeScriptRenderer created");
}
NativeScriptRenderer.prototype.renderComponent = function(componentProto) {
return this._rootRenderer.renderComponent(componentProto);
};
NativeScriptRenderer.prototype.selectRootElement = function(selector) {
util.traceLog("selectRootElement: " + selector);
var rootView = this.rootRenderer.rootView;
rootView.nodeName = "ROOT";
return rootView;
};
NativeScriptRenderer.prototype.createViewRoot = function(hostElement) {
util.traceLog("CREATE VIEW ROOT: " + hostElement.nodeName);
return hostElement;
};
NativeScriptRenderer.prototype.projectNodes = function(parentElement, nodes) {
util.traceLog("NativeScriptRenderer.projectNodes");
nodes.forEach(function(node) {
util.insertChild(parentElement, node);
});
};
NativeScriptRenderer.prototype.attachViewAfter = function(anchorNode, viewRootNodes) {
var _this = this;
util.traceLog("NativeScriptRenderer.attachViewAfter: " + anchorNode.nodeName + " " + anchorNode);
var parent = anchorNode.parent || anchorNode.templateParent;
var insertPosition = util.getChildIndex(parent, anchorNode);
viewRootNodes.forEach(function(node, index) {
var childIndex = insertPosition + index + 1;
util.insertChild(parent, node, childIndex);
_this.animateNodeEnter(node);
});
};
NativeScriptRenderer.prototype.detachView = function(viewRootNodes) {
util.traceLog("NativeScriptRenderer.detachView");
for (var i = 0; i < viewRootNodes.length; i++) {
var node = viewRootNodes[i];
util.removeChild(node.parent, node);
this.animateNodeLeave(node);
}
};
NativeScriptRenderer.prototype.animateNodeEnter = function(node) {};
NativeScriptRenderer.prototype.animateNodeLeave = function(node) {};
NativeScriptRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
util.traceLog("NativeScriptRenderer.destroyView");
};
NativeScriptRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
util.traceLog("NativeScriptRenderer.setElementProperty " + renderElement + ": " + propertyName + " = " + propertyValue);
util.setProperty(renderElement, propertyName, propertyValue);
};
NativeScriptRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
util.traceLog("NativeScriptRenderer.setElementAttribute " + renderElement + ": " + attributeName + " = " + attributeValue);
return this.setElementProperty(renderElement, attributeName, attributeValue);
};
NativeScriptRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
util.traceLog("NativeScriptRenderer.setElementClass " + className + " - " + isAdd);
if (isAdd) {
util.addClass(renderElement, className);
} else {
util.removeClass(renderElement, className);
}
};
NativeScriptRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
util.setStyleProperty(renderElement, styleName, styleValue);
};
NativeScriptRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
util.traceLog("NativeScriptRenderer.setBindingDebugInfo: " + renderElement + ", " + propertyName + " = " + propertyValue);
};
NativeScriptRenderer.prototype.setElementDebugInfo = function(renderElement, info) {
util.traceLog("NativeScriptRenderer.setElementDebugInfo: " + renderElement);
};
NativeScriptRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
util.traceLog("NativeScriptRenderer.invokeElementMethod " + methodName + " " + args);
};
NativeScriptRenderer.prototype.setText = function(renderNode, text) {
util.traceLog("NativeScriptRenderer.setText");
};
NativeScriptRenderer.prototype.createTemplateAnchor = function(parentElement) {
util.traceLog("NativeScriptRenderer.createTemplateAnchor");
return util.createTemplateAnchor(parentElement);
};
NativeScriptRenderer.prototype.createElement = function(parentElement, name) {
util.traceLog("NativeScriptRenderer.createElement: " + name + " parent: " + parentElement + ", " + (parentElement ? parentElement.nodeName : "null"));
var result = util.createView(name, parentElement);
if (this.hasComponentStyles) {
result[dom_renderer_1.CONTENT_ATTR.replace(dom_renderer_1.COMPONENT_VARIABLE, this.componentProtoId)] = true;
}
return result;
};
NativeScriptRenderer.prototype.createText = function(value) {
util.traceLog("NativeScriptRenderer.createText");
return util.createText(value);
};
NativeScriptRenderer.prototype.listen = function(renderElement, eventName, callback) {
util.traceLog("NativeScriptRenderer.listen: " + eventName);
var zonedCallback = global.zone.bind(callback);
renderElement.on(eventName, zonedCallback);
return function() {
return renderElement.off(eventName, zonedCallback);
};
};
NativeScriptRenderer.prototype.listenGlobal = function(target, eventName, callback) {
throw new Error("Not implemented.");
};
NativeScriptRenderer = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", [ NativeScriptRootRenderer, api_1.RenderComponentType ]) ], NativeScriptRenderer);
return NativeScriptRenderer;
}(api_1.Renderer);
exports.NativeScriptRenderer = NativeScriptRenderer;
}, function(module, exports, __webpack_require__) {
"use strict";
var frame_1 = __webpack_require__(9);
var page_1 = __webpack_require__(66);
var di_1 = __webpack_require__(109);
exports.APP_ROOT_VIEW = new di_1.OpaqueToken("App Root View");
exports.defaultPageProvider = di_1.provide(page_1.Page, {
useFactory: getDefaultPage
});
function getDefaultPage() {
var frame = frame_1.topmost();
if (frame) {
return frame.currentPage;
} else {
return null;
}
}
exports.getDefaultPage = getDefaultPage;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var di_1 = __webpack_require__(109);
var animation_builder_1 = __webpack_require__(220);
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var shared_styles_host_1 = __webpack_require__(227);
var event_manager_1 = __webpack_require__(229);
var dom_tokens_1 = __webpack_require__(228);
var metadata_1 = __webpack_require__(107);
var dom_adapter_1 = __webpack_require__(216);
var util_1 = __webpack_require__(225);
var NAMESPACE_URIS = lang_1.CONST_EXPR({
xlink: "http://www.w3.org/1999/xlink",
svg: "http://www.w3.org/2000/svg"
});
var TEMPLATE_COMMENT_TEXT = "template bindings={}";
var TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/g;
var DomRootRenderer = function() {
function DomRootRenderer(document, eventManager, sharedStylesHost, animate) {
this.document = document;
this.eventManager = eventManager;
this.sharedStylesHost = sharedStylesHost;
this.animate = animate;
this._registeredComponents = new Map();
}
DomRootRenderer.prototype.renderComponent = function(componentProto) {
var renderer = this._registeredComponents.get(componentProto.id);
if (lang_1.isBlank(renderer)) {
renderer = new DomRenderer(this, componentProto);
this._registeredComponents.set(componentProto.id, renderer);
}
return renderer;
};
return DomRootRenderer;
}();
exports.DomRootRenderer = DomRootRenderer;
var DomRootRenderer_ = function(_super) {
__extends(DomRootRenderer_, _super);
function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animate) {
_super.call(this, _document, _eventManager, sharedStylesHost, animate);
}
DomRootRenderer_ = __decorate([ di_1.Injectable(), __param(0, di_1.Inject(dom_tokens_1.DOCUMENT)), __metadata("design:paramtypes", [ Object, event_manager_1.EventManager, shared_styles_host_1.DomSharedStylesHost, animation_builder_1.AnimationBuilder ]) ], DomRootRenderer_);
return DomRootRenderer_;
}(DomRootRenderer);
exports.DomRootRenderer_ = DomRootRenderer_;
var DomRenderer = function() {
function DomRenderer(_rootRenderer, componentProto) {
this._rootRenderer = _rootRenderer;
this.componentProto = componentProto;
this._styles = _flattenStyles(componentProto.id, componentProto.styles, []);
if (componentProto.encapsulation !== metadata_1.ViewEncapsulation.Native) {
this._rootRenderer.sharedStylesHost.addStyles(this._styles);
}
if (this.componentProto.encapsulation === metadata_1.ViewEncapsulation.Emulated) {
this._contentAttr = _shimContentAttribute(componentProto.id);
this._hostAttr = _shimHostAttribute(componentProto.id);
} else {
this._contentAttr = null;
this._hostAttr = null;
}
}
DomRenderer.prototype.renderComponent = function(componentProto) {
return this._rootRenderer.renderComponent(componentProto);
};
DomRenderer.prototype.selectRootElement = function(selector) {
var el = dom_adapter_1.DOM.querySelector(this._rootRenderer.document, selector);
if (lang_1.isBlank(el)) {
throw new exceptions_1.BaseException('The selector "' + selector + '" did not match any elements');
}
dom_adapter_1.DOM.clearNodes(el);
return el;
};
DomRenderer.prototype.createElement = function(parent, name) {
var nsAndName = splitNamespace(name);
var el = lang_1.isPresent(nsAndName[0]) ? dom_adapter_1.DOM.createElementNS(NAMESPACE_URIS[nsAndName[0]], nsAndName[1]) : dom_adapter_1.DOM.createElement(nsAndName[1]);
if (lang_1.isPresent(this._contentAttr)) {
dom_adapter_1.DOM.setAttribute(el, this._contentAttr, "");
}
if (lang_1.isPresent(parent)) {
dom_adapter_1.DOM.appendChild(parent, el);
}
return el;
};
DomRenderer.prototype.createViewRoot = function(hostElement) {
var nodesParent;
if (this.componentProto.encapsulation === metadata_1.ViewEncapsulation.Native) {
nodesParent = dom_adapter_1.DOM.createShadowRoot(hostElement);
this._rootRenderer.sharedStylesHost.addHost(nodesParent);
for (var i = 0; i < this._styles.length; i++) {
dom_adapter_1.DOM.appendChild(nodesParent, dom_adapter_1.DOM.createStyleElement(this._styles[i]));
}
} else {
if (lang_1.isPresent(this._hostAttr)) {
dom_adapter_1.DOM.setAttribute(hostElement, this._hostAttr, "");
}
nodesParent = hostElement;
}
return nodesParent;
};
DomRenderer.prototype.createTemplateAnchor = function(parentElement) {
var comment = dom_adapter_1.DOM.createComment(TEMPLATE_COMMENT_TEXT);
if (lang_1.isPresent(parentElement)) {
dom_adapter_1.DOM.appendChild(parentElement, comment);
}
return comment;
};
DomRenderer.prototype.createText = function(parentElement, value) {
var node = dom_adapter_1.DOM.createTextNode(value);
if (lang_1.isPresent(parentElement)) {
dom_adapter_1.DOM.appendChild(parentElement, node);
}
return node;
};
DomRenderer.prototype.projectNodes = function(parentElement, nodes) {
if (lang_1.isBlank(parentElement)) return;
appendNodes(parentElement, nodes);
};
DomRenderer.prototype.attachViewAfter = function(node, viewRootNodes) {
moveNodesAfterSibling(node, viewRootNodes);
for (var i = 0; i < viewRootNodes.length; i++) this.animateNodeEnter(viewRootNodes[i]);
};
DomRenderer.prototype.detachView = function(viewRootNodes) {
for (var i = 0; i < viewRootNodes.length; i++) {
var node = viewRootNodes[i];
dom_adapter_1.DOM.remove(node);
this.animateNodeLeave(node);
}
};
DomRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
if (this.componentProto.encapsulation === metadata_1.ViewEncapsulation.Native && lang_1.isPresent(hostElement)) {
this._rootRenderer.sharedStylesHost.removeHost(dom_adapter_1.DOM.getShadowRoot(hostElement));
}
};
DomRenderer.prototype.listen = function(renderElement, name, callback) {
return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
};
DomRenderer.prototype.listenGlobal = function(target, name, callback) {
return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
};
DomRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
dom_adapter_1.DOM.setProperty(renderElement, propertyName, propertyValue);
};
DomRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
var attrNs;
var nsAndName = splitNamespace(attributeName);
if (lang_1.isPresent(nsAndName[0])) {
attributeName = nsAndName[0] + ":" + nsAndName[1];
attrNs = NAMESPACE_URIS[nsAndName[0]];
}
if (lang_1.isPresent(attributeValue)) {
if (lang_1.isPresent(attrNs)) {
dom_adapter_1.DOM.setAttributeNS(renderElement, attrNs, attributeName, attributeValue);
} else {
dom_adapter_1.DOM.setAttribute(renderElement, attributeName, attributeValue);
}
} else {
if (lang_1.isPresent(attrNs)) {
dom_adapter_1.DOM.removeAttributeNS(renderElement, attrNs, nsAndName[1]);
} else {
dom_adapter_1.DOM.removeAttribute(renderElement, attributeName);
}
}
};
DomRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
var dashCasedPropertyName = util_1.camelCaseToDashCase(propertyName);
if (dom_adapter_1.DOM.isCommentNode(renderElement)) {
var existingBindings = lang_1.RegExpWrapper.firstMatch(TEMPLATE_BINDINGS_EXP, lang_1.StringWrapper.replaceAll(dom_adapter_1.DOM.getText(renderElement), /\n/g, ""));
var parsedBindings = lang_1.Json.parse(existingBindings[1]);
parsedBindings[dashCasedPropertyName] = propertyValue;
dom_adapter_1.DOM.setText(renderElement, lang_1.StringWrapper.replace(TEMPLATE_COMMENT_TEXT, "{}", lang_1.Json.stringify(parsedBindings)));
} else {
this.setElementAttribute(renderElement, propertyName, propertyValue);
}
};
DomRenderer.prototype.setElementDebugInfo = function(renderElement, info) {};
DomRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
if (isAdd) {
dom_adapter_1.DOM.addClass(renderElement, className);
} else {
dom_adapter_1.DOM.removeClass(renderElement, className);
}
};
DomRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
if (lang_1.isPresent(styleValue)) {
dom_adapter_1.DOM.setStyle(renderElement, styleName, lang_1.stringify(styleValue));
} else {
dom_adapter_1.DOM.removeStyle(renderElement, styleName);
}
};
DomRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
dom_adapter_1.DOM.invoke(renderElement, methodName, args);
};
DomRenderer.prototype.setText = function(renderNode, text) {
dom_adapter_1.DOM.setText(renderNode, text);
};
DomRenderer.prototype.animateNodeEnter = function(node) {
if (dom_adapter_1.DOM.isElementNode(node) && dom_adapter_1.DOM.hasClass(node, "ng-animate")) {
dom_adapter_1.DOM.addClass(node, "ng-enter");
this._rootRenderer.animate.css().addAnimationClass("ng-enter-active").start(node).onComplete(function() {
dom_adapter_1.DOM.removeClass(node, "ng-enter");
});
}
};
DomRenderer.prototype.animateNodeLeave = function(node) {
if (dom_adapter_1.DOM.isElementNode(node) && dom_adapter_1.DOM.hasClass(node, "ng-animate")) {
dom_adapter_1.DOM.addClass(node, "ng-leave");
this._rootRenderer.animate.css().addAnimationClass("ng-leave-active").start(node).onComplete(function() {
dom_adapter_1.DOM.removeClass(node, "ng-leave");
dom_adapter_1.DOM.remove(node);
});
} else {
dom_adapter_1.DOM.remove(node);
}
};
return DomRenderer;
}();
exports.DomRenderer = DomRenderer;
function moveNodesAfterSibling(sibling, nodes) {
var parent = dom_adapter_1.DOM.parentElement(sibling);
if (nodes.length > 0 && lang_1.isPresent(parent)) {
var nextSibling = dom_adapter_1.DOM.nextSibling(sibling);
if (lang_1.isPresent(nextSibling)) {
for (var i = 0; i < nodes.length; i++) {
dom_adapter_1.DOM.insertBefore(nextSibling, nodes[i]);
}
} else {
for (var i = 0; i < nodes.length; i++) {
dom_adapter_1.DOM.appendChild(parent, nodes[i]);
}
}
}
}
function appendNodes(parent, nodes) {
for (var i = 0; i < nodes.length; i++) {
dom_adapter_1.DOM.appendChild(parent, nodes[i]);
}
}
function decoratePreventDefault(eventHandler) {
return function(event) {
var allowDefaultBehavior = eventHandler(event);
if (allowDefaultBehavior === false) {
dom_adapter_1.DOM.preventDefault(event);
}
};
}
var COMPONENT_REGEX = /%COMP%/g;
exports.COMPONENT_VARIABLE = "%COMP%";
exports.HOST_ATTR = "_nghost-" + exports.COMPONENT_VARIABLE;
exports.CONTENT_ATTR = "_ngcontent-" + exports.COMPONENT_VARIABLE;
function _shimContentAttribute(componentShortId) {
return lang_1.StringWrapper.replaceAll(exports.CONTENT_ATTR, COMPONENT_REGEX, componentShortId);
}
function _shimHostAttribute(componentShortId) {
return lang_1.StringWrapper.replaceAll(exports.HOST_ATTR, COMPONENT_REGEX, componentShortId);
}
function _flattenStyles(compId, styles, target) {
for (var i = 0; i < styles.length; i++) {
var style = styles[i];
if (lang_1.isArray(style)) {
_flattenStyles(compId, style, target);
} else {
style = lang_1.StringWrapper.replaceAll(style, COMPONENT_REGEX, compId);
target.push(style);
}
}
return target;
}
var NS_PREFIX_RE = /^@([^:]+):(.+)/g;
function splitNamespace(name) {
if (name[0] != "@") {
return [ null, name ];
}
var match = lang_1.RegExpWrapper.firstMatch(NS_PREFIX_RE, name);
return [ match[1], match[2] ];
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = __webpack_require__(109);
var css_animation_builder_1 = __webpack_require__(221);
var browser_details_1 = __webpack_require__(226);
var AnimationBuilder = function() {
function AnimationBuilder(browserDetails) {
this.browserDetails = browserDetails;
}
AnimationBuilder.prototype.css = function() {
return new css_animation_builder_1.CssAnimationBuilder(this.browserDetails);
};
AnimationBuilder = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", [ browser_details_1.BrowserDetails ]) ], AnimationBuilder);
return AnimationBuilder;
}();
exports.AnimationBuilder = AnimationBuilder;
}, function(module, exports, __webpack_require__) {
"use strict";
var css_animation_options_1 = __webpack_require__(222);
var animation_1 = __webpack_require__(223);
var CssAnimationBuilder = function() {
function CssAnimationBuilder(browserDetails) {
this.browserDetails = browserDetails;
this.data = new css_animation_options_1.CssAnimationOptions();
}
CssAnimationBuilder.prototype.addAnimationClass = function(className) {
this.data.animationClasses.push(className);
return this;
};
CssAnimationBuilder.prototype.addClass = function(className) {
this.data.classesToAdd.push(className);
return this;
};
CssAnimationBuilder.prototype.removeClass = function(className) {
this.data.classesToRemove.push(className);
return this;
};
CssAnimationBuilder.prototype.setDuration = function(duration) {
this.data.duration = duration;
return this;
};
CssAnimationBuilder.prototype.setDelay = function(delay) {
this.data.delay = delay;
return this;
};
CssAnimationBuilder.prototype.setStyles = function(from, to) {
return this.setFromStyles(from).setToStyles(to);
};
CssAnimationBuilder.prototype.setFromStyles = function(from) {
this.data.fromStyles = from;
return this;
};
CssAnimationBuilder.prototype.setToStyles = function(to) {
this.data.toStyles = to;
return this;
};
CssAnimationBuilder.prototype.start = function(element) {
return new animation_1.Animation(element, this.data, this.browserDetails);
};
return CssAnimationBuilder;
}();
exports.CssAnimationBuilder = CssAnimationBuilder;
}, function(module, exports) {
"use strict";
var CssAnimationOptions = function() {
function CssAnimationOptions() {
this.classesToAdd = [];
this.classesToRemove = [];
this.animationClasses = [];
}
return CssAnimationOptions;
}();
exports.CssAnimationOptions = CssAnimationOptions;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var math_1 = __webpack_require__(224);
var util_1 = __webpack_require__(225);
var collection_1 = __webpack_require__(115);
var dom_adapter_1 = __webpack_require__(216);
var Animation = function() {
function Animation(element, data, browserDetails) {
var _this = this;
this.element = element;
this.data = data;
this.browserDetails = browserDetails;
this.callbacks = [];
this.eventClearFunctions = [];
this.completed = false;
this._stringPrefix = "";
this.startTime = lang_1.DateWrapper.toMillis(lang_1.DateWrapper.now());
this._stringPrefix = dom_adapter_1.DOM.getAnimationPrefix();
this.setup();
this.wait(function(timestamp) {
return _this.start();
});
}
Object.defineProperty(Animation.prototype, "totalTime", {
get: function() {
var delay = this.computedDelay != null ? this.computedDelay : 0;
var duration = this.computedDuration != null ? this.computedDuration : 0;
return delay + duration;
},
enumerable: true,
configurable: true
});
Animation.prototype.wait = function(callback) {
this.browserDetails.raf(callback, 2);
};
Animation.prototype.setup = function() {
if (this.data.fromStyles != null) this.applyStyles(this.data.fromStyles);
if (this.data.duration != null) this.applyStyles({
transitionDuration: this.data.duration.toString() + "ms"
});
if (this.data.delay != null) this.applyStyles({
transitionDelay: this.data.delay.toString() + "ms"
});
};
Animation.prototype.start = function() {
this.addClasses(this.data.classesToAdd);
this.addClasses(this.data.animationClasses);
this.removeClasses(this.data.classesToRemove);
if (this.data.toStyles != null) this.applyStyles(this.data.toStyles);
var computedStyles = dom_adapter_1.DOM.getComputedStyle(this.element);
this.computedDelay = math_1.Math.max(this.parseDurationString(computedStyles.getPropertyValue(this._stringPrefix + "transition-delay")), this.parseDurationString(this.element.style.getPropertyValue(this._stringPrefix + "transition-delay")));
this.computedDuration = math_1.Math.max(this.parseDurationString(computedStyles.getPropertyValue(this._stringPrefix + "transition-duration")), this.parseDurationString(this.element.style.getPropertyValue(this._stringPrefix + "transition-duration")));
this.addEvents();
};
Animation.prototype.applyStyles = function(styles) {
var _this = this;
collection_1.StringMapWrapper.forEach(styles, function(value, key) {
var dashCaseKey = util_1.camelCaseToDashCase(key);
if (lang_1.isPresent(dom_adapter_1.DOM.getStyle(_this.element, dashCaseKey))) {
dom_adapter_1.DOM.setStyle(_this.element, dashCaseKey, value.toString());
} else {
dom_adapter_1.DOM.setStyle(_this.element, _this._stringPrefix + dashCaseKey, value.toString());
}
});
};
Animation.prototype.addClasses = function(classes) {
for (var i = 0, len = classes.length; i < len; i++) dom_adapter_1.DOM.addClass(this.element, classes[i]);
};
Animation.prototype.removeClasses = function(classes) {
for (var i = 0, len = classes.length; i < len; i++) dom_adapter_1.DOM.removeClass(this.element, classes[i]);
};
Animation.prototype.addEvents = function() {
var _this = this;
if (this.totalTime > 0) {
this.eventClearFunctions.push(dom_adapter_1.DOM.onAndCancel(this.element, dom_adapter_1.DOM.getTransitionEnd(), function(event) {
return _this.handleAnimationEvent(event);
}));
} else {
this.handleAnimationCompleted();
}
};
Animation.prototype.handleAnimationEvent = function(event) {
var elapsedTime = math_1.Math.round(event.elapsedTime * 1e3);
if (!this.browserDetails.elapsedTimeIncludesDelay) elapsedTime += this.computedDelay;
event.stopPropagation();
if (elapsedTime >= this.totalTime) this.handleAnimationCompleted();
};
Animation.prototype.handleAnimationCompleted = function() {
this.removeClasses(this.data.animationClasses);
this.callbacks.forEach(function(callback) {
return callback();
});
this.callbacks = [];
this.eventClearFunctions.forEach(function(fn) {
return fn();
});
this.eventClearFunctions = [];
this.completed = true;
};
Animation.prototype.onComplete = function(callback) {
if (this.completed) {
callback();
} else {
this.callbacks.push(callback);
}
return this;
};
Animation.prototype.parseDurationString = function(duration) {
var maxValue = 0;
if (duration == null || duration.length < 2) {
return maxValue;
} else if (duration.substring(duration.length - 2) == "ms") {
var value = lang_1.NumberWrapper.parseInt(this.stripLetters(duration), 10);
if (value > maxValue) maxValue = value;
} else if (duration.substring(duration.length - 1) == "s") {
var ms = lang_1.NumberWrapper.parseFloat(this.stripLetters(duration)) * 1e3;
var value = math_1.Math.floor(ms);
if (value > maxValue) maxValue = value;
}
return maxValue;
};
Animation.prototype.stripLetters = function(str) {
return lang_1.StringWrapper.replaceAll(str, lang_1.RegExpWrapper.create("[^0-9]+$", ""), "");
};
return Animation;
}();
exports.Animation = Animation;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
exports.Math = lang_1.global.Math;
exports.NaN = typeof exports.NaN;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var CAMEL_CASE_REGEXP = /([A-Z])/g;
var DASH_CASE_REGEXP = /-([a-z])/g;
function camelCaseToDashCase(input) {
return lang_1.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function(m) {
return "-" + m[1].toLowerCase();
});
}
exports.camelCaseToDashCase = camelCaseToDashCase;
function dashCaseToCamelCase(input) {
return lang_1.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function(m) {
return m[1].toUpperCase();
});
}
exports.dashCaseToCamelCase = dashCaseToCamelCase;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = __webpack_require__(109);
var math_1 = __webpack_require__(224);
var dom_adapter_1 = __webpack_require__(216);
var BrowserDetails = function() {
function BrowserDetails() {
this.elapsedTimeIncludesDelay = false;
this.doesElapsedTimeIncludesDelay();
}
BrowserDetails.prototype.doesElapsedTimeIncludesDelay = function() {
var _this = this;
var div = dom_adapter_1.DOM.createElement("div");
dom_adapter_1.DOM.setAttribute(div, "style", "position: absolute; top: -9999px; left: -9999px; width: 1px;\n      height: 1px; transition: all 1ms linear 1ms;");
this.raf(function(timestamp) {
dom_adapter_1.DOM.on(div, "transitionend", function(event) {
var elapsed = math_1.Math.round(event.elapsedTime * 1e3);
_this.elapsedTimeIncludesDelay = elapsed == 2;
dom_adapter_1.DOM.remove(div);
});
dom_adapter_1.DOM.setStyle(div, "width", "2px");
}, 2);
};
BrowserDetails.prototype.raf = function(callback, frames) {
if (frames === void 0) {
frames = 1;
}
var queue = new RafQueue(callback, frames);
return function() {
return queue.cancel();
};
};
BrowserDetails = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", []) ], BrowserDetails);
return BrowserDetails;
}();
exports.BrowserDetails = BrowserDetails;
var RafQueue = function() {
function RafQueue(callback, frames) {
this.callback = callback;
this.frames = frames;
this._raf();
}
RafQueue.prototype._raf = function() {
var _this = this;
this.currentFrameId = dom_adapter_1.DOM.requestAnimationFrame(function(timestamp) {
return _this._nextFrame(timestamp);
});
};
RafQueue.prototype._nextFrame = function(timestamp) {
this.frames--;
if (this.frames > 0) {
this._raf();
} else {
this.callback(timestamp);
}
};
RafQueue.prototype.cancel = function() {
dom_adapter_1.DOM.cancelAnimationFrame(this.currentFrameId);
this.currentFrameId = null;
};
return RafQueue;
}();
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var dom_adapter_1 = __webpack_require__(216);
var di_1 = __webpack_require__(109);
var collection_1 = __webpack_require__(115);
var dom_tokens_1 = __webpack_require__(228);
var SharedStylesHost = function() {
function SharedStylesHost() {
this._styles = [];
this._stylesSet = new Set();
}
SharedStylesHost.prototype.addStyles = function(styles) {
var _this = this;
var additions = [];
styles.forEach(function(style) {
if (!collection_1.SetWrapper.has(_this._stylesSet, style)) {
_this._stylesSet.add(style);
_this._styles.push(style);
additions.push(style);
}
});
this.onStylesAdded(additions);
};
SharedStylesHost.prototype.onStylesAdded = function(additions) {};
SharedStylesHost.prototype.getAllStyles = function() {
return this._styles;
};
SharedStylesHost = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", []) ], SharedStylesHost);
return SharedStylesHost;
}();
exports.SharedStylesHost = SharedStylesHost;
var DomSharedStylesHost = function(_super) {
__extends(DomSharedStylesHost, _super);
function DomSharedStylesHost(doc) {
_super.call(this);
this._hostNodes = new Set();
this._hostNodes.add(doc.head);
}
DomSharedStylesHost.prototype._addStylesToHost = function(styles, host) {
for (var i = 0; i < styles.length; i++) {
var style = styles[i];
dom_adapter_1.DOM.appendChild(host, dom_adapter_1.DOM.createStyleElement(style));
}
};
DomSharedStylesHost.prototype.addHost = function(hostNode) {
this._addStylesToHost(this._styles, hostNode);
this._hostNodes.add(hostNode);
};
DomSharedStylesHost.prototype.removeHost = function(hostNode) {
collection_1.SetWrapper.delete(this._hostNodes, hostNode);
};
DomSharedStylesHost.prototype.onStylesAdded = function(additions) {
var _this = this;
this._hostNodes.forEach(function(hostNode) {
_this._addStylesToHost(additions, hostNode);
});
};
DomSharedStylesHost = __decorate([ di_1.Injectable(), __param(0, di_1.Inject(dom_tokens_1.DOCUMENT)), __metadata("design:paramtypes", [ Object ]) ], DomSharedStylesHost);
return DomSharedStylesHost;
}(SharedStylesHost);
exports.DomSharedStylesHost = DomSharedStylesHost;
}, function(module, exports, __webpack_require__) {
"use strict";
var di_1 = __webpack_require__(109);
var lang_1 = __webpack_require__(105);
exports.DOCUMENT = lang_1.CONST_EXPR(new di_1.OpaqueToken("DocumentToken"));
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var di_1 = __webpack_require__(109);
var ng_zone_1 = __webpack_require__(185);
var collection_1 = __webpack_require__(115);
exports.EVENT_MANAGER_PLUGINS = lang_1.CONST_EXPR(new di_1.OpaqueToken("EventManagerPlugins"));
var EventManager = function() {
function EventManager(plugins, _zone) {
var _this = this;
this._zone = _zone;
plugins.forEach(function(p) {
return p.manager = _this;
});
this._plugins = collection_1.ListWrapper.reversed(plugins);
}
EventManager.prototype.addEventListener = function(element, eventName, handler) {
var plugin = this._findPluginFor(eventName);
return plugin.addEventListener(element, eventName, handler);
};
EventManager.prototype.addGlobalEventListener = function(target, eventName, handler) {
var plugin = this._findPluginFor(eventName);
return plugin.addGlobalEventListener(target, eventName, handler);
};
EventManager.prototype.getZone = function() {
return this._zone;
};
EventManager.prototype._findPluginFor = function(eventName) {
var plugins = this._plugins;
for (var i = 0; i < plugins.length; i++) {
var plugin = plugins[i];
if (plugin.supports(eventName)) {
return plugin;
}
}
throw new exceptions_1.BaseException("No event manager plugin found for event " + eventName);
};
EventManager = __decorate([ di_1.Injectable(), __param(0, di_1.Inject(exports.EVENT_MANAGER_PLUGINS)), __metadata("design:paramtypes", [ Array, ng_zone_1.NgZone ]) ], EventManager);
return EventManager;
}();
exports.EventManager = EventManager;
var EventManagerPlugin = function() {
function EventManagerPlugin() {}
EventManagerPlugin.prototype.supports = function(eventName) {
return false;
};
EventManagerPlugin.prototype.addEventListener = function(element, eventName, handler) {
throw "not implemented";
};
EventManagerPlugin.prototype.addGlobalEventListener = function(element, eventName, handler) {
throw "not implemented";
};
return EventManagerPlugin;
}();
exports.EventManagerPlugin = EventManagerPlugin;
}, function(module, exports, __webpack_require__) {
"use strict";
var view_1 = __webpack_require__(11);
var placeholder_1 = __webpack_require__(231);
var content_view_1 = __webpack_require__(68);
var layout_base_1 = __webpack_require__(73);
var element_registry_1 = __webpack_require__(233);
var special_properties_1 = __webpack_require__(55);
var trace = __webpack_require__(26);
exports.rendererTraceCategory = "ns-renderer";
function traceLog(msg) {
trace.write(msg, exports.rendererTraceCategory);
}
exports.traceLog = traceLog;
function isView(view) {
return view instanceof view_1.View;
}
exports.isView = isView;
function isLayout(view) {
return view instanceof layout_base_1.LayoutBase;
}
exports.isLayout = isLayout;
function isContentView(view) {
return view instanceof content_view_1.ContentView;
}
exports.isContentView = isContentView;
function insertChild(parent, child, atIndex) {
if (atIndex === void 0) {
atIndex = -1;
}
if (!parent || child.meta.skipAddToDom) {
return;
}
if (parent.meta && parent.meta.insertChild) {
parent.meta.insertChild(parent, child, atIndex);
} else if (isLayout(parent)) {
if (atIndex !== -1) {
parent.insertChild(child, atIndex);
} else {
parent.addChild(child);
}
} else if (isContentView(parent)) {
parent.content = child;
} else if (parent && parent._addChildFromBuilder) {
parent._addChildFromBuilder(child.nodeName, child);
} else {}
}
exports.insertChild = insertChild;
function removeChild(parent, child) {
if (!parent || child.meta.skipAddToDom) {
return;
}
if (parent.meta && parent.meta.removeChild) {
parent.meta.removeChild(parent, child);
} else if (isLayout(parent)) {
parent.removeChild(child);
} else if (isContentView(parent)) {
if (parent.content === child) {
parent.content = null;
}
} else if (isView(parent)) {
parent._removeView(child);
} else {}
}
exports.removeChild = removeChild;
function getChildIndex(parent, child) {
if (isLayout(parent)) {
return parent.getChildIndex(child);
} else if (isContentView(parent)) {
return child === parent.content ? 0 : -1;
} else {}
}
exports.getChildIndex = getChildIndex;
function createAndAttach(name, viewClass, parent) {
var view = new viewClass();
view.nodeName = name;
view.meta = element_registry_1.getViewMeta(name);
if (parent) {
insertChild(parent, view);
}
return view;
}
function createView(name, parent) {
if (element_registry_1.isKnownView(name)) {
var viewClass = element_registry_1.getViewClass(name);
return createAndAttach(name, viewClass, parent);
} else {
return createViewContainer(name, parent);
}
}
exports.createView = createView;
function createText(value) {
var text = new placeholder_1.Placeholder();
text.nodeName = "#text";
text.visibility = "collapse";
text.meta = element_registry_1.getViewMeta("Placeholder");
return text;
}
exports.createText = createText;
function createViewContainer(name, parentElement) {
traceLog("Creating view container in:" + parentElement);
var layout = createView("ProxyViewContainer", parentElement);
layout.nodeName = "ProxyViewContainer";
return layout;
}
exports.createViewContainer = createViewContainer;
function createTemplateAnchor(parentElement) {
var anchor = createAndAttach("template", content_view_1.ContentView, parentElement);
anchor.visibility = "collapse";
anchor.templateParent = parentElement;
return anchor;
}
exports.createTemplateAnchor = createTemplateAnchor;
function isXMLAttribute(name) {
switch (name) {
case "style":
return true;

case "rows":
return true;

case "columns":
return true;

case "fontAttributes":
return true;

default:
return false;
}
}
function setProperty(view, attributeName, value) {
traceLog("Setting attribute: " + attributeName);
var specialSetter = special_properties_1.getSpecialPropertySetter(attributeName);
var propMap = getProperties(view);
if (attributeName === "class") {
setClasses(view, value);
} else if (isXMLAttribute(attributeName)) {
view._applyXmlAttribute(attributeName, value);
} else if (specialSetter) {
specialSetter(view, value);
} else if (propMap.has(attributeName)) {
var propertyName = propMap.get(attributeName);
view[propertyName] = convertValue(value);
} else {
view[attributeName] = convertValue(value);
}
}
exports.setProperty = setProperty;
function convertValue(value) {
if (typeof value !== "string" || value === "") {
return value;
}
var valueAsNumber = +value;
if (!isNaN(valueAsNumber)) {
return valueAsNumber;
} else if (value && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
return value.toLowerCase() === "true" ? true : false;
} else {
return value;
}
}
var propertyMaps = new Map();
function getProperties(instance) {
var type = instance && instance.constructor;
if (!type) {
return new Map();
}
if (!propertyMaps.has(type)) {
var propMap = new Map();
for (var propName in instance) {
propMap.set(propName.toLowerCase(), propName);
}
propertyMaps.set(type, propMap);
}
return propertyMaps.get(type);
}
function cssClasses(view) {
if (!view.cssClasses) {
view.cssClasses = new Map();
}
return view.cssClasses;
}
function addClass(view, className) {
cssClasses(view).set(className, true);
syncClasses(view);
}
exports.addClass = addClass;
function removeClass(view, className) {
cssClasses(view).delete(className);
syncClasses(view);
}
exports.removeClass = removeClass;
var whiteSpaceSplitter = /\s+/;
function setClasses(view, classesValue) {
var classes = classesValue.split(whiteSpaceSplitter);
classes.forEach(function(className) {
return cssClasses(view).set(className, true);
});
syncClasses(view);
}
function syncClasses(view) {
var classValue = Array.from(cssClasses(view).keys()).join(" ");
view.cssClass = classValue;
}
function setStyleProperty(view, styleName, styleValue) {
throw new Error("Not implemented: setStyleProperty");
}
exports.setStyleProperty = setStyleProperty;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(232);
global.moduleMerge(common, exports);
var Placeholder = function(_super) {
__extends(Placeholder, _super);
function Placeholder() {
_super.apply(this, arguments);
}
Placeholder.prototype._createUI = function() {
var args = {
eventName: common.Placeholder.creatingViewEvent,
object: this,
view: undefined,
context: this._context
};
this.notify(args);
this._android = args.view;
};
Object.defineProperty(Placeholder.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Placeholder.prototype, "_nativeView", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
return Placeholder;
}(common.Placeholder);
exports.Placeholder = Placeholder;
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(11);
var Placeholder = function(_super) {
__extends(Placeholder, _super);
function Placeholder() {
_super.apply(this, arguments);
}
Placeholder.creatingViewEvent = "creatingView";
return Placeholder;
}(view.View);
exports.Placeholder = Placeholder;
}, function(module, exports, __webpack_require__) {
"use strict";
var defaultViewMeta = {
skipAddToDom: false
};
var elementMap = new Map();
function registerElement(elementName, resolver, meta) {
if (elementMap.has(elementName)) {
throw new Error("Element for " + elementName + " already registered.");
} else {
var entry = {
resolver: resolver,
meta: meta
};
elementMap.set(elementName, entry);
elementMap.set(elementName.toLowerCase(), entry);
}
}
exports.registerElement = registerElement;
function getViewClass(elementName) {
var entry = elementMap.get(elementName) || elementMap.get(elementName.toLowerCase());
if (!entry) {
throw new TypeError("No known component for element " + elementName + ".");
}
try {
return entry.resolver();
} catch (e) {
throw new TypeError("Could not load view for: " + elementName + "." + e);
}
}
exports.getViewClass = getViewClass;
function getViewMeta(nodeName) {
var meta = defaultViewMeta;
var entry = elementMap.get(nodeName) || elementMap.get(nodeName.toLowerCase());
if (entry && entry.meta) {
meta = entry.meta;
}
return meta;
}
exports.getViewMeta = getViewMeta;
function isKnownView(elementName) {
return elementMap.has(elementName) || elementMap.has(elementName.toLowerCase());
}
exports.isKnownView = isKnownView;
registerElement("AbsoluteLayout", function() {
return __webpack_require__(82).AbsoluteLayout;
});
registerElement("ActivityIndicator", function() {
return __webpack_require__(234).ActivityIndicator;
});
registerElement("Border", function() {
return __webpack_require__(236).Border;
});
registerElement("Button", function() {
return __webpack_require__(46).Button;
});
registerElement("ContentView", function() {
return __webpack_require__(68).ContentView;
});
registerElement("DatePicker", function() {
return __webpack_require__(237).DatePicker;
});
registerElement("DockLayout", function() {
return __webpack_require__(80).DockLayout;
});
registerElement("GridLayout", function() {
return __webpack_require__(71).GridLayout;
});
registerElement("HtmlView", function() {
return __webpack_require__(239).HtmlView;
});
registerElement("Image", function() {
return __webpack_require__(241).Image;
});
registerElement("img", function() {
return __webpack_require__(241).Image;
});
registerElement("Label", function() {
return __webpack_require__(95).Label;
});
registerElement("ListPicker", function() {
return __webpack_require__(243).ListPicker;
});
registerElement("ListView", function() {
return __webpack_require__(245).ListView;
});
registerElement("Page", function() {
return __webpack_require__(66).Page;
});
registerElement("Placeholder", function() {
return __webpack_require__(231).Placeholder;
});
registerElement("Progress", function() {
return __webpack_require__(250).Progress;
});
registerElement("ProxyViewContainer", function() {
return __webpack_require__(249).ProxyViewContainer;
});
registerElement("Repeater", function() {
return __webpack_require__(252).Repeater;
});
registerElement("ScrollView", function() {
return __webpack_require__(253).ScrollView;
});
registerElement("SearchBar", function() {
return __webpack_require__(255).SearchBar;
});
registerElement("SegmentedBar", function() {
return __webpack_require__(257).SegmentedBar;
});
registerElement("Slider", function() {
return __webpack_require__(259).Slider;
});
registerElement("StackLayout", function() {
return __webpack_require__(247).StackLayout;
});
registerElement("Switch", function() {
return __webpack_require__(261).Switch;
});
registerElement("TabView", function() {
return __webpack_require__(263).TabView;
});
registerElement("TextField", function() {
return __webpack_require__(88).TextField;
});
registerElement("TextView", function() {
return __webpack_require__(265).TextView;
});
registerElement("TimePicker", function() {
return __webpack_require__(267).TimePicker;
});
registerElement("WebView", function() {
return __webpack_require__(269).WebView;
});
registerElement("WrapLayout", function() {
return __webpack_require__(271).WrapLayout;
});
registerElement("DetachedContainer", function() {
return __webpack_require__(249).ProxyViewContainer;
}, {
skipAddToDom: true
});
}, function(module, exports, __webpack_require__) {
var aiCommon = __webpack_require__(235);
var enums = __webpack_require__(23);
var style = __webpack_require__(14);
function onBusyPropertyChanged(data) {
var indicator = data.object;
if (!indicator.android) {
return;
}
if (indicator.visibility === enums.Visibility.visible) {
indicator.android.setVisibility(data.newValue ? android.view.View.VISIBLE : android.view.View.INVISIBLE);
}
}
aiCommon.ActivityIndicator.busyProperty.metadata.onSetNativeValue = onBusyPropertyChanged;
global.moduleMerge(aiCommon, exports);
var ActivityIndicator = function(_super) {
__extends(ActivityIndicator, _super);
function ActivityIndicator() {
_super.apply(this, arguments);
}
ActivityIndicator.prototype._createUI = function() {
this._android = new android.widget.ProgressBar(this._context);
this._android.setVisibility(android.view.View.INVISIBLE);
this._android.setIndeterminate(true);
};
Object.defineProperty(ActivityIndicator.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
return ActivityIndicator;
}(aiCommon.ActivityIndicator);
exports.ActivityIndicator = ActivityIndicator;
var ActivityIndicatorStyler = function() {
function ActivityIndicatorStyler() {}
ActivityIndicatorStyler.setColorProperty = function(view, newValue) {
var bar = view._nativeView;
bar.getIndeterminateDrawable().setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
};
ActivityIndicatorStyler.resetColorProperty = function(view, nativeValue) {
var bar = view._nativeView;
bar.getIndeterminateDrawable().clearColorFilter();
};
ActivityIndicatorStyler.setActivityIndicatorVisibilityProperty = function(view, newValue) {
ActivityIndicatorStyler.setIndicatorVisibility(view.busy, newValue, view._nativeView);
};
ActivityIndicatorStyler.resetActivityIndicatorVisibilityProperty = function(view, nativeValue) {
ActivityIndicatorStyler.setIndicatorVisibility(view.busy, enums.Visibility.visible, view._nativeView);
};
ActivityIndicatorStyler.setIndicatorVisibility = function(isBusy, visibility, nativeView) {
if (visibility === enums.Visibility.collapsed || visibility === enums.Visibility.collapse) {
nativeView.setVisibility(android.view.View.GONE);
} else {
nativeView.setVisibility(isBusy ? android.view.View.VISIBLE : android.view.View.INVISIBLE);
}
};
ActivityIndicatorStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(ActivityIndicatorStyler.setColorProperty, ActivityIndicatorStyler.resetColorProperty), "ActivityIndicator");
style.registerHandler(style.visibilityProperty, new style.StylePropertyChangedHandler(ActivityIndicatorStyler.setActivityIndicatorVisibilityProperty, ActivityIndicatorStyler.resetActivityIndicatorVisibilityProperty), "ActivityIndicator");
};
return ActivityIndicatorStyler;
}();
exports.ActivityIndicatorStyler = ActivityIndicatorStyler;
ActivityIndicatorStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(11);
var dependencyObservable = __webpack_require__(32);
var proxy = __webpack_require__(48);
var busyProperty = new dependencyObservable.Property("busy", "ActivityIndicator", new proxy.PropertyMetadata(false, dependencyObservable.PropertyMetadataSettings.AffectsLayout));
var ActivityIndicator = function(_super) {
__extends(ActivityIndicator, _super);
function ActivityIndicator() {
_super.apply(this, arguments);
}
Object.defineProperty(ActivityIndicator.prototype, "busy", {
get: function() {
return this._getValue(ActivityIndicator.busyProperty);
},
set: function(value) {
this._setValue(ActivityIndicator.busyProperty, value);
},
enumerable: true,
configurable: true
});
ActivityIndicator.busyProperty = busyProperty;
return ActivityIndicator;
}(view.View);
exports.ActivityIndicator = ActivityIndicator;
}, function(module, exports, __webpack_require__) {
var contentView = __webpack_require__(68);
var viewModule = __webpack_require__(11);
var utils = __webpack_require__(21);
var Border = function(_super) {
__extends(Border, _super);
function Border() {
_super.apply(this, arguments);
}
Object.defineProperty(Border.prototype, "cornerRadius", {
get: function() {
return this.borderRadius;
},
set: function(value) {
this.borderRadius = value;
},
enumerable: true,
configurable: true
});
Border.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var width = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var height = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = utils.layout.getMeasureSpecMode(heightMeasureSpec);
var density = utils.layout.getDisplayDensity();
var borderSize = 2 * this.borderWidth * density;
var result = viewModule.View.measureChild(this, this.layoutView, utils.layout.makeMeasureSpec(width - borderSize, widthMode), utils.layout.makeMeasureSpec(height - borderSize, heightMode));
var widthAndState = viewModule.View.resolveSizeAndState(result.measuredWidth + borderSize, width, widthMode, 0);
var heightAndState = viewModule.View.resolveSizeAndState(result.measuredHeight + borderSize, height, heightMode, 0);
this.setMeasuredDimension(widthAndState, heightAndState);
};
Border.prototype.onLayout = function(left, top, right, bottom) {
var density = utils.layout.getDisplayDensity();
var borderSize = this.borderWidth * density;
viewModule.View.layoutChild(this, this.layoutView, borderSize, borderSize, right - left - borderSize, bottom - top - borderSize);
};
Border = __decorate([ Deprecated ], Border);
return Border;
}(contentView.ContentView);
exports.Border = Border;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(238);
var types = __webpack_require__(13);
function onYearPropertyChanged(data) {
var picker = data.object;
if (picker.android && picker.android.getYear() !== data.newValue) {
updateNativeDate(picker);
}
}
common.DatePicker.yearProperty.metadata.onSetNativeValue = onYearPropertyChanged;
function onMonthPropertyChanged(data) {
var picker = data.object;
if (picker.android && picker.android.getMonth() !== data.newValue - 1) {
updateNativeDate(picker);
}
}
common.DatePicker.monthProperty.metadata.onSetNativeValue = onMonthPropertyChanged;
function onDayPropertyChanged(data) {
var picker = data.object;
if (picker.android && picker.android.getDayOfMonth !== data.newValue) {
updateNativeDate(picker);
}
}
common.DatePicker.dayProperty.metadata.onSetNativeValue = onDayPropertyChanged;
function updateNativeDate(picker) {
var year = types.isNumber(picker.year) ? picker.year : picker.android.getYear();
var month = types.isNumber(picker.month) ? picker.month - 1 : picker.android.getMonth();
var day = types.isNumber(picker.day) ? picker.day : picker.android.getDayOfMonth();
picker.date = new Date(year, month, day);
}
function onMaxDatePropertyChanged(data) {
var picker = data.object;
var newValue = data.newValue.getTime();
if (picker.android && picker.android.getMaxDate() !== newValue) {
picker.android.setMaxDate(newValue);
}
}
common.DatePicker.maxDateProperty.metadata.onSetNativeValue = onMaxDatePropertyChanged;
function onMinDatePropertyChanged(data) {
var picker = data.object;
var newValue = data.newValue.getTime();
if (picker.android && picker.android.getMinDate() !== newValue) {
picker.android.setMinDate(newValue);
}
}
common.DatePicker.minDateProperty.metadata.onSetNativeValue = onMinDatePropertyChanged;
function onDatePropertyChanged(data) {
var picker = data.object;
var newValue = data.newValue;
if (picker.android && (picker.android.getDayOfMonth() !== newValue.getDay() || picker.android.getMonth() !== newValue.getMonth() || picker.android.getYear() !== newValue.getFullYear())) {
picker.android.updateDate(newValue.getFullYear(), newValue.getMonth(), newValue.getDate());
}
}
common.DatePicker.dateProperty.metadata.onSetNativeValue = onDatePropertyChanged;
global.moduleMerge(common, exports);
var DatePicker = function(_super) {
__extends(DatePicker, _super);
function DatePicker() {
_super.call(this);
var that = new WeakRef(this);
this._listener = new android.widget.DatePicker.OnDateChangedListener({
get owner() {
return that.get();
},
onDateChanged: function(picker, year, month, day) {
if (this.owner) {
var dateIsChanged = false;
if (year !== this.owner.year) {
this.owner._onPropertyChangedFromNative(common.DatePicker.yearProperty, year);
dateIsChanged = true;
}
if (month + 1 !== this.owner.month) {
this.owner._onPropertyChangedFromNative(common.DatePicker.monthProperty, month + 1);
dateIsChanged = true;
}
if (day !== this.owner.day) {
this.owner._onPropertyChangedFromNative(common.DatePicker.dayProperty, day);
dateIsChanged = true;
}
if (dateIsChanged) {
this.owner._onPropertyChangedFromNative(common.DatePicker.dateProperty, new Date(year, month, day));
}
}
}
});
}
Object.defineProperty(DatePicker.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
DatePicker.prototype._createUI = function() {
this._android = new android.widget.DatePicker(this._context);
this._android.setCalendarViewShown(false);
this._android.init(0, 0, 0, this._listener);
};
return DatePicker;
}(common.DatePicker);
exports.DatePicker = DatePicker;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(32);
var proxy = __webpack_require__(48);
var view = __webpack_require__(11);
var DatePicker = function(_super) {
__extends(DatePicker, _super);
function DatePicker() {
_super.call(this);
}
Object.defineProperty(DatePicker.prototype, "year", {
get: function() {
return this._getValue(DatePicker.yearProperty);
},
set: function(value) {
this._setValue(DatePicker.yearProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DatePicker.prototype, "month", {
get: function() {
return this._getValue(DatePicker.monthProperty);
},
set: function(value) {
this._setValue(DatePicker.monthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DatePicker.prototype, "day", {
get: function() {
return this._getValue(DatePicker.dayProperty);
},
set: function(value) {
this._setValue(DatePicker.dayProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DatePicker.prototype, "maxDate", {
get: function() {
return this._getValue(DatePicker.maxDateProperty);
},
set: function(value) {
this._setValue(DatePicker.maxDateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DatePicker.prototype, "minDate", {
get: function() {
return this._getValue(DatePicker.minDateProperty);
},
set: function(value) {
this._setValue(DatePicker.minDateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DatePicker.prototype, "date", {
get: function() {
return this._getValue(DatePicker.dateProperty);
},
set: function(value) {
this._setValue(DatePicker.dateProperty, value);
},
enumerable: true,
configurable: true
});
DatePicker.yearProperty = new dependencyObservable.Property("year", "DatePicker", new proxy.PropertyMetadata(undefined));
DatePicker.monthProperty = new dependencyObservable.Property("month", "DatePicker", new proxy.PropertyMetadata(undefined));
DatePicker.dayProperty = new dependencyObservable.Property("day", "DatePicker", new proxy.PropertyMetadata(undefined));
DatePicker.maxDateProperty = new dependencyObservable.Property("maxDate", "DatePicker", new proxy.PropertyMetadata(undefined));
DatePicker.minDateProperty = new dependencyObservable.Property("minDate", "DatePicker", new proxy.PropertyMetadata(undefined));
DatePicker.dateProperty = new dependencyObservable.Property("date", "DatePicker", new proxy.PropertyMetadata(undefined));
return DatePicker;
}(view.View);
exports.DatePicker = DatePicker;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(240);
function onHtmlPropertyChanged(data) {
var view = data.object;
if (!view.android) {
return;
}
var types = __webpack_require__(13);
if (types.isString(data.newValue)) {
var mask = 15;
if (data.newValue.search(/<a\s/i) >= 0) {
mask = 0;
}
view.android.setAutoLinkMask(mask);
view.android.setText(android.text.Html.fromHtml(data.newValue));
} else {
view.android.setText("");
}
}
common.HtmlView.htmlProperty.metadata.onSetNativeValue = onHtmlPropertyChanged;
global.moduleMerge(common, exports);
var HtmlView = function(_super) {
__extends(HtmlView, _super);
function HtmlView() {
_super.apply(this, arguments);
}
Object.defineProperty(HtmlView.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
HtmlView.prototype._createUI = function() {
this._android = new android.widget.TextView(this._context);
this._android.setLinksClickable(true);
this._android.setMovementMethod(android.text.method.LinkMovementMethod.getInstance());
};
return HtmlView;
}(common.HtmlView);
exports.HtmlView = HtmlView;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(32);
var proxy = __webpack_require__(48);
var view = __webpack_require__(11);
var HtmlView = function(_super) {
__extends(HtmlView, _super);
function HtmlView(options) {
_super.call(this, options);
}
Object.defineProperty(HtmlView.prototype, "html", {
get: function() {
return this._getValue(HtmlView.htmlProperty);
},
set: function(value) {
this._setValue(HtmlView.htmlProperty, value);
},
enumerable: true,
configurable: true
});
HtmlView.htmlProperty = new dependencyObservable.Property("html", "HtmlView", new proxy.PropertyMetadata(false, dependencyObservable.PropertyMetadataSettings.AffectsLayout));
return HtmlView;
}(view.View);
exports.HtmlView = HtmlView;
}, function(module, exports, __webpack_require__) {
var imageCommon = __webpack_require__(242);
var style = __webpack_require__(14);
var background = __webpack_require__(43);
var utils = __webpack_require__(21);
global.moduleMerge(imageCommon, exports);
var enums;
function ensureEnums() {
if (!enums) {
enums = __webpack_require__(23);
}
}
function onStretchPropertyChanged(data) {
var image = data.object;
if (!image.android) {
return;
}
ensureEnums();
switch (data.newValue) {
case enums.Stretch.aspectFit:
image.android.setScaleType(android.widget.ImageView.ScaleType.FIT_CENTER);
break;

case enums.Stretch.aspectFill:
image.android.setScaleType(android.widget.ImageView.ScaleType.CENTER_CROP);
break;

case enums.Stretch.fill:
image.android.setScaleType(android.widget.ImageView.ScaleType.FIT_XY);
break;

case enums.Stretch.none:
default:
image.android.setScaleType(android.widget.ImageView.ScaleType.MATRIX);
break;
}
}
function onImageSourcePropertyChanged(data) {
var image = data.object;
if (!image.android) {
return;
}
image._setNativeImage(data.newValue ? data.newValue.android : null);
}
imageCommon.Image.imageSourceProperty.metadata.onSetNativeValue = onImageSourcePropertyChanged;
imageCommon.Image.stretchProperty.metadata.onSetNativeValue = onStretchPropertyChanged;
var Image = function(_super) {
__extends(Image, _super);
function Image() {
_super.apply(this, arguments);
}
Object.defineProperty(Image.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Image.prototype._createUI = function() {
this._android = new org.nativescript.widgets.ImageView(this._context);
};
Image.prototype._setNativeImage = function(nativeImage) {
this.android.setImageBitmap(nativeImage);
};
return Image;
}(imageCommon.Image);
exports.Image = Image;
var ImageStyler = function() {
function ImageStyler() {}
ImageStyler.setBorderRadiusProperty = function(v, newValue, defaultValue) {
if (!v._nativeView) {
return;
}
var val = Math.round(newValue * utils.layout.getDisplayDensity());
v._nativeView.setCornerRadius(val);
background.ad.onBackgroundOrBorderPropertyChanged(v);
};
ImageStyler.resetBorderRadiusProperty = function(v, nativeValue) {
if (!v._nativeView) {
return;
}
v._nativeView.setCornerRadius(0);
background.ad.onBackgroundOrBorderPropertyChanged(v);
};
ImageStyler.setBorderWidthProperty = function(v, newValue, defaultValue) {
if (!v._nativeView) {
return;
}
var val = Math.round(newValue * utils.layout.getDisplayDensity());
v._nativeView.setBorderWidth(val);
background.ad.onBackgroundOrBorderPropertyChanged(v);
};
ImageStyler.resetBorderWidthProperty = function(v, nativeValue) {
if (!v._nativeView) {
return;
}
v._nativeView.setBorderWidth(0);
background.ad.onBackgroundOrBorderPropertyChanged(v);
};
ImageStyler.registerHandlers = function() {
style.registerHandler(style.borderRadiusProperty, new style.StylePropertyChangedHandler(ImageStyler.setBorderRadiusProperty, ImageStyler.resetBorderRadiusProperty), "Image");
style.registerHandler(style.borderWidthProperty, new style.StylePropertyChangedHandler(ImageStyler.setBorderWidthProperty, ImageStyler.resetBorderWidthProperty), "Image");
};
return ImageStyler;
}();
exports.ImageStyler = ImageStyler;
ImageStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(32);
var view = __webpack_require__(11);
var proxy = __webpack_require__(48);
var imageSource = __webpack_require__(59);
var enums = __webpack_require__(23);
var platform = __webpack_require__(39);
var utils = __webpack_require__(21);
var types = __webpack_require__(13);
var SRC = "src";
var IMAGE_SOURCE = "imageSource";
var IMAGE = "Image";
var ISLOADING = "isLoading";
var STRETCH = "stretch";
var AffectsLayout = platform.device.os === platform.platformNames.android ? dependencyObservable.PropertyMetadataSettings.None : dependencyObservable.PropertyMetadataSettings.AffectsLayout;
function onSrcPropertyChanged(data) {
var image = data.object;
var value = data.newValue;
if (types.isString(value)) {
value = value.trim();
image.imageSource = null;
image["_url"] = value;
image._setValue(Image.isLoadingProperty, true);
if (utils.isDataURI(value)) {
var base64Data = value.split(",")[1];
if (types.isDefined(base64Data)) {
image.imageSource = imageSource.fromBase64(base64Data);
image._setValue(Image.isLoadingProperty, false);
}
} else if (imageSource.isFileOrResourcePath(value)) {
image.imageSource = imageSource.fromFileOrResource(value);
image._setValue(Image.isLoadingProperty, false);
} else {
imageSource.fromUrl(value).then(function(r) {
if (image["_url"] === value) {
image.imageSource = r;
image._setValue(Image.isLoadingProperty, false);
}
});
}
} else if (value instanceof imageSource.ImageSource) {
image.imageSource = value;
} else {
image.imageSource = imageSource.fromNativeSource(value);
}
}
var Image = function(_super) {
__extends(Image, _super);
function Image(options) {
_super.call(this, options);
}
Object.defineProperty(Image.prototype, "imageSource", {
get: function() {
return this._getValue(Image.imageSourceProperty);
},
set: function(value) {
this._setValue(Image.imageSourceProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Image.prototype, "src", {
get: function() {
return this._getValue(Image.srcProperty);
},
set: function(value) {
this._setValue(Image.srcProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Image.prototype, "isLoading", {
get: function() {
return this._getValue(Image.isLoadingProperty);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Image.prototype, "stretch", {
get: function() {
return this._getValue(Image.stretchProperty);
},
set: function(value) {
this._setValue(Image.stretchProperty, value);
},
enumerable: true,
configurable: true
});
Image.prototype._setNativeImage = function(nativeImage) {};
Image.srcProperty = new dependencyObservable.Property(SRC, IMAGE, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None, onSrcPropertyChanged));
Image.imageSourceProperty = new dependencyObservable.Property(IMAGE_SOURCE, IMAGE, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None));
Image.isLoadingProperty = new dependencyObservable.Property(ISLOADING, IMAGE, new proxy.PropertyMetadata(false, dependencyObservable.PropertyMetadataSettings.None));
Image.stretchProperty = new dependencyObservable.Property(STRETCH, IMAGE, new proxy.PropertyMetadata(enums.Stretch.aspectFit, AffectsLayout));
return Image;
}(view.View);
exports.Image = Image;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(244);
var types = __webpack_require__(13);
global.moduleMerge(common, exports);
var ListPicker = function(_super) {
__extends(ListPicker, _super);
function ListPicker() {
_super.call(this);
}
Object.defineProperty(ListPicker.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
ListPicker.prototype._createUI = function() {
this._android = new android.widget.NumberPicker(this._context);
this._android.setDescendantFocusability(android.widget.NumberPicker.FOCUS_BLOCK_DESCENDANTS);
this._android.setMinValue(0);
this._android.setMaxValue(0);
this._android.setValue(0);
var that = new WeakRef(this);
this._formatter = new android.widget.NumberPicker.Formatter({
get owner() {
return that.get();
},
format: function(index) {
if (this.owner) {
return this.owner._getItemAsString(index);
}
return " ";
}
});
this._android.setFormatter(this._formatter);
this._valueChangedListener = new android.widget.NumberPicker.OnValueChangeListener({
get owner() {
return that.get();
},
onValueChange: function(picker, oldVal, newVal) {
if (this.owner) {
this.owner._onPropertyChangedFromNative(common.ListPicker.selectedIndexProperty, newVal);
}
}
});
this._android.setOnValueChangedListener(this._valueChangedListener);
var mInputTextField = java.lang.Class.forName("android.widget.NumberPicker").getDeclaredField("mInputText");
mInputTextField.setAccessible(true);
this._editText = mInputTextField.get(this._android);
this._editText.setFilters([]);
this._editText.setText(" ", android.widget.TextView.BufferType.NORMAL);
};
ListPicker.prototype._onSelectedIndexPropertyChanged = function(data) {
_super.prototype._onSelectedIndexPropertyChanged.call(this, data);
if (this.android && types.isNumber(data.newValue)) {
this.android.setValue(data.newValue);
}
};
ListPicker.prototype._onItemsPropertyChanged = function(data) {
if (this.android) {
if (!data.newValue || !data.newValue.length) {
this.android.setMaxValue(0);
} else {
this.android.setMaxValue(data.newValue.length - 1);
}
this.android.setWrapSelectorWheel(false);
}
this._updateSelectedIndexOnItemsPropertyChanged(data.newValue);
this._fixNumberPickerRendering();
};
ListPicker.prototype._fixNumberPickerRendering = function() {
if (!this.android) {
return;
}
this.android.setFormatter(null);
this.android.setFormatter(this._formatter);
if (this._editText) {
this._editText.setFilters([]);
}
this._editText.invalidate();
this.android.invalidate();
};
return ListPicker;
}(common.ListPicker);
exports.ListPicker = ListPicker;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(32);
var proxy = __webpack_require__(48);
var view = __webpack_require__(11);
var types = __webpack_require__(13);
var trace = __webpack_require__(26);
exports.traceCategory = "ListPicker";
var ListPicker = function(_super) {
__extends(ListPicker, _super);
function ListPicker() {
_super.call(this);
}
Object.defineProperty(ListPicker.prototype, "selectedIndex", {
get: function() {
return this._getValue(ListPicker.selectedIndexProperty);
},
set: function(value) {
this._setValue(ListPicker.selectedIndexProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListPicker.prototype, "items", {
get: function() {
return this._getValue(ListPicker.itemsProperty);
},
set: function(value) {
this._setValue(ListPicker.itemsProperty, value);
},
enumerable: true,
configurable: true
});
ListPicker.prototype._getItemAsString = function(index) {
if (!this.items || !this.items.length) {
return " ";
}
if (types.isDefined(this.items)) {
var item = this.items.getItem ? this.items.getItem(index) : this.items[index];
return types.isString(item) ? item : types.isDefined(item) ? item.toString() : index.toString();
}
return index.toString();
};
ListPicker.prototype._onSelectedIndexPropertyChanged = function(data) {
trace.write("ListPicker._onSelectedIndexPropertyChanged(" + data.oldValue + " => " + data.newValue + ");", exports.traceCategory);
var index = this.selectedIndex;
if (types.isUndefined(index)) {
return;
}
if (types.isDefined(this.items)) {
if (index < 0 || index >= this.items.length) {
this.selectedIndex = undefined;
throw new Error("selectedIndex should be between [0, items.length - 1]");
}
}
};
ListPicker.prototype._onItemsPropertyChanged = function(data) {};
ListPicker.prototype._updateSelectedIndexOnItemsPropertyChanged = function(newItems) {
trace.write("ListPicker._updateSelectedIndexOnItemsPropertyChanged(" + newItems + ");", exports.traceCategory);
var newItemsCount = 0;
if (newItems && newItems.length) {
newItemsCount = newItems.length;
}
if (newItemsCount === 0) {
this.selectedIndex = undefined;
} else if (types.isUndefined(this.selectedIndex) || this.selectedIndex >= newItemsCount) {
this.selectedIndex = 0;
}
};
ListPicker.selectedIndexProperty = new dependencyObservable.Property("selectedIndex", "ListPicker", new proxy.PropertyMetadata(undefined));
ListPicker.itemsProperty = new dependencyObservable.Property("items", "ListPicker", new proxy.PropertyMetadata(undefined));
return ListPicker;
}(view.View);
exports.ListPicker = ListPicker;
function onSelectedIndexPropertyChanged(data) {
var picker = data.object;
picker._onSelectedIndexPropertyChanged(data);
}
function onItemsPropertyChanged(data) {
var picker = data.object;
picker._onItemsPropertyChanged(data);
}
ListPicker.selectedIndexProperty.metadata.onSetNativeValue = onSelectedIndexPropertyChanged;
ListPicker.itemsProperty.metadata.onSetNativeValue = onItemsPropertyChanged;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(246);
var stackLayout = __webpack_require__(247);
var proxy_view_container_1 = __webpack_require__(249);
var layoutBase = __webpack_require__(73);
var color;
function ensureColor() {
if (!color) {
color = __webpack_require__(27);
}
}
var ITEMLOADING = common.ListView.itemLoadingEvent;
var LOADMOREITEMS = common.ListView.loadMoreItemsEvent;
var ITEMTAP = common.ListView.itemTapEvent;
var REALIZED_INDEX = "realizedIndex";
global.moduleMerge(common, exports);
function onSeparatorColorPropertyChanged(data) {
var bar = data.object;
if (!bar.android) {
return;
}
ensureColor();
if (data.newValue instanceof color.Color) {
bar.android.setDivider(new android.graphics.drawable.ColorDrawable(data.newValue.android));
bar.android.setDividerHeight(1);
}
}
common.ListView.separatorColorProperty.metadata.onSetNativeValue = onSeparatorColorPropertyChanged;
var ListView = function(_super) {
__extends(ListView, _super);
function ListView() {
_super.apply(this, arguments);
this._realizedItems = {};
this._androidViewId = -1;
}
ListView.prototype._createUI = function() {
this._android = new android.widget.ListView(this._context);
this._android.setCacheColorHint(android.graphics.Color.TRANSPARENT);
if (this._androidViewId < 0) {
this._androidViewId = android.view.View.generateViewId();
}
this._android.setId(this._androidViewId);
ensureListViewAdapterClass();
this.android.setAdapter(new ListViewAdapterClass(this));
var that = new WeakRef(this);
this.android.setOnScrollListener(new android.widget.AbsListView.OnScrollListener({
onScrollStateChanged: function(view, scrollState) {
var owner = this.owner;
if (!owner) {
return;
}
if (scrollState === android.widget.AbsListView.OnScrollListener.SCROLL_STATE_IDLE) {
owner._setValue(common.ListView.isScrollingProperty, false);
owner._notifyScrollIdle();
} else {
owner._setValue(common.ListView.isScrollingProperty, true);
}
},
onScroll: function(view, firstVisibleItem, visibleItemCount, totalItemCount) {
var owner = this.owner;
if (!owner) {
return;
}
if (totalItemCount > 0 && firstVisibleItem + visibleItemCount === totalItemCount) {
owner.notify({
eventName: LOADMOREITEMS,
object: owner
});
}
},
get owner() {
return that.get();
}
}));
this.android.setOnItemClickListener(new android.widget.AdapterView.OnItemClickListener({
onItemClick: function(parent, convertView, index, id) {
var owner = that.get();
if (owner) {
owner.notify({
eventName: ITEMTAP,
object: owner,
index: index,
view: owner._getRealizedView(convertView, index)
});
}
}
}));
};
Object.defineProperty(ListView.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
ListView.prototype.refresh = function() {
if (!this._android || !this._android.getAdapter()) {
return;
}
this.android.getAdapter().notifyDataSetChanged();
};
ListView.prototype.scrollToIndex = function(index) {
if (this._android) {
this._android.setSelection(index);
}
};
ListView.prototype._onDetached = function(force) {
_super.prototype._onDetached.call(this, force);
var keys = Object.keys(this._realizedItems);
var i;
var length = keys.length;
var view;
var key;
for (i = 0; i < length; i++) {
key = keys[i];
view = this._realizedItems[key];
view.parent._removeView(view);
delete this._realizedItems[key];
}
};
ListView.prototype._getRealizedView = function(convertView, index) {
if (!convertView) {
return this._getItemTemplateContent(index);
}
return this._realizedItems[convertView.hashCode()];
};
ListView.prototype._notifyScrollIdle = function() {
var keys = Object.keys(this._realizedItems);
var i;
var length = keys.length;
var view;
var key;
for (i = 0; i < length; i++) {
key = keys[i];
view = this._realizedItems[key];
if (view[REALIZED_INDEX] < this.items.length) {
this.notify({
eventName: ITEMLOADING,
object: this,
index: view[REALIZED_INDEX],
view: view
});
}
}
};
return ListView;
}(common.ListView);
exports.ListView = ListView;
var ListViewAdapterClass;
function ensureListViewAdapterClass() {
if (ListViewAdapterClass) {
return;
}
var ListViewAdapter = function(_super) {
__extends(ListViewAdapter, _super);
function ListViewAdapter(listView) {
_super.call(this);
this._listView = listView;
return global.__native(this);
}
ListViewAdapter.prototype.getCount = function() {
return this._listView && this._listView.items ? this._listView.items.length : 0;
};
ListViewAdapter.prototype.getItem = function(i) {
if (this._listView && this._listView.items && i < this._listView.items.length) {
return this._listView.items.getItem ? this._listView.items.getItem(i) : this._listView.items[i];
}
return null;
};
ListViewAdapter.prototype.getItemId = function(i) {
return long(i);
};
ListViewAdapter.prototype.hasStableIds = function() {
return true;
};
ListViewAdapter.prototype.getView = function(index, convertView, parent) {
if (!this._listView) {
return null;
}
var view = this._listView._getRealizedView(convertView, index);
var args = {
eventName: ITEMLOADING,
object: this._listView,
index: index,
view: view,
android: parent,
ios: undefined
};
this._listView.notify(args);
if (!args.view) {
args.view = this._listView._getDefaultItemContent(index);
}
if (args.view) {
if (this._listView.rowHeight > -1) {
args.view.height = this._listView.rowHeight;
} else {
args.view.height = Number.NaN;
}
this._listView._prepareItem(args.view, index);
if (!args.view.parent) {
if (args.view instanceof layoutBase.LayoutBase && !(args.view instanceof proxy_view_container_1.ProxyViewContainer)) {
this._listView._addView(args.view);
convertView = args.view.android;
} else {
var sp = new stackLayout.StackLayout();
sp.addChild(args.view);
this._listView._addView(sp);
convertView = sp.android;
}
}
this._listView._realizedItems[convertView.hashCode()] = args.view;
args.view[REALIZED_INDEX] = index;
}
return convertView;
};
return ListViewAdapter;
}(android.widget.BaseAdapter);
ListViewAdapterClass = ListViewAdapter;
}
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(17);
var view = __webpack_require__(11);
var proxy = __webpack_require__(48);
var dependencyObservable = __webpack_require__(32);
var color = __webpack_require__(27);
var builder;
function ensureBuilder() {
if (!builder) {
builder = __webpack_require__(75);
}
}
var label;
function ensureLabel() {
if (!label) {
label = __webpack_require__(95);
}
}
var observableArray;
function ensureObservableArray() {
if (!observableArray) {
observableArray = __webpack_require__(58);
}
}
var weakEvents;
function ensureWeakEvents() {
if (!weakEvents) {
weakEvents = __webpack_require__(50);
}
}
var ITEMS = "items";
var ITEMTEMPLATE = "itemTemplate";
var ISSCROLLING = "isScrolling";
var LISTVIEW = "ListView";
var SEPARATORCOLOR = "separatorColor";
var ROWHEIGHT = "rowHeight";
var knownTemplates;
(function(knownTemplates) {
knownTemplates.itemTemplate = "itemTemplate";
})(knownTemplates = exports.knownTemplates || (exports.knownTemplates = {}));
function onItemsPropertyChanged(data) {
var listView = data.object;
listView._onItemsPropertyChanged(data);
}
function onItemTemplatePropertyChanged(data) {
var listView = data.object;
listView.refresh();
}
function onRowHeightPropertyChanged(data) {
var listView = data.object;
listView._onRowHeightPropertyChanged(data);
}
var ListView = function(_super) {
__extends(ListView, _super);
function ListView() {
_super.apply(this, arguments);
}
Object.defineProperty(ListView.prototype, "items", {
get: function() {
return this._getValue(ListView.itemsProperty);
},
set: function(value) {
this._setValue(ListView.itemsProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListView.prototype, "itemTemplate", {
get: function() {
return this._getValue(ListView.itemTemplateProperty);
},
set: function(value) {
this._setValue(ListView.itemTemplateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListView.prototype, "isScrolling", {
get: function() {
return this._getValue(ListView.isScrollingProperty);
},
set: function(value) {
this._setValue(ListView.isScrollingProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListView.prototype, "separatorColor", {
get: function() {
return this._getValue(ListView.separatorColorProperty);
},
set: function(value) {
this._setValue(ListView.separatorColorProperty, value instanceof color.Color ? value : new color.Color(value));
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListView.prototype, "rowHeight", {
get: function() {
return this._getValue(ListView.rowHeightProperty);
},
set: function(value) {
this._setValue(ListView.rowHeightProperty, value);
},
enumerable: true,
configurable: true
});
ListView.prototype.refresh = function() {};
ListView.prototype.scrollToIndex = function(index) {};
ListView.prototype._getItemTemplateContent = function(index) {
ensureBuilder();
var v;
if (this.itemTemplate && this.items) {
v = builder.parse(this.itemTemplate, this);
}
return v;
};
ListView.prototype._prepareItem = function(item, index) {
if (item) {
var dataItem = this._getDataItem(index);
if (!(dataItem instanceof observable.Observable)) {
item.bindingContext = null;
}
item.bindingContext = dataItem;
item._inheritProperties(this);
}
};
ListView.prototype._getDataItem = function(index) {
return this.items.getItem ? this.items.getItem(index) : this.items[index];
};
ListView.prototype._getDefaultItemContent = function(index) {
ensureLabel();
var lbl = new label.Label();
lbl.bind({
targetProperty: "text",
sourceProperty: "$value"
});
return lbl;
};
ListView.prototype._onItemsPropertyChanged = function(data) {
ensureObservableArray();
ensureWeakEvents();
if (data.oldValue instanceof observable.Observable) {
weakEvents.removeWeakEventListener(data.oldValue, observableArray.ObservableArray.changeEvent, this._onItemsChanged, this);
}
if (data.newValue instanceof observable.Observable) {
weakEvents.addWeakEventListener(data.newValue, observableArray.ObservableArray.changeEvent, this._onItemsChanged, this);
}
this.refresh();
};
ListView.prototype._onItemsChanged = function(args) {
this.refresh();
};
ListView.prototype._onRowHeightPropertyChanged = function(data) {
this.refresh();
};
ListView.prototype._propagateInheritableProperties = function(view) {};
ListView.itemLoadingEvent = "itemLoading";
ListView.itemTapEvent = "itemTap";
ListView.loadMoreItemsEvent = "loadMoreItems";
ListView.separatorColorProperty = new dependencyObservable.Property(SEPARATORCOLOR, LISTVIEW, new proxy.PropertyMetadata(undefined));
ListView.itemsProperty = new dependencyObservable.Property(ITEMS, LISTVIEW, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemsPropertyChanged));
ListView.itemTemplateProperty = new dependencyObservable.Property(ITEMTEMPLATE, LISTVIEW, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemTemplatePropertyChanged));
ListView.isScrollingProperty = new dependencyObservable.Property(ISSCROLLING, LISTVIEW, new proxy.PropertyMetadata(false, dependencyObservable.PropertyMetadataSettings.None));
ListView.rowHeightProperty = new dependencyObservable.Property(ROWHEIGHT, LISTVIEW, new proxy.PropertyMetadata(-1, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onRowHeightPropertyChanged));
return ListView;
}(view.View);
exports.ListView = ListView;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(248);
var enums_1 = __webpack_require__(23);
global.moduleMerge(common, exports);
function setNativeOrientationProperty(data) {
var stackLayout = data.object;
var nativeView = stackLayout._nativeView;
nativeView.setOrientation(data.newValue === enums_1.Orientation.vertical ? org.nativescript.widgets.Orientation.vertical : org.nativescript.widgets.Orientation.horizontal);
}
common.StackLayout.orientationProperty.metadata.onSetNativeValue = setNativeOrientationProperty;
var StackLayout = function(_super) {
__extends(StackLayout, _super);
function StackLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(StackLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(StackLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
StackLayout.prototype._createUI = function() {
this._layout = new org.nativescript.widgets.StackLayout(this._context);
};
return StackLayout;
}(common.StackLayout);
exports.StackLayout = StackLayout;
}, function(module, exports, __webpack_require__) {
var platform = __webpack_require__(39);
var layout_base_1 = __webpack_require__(73);
var enums_1 = __webpack_require__(23);
var proxy_1 = __webpack_require__(48);
var dependency_observable_1 = __webpack_require__(32);
var AffectsLayout = platform.device.os === platform.platformNames.android ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
function validateOrientation(value) {
return value === enums_1.Orientation.vertical || value === enums_1.Orientation.horizontal;
}
var StackLayout = function(_super) {
__extends(StackLayout, _super);
function StackLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(StackLayout.prototype, "orientation", {
get: function() {
return this._getValue(StackLayout.orientationProperty);
},
set: function(value) {
this._setValue(StackLayout.orientationProperty, value);
},
enumerable: true,
configurable: true
});
StackLayout.orientationProperty = new dependency_observable_1.Property("orientation", "StackLayout", new proxy_1.PropertyMetadata(enums_1.Orientation.vertical, AffectsLayout, undefined, validateOrientation));
return StackLayout;
}(layout_base_1.LayoutBase);
exports.StackLayout = StackLayout;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(13);
var trace = __webpack_require__(26);
var layout_base_1 = __webpack_require__(73);
var ProxyViewContainer = function(_super) {
__extends(ProxyViewContainer, _super);
function ProxyViewContainer() {
_super.apply(this, arguments);
}
Object.defineProperty(ProxyViewContainer.prototype, "ios", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProxyViewContainer.prototype, "android", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProxyViewContainer.prototype, "_nativeView", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProxyViewContainer.prototype, "isLayoutRequested", {
get: function() {
return false;
},
enumerable: true,
configurable: true
});
ProxyViewContainer.prototype._createUI = function() {};
ProxyViewContainer.prototype._getNativeViewsCount = function() {
var result = 0;
this._eachChildView(function(cv) {
result += cv._getNativeViewsCount();
return true;
});
return result;
};
ProxyViewContainer.prototype._eachLayoutView = function(callback) {
this._eachChildView(function(cv) {
cv._eachLayoutView(callback);
return true;
});
};
ProxyViewContainer.prototype._addViewToNativeVisualTree = function(child, atIndex) {
trace.write("ViewContainer._addViewToNativeVisualTree for a child " + child + " ViewContainer.parent: " + this.parent, trace.categories.ViewHierarchy);
_super.prototype._addViewToNativeVisualTree.call(this, child);
var parent = this.parent;
if (parent) {
var baseIndex = 0;
var insideIndex = 0;
if (parent instanceof layout_base_1.LayoutBase) {
baseIndex = parent._childIndexToNativeChildIndex(parent.getChildIndex(this));
}
if (types.isDefined(atIndex)) {
insideIndex = this._childIndexToNativeChildIndex(atIndex);
} else {
insideIndex = this._getNativeViewsCount();
}
trace.write("ProxyViewContainer._addViewToNativeVisualTree at: " + atIndex + " base: " + baseIndex + " additional: " + insideIndex, trace.categories.ViewHierarchy);
return parent._addViewToNativeVisualTree(child, baseIndex + insideIndex);
}
return false;
};
ProxyViewContainer.prototype._removeViewFromNativeVisualTree = function(child) {
trace.write("ProxyViewContainer._removeViewFromNativeVisualTree for a child " + child + " ViewContainer.parent: " + this.parent, trace.categories.ViewHierarchy);
_super.prototype._removeViewFromNativeVisualTree.call(this, child);
var parent = this.parent;
if (parent) {
return parent._removeViewFromNativeVisualTree(child);
}
};
ProxyViewContainer.prototype._addToSuperview = function(superview, atIndex) {
var _this = this;
var index = 0;
this._eachChildView(function(cv) {
if (!cv._isAddedToNativeVisualTree) {
cv._isAddedToNativeVisualTree = _this._addViewToNativeVisualTree(cv, index++);
}
return true;
});
return true;
};
ProxyViewContainer.prototype._removeFromSuperview = function() {
var _this = this;
this._eachChildView(function(cv) {
if (cv._isAddedToNativeVisualTree) {
_this._removeViewFromNativeVisualTree(cv);
}
return true;
});
};
ProxyViewContainer.prototype._registerLayoutChild = function(child) {
if (this.parent instanceof layout_base_1.LayoutBase) {
this.parent._registerLayoutChild(child);
}
};
ProxyViewContainer.prototype._unregisterLayoutChild = function(child) {
if (this.parent instanceof layout_base_1.LayoutBase) {
this.parent._unregisterLayoutChild(child);
}
};
ProxyViewContainer.prototype._parentChanged = function(oldParent) {
var addingToParent = this.parent && !oldParent;
var newLayout = this.parent;
var oldLayout = oldParent;
if (addingToParent && newLayout instanceof layout_base_1.LayoutBase) {
this._eachChildView(function(child) {
newLayout._registerLayoutChild(child);
return true;
});
} else if (oldLayout instanceof layout_base_1.LayoutBase) {
this._eachChildView(function(child) {
oldLayout._unregisterLayoutChild(child);
return true;
});
}
};
return ProxyViewContainer;
}(layout_base_1.LayoutBase);
exports.ProxyViewContainer = ProxyViewContainer;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(251);
var style = __webpack_require__(14);
var R_ATTR_PROGRESS_BAR_STYLE_HORIZONTAL = 16842872;
function onValuePropertyChanged(data) {
var progress = data.object;
if (!progress.android) {
return;
}
progress.android.setProgress(data.newValue);
}
function onMaxValuePropertyChanged(data) {
var progress = data.object;
if (!progress.android) {
return;
}
progress.android.setMax(data.newValue);
}
common.Progress.valueProperty.metadata.onSetNativeValue = onValuePropertyChanged;
common.Progress.maxValueProperty.metadata.onSetNativeValue = onMaxValuePropertyChanged;
global.moduleMerge(common, exports);
var Progress = function(_super) {
__extends(Progress, _super);
function Progress() {
_super.apply(this, arguments);
}
Progress.prototype._createUI = function() {
this._android = new android.widget.ProgressBar(this._context, null, R_ATTR_PROGRESS_BAR_STYLE_HORIZONTAL);
};
Object.defineProperty(Progress.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
return Progress;
}(common.Progress);
exports.Progress = Progress;
var ProgressStyler = function() {
function ProgressStyler() {}
ProgressStyler.setColorProperty = function(view, newValue) {
var bar = view._nativeView;
bar.getProgressDrawable().setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
};
ProgressStyler.resetColorProperty = function(view, nativeValue) {
var bar = view._nativeView;
bar.getProgressDrawable().clearColorFilter();
};
ProgressStyler.setBackgroundAndBorderProperty = function(view, newValue) {
var bar = view._nativeView;
var progressDrawable = bar.getProgressDrawable();
if (progressDrawable.getNumberOfLayers && progressDrawable.getNumberOfLayers() > 0) {
var backgroundDrawable = progressDrawable.getDrawable(0);
if (backgroundDrawable) {
backgroundDrawable.setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
}
}
};
ProgressStyler.resetBackgroundAndBorderProperty = function(view, nativeValue) {};
ProgressStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(ProgressStyler.setColorProperty, ProgressStyler.resetColorProperty), "Progress");
style.registerHandler(style.backgroundColorProperty, new style.StylePropertyChangedHandler(ProgressStyler.setBackgroundAndBorderProperty, ProgressStyler.resetBackgroundAndBorderProperty), "Progress");
style.registerHandler(style.borderWidthProperty, style.ignorePropertyHandler, "Progress");
style.registerHandler(style.borderColorProperty, style.ignorePropertyHandler, "Progress");
style.registerHandler(style.borderRadiusProperty, style.ignorePropertyHandler, "Progress");
style.registerHandler(style.backgroundInternalProperty, style.ignorePropertyHandler, "Progress");
};
return ProgressStyler;
}();
exports.ProgressStyler = ProgressStyler;
ProgressStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(11);
var dependencyObservable = __webpack_require__(32);
var proxy = __webpack_require__(48);
var Progress = function(_super) {
__extends(Progress, _super);
function Progress() {
_super.call(this);
this.maxValue = 100;
this.value = 0;
}
Object.defineProperty(Progress.prototype, "maxValue", {
get: function() {
return this._getValue(Progress.maxValueProperty);
},
set: function(newMaxValue) {
this._setValue(Progress.maxValueProperty, newMaxValue);
if (this.value > newMaxValue) {
this.value = newMaxValue;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Progress.prototype, "value", {
get: function() {
return this._getValue(Progress.valueProperty);
},
set: function(value) {
value = Math.min(value, this.maxValue);
this._setValue(Progress.valueProperty, value);
},
enumerable: true,
configurable: true
});
Progress.valueProperty = new dependencyObservable.Property("value", "Progress", new proxy.PropertyMetadata(0, dependencyObservable.PropertyMetadataSettings.AffectsLayout));
Progress.maxValueProperty = new dependencyObservable.Property("maxValue", "Progress", new proxy.PropertyMetadata(100, dependencyObservable.PropertyMetadataSettings.AffectsLayout));
return Progress;
}(view.View);
exports.Progress = Progress;
}, function(module, exports, __webpack_require__) {
var proxy = __webpack_require__(48);
var dependencyObservable = __webpack_require__(32);
var viewModule = __webpack_require__(11);
var layoutBaseModule = __webpack_require__(73);
var utils = __webpack_require__(21);
var trace = __webpack_require__(26);
var platform = __webpack_require__(39);
var stackLayout = __webpack_require__(247);
var types = __webpack_require__(13);
var builder = __webpack_require__(75);
var observableArray = __webpack_require__(58);
var weakEvents = __webpack_require__(50);
var label;
function ensureLabel() {
if (!label) {
label = __webpack_require__(95);
}
}
var ITEMS = "items";
var ITEMTEMPLATE = "itemTemplate";
var LAYOUT = "layout";
var REPEATER = "Repeater";
var knownTemplates;
(function(knownTemplates) {
knownTemplates.itemTemplate = "itemTemplate";
})(knownTemplates = exports.knownTemplates || (exports.knownTemplates = {}));
function onItemsPropertyChanged(data) {
var repeater = data.object;
repeater._onItemsPropertyChanged(data);
}
function onItemTemplatePropertyChanged(data) {
var repeater = data.object;
repeater._onItemTemplatePropertyChanged(data);
}
function onItemsLayoutPropertyPropertyChanged(data) {
var repeater = data.object;
repeater._onItemsLayoutPropertyPropertyChanged(data);
}
var Repeater = function(_super) {
__extends(Repeater, _super);
function Repeater() {
_super.call(this);
this._isDirty = false;
if (platform.device.os === platform.platformNames.ios) {
this._ios = UIView.new();
}
this.itemsLayout = new stackLayout.StackLayout();
}
Object.defineProperty(Repeater.prototype, "items", {
get: function() {
return this._getValue(Repeater.itemsProperty);
},
set: function(value) {
this._setValue(Repeater.itemsProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Repeater.prototype, "itemTemplate", {
get: function() {
return this._getValue(Repeater.itemTemplateProperty);
},
set: function(value) {
this._setValue(Repeater.itemTemplateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Repeater.prototype, "itemsLayout", {
get: function() {
return this._getValue(Repeater.itemsLayoutProperty);
},
set: function(value) {
this._setValue(Repeater.itemsLayoutProperty, value);
},
enumerable: true,
configurable: true
});
Repeater.prototype.onLoaded = function() {
trace.write("Repeater.onLoaded()", "Repeater");
if (this._isDirty) {
this.refresh();
}
_super.prototype.onLoaded.call(this);
};
Repeater.prototype._requestRefresh = function() {
trace.write("Repeater._requestRefresh()", "Repeater");
this._isDirty = true;
if (this.isLoaded) {
this.refresh();
}
};
Repeater.prototype.refresh = function() {
trace.write("Repeater.refresh()", "Repeater");
if (this.itemsLayout) {
this.itemsLayout.removeChildren();
}
if (types.isNullOrUndefined(this.items) || !types.isNumber(this.items.length)) {
return;
}
var length = this.items.length;
for (var i = 0; i < length; i++) {
var viewToAdd = !types.isNullOrUndefined(this.itemTemplate) ? builder.parse(this.itemTemplate, this) : this._getDefaultItemContent(i);
var dataItem = this._getDataItem(i);
viewToAdd.bindingContext = dataItem;
this.itemsLayout.addChild(viewToAdd);
}
this._isDirty = false;
};
Repeater.prototype._onItemsPropertyChanged = function(data) {
trace.write("Repeater._onItemsPropertyChanged(" + data.oldValue + " => " + data.newValue + ")", "Repeater");
if (data.oldValue instanceof observableArray.ObservableArray) {
weakEvents.removeWeakEventListener(data.oldValue, observableArray.ObservableArray.changeEvent, this._onItemsChanged, this);
}
if (data.newValue instanceof observableArray.ObservableArray) {
weakEvents.addWeakEventListener(data.newValue, observableArray.ObservableArray.changeEvent, this._onItemsChanged, this);
}
this._requestRefresh();
};
Repeater.prototype._onItemTemplatePropertyChanged = function(data) {
trace.write("Repeater._onItemTemplatePropertyChanged(" + data.oldValue + " => " + data.newValue + ")", "Repeater");
this._requestRefresh();
};
Repeater.prototype._onItemsLayoutPropertyPropertyChanged = function(data) {
trace.write("Repeater._onItemsLayoutPropertyPropertyChanged(" + data.oldValue + " => " + data.newValue + ")", "Repeater");
if (data.oldValue instanceof layoutBaseModule.LayoutBase) {
this._removeView(data.oldValue);
}
if (data.newValue instanceof layoutBaseModule.LayoutBase) {
this._addView(data.newValue);
}
this._requestRefresh();
};
Repeater.prototype._onItemsChanged = function(data) {
trace.write("Repeater._onItemsChanged(" + data + ")", "Repeater");
this._requestRefresh();
};
Repeater.prototype._getDefaultItemContent = function(index) {
ensureLabel();
var lbl = new label.Label();
lbl.bind({
targetProperty: "text",
sourceProperty: "$value"
});
return lbl;
};
Repeater.prototype._getDataItem = function(index) {
return this.items.getItem ? this.items.getItem(index) : this.items[index];
};
Object.defineProperty(Repeater.prototype, "ios", {
get: function() {
return this._ios;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Repeater.prototype, "_childrenCount", {
get: function() {
var count = 0;
if (this.itemsLayout) {
count++;
}
return count;
},
enumerable: true,
configurable: true
});
Repeater.prototype._eachChildView = function(callback) {
if (this.itemsLayout) {
callback(this.itemsLayout);
}
};
Repeater.prototype.onLayout = function(left, top, right, bottom) {
viewModule.View.layoutChild(this, this.itemsLayout, 0, 0, right - left, bottom - top);
};
Repeater.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var result = viewModule.View.measureChild(this, this.itemsLayout, widthMeasureSpec, heightMeasureSpec);
var width = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var height = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = utils.layout.getMeasureSpecMode(heightMeasureSpec);
var widthAndState = viewModule.View.resolveSizeAndState(result.measuredWidth, width, widthMode, 0);
var heightAndState = viewModule.View.resolveSizeAndState(result.measuredHeight, height, heightMode, 0);
this.setMeasuredDimension(widthAndState, heightAndState);
};
Repeater.itemsProperty = new dependencyObservable.Property(ITEMS, REPEATER, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemsPropertyChanged));
Repeater.itemTemplateProperty = new dependencyObservable.Property(ITEMTEMPLATE, REPEATER, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemTemplatePropertyChanged));
Repeater.itemsLayoutProperty = new dependencyObservable.Property(LAYOUT, REPEATER, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemsLayoutPropertyPropertyChanged));
return Repeater;
}(viewModule.CustomLayoutView);
exports.Repeater = Repeater;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(254);
var utils = __webpack_require__(21);
var enums = __webpack_require__(23);
global.moduleMerge(common, exports);
common.orientationProperty.metadata.onValueChanged = function scrollViewOrientationChanged(data) {
data.object._onOrientationChanged(data.oldValue, data.newValue);
};
var ScrollView = function(_super) {
__extends(ScrollView, _super);
function ScrollView() {
_super.apply(this, arguments);
this._androidViewId = -1;
}
Object.defineProperty(ScrollView.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "_nativeView", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "horizontalOffset", {
get: function() {
if (!this._android) {
return 0;
}
return this._android.getScrollX() / utils.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "verticalOffset", {
get: function() {
if (!this._android) {
return 0;
}
return this._android.getScrollY() / utils.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "scrollableWidth", {
get: function() {
if (!this._android || this.orientation !== enums.Orientation.horizontal) {
return 0;
}
return this._android.getScrollableLength() / utils.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "scrollableHeight", {
get: function() {
if (!this._android || this.orientation !== enums.Orientation.vertical) {
return 0;
}
return this._android.getScrollableLength() / utils.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
ScrollView.prototype.scrollToVerticalOffset = function(value, animated) {
if (this._android && this.orientation === enums.Orientation.vertical) {
value *= utils.layout.getDisplayDensity();
if (animated) {
this._android.smoothScrollTo(0, value);
} else {
this._android.scrollTo(0, value);
}
}
};
ScrollView.prototype.scrollToHorizontalOffset = function(value, animated) {
if (this._android && this.orientation === enums.Orientation.horizontal) {
value *= utils.layout.getDisplayDensity();
if (animated) {
this._android.smoothScrollTo(value, 0);
} else {
this._android.scrollTo(value, 0);
}
}
};
ScrollView.prototype._createUI = function() {
if (this.orientation === enums.Orientation.horizontal) {
this._android = new org.nativescript.widgets.HorizontalScrollView(this._context);
} else {
this._android = new org.nativescript.widgets.VerticalScrollView(this._context);
}
if (this._androidViewId < 0) {
this._androidViewId = android.view.View.generateViewId();
}
this._android.setId(this._androidViewId);
};
ScrollView.prototype._onOrientationChanged = function(oldValue, newValue) {
if (this._android) {
var parent = this.parent;
if (parent) {
parent._removeView(this);
}
if (parent) {
parent._addView(this);
}
}
};
ScrollView.prototype.attachNative = function() {
var that = new WeakRef(this);
this.handler = new android.view.ViewTreeObserver.OnScrollChangedListener({
onScrollChanged: function() {
var rootScrollView = that.get();
if (rootScrollView && rootScrollView.android) {
rootScrollView.notify({
object: rootScrollView,
eventName: ScrollView.scrollEvent,
scrollX: rootScrollView.android.getScrollX() / utils.layout.getDisplayDensity(),
scrollY: rootScrollView.android.getScrollY() / utils.layout.getDisplayDensity()
});
}
}
});
this._android.getViewTreeObserver().addOnScrollChangedListener(this.handler);
};
ScrollView.prototype.dettachNative = function() {
this._android.getViewTreeObserver().removeOnScrollChangedListener(this.handler);
this.handler = null;
};
return ScrollView;
}(common.ScrollView);
exports.ScrollView = ScrollView;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(32);
var proxy = __webpack_require__(48);
var enums = __webpack_require__(23);
var contentView = __webpack_require__(68);
function isValidOrientation(value) {
return value === enums.Orientation.vertical || value === enums.Orientation.horizontal;
}
exports.orientationProperty = new dependencyObservable.Property("orientation", "ScrollView", new proxy.PropertyMetadata(enums.Orientation.vertical, dependencyObservable.PropertyMetadataSettings.AffectsLayout, undefined, isValidOrientation));
var ScrollView = function(_super) {
__extends(ScrollView, _super);
function ScrollView() {
_super.apply(this, arguments);
this._scrollChangeCount = 0;
}
Object.defineProperty(ScrollView.prototype, "orientation", {
get: function() {
return this._getValue(exports.orientationProperty);
},
set: function(value) {
this._setValue(exports.orientationProperty, value);
},
enumerable: true,
configurable: true
});
ScrollView.prototype.addEventListener = function(arg, callback, thisArg) {
_super.prototype.addEventListener.call(this, arg, callback, thisArg);
if (arg === ScrollView.scrollEvent) {
this._scrollChangeCount++;
this.attach();
}
};
ScrollView.prototype.removeEventListener = function(arg, callback, thisArg) {
_super.prototype.addEventListener.call(this, arg, callback, thisArg);
if (arg === ScrollView.scrollEvent) {
this._scrollChangeCount--;
this.dettach();
}
};
ScrollView.prototype.onLoaded = function() {
_super.prototype.onLoaded.call(this);
this.attach();
};
ScrollView.prototype.onUnloaded = function() {
_super.prototype.onUnloaded.call(this);
this.dettach();
};
ScrollView.prototype.attach = function() {
if (this._scrollChangeCount > 0 && this.isLoaded) {
this.attachNative();
}
};
ScrollView.prototype.dettach = function() {
if (this._scrollChangeCount === 0 && this.isLoaded) {
this.dettachNative();
}
};
ScrollView.prototype.attachNative = function() {};
ScrollView.prototype.dettachNative = function() {};
Object.defineProperty(ScrollView.prototype, "horizontalOffset", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "verticalOffset", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "scrollableWidth", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "scrollableHeight", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
ScrollView.prototype.scrollToVerticalOffset = function(value, animated) {};
ScrollView.prototype.scrollToHorizontalOffset = function(value, animated) {};
ScrollView.scrollEvent = "scroll";
return ScrollView;
}(contentView.ContentView);
exports.ScrollView = ScrollView;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(256);
var color = __webpack_require__(27);
var utils = __webpack_require__(21);
var style = __webpack_require__(14);
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(13);
}
}
var SEARCHTEXT = "searchText";
var QUERY = "query";
var EMPTY = "";
function onTextPropertyChanged(data) {
var bar = data.object;
if (!bar.android) {
return;
}
bar.android.setQuery(data.newValue, false);
}
common.SearchBar.textProperty.metadata.onSetNativeValue = onTextPropertyChanged;
function onTextFieldBackgroundColorPropertyChanged(data) {
var bar = data.object;
if (!bar.android) {
return;
}
if (data.newValue instanceof color.Color) {
_changeSearchViewBackgroundColor(bar.android, data.newValue.android);
}
}
common.SearchBar.textFieldBackgroundColorProperty.metadata.onSetNativeValue = onTextFieldBackgroundColorPropertyChanged;
function onTextFieldHintColorPropertyChanged(data) {
var bar = data.object;
if (!bar.android) {
return;
}
if (data.newValue instanceof color.Color) {
_changeSearchViewHintColor(bar.android, data.newValue.android);
}
}
common.SearchBar.textFieldHintColorProperty.metadata.onSetNativeValue = onTextFieldHintColorPropertyChanged;
function onHintPropertyChanged(data) {
var bar = data.object;
if (!bar.android) {
return;
}
var newValue = data.newValue;
ensureTypes();
if (types.isString(newValue)) {
bar.android.setQueryHint(newValue);
}
}
common.SearchBar.hintProperty.metadata.onSetNativeValue = onHintPropertyChanged;
function getTextView(bar) {
if (bar) {
var id = bar.getContext().getResources().getIdentifier("android:id/search_src_text", null, null);
if (id) {
return bar.findViewById(id);
}
}
return undefined;
}
function _changeSearchViewBackgroundColor(bar, color) {
var textView = getTextView(bar);
if (textView) {
textView.setBackgroundColor(color);
}
}
function _changeSearchViewHintColor(bar, color) {
var textView = getTextView(bar);
if (textView) {
textView.setHintTextColor(color);
}
}
global.moduleMerge(common, exports);
var SearchBar = function(_super) {
__extends(SearchBar, _super);
function SearchBar() {
_super.apply(this, arguments);
}
SearchBar.prototype.dismissSoftInput = function() {
utils.ad.dismissSoftInput(this._nativeView);
};
SearchBar.prototype.focus = function() {
var result = _super.prototype.focus.call(this);
if (result) {
utils.ad.showSoftInput(this._nativeView);
}
return result;
};
SearchBar.prototype._createUI = function() {
this._android = new android.widget.SearchView(this._context);
this._android.setIconified(false);
var that = new WeakRef(this);
this._android.setOnQueryTextListener(new android.widget.SearchView.OnQueryTextListener({
get owner() {
return that.get();
},
onQueryTextChange: function(newText) {
if (this.owner) {
this.owner._onPropertyChangedFromNative(common.SearchBar.textProperty, newText);
if (newText === EMPTY && this[SEARCHTEXT] !== newText) {
this.owner._emit(common.SearchBar.clearEvent);
}
this[SEARCHTEXT] = newText;
}
return true;
},
onQueryTextSubmit: function(query) {
if (this.owner) {
if (query !== EMPTY && this[QUERY] !== query) {
this.owner._emit(common.SearchBar.submitEvent);
}
this[QUERY] = query;
}
return true;
}
}));
this._android.setOnCloseListener(new android.widget.SearchView.OnCloseListener({
get owner() {
return that.get();
},
onClose: function() {
if (this.owner) {
this.owner._emit(common.SearchBar.clearEvent);
}
return true;
}
}));
if (this.textFieldBackgroundColor instanceof color.Color) {
_changeSearchViewBackgroundColor(this._android, this.textFieldBackgroundColor.android);
}
if (this.textFieldHintColor instanceof color.Color) {
_changeSearchViewHintColor(this._android, this.textFieldHintColor.android);
}
};
Object.defineProperty(SearchBar.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
return SearchBar;
}(common.SearchBar);
exports.SearchBar = SearchBar;
var SearchBarStyler = function() {
function SearchBarStyler() {}
SearchBarStyler.getBackgroundColorProperty = function(v) {
var bar = v._nativeView;
return bar.getDrawingCacheBackgroundColor();
};
SearchBarStyler.setBackgroundColorProperty = function(v, newValue) {
var bar = v._nativeView;
bar.setBackgroundColor(newValue);
SearchBarStyler._changeSearchViewPlateBackgroundColor(bar, newValue);
};
SearchBarStyler.resetBackgroundColorProperty = function(v, nativeValue) {
var bar = v._nativeView;
bar.setBackgroundColor(nativeValue);
SearchBarStyler._changeSearchViewPlateBackgroundColor(bar, nativeValue);
};
SearchBarStyler.getColorProperty = function(v) {
var bar = v._nativeView;
var textView = SearchBarStyler._getSearchViewTextView(bar);
if (textView) {
return textView.getCurrentTextColor();
}
return undefined;
};
SearchBarStyler.setColorProperty = function(v, newValue) {
var bar = v._nativeView;
SearchBarStyler._changeSearchViewTextColor(bar, newValue);
};
SearchBarStyler.resetColorProperty = function(v, nativeValue) {
var bar = v._nativeView;
SearchBarStyler._changeSearchViewTextColor(bar, nativeValue);
};
SearchBarStyler.setFontInternalProperty = function(v, newValue, nativeValue) {
var bar = v.android;
var textView = SearchBarStyler._getSearchViewTextView(bar);
var fontValue = newValue;
var typeface = fontValue.getAndroidTypeface();
if (typeface) {
textView.setTypeface(typeface);
} else {
textView.setTypeface(nativeValue.typeface);
}
if (fontValue.fontSize) {
textView.setTextSize(fontValue.fontSize);
} else {
textView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
};
SearchBarStyler.resetFontInternalProperty = function(v, nativeValue) {
var bar = v.android;
var textView = SearchBarStyler._getSearchViewTextView(bar);
textView.setTypeface(nativeValue.typeface);
textView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
};
SearchBarStyler.getNativeFontInternalValue = function(v) {
var bar = v.android;
var textView = SearchBarStyler._getSearchViewTextView(bar);
return {
typeface: textView.getTypeface(),
size: textView.getTextSize()
};
};
SearchBarStyler.registerHandlers = function() {
style.registerHandler(style.backgroundColorProperty, new style.StylePropertyChangedHandler(SearchBarStyler.setBackgroundColorProperty, SearchBarStyler.resetBackgroundColorProperty, SearchBarStyler.getBackgroundColorProperty), "SearchBar");
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(SearchBarStyler.setColorProperty, SearchBarStyler.resetColorProperty, SearchBarStyler.getColorProperty), "SearchBar");
style.registerHandler(style.fontInternalProperty, new style.StylePropertyChangedHandler(SearchBarStyler.setFontInternalProperty, SearchBarStyler.resetFontInternalProperty, SearchBarStyler.getNativeFontInternalValue), "SearchBar");
};
SearchBarStyler._getSearchViewTextView = function(bar) {
var id = bar.getContext().getResources().getIdentifier("android:id/search_src_text", null, null);
return bar.findViewById(id);
};
SearchBarStyler._changeSearchViewTextColor = function(bar, color) {
var textView = SearchBarStyler._getSearchViewTextView(bar);
if (textView) {
textView.setTextColor(color);
}
};
SearchBarStyler._changeSearchViewPlateBackgroundColor = function(bar, color) {
var id = bar.getContext().getResources().getIdentifier("android:id/search_plate", null, null);
var textView = bar.findViewById(id);
if (textView) {
textView.setBackgroundColor(color);
}
};
return SearchBarStyler;
}();
exports.SearchBarStyler = SearchBarStyler;
SearchBarStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(11);
var dependencyObservable = __webpack_require__(32);
var proxy = __webpack_require__(48);
var color = __webpack_require__(27);
var SearchBar = function(_super) {
__extends(SearchBar, _super);
function SearchBar() {
_super.apply(this, arguments);
}
Object.defineProperty(SearchBar.prototype, "text", {
get: function() {
return this._getValue(SearchBar.textProperty);
},
set: function(value) {
this._setValue(SearchBar.textProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(SearchBar.prototype, "hint", {
get: function() {
return this._getValue(SearchBar.hintProperty);
},
set: function(value) {
this._setValue(SearchBar.hintProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(SearchBar.prototype, "textFieldBackgroundColor", {
get: function() {
return this._getValue(SearchBar.textFieldBackgroundColorProperty);
},
set: function(value) {
this._setValue(SearchBar.textFieldBackgroundColorProperty, value instanceof color.Color ? value : new color.Color(value));
},
enumerable: true,
configurable: true
});
Object.defineProperty(SearchBar.prototype, "textFieldHintColor", {
get: function() {
return this._getValue(SearchBar.textFieldHintColorProperty);
},
set: function(value) {
this._setValue(SearchBar.textFieldHintColorProperty, value instanceof color.Color ? value : new color.Color(value));
},
enumerable: true,
configurable: true
});
SearchBar.prototype.dismissSoftInput = function() {};
SearchBar.submitEvent = "submit";
SearchBar.clearEvent = "clear";
SearchBar.textFieldBackgroundColorProperty = new dependencyObservable.Property("textFieldBackgroundColor", "SearchBar", new proxy.PropertyMetadata(undefined));
SearchBar.textFieldHintColorProperty = new dependencyObservable.Property("textFieldHintColor", "SearchBar", new proxy.PropertyMetadata(undefined));
SearchBar.hintProperty = new dependencyObservable.Property("hint", "SearchBar", new proxy.PropertyMetadata(""));
SearchBar.textProperty = new dependencyObservable.Property("text", "SearchBar", new proxy.PropertyMetadata("", dependencyObservable.PropertyMetadataSettings.AffectsLayout));
return SearchBar;
}(view.View);
exports.SearchBar = SearchBar;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(258);
var types = __webpack_require__(13);
var style = __webpack_require__(14);
var R_ID_TABS = 16908307;
var R_ID_TABCONTENT = 16908305;
var R_ATTR_STATE_SELECTED = 16842913;
global.moduleMerge(common, exports);
function onSelectedIndexPropertyChanged(data) {
var view = data.object;
if (!view.android || !view.items) {
return;
}
var index = data.newValue;
if (types.isNumber(index)) {
if (index >= 0 && index <= view.items.length - 1) {
view.android.setCurrentTab(index);
view.notify({
eventName: SegmentedBar.selectedIndexChangedEvent,
object: view,
oldIndex: data.oldValue,
newIndex: data.newValue
});
} else {
view.selectedIndex = undefined;
throw new Error("selectedIndex should be between [0, items.length - 1]");
}
}
}
common.SegmentedBar.selectedIndexProperty.metadata.onSetNativeValue = onSelectedIndexPropertyChanged;
function onItemsPropertyChanged(data) {
var view = data.object;
if (!view.android) {
return;
}
var oldItems = data.oldValue;
if (oldItems && oldItems.length) {
for (var i = 0; i < oldItems.length; i++) {
oldItems[i]._parent = null;
}
}
view.android.clearAllTabs();
var newItems = data.newValue;
view._adjustSelectedIndex(newItems);
if (newItems && newItems.length) {
for (var i = 0; i < newItems.length; i++) {
newItems[i]._parent = view;
var tab = view.android.newTabSpec(i + "");
tab.setIndicator(newItems[i].title || "");
tab.setContent(new android.widget.TabHost.TabContentFactory({
createTabContent: function(tag) {
var tv = new android.widget.TextView(view._context);
tv.setVisibility(android.view.View.GONE);
return tv;
}
}));
view.android.addTab(tab);
}
if (types.isNumber(view.selectedIndex) && view.android.getCurrentTab() !== view.selectedIndex) {
view.android.setCurrentTab(view.selectedIndex);
}
view.android.setOnTabChangedListener(null);
view.android.setOnTabChangedListener(view._listener);
var tabHost = view.android;
var tabIndex;
if (view.selectedBackgroundColor) {
ensureSegmentedBarColorDrawableClass();
for (tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var vg = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var stateDrawable = new android.graphics.drawable.StateListDrawable();
var arr = Array.create("int", 1);
arr[0] = R_ATTR_STATE_SELECTED;
var colorDrawable = new SegmentedBarColorDrawableClass(view.selectedBackgroundColor.android);
stateDrawable.addState(arr, colorDrawable);
stateDrawable.setBounds(0, 15, vg.getRight(), vg.getBottom());
vg.setBackgroundDrawable(stateDrawable);
}
}
for (tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var tabChild = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var t = tabChild.getChildAt(1);
if (view.color) {
t.setTextColor(view.color.android);
}
}
}
}
common.SegmentedBar.itemsProperty.metadata.onSetNativeValue = onItemsPropertyChanged;
var SegmentedBarColorDrawableClass;
function ensureSegmentedBarColorDrawableClass() {
if (SegmentedBarColorDrawableClass) {
return;
}
var SegmentedBarColorDrawable = function(_super) {
__extends(SegmentedBarColorDrawable, _super);
function SegmentedBarColorDrawable(arg) {
_super.call(this, arg);
return global.__native(this);
}
SegmentedBarColorDrawable.prototype.draw = function(canvas) {
var p = new android.graphics.Paint();
p.setColor(this.getColor());
p.setStyle(android.graphics.Paint.Style.FILL);
canvas.drawRect(0, this.getBounds().height() - 15, this.getBounds().width(), this.getBounds().height(), p);
};
return SegmentedBarColorDrawable;
}(android.graphics.drawable.ColorDrawable);
SegmentedBarColorDrawableClass = SegmentedBarColorDrawable;
}
var SegmentedBarItem = function(_super) {
__extends(SegmentedBarItem, _super);
function SegmentedBarItem() {
_super.apply(this, arguments);
}
SegmentedBarItem.prototype._update = function() {
if (this._parent && this._parent.android) {
var tabIndex = this._parent.items.indexOf(this);
var titleTextViewId = 16908310;
var titleTextView = this._parent.android.getTabWidget().getChildAt(tabIndex).findViewById(titleTextViewId);
titleTextView.setText(this.title || "");
}
};
return SegmentedBarItem;
}(common.SegmentedBarItem);
exports.SegmentedBarItem = SegmentedBarItem;
var SegmentedBar = function(_super) {
__extends(SegmentedBar, _super);
function SegmentedBar() {
_super.apply(this, arguments);
}
SegmentedBar.prototype._createUI = function() {
ensureTabHostClass();
this._android = new TabHostClass(this._context, null);
if (types.isNumber(this.selectedIndex) && this._android.getCurrentTab() !== this.selectedIndex) {
this._android.setCurrentTab(this.selectedIndex);
}
var that = new WeakRef(this);
this._listener = new android.widget.TabHost.OnTabChangeListener({
onTabChanged: function(id) {
var bar = that.get();
if (bar) {
bar.selectedIndex = parseInt(id);
}
}
});
var tabHostLayout = new android.widget.LinearLayout(this._context);
tabHostLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
var tabWidget = new android.widget.TabWidget(this._context);
tabWidget.setId(R_ID_TABS);
tabHostLayout.addView(tabWidget);
var frame = new android.widget.FrameLayout(this._context);
frame.setId(R_ID_TABCONTENT);
frame.setVisibility(android.view.View.GONE);
tabHostLayout.addView(frame);
this._android.addView(tabHostLayout);
this._android.setup();
};
Object.defineProperty(SegmentedBar.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
return SegmentedBar;
}(common.SegmentedBar);
exports.SegmentedBar = SegmentedBar;
var TabHostClass;
function ensureTabHostClass() {
if (TabHostClass) {
return;
}
var OurTabHost = function(_super) {
__extends(OurTabHost, _super);
function OurTabHost(context, attrs) {
_super.call(this, context, attrs);
return global.__native(this);
}
OurTabHost.prototype.onAttachedToWindow = function() {};
return OurTabHost;
}(android.widget.TabHost);
TabHostClass = OurTabHost;
}
var SegmentedBarStyler = function() {
function SegmentedBarStyler() {}
SegmentedBarStyler.setColorProperty = function(v, newValue) {
var tabHost = v._nativeView;
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var tab = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var t = tab.getChildAt(1);
t.setTextColor(newValue);
}
};
SegmentedBarStyler.resetColorProperty = function(v, nativeValue) {
var tabHost = v._nativeView;
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var tab = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var t = tab.getChildAt(1);
t.setTextColor(nativeValue);
}
};
SegmentedBarStyler.getColorProperty = function(v) {
var tabHost = v._nativeView;
var textView = new android.widget.TextView(tabHost.getContext());
return textView.getCurrentTextColor();
};
SegmentedBarStyler.setFontInternalProperty = function(v, newValue, nativeValue) {
var tabHost = v._nativeView;
var fontValue = newValue;
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var tab = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var t = tab.getChildAt(1);
var typeface = fontValue.getAndroidTypeface();
if (typeface) {
t.setTypeface(typeface);
} else {
t.setTypeface(nativeValue.typeface);
}
if (fontValue.fontSize) {
t.setTextSize(fontValue.fontSize);
} else {
t.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
}
};
SegmentedBarStyler.resetFontInternalProperty = function(v, nativeValue) {
var tabHost = v._nativeView;
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var tab = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var t = tab.getChildAt(1);
t.setTypeface(nativeValue.typeface);
t.setTextSize(nativeValue.size);
}
};
SegmentedBarStyler.getFontInternalProperty = function(v) {
var tabHost = v._nativeView;
var textView = new android.widget.TextView(tabHost.getContext());
return {
typeface: textView.getTypeface(),
size: textView.getTextSize()
};
};
SegmentedBarStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(SegmentedBarStyler.setColorProperty, SegmentedBarStyler.resetColorProperty, SegmentedBarStyler.getColorProperty), "SegmentedBar");
style.registerHandler(style.fontInternalProperty, new style.StylePropertyChangedHandler(SegmentedBarStyler.setFontInternalProperty, SegmentedBarStyler.resetFontInternalProperty, SegmentedBarStyler.getFontInternalProperty), "SegmentedBar");
};
return SegmentedBarStyler;
}();
exports.SegmentedBarStyler = SegmentedBarStyler;
SegmentedBarStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(11);
var proxy = __webpack_require__(48);
var dependencyObservable = __webpack_require__(32);
var color = __webpack_require__(27);
var bindable = __webpack_require__(49);
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(13);
}
}
var knownCollections;
(function(knownCollections) {
knownCollections.items = "items";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
var SegmentedBarItem = function(_super) {
__extends(SegmentedBarItem, _super);
function SegmentedBarItem() {
_super.apply(this, arguments);
this._title = "";
}
Object.defineProperty(SegmentedBarItem.prototype, "title", {
get: function() {
return this._title;
},
set: function(value) {
if (this._title !== value) {
this._title = value;
this._update();
}
},
enumerable: true,
configurable: true
});
SegmentedBarItem.prototype._update = function() {};
return SegmentedBarItem;
}(bindable.Bindable);
exports.SegmentedBarItem = SegmentedBarItem;
var SegmentedBar = function(_super) {
__extends(SegmentedBar, _super);
function SegmentedBar() {
_super.apply(this, arguments);
}
SegmentedBar.prototype._addArrayFromBuilder = function(name, value) {
if (name === "items") {
this._setValue(SegmentedBar.itemsProperty, value);
}
};
SegmentedBar.prototype._adjustSelectedIndex = function(items) {
if (this.items) {
if (this.items.length > 0) {
ensureTypes();
if (types.isUndefined(this.selectedIndex) || this.selectedIndex > this.items.length - 1) {
this._setValue(SegmentedBar.selectedIndexProperty, 0);
}
} else {
this._setValue(SegmentedBar.selectedIndexProperty, undefined);
}
} else {
this._setValue(SegmentedBar.selectedIndexProperty, undefined);
}
};
Object.defineProperty(SegmentedBar.prototype, "selectedIndex", {
get: function() {
return this._getValue(SegmentedBar.selectedIndexProperty);
},
set: function(value) {
this._setValue(SegmentedBar.selectedIndexProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(SegmentedBar.prototype, "items", {
get: function() {
return this._getValue(SegmentedBar.itemsProperty);
},
set: function(value) {
this._setValue(SegmentedBar.itemsProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(SegmentedBar.prototype, "selectedBackgroundColor", {
get: function() {
return this._getValue(SegmentedBar.selectedBackgroundColorProperty);
},
set: function(value) {
this._setValue(SegmentedBar.selectedBackgroundColorProperty, value instanceof color.Color ? value : new color.Color(value));
},
enumerable: true,
configurable: true
});
SegmentedBar.prototype._onBindingContextChanged = function(oldValue, newValue) {
_super.prototype._onBindingContextChanged.call(this, oldValue, newValue);
if (this.items && this.items.length > 0) {
var i = 0;
var length = this.items.length;
for (;i < length; i++) {
this.items[i].bindingContext = newValue;
}
}
};
SegmentedBar.selectedBackgroundColorProperty = new dependencyObservable.Property("selectedBackgroundColor", "SegmentedBar", new proxy.PropertyMetadata(undefined));
SegmentedBar.selectedIndexProperty = new dependencyObservable.Property("selectedIndex", "SegmentedBar", new proxy.PropertyMetadata(undefined));
SegmentedBar.itemsProperty = new dependencyObservable.Property("items", "SegmentedBar", new proxy.PropertyMetadata(undefined));
SegmentedBar.selectedIndexChangedEvent = "selectedIndexChanged";
return SegmentedBar;
}(view.View);
exports.SegmentedBar = SegmentedBar;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(260);
var style = __webpack_require__(14);
function onValuePropertyChanged(data) {
var slider = data.object;
if (!slider.android) {
return;
}
slider._setNativeValuesSilently(data.newValue - slider.minValue, slider.maxValue - slider.minValue);
}
function onMinValuePropertyChanged(data) {
var slider = data.object;
if (!slider.android) {
return;
}
slider._setNativeValuesSilently(slider.value - data.newValue, slider.maxValue - data.newValue);
}
function onMaxValuePropertyChanged(data) {
var slider = data.object;
if (!slider.android) {
return;
}
slider.android.setMax(data.newValue - slider.minValue);
}
common.Slider.valueProperty.metadata.onSetNativeValue = onValuePropertyChanged;
common.Slider.minValueProperty.metadata.onSetNativeValue = onMinValuePropertyChanged;
common.Slider.maxValueProperty.metadata.onSetNativeValue = onMaxValuePropertyChanged;
global.moduleMerge(common, exports);
var Slider = function(_super) {
__extends(Slider, _super);
function Slider() {
_super.apply(this, arguments);
}
Slider.prototype._createUI = function() {
this._android = new android.widget.SeekBar(this._context);
var that = new WeakRef(this);
this._changeListener = new android.widget.SeekBar.OnSeekBarChangeListener({
onProgressChanged: function(seekBar, progress, fromUser) {
var owner = that.get();
if (owner) {
if (!owner._supressNativeValue) {
var newValue = seekBar.getProgress() + owner.minValue;
owner._onPropertyChangedFromNative(common.Slider.valueProperty, newValue);
}
}
},
onStartTrackingTouch: function(seekBar) {},
onStopTrackingTouch: function(seekBar) {}
});
this._android.setOnSeekBarChangeListener(this._changeListener);
};
Object.defineProperty(Slider.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Slider.prototype._setNativeValuesSilently = function(newValue, newMaxValue) {
if (!this.android) {
return;
}
this._supressNativeValue = true;
try {
this.android.setMax(newMaxValue);
this.android.setProgress(newValue);
} finally {
this._supressNativeValue = false;
}
};
return Slider;
}(common.Slider);
exports.Slider = Slider;
var SliderStyler = function() {
function SliderStyler() {}
SliderStyler.setColorProperty = function(view, newValue) {
var bar = view._nativeView;
bar.getThumb().setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
};
SliderStyler.resetColorProperty = function(view, nativeValue) {
var bar = view._nativeView;
bar.getThumb().clearColorFilter();
};
SliderStyler.setBackgroundAndBorderProperty = function(view, newValue) {
var bar = view._nativeView;
bar.getProgressDrawable().setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
};
SliderStyler.resetBackgroundAndBorderProperty = function(view, nativeValue) {};
SliderStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(SliderStyler.setColorProperty, SliderStyler.resetColorProperty), "Slider");
style.registerHandler(style.backgroundColorProperty, new style.StylePropertyChangedHandler(SliderStyler.setBackgroundAndBorderProperty, SliderStyler.resetBackgroundAndBorderProperty), "Slider");
style.registerHandler(style.borderWidthProperty, style.ignorePropertyHandler, "Slider");
style.registerHandler(style.borderColorProperty, style.ignorePropertyHandler, "Slider");
style.registerHandler(style.borderRadiusProperty, style.ignorePropertyHandler, "Slider");
style.registerHandler(style.backgroundInternalProperty, style.ignorePropertyHandler, "Slider");
};
return SliderStyler;
}();
exports.SliderStyler = SliderStyler;
SliderStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(11);
var dependencyObservable = __webpack_require__(32);
var proxy = __webpack_require__(48);
var Slider = function(_super) {
__extends(Slider, _super);
function Slider() {
_super.call(this);
}
Object.defineProperty(Slider.prototype, "value", {
get: function() {
return this._getValue(Slider.valueProperty);
},
set: function(value) {
var newValue = value;
newValue = Math.max(newValue, this.minValue);
newValue = Math.min(newValue, this.maxValue);
this._setValue(Slider.valueProperty, newValue);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Slider.prototype, "minValue", {
get: function() {
return this._getValue(Slider.minValueProperty);
},
set: function(newValue) {
this._setValue(Slider.minValueProperty, newValue);
if (newValue > this.maxValue) {
this._setValue(Slider.maxValueProperty, newValue);
}
if (newValue > this.value) {
this._setValue(Slider.valueProperty, newValue);
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Slider.prototype, "maxValue", {
get: function() {
return this._getValue(Slider.maxValueProperty);
},
set: function(newValue) {
this._setValue(Slider.maxValueProperty, newValue);
if (newValue < this.minValue) {
this._setValue(Slider.minValueProperty, newValue);
}
if (newValue < this.value) {
this._setValue(Slider.valueProperty, newValue);
}
},
enumerable: true,
configurable: true
});
Slider.valueProperty = new dependencyObservable.Property("value", "Slider", new proxy.PropertyMetadata(0));
Slider.minValueProperty = new dependencyObservable.Property("minValue", "Slider", new proxy.PropertyMetadata(0));
Slider.maxValueProperty = new dependencyObservable.Property("maxValue", "Slider", new proxy.PropertyMetadata(100));
return Slider;
}(view.View);
exports.Slider = Slider;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(262);
var style = __webpack_require__(14);
function onCheckedPropertyChanged(data) {
var swtch = data.object;
if (!swtch.android) {
return;
}
swtch.android.setChecked(data.newValue);
}
common.Switch.checkedProperty.metadata.onSetNativeValue = onCheckedPropertyChanged;
global.moduleMerge(common, exports);
var Switch = function(_super) {
__extends(Switch, _super);
function Switch() {
_super.apply(this, arguments);
}
Object.defineProperty(Switch.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Switch.prototype._createUI = function() {
this._android = new android.widget.Switch(this._context);
var that = new WeakRef(this);
this._android.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({
get owner() {
return that.get();
},
onCheckedChanged: function(sender, isChecked) {
if (this.owner) {
this.owner._onPropertyChangedFromNative(common.Switch.checkedProperty, isChecked);
}
}
}));
};
return Switch;
}(common.Switch);
exports.Switch = Switch;
var SwitchStyler = function() {
function SwitchStyler() {}
SwitchStyler.setColorProperty = function(view, newValue) {
var sw = view._nativeView;
var drawable = sw.getThumbDrawable();
if (drawable) {
drawable.setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
}
};
SwitchStyler.resetColorProperty = function(view, nativeValue) {};
SwitchStyler.setBackgroundAndBorderProperty = function(view, newValue) {
var sw = view._nativeView;
var drawable = sw.getTrackDrawable();
if (drawable) {
drawable.setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
}
};
SwitchStyler.resetBackgroundAndBorderProperty = function(view, nativeValue) {};
SwitchStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(SwitchStyler.setColorProperty, SwitchStyler.resetColorProperty), "Switch");
style.registerHandler(style.backgroundColorProperty, new style.StylePropertyChangedHandler(SwitchStyler.setBackgroundAndBorderProperty, SwitchStyler.resetBackgroundAndBorderProperty), "Switch");
style.registerHandler(style.borderWidthProperty, style.ignorePropertyHandler, "Switch");
style.registerHandler(style.borderColorProperty, style.ignorePropertyHandler, "Switch");
style.registerHandler(style.borderRadiusProperty, style.ignorePropertyHandler, "Switch");
style.registerHandler(style.backgroundInternalProperty, style.ignorePropertyHandler, "Switch");
};
return SwitchStyler;
}();
exports.SwitchStyler = SwitchStyler;
SwitchStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(11);
var dependencyObservable = __webpack_require__(32);
var proxy = __webpack_require__(48);
var Switch = function(_super) {
__extends(Switch, _super);
function Switch() {
_super.apply(this, arguments);
}
Object.defineProperty(Switch.prototype, "checked", {
get: function() {
return this._getValue(Switch.checkedProperty);
},
set: function(value) {
this._setValue(Switch.checkedProperty, value);
},
enumerable: true,
configurable: true
});
Switch.checkedProperty = new dependencyObservable.Property("checked", "Switch", new proxy.PropertyMetadata(false));
return Switch;
}(view.View);
exports.Switch = Switch;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(264);
var trace = __webpack_require__(26);
var types = __webpack_require__(13);
var utils = __webpack_require__(21);
var color = __webpack_require__(27);
var style = __webpack_require__(14);
var imageSource;
function ensureImageSource() {
if (!imageSource) {
imageSource = __webpack_require__(59);
}
}
var VIEWS_STATES = "_viewStates";
var ACCENT_COLOR = "colorAccent";
var PRIMARY_COLOR = "colorPrimary";
var DEFAULT_ELEVATION = 4;
global.moduleMerge(common, exports);
var TabViewItem = function(_super) {
__extends(TabViewItem, _super);
function TabViewItem() {
_super.apply(this, arguments);
}
TabViewItem.prototype._update = function() {
if (this._parent) {
this._parent._updateTabForItem(this);
}
};
return TabViewItem;
}(common.TabViewItem);
exports.TabViewItem = TabViewItem;
var PagerAdapterClass;
function ensurePagerAdapterClass() {
if (PagerAdapterClass) {
return;
}
var PagerAdapterClassInner = function(_super) {
__extends(PagerAdapterClassInner, _super);
function PagerAdapterClassInner(owner, items) {
_super.call(this);
this.owner = owner;
this.items = items;
return global.__native(this);
}
PagerAdapterClassInner.prototype.getCount = function() {
return this.items ? this.items.length : 0;
};
PagerAdapterClassInner.prototype.getPageTitle = function(index) {
if (index < 0 || index >= this.items.length) {
return "";
}
return this.items[index].title;
};
PagerAdapterClassInner.prototype.instantiateItem = function(container, index) {
trace.write("TabView.PagerAdapter.instantiateItem; container: " + container + "; index: " + index, common.traceCategory);
var item = this.items[index];
if (item.view.parent !== this.owner) {
this.owner._addView(item.view);
}
if (this[VIEWS_STATES]) {
trace.write("TabView.PagerAdapter.instantiateItem; restoreHierarchyState: " + item.view, common.traceCategory);
item.view._nativeView.restoreHierarchyState(this[VIEWS_STATES]);
}
container.addView(item.view._nativeView);
return item.view._nativeView;
};
PagerAdapterClassInner.prototype.destroyItem = function(container, index, _object) {
trace.write("TabView.PagerAdapter.destroyItem; container: " + container + "; index: " + index + "; _object: " + _object, common.traceCategory);
var item = this.items[index];
var nativeView = item.view._nativeView;
if (nativeView.toString() !== _object.toString()) {
throw new Error("Expected " + nativeView.toString() + " to equal " + _object.toString());
}
if (!this[VIEWS_STATES]) {
this[VIEWS_STATES] = new android.util.SparseArray();
}
nativeView.saveHierarchyState(this[VIEWS_STATES]);
container.removeView(nativeView);
if (item.view.parent === this.owner) {
this.owner._removeView(item.view);
}
};
PagerAdapterClassInner.prototype.isViewFromObject = function(view, _object) {
return view === _object;
};
PagerAdapterClassInner.prototype.saveState = function() {
trace.write("TabView.PagerAdapter.saveState", common.traceCategory);
var owner = this.owner;
if (!owner || owner._childrenCount === 0) {
return null;
}
if (!this[VIEWS_STATES]) {
this[VIEWS_STATES] = new android.util.SparseArray();
}
var viewStates = this[VIEWS_STATES];
var childCallback = function(view) {
var nativeView = view._nativeView;
if (nativeView && nativeView.isSaveFromParentEnabled && nativeView.isSaveFromParentEnabled()) {
nativeView.saveHierarchyState(viewStates);
}
return true;
};
owner._eachChildView(childCallback);
var bundle = new android.os.Bundle();
bundle.putSparseParcelableArray(VIEWS_STATES, viewStates);
return bundle;
};
PagerAdapterClassInner.prototype.restoreState = function(state, loader) {
trace.write("TabView.PagerAdapter.restoreState", common.traceCategory);
var bundle = state;
bundle.setClassLoader(loader);
this[VIEWS_STATES] = bundle.getSparseParcelableArray(VIEWS_STATES);
};
return PagerAdapterClassInner;
}(android.support.v4.view.PagerAdapter);
PagerAdapterClass = PagerAdapterClassInner;
}
var PageChangedListenerClass;
function ensurePageChangedListenerClass() {
if (PageChangedListenerClass) {
return;
}
var PageChangedListener = function(_super) {
__extends(PageChangedListener, _super);
function PageChangedListener(owner) {
_super.call(this);
this._owner = owner;
return global.__native(this);
}
PageChangedListener.prototype.onPageSelected = function(position) {
this._owner.selectedIndex = position;
};
return PageChangedListener;
}(android.support.v4.view.ViewPager.SimpleOnPageChangeListener);
PageChangedListenerClass = PageChangedListener;
}
function selectedColorPropertyChanged(data) {
var tabLayout = data.object._getAndroidTabView();
if (tabLayout && data.newValue instanceof color.Color) {
tabLayout.setSelectedIndicatorColors([ data.newValue.android ]);
}
}
common.TabView.selectedColorProperty.metadata.onSetNativeValue = selectedColorPropertyChanged;
function tabsBackgroundColorPropertyChanged(data) {
var tabLayout = data.object._getAndroidTabView();
if (tabLayout && data.newValue instanceof color.Color) {
tabLayout.setBackgroundColor(data.newValue.android);
}
}
common.TabView.tabsBackgroundColorProperty.metadata.onSetNativeValue = tabsBackgroundColorPropertyChanged;
var TabView = function(_super) {
__extends(TabView, _super);
function TabView() {
_super.apply(this, arguments);
this._androidViewId = -1;
}
Object.defineProperty(TabView.prototype, "android", {
get: function() {
return this._grid;
},
enumerable: true,
configurable: true
});
TabView.prototype._createUI = function() {
trace.write("TabView._createUI(" + this + ");", common.traceCategory);
this._grid = new org.nativescript.widgets.GridLayout(this._context);
this._grid.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.auto));
this._grid.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.star));
this._tabLayout = new org.nativescript.widgets.TabLayout(this._context);
this._grid.addView(this._tabLayout);
this.setElevation();
var accentColor = utils.ad.resources.getPalleteColor(ACCENT_COLOR, this._context);
if (accentColor) {
this._tabLayout.setSelectedIndicatorColors([ accentColor ]);
}
var primaryColor = utils.ad.resources.getPalleteColor(PRIMARY_COLOR, this._context);
if (primaryColor) {
this._tabLayout.setBackgroundColor(primaryColor);
}
this._viewPager = new android.support.v4.view.ViewPager(this._context);
var lp = new org.nativescript.widgets.CommonLayoutParams();
lp.row = 1;
this._viewPager.setLayoutParams(lp);
this._grid.addView(this._viewPager);
if (this._androidViewId < 0) {
this._androidViewId = android.view.View.generateViewId();
}
this._grid.setId(this._androidViewId);
ensurePageChangedListenerClass();
this._pageChagedListener = new PageChangedListenerClass(this);
this._viewPager.addOnPageChangeListener(this._pageChagedListener);
};
TabView.prototype.setElevation = function() {
var compat = android.support.v4.view.ViewCompat;
if (compat.setElevation) {
var val = DEFAULT_ELEVATION * utils.layout.getDisplayDensity();
compat.setElevation(this._grid, val);
compat.setElevation(this._tabLayout, val);
}
};
TabView.prototype._onItemsPropertyChangedSetNativeValue = function(data) {
var _this = this;
trace.write("TabView._onItemsPropertyChangedSetNativeValue(" + data.oldValue + " ---> " + data.newValue + ");", common.traceCategory);
if (data.oldValue) {
var oldItems = data.oldValue;
oldItems.forEach(function(oldItem) {
oldItem._parent = null;
});
this._viewPager.setAdapter(null);
this._pagerAdapter = null;
this._tabLayout.setItems(null, null);
}
if (data.newValue) {
var items = data.newValue;
var tabItems = new Array();
items.forEach(function(item, idx, arr) {
if (types.isNullOrUndefined(item.view)) {
throw new Error("View of TabViewItem at index " + idx + " is " + item.view);
}
item._parent = _this;
if (item.view.parent !== _this) {
_this._addView(item.view, idx);
}
tabItems.push(_this.createTabItem(item));
});
ensurePagerAdapterClass();
this._pagerAdapter = new PagerAdapterClass(this, data.newValue);
this._viewPager.setAdapter(this._pagerAdapter);
this._tabLayout.setItems(tabItems, this._viewPager);
}
this._updateSelectedIndexOnItemsPropertyChanged(data.newValue);
};
TabView.prototype._updateTabForItem = function(item) {
if (this.items && this.items.length > 0) {
var index = this.items.indexOf(item);
if (index >= 0) {
this._tabLayout.updateItemAt(index, this.createTabItem(item));
}
}
};
TabView.prototype._onSelectedIndexPropertyChangedSetNativeValue = function(data) {
trace.write("TabView._onSelectedIndexPropertyChangedSetNativeValue(" + data.oldValue + " ---> " + data.newValue + ");", common.traceCategory);
_super.prototype._onSelectedIndexPropertyChangedSetNativeValue.call(this, data);
var index = data.newValue;
if (!types.isNullOrUndefined(index)) {
var viewPagerSelectedIndex = this._viewPager.getCurrentItem();
if (viewPagerSelectedIndex !== index) {
trace.write("TabView this._viewPager.setCurrentItem(" + index + ", true);", common.traceCategory);
this._viewPager.setCurrentItem(index, true);
}
}
var args = {
eventName: TabView.selectedIndexChangedEvent,
object: this,
oldIndex: data.oldValue,
newIndex: data.newValue
};
this.notify(args);
};
TabView.prototype.createTabItem = function(item) {
var result = new org.nativescript.widgets.TabItemSpec();
result.title = item.title;
if (item.iconSource) {
if (item.iconSource.indexOf(utils.RESOURCE_PREFIX) === 0) {
result.iconId = utils.ad.resources.getDrawableId(item.iconSource.substr(utils.RESOURCE_PREFIX.length));
} else {
ensureImageSource();
var is = imageSource.fromFileOrResource(item.iconSource);
if (is) {
result.iconDrawable = new android.graphics.drawable.BitmapDrawable(is.android);
}
}
}
return result;
};
TabView.prototype._getAndroidTabView = function() {
return this._tabLayout;
};
return TabView;
}(common.TabView);
exports.TabView = TabView;
var TabViewStyler = function() {
function TabViewStyler() {}
TabViewStyler.setColorProperty = function(v, newValue) {
var tab = v;
if (tab.items && tab.items.length > 0) {
var tabLayout = tab._getAndroidTabView();
for (var i = 0; i < tab.items.length; i++) {
tabLayout.getTextViewForItemAt(i).setTextColor(newValue);
}
}
};
TabViewStyler.resetColorProperty = function(v, nativeValue) {
if (types.isNullOrUndefined(nativeValue)) {
return;
}
var tab = v;
if (tab.items && tab.items.length > 0) {
var tabLayout = tab._getAndroidTabView();
for (var i = 0; i < tab.items.length; i++) {
tabLayout.getTextViewForItemAt(i).setTextColor(nativeValue);
}
}
};
TabViewStyler.getColorProperty = function(v) {
var tab = v;
var tv = tab._getAndroidTabView().getTextViewForItemAt(0);
if (tv) {
return tv.getTextColors().getDefaultColor();
} else {
return null;
}
};
TabViewStyler.setFontInternalProperty = function(v, newValue, nativeValue) {
var tab = v;
var fontValue = newValue;
var typeface = fontValue.getAndroidTypeface();
if (tab.items && tab.items.length > 0) {
var tabLayout = tab._getAndroidTabView();
for (var i = 0; i < tab.items.length; i++) {
var tv = tabLayout.getTextViewForItemAt(i);
if (typeface) {
tv.setTypeface(typeface);
} else {
tv.setTypeface(nativeValue.typeface);
}
if (fontValue.fontSize) {
tv.setTextSize(fontValue.fontSize);
} else {
tv.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
}
}
};
TabViewStyler.resetFontInternalProperty = function(v, nativeValue) {
var tab = v;
if (tab.items && tab.items.length > 0) {
var tabLayout = tab._getAndroidTabView();
for (var i = 0; i < tab.items.length; i++) {
var tv = tabLayout.getTextViewForItemAt(i);
tv.setTypeface(nativeValue.typeface);
tv.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
}
};
TabViewStyler.getNativeFontInternalValue = function(v) {
var tab = v;
var tv = tab._getAndroidTabView().getTextViewForItemAt(0);
if (tv) {
return {
typeface: tv.getTypeface(),
size: tv.getTextSize()
};
} else {
return null;
}
};
TabViewStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(TabViewStyler.setColorProperty, TabViewStyler.resetColorProperty, TabViewStyler.getColorProperty), "TabView");
style.registerHandler(style.fontInternalProperty, new style.StylePropertyChangedHandler(TabViewStyler.setFontInternalProperty, TabViewStyler.resetFontInternalProperty, TabViewStyler.getNativeFontInternalValue), "TabView");
};
return TabViewStyler;
}();
exports.TabViewStyler = TabViewStyler;
TabViewStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(11);
var dependencyObservable = __webpack_require__(32);
var proxy = __webpack_require__(48);
var types = __webpack_require__(13);
var trace = __webpack_require__(26);
var bindable = __webpack_require__(49);
var color = __webpack_require__(27);
exports.traceCategory = "TabView";
var TabViewItem = function(_super) {
__extends(TabViewItem, _super);
function TabViewItem() {
_super.apply(this, arguments);
this._title = "";
}
Object.defineProperty(TabViewItem.prototype, "title", {
get: function() {
return this._title;
},
set: function(value) {
if (this._title !== value) {
this._title = value;
this._update();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewItem.prototype, "view", {
get: function() {
return this._view;
},
set: function(value) {
if (this._view !== value) {
if (this._view) {
throw new Error("Changing the view of an already loaded TabViewItem is not currently supported.");
}
this._view = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewItem.prototype, "iconSource", {
get: function() {
return this._iconSource;
},
set: function(value) {
if (this._iconSource !== value) {
this._iconSource = value;
this._update();
}
},
enumerable: true,
configurable: true
});
TabViewItem.prototype._update = function() {};
return TabViewItem;
}(bindable.Bindable);
exports.TabViewItem = TabViewItem;
var TAB_VIEW = "TabView";
var ITEMS = "items";
var SELECTED_INDEX = "selectedIndex";
var SELECTED_COLOR = "selectedColor";
var TABS_BACKGROUND_COLOR = "tabsBackgroundColor";
var knownCollections;
(function(knownCollections) {
knownCollections.items = "items";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
var itemsProperty = new dependencyObservable.Property(ITEMS, TAB_VIEW, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout));
var selectedIndexProperty = new dependencyObservable.Property(SELECTED_INDEX, TAB_VIEW, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout));
var selectedColorProperty = new dependencyObservable.Property(SELECTED_COLOR, TAB_VIEW, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None));
var tabsBackgroundColorProperty = new dependencyObservable.Property(TABS_BACKGROUND_COLOR, TAB_VIEW, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None));
selectedIndexProperty.metadata.onSetNativeValue = function(data) {
var tabView = data.object;
tabView._onSelectedIndexPropertyChangedSetNativeValue(data);
};
itemsProperty.metadata.onSetNativeValue = function(data) {
var tabView = data.object;
tabView._onItemsPropertyChangedSetNativeValue(data);
};
var TabView = function(_super) {
__extends(TabView, _super);
function TabView() {
_super.apply(this, arguments);
}
TabView.prototype._addArrayFromBuilder = function(name, value) {
if (name === ITEMS) {
this.items = value;
}
};
Object.defineProperty(TabView.prototype, "items", {
get: function() {
return this._getValue(TabView.itemsProperty);
},
set: function(value) {
this._setValue(TabView.itemsProperty, value);
},
enumerable: true,
configurable: true
});
TabView.prototype._onItemsPropertyChangedSetNativeValue = function(data) {
trace.write("TabView.__onItemsPropertyChangedSetNativeValue(" + data.oldValue + " -> " + data.newValue + ");", exports.traceCategory);
if (data.oldValue) {
this._removeTabs(data.oldValue);
}
if (data.newValue) {
this._addTabs(data.newValue);
}
this._updateSelectedIndexOnItemsPropertyChanged(data.newValue);
};
TabView.prototype._updateSelectedIndexOnItemsPropertyChanged = function(newItems) {
trace.write("TabView._updateSelectedIndexOnItemsPropertyChanged(" + newItems + ");", exports.traceCategory);
var newItemsCount = 0;
if (newItems) {
newItemsCount = newItems.length;
}
if (newItemsCount === 0) {
this.selectedIndex = undefined;
} else if (types.isUndefined(this.selectedIndex) || this.selectedIndex >= newItemsCount) {
this.selectedIndex = 0;
}
};
TabView.prototype._removeTabs = function(oldItems) {
var i;
var length = oldItems.length;
var oldItem;
for (i = 0; i < length; i++) {
oldItem = oldItems[i];
if (!oldItem) {
throw new Error("TabViewItem at index " + i + " is undefined.");
}
if (!oldItem.view) {
throw new Error("TabViewItem at index " + i + " does not have a view.");
}
this._removeView(oldItem.view);
}
};
TabView.prototype._addTabs = function(newItems) {
var i;
var length = newItems.length;
var newItem;
for (i = 0; i < length; i++) {
newItem = newItems[i];
if (!newItem) {
throw new Error("TabViewItem at index " + i + " is undefined.");
}
if (!newItem.view) {
throw new Error("TabViewItem at index " + i + " does not have a view.");
}
this._addView(newItem.view, i);
}
};
Object.defineProperty(TabView.prototype, "selectedIndex", {
get: function() {
return this._getValue(TabView.selectedIndexProperty);
},
set: function(value) {
this._setValue(TabView.selectedIndexProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "selectedColor", {
get: function() {
return this._getValue(TabView.selectedColorProperty);
},
set: function(value) {
this._setValue(TabView.selectedColorProperty, value instanceof color.Color ? value : new color.Color(value));
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "tabsBackgroundColor", {
get: function() {
return this._getValue(TabView.tabsBackgroundColorProperty);
},
set: function(value) {
this._setValue(TabView.tabsBackgroundColorProperty, value instanceof color.Color ? value : new color.Color(value));
},
enumerable: true,
configurable: true
});
TabView.prototype._onSelectedIndexPropertyChangedSetNativeValue = function(data) {
var index = this.selectedIndex;
if (types.isUndefined(index)) {
return;
}
if (types.isDefined(this.items)) {
if (index < 0 || index >= this.items.length) {
this.selectedIndex = undefined;
throw new Error("SelectedIndex should be between [0, items.length)");
}
}
};
Object.defineProperty(TabView.prototype, "_selectedView", {
get: function() {
var _items = this.items;
var _selectedIndex = this.selectedIndex;
if (!_items) {
return undefined;
}
if (_items.length === 0) {
return undefined;
}
if (_selectedIndex === undefined) {
return undefined;
}
return _items[_selectedIndex].view;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "_childrenCount", {
get: function() {
if (this.items) {
return this.items.length;
}
return 0;
},
enumerable: true,
configurable: true
});
TabView.prototype._eachChildView = function(callback) {
var _items = this.items;
if (!_items) {
return;
}
var i;
var length = _items.length;
var item;
var retVal;
for (i = 0; i < length; i++) {
item = _items[i];
if (item.view) {
retVal = callback(item.view);
if (retVal === false) {
break;
}
}
}
};
TabView.prototype._onBindingContextChanged = function(oldValue, newValue) {
_super.prototype._onBindingContextChanged.call(this, oldValue, newValue);
if (this.items && this.items.length > 0) {
var i = 0;
var length = this.items.length;
for (;i < length; i++) {
this.items[i].bindingContext = newValue;
}
}
};
TabView.prototype._getAndroidTabView = function() {
return undefined;
};
TabView.prototype._updateIOSTabBarColorsAndFonts = function() {};
TabView.itemsProperty = itemsProperty;
TabView.selectedIndexProperty = selectedIndexProperty;
TabView.selectedColorProperty = selectedColorProperty;
TabView.tabsBackgroundColorProperty = tabsBackgroundColorProperty;
TabView.selectedIndexChangedEvent = "selectedIndexChanged";
return TabView;
}(view.View);
exports.TabView = TabView;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(266);
global.moduleMerge(common, exports);
var TextView = function(_super) {
__extends(TextView, _super);
function TextView() {
_super.apply(this, arguments);
}
TextView.prototype._configureEditText = function() {
this.android.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | android.text.InputType.TYPE_TEXT_FLAG_MULTI_LINE);
this.android.setGravity(android.view.Gravity.TOP | android.view.Gravity.LEFT);
};
return TextView;
}(common.TextView);
exports.TextView = TextView;
}, function(module, exports, __webpack_require__) {
var textBase = __webpack_require__(90);
var editableTextBase = __webpack_require__(93);
global.moduleMerge(textBase, exports);
var TextView = function(_super) {
__extends(TextView, _super);
function TextView(options) {
_super.call(this, options);
}
return TextView;
}(editableTextBase.EditableTextBase);
exports.TextView = TextView;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(268);
global.moduleMerge(common, exports);
var TimePicker = function(_super) {
__extends(TimePicker, _super);
function TimePicker() {
_super.apply(this, arguments);
}
Object.defineProperty(TimePicker.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
TimePicker.prototype._createUI = function() {
this._android = new android.widget.TimePicker(this._context);
var that = new WeakRef(this);
this._listener = new android.widget.TimePicker.OnTimeChangedListener({
get owner() {
return that.get();
},
onTimeChanged: function(picker, hour, minute) {
if (this.owner) {
var validTime = common.getValidTime(this.owner, hour, minute);
this.owner._setNativeValueSilently(validTime.hour, validTime.minute);
this.owner._onPropertyChangedFromNative(common.TimePicker.timeProperty, new Date(0, 0, 0, hour, minute));
}
}
});
this._android.setOnTimeChangedListener(this._listener);
var c = java.util.Calendar.getInstance();
if (this.hour === common.TimePicker.hourProperty.metadata.defaultValue) {
this.hour = c.get(java.util.Calendar.HOUR_OF_DAY);
}
if (this.minute === common.TimePicker.minuteProperty.metadata.defaultValue) {
this.minute = c.get(java.util.Calendar.MINUTE);
}
var validTime = common.getValidTime(this, this.hour, this.minute);
this._setNativeValueSilently(validTime.hour, validTime.minute);
};
TimePicker.prototype._setNativeValueSilently = function(hour, minute) {
if (this.android) {
this.android.setOnTimeChangedListener(null);
this.android.setCurrentHour(new java.lang.Integer(hour));
this.android.setCurrentMinute(new java.lang.Integer(minute));
this.minute = minute;
this.hour = hour;
this.android.setOnTimeChangedListener(this._listener);
}
};
TimePicker.prototype._setNativeTime = function() {
this._setNativeValueSilently(this.hour, this.minute);
};
return TimePicker;
}(common.TimePicker);
exports.TimePicker = TimePicker;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(32);
var proxy = __webpack_require__(48);
var view = __webpack_require__(11);
var types = __webpack_require__(13);
function isHourValid(value) {
return types.isNumber(value) && value >= 0 && value <= 23;
}
function isMinuteValid(value) {
return types.isNumber(value) && value >= 0 && value <= 59;
}
function isMinuteIntervalValid(value) {
return types.isNumber(value) && value >= 1 && value <= 30 && 60 % value === 0;
}
function getMinutes(hour) {
return hour * 60;
}
function isGreaterThanMinTime(picker, hour, minute) {
if (!types.isDefined(picker.minHour) || !types.isDefined(picker.minMinute)) {
return true;
}
return getMinutes(types.isDefined(hour) ? hour : picker.hour) + (types.isDefined(minute) ? minute : picker.minute) >= getMinutes(picker.minHour) + picker.minMinute;
}
exports.isGreaterThanMinTime = isGreaterThanMinTime;
function isLessThanMaxTime(picker, hour, minute) {
if (!types.isDefined(picker.maxHour) || !types.isDefined(picker.maxMinute)) {
return true;
}
return getMinutes(types.isDefined(hour) ? hour : picker.hour) + (types.isDefined(minute) ? minute : picker.minute) <= getMinutes(picker.maxHour) + picker.maxMinute;
}
exports.isLessThanMaxTime = isLessThanMaxTime;
function isValidTime(picker) {
return isGreaterThanMinTime(picker) && isLessThanMaxTime(picker);
}
exports.isValidTime = isValidTime;
function getValidTime(picker, hour, minute) {
if (picker.minuteInterval > 1) {
var minuteFloor = minute - minute % picker.minuteInterval;
minute = minuteFloor + (minute === minuteFloor + 1 ? picker.minuteInterval : 0);
if (minute === 60) {
hour++;
minute = 0;
}
}
var time = {
hour: hour,
minute: minute
};
if (!isGreaterThanMinTime(picker, hour, minute)) {
time = {
hour: picker.minHour,
minute: picker.minMinute
};
}
if (!isLessThanMaxTime(picker, hour, minute)) {
time = {
hour: picker.maxHour,
minute: picker.maxMinute
};
}
return time;
}
exports.getValidTime = getValidTime;
function toString(value) {
return value < 10 ? "0" + value : "" + value;
}
function getMinMaxTimeErrorMessage(picker) {
return "Min time: (" + toString(picker.minHour) + ":" + toString(picker.minMinute) + "), max time: (" + toString(picker.maxHour) + ":" + toString(picker.maxMinute) + ")";
}
function getErrorMessage(picker, propertyName, newValue) {
return propertyName + " property value (" + toString(newValue) + ":" + toString(picker.minute) + ") is not valid. " + getMinMaxTimeErrorMessage(picker) + ".";
}
function onHourPropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeTime();
if (picker.time) {
picker.time.setHours(picker.hour);
} else {
picker.time = new Date(0, 0, 0, picker.hour, picker.minute);
}
} else {
throw new Error(getErrorMessage(picker, "Hour", data.newValue));
}
}
function onMinutePropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeTime();
if (picker.time) {
picker.time.setMinutes(picker.minute);
} else {
picker.time = new Date(0, 0, 0, picker.hour, picker.minute);
}
} else {
throw new Error(getErrorMessage(picker, "Minute", data.newValue));
}
}
function onTimePropertyChanged(data) {
var picker = data.object;
var newTime = data.newValue;
picker.hour = newTime.getHours();
picker.minute = newTime.getMinutes();
if (isValidTime(picker)) {
picker._setNativeTime();
} else {
throw new Error(getErrorMessage(picker, "Time", data.newValue));
}
}
function onMinMinutePropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeMinTime();
} else {
throw new Error(getErrorMessage(picker, "Minute", data.newValue));
}
}
function onMaxMinutePropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeMaxTime();
} else {
throw new Error(getErrorMessage(picker, "Minute", data.newValue));
}
}
function onMinHourPropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeMinTime();
} else {
throw new Error(getErrorMessage(picker, "Hour", data.newValue));
}
}
function onMaxHourPropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeMaxTime();
} else {
throw new Error(getErrorMessage(picker, "Hour", data.newValue));
}
}
function onMinuteIntervalPropertyChanged(data) {
var picker = data.object;
picker._setNativeMinuteIntervalTime();
}
var TimePicker = function(_super) {
__extends(TimePicker, _super);
function TimePicker() {
_super.call(this);
}
Object.defineProperty(TimePicker.prototype, "hour", {
get: function() {
return this._getValue(TimePicker.hourProperty);
},
set: function(value) {
this._setValue(TimePicker.hourProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "minute", {
get: function() {
return this._getValue(TimePicker.minuteProperty);
},
set: function(value) {
this._setValue(TimePicker.minuteProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "time", {
get: function() {
return this._getValue(TimePicker.timeProperty);
},
set: function(value) {
this._setValue(TimePicker.timeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "minuteInterval", {
get: function() {
return this._getValue(TimePicker.minuteIntervalProperty);
},
set: function(value) {
this._setValue(TimePicker.minuteIntervalProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "maxHour", {
get: function() {
return this._getValue(TimePicker.maxHourProperty);
},
set: function(value) {
this._setValue(TimePicker.maxHourProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "maxMinute", {
get: function() {
return this._getValue(TimePicker.maxMinuteProperty);
},
set: function(value) {
this._setValue(TimePicker.maxMinuteProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "minHour", {
get: function() {
return this._getValue(TimePicker.minHourProperty);
},
set: function(value) {
this._setValue(TimePicker.minHourProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "minMinute", {
get: function() {
return this._getValue(TimePicker.minMinuteProperty);
},
set: function(value) {
this._setValue(TimePicker.minMinuteProperty, value);
},
enumerable: true,
configurable: true
});
TimePicker.prototype._setNativeTime = function() {};
TimePicker.prototype._setNativeMinTime = function() {};
TimePicker.prototype._setNativeMaxTime = function() {};
TimePicker.prototype._setNativeMinuteIntervalTime = function() {};
TimePicker.hourProperty = new dependencyObservable.Property("hour", "TimePicker", new proxy.PropertyMetadata(0, dependencyObservable.PropertyMetadataSettings.None, onHourPropertyChanged, isHourValid));
TimePicker.minHourProperty = new dependencyObservable.Property("minHour", "TimePicker", new proxy.PropertyMetadata(0, dependencyObservable.PropertyMetadataSettings.None, onMinHourPropertyChanged, isHourValid));
TimePicker.maxHourProperty = new dependencyObservable.Property("maxHour", "TimePicker", new proxy.PropertyMetadata(23, dependencyObservable.PropertyMetadataSettings.None, onMaxHourPropertyChanged, isHourValid));
TimePicker.minuteProperty = new dependencyObservable.Property("minute", "TimePicker", new proxy.PropertyMetadata(0, dependencyObservable.PropertyMetadataSettings.None, onMinutePropertyChanged, isMinuteValid));
TimePicker.minMinuteProperty = new dependencyObservable.Property("minMinute", "TimePicker", new proxy.PropertyMetadata(0, dependencyObservable.PropertyMetadataSettings.None, onMinMinutePropertyChanged, isMinuteValid));
TimePicker.maxMinuteProperty = new dependencyObservable.Property("maxMinute", "TimePicker", new proxy.PropertyMetadata(59, dependencyObservable.PropertyMetadataSettings.None, onMaxMinutePropertyChanged, isMinuteValid));
TimePicker.minuteIntervalProperty = new dependencyObservable.Property("minuteInterval", "TimePicker", new proxy.PropertyMetadata(1, dependencyObservable.PropertyMetadataSettings.None, onMinuteIntervalPropertyChanged, isMinuteIntervalValid));
TimePicker.timeProperty = new dependencyObservable.Property("time", "TimePicker", new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None, onTimePropertyChanged, isValidTime));
return TimePicker;
}(view.View);
exports.TimePicker = TimePicker;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(270);
var trace = __webpack_require__(26);
global.moduleMerge(common, exports);
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(18);
}
}
var WebViewClientClass;
function ensureWebViewClientClass() {
if (WebViewClientClass) {
return;
}
var WebViewClientClassInner = function(_super) {
__extends(WebViewClientClassInner, _super);
function WebViewClientClassInner(view) {
_super.call(this);
this._view = view;
return global.__native(this);
}
WebViewClientClassInner.prototype.shouldOverrideUrlLoading = function(view, url) {
trace.write("WebViewClientClass.shouldOverrideUrlLoading(" + url + ")", trace.categories.Debug);
return false;
};
WebViewClientClassInner.prototype.onPageStarted = function(view, url, favicon) {
_super.prototype.onPageStarted.call(this, view, url, favicon);
if (this._view) {
trace.write("WebViewClientClass.onPageStarted(" + url + ", " + favicon + ")", trace.categories.Debug);
this._view._onLoadStarted(url, common.WebView.navigationTypes[common.WebView.navigationTypes.indexOf("linkClicked")]);
}
};
WebViewClientClassInner.prototype.onPageFinished = function(view, url) {
_super.prototype.onPageFinished.call(this, view, url);
if (this._view) {
trace.write("WebViewClientClass.onPageFinished(" + url + ")", trace.categories.Debug);
this._view._onLoadFinished(url, undefined);
}
};
WebViewClientClassInner.prototype.onReceivedError = function() {
var view = arguments[0];
if (arguments.length === 4) {
var errorCode = arguments[1];
var description = arguments[2];
var failingUrl = arguments[3];
_super.prototype.onReceivedError.call(this, view, errorCode, description, failingUrl);
if (this._view) {
trace.write("WebViewClientClass.onReceivedError(" + errorCode + ", " + description + ", " + failingUrl + ")", trace.categories.Debug);
this._view._onLoadFinished(failingUrl, description + "(" + errorCode + ")");
}
} else {
var request = arguments[1];
var error = arguments[2];
_super.prototype.onReceivedError.call(this, view, request, error);
if (this._view) {
trace.write("WebViewClientClass.onReceivedError(" + error.getErrorCode() + ", " + error.getDescription() + ", " + (error.getUrl && error.getUrl()) + ")", trace.categories.Debug);
this._view._onLoadFinished(error.getUrl && error.getUrl(), error.getDescription() + "(" + error.getErrorCode() + ")");
}
}
};
return WebViewClientClassInner;
}(android.webkit.WebViewClient);
WebViewClientClass = WebViewClientClassInner;
}
var WebView = function(_super) {
__extends(WebView, _super);
function WebView() {
_super.call(this);
ensureWebViewClientClass();
this._webViewClient = new WebViewClientClass(this);
}
Object.defineProperty(WebView.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
WebView.prototype._createUI = function() {
this._android = new android.webkit.WebView(this._context);
this._android.getSettings().setJavaScriptEnabled(true);
this._android.getSettings().setBuiltInZoomControls(true);
this._android.setWebViewClient(this._webViewClient);
};
WebView.prototype._loadUrl = function(url) {
if (!this._android) {
return;
}
trace.write("WebView._loadUrl(" + url + ")", trace.categories.Debug);
this._android.stopLoading();
this._android.loadUrl(url);
};
WebView.prototype._loadFileOrResource = function(path, content) {
if (!this._android) {
return;
}
var baseUrl = "file:///" + path.substring(0, path.lastIndexOf("/") + 1);
this._android.loadDataWithBaseURL(baseUrl, content, "text/html", "utf-8", null);
};
WebView.prototype._loadHttp = function(src) {
if (!this._android) {
return;
}
this._android.loadUrl(src);
};
WebView.prototype._loadData = function(src) {
if (!this._android) {
return;
}
ensureFS();
var baseUrl = "file:///" + fs.knownFolders.currentApp().path + "/";
this._android.loadDataWithBaseURL(baseUrl, src, "text/html", "utf-8", null);
};
Object.defineProperty(WebView.prototype, "canGoBack", {
get: function() {
return this._android.canGoBack();
},
enumerable: true,
configurable: true
});
WebView.prototype.stopLoading = function() {
if (this._android) {
this._android.stopLoading();
}
};
Object.defineProperty(WebView.prototype, "canGoForward", {
get: function() {
return this._android.canGoForward();
},
enumerable: true,
configurable: true
});
WebView.prototype.goBack = function() {
this._android.goBack();
};
WebView.prototype.goForward = function() {
this._android.goForward();
};
WebView.prototype.reload = function() {
this._android.reload();
};
return WebView;
}(common.WebView);
exports.WebView = WebView;
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(11);
var dependencyObservable = __webpack_require__(32);
var proxy = __webpack_require__(48);
var utils = __webpack_require__(21);
var trace = __webpack_require__(26);
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(18);
}
}
var urlProperty = new dependencyObservable.Property("url", "WebView", new proxy.PropertyMetadata(""));
function onUrlPropertyChanged(data) {
var webView = data.object;
if (webView._suspendLoading) {
return;
}
webView._loadUrl(data.newValue);
}
urlProperty.metadata.onSetNativeValue = onUrlPropertyChanged;
var srcProperty = new dependencyObservable.Property("src", "WebView", new proxy.PropertyMetadata(""));
function onSrcPropertyChanged(data) {
var webView = data.object;
if (webView._suspendLoading) {
return;
}
webView.stopLoading();
var src = data.newValue;
trace.write("WebView._loadSrc(" + src + ")", trace.categories.Debug);
if (utils.isFileOrResourcePath(src)) {
ensureFS();
if (src.indexOf("~/") === 0) {
src = fs.path.join(fs.knownFolders.currentApp().path, src.replace("~/", ""));
}
if (fs.File.exists(src)) {
var file = fs.File.fromPath(src);
var content = file.readTextSync();
webView._loadFileOrResource(src, content);
}
} else if (src.toLowerCase().indexOf("http://") === 0 || src.toLowerCase().indexOf("https://") === 0) {
webView._loadHttp(src);
} else {
webView._loadData(src);
}
}
srcProperty.metadata.onSetNativeValue = onSrcPropertyChanged;
var WebView = function(_super) {
__extends(WebView, _super);
function WebView() {
_super.call(this);
}
Object.defineProperty(WebView.prototype, "url", {
get: function() {
return this._getValue(WebView.urlProperty);
},
set: function(value) {
this._setValue(WebView.urlProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(WebView.prototype, "src", {
get: function() {
return this._getValue(WebView.srcProperty);
},
set: function(value) {
this._setValue(WebView.srcProperty, value);
},
enumerable: true,
configurable: true
});
WebView.prototype._onLoadFinished = function(url, error) {
this._suspendLoading = true;
this.url = url;
this._suspendLoading = false;
var args = {
eventName: WebView.loadFinishedEvent,
object: this,
url: url,
navigationType: undefined,
error: error
};
this.notify(args);
};
WebView.prototype._onLoadStarted = function(url, navigationType) {
var args = {
eventName: WebView.loadStartedEvent,
object: this,
url: url,
navigationType: navigationType,
error: undefined
};
this.notify(args);
};
Object.defineProperty(WebView.prototype, "canGoBack", {
get: function() {
throw new Error("This member is abstract.");
},
enumerable: true,
configurable: true
});
Object.defineProperty(WebView.prototype, "canGoForward", {
get: function() {
throw new Error("This member is abstract.");
},
enumerable: true,
configurable: true
});
WebView.loadStartedEvent = "loadStarted";
WebView.loadFinishedEvent = "loadFinished";
WebView.navigationTypes = [ "linkClicked", "formSubmitted", "backForward", "reload", "formResubmitted", "other" ];
WebView.urlProperty = urlProperty;
WebView.srcProperty = srcProperty;
return WebView;
}(view.View);
exports.WebView = WebView;
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(21);
var common = __webpack_require__(272);
var enums_1 = __webpack_require__(23);
global.moduleMerge(common, exports);
function setNativeOrientationProperty(data) {
var wrapLayout = data.object;
var nativeView = wrapLayout._nativeView;
nativeView.setOrientation(data.newValue === enums_1.Orientation.vertical ? org.nativescript.widgets.Orientation.vertical : org.nativescript.widgets.Orientation.horizontal);
}
function setNativeItemWidthProperty(data) {
var wrapLayout = data.object;
var nativeView = wrapLayout._nativeView;
nativeView.setItemWidth(data.newValue * utils.layout.getDisplayDensity());
}
function setNativeItemHeightProperty(data) {
var wrapLayout = data.object;
var nativeView = wrapLayout._nativeView;
nativeView.setItemHeight(data.newValue * utils.layout.getDisplayDensity());
}
common.WrapLayout.orientationProperty.metadata.onSetNativeValue = setNativeOrientationProperty;
common.WrapLayout.itemWidthProperty.metadata.onSetNativeValue = setNativeItemWidthProperty;
common.WrapLayout.itemHeightProperty.metadata.onSetNativeValue = setNativeItemHeightProperty;
var WrapLayout = function(_super) {
__extends(WrapLayout, _super);
function WrapLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(WrapLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrapLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
WrapLayout.prototype._createUI = function() {
this._layout = new org.nativescript.widgets.WrapLayout(this._context);
};
return WrapLayout;
}(common.WrapLayout);
exports.WrapLayout = WrapLayout;
}, function(module, exports, __webpack_require__) {
var platform = __webpack_require__(39);
var layout_base_1 = __webpack_require__(73);
var enums_1 = __webpack_require__(23);
var proxy_1 = __webpack_require__(48);
var dependency_observable_1 = __webpack_require__(32);
var AffectsLayout = platform.device.os === platform.platformNames.android ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
function isWidthHeightValid(value) {
return value >= 0 && value !== Number.POSITIVE_INFINITY;
}
function isValidOrientation(value) {
return value === enums_1.Orientation.vertical || value === enums_1.Orientation.horizontal;
}
var WrapLayout = function(_super) {
__extends(WrapLayout, _super);
function WrapLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(WrapLayout.prototype, "orientation", {
get: function() {
return this._getValue(WrapLayout.orientationProperty);
},
set: function(value) {
this._setValue(WrapLayout.orientationProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrapLayout.prototype, "itemWidth", {
get: function() {
return this._getValue(WrapLayout.itemWidthProperty);
},
set: function(value) {
this._setValue(WrapLayout.itemWidthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrapLayout.prototype, "itemHeight", {
get: function() {
return this._getValue(WrapLayout.itemHeightProperty);
},
set: function(value) {
this._setValue(WrapLayout.itemHeightProperty, value);
},
enumerable: true,
configurable: true
});
WrapLayout.orientationProperty = new dependency_observable_1.Property("orientation", "WrapLayout", new proxy_1.PropertyMetadata(enums_1.Orientation.horizontal, AffectsLayout, undefined, isValidOrientation));
WrapLayout.itemWidthProperty = new dependency_observable_1.Property("itemWidth", "WrapLayout", new proxy_1.PropertyMetadata(0, AffectsLayout, undefined, isWidthHeightValid));
WrapLayout.itemHeightProperty = new dependency_observable_1.Property("itemHeight", "WrapLayout", new proxy_1.PropertyMetadata(0, AffectsLayout, undefined, isWidthHeightValid));
return WrapLayout;
}(layout_base_1.LayoutBase);
exports.WrapLayout = WrapLayout;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var parse5_adapter_1 = __webpack_require__(274);
var dom_adapter_1 = __webpack_require__(216);
var NativeScriptDomAdapter = function(_super) {
__extends(NativeScriptDomAdapter, _super);
function NativeScriptDomAdapter() {
_super.apply(this, arguments);
}
NativeScriptDomAdapter.makeCurrent = function() {
dom_adapter_1.setRootDomAdapter(new NativeScriptDomAdapter());
};
NativeScriptDomAdapter.prototype.getXHR = function() {
console.log("getXHR!");
return null;
};
NativeScriptDomAdapter.prototype.hasProperty = function(element, name) {
return true;
};
return NativeScriptDomAdapter;
}(parse5_adapter_1.Parse5DomAdapter);
exports.NativeScriptDomAdapter = NativeScriptDomAdapter;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var parse5 = __webpack_require__(275);
var parser = new parse5.Parser(parse5.TreeAdapters.htmlparser2);
var serializer = new parse5.Serializer(parse5.TreeAdapters.htmlparser2);
var treeAdapter = parser.treeAdapter;
var collection_1 = __webpack_require__(115);
var common_dom_1 = __webpack_require__(296);
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var selector_1 = __webpack_require__(301);
var xhr_1 = __webpack_require__(302);
var _attrToPropMap = {
"class": "className",
innerHtml: "innerHTML",
readonly: "readOnly",
tabindex: "tabIndex"
};
var defDoc = null;
var mapProps = [ "attribs", "x-attribsNamespace", "x-attribsPrefix" ];
function _notImplemented(methodName) {
return new exceptions_1.BaseException("This method is not implemented in Parse5DomAdapter: " + methodName);
}
var Parse5DomAdapter = function(_super) {
__extends(Parse5DomAdapter, _super);
function Parse5DomAdapter() {
_super.apply(this, arguments);
}
Parse5DomAdapter.makeCurrent = function() {
common_dom_1.setRootDomAdapter(new Parse5DomAdapter());
};
Parse5DomAdapter.prototype.hasProperty = function(element, name) {
return _HTMLElementPropertyList.indexOf(name) > -1;
};
Parse5DomAdapter.prototype.setProperty = function(el, name, value) {
if (name === "innerHTML") {
this.setInnerHTML(el, value);
} else if (name === "className") {
el.attribs["class"] = el.className = value;
} else {
el[name] = value;
}
};
Parse5DomAdapter.prototype.getProperty = function(el, name) {
return el[name];
};
Parse5DomAdapter.prototype.logError = function(error) {
console.error(error);
};
Parse5DomAdapter.prototype.log = function(error) {
console.log(error);
};
Parse5DomAdapter.prototype.logGroup = function(error) {
console.error(error);
};
Parse5DomAdapter.prototype.logGroupEnd = function() {};
Parse5DomAdapter.prototype.getXHR = function() {
return xhr_1.XHR;
};
Object.defineProperty(Parse5DomAdapter.prototype, "attrToPropMap", {
get: function() {
return _attrToPropMap;
},
enumerable: true,
configurable: true
});
Parse5DomAdapter.prototype.query = function(selector) {
throw _notImplemented("query");
};
Parse5DomAdapter.prototype.querySelector = function(el, selector) {
return this.querySelectorAll(el, selector)[0];
};
Parse5DomAdapter.prototype.querySelectorAll = function(el, selector) {
var _this = this;
var res = [];
var _recursive = function(result, node, selector, matcher) {
var cNodes = node.childNodes;
if (cNodes && cNodes.length > 0) {
for (var i = 0; i < cNodes.length; i++) {
var childNode = cNodes[i];
if (_this.elementMatches(childNode, selector, matcher)) {
result.push(childNode);
}
_recursive(result, childNode, selector, matcher);
}
}
};
var matcher = new selector_1.SelectorMatcher();
matcher.addSelectables(selector_1.CssSelector.parse(selector));
_recursive(res, el, selector, matcher);
return res;
};
Parse5DomAdapter.prototype.elementMatches = function(node, selector, matcher) {
if (matcher === void 0) {
matcher = null;
}
if (this.isElementNode(node) && selector === "*") {
return true;
}
var result = false;
if (selector && selector.charAt(0) == "#") {
result = this.getAttribute(node, "id") == selector.substring(1);
} else if (selector) {
var result = false;
if (matcher == null) {
matcher = new selector_1.SelectorMatcher();
matcher.addSelectables(selector_1.CssSelector.parse(selector));
}
var cssSelector = new selector_1.CssSelector();
cssSelector.setElement(this.tagName(node));
if (node.attribs) {
for (var attrName in node.attribs) {
cssSelector.addAttribute(attrName, node.attribs[attrName]);
}
}
var classList = this.classList(node);
for (var i = 0; i < classList.length; i++) {
cssSelector.addClassName(classList[i]);
}
matcher.match(cssSelector, function(selector, cb) {
result = true;
});
}
return result;
};
Parse5DomAdapter.prototype.on = function(el, evt, listener) {
var listenersMap = el._eventListenersMap;
if (lang_1.isBlank(listenersMap)) {
var listenersMap = collection_1.StringMapWrapper.create();
el._eventListenersMap = listenersMap;
}
var listeners = collection_1.StringMapWrapper.get(listenersMap, evt);
if (lang_1.isBlank(listeners)) {
listeners = [];
}
listeners.push(listener);
collection_1.StringMapWrapper.set(listenersMap, evt, listeners);
};
Parse5DomAdapter.prototype.onAndCancel = function(el, evt, listener) {
this.on(el, evt, listener);
return function() {
collection_1.ListWrapper.remove(collection_1.StringMapWrapper.get(el._eventListenersMap, evt), listener);
};
};
Parse5DomAdapter.prototype.dispatchEvent = function(el, evt) {
if (lang_1.isBlank(evt.target)) {
evt.target = el;
}
if (lang_1.isPresent(el._eventListenersMap)) {
var listeners = collection_1.StringMapWrapper.get(el._eventListenersMap, evt.type);
if (lang_1.isPresent(listeners)) {
for (var i = 0; i < listeners.length; i++) {
listeners[i](evt);
}
}
}
if (lang_1.isPresent(el.parent)) {
this.dispatchEvent(el.parent, evt);
}
if (lang_1.isPresent(el._window)) {
this.dispatchEvent(el._window, evt);
}
};
Parse5DomAdapter.prototype.createMouseEvent = function(eventType) {
return this.createEvent(eventType);
};
Parse5DomAdapter.prototype.createEvent = function(eventType) {
var evt = {
type: eventType,
defaultPrevented: false,
preventDefault: function() {
evt.defaultPrevented = true;
}
};
return evt;
};
Parse5DomAdapter.prototype.preventDefault = function(evt) {
evt.returnValue = false;
};
Parse5DomAdapter.prototype.isPrevented = function(evt) {
return lang_1.isPresent(evt.returnValue) && !evt.returnValue;
};
Parse5DomAdapter.prototype.getInnerHTML = function(el) {
return serializer.serialize(this.templateAwareRoot(el));
};
Parse5DomAdapter.prototype.getOuterHTML = function(el) {
serializer.html = "";
serializer._serializeElement(el);
return serializer.html;
};
Parse5DomAdapter.prototype.nodeName = function(node) {
return node.tagName;
};
Parse5DomAdapter.prototype.nodeValue = function(node) {
return node.nodeValue;
};
Parse5DomAdapter.prototype.type = function(node) {
throw _notImplemented("type");
};
Parse5DomAdapter.prototype.content = function(node) {
return node.childNodes[0];
};
Parse5DomAdapter.prototype.firstChild = function(el) {
return el.firstChild;
};
Parse5DomAdapter.prototype.nextSibling = function(el) {
return el.nextSibling;
};
Parse5DomAdapter.prototype.parentElement = function(el) {
return el.parent;
};
Parse5DomAdapter.prototype.childNodes = function(el) {
return el.childNodes;
};
Parse5DomAdapter.prototype.childNodesAsList = function(el) {
var childNodes = el.childNodes;
var res = collection_1.ListWrapper.createFixedSize(childNodes.length);
for (var i = 0; i < childNodes.length; i++) {
res[i] = childNodes[i];
}
return res;
};
Parse5DomAdapter.prototype.clearNodes = function(el) {
while (el.childNodes.length > 0) {
this.remove(el.childNodes[0]);
}
};
Parse5DomAdapter.prototype.appendChild = function(el, node) {
this.remove(node);
treeAdapter.appendChild(this.templateAwareRoot(el), node);
};
Parse5DomAdapter.prototype.removeChild = function(el, node) {
if (collection_1.ListWrapper.contains(el.childNodes, node)) {
this.remove(node);
}
};
Parse5DomAdapter.prototype.remove = function(el) {
var parent = el.parent;
if (parent) {
var index = parent.childNodes.indexOf(el);
parent.childNodes.splice(index, 1);
}
var prev = el.previousSibling;
var next = el.nextSibling;
if (prev) {
prev.next = next;
}
if (next) {
next.prev = prev;
}
el.prev = null;
el.next = null;
el.parent = null;
return el;
};
Parse5DomAdapter.prototype.insertBefore = function(el, node) {
this.remove(node);
treeAdapter.insertBefore(el.parent, node, el);
};
Parse5DomAdapter.prototype.insertAllBefore = function(el, nodes) {
var _this = this;
nodes.forEach(function(n) {
return _this.insertBefore(el, n);
});
};
Parse5DomAdapter.prototype.insertAfter = function(el, node) {
if (el.nextSibling) {
this.insertBefore(el.nextSibling, node);
} else {
this.appendChild(el.parent, node);
}
};
Parse5DomAdapter.prototype.setInnerHTML = function(el, value) {
this.clearNodes(el);
var content = parser.parseFragment(value);
for (var i = 0; i < content.childNodes.length; i++) {
treeAdapter.appendChild(el, content.childNodes[i]);
}
};
Parse5DomAdapter.prototype.getText = function(el, isRecursive) {
if (this.isTextNode(el)) {
return el.data;
} else if (this.isCommentNode(el)) {
return isRecursive ? "" : el.data;
} else if (lang_1.isBlank(el.childNodes) || el.childNodes.length == 0) {
return "";
} else {
var textContent = "";
for (var i = 0; i < el.childNodes.length; i++) {
textContent += this.getText(el.childNodes[i], true);
}
return textContent;
}
};
Parse5DomAdapter.prototype.setText = function(el, value) {
if (this.isTextNode(el) || this.isCommentNode(el)) {
el.data = value;
} else {
this.clearNodes(el);
if (value !== "") treeAdapter.insertText(el, value);
}
};
Parse5DomAdapter.prototype.getValue = function(el) {
return el.value;
};
Parse5DomAdapter.prototype.setValue = function(el, value) {
el.value = value;
};
Parse5DomAdapter.prototype.getChecked = function(el) {
return el.checked;
};
Parse5DomAdapter.prototype.setChecked = function(el, value) {
el.checked = value;
};
Parse5DomAdapter.prototype.createComment = function(text) {
return treeAdapter.createCommentNode(text);
};
Parse5DomAdapter.prototype.createTemplate = function(html) {
var template = treeAdapter.createElement("template", "http://www.w3.org/1999/xhtml", []);
var content = parser.parseFragment(html);
treeAdapter.appendChild(template, content);
return template;
};
Parse5DomAdapter.prototype.createElement = function(tagName) {
return treeAdapter.createElement(tagName, "http://www.w3.org/1999/xhtml", []);
};
Parse5DomAdapter.prototype.createElementNS = function(ns, tagName) {
return treeAdapter.createElement(tagName, ns, []);
};
Parse5DomAdapter.prototype.createTextNode = function(text) {
var t = this.createComment(text);
t.type = "text";
return t;
};
Parse5DomAdapter.prototype.createScriptTag = function(attrName, attrValue) {
return treeAdapter.createElement("script", "http://www.w3.org/1999/xhtml", [ {
name: attrName,
value: attrValue
} ]);
};
Parse5DomAdapter.prototype.createStyleElement = function(css) {
var style = this.createElement("style");
this.setText(style, css);
return style;
};
Parse5DomAdapter.prototype.createShadowRoot = function(el) {
el.shadowRoot = treeAdapter.createDocumentFragment();
el.shadowRoot.parent = el;
return el.shadowRoot;
};
Parse5DomAdapter.prototype.getShadowRoot = function(el) {
return el.shadowRoot;
};
Parse5DomAdapter.prototype.getHost = function(el) {
return el.host;
};
Parse5DomAdapter.prototype.getDistributedNodes = function(el) {
throw _notImplemented("getDistributedNodes");
};
Parse5DomAdapter.prototype.clone = function(node) {
var _recursive = function(node) {
var nodeClone = Object.create(Object.getPrototypeOf(node));
for (var prop in node) {
var desc = Object.getOwnPropertyDescriptor(node, prop);
if (desc && "value" in desc && typeof desc.value !== "object") {
nodeClone[prop] = node[prop];
}
}
nodeClone.parent = null;
nodeClone.prev = null;
nodeClone.next = null;
nodeClone.children = null;
mapProps.forEach(function(mapName) {
if (lang_1.isPresent(node[mapName])) {
nodeClone[mapName] = {};
for (var prop in node[mapName]) {
nodeClone[mapName][prop] = node[mapName][prop];
}
}
});
var cNodes = node.children;
if (cNodes) {
var cNodesClone = new Array(cNodes.length);
for (var i = 0; i < cNodes.length; i++) {
var childNode = cNodes[i];
var childNodeClone = _recursive(childNode);
cNodesClone[i] = childNodeClone;
if (i > 0) {
childNodeClone.prev = cNodesClone[i - 1];
cNodesClone[i - 1].next = childNodeClone;
}
childNodeClone.parent = nodeClone;
}
nodeClone.children = cNodesClone;
}
return nodeClone;
};
return _recursive(node);
};
Parse5DomAdapter.prototype.getElementsByClassName = function(element, name) {
return this.querySelectorAll(element, "." + name);
};
Parse5DomAdapter.prototype.getElementsByTagName = function(element, name) {
throw _notImplemented("getElementsByTagName");
};
Parse5DomAdapter.prototype.classList = function(element) {
var classAttrValue = null;
var attributes = element.attribs;
if (attributes && attributes.hasOwnProperty("class")) {
classAttrValue = attributes["class"];
}
return classAttrValue ? classAttrValue.trim().split(/\s+/g) : [];
};
Parse5DomAdapter.prototype.addClass = function(element, className) {
var classList = this.classList(element);
var index = classList.indexOf(className);
if (index == -1) {
classList.push(className);
element.attribs["class"] = element.className = classList.join(" ");
}
};
Parse5DomAdapter.prototype.removeClass = function(element, className) {
var classList = this.classList(element);
var index = classList.indexOf(className);
if (index > -1) {
classList.splice(index, 1);
element.attribs["class"] = element.className = classList.join(" ");
}
};
Parse5DomAdapter.prototype.hasClass = function(element, className) {
return collection_1.ListWrapper.contains(this.classList(element), className);
};
Parse5DomAdapter.prototype.hasStyle = function(element, styleName, styleValue) {
if (styleValue === void 0) {
styleValue = null;
}
var value = this.getStyle(element, styleName) || "";
return styleValue ? value == styleValue : value.length > 0;
};
Parse5DomAdapter.prototype._readStyleAttribute = function(element) {
var styleMap = {};
var attributes = element.attribs;
if (attributes && attributes.hasOwnProperty("style")) {
var styleAttrValue = attributes["style"];
var styleList = styleAttrValue.split(/;+/g);
for (var i = 0; i < styleList.length; i++) {
if (styleList[i].length > 0) {
var elems = styleList[i].split(/:+/g);
styleMap[elems[0].trim()] = elems[1].trim();
}
}
}
return styleMap;
};
Parse5DomAdapter.prototype._writeStyleAttribute = function(element, styleMap) {
var styleAttrValue = "";
for (var key in styleMap) {
var newValue = styleMap[key];
if (newValue && newValue.length > 0) {
styleAttrValue += key + ":" + styleMap[key] + ";";
}
}
element.attribs["style"] = styleAttrValue;
};
Parse5DomAdapter.prototype.setStyle = function(element, styleName, styleValue) {
var styleMap = this._readStyleAttribute(element);
styleMap[styleName] = styleValue;
this._writeStyleAttribute(element, styleMap);
};
Parse5DomAdapter.prototype.removeStyle = function(element, styleName) {
this.setStyle(element, styleName, null);
};
Parse5DomAdapter.prototype.getStyle = function(element, styleName) {
var styleMap = this._readStyleAttribute(element);
return styleMap.hasOwnProperty(styleName) ? styleMap[styleName] : "";
};
Parse5DomAdapter.prototype.tagName = function(element) {
return element.tagName == "style" ? "STYLE" : element.tagName;
};
Parse5DomAdapter.prototype.attributeMap = function(element) {
var res = new Map();
var elAttrs = treeAdapter.getAttrList(element);
for (var i = 0; i < elAttrs.length; i++) {
var attrib = elAttrs[i];
res.set(attrib.name, attrib.value);
}
return res;
};
Parse5DomAdapter.prototype.hasAttribute = function(element, attribute) {
return element.attribs && element.attribs.hasOwnProperty(attribute);
};
Parse5DomAdapter.prototype.hasAttributeNS = function(element, ns, attribute) {
throw "not implemented";
};
Parse5DomAdapter.prototype.getAttribute = function(element, attribute) {
return element.attribs && element.attribs.hasOwnProperty(attribute) ? element.attribs[attribute] : null;
};
Parse5DomAdapter.prototype.getAttributeNS = function(element, ns, attribute) {
throw "not implemented";
};
Parse5DomAdapter.prototype.setAttribute = function(element, attribute, value) {
if (attribute) {
element.attribs[attribute] = value;
if (attribute === "class") {
element.className = value;
}
}
};
Parse5DomAdapter.prototype.setAttributeNS = function(element, ns, attribute, value) {
throw "not implemented";
};
Parse5DomAdapter.prototype.removeAttribute = function(element, attribute) {
if (attribute) {
collection_1.StringMapWrapper.delete(element.attribs, attribute);
}
};
Parse5DomAdapter.prototype.removeAttributeNS = function(element, ns, name) {
throw "not implemented";
};
Parse5DomAdapter.prototype.templateAwareRoot = function(el) {
return this.isTemplateElement(el) ? this.content(el) : el;
};
Parse5DomAdapter.prototype.createHtmlDocument = function() {
var newDoc = treeAdapter.createDocument();
newDoc.title = "fake title";
var head = treeAdapter.createElement("head", null, []);
var body = treeAdapter.createElement("body", "http://www.w3.org/1999/xhtml", []);
this.appendChild(newDoc, head);
this.appendChild(newDoc, body);
collection_1.StringMapWrapper.set(newDoc, "head", head);
collection_1.StringMapWrapper.set(newDoc, "body", body);
collection_1.StringMapWrapper.set(newDoc, "_window", collection_1.StringMapWrapper.create());
return newDoc;
};
Parse5DomAdapter.prototype.defaultDoc = function() {
if (defDoc === null) {
defDoc = this.createHtmlDocument();
}
return defDoc;
};
Parse5DomAdapter.prototype.getBoundingClientRect = function(el) {
return {
left: 0,
top: 0,
width: 0,
height: 0
};
};
Parse5DomAdapter.prototype.getTitle = function() {
return this.defaultDoc().title || "";
};
Parse5DomAdapter.prototype.setTitle = function(newTitle) {
this.defaultDoc().title = newTitle;
};
Parse5DomAdapter.prototype.isTemplateElement = function(el) {
return this.isElementNode(el) && this.tagName(el) === "template";
};
Parse5DomAdapter.prototype.isTextNode = function(node) {
return treeAdapter.isTextNode(node);
};
Parse5DomAdapter.prototype.isCommentNode = function(node) {
return treeAdapter.isCommentNode(node);
};
Parse5DomAdapter.prototype.isElementNode = function(node) {
return node ? treeAdapter.isElementNode(node) : false;
};
Parse5DomAdapter.prototype.hasShadowRoot = function(node) {
return lang_1.isPresent(node.shadowRoot);
};
Parse5DomAdapter.prototype.isShadowRoot = function(node) {
return this.getShadowRoot(node) == node;
};
Parse5DomAdapter.prototype.importIntoDoc = function(node) {
return this.clone(node);
};
Parse5DomAdapter.prototype.adoptNode = function(node) {
return node;
};
Parse5DomAdapter.prototype.getHref = function(el) {
return el.href;
};
Parse5DomAdapter.prototype.resolveAndSetHref = function(el, baseUrl, href) {
if (href == null) {
el.href = baseUrl;
} else {
el.href = baseUrl + "/../" + href;
}
};
Parse5DomAdapter.prototype._buildRules = function(parsedRules, css) {
var rules = [];
for (var i = 0; i < parsedRules.length; i++) {
var parsedRule = parsedRules[i];
var rule = collection_1.StringMapWrapper.create();
collection_1.StringMapWrapper.set(rule, "cssText", css);
collection_1.StringMapWrapper.set(rule, "style", {
content: "",
cssText: ""
});
if (parsedRule.type == "rule") {
collection_1.StringMapWrapper.set(rule, "type", 1);
collection_1.StringMapWrapper.set(rule, "selectorText", parsedRule.selectors.join(", ").replace(/\s{2,}/g, " ").replace(/\s*~\s*/g, " ~ ").replace(/\s*\+\s*/g, " + ").replace(/\s*>\s*/g, " > ").replace(/\[(\w+)=(\w+)\]/g, '[$1="$2"]'));
if (lang_1.isBlank(parsedRule.declarations)) {
continue;
}
for (var j = 0; j < parsedRule.declarations.length; j++) {
var declaration = parsedRule.declarations[j];
collection_1.StringMapWrapper.set(collection_1.StringMapWrapper.get(rule, "style"), declaration.property, declaration.value);
collection_1.StringMapWrapper.get(rule, "style").cssText += declaration.property + ": " + declaration.value + ";";
}
} else if (parsedRule.type == "media") {
collection_1.StringMapWrapper.set(rule, "type", 4);
collection_1.StringMapWrapper.set(rule, "media", {
mediaText: parsedRule.media
});
if (parsedRule.rules) {
collection_1.StringMapWrapper.set(rule, "cssRules", this._buildRules(parsedRule.rules));
}
}
rules.push(rule);
}
return rules;
};
Parse5DomAdapter.prototype.supportsDOMEvents = function() {
return false;
};
Parse5DomAdapter.prototype.supportsNativeShadowDOM = function() {
return false;
};
Parse5DomAdapter.prototype.getGlobalEventTarget = function(target) {
if (target == "window") {
return this.defaultDoc()._window;
} else if (target == "document") {
return this.defaultDoc();
} else if (target == "body") {
return this.defaultDoc().body;
}
};
Parse5DomAdapter.prototype.getBaseHref = function() {
throw "not implemented";
};
Parse5DomAdapter.prototype.resetBaseElement = function() {
throw "not implemented";
};
Parse5DomAdapter.prototype.getHistory = function() {
throw "not implemented";
};
Parse5DomAdapter.prototype.getLocation = function() {
throw "not implemented";
};
Parse5DomAdapter.prototype.getUserAgent = function() {
return "Fake user agent";
};
Parse5DomAdapter.prototype.getData = function(el, name) {
return this.getAttribute(el, "data-" + name);
};
Parse5DomAdapter.prototype.getComputedStyle = function(el) {
throw "not implemented";
};
Parse5DomAdapter.prototype.setData = function(el, name, value) {
this.setAttribute(el, "data-" + name, value);
};
Parse5DomAdapter.prototype.setGlobalVar = function(path, value) {
lang_1.setValueOnPath(lang_1.global, path, value);
};
Parse5DomAdapter.prototype.requestAnimationFrame = function(callback) {
return setTimeout(callback, 0);
};
Parse5DomAdapter.prototype.cancelAnimationFrame = function(id) {
clearTimeout(id);
};
Parse5DomAdapter.prototype.performanceNow = function() {
return lang_1.DateWrapper.toMillis(lang_1.DateWrapper.now());
};
Parse5DomAdapter.prototype.getAnimationPrefix = function() {
return "";
};
Parse5DomAdapter.prototype.getTransitionEnd = function() {
return "transitionend";
};
Parse5DomAdapter.prototype.supportsAnimation = function() {
return true;
};
Parse5DomAdapter.prototype.replaceChild = function(el, newNode, oldNode) {
throw new Error("not implemented");
};
Parse5DomAdapter.prototype.parse = function(templateHtml) {
throw new Error("not implemented");
};
Parse5DomAdapter.prototype.invoke = function(el, methodName, args) {
throw new Error("not implemented");
};
Parse5DomAdapter.prototype.getEventKey = function(event) {
throw new Error("not implemented");
};
return Parse5DomAdapter;
}(common_dom_1.DomAdapter);
exports.Parse5DomAdapter = Parse5DomAdapter;
var _HTMLElementPropertyList = [ "webkitEntries", "incremental", "webkitdirectory", "selectionDirection", "selectionEnd", "selectionStart", "labels", "validationMessage", "validity", "willValidate", "width", "valueAsNumber", "valueAsDate", "value", "useMap", "defaultValue", "type", "step", "src", "size", "required", "readOnly", "placeholder", "pattern", "name", "multiple", "min", "minLength", "maxLength", "max", "list", "indeterminate", "height", "formTarget", "formNoValidate", "formMethod", "formEnctype", "formAction", "files", "form", "disabled", "dirName", "checked", "defaultChecked", "autofocus", "autocomplete", "alt", "align", "accept", "onautocompleteerror", "onautocomplete", "onwaiting", "onvolumechange", "ontoggle", "ontimeupdate", "onsuspend", "onsubmit", "onstalled", "onshow", "onselect", "onseeking", "onseeked", "onscroll", "onresize", "onreset", "onratechange", "onprogress", "onplaying", "onplay", "onpause", "onmousewheel", "onmouseup", "onmouseover", "onmouseout", "onmousemove", "onmouseleave", "onmouseenter", "onmousedown", "onloadstart", "onloadedmetadata", "onloadeddata", "onload", "onkeyup", "onkeypress", "onkeydown", "oninvalid", "oninput", "onfocus", "onerror", "onended", "onemptied", "ondurationchange", "ondrop", "ondragstart", "ondragover", "ondragleave", "ondragenter", "ondragend", "ondrag", "ondblclick", "oncuechange", "oncontextmenu", "onclose", "onclick", "onchange", "oncanplaythrough", "oncanplay", "oncancel", "onblur", "onabort", "spellcheck", "isContentEditable", "contentEditable", "outerText", "innerText", "accessKey", "hidden", "webkitdropzone", "draggable", "tabIndex", "dir", "translate", "lang", "title", "childElementCount", "lastElementChild", "firstElementChild", "children", "onwebkitfullscreenerror", "onwebkitfullscreenchange", "nextElementSibling", "previousElementSibling", "onwheel", "onselectstart", "onsearch", "onpaste", "oncut", "oncopy", "onbeforepaste", "onbeforecut", "onbeforecopy", "shadowRoot", "dataset", "classList", "className", "outerHTML", "innerHTML", "scrollHeight", "scrollWidth", "scrollTop", "scrollLeft", "clientHeight", "clientWidth", "clientTop", "clientLeft", "offsetParent", "offsetHeight", "offsetWidth", "offsetTop", "offsetLeft", "localName", "prefix", "namespaceURI", "id", "style", "attributes", "tagName", "parentElement", "textContent", "baseURI", "ownerDocument", "nextSibling", "previousSibling", "lastChild", "firstChild", "childNodes", "parentNode", "nodeType", "nodeValue", "nodeName", "closure_lm_714617", "__jsaction" ];
}, function(module, exports, __webpack_require__) {
"use strict";
exports.Parser = __webpack_require__(276);
exports.SimpleApiParser = __webpack_require__(290);
exports.TreeSerializer = exports.Serializer = __webpack_require__(292);
exports.JsDomParser = __webpack_require__(293);
exports.TreeAdapters = {
"default": __webpack_require__(286),
htmlparser2: __webpack_require__(295)
};
}, function(module, exports, __webpack_require__) {
"use strict";
var Tokenizer = __webpack_require__(277), OpenElementStack = __webpack_require__(282), FormattingElementList = __webpack_require__(284), LocationInfoMixin = __webpack_require__(285), DefaultTreeAdapter = __webpack_require__(286), Doctype = __webpack_require__(287), ForeignContent = __webpack_require__(288), Utils = __webpack_require__(289), UNICODE = __webpack_require__(279), HTML = __webpack_require__(283);
var $ = HTML.TAG_NAMES, NS = HTML.NAMESPACES, ATTRS = HTML.ATTRS;
var DEFAULT_OPTIONS = {
decodeHtmlEntities: true,
locationInfo: false
};
var SEARCHABLE_INDEX_DEFAULT_PROMPT = "This is a searchable index. Enter search keywords: ", SEARCHABLE_INDEX_INPUT_NAME = "isindex", HIDDEN_INPUT_TYPE = "hidden";
var AA_OUTER_LOOP_ITER = 8, AA_INNER_LOOP_ITER = 3;
var INITIAL_MODE = "INITIAL_MODE", BEFORE_HTML_MODE = "BEFORE_HTML_MODE", BEFORE_HEAD_MODE = "BEFORE_HEAD_MODE", IN_HEAD_MODE = "IN_HEAD_MODE", AFTER_HEAD_MODE = "AFTER_HEAD_MODE", IN_BODY_MODE = "IN_BODY_MODE", TEXT_MODE = "TEXT_MODE", IN_TABLE_MODE = "IN_TABLE_MODE", IN_TABLE_TEXT_MODE = "IN_TABLE_TEXT_MODE", IN_CAPTION_MODE = "IN_CAPTION_MODE", IN_COLUMN_GROUP_MODE = "IN_COLUMN_GROUP_MODE", IN_TABLE_BODY_MODE = "IN_TABLE_BODY_MODE", IN_ROW_MODE = "IN_ROW_MODE", IN_CELL_MODE = "IN_CELL_MODE", IN_SELECT_MODE = "IN_SELECT_MODE", IN_SELECT_IN_TABLE_MODE = "IN_SELECT_IN_TABLE_MODE", IN_TEMPLATE_MODE = "IN_TEMPLATE_MODE", AFTER_BODY_MODE = "AFTER_BODY_MODE", IN_FRAMESET_MODE = "IN_FRAMESET_MODE", AFTER_FRAMESET_MODE = "AFTER_FRAMESET_MODE", AFTER_AFTER_BODY_MODE = "AFTER_AFTER_BODY_MODE", AFTER_AFTER_FRAMESET_MODE = "AFTER_AFTER_FRAMESET_MODE";
var INSERTION_MODE_RESET_MAP = {};
INSERTION_MODE_RESET_MAP[$.TR] = IN_ROW_MODE;
INSERTION_MODE_RESET_MAP[$.TBODY] = INSERTION_MODE_RESET_MAP[$.THEAD] = INSERTION_MODE_RESET_MAP[$.TFOOT] = IN_TABLE_BODY_MODE;
INSERTION_MODE_RESET_MAP[$.CAPTION] = IN_CAPTION_MODE;
INSERTION_MODE_RESET_MAP[$.COLGROUP] = IN_COLUMN_GROUP_MODE;
INSERTION_MODE_RESET_MAP[$.TABLE] = IN_TABLE_MODE;
INSERTION_MODE_RESET_MAP[$.BODY] = IN_BODY_MODE;
INSERTION_MODE_RESET_MAP[$.FRAMESET] = IN_FRAMESET_MODE;
var TEMPLATE_INSERTION_MODE_SWITCH_MAP = {};
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.CAPTION] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.COLGROUP] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TBODY] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TFOOT] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.THEAD] = IN_TABLE_MODE;
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.COL] = IN_COLUMN_GROUP_MODE;
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TR] = IN_TABLE_BODY_MODE;
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TD] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TH] = IN_ROW_MODE;
var _ = {};
_[INITIAL_MODE] = {};
_[INITIAL_MODE][Tokenizer.CHARACTER_TOKEN] = _[INITIAL_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInInitialMode;
_[INITIAL_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
_[INITIAL_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[INITIAL_MODE][Tokenizer.DOCTYPE_TOKEN] = doctypeInInitialMode;
_[INITIAL_MODE][Tokenizer.START_TAG_TOKEN] = _[INITIAL_MODE][Tokenizer.END_TAG_TOKEN] = _[INITIAL_MODE][Tokenizer.EOF_TOKEN] = tokenInInitialMode;
_[BEFORE_HTML_MODE] = {};
_[BEFORE_HTML_MODE][Tokenizer.CHARACTER_TOKEN] = _[BEFORE_HTML_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenBeforeHtml;
_[BEFORE_HTML_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
_[BEFORE_HTML_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[BEFORE_HTML_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[BEFORE_HTML_MODE][Tokenizer.START_TAG_TOKEN] = startTagBeforeHtml;
_[BEFORE_HTML_MODE][Tokenizer.END_TAG_TOKEN] = endTagBeforeHtml;
_[BEFORE_HTML_MODE][Tokenizer.EOF_TOKEN] = tokenBeforeHtml;
_[BEFORE_HEAD_MODE] = {};
_[BEFORE_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] = _[BEFORE_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenBeforeHead;
_[BEFORE_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
_[BEFORE_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[BEFORE_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[BEFORE_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagBeforeHead;
_[BEFORE_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagBeforeHead;
_[BEFORE_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenBeforeHead;
_[IN_HEAD_MODE] = {};
_[IN_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInHead;
_[IN_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagInHead;
_[IN_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagInHead;
_[IN_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenInHead;
_[AFTER_HEAD_MODE] = {};
_[AFTER_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] = _[AFTER_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterHead;
_[AFTER_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[AFTER_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[AFTER_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterHead;
_[AFTER_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterHead;
_[AFTER_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenAfterHead;
_[IN_BODY_MODE] = {};
_[IN_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagInBody;
_[IN_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagInBody;
_[IN_BODY_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[TEXT_MODE] = {};
_[TEXT_MODE][Tokenizer.CHARACTER_TOKEN] = _[TEXT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = _[TEXT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[TEXT_MODE][Tokenizer.COMMENT_TOKEN] = _[TEXT_MODE][Tokenizer.DOCTYPE_TOKEN] = _[TEXT_MODE][Tokenizer.START_TAG_TOKEN] = ignoreToken;
_[TEXT_MODE][Tokenizer.END_TAG_TOKEN] = endTagInText;
_[TEXT_MODE][Tokenizer.EOF_TOKEN] = eofInText;
_[IN_TABLE_MODE] = {};
_[IN_TABLE_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_TABLE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = _[IN_TABLE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
_[IN_TABLE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_TABLE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_TABLE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTable;
_[IN_TABLE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTable;
_[IN_TABLE_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_TABLE_TEXT_MODE] = {};
_[IN_TABLE_TEXT_MODE][Tokenizer.CHARACTER_TOKEN] = characterInTableText;
_[IN_TABLE_TEXT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_TABLE_TEXT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInTableText;
_[IN_TABLE_TEXT_MODE][Tokenizer.COMMENT_TOKEN] = _[IN_TABLE_TEXT_MODE][Tokenizer.DOCTYPE_TOKEN] = _[IN_TABLE_TEXT_MODE][Tokenizer.START_TAG_TOKEN] = _[IN_TABLE_TEXT_MODE][Tokenizer.END_TAG_TOKEN] = _[IN_TABLE_TEXT_MODE][Tokenizer.EOF_TOKEN] = tokenInTableText;
_[IN_CAPTION_MODE] = {};
_[IN_CAPTION_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_CAPTION_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_CAPTION_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_CAPTION_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_CAPTION_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_CAPTION_MODE][Tokenizer.START_TAG_TOKEN] = startTagInCaption;
_[IN_CAPTION_MODE][Tokenizer.END_TAG_TOKEN] = endTagInCaption;
_[IN_CAPTION_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_COLUMN_GROUP_MODE] = {};
_[IN_COLUMN_GROUP_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_COLUMN_GROUP_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInColumnGroup;
_[IN_COLUMN_GROUP_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_COLUMN_GROUP_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_COLUMN_GROUP_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_COLUMN_GROUP_MODE][Tokenizer.START_TAG_TOKEN] = startTagInColumnGroup;
_[IN_COLUMN_GROUP_MODE][Tokenizer.END_TAG_TOKEN] = endTagInColumnGroup;
_[IN_COLUMN_GROUP_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_TABLE_BODY_MODE] = {};
_[IN_TABLE_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_TABLE_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = _[IN_TABLE_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
_[IN_TABLE_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_TABLE_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_TABLE_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTableBody;
_[IN_TABLE_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTableBody;
_[IN_TABLE_BODY_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_ROW_MODE] = {};
_[IN_ROW_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_ROW_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = _[IN_ROW_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
_[IN_ROW_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_ROW_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_ROW_MODE][Tokenizer.START_TAG_TOKEN] = startTagInRow;
_[IN_ROW_MODE][Tokenizer.END_TAG_TOKEN] = endTagInRow;
_[IN_ROW_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_CELL_MODE] = {};
_[IN_CELL_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_CELL_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_CELL_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_CELL_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_CELL_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_CELL_MODE][Tokenizer.START_TAG_TOKEN] = startTagInCell;
_[IN_CELL_MODE][Tokenizer.END_TAG_TOKEN] = endTagInCell;
_[IN_CELL_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_SELECT_MODE] = {};
_[IN_SELECT_MODE][Tokenizer.CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_SELECT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_SELECT_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_SELECT_MODE][Tokenizer.START_TAG_TOKEN] = startTagInSelect;
_[IN_SELECT_MODE][Tokenizer.END_TAG_TOKEN] = endTagInSelect;
_[IN_SELECT_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_SELECT_IN_TABLE_MODE] = {};
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInSelectInTable;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInSelectInTable;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_TEMPLATE_MODE] = {};
_[IN_TEMPLATE_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_TEMPLATE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_TEMPLATE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_TEMPLATE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_TEMPLATE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_TEMPLATE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTemplate;
_[IN_TEMPLATE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTemplate;
_[IN_TEMPLATE_MODE][Tokenizer.EOF_TOKEN] = eofInTemplate;
_[AFTER_BODY_MODE] = {};
_[AFTER_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = _[AFTER_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterBody;
_[AFTER_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[AFTER_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToRootHtmlElement;
_[AFTER_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterBody;
_[AFTER_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterBody;
_[AFTER_BODY_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
_[IN_FRAMESET_MODE] = {};
_[IN_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagInFrameset;
_[IN_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = endTagInFrameset;
_[IN_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
_[AFTER_FRAMESET_MODE] = {};
_[AFTER_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] = _[AFTER_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[AFTER_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[AFTER_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[AFTER_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterFrameset;
_[AFTER_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterFrameset;
_[AFTER_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
_[AFTER_AFTER_BODY_MODE] = {};
_[AFTER_AFTER_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = tokenAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToDocument;
_[AFTER_AFTER_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_AFTER_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.END_TAG_TOKEN] = tokenAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
_[AFTER_AFTER_FRAMESET_MODE] = {};
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] = _[AFTER_AFTER_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToDocument;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterAfterFrameset;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = ignoreToken;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
function getSearchableIndexFormAttrs(isindexStartTagToken) {
var indexAction = Tokenizer.getTokenAttr(isindexStartTagToken, ATTRS.ACTION), attrs = [];
if (indexAction !== null) {
attrs.push({
name: ATTRS.ACTION,
value: indexAction
});
}
return attrs;
}
function getSearchableIndexLabelText(isindexStartTagToken) {
var indexPrompt = Tokenizer.getTokenAttr(isindexStartTagToken, ATTRS.PROMPT);
return indexPrompt === null ? SEARCHABLE_INDEX_DEFAULT_PROMPT : indexPrompt;
}
function getSearchableIndexInputAttrs(isindexStartTagToken) {
var isindexAttrs = isindexStartTagToken.attrs, inputAttrs = [];
for (var i = 0; i < isindexAttrs.length; i++) {
var name = isindexAttrs[i].name;
if (name !== ATTRS.NAME && name !== ATTRS.ACTION && name !== ATTRS.PROMPT) inputAttrs.push(isindexAttrs[i]);
}
inputAttrs.push({
name: ATTRS.NAME,
value: SEARCHABLE_INDEX_INPUT_NAME
});
return inputAttrs;
}
var Parser = module.exports = function(treeAdapter, options) {
this.treeAdapter = treeAdapter || DefaultTreeAdapter;
this.options = Utils.mergeOptions(DEFAULT_OPTIONS, options);
this.scriptHandler = null;
if (this.options.locationInfo) LocationInfoMixin.assign(this);
};
Parser.prototype.parse = function(html) {
var document = this.treeAdapter.createDocument();
this._reset(html, document, null);
this._runParsingLoop();
return document;
};
Parser.prototype.parseFragment = function(html, fragmentContext) {
if (!fragmentContext) fragmentContext = this.treeAdapter.createElement($.TEMPLATE, NS.HTML, []);
var documentMock = this.treeAdapter.createElement("documentmock", NS.HTML, []);
this._reset(html, documentMock, fragmentContext);
if (this.treeAdapter.getTagName(fragmentContext) === $.TEMPLATE) this._pushTmplInsertionMode(IN_TEMPLATE_MODE);
this._initTokenizerForFragmentParsing();
this._insertFakeRootElement();
this._resetInsertionMode();
this._findFormInFragmentContext();
this._runParsingLoop();
var rootElement = this.treeAdapter.getFirstChild(documentMock), fragment = this.treeAdapter.createDocumentFragment();
this._adoptNodes(rootElement, fragment);
return fragment;
};
Parser.prototype._reset = function(html, document, fragmentContext) {
this.tokenizer = new Tokenizer(html, this.options);
this.stopped = false;
this.insertionMode = INITIAL_MODE;
this.originalInsertionMode = "";
this.document = document;
this.fragmentContext = fragmentContext;
this.headElement = null;
this.formElement = null;
this.openElements = new OpenElementStack(this.document, this.treeAdapter);
this.activeFormattingElements = new FormattingElementList(this.treeAdapter);
this.tmplInsertionModeStack = [];
this.tmplInsertionModeStackTop = -1;
this.currentTmplInsertionMode = null;
this.pendingCharacterTokens = [];
this.hasNonWhitespacePendingCharacterToken = false;
this.framesetOk = true;
this.skipNextNewLine = false;
this.fosterParentingEnabled = false;
};
Parser.prototype._iterateParsingLoop = function() {
this._setupTokenizerCDATAMode();
var token = this.tokenizer.getNextToken();
if (this.skipNextNewLine) {
this.skipNextNewLine = false;
if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === "\n") {
if (token.chars.length === 1) return;
token.chars = token.chars.substr(1);
}
}
if (this._shouldProcessTokenInForeignContent(token)) this._processTokenInForeignContent(token); else this._processToken(token);
};
Parser.prototype._runParsingLoop = function() {
while (!this.stopped) this._iterateParsingLoop();
};
Parser.prototype._setupTokenizerCDATAMode = function() {
var current = this._getAdjustedCurrentElement();
this.tokenizer.allowCDATA = current && current !== this.document && this.treeAdapter.getNamespaceURI(current) !== NS.HTML && !this._isHtmlIntegrationPoint(current) && !this._isMathMLTextIntegrationPoint(current);
};
Parser.prototype._switchToTextParsing = function(currentToken, nextTokenizerState) {
this._insertElement(currentToken, NS.HTML);
this.tokenizer.state = nextTokenizerState;
this.originalInsertionMode = this.insertionMode;
this.insertionMode = TEXT_MODE;
};
Parser.prototype._getAdjustedCurrentElement = function() {
return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;
};
Parser.prototype._findFormInFragmentContext = function() {
var node = this.fragmentContext;
do {
if (this.treeAdapter.getTagName(node) === $.FORM) {
this.formElement = node;
break;
}
node = this.treeAdapter.getParentNode(node);
} while (node);
};
Parser.prototype._initTokenizerForFragmentParsing = function() {
var tn = this.treeAdapter.getTagName(this.fragmentContext);
if (tn === $.TITLE || tn === $.TEXTAREA) this.tokenizer.state = Tokenizer.MODE.RCDATA; else if (tn === $.STYLE || tn === $.XMP || tn === $.IFRAME || tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT) {
this.tokenizer.state = Tokenizer.MODE.RAWTEXT;
} else if (tn === $.SCRIPT) this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA; else if (tn === $.PLAINTEXT) this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
};
Parser.prototype._setDocumentType = function(token) {
this.treeAdapter.setDocumentType(this.document, token.name, token.publicId, token.systemId);
};
Parser.prototype._attachElementToTree = function(element) {
if (this._shouldFosterParentOnInsertion()) this._fosterParentElement(element); else {
var parent = this.openElements.currentTmplContent || this.openElements.current;
this.treeAdapter.appendChild(parent, element);
}
};
Parser.prototype._appendElement = function(token, namespaceURI) {
var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
this._attachElementToTree(element);
};
Parser.prototype._insertElement = function(token, namespaceURI) {
var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
this._attachElementToTree(element);
this.openElements.push(element);
};
Parser.prototype._insertTemplate = function(token) {
var tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs), content = this.treeAdapter.createDocumentFragment();
this.treeAdapter.appendChild(tmpl, content);
this._attachElementToTree(tmpl);
this.openElements.push(tmpl);
};
Parser.prototype._insertFakeRootElement = function() {
var element = this.treeAdapter.createElement($.HTML, NS.HTML, []);
this.treeAdapter.appendChild(this.openElements.current, element);
this.openElements.push(element);
};
Parser.prototype._appendCommentNode = function(token, parent) {
var commentNode = this.treeAdapter.createCommentNode(token.data);
this.treeAdapter.appendChild(parent, commentNode);
};
Parser.prototype._insertCharacters = function(token) {
if (this._shouldFosterParentOnInsertion()) this._fosterParentText(token.chars); else {
var parent = this.openElements.currentTmplContent || this.openElements.current;
this.treeAdapter.insertText(parent, token.chars);
}
};
Parser.prototype._adoptNodes = function(donor, recipient) {
while (true) {
var child = this.treeAdapter.getFirstChild(donor);
if (!child) break;
this.treeAdapter.detachNode(child);
this.treeAdapter.appendChild(recipient, child);
}
};
Parser.prototype._shouldProcessTokenInForeignContent = function(token) {
var current = this._getAdjustedCurrentElement();
if (!current || current === this.document) return false;
var ns = this.treeAdapter.getNamespaceURI(current);
if (ns === NS.HTML) return false;
if (this.treeAdapter.getTagName(current) === $.ANNOTATION_XML && ns === NS.MATHML && token.type === Tokenizer.START_TAG_TOKEN && token.tagName === $.SVG) {
return false;
}
var isCharacterToken = token.type === Tokenizer.CHARACTER_TOKEN || token.type === Tokenizer.NULL_CHARACTER_TOKEN || token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN, isMathMLTextStartTag = token.type === Tokenizer.START_TAG_TOKEN && token.tagName !== $.MGLYPH && token.tagName !== $.MALIGNMARK;
if ((isMathMLTextStartTag || isCharacterToken) && this._isMathMLTextIntegrationPoint(current)) return false;
if ((token.type === Tokenizer.START_TAG_TOKEN || isCharacterToken) && this._isHtmlIntegrationPoint(current)) return false;
return token.type !== Tokenizer.EOF_TOKEN;
};
Parser.prototype._processToken = function(token) {
_[this.insertionMode][token.type](this, token);
};
Parser.prototype._processTokenInBodyMode = function(token) {
_[IN_BODY_MODE][token.type](this, token);
};
Parser.prototype._processTokenInForeignContent = function(token) {
if (token.type === Tokenizer.CHARACTER_TOKEN) characterInForeignContent(this, token); else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN) nullCharacterInForeignContent(this, token); else if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN) insertCharacters(this, token); else if (token.type === Tokenizer.COMMENT_TOKEN) appendComment(this, token); else if (token.type === Tokenizer.START_TAG_TOKEN) startTagInForeignContent(this, token); else if (token.type === Tokenizer.END_TAG_TOKEN) endTagInForeignContent(this, token);
};
Parser.prototype._processFakeStartTagWithAttrs = function(tagName, attrs) {
var fakeToken = this.tokenizer.buildStartTagToken(tagName);
fakeToken.attrs = attrs;
this._processToken(fakeToken);
};
Parser.prototype._processFakeStartTag = function(tagName) {
var fakeToken = this.tokenizer.buildStartTagToken(tagName);
this._processToken(fakeToken);
return fakeToken;
};
Parser.prototype._processFakeEndTag = function(tagName) {
var fakeToken = this.tokenizer.buildEndTagToken(tagName);
this._processToken(fakeToken);
return fakeToken;
};
Parser.prototype._isMathMLTextIntegrationPoint = function(element) {
var tn = this.treeAdapter.getTagName(element), ns = this.treeAdapter.getNamespaceURI(element);
return ForeignContent.isMathMLTextIntegrationPoint(tn, ns);
};
Parser.prototype._isHtmlIntegrationPoint = function(element) {
var tn = this.treeAdapter.getTagName(element), ns = this.treeAdapter.getNamespaceURI(element), attrs = this.treeAdapter.getAttrList(element);
return ForeignContent.isHtmlIntegrationPoint(tn, ns, attrs);
};
Parser.prototype._reconstructActiveFormattingElements = function() {
var listLength = this.activeFormattingElements.length;
if (listLength) {
var unopenIdx = listLength, entry = null;
do {
unopenIdx--;
entry = this.activeFormattingElements.entries[unopenIdx];
if (entry.type === FormattingElementList.MARKER_ENTRY || this.openElements.contains(entry.element)) {
unopenIdx++;
break;
}
} while (unopenIdx > 0);
for (var i = unopenIdx; i < listLength; i++) {
entry = this.activeFormattingElements.entries[i];
this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
entry.element = this.openElements.current;
}
}
};
Parser.prototype._closeTableCell = function() {
if (this.openElements.hasInTableScope($.TD)) this._processFakeEndTag($.TD); else this._processFakeEndTag($.TH);
};
Parser.prototype._closePElement = function() {
this.openElements.generateImpliedEndTagsWithExclusion($.P);
this.openElements.popUntilTagNamePopped($.P);
};
Parser.prototype._resetInsertionMode = function() {
for (var i = this.openElements.stackTop, last = false; i >= 0; i--) {
var element = this.openElements.items[i];
if (i === 0) {
last = true;
if (this.fragmentContext) element = this.fragmentContext;
}
var tn = this.treeAdapter.getTagName(element), newInsertionMode = INSERTION_MODE_RESET_MAP[tn];
if (newInsertionMode) {
this.insertionMode = newInsertionMode;
break;
} else if (!last && (tn === $.TD || tn === $.TH)) {
this.insertionMode = IN_CELL_MODE;
break;
} else if (!last && tn === $.HEAD) {
this.insertionMode = IN_HEAD_MODE;
break;
} else if (tn === $.SELECT) {
this._resetInsertionModeForSelect(i);
break;
} else if (tn === $.TEMPLATE) {
this.insertionMode = this.currentTmplInsertionMode;
break;
} else if (tn === $.HTML) {
this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;
break;
} else if (last) {
this.insertionMode = IN_BODY_MODE;
break;
}
}
};
Parser.prototype._resetInsertionModeForSelect = function(selectIdx) {
if (selectIdx > 0) {
for (var i = selectIdx - 1; i > 0; i--) {
var ancestor = this.openElements.items[i], tn = this.treeAdapter.getTagName(ancestor);
if (tn === $.TEMPLATE) break; else if (tn === $.TABLE) {
this.insertionMode = IN_SELECT_IN_TABLE_MODE;
return;
}
}
}
this.insertionMode = IN_SELECT_MODE;
};
Parser.prototype._pushTmplInsertionMode = function(mode) {
this.tmplInsertionModeStack.push(mode);
this.tmplInsertionModeStackTop++;
this.currentTmplInsertionMode = mode;
};
Parser.prototype._popTmplInsertionMode = function() {
this.tmplInsertionModeStack.pop();
this.tmplInsertionModeStackTop--;
this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];
};
Parser.prototype._isElementCausesFosterParenting = function(element) {
var tn = this.treeAdapter.getTagName(element);
return tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn == $.THEAD || tn === $.TR;
};
Parser.prototype._shouldFosterParentOnInsertion = function() {
return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current);
};
Parser.prototype._findFosterParentingLocation = function() {
var location = {
parent: null,
beforeElement: null
};
for (var i = this.openElements.stackTop; i >= 0; i--) {
var openElement = this.openElements.items[i], tn = this.treeAdapter.getTagName(openElement), ns = this.treeAdapter.getNamespaceURI(openElement);
if (tn === $.TEMPLATE && ns === NS.HTML) {
location.parent = this.treeAdapter.getChildNodes(openElement)[0];
break;
} else if (tn === $.TABLE) {
location.parent = this.treeAdapter.getParentNode(openElement);
if (location.parent) location.beforeElement = openElement; else location.parent = this.openElements.items[i - 1];
break;
}
}
if (!location.parent) location.parent = this.openElements.items[0];
return location;
};
Parser.prototype._fosterParentElement = function(element) {
var location = this._findFosterParentingLocation();
if (location.beforeElement) this.treeAdapter.insertBefore(location.parent, element, location.beforeElement); else this.treeAdapter.appendChild(location.parent, element);
};
Parser.prototype._fosterParentText = function(chars) {
var location = this._findFosterParentingLocation();
if (location.beforeElement) this.treeAdapter.insertTextBefore(location.parent, chars, location.beforeElement); else this.treeAdapter.insertText(location.parent, chars);
};
Parser.prototype._isSpecialElement = function(element) {
var tn = this.treeAdapter.getTagName(element), ns = this.treeAdapter.getNamespaceURI(element);
return HTML.SPECIAL_ELEMENTS[ns][tn];
};
function aaObtainFormattingElementEntry(p, token) {
var formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);
if (formattingElementEntry) {
if (!p.openElements.contains(formattingElementEntry.element)) {
p.activeFormattingElements.removeEntry(formattingElementEntry);
formattingElementEntry = null;
} else if (!p.openElements.hasInScope(token.tagName)) formattingElementEntry = null;
} else genericEndTagInBody(p, token);
return formattingElementEntry;
}
function aaObtainFurthestBlock(p, formattingElementEntry) {
var furthestBlock = null;
for (var i = p.openElements.stackTop; i >= 0; i--) {
var element = p.openElements.items[i];
if (element === formattingElementEntry.element) break;
if (p._isSpecialElement(element)) furthestBlock = element;
}
if (!furthestBlock) {
p.openElements.popUntilElementPopped(formattingElementEntry.element);
p.activeFormattingElements.removeEntry(formattingElementEntry);
}
return furthestBlock;
}
function aaInnerLoop(p, furthestBlock, formattingElement) {
var element = null, lastElement = furthestBlock, nextElement = p.openElements.getCommonAncestor(furthestBlock);
for (var i = 0; i < AA_INNER_LOOP_ITER; i++) {
element = nextElement;
nextElement = p.openElements.getCommonAncestor(element);
var elementEntry = p.activeFormattingElements.getElementEntry(element);
if (!elementEntry) {
p.openElements.remove(element);
continue;
}
if (element === formattingElement) break;
element = aaRecreateElementFromEntry(p, elementEntry);
if (lastElement === furthestBlock) p.activeFormattingElements.bookmark = elementEntry;
p.treeAdapter.detachNode(lastElement);
p.treeAdapter.appendChild(element, lastElement);
lastElement = element;
}
return lastElement;
}
function aaRecreateElementFromEntry(p, elementEntry) {
var ns = p.treeAdapter.getNamespaceURI(elementEntry.element), newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);
p.openElements.replace(elementEntry.element, newElement);
elementEntry.element = newElement;
return newElement;
}
function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
if (p._isElementCausesFosterParenting(commonAncestor)) p._fosterParentElement(lastElement); else {
var tn = p.treeAdapter.getTagName(commonAncestor), ns = p.treeAdapter.getNamespaceURI(commonAncestor);
if (tn === $.TEMPLATE && ns === NS.HTML) commonAncestor = p.treeAdapter.getChildNodes(commonAncestor)[0];
p.treeAdapter.appendChild(commonAncestor, lastElement);
}
}
function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
var ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element), token = formattingElementEntry.token, newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);
p._adoptNodes(furthestBlock, newElement);
p.treeAdapter.appendChild(furthestBlock, newElement);
p.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);
p.activeFormattingElements.removeEntry(formattingElementEntry);
p.openElements.remove(formattingElementEntry.element);
p.openElements.insertAfter(furthestBlock, newElement);
}
function callAdoptionAgency(p, token) {
for (var i = 0; i < AA_OUTER_LOOP_ITER; i++) {
var formattingElementEntry = aaObtainFormattingElementEntry(p, token, formattingElementEntry);
if (!formattingElementEntry) break;
var furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);
if (!furthestBlock) break;
p.activeFormattingElements.bookmark = formattingElementEntry;
var lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element), commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);
p.treeAdapter.detachNode(lastElement);
aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
}
}
function ignoreToken(p, token) {}
function appendComment(p, token) {
p._appendCommentNode(token, p.openElements.currentTmplContent || p.openElements.current);
}
function appendCommentToRootHtmlElement(p, token) {
p._appendCommentNode(token, p.openElements.items[0]);
}
function appendCommentToDocument(p, token) {
p._appendCommentNode(token, p.document);
}
function insertCharacters(p, token) {
p._insertCharacters(token);
}
function stopParsing(p, token) {
p.stopped = true;
}
function doctypeInInitialMode(p, token) {
p._setDocumentType(token);
if (token.forceQuirks || Doctype.isQuirks(token.name, token.publicId, token.systemId)) p.treeAdapter.setQuirksMode(p.document);
p.insertionMode = BEFORE_HTML_MODE;
}
function tokenInInitialMode(p, token) {
p.treeAdapter.setQuirksMode(p.document);
p.insertionMode = BEFORE_HTML_MODE;
p._processToken(token);
}
function startTagBeforeHtml(p, token) {
if (token.tagName === $.HTML) {
p._insertElement(token, NS.HTML);
p.insertionMode = BEFORE_HEAD_MODE;
} else tokenBeforeHtml(p, token);
}
function endTagBeforeHtml(p, token) {
var tn = token.tagName;
if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) tokenBeforeHtml(p, token);
}
function tokenBeforeHtml(p, token) {
p._insertFakeRootElement();
p.insertionMode = BEFORE_HEAD_MODE;
p._processToken(token);
}
function startTagBeforeHead(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.HEAD) {
p._insertElement(token, NS.HTML);
p.headElement = p.openElements.current;
p.insertionMode = IN_HEAD_MODE;
} else tokenBeforeHead(p, token);
}
function endTagBeforeHead(p, token) {
var tn = token.tagName;
if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) tokenBeforeHead(p, token);
}
function tokenBeforeHead(p, token) {
p._processFakeStartTag($.HEAD);
p._processToken(token);
}
function startTagInHead(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.COMMAND || tn === $.LINK || tn === $.META) {
p._appendElement(token, NS.HTML);
} else if (tn === $.TITLE) p._switchToTextParsing(token, Tokenizer.MODE.RCDATA); else if (tn === $.NOSCRIPT || tn === $.NOFRAMES || tn === $.STYLE) p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT); else if (tn === $.SCRIPT) p._switchToTextParsing(token, Tokenizer.MODE.SCRIPT_DATA); else if (tn === $.TEMPLATE) {
p._insertTemplate(token, NS.HTML);
p.activeFormattingElements.insertMarker();
p.framesetOk = false;
p.insertionMode = IN_TEMPLATE_MODE;
p._pushTmplInsertionMode(IN_TEMPLATE_MODE);
} else if (tn !== $.HEAD) tokenInHead(p, token);
}
function endTagInHead(p, token) {
var tn = token.tagName;
if (tn === $.HEAD) {
p.openElements.pop();
p.insertionMode = AFTER_HEAD_MODE;
} else if (tn === $.BODY || tn === $.BR || tn === $.HTML) tokenInHead(p, token); else if (tn === $.TEMPLATE && p.openElements.tmplCount > 0) {
p.openElements.generateImpliedEndTags();
p.openElements.popUntilTemplatePopped();
p.activeFormattingElements.clearToLastMarker();
p._popTmplInsertionMode();
p._resetInsertionMode();
}
}
function tokenInHead(p, token) {
p._processFakeEndTag($.HEAD);
p._processToken(token);
}
function startTagAfterHead(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.BODY) {
p._insertElement(token, NS.HTML);
p.framesetOk = false;
p.insertionMode = IN_BODY_MODE;
} else if (tn === $.FRAMESET) {
p._insertElement(token, NS.HTML);
p.insertionMode = IN_FRAMESET_MODE;
} else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
p.openElements.push(p.headElement);
startTagInHead(p, token);
p.openElements.remove(p.headElement);
} else if (tn !== $.HEAD) tokenAfterHead(p, token);
}
function endTagAfterHead(p, token) {
var tn = token.tagName;
if (tn === $.BODY || tn === $.HTML || tn === $.BR) tokenAfterHead(p, token); else if (tn === $.TEMPLATE) endTagInHead(p, token);
}
function tokenAfterHead(p, token) {
p._processFakeStartTag($.BODY);
p.framesetOk = true;
p._processToken(token);
}
function whitespaceCharacterInBody(p, token) {
p._reconstructActiveFormattingElements();
p._insertCharacters(token);
}
function characterInBody(p, token) {
p._reconstructActiveFormattingElements();
p._insertCharacters(token);
p.framesetOk = false;
}
function htmlStartTagInBody(p, token) {
if (p.openElements.tmplCount === 0) p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
}
function bodyStartTagInBody(p, token) {
var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
if (bodyElement && p.openElements.tmplCount === 0) {
p.framesetOk = false;
p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
}
}
function framesetStartTagInBody(p, token) {
var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
if (p.framesetOk && bodyElement) {
p.treeAdapter.detachNode(bodyElement);
p.openElements.popAllUpToHtmlElement();
p._insertElement(token, NS.HTML);
p.insertionMode = IN_FRAMESET_MODE;
}
}
function addressStartTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._insertElement(token, NS.HTML);
}
function numberedHeaderStartTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
var tn = p.openElements.currentTagName;
if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) p.openElements.pop();
p._insertElement(token, NS.HTML);
}
function preStartTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._insertElement(token, NS.HTML);
p.skipNextNewLine = true;
p.framesetOk = false;
}
function formStartTagInBody(p, token) {
var inTemplate = p.openElements.tmplCount > 0;
if (!p.formElement || inTemplate) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._insertElement(token, NS.HTML);
if (!inTemplate) p.formElement = p.openElements.current;
}
}
function listItemStartTagInBody(p, token) {
p.framesetOk = false;
for (var i = p.openElements.stackTop; i >= 0; i--) {
var element = p.openElements.items[i], tn = p.treeAdapter.getTagName(element);
if (token.tagName === $.LI && tn === $.LI || (token.tagName === $.DD || token.tagName === $.DT) && (tn === $.DD || tn == $.DT)) {
p._processFakeEndTag(tn);
break;
}
if (tn !== $.ADDRESS && tn !== $.DIV && tn !== $.P && p._isSpecialElement(element)) break;
}
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._insertElement(token, NS.HTML);
}
function plaintextStartTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._insertElement(token, NS.HTML);
p.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
}
function buttonStartTagInBody(p, token) {
if (p.openElements.hasInScope($.BUTTON)) {
p._processFakeEndTag($.BUTTON);
buttonStartTagInBody(p, token);
} else {
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
p.framesetOk = false;
}
}
function aStartTagInBody(p, token) {
var activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName($.A);
if (activeElementEntry) {
p._processFakeEndTag($.A);
p.openElements.remove(activeElementEntry.element);
p.activeFormattingElements.removeEntry(activeElementEntry);
}
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
p.activeFormattingElements.pushElement(p.openElements.current, token);
}
function bStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
p.activeFormattingElements.pushElement(p.openElements.current, token);
}
function nobrStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
if (p.openElements.hasInScope($.NOBR)) {
p._processFakeEndTag($.NOBR);
p._reconstructActiveFormattingElements();
}
p._insertElement(token, NS.HTML);
p.activeFormattingElements.pushElement(p.openElements.current, token);
}
function appletStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
p.activeFormattingElements.insertMarker();
p.framesetOk = false;
}
function tableStartTagInBody(p, token) {
if (!p.treeAdapter.isQuirksMode(p.document) && p.openElements.hasInButtonScope($.P)) p._closePElement();
p._insertElement(token, NS.HTML);
p.framesetOk = false;
p.insertionMode = IN_TABLE_MODE;
}
function areaStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
p._appendElement(token, NS.HTML);
p.framesetOk = false;
}
function inputStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
p._appendElement(token, NS.HTML);
var inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);
if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE) p.framesetOk = false;
}
function paramStartTagInBody(p, token) {
p._appendElement(token, NS.HTML);
}
function hrStartTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._appendElement(token, NS.HTML);
p.framesetOk = false;
}
function imageStartTagInBody(p, token) {
token.tagName = $.IMG;
areaStartTagInBody(p, token);
}
function isindexStartTagInBody(p, token) {
if (!p.formElement || p.openElements.tmplCount > 0) {
p._processFakeStartTagWithAttrs($.FORM, getSearchableIndexFormAttrs(token));
p._processFakeStartTag($.HR);
p._processFakeStartTag($.LABEL);
p.treeAdapter.insertText(p.openElements.current, getSearchableIndexLabelText(token));
p._processFakeStartTagWithAttrs($.INPUT, getSearchableIndexInputAttrs(token));
p._processFakeEndTag($.LABEL);
p._processFakeStartTag($.HR);
p._processFakeEndTag($.FORM);
}
}
function textareaStartTagInBody(p, token) {
p._insertElement(token, NS.HTML);
p.skipNextNewLine = true;
p.tokenizer.state = Tokenizer.MODE.RCDATA;
p.originalInsertionMode = p.insertionMode;
p.framesetOk = false;
p.insertionMode = TEXT_MODE;
}
function xmpStartTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._reconstructActiveFormattingElements();
p.framesetOk = false;
p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}
function iframeStartTagInBody(p, token) {
p.framesetOk = false;
p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}
function noembedStartTagInBody(p, token) {
p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}
function selectStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
p.framesetOk = false;
if (p.insertionMode === IN_TABLE_MODE || p.insertionMode === IN_CAPTION_MODE || p.insertionMode === IN_TABLE_BODY_MODE || p.insertionMode === IN_ROW_MODE || p.insertionMode === IN_CELL_MODE) {
p.insertionMode = IN_SELECT_IN_TABLE_MODE;
} else p.insertionMode = IN_SELECT_MODE;
}
function optgroupStartTagInBody(p, token) {
if (p.openElements.currentTagName === $.OPTION) p._processFakeEndTag($.OPTION);
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
}
function rpStartTagInBody(p, token) {
if (p.openElements.hasInScope($.RUBY)) p.openElements.generateImpliedEndTags();
p._insertElement(token, NS.HTML);
}
function menuitemStartTagInBody(p, token) {
p._appendElement(token, NS.HTML);
}
function mathStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
ForeignContent.adjustTokenMathMLAttrs(token);
ForeignContent.adjustTokenXMLAttrs(token);
if (token.selfClosing) p._appendElement(token, NS.MATHML); else p._insertElement(token, NS.MATHML);
}
function svgStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
ForeignContent.adjustTokenSVGAttrs(token);
ForeignContent.adjustTokenXMLAttrs(token);
if (token.selfClosing) p._appendElement(token, NS.SVG); else p._insertElement(token, NS.SVG);
}
function genericStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
}
function startTagInBody(p, token) {
var tn = token.tagName;
switch (tn.length) {
case 1:
if (tn === $.I || tn === $.S || tn === $.B || tn === $.U) bStartTagInBody(p, token); else if (tn === $.P) addressStartTagInBody(p, token); else if (tn === $.A) aStartTagInBody(p, token); else genericStartTagInBody(p, token);
break;

case 2:
if (tn === $.DL || tn === $.OL || tn === $.UL) addressStartTagInBody(p, token); else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) numberedHeaderStartTagInBody(p, token); else if (tn === $.LI || tn === $.DD || tn === $.DT) listItemStartTagInBody(p, token); else if (tn === $.EM || tn === $.TT) bStartTagInBody(p, token); else if (tn === $.BR) areaStartTagInBody(p, token); else if (tn === $.HR) hrStartTagInBody(p, token); else if (tn === $.RP || tn === $.RT) rpStartTagInBody(p, token); else if (tn !== $.TH && tn !== $.TD && tn !== $.TR) genericStartTagInBody(p, token);
break;

case 3:
if (tn === $.DIV || tn === $.DIR || tn === $.NAV) addressStartTagInBody(p, token); else if (tn === $.PRE) preStartTagInBody(p, token); else if (tn === $.BIG) bStartTagInBody(p, token); else if (tn === $.IMG || tn === $.WBR) areaStartTagInBody(p, token); else if (tn === $.XMP) xmpStartTagInBody(p, token); else if (tn === $.SVG) svgStartTagInBody(p, token); else if (tn !== $.COL) genericStartTagInBody(p, token);
break;

case 4:
if (tn === $.HTML) htmlStartTagInBody(p, token); else if (tn === $.BASE || tn === $.LINK || tn === $.META) startTagInHead(p, token); else if (tn === $.BODY) bodyStartTagInBody(p, token); else if (tn === $.MAIN || tn === $.MENU) addressStartTagInBody(p, token); else if (tn === $.FORM) formStartTagInBody(p, token); else if (tn === $.CODE || tn === $.FONT) bStartTagInBody(p, token); else if (tn === $.NOBR) nobrStartTagInBody(p, token); else if (tn === $.AREA) areaStartTagInBody(p, token); else if (tn === $.MATH) mathStartTagInBody(p, token); else if (tn !== $.HEAD) genericStartTagInBody(p, token);
break;

case 5:
if (tn === $.STYLE || tn === $.TITLE) startTagInHead(p, token); else if (tn === $.ASIDE) addressStartTagInBody(p, token); else if (tn === $.SMALL) bStartTagInBody(p, token); else if (tn === $.TABLE) tableStartTagInBody(p, token); else if (tn === $.EMBED) areaStartTagInBody(p, token); else if (tn === $.INPUT) inputStartTagInBody(p, token); else if (tn === $.PARAM || tn === $.TRACK) paramStartTagInBody(p, token); else if (tn === $.IMAGE) imageStartTagInBody(p, token); else if (tn !== $.FRAME && tn !== $.TBODY && tn !== $.TFOOT && tn !== $.THEAD) genericStartTagInBody(p, token);
break;

case 6:
if (tn === $.SCRIPT) startTagInHead(p, token); else if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP) addressStartTagInBody(p, token); else if (tn === $.BUTTON) buttonStartTagInBody(p, token); else if (tn === $.STRIKE || tn === $.STRONG) bStartTagInBody(p, token); else if (tn === $.APPLET || tn === $.OBJECT) appletStartTagInBody(p, token); else if (tn === $.KEYGEN) areaStartTagInBody(p, token); else if (tn === $.SOURCE) paramStartTagInBody(p, token); else if (tn === $.IFRAME) iframeStartTagInBody(p, token); else if (tn === $.SELECT) selectStartTagInBody(p, token); else if (tn === $.OPTION) optgroupStartTagInBody(p, token); else genericStartTagInBody(p, token);
break;

case 7:
if (tn === $.BGSOUND || tn === $.COMMAND) startTagInHead(p, token); else if (tn === $.DETAILS || tn === $.ADDRESS || tn === $.ARTICLE || tn === $.SECTION || tn === $.SUMMARY) addressStartTagInBody(p, token); else if (tn === $.LISTING) preStartTagInBody(p, token); else if (tn === $.MARQUEE) appletStartTagInBody(p, token); else if (tn === $.ISINDEX) isindexStartTagInBody(p, token); else if (tn === $.NOEMBED) noembedStartTagInBody(p, token); else if (tn !== $.CAPTION) genericStartTagInBody(p, token);
break;

case 8:
if (tn === $.BASEFONT || tn === $.MENUITEM) menuitemStartTagInBody(p, token); else if (tn === $.FRAMESET) framesetStartTagInBody(p, token); else if (tn === $.FIELDSET) addressStartTagInBody(p, token); else if (tn === $.TEXTAREA) textareaStartTagInBody(p, token); else if (tn === $.TEMPLATE) startTagInHead(p, token); else if (tn === $.NOSCRIPT) noembedStartTagInBody(p, token); else if (tn === $.OPTGROUP) optgroupStartTagInBody(p, token); else if (tn !== $.COLGROUP) genericStartTagInBody(p, token);
break;

case 9:
if (tn === $.PLAINTEXT) plaintextStartTagInBody(p, token); else genericStartTagInBody(p, token);
break;

case 10:
if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) addressStartTagInBody(p, token); else genericStartTagInBody(p, token);
break;

default:
genericStartTagInBody(p, token);
}
}
function bodyEndTagInBody(p, token) {
if (p.openElements.hasInScope($.BODY)) p.insertionMode = AFTER_BODY_MODE; else token.ignored = true;
}
function htmlEndTagInBody(p, token) {
var fakeToken = p._processFakeEndTag($.BODY);
if (!fakeToken.ignored) p._processToken(token);
}
function addressEndTagInBody(p, token) {
var tn = token.tagName;
if (p.openElements.hasInScope(tn)) {
p.openElements.generateImpliedEndTags();
p.openElements.popUntilTagNamePopped(tn);
}
}
function formEndTagInBody(p, token) {
var inTemplate = p.openElements.tmplCount > 0, formElement = p.formElement;
if (!inTemplate) p.formElement = null;
if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {
p.openElements.generateImpliedEndTags();
if (inTemplate) p.openElements.popUntilTagNamePopped($.FORM); else p.openElements.remove(formElement);
}
}
function pEndTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) {
p.openElements.generateImpliedEndTagsWithExclusion($.P);
p.openElements.popUntilTagNamePopped($.P);
} else {
p._processFakeStartTag($.P);
p._processToken(token);
}
}
function liEndTagInBody(p, token) {
if (p.openElements.hasInListItemScope($.LI)) {
p.openElements.generateImpliedEndTagsWithExclusion($.LI);
p.openElements.popUntilTagNamePopped($.LI);
}
}
function ddEndTagInBody(p, token) {
var tn = token.tagName;
if (p.openElements.hasInScope(tn)) {
p.openElements.generateImpliedEndTagsWithExclusion(tn);
p.openElements.popUntilTagNamePopped(tn);
}
}
function numberedHeaderEndTagInBody(p, token) {
if (p.openElements.hasNumberedHeaderInScope()) {
p.openElements.generateImpliedEndTags();
p.openElements.popUntilNumberedHeaderPopped();
}
}
function appletEndTagInBody(p, token) {
var tn = token.tagName;
if (p.openElements.hasInScope(tn)) {
p.openElements.generateImpliedEndTags();
p.openElements.popUntilTagNamePopped(tn);
p.activeFormattingElements.clearToLastMarker();
}
}
function brEndTagInBody(p, token) {
p._processFakeStartTag($.BR);
}
function genericEndTagInBody(p, token) {
var tn = token.tagName;
for (var i = p.openElements.stackTop; i > 0; i--) {
var element = p.openElements.items[i];
if (p.treeAdapter.getTagName(element) === tn) {
p.openElements.generateImpliedEndTagsWithExclusion(tn);
p.openElements.popUntilElementPopped(element);
break;
}
if (p._isSpecialElement(element)) break;
}
}
function endTagInBody(p, token) {
var tn = token.tagName;
switch (tn.length) {
case 1:
if (tn === $.A || tn === $.B || tn === $.I || tn === $.S || tn == $.U) callAdoptionAgency(p, token); else if (tn === $.P) pEndTagInBody(p, token); else genericEndTagInBody(p, token);
break;

case 2:
if (tn == $.DL || tn === $.UL || tn === $.OL) addressEndTagInBody(p, token); else if (tn === $.LI) liEndTagInBody(p, token); else if (tn === $.DD || tn === $.DT) ddEndTagInBody(p, token); else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) numberedHeaderEndTagInBody(p, token); else if (tn === $.BR) brEndTagInBody(p, token); else if (tn === $.EM || tn === $.TT) callAdoptionAgency(p, token); else genericEndTagInBody(p, token);
break;

case 3:
if (tn === $.BIG) callAdoptionAgency(p, token); else if (tn === $.DIR || tn === $.DIV || tn === $.NAV) addressEndTagInBody(p, token); else genericEndTagInBody(p, token);
break;

case 4:
if (tn === $.BODY) bodyEndTagInBody(p, token); else if (tn === $.HTML) htmlEndTagInBody(p, token); else if (tn === $.FORM) formEndTagInBody(p, token); else if (tn === $.CODE || tn === $.FONT || tn === $.NOBR) callAdoptionAgency(p, token); else if (tn === $.MAIN || tn === $.MENU) addressEndTagInBody(p, token); else genericEndTagInBody(p, token);
break;

case 5:
if (tn === $.ASIDE) addressEndTagInBody(p, token); else if (tn === $.SMALL) callAdoptionAgency(p, token); else genericEndTagInBody(p, token);
break;

case 6:
if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP) addressEndTagInBody(p, token); else if (tn === $.APPLET || tn === $.OBJECT) appletEndTagInBody(p, token); else if (tn == $.STRIKE || tn === $.STRONG) callAdoptionAgency(p, token); else genericEndTagInBody(p, token);
break;

case 7:
if (tn === $.ADDRESS || tn === $.ARTICLE || tn === $.DETAILS || tn === $.SECTION || tn === $.SUMMARY) addressEndTagInBody(p, token); else if (tn === $.MARQUEE) appletEndTagInBody(p, token); else genericEndTagInBody(p, token);
break;

case 8:
if (tn === $.FIELDSET) addressEndTagInBody(p, token); else if (tn === $.TEMPLATE) endTagInHead(p, token); else genericEndTagInBody(p, token);
break;

case 10:
if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) addressEndTagInBody(p, token); else genericEndTagInBody(p, token);
break;

default:
genericEndTagInBody(p, token);
}
}
function eofInBody(p, token) {
if (p.tmplInsertionModeStackTop > -1) eofInTemplate(p, token); else p.stopped = true;
}
function endTagInText(p, token) {
if (!p.fragmentContext && p.scriptHandler && token.tagName === $.SCRIPT) p.scriptHandler(p.document, p.openElements.current);
p.openElements.pop();
p.insertionMode = p.originalInsertionMode;
}
function eofInText(p, token) {
p.openElements.pop();
p.insertionMode = p.originalInsertionMode;
p._processToken(token);
}
function characterInTable(p, token) {
var curTn = p.openElements.currentTagName;
if (curTn === $.TABLE || curTn === $.TBODY || curTn === $.TFOOT || curTn === $.THEAD || curTn === $.TR) {
p.pendingCharacterTokens = [];
p.hasNonWhitespacePendingCharacterToken = false;
p.originalInsertionMode = p.insertionMode;
p.insertionMode = IN_TABLE_TEXT_MODE;
p._processToken(token);
} else tokenInTable(p, token);
}
function captionStartTagInTable(p, token) {
p.openElements.clearBackToTableContext();
p.activeFormattingElements.insertMarker();
p._insertElement(token, NS.HTML);
p.insertionMode = IN_CAPTION_MODE;
}
function colgroupStartTagInTable(p, token) {
p.openElements.clearBackToTableContext();
p._insertElement(token, NS.HTML);
p.insertionMode = IN_COLUMN_GROUP_MODE;
}
function colStartTagInTable(p, token) {
p._processFakeStartTag($.COLGROUP);
p._processToken(token);
}
function tbodyStartTagInTable(p, token) {
p.openElements.clearBackToTableContext();
p._insertElement(token, NS.HTML);
p.insertionMode = IN_TABLE_BODY_MODE;
}
function tdStartTagInTable(p, token) {
p._processFakeStartTag($.TBODY);
p._processToken(token);
}
function tableStartTagInTable(p, token) {
var fakeToken = p._processFakeEndTag($.TABLE);
if (!fakeToken.ignored) p._processToken(token);
}
function inputStartTagInTable(p, token) {
var inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);
if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE) p._appendElement(token, NS.HTML); else tokenInTable(p, token);
}
function formStartTagInTable(p, token) {
if (!p.formElement && p.openElements.tmplCount === 0) {
p._insertElement(token, NS.HTML);
p.formElement = p.openElements.current;
p.openElements.pop();
}
}
function startTagInTable(p, token) {
var tn = token.tagName;
switch (tn.length) {
case 2:
if (tn === $.TD || tn === $.TH || tn === $.TR) tdStartTagInTable(p, token); else tokenInTable(p, token);
break;

case 3:
if (tn === $.COL) colStartTagInTable(p, token); else tokenInTable(p, token);
break;

case 4:
if (tn === $.FORM) formStartTagInTable(p, token); else tokenInTable(p, token);
break;

case 5:
if (tn === $.TABLE) tableStartTagInTable(p, token); else if (tn === $.STYLE) startTagInHead(p, token); else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) tbodyStartTagInTable(p, token); else if (tn === $.INPUT) inputStartTagInTable(p, token); else tokenInTable(p, token);
break;

case 6:
if (tn === $.SCRIPT) startTagInHead(p, token); else tokenInTable(p, token);
break;

case 7:
if (tn === $.CAPTION) captionStartTagInTable(p, token); else tokenInTable(p, token);
break;

case 8:
if (tn === $.COLGROUP) colgroupStartTagInTable(p, token); else if (tn === $.TEMPLATE) startTagInHead(p, token); else tokenInTable(p, token);
break;

default:
tokenInTable(p, token);
}
}
function endTagInTable(p, token) {
var tn = token.tagName;
if (tn === $.TABLE) {
if (p.openElements.hasInTableScope($.TABLE)) {
p.openElements.popUntilTagNamePopped($.TABLE);
p._resetInsertionMode();
} else token.ignored = true;
} else if (tn === $.TEMPLATE) endTagInHead(p, token); else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) {
tokenInTable(p, token);
}
}
function tokenInTable(p, token) {
var savedFosterParentingState = p.fosterParentingEnabled;
p.fosterParentingEnabled = true;
p._processTokenInBodyMode(token);
p.fosterParentingEnabled = savedFosterParentingState;
}
function whitespaceCharacterInTableText(p, token) {
p.pendingCharacterTokens.push(token);
}
function characterInTableText(p, token) {
p.pendingCharacterTokens.push(token);
p.hasNonWhitespacePendingCharacterToken = true;
}
function tokenInTableText(p, token) {
if (p.hasNonWhitespacePendingCharacterToken) {
for (var i = 0; i < p.pendingCharacterTokens.length; i++) tokenInTable(p, p.pendingCharacterTokens[i]);
} else {
for (var i = 0; i < p.pendingCharacterTokens.length; i++) p._insertCharacters(p.pendingCharacterTokens[i]);
}
p.insertionMode = p.originalInsertionMode;
p._processToken(token);
}
function startTagInCaption(p, token) {
var tn = token.tagName;
if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
var fakeToken = p._processFakeEndTag($.CAPTION);
if (!fakeToken.ignored) p._processToken(token);
} else startTagInBody(p, token);
}
function endTagInCaption(p, token) {
var tn = token.tagName;
if (tn === $.CAPTION) {
if (p.openElements.hasInTableScope($.CAPTION)) {
p.openElements.generateImpliedEndTags();
p.openElements.popUntilTagNamePopped($.CAPTION);
p.activeFormattingElements.clearToLastMarker();
p.insertionMode = IN_TABLE_MODE;
} else token.ignored = true;
} else if (tn === $.TABLE) {
var fakeToken = p._processFakeEndTag($.CAPTION);
if (!fakeToken.ignored) p._processToken(token);
} else if (tn !== $.BODY && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) {
endTagInBody(p, token);
}
}
function startTagInColumnGroup(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.COL) p._appendElement(token, NS.HTML); else if (tn === $.TEMPLATE) startTagInHead(p, token); else tokenInColumnGroup(p, token);
}
function endTagInColumnGroup(p, token) {
var tn = token.tagName;
if (tn === $.COLGROUP) {
if (p.openElements.currentTagName !== $.COLGROUP) token.ignored = true; else {
p.openElements.pop();
p.insertionMode = IN_TABLE_MODE;
}
} else if (tn === $.TEMPLATE) endTagInHead(p, token); else if (tn !== $.COL) tokenInColumnGroup(p, token);
}
function tokenInColumnGroup(p, token) {
var fakeToken = p._processFakeEndTag($.COLGROUP);
if (!fakeToken.ignored) p._processToken(token);
}
function startTagInTableBody(p, token) {
var tn = token.tagName;
if (tn === $.TR) {
p.openElements.clearBackToTableBodyContext();
p._insertElement(token, NS.HTML);
p.insertionMode = IN_ROW_MODE;
} else if (tn === $.TH || tn === $.TD) {
p._processFakeStartTag($.TR);
p._processToken(token);
} else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
if (p.openElements.hasTableBodyContextInTableScope()) {
p.openElements.clearBackToTableBodyContext();
p._processFakeEndTag(p.openElements.currentTagName);
p._processToken(token);
}
} else startTagInTable(p, token);
}
function endTagInTableBody(p, token) {
var tn = token.tagName;
if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
if (p.openElements.hasInTableScope(tn)) {
p.openElements.clearBackToTableBodyContext();
p.openElements.pop();
p.insertionMode = IN_TABLE_MODE;
}
} else if (tn === $.TABLE) {
if (p.openElements.hasTableBodyContextInTableScope()) {
p.openElements.clearBackToTableBodyContext();
p._processFakeEndTag(p.openElements.currentTagName);
p._processToken(token);
}
} else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP || tn !== $.HTML && tn !== $.TD && tn !== $.TH && tn !== $.TR) {
endTagInTable(p, token);
}
}
function startTagInRow(p, token) {
var tn = token.tagName;
if (tn === $.TH || tn === $.TD) {
p.openElements.clearBackToTableRowContext();
p._insertElement(token, NS.HTML);
p.insertionMode = IN_CELL_MODE;
p.activeFormattingElements.insertMarker();
} else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
var fakeToken = p._processFakeEndTag($.TR);
if (!fakeToken.ignored) p._processToken(token);
} else startTagInTable(p, token);
}
function endTagInRow(p, token) {
var tn = token.tagName;
if (tn === $.TR) {
if (p.openElements.hasInTableScope($.TR)) {
p.openElements.clearBackToTableRowContext();
p.openElements.pop();
p.insertionMode = IN_TABLE_BODY_MODE;
} else token.ignored = true;
} else if (tn === $.TABLE) {
var fakeToken = p._processFakeEndTag($.TR);
if (!fakeToken.ignored) p._processToken(token);
} else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
if (p.openElements.hasInTableScope(tn)) {
p._processFakeEndTag($.TR);
p._processToken(token);
}
} else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP || tn !== $.HTML && tn !== $.TD && tn !== $.TH) {
endTagInTable(p, token);
}
}
function startTagInCell(p, token) {
var tn = token.tagName;
if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {
p._closeTableCell();
p._processToken(token);
}
} else startTagInBody(p, token);
}
function endTagInCell(p, token) {
var tn = token.tagName;
if (tn === $.TD || tn === $.TH) {
if (p.openElements.hasInTableScope(tn)) {
p.openElements.generateImpliedEndTags();
p.openElements.popUntilTagNamePopped(tn);
p.activeFormattingElements.clearToLastMarker();
p.insertionMode = IN_ROW_MODE;
}
} else if (tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
if (p.openElements.hasInTableScope(tn)) {
p._closeTableCell();
p._processToken(token);
}
} else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML) endTagInBody(p, token);
}
function startTagInSelect(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.OPTION) {
if (p.openElements.currentTagName === $.OPTION) p._processFakeEndTag($.OPTION);
p._insertElement(token, NS.HTML);
} else if (tn === $.OPTGROUP) {
if (p.openElements.currentTagName === $.OPTION) p._processFakeEndTag($.OPTION);
if (p.openElements.currentTagName === $.OPTGROUP) p._processFakeEndTag($.OPTGROUP);
p._insertElement(token, NS.HTML);
} else if (tn === $.SELECT) p._processFakeEndTag($.SELECT); else if (tn === $.INPUT || tn === $.KEYGEN || tn === $.TEXTAREA) {
if (p.openElements.hasInSelectScope($.SELECT)) {
p._processFakeEndTag($.SELECT);
p._processToken(token);
}
} else if (tn === $.SCRIPT || tn === $.TEMPLATE) startTagInHead(p, token);
}
function endTagInSelect(p, token) {
var tn = token.tagName;
if (tn === $.OPTGROUP) {
var prevOpenElement = p.openElements.items[p.openElements.stackTop - 1], prevOpenElementTn = prevOpenElement && p.treeAdapter.getTagName(prevOpenElement);
if (p.openElements.currentTagName === $.OPTION && prevOpenElementTn === $.OPTGROUP) p._processFakeEndTag($.OPTION);
if (p.openElements.currentTagName === $.OPTGROUP) p.openElements.pop();
} else if (tn === $.OPTION) {
if (p.openElements.currentTagName === $.OPTION) p.openElements.pop();
} else if (tn === $.SELECT && p.openElements.hasInSelectScope($.SELECT)) {
p.openElements.popUntilTagNamePopped($.SELECT);
p._resetInsertionMode();
} else if (tn === $.TEMPLATE) endTagInHead(p, token);
}
function startTagInSelectInTable(p, token) {
var tn = token.tagName;
if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
p._processFakeEndTag($.SELECT);
p._processToken(token);
} else startTagInSelect(p, token);
}
function endTagInSelectInTable(p, token) {
var tn = token.tagName;
if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
if (p.openElements.hasInTableScope(tn)) {
p._processFakeEndTag($.SELECT);
p._processToken(token);
}
} else endTagInSelect(p, token);
}
function startTagInTemplate(p, token) {
var tn = token.tagName;
if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
startTagInHead(p, token);
} else {
var newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn] || IN_BODY_MODE;
p._popTmplInsertionMode();
p._pushTmplInsertionMode(newInsertionMode);
p.insertionMode = newInsertionMode;
p._processToken(token);
}
}
function endTagInTemplate(p, token) {
if (token.tagName === $.TEMPLATE) endTagInHead(p, token);
}
function eofInTemplate(p, token) {
if (p.openElements.tmplCount > 0) {
p.openElements.popUntilTemplatePopped();
p.activeFormattingElements.clearToLastMarker();
p._popTmplInsertionMode();
p._resetInsertionMode();
p._processToken(token);
} else p.stopped = true;
}
function startTagAfterBody(p, token) {
if (token.tagName === $.HTML) startTagInBody(p, token); else tokenAfterBody(p, token);
}
function endTagAfterBody(p, token) {
if (token.tagName === $.HTML) {
if (!p.fragmentContext) p.insertionMode = AFTER_AFTER_BODY_MODE;
} else tokenAfterBody(p, token);
}
function tokenAfterBody(p, token) {
p.insertionMode = IN_BODY_MODE;
p._processToken(token);
}
function startTagInFrameset(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.FRAMESET) p._insertElement(token, NS.HTML); else if (tn === $.FRAME) p._appendElement(token, NS.HTML); else if (tn === $.NOFRAMES) startTagInHead(p, token);
}
function endTagInFrameset(p, token) {
if (token.tagName === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
p.openElements.pop();
if (!p.fragmentContext && p.openElements.currentTagName !== $.FRAMESET) p.insertionMode = AFTER_FRAMESET_MODE;
}
}
function startTagAfterFrameset(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.NOFRAMES) startTagInHead(p, token);
}
function endTagAfterFrameset(p, token) {
if (token.tagName === $.HTML) p.insertionMode = AFTER_AFTER_FRAMESET_MODE;
}
function startTagAfterAfterBody(p, token) {
if (token.tagName === $.HTML) startTagInBody(p, token); else tokenAfterAfterBody(p, token);
}
function tokenAfterAfterBody(p, token) {
p.insertionMode = IN_BODY_MODE;
p._processToken(token);
}
function startTagAfterAfterFrameset(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.NOFRAMES) startTagInHead(p, token);
}
function nullCharacterInForeignContent(p, token) {
token.chars = UNICODE.REPLACEMENT_CHARACTER;
p._insertCharacters(token);
}
function characterInForeignContent(p, token) {
p._insertCharacters(token);
p.framesetOk = false;
}
function startTagInForeignContent(p, token) {
if (ForeignContent.causesExit(token) && !p.fragmentContext) {
while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML && !p._isMathMLTextIntegrationPoint(p.openElements.current) && !p._isHtmlIntegrationPoint(p.openElements.current)) {
p.openElements.pop();
}
p._processToken(token);
} else {
var current = p._getAdjustedCurrentElement(), currentNs = p.treeAdapter.getNamespaceURI(current);
if (currentNs === NS.MATHML) ForeignContent.adjustTokenMathMLAttrs(token); else if (currentNs === NS.SVG) {
ForeignContent.adjustTokenSVGTagName(token);
ForeignContent.adjustTokenSVGAttrs(token);
}
ForeignContent.adjustTokenXMLAttrs(token);
if (token.selfClosing) p._appendElement(token, currentNs); else p._insertElement(token, currentNs);
}
}
function endTagInForeignContent(p, token) {
for (var i = p.openElements.stackTop; i > 0; i--) {
var element = p.openElements.items[i];
if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
p._processToken(token);
break;
}
if (p.treeAdapter.getTagName(element).toLowerCase() === token.tagName) {
p.openElements.popUntilElementPopped(element);
break;
}
}
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Preprocessor = __webpack_require__(278), LocationInfoMixin = __webpack_require__(280), UNICODE = __webpack_require__(279), NAMED_ENTITY_TRIE = __webpack_require__(281);
var $ = UNICODE.CODE_POINTS, $$ = UNICODE.CODE_POINT_SEQUENCES;
var NUMERIC_ENTITY_REPLACEMENTS = {
0: 65533,
13: 13,
128: 8364,
129: 129,
130: 8218,
131: 402,
132: 8222,
133: 8230,
134: 8224,
135: 8225,
136: 710,
137: 8240,
138: 352,
139: 8249,
140: 338,
141: 141,
142: 381,
143: 143,
144: 144,
145: 8216,
146: 8217,
147: 8220,
148: 8221,
149: 8226,
150: 8211,
151: 8212,
152: 732,
153: 8482,
154: 353,
155: 8250,
156: 339,
157: 157,
158: 382,
159: 376
};
var DATA_STATE = "DATA_STATE", CHARACTER_REFERENCE_IN_DATA_STATE = "CHARACTER_REFERENCE_IN_DATA_STATE", RCDATA_STATE = "RCDATA_STATE", CHARACTER_REFERENCE_IN_RCDATA_STATE = "CHARACTER_REFERENCE_IN_RCDATA_STATE", RAWTEXT_STATE = "RAWTEXT_STATE", SCRIPT_DATA_STATE = "SCRIPT_DATA_STATE", PLAINTEXT_STATE = "PLAINTEXT_STATE", TAG_OPEN_STATE = "TAG_OPEN_STATE", END_TAG_OPEN_STATE = "END_TAG_OPEN_STATE", TAG_NAME_STATE = "TAG_NAME_STATE", RCDATA_LESS_THAN_SIGN_STATE = "RCDATA_LESS_THAN_SIGN_STATE", RCDATA_END_TAG_OPEN_STATE = "RCDATA_END_TAG_OPEN_STATE", RCDATA_END_TAG_NAME_STATE = "RCDATA_END_TAG_NAME_STATE", RAWTEXT_LESS_THAN_SIGN_STATE = "RAWTEXT_LESS_THAN_SIGN_STATE", RAWTEXT_END_TAG_OPEN_STATE = "RAWTEXT_END_TAG_OPEN_STATE", RAWTEXT_END_TAG_NAME_STATE = "RAWTEXT_END_TAG_NAME_STATE", SCRIPT_DATA_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_LESS_THAN_SIGN_STATE", SCRIPT_DATA_END_TAG_OPEN_STATE = "SCRIPT_DATA_END_TAG_OPEN_STATE", SCRIPT_DATA_END_TAG_NAME_STATE = "SCRIPT_DATA_END_TAG_NAME_STATE", SCRIPT_DATA_ESCAPE_START_STATE = "SCRIPT_DATA_ESCAPE_START_STATE", SCRIPT_DATA_ESCAPE_START_DASH_STATE = "SCRIPT_DATA_ESCAPE_START_DASH_STATE", SCRIPT_DATA_ESCAPED_STATE = "SCRIPT_DATA_ESCAPED_STATE", SCRIPT_DATA_ESCAPED_DASH_STATE = "SCRIPT_DATA_ESCAPED_DASH_STATE", SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = "SCRIPT_DATA_ESCAPED_DASH_DASH_STATE", SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE", SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = "SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE", SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = "SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE", SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = "SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE", SCRIPT_DATA_DOUBLE_ESCAPED_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_STATE", SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE", SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE", SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE", SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = "SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE", BEFORE_ATTRIBUTE_NAME_STATE = "BEFORE_ATTRIBUTE_NAME_STATE", ATTRIBUTE_NAME_STATE = "ATTRIBUTE_NAME_STATE", AFTER_ATTRIBUTE_NAME_STATE = "AFTER_ATTRIBUTE_NAME_STATE", BEFORE_ATTRIBUTE_VALUE_STATE = "BEFORE_ATTRIBUTE_VALUE_STATE", ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = "ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE", ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = "ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE", ATTRIBUTE_VALUE_UNQUOTED_STATE = "ATTRIBUTE_VALUE_UNQUOTED_STATE", CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE = "CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE", AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = "AFTER_ATTRIBUTE_VALUE_QUOTED_STATE", SELF_CLOSING_START_TAG_STATE = "SELF_CLOSING_START_TAG_STATE", BOGUS_COMMENT_STATE = "BOGUS_COMMENT_STATE", MARKUP_DECLARATION_OPEN_STATE = "MARKUP_DECLARATION_OPEN_STATE", COMMENT_START_STATE = "COMMENT_START_STATE", COMMENT_START_DASH_STATE = "COMMENT_START_DASH_STATE", COMMENT_STATE = "COMMENT_STATE", COMMENT_END_DASH_STATE = "COMMENT_END_DASH_STATE", COMMENT_END_STATE = "COMMENT_END_STATE", COMMENT_END_BANG_STATE = "COMMENT_END_BANG_STATE", DOCTYPE_STATE = "DOCTYPE_STATE", BEFORE_DOCTYPE_NAME_STATE = "BEFORE_DOCTYPE_NAME_STATE", DOCTYPE_NAME_STATE = "DOCTYPE_NAME_STATE", AFTER_DOCTYPE_NAME_STATE = "AFTER_DOCTYPE_NAME_STATE", AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = "AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE", BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = "BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE", DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = "DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE", DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = "DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE", AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = "AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE", BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = "BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE", AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = "AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE", BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = "BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE", DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = "DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE", DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = "DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE", AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = "AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE", BOGUS_DOCTYPE_STATE = "BOGUS_DOCTYPE_STATE", CDATA_SECTION_STATE = "CDATA_SECTION_STATE";
function isWhitespace(cp) {
return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;
}
function isAsciiDigit(cp) {
return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;
}
function isAsciiUpper(cp) {
return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;
}
function isAsciiLower(cp) {
return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;
}
function isAsciiAlphaNumeric(cp) {
return isAsciiDigit(cp) || isAsciiUpper(cp) || isAsciiLower(cp);
}
function isDigit(cp, isHex) {
return isAsciiDigit(cp) || isHex && (cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F || cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F);
}
function isReservedCodePoint(cp) {
return cp >= 55296 && cp <= 57343 || cp > 1114111;
}
function toAsciiLowerCodePoint(cp) {
return cp + 32;
}
function toChar(cp) {
if (cp <= 65535) return String.fromCharCode(cp);
cp -= 65536;
return String.fromCharCode(cp >>> 10 & 1023 | 55296) + String.fromCharCode(56320 | cp & 1023);
}
function toAsciiLowerChar(cp) {
return String.fromCharCode(toAsciiLowerCodePoint(cp));
}
var Tokenizer = module.exports = function(html, options) {
this.disableEntitiesDecoding = false;
this.preprocessor = new Preprocessor(html);
this.tokenQueue = [];
this.allowCDATA = false;
this.state = DATA_STATE;
this.returnState = "";
this.consumptionPos = 0;
this.tempBuff = [];
this.additionalAllowedCp = void 0;
this.lastStartTagName = "";
this.currentCharacterToken = null;
this.currentToken = null;
this.currentAttr = null;
if (options) {
this.disableEntitiesDecoding = !options.decodeHtmlEntities;
if (options.locationInfo) LocationInfoMixin.assign(this);
}
};
Tokenizer.CHARACTER_TOKEN = "CHARACTER_TOKEN";
Tokenizer.NULL_CHARACTER_TOKEN = "NULL_CHARACTER_TOKEN";
Tokenizer.WHITESPACE_CHARACTER_TOKEN = "WHITESPACE_CHARACTER_TOKEN";
Tokenizer.START_TAG_TOKEN = "START_TAG_TOKEN";
Tokenizer.END_TAG_TOKEN = "END_TAG_TOKEN";
Tokenizer.COMMENT_TOKEN = "COMMENT_TOKEN";
Tokenizer.DOCTYPE_TOKEN = "DOCTYPE_TOKEN";
Tokenizer.EOF_TOKEN = "EOF_TOKEN";
Tokenizer.MODE = Tokenizer.prototype.MODE = {
DATA: DATA_STATE,
RCDATA: RCDATA_STATE,
RAWTEXT: RAWTEXT_STATE,
SCRIPT_DATA: SCRIPT_DATA_STATE,
PLAINTEXT: PLAINTEXT_STATE
};
Tokenizer.getTokenAttr = function(token, attrName) {
for (var i = token.attrs.length - 1; i >= 0; i--) {
if (token.attrs[i].name === attrName) return token.attrs[i].value;
}
return null;
};
Tokenizer.prototype.getNextToken = function() {
while (!this.tokenQueue.length) this[this.state](this._consume());
return this.tokenQueue.shift();
};
Tokenizer.prototype._consume = function() {
this.consumptionPos++;
return this.preprocessor.advanceAndPeekCodePoint();
};
Tokenizer.prototype._unconsume = function() {
this.consumptionPos--;
this.preprocessor.retreat();
};
Tokenizer.prototype._unconsumeSeveral = function(count) {
while (count--) this._unconsume();
};
Tokenizer.prototype._reconsumeInState = function(state) {
this.state = state;
this._unconsume();
};
Tokenizer.prototype._consumeSubsequentIfMatch = function(pattern, startCp, caseSensitive) {
var rollbackPos = this.consumptionPos, isMatch = true, patternLength = pattern.length, patternPos = 0, cp = startCp, patternCp = void 0;
for (;patternPos < patternLength; patternPos++) {
if (patternPos > 0) cp = this._consume();
if (cp === $.EOF) {
isMatch = false;
break;
}
patternCp = pattern[patternPos];
if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {
isMatch = false;
break;
}
}
if (!isMatch) this._unconsumeSeveral(this.consumptionPos - rollbackPos);
return isMatch;
};
Tokenizer.prototype._lookahead = function() {
var cp = this.preprocessor.advanceAndPeekCodePoint();
this.preprocessor.retreat();
return cp;
};
Tokenizer.prototype.isTempBufferEqualToScriptString = function() {
if (this.tempBuff.length !== $$.SCRIPT_STRING.length) return false;
for (var i = 0; i < this.tempBuff.length; i++) {
if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) return false;
}
return true;
};
Tokenizer.prototype.buildStartTagToken = function(tagName) {
return {
type: Tokenizer.START_TAG_TOKEN,
tagName: tagName,
selfClosing: false,
attrs: []
};
};
Tokenizer.prototype.buildEndTagToken = function(tagName) {
return {
type: Tokenizer.END_TAG_TOKEN,
tagName: tagName,
ignored: false,
attrs: []
};
};
Tokenizer.prototype._createStartTagToken = function(tagNameFirstCh) {
this.currentToken = this.buildStartTagToken(tagNameFirstCh);
};
Tokenizer.prototype._createEndTagToken = function(tagNameFirstCh) {
this.currentToken = this.buildEndTagToken(tagNameFirstCh);
};
Tokenizer.prototype._createCommentToken = function() {
this.currentToken = {
type: Tokenizer.COMMENT_TOKEN,
data: ""
};
};
Tokenizer.prototype._createDoctypeToken = function(doctypeNameFirstCh) {
this.currentToken = {
type: Tokenizer.DOCTYPE_TOKEN,
name: doctypeNameFirstCh || "",
forceQuirks: false,
publicId: null,
systemId: null
};
};
Tokenizer.prototype._createCharacterToken = function(type, ch) {
this.currentCharacterToken = {
type: type,
chars: ch
};
};
Tokenizer.prototype._createAttr = function(attrNameFirstCh) {
this.currentAttr = {
name: attrNameFirstCh,
value: ""
};
};
Tokenizer.prototype._isDuplicateAttr = function() {
return Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) !== null;
};
Tokenizer.prototype._leaveAttrName = function(toState) {
this.state = toState;
if (!this._isDuplicateAttr()) this.currentToken.attrs.push(this.currentAttr);
};
Tokenizer.prototype._isAppropriateEndTagToken = function() {
return this.lastStartTagName === this.currentToken.tagName;
};
Tokenizer.prototype._emitCurrentToken = function() {
this._emitCurrentCharacterToken();
if (this.currentToken.type === Tokenizer.START_TAG_TOKEN) this.lastStartTagName = this.currentToken.tagName;
this.tokenQueue.push(this.currentToken);
this.currentToken = null;
};
Tokenizer.prototype._emitCurrentCharacterToken = function() {
if (this.currentCharacterToken) {
this.tokenQueue.push(this.currentCharacterToken);
this.currentCharacterToken = null;
}
};
Tokenizer.prototype._emitEOFToken = function() {
this._emitCurrentCharacterToken();
this.tokenQueue.push({
type: Tokenizer.EOF_TOKEN
});
};
Tokenizer.prototype._appendCharToCurrentCharacterToken = function(type, ch) {
if (this.currentCharacterToken && this.currentCharacterToken.type !== type) this._emitCurrentCharacterToken();
if (this.currentCharacterToken) this.currentCharacterToken.chars += ch; else this._createCharacterToken(type, ch);
};
Tokenizer.prototype._emitCodePoint = function(cp) {
var type = Tokenizer.CHARACTER_TOKEN;
if (isWhitespace(cp)) type = Tokenizer.WHITESPACE_CHARACTER_TOKEN; else if (cp === $.NULL) type = Tokenizer.NULL_CHARACTER_TOKEN;
this._appendCharToCurrentCharacterToken(type, toChar(cp));
};
Tokenizer.prototype._emitSeveralCodePoints = function(codePoints) {
for (var i = 0; i < codePoints.length; i++) this._emitCodePoint(codePoints[i]);
};
Tokenizer.prototype._emitChar = function(ch) {
this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);
};
Tokenizer.prototype._consumeNumericEntity = function(isHex) {
var digits = "", nextCp = void 0;
do {
digits += toChar(this._consume());
nextCp = this._lookahead();
} while (nextCp !== $.EOF && isDigit(nextCp, isHex));
if (this._lookahead() === $.SEMICOLON) this._consume();
var referencedCp = parseInt(digits, isHex ? 16 : 10), replacement = NUMERIC_ENTITY_REPLACEMENTS[referencedCp];
if (replacement) return replacement;
if (isReservedCodePoint(referencedCp)) return $.REPLACEMENT_CHARACTER;
return referencedCp;
};
Tokenizer.prototype._consumeNamedEntity = function(startCp, inAttr) {
var referencedCodePoints = null, entityCodePointsCount = 0, cp = startCp, leaf = NAMED_ENTITY_TRIE[cp], consumedCount = 1, semicolonTerminated = false;
for (;leaf && cp !== $.EOF; cp = this._consume(), consumedCount++, leaf = leaf.l && leaf.l[cp]) {
if (leaf.c) {
referencedCodePoints = leaf.c;
entityCodePointsCount = consumedCount;
if (cp === $.SEMICOLON) {
semicolonTerminated = true;
break;
}
}
}
if (referencedCodePoints) {
if (!semicolonTerminated) {
this._unconsumeSeveral(consumedCount - entityCodePointsCount);
if (inAttr) {
var nextCp = this._lookahead();
if (nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp)) {
this._unconsumeSeveral(entityCodePointsCount);
return null;
}
}
}
return referencedCodePoints;
}
this._unconsumeSeveral(consumedCount);
return null;
};
Tokenizer.prototype._consumeCharacterReference = function(startCp, inAttr) {
if (this.disableEntitiesDecoding || isWhitespace(startCp) || startCp === $.GREATER_THAN_SIGN || startCp === $.AMPERSAND || startCp === this.additionalAllowedCp || startCp === $.EOF) {
this._unconsume();
return null;
} else if (startCp === $.NUMBER_SIGN) {
var isHex = false, nextCp = this._lookahead();
if (nextCp === $.LATIN_SMALL_X || nextCp === $.LATIN_CAPITAL_X) {
this._consume();
isHex = true;
}
nextCp = this._lookahead();
if (nextCp !== $.EOF && isDigit(nextCp, isHex)) return [ this._consumeNumericEntity(isHex) ]; else {
this._unconsumeSeveral(isHex ? 2 : 1);
return null;
}
} else return this._consumeNamedEntity(startCp, inAttr);
};
var _ = Tokenizer.prototype;
_[DATA_STATE] = function dataState(cp) {
if (cp === $.AMPERSAND) this.state = CHARACTER_REFERENCE_IN_DATA_STATE; else if (cp === $.LESS_THAN_SIGN) this.state = TAG_OPEN_STATE; else if (cp === $.NULL) this._emitCodePoint(cp); else if (cp === $.EOF) this._emitEOFToken(); else this._emitCodePoint(cp);
};
_[CHARACTER_REFERENCE_IN_DATA_STATE] = function characterReferenceInDataState(cp) {
this.state = DATA_STATE;
this.additionalAllowedCp = void 0;
var referencedCodePoints = this._consumeCharacterReference(cp, false);
if (referencedCodePoints) this._emitSeveralCodePoints(referencedCodePoints); else this._emitChar("&");
};
_[RCDATA_STATE] = function rcdataState(cp) {
if (cp === $.AMPERSAND) this.state = CHARACTER_REFERENCE_IN_RCDATA_STATE; else if (cp === $.LESS_THAN_SIGN) this.state = RCDATA_LESS_THAN_SIGN_STATE; else if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER); else if (cp === $.EOF) this._emitEOFToken(); else this._emitCodePoint(cp);
};
_[CHARACTER_REFERENCE_IN_RCDATA_STATE] = function characterReferenceInRcdataState(cp) {
this.state = RCDATA_STATE;
this.additionalAllowedCp = void 0;
var referencedCodePoints = this._consumeCharacterReference(cp, false);
if (referencedCodePoints) this._emitSeveralCodePoints(referencedCodePoints); else this._emitChar("&");
};
_[RAWTEXT_STATE] = function rawtextState(cp) {
if (cp === $.LESS_THAN_SIGN) this.state = RAWTEXT_LESS_THAN_SIGN_STATE; else if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER); else if (cp === $.EOF) this._emitEOFToken(); else this._emitCodePoint(cp);
};
_[SCRIPT_DATA_STATE] = function scriptDataState(cp) {
if (cp === $.LESS_THAN_SIGN) this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE; else if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER); else if (cp === $.EOF) this._emitEOFToken(); else this._emitCodePoint(cp);
};
_[PLAINTEXT_STATE] = function plaintextState(cp) {
if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER); else if (cp === $.EOF) this._emitEOFToken(); else this._emitCodePoint(cp);
};
_[TAG_OPEN_STATE] = function tagOpenState(cp) {
if (cp === $.EXCLAMATION_MARK) this.state = MARKUP_DECLARATION_OPEN_STATE; else if (cp === $.SOLIDUS) this.state = END_TAG_OPEN_STATE; else if (isAsciiUpper(cp)) {
this._createStartTagToken(toAsciiLowerChar(cp));
this.state = TAG_NAME_STATE;
} else if (isAsciiLower(cp)) {
this._createStartTagToken(toChar(cp));
this.state = TAG_NAME_STATE;
} else if (cp === $.QUESTION_MARK) {
this[BOGUS_COMMENT_STATE](cp);
} else {
this._emitChar("<");
this._reconsumeInState(DATA_STATE);
}
};
_[END_TAG_OPEN_STATE] = function endTagOpenState(cp) {
if (isAsciiUpper(cp)) {
this._createEndTagToken(toAsciiLowerChar(cp));
this.state = TAG_NAME_STATE;
} else if (isAsciiLower(cp)) {
this._createEndTagToken(toChar(cp));
this.state = TAG_NAME_STATE;
} else if (cp === $.GREATER_THAN_SIGN) this.state = DATA_STATE; else if (cp === $.EOF) {
this._reconsumeInState(DATA_STATE);
this._emitChar("<");
this._emitChar("/");
} else {
this[BOGUS_COMMENT_STATE](cp);
}
};
_[TAG_NAME_STATE] = function tagNameState(cp) {
if (isWhitespace(cp)) this.state = BEFORE_ATTRIBUTE_NAME_STATE; else if (cp === $.SOLIDUS) this.state = SELF_CLOSING_START_TAG_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (isAsciiUpper(cp)) this.currentToken.tagName += toAsciiLowerChar(cp); else if (cp === $.NULL) this.currentToken.tagName += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this.currentToken.tagName += toChar(cp);
};
_[RCDATA_LESS_THAN_SIGN_STATE] = function rcdataLessThanSignState(cp) {
if (cp === $.SOLIDUS) {
this.tempBuff = [];
this.state = RCDATA_END_TAG_OPEN_STATE;
} else {
this._emitChar("<");
this._reconsumeInState(RCDATA_STATE);
}
};
_[RCDATA_END_TAG_OPEN_STATE] = function rcdataEndTagOpenState(cp) {
if (isAsciiUpper(cp)) {
this._createEndTagToken(toAsciiLowerChar(cp));
this.tempBuff.push(cp);
this.state = RCDATA_END_TAG_NAME_STATE;
} else if (isAsciiLower(cp)) {
this._createEndTagToken(toChar(cp));
this.tempBuff.push(cp);
this.state = RCDATA_END_TAG_NAME_STATE;
} else {
this._emitChar("<");
this._emitChar("/");
this._reconsumeInState(RCDATA_STATE);
}
};
_[RCDATA_END_TAG_NAME_STATE] = function rcdataEndTagNameState(cp) {
if (isAsciiUpper(cp)) {
this.currentToken.tagName += toAsciiLowerChar(cp);
this.tempBuff.push(cp);
} else if (isAsciiLower(cp)) {
this.currentToken.tagName += toChar(cp);
this.tempBuff.push(cp);
} else {
if (this._isAppropriateEndTagToken()) {
if (isWhitespace(cp)) {
this.state = BEFORE_ATTRIBUTE_NAME_STATE;
return;
}
if (cp === $.SOLIDUS) {
this.state = SELF_CLOSING_START_TAG_STATE;
return;
}
if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
return;
}
}
this._emitChar("<");
this._emitChar("/");
this._emitSeveralCodePoints(this.tempBuff);
this._reconsumeInState(RCDATA_STATE);
}
};
_[RAWTEXT_LESS_THAN_SIGN_STATE] = function rawtextLessThanSignState(cp) {
if (cp === $.SOLIDUS) {
this.tempBuff = [];
this.state = RAWTEXT_END_TAG_OPEN_STATE;
} else {
this._emitChar("<");
this._reconsumeInState(RAWTEXT_STATE);
}
};
_[RAWTEXT_END_TAG_OPEN_STATE] = function rawtextEndTagOpenState(cp) {
if (isAsciiUpper(cp)) {
this._createEndTagToken(toAsciiLowerChar(cp));
this.tempBuff.push(cp);
this.state = RAWTEXT_END_TAG_NAME_STATE;
} else if (isAsciiLower(cp)) {
this._createEndTagToken(toChar(cp));
this.tempBuff.push(cp);
this.state = RAWTEXT_END_TAG_NAME_STATE;
} else {
this._emitChar("<");
this._emitChar("/");
this._reconsumeInState(RAWTEXT_STATE);
}
};
_[RAWTEXT_END_TAG_NAME_STATE] = function rawtextEndTagNameState(cp) {
if (isAsciiUpper(cp)) {
this.currentToken.tagName += toAsciiLowerChar(cp);
this.tempBuff.push(cp);
} else if (isAsciiLower(cp)) {
this.currentToken.tagName += toChar(cp);
this.tempBuff.push(cp);
} else {
if (this._isAppropriateEndTagToken()) {
if (isWhitespace(cp)) {
this.state = BEFORE_ATTRIBUTE_NAME_STATE;
return;
}
if (cp === $.SOLIDUS) {
this.state = SELF_CLOSING_START_TAG_STATE;
return;
}
if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
return;
}
}
this._emitChar("<");
this._emitChar("/");
this._emitSeveralCodePoints(this.tempBuff);
this._reconsumeInState(RAWTEXT_STATE);
}
};
_[SCRIPT_DATA_LESS_THAN_SIGN_STATE] = function scriptDataLessThanSignState(cp) {
if (cp === $.SOLIDUS) {
this.tempBuff = [];
this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;
} else if (cp === $.EXCLAMATION_MARK) {
this.state = SCRIPT_DATA_ESCAPE_START_STATE;
this._emitChar("<");
this._emitChar("!");
} else {
this._emitChar("<");
this._reconsumeInState(SCRIPT_DATA_STATE);
}
};
_[SCRIPT_DATA_END_TAG_OPEN_STATE] = function scriptDataEndTagOpenState(cp) {
if (isAsciiUpper(cp)) {
this._createEndTagToken(toAsciiLowerChar(cp));
this.tempBuff.push(cp);
this.state = SCRIPT_DATA_END_TAG_NAME_STATE;
} else if (isAsciiLower(cp)) {
this._createEndTagToken(toChar(cp));
this.tempBuff.push(cp);
this.state = SCRIPT_DATA_END_TAG_NAME_STATE;
} else {
this._emitChar("<");
this._emitChar("/");
this._reconsumeInState(SCRIPT_DATA_STATE);
}
};
_[SCRIPT_DATA_END_TAG_NAME_STATE] = function scriptDataEndTagNameState(cp) {
if (isAsciiUpper(cp)) {
this.currentToken.tagName += toAsciiLowerChar(cp);
this.tempBuff.push(cp);
} else if (isAsciiLower(cp)) {
this.currentToken.tagName += toChar(cp);
this.tempBuff.push(cp);
} else {
if (this._isAppropriateEndTagToken()) {
if (isWhitespace(cp)) {
this.state = BEFORE_ATTRIBUTE_NAME_STATE;
return;
} else if (cp === $.SOLIDUS) {
this.state = SELF_CLOSING_START_TAG_STATE;
return;
} else if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
return;
}
}
this._emitChar("<");
this._emitChar("/");
this._emitSeveralCodePoints(this.tempBuff);
this._reconsumeInState(SCRIPT_DATA_STATE);
}
};
_[SCRIPT_DATA_ESCAPE_START_STATE] = function scriptDataEscapeStartState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;
this._emitChar("-");
} else this._reconsumeInState(SCRIPT_DATA_STATE);
};
_[SCRIPT_DATA_ESCAPE_START_DASH_STATE] = function scriptDataEscapeStartDashState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
this._emitChar("-");
} else this._reconsumeInState(SCRIPT_DATA_STATE);
};
_[SCRIPT_DATA_ESCAPED_STATE] = function scriptDataEscapedState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;
this._emitChar("-");
} else if (cp === $.LESS_THAN_SIGN) this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE; else if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER); else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this._emitCodePoint(cp);
};
_[SCRIPT_DATA_ESCAPED_DASH_STATE] = function scriptDataEscapedDashState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
this._emitChar("-");
} else if (cp === $.LESS_THAN_SIGN) this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE; else if (cp === $.NULL) {
this.state = SCRIPT_DATA_ESCAPED_STATE;
this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this.state = SCRIPT_DATA_ESCAPED_STATE;
this._emitCodePoint(cp);
}
};
_[SCRIPT_DATA_ESCAPED_DASH_DASH_STATE] = function scriptDataEscapedDashDashState(cp) {
if (cp === $.HYPHEN_MINUS) this._emitChar("-"); else if (cp === $.LESS_THAN_SIGN) this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.state = SCRIPT_DATA_STATE;
this._emitChar(">");
} else if (cp === $.NULL) {
this.state = SCRIPT_DATA_ESCAPED_STATE;
this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this.state = SCRIPT_DATA_ESCAPED_STATE;
this._emitCodePoint(cp);
}
};
_[SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE] = function scriptDataEscapedLessThanSignState(cp) {
if (cp === $.SOLIDUS) {
this.tempBuff = [];
this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;
} else if (isAsciiUpper(cp)) {
this.tempBuff = [];
this.tempBuff.push(toAsciiLowerCodePoint(cp));
this.state = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;
this._emitChar("<");
this._emitCodePoint(cp);
} else if (isAsciiLower(cp)) {
this.tempBuff = [];
this.tempBuff.push(cp);
this.state = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;
this._emitChar("<");
this._emitCodePoint(cp);
} else {
this._emitChar("<");
this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
}
};
_[SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE] = function scriptDataEscapedEndTagOpenState(cp) {
if (isAsciiUpper(cp)) {
this._createEndTagToken(toAsciiLowerChar(cp));
this.tempBuff.push(cp);
this.state = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;
} else if (isAsciiLower(cp)) {
this._createEndTagToken(toChar(cp));
this.tempBuff.push(cp);
this.state = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;
} else {
this._emitChar("<");
this._emitChar("/");
this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
}
};
_[SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE] = function scriptDataEscapedEndTagNameState(cp) {
if (isAsciiUpper(cp)) {
this.currentToken.tagName += toAsciiLowerChar(cp);
this.tempBuff.push(cp);
} else if (isAsciiLower(cp)) {
this.currentToken.tagName += toChar(cp);
this.tempBuff.push(cp);
} else {
if (this._isAppropriateEndTagToken()) {
if (isWhitespace(cp)) {
this.state = BEFORE_ATTRIBUTE_NAME_STATE;
return;
}
if (cp === $.SOLIDUS) {
this.state = SELF_CLOSING_START_TAG_STATE;
return;
}
if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
return;
}
}
this._emitChar("<");
this._emitChar("/");
this._emitSeveralCodePoints(this.tempBuff);
this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
}
};
_[SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE] = function scriptDataDoubleEscapeStartState(cp) {
if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
this.state = this.isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;
this._emitCodePoint(cp);
} else if (isAsciiUpper(cp)) {
this.tempBuff.push(toAsciiLowerCodePoint(cp));
this._emitCodePoint(cp);
} else if (isAsciiLower(cp)) {
this.tempBuff.push(cp);
this._emitCodePoint(cp);
} else this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
};
_[SCRIPT_DATA_DOUBLE_ESCAPED_STATE] = function scriptDataDoubleEscapedState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;
this._emitChar("-");
} else if (cp === $.LESS_THAN_SIGN) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
this._emitChar("<");
} else if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER); else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this._emitCodePoint(cp);
};
_[SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE] = function scriptDataDoubleEscapedDashState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;
this._emitChar("-");
} else if (cp === $.LESS_THAN_SIGN) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
this._emitChar("<");
} else if (cp === $.NULL) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
this._emitCodePoint(cp);
}
};
_[SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE] = function scriptDataDoubleEscapedDashDashState(cp) {
if (cp === $.HYPHEN_MINUS) this._emitChar("-"); else if (cp === $.LESS_THAN_SIGN) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
this._emitChar("<");
} else if (cp === $.GREATER_THAN_SIGN) {
this.state = SCRIPT_DATA_STATE;
this._emitChar(">");
} else if (cp === $.NULL) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
this._emitCodePoint(cp);
}
};
_[SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE] = function scriptDataDoubleEscapedLessThanSignState(cp) {
if (cp === $.SOLIDUS) {
this.tempBuff = [];
this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;
this._emitChar("/");
} else this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
};
_[SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE] = function scriptDataDoubleEscapeEndState(cp) {
if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
this.state = this.isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
this._emitCodePoint(cp);
} else if (isAsciiUpper(cp)) {
this.tempBuff.push(toAsciiLowerCodePoint(cp));
this._emitCodePoint(cp);
} else if (isAsciiLower(cp)) {
this.tempBuff.push(cp);
this._emitCodePoint(cp);
} else this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
};
_[BEFORE_ATTRIBUTE_NAME_STATE] = function beforeAttributeNameState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.SOLIDUS) this.state = SELF_CLOSING_START_TAG_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (isAsciiUpper(cp)) {
this._createAttr(toAsciiLowerChar(cp));
this.state = ATTRIBUTE_NAME_STATE;
} else if (cp === $.NULL) {
this._createAttr(UNICODE.REPLACEMENT_CHARACTER);
this.state = ATTRIBUTE_NAME_STATE;
} else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN) {
this._createAttr(toChar(cp));
this.state = ATTRIBUTE_NAME_STATE;
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this._createAttr(toChar(cp));
this.state = ATTRIBUTE_NAME_STATE;
}
};
_[ATTRIBUTE_NAME_STATE] = function attributeNameState(cp) {
if (isWhitespace(cp)) this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE); else if (cp === $.SOLIDUS) this._leaveAttrName(SELF_CLOSING_START_TAG_STATE); else if (cp === $.EQUALS_SIGN) this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE); else if (cp === $.GREATER_THAN_SIGN) {
this._leaveAttrName(DATA_STATE);
this._emitCurrentToken();
} else if (isAsciiUpper(cp)) this.currentAttr.name += toAsciiLowerChar(cp); else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) this.currentAttr.name += toChar(cp); else if (cp === $.NULL) this.currentAttr.name += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this.currentAttr.name += toChar(cp);
};
_[AFTER_ATTRIBUTE_NAME_STATE] = function afterAttributeNameState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.SOLIDUS) this.state = SELF_CLOSING_START_TAG_STATE; else if (cp === $.EQUALS_SIGN) this.state = BEFORE_ATTRIBUTE_VALUE_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (isAsciiUpper(cp)) {
this._createAttr(toAsciiLowerChar(cp));
this.state = ATTRIBUTE_NAME_STATE;
} else if (cp === $.NULL) {
this._createAttr(UNICODE.REPLACEMENT_CHARACTER);
this.state = ATTRIBUTE_NAME_STATE;
} else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {
this._createAttr(toChar(cp));
this.state = ATTRIBUTE_NAME_STATE;
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this._createAttr(toChar(cp));
this.state = ATTRIBUTE_NAME_STATE;
}
};
_[BEFORE_ATTRIBUTE_VALUE_STATE] = function beforeAttributeValueState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.QUOTATION_MARK) this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE; else if (cp === $.AMPERSAND) this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE); else if (cp === $.APOSTROPHE) this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE; else if (cp === $.NULL) {
this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER;
this.state = ATTRIBUTE_VALUE_UNQUOTED_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) {
this.currentAttr.value += toChar(cp);
this.state = ATTRIBUTE_VALUE_UNQUOTED_STATE;
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this.currentAttr.value += toChar(cp);
this.state = ATTRIBUTE_VALUE_UNQUOTED_STATE;
}
};
_[ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE] = function attributeValueDoubleQuotedState(cp) {
if (cp === $.QUOTATION_MARK) this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE; else if (cp === $.AMPERSAND) {
this.additionalAllowedCp = $.QUOTATION_MARK;
this.returnState = this.state;
this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
} else if (cp === $.NULL) this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this.currentAttr.value += toChar(cp);
};
_[ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE] = function attributeValueSingleQuotedState(cp) {
if (cp === $.APOSTROPHE) this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE; else if (cp === $.AMPERSAND) {
this.additionalAllowedCp = $.APOSTROPHE;
this.returnState = this.state;
this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
} else if (cp === $.NULL) this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this.currentAttr.value += toChar(cp);
};
_[ATTRIBUTE_VALUE_UNQUOTED_STATE] = function attributeValueUnquotedState(cp) {
if (isWhitespace(cp)) this.state = BEFORE_ATTRIBUTE_NAME_STATE; else if (cp === $.AMPERSAND) {
this.additionalAllowedCp = $.GREATER_THAN_SIGN;
this.returnState = this.state;
this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.NULL) this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) {
this.currentAttr.value += toChar(cp);
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this.currentAttr.value += toChar(cp);
};
_[CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE] = function characterReferenceInAttributeValueState(cp) {
var referencedCodePoints = this._consumeCharacterReference(cp, true);
if (referencedCodePoints) {
for (var i = 0; i < referencedCodePoints.length; i++) this.currentAttr.value += toChar(referencedCodePoints[i]);
} else this.currentAttr.value += "&";
this.state = this.returnState;
};
_[AFTER_ATTRIBUTE_VALUE_QUOTED_STATE] = function afterAttributeValueQuotedState(cp) {
if (isWhitespace(cp)) this.state = BEFORE_ATTRIBUTE_NAME_STATE; else if (cp === $.SOLIDUS) this.state = SELF_CLOSING_START_TAG_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
};
_[SELF_CLOSING_START_TAG_STATE] = function selfClosingStartTagState(cp) {
if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.selfClosing = true;
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
};
_[BOGUS_COMMENT_STATE] = function bogusCommentState(cp) {
this._createCommentToken();
while (true) {
if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
break;
} else if (cp === $.EOF) {
this._reconsumeInState(DATA_STATE);
break;
} else {
this.currentToken.data += cp === $.NULL ? UNICODE.REPLACEMENT_CHARACTER : toChar(cp);
cp = this._consume();
}
}
this._emitCurrentToken();
};
_[MARKUP_DECLARATION_OPEN_STATE] = function markupDeclarationOpenState(cp) {
if (this._consumeSubsequentIfMatch($$.DASH_DASH_STRING, cp, true)) {
this._createCommentToken();
this.state = COMMENT_START_STATE;
} else if (this._consumeSubsequentIfMatch($$.DOCTYPE_STRING, cp, false)) this.state = DOCTYPE_STATE; else if (this.allowCDATA && this._consumeSubsequentIfMatch($$.CDATA_START_STRING, cp, true)) this.state = CDATA_SECTION_STATE; else {
this[BOGUS_COMMENT_STATE](cp);
}
};
_[COMMENT_START_STATE] = function commentStartState(cp) {
if (cp === $.HYPHEN_MINUS) this.state = COMMENT_START_DASH_STATE; else if (cp === $.NULL) {
this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
this.state = COMMENT_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.EOF) {
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.data += toChar(cp);
this.state = COMMENT_STATE;
}
};
_[COMMENT_START_DASH_STATE] = function commentStartDashState(cp) {
if (cp === $.HYPHEN_MINUS) this.state = COMMENT_END_STATE; else if (cp === $.NULL) {
this.currentToken.data += "-";
this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
this.state = COMMENT_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.EOF) {
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.data += "-";
this.currentToken.data += toChar(cp);
this.state = COMMENT_STATE;
}
};
_[COMMENT_STATE] = function commentState(cp) {
if (cp === $.HYPHEN_MINUS) this.state = COMMENT_END_DASH_STATE; else if (cp === $.NULL) this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) {
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.currentToken.data += toChar(cp);
};
_[COMMENT_END_DASH_STATE] = function commentEndDashState(cp) {
if (cp === $.HYPHEN_MINUS) this.state = COMMENT_END_STATE; else if (cp === $.NULL) {
this.currentToken.data += "-";
this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
this.state = COMMENT_STATE;
} else if (cp === $.EOF) {
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.data += "-";
this.currentToken.data += toChar(cp);
this.state = COMMENT_STATE;
}
};
_[COMMENT_END_STATE] = function commentEndState(cp) {
if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.EXCLAMATION_MARK) this.state = COMMENT_END_BANG_STATE; else if (cp === $.HYPHEN_MINUS) this.currentToken.data += "-"; else if (cp === $.NULL) {
this.currentToken.data += "--";
this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
this.state = COMMENT_STATE;
} else if (cp === $.EOF) {
this._reconsumeInState(DATA_STATE);
this._emitCurrentToken();
} else {
this.currentToken.data += "--";
this.currentToken.data += toChar(cp);
this.state = COMMENT_STATE;
}
};
_[COMMENT_END_BANG_STATE] = function commentEndBangState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.currentToken.data += "--!";
this.state = COMMENT_END_DASH_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.NULL) {
this.currentToken.data += "--!";
this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
this.state = COMMENT_STATE;
} else if (cp === $.EOF) {
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.data += "--!";
this.currentToken.data += toChar(cp);
this.state = COMMENT_STATE;
}
};
_[DOCTYPE_STATE] = function doctypeState(cp) {
if (isWhitespace(cp)) this.state = BEFORE_DOCTYPE_NAME_STATE; else if (cp === $.EOF) {
this._createDoctypeToken();
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
};
_[BEFORE_DOCTYPE_NAME_STATE] = function beforeDoctypeNameState(cp) {
if (isWhitespace(cp)) return;
if (isAsciiUpper(cp)) {
this._createDoctypeToken(toAsciiLowerChar(cp));
this.state = DOCTYPE_NAME_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this._createDoctypeToken();
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this._createDoctypeToken();
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else if (cp === $.NULL) {
this._createDoctypeToken(UNICODE.REPLACEMENT_CHARACTER);
this.state = DOCTYPE_NAME_STATE;
} else {
this._createDoctypeToken(toChar(cp));
this.state = DOCTYPE_NAME_STATE;
}
};
_[DOCTYPE_NAME_STATE] = function doctypeNameState(cp) {
if (isWhitespace(cp)) this.state = AFTER_DOCTYPE_NAME_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (isAsciiUpper(cp)) this.currentToken.name += toAsciiLowerChar(cp); else if (cp === $.NULL) this.currentToken.name += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.currentToken.name += toChar(cp);
};
_[AFTER_DOCTYPE_NAME_STATE] = function afterDoctypeNameState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else if (this._consumeSubsequentIfMatch($$.PUBLIC_STRING, cp, false)) this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE; else if (this._consumeSubsequentIfMatch($$.SYSTEM_STRING, cp, false)) this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE; else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE] = function afterDoctypePublicKeywordState(cp) {
if (isWhitespace(cp)) this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE; else if (cp === $.QUOTATION_MARK) {
this.currentToken.publicId = "";
this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
} else if (cp === $.APOSTROPHE) {
this.currentToken.publicId = "";
this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE] = function beforeDoctypePublicIdentifierState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.QUOTATION_MARK) {
this.currentToken.publicId = "";
this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
} else if (cp === $.APOSTROPHE) {
this.currentToken.publicId = "";
this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE] = function doctypePublicIdentifierDoubleQuotedState(cp) {
if (cp === $.QUOTATION_MARK) this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE; else if (cp === $.NULL) this.currentToken.publicId += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.currentToken.publicId += toChar(cp);
};
_[DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE] = function doctypePublicIdentifierSingleQuotedState(cp) {
if (cp === $.APOSTROPHE) this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE; else if (cp === $.NULL) this.currentToken.publicId += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.currentToken.publicId += toChar(cp);
};
_[AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE] = function afterDoctypePublicIdentifierState(cp) {
if (isWhitespace(cp)) this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.QUOTATION_MARK) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
} else if (cp === $.APOSTROPHE) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE] = function betweenDoctypePublicAndSystemIdentifiersState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.QUOTATION_MARK) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
} else if (cp === $.APOSTROPHE) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE] = function afterDoctypeSystemKeywordState(cp) {
if (isWhitespace(cp)) this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE; else if (cp === $.QUOTATION_MARK) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
} else if (cp === $.APOSTROPHE) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE] = function beforeDoctypeSystemIdentifierState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.QUOTATION_MARK) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
} else if (cp === $.APOSTROPHE) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE] = function doctypeSystemIdentifierDoubleQuotedState(cp) {
if (cp === $.QUOTATION_MARK) this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.NULL) this.currentToken.systemId += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.currentToken.systemId += toChar(cp);
};
_[DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE] = function doctypeSystemIdentifierSingleQuotedState(cp) {
if (cp === $.APOSTROPHE) this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.NULL) this.currentToken.systemId += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.currentToken.systemId += toChar(cp);
};
_[AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE] = function afterDoctypeSystemIdentifierState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.state = BOGUS_DOCTYPE_STATE;
};
_[BOGUS_DOCTYPE_STATE] = function bogusDoctypeState(cp) {
if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
}
};
_[CDATA_SECTION_STATE] = function cdataSectionState(cp) {
while (true) {
if (cp === $.EOF) {
this._reconsumeInState(DATA_STATE);
break;
} else if (this._consumeSubsequentIfMatch($$.CDATA_END_STRING, cp, true)) {
this.state = DATA_STATE;
break;
} else {
this._emitCodePoint(cp);
cp = this._consume();
}
}
};
}, function(module, exports, __webpack_require__) {
"use strict";
var UNICODE = __webpack_require__(279);
var $ = UNICODE.CODE_POINTS;
function isReservedCodePoint(cp) {
return cp >= 55296 && cp <= 57343 || cp > 1114111;
}
function isSurrogatePair(cp1, cp2) {
return cp1 >= 55296 && cp1 <= 56319 && cp2 >= 56320 && cp2 <= 57343;
}
function getSurrogatePairCodePoint(cp1, cp2) {
return (cp1 - 55296) * 1024 + 9216 + cp2;
}
var Preprocessor = module.exports = function(html) {
this.write(html);
this.pos = this.html.charCodeAt(0) === $.BOM ? 0 : -1;
this.gapStack = [];
this.lastGapPos = -1;
this.skipNextNewLine = false;
};
Preprocessor.prototype.write = function(html) {
if (this.html) {
this.html = this.html.substring(0, this.pos + 1) + html + this.html.substring(this.pos + 1, this.html.length);
} else this.html = html;
this.lastCharPos = this.html.length - 1;
};
Preprocessor.prototype.advanceAndPeekCodePoint = function() {
this.pos++;
if (this.pos > this.lastCharPos) return $.EOF;
var cp = this.html.charCodeAt(this.pos);
if (this.skipNextNewLine && cp === $.LINE_FEED) {
this.skipNextNewLine = false;
this._addGap();
return this.advanceAndPeekCodePoint();
}
if (cp === $.CARRIAGE_RETURN) {
this.skipNextNewLine = true;
return $.LINE_FEED;
}
this.skipNextNewLine = false;
return cp >= 55296 ? this._processHighRangeCodePoint(cp) : cp;
};
Preprocessor.prototype._processHighRangeCodePoint = function(cp) {
if (this.pos !== this.lastCharPos) {
var nextCp = this.html.charCodeAt(this.pos + 1);
if (isSurrogatePair(cp, nextCp)) {
this.pos++;
cp = getSurrogatePairCodePoint(cp, nextCp);
this._addGap();
}
}
if (isReservedCodePoint(cp)) cp = $.REPLACEMENT_CHARACTER;
return cp;
};
Preprocessor.prototype._addGap = function() {
this.gapStack.push(this.lastGapPos);
this.lastGapPos = this.pos;
};
Preprocessor.prototype.retreat = function() {
if (this.pos === this.lastGapPos) {
this.lastGapPos = this.gapStack.pop();
this.pos--;
}
this.pos--;
};
}, function(module, exports) {
"use strict";
exports.REPLACEMENT_CHARACTER = "�";
exports.CODE_POINTS = {
EOF: -1,
NULL: 0,
TABULATION: 9,
CARRIAGE_RETURN: 13,
LINE_FEED: 10,
FORM_FEED: 12,
SPACE: 32,
EXCLAMATION_MARK: 33,
QUOTATION_MARK: 34,
NUMBER_SIGN: 35,
AMPERSAND: 38,
APOSTROPHE: 39,
HYPHEN_MINUS: 45,
SOLIDUS: 47,
DIGIT_0: 48,
DIGIT_9: 57,
SEMICOLON: 59,
LESS_THAN_SIGN: 60,
EQUALS_SIGN: 61,
GREATER_THAN_SIGN: 62,
QUESTION_MARK: 63,
LATIN_CAPITAL_A: 65,
LATIN_CAPITAL_F: 70,
LATIN_CAPITAL_X: 88,
LATIN_CAPITAL_Z: 90,
GRAVE_ACCENT: 96,
LATIN_SMALL_A: 97,
LATIN_SMALL_F: 102,
LATIN_SMALL_X: 120,
LATIN_SMALL_Z: 122,
BOM: 65279,
REPLACEMENT_CHARACTER: 65533
};
exports.CODE_POINT_SEQUENCES = {
DASH_DASH_STRING: [ 45, 45 ],
DOCTYPE_STRING: [ 68, 79, 67, 84, 89, 80, 69 ],
CDATA_START_STRING: [ 91, 67, 68, 65, 84, 65, 91 ],
CDATA_END_STRING: [ 93, 93, 62 ],
SCRIPT_STRING: [ 115, 99, 114, 105, 112, 116 ],
PUBLIC_STRING: [ 80, 85, 66, 76, 73, 67 ],
SYSTEM_STRING: [ 83, 89, 83, 84, 69, 77 ]
};
}, function(module, exports) {
"use strict";
exports.assign = function(tokenizer) {
var tokenizerProto = Object.getPrototypeOf(tokenizer);
tokenizer.tokenStartLoc = -1;
tokenizer._attachLocationInfo = function(token) {
token.location = {
start: this.tokenStartLoc,
end: -1
};
};
tokenizer._createStartTagToken = function(tagNameFirstCh) {
tokenizerProto._createStartTagToken.call(this, tagNameFirstCh);
this._attachLocationInfo(this.currentToken);
};
tokenizer._createEndTagToken = function(tagNameFirstCh) {
tokenizerProto._createEndTagToken.call(this, tagNameFirstCh);
this._attachLocationInfo(this.currentToken);
};
tokenizer._createCommentToken = function() {
tokenizerProto._createCommentToken.call(this);
this._attachLocationInfo(this.currentToken);
};
tokenizer._createDoctypeToken = function(doctypeNameFirstCh) {
tokenizerProto._createDoctypeToken.call(this, doctypeNameFirstCh);
this._attachLocationInfo(this.currentToken);
};
tokenizer._createCharacterToken = function(type, ch) {
tokenizerProto._createCharacterToken.call(this, type, ch);
this._attachLocationInfo(this.currentCharacterToken);
};
tokenizer._emitCurrentToken = function() {
if (this.currentCharacterToken) this.currentCharacterToken.location.end = this.currentToken.location.start;
this.currentToken.location.end = this.preprocessor.pos + 1;
tokenizerProto._emitCurrentToken.call(this);
};
tokenizer._emitCurrentCharacterToken = function() {
if (this.currentCharacterToken && this.currentCharacterToken.location.end === -1) {
this.currentCharacterToken.location.end = this.preprocessor.pos;
}
tokenizerProto._emitCurrentCharacterToken.call(this);
};
Object.keys(tokenizerProto.MODE).map(function(modeName) {
return tokenizerProto.MODE[modeName];
}).forEach(function(state) {
tokenizer[state] = function(cp) {
this.tokenStartLoc = this.preprocessor.pos;
tokenizerProto[state].call(this, cp);
};
});
};
}, function(module, exports) {
"use strict";
module.exports = {
65: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 193 ]
}
},
c: [ 193 ]
}
}
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 258 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 194 ]
}
},
c: [ 194 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1040 ]
}
}
}
}
},
69: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 198 ]
}
},
c: [ 198 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120068 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 192 ]
}
},
c: [ 192 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
112: {
l: {
104: {
l: {
97: {
l: {
59: {
c: [ 913 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 256 ]
}
}
}
}
}
}
}
}
},
77: {
l: {
80: {
l: {
59: {
c: [ 38 ]
}
},
c: [ 38 ]
}
}
},
110: {
l: {
100: {
l: {
59: {
c: [ 10835 ]
}
}
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 260 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120120 ]
}
}
}
}
}
}
},
112: {
l: {
112: {
l: {
108: {
l: {
121: {
l: {
70: {
l: {
117: {
l: {
110: {
l: {
99: {
l: {
116: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8289 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 197 ]
}
},
c: [ 197 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119964 ]
}
}
}
}
},
115: {
l: {
105: {
l: {
103: {
l: {
110: {
l: {
59: {
c: [ 8788 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 195 ]
}
},
c: [ 195 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 196 ]
}
},
c: [ 196 ]
}
}
}
}
}
}
},
97: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 225 ]
}
},
c: [ 225 ]
}
}
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 259 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
59: {
c: [ 8766 ]
},
100: {
l: {
59: {
c: [ 8767 ]
}
}
},
69: {
l: {
59: {
c: [ 8766, 819 ]
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 226 ]
}
},
c: [ 226 ]
}
}
}
}
},
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 180 ]
}
},
c: [ 180 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1072 ]
}
}
}
}
},
101: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 230 ]
}
},
c: [ 230 ]
}
}
}
}
}
}
},
102: {
l: {
59: {
c: [ 8289 ]
},
114: {
l: {
59: {
c: [ 120094 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 224 ]
}
},
c: [ 224 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
115: {
l: {
121: {
l: {
109: {
l: {
59: {
c: [ 8501 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
104: {
l: {
59: {
c: [ 8501 ]
}
}
}
}
}
}
},
112: {
l: {
104: {
l: {
97: {
l: {
59: {
c: [ 945 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 257 ]
}
}
}
}
},
108: {
l: {
103: {
l: {
59: {
c: [ 10815 ]
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 38 ]
}
},
c: [ 38 ]
}
}
},
110: {
l: {
100: {
l: {
97: {
l: {
110: {
l: {
100: {
l: {
59: {
c: [ 10837 ]
}
}
}
}
}
}
},
59: {
c: [ 8743 ]
},
100: {
l: {
59: {
c: [ 10844 ]
}
}
},
115: {
l: {
108: {
l: {
111: {
l: {
112: {
l: {
101: {
l: {
59: {
c: [ 10840 ]
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 10842 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 8736 ]
},
101: {
l: {
59: {
c: [ 10660 ]
}
}
},
108: {
l: {
101: {
l: {
59: {
c: [ 8736 ]
}
}
}
}
},
109: {
l: {
115: {
l: {
100: {
l: {
97: {
l: {
97: {
l: {
59: {
c: [ 10664 ]
}
}
},
98: {
l: {
59: {
c: [ 10665 ]
}
}
},
99: {
l: {
59: {
c: [ 10666 ]
}
}
},
100: {
l: {
59: {
c: [ 10667 ]
}
}
},
101: {
l: {
59: {
c: [ 10668 ]
}
}
},
102: {
l: {
59: {
c: [ 10669 ]
}
}
},
103: {
l: {
59: {
c: [ 10670 ]
}
}
},
104: {
l: {
59: {
c: [ 10671 ]
}
}
}
}
},
59: {
c: [ 8737 ]
}
}
}
}
}
}
},
114: {
l: {
116: {
l: {
59: {
c: [ 8735 ]
},
118: {
l: {
98: {
l: {
59: {
c: [ 8894 ]
},
100: {
l: {
59: {
c: [ 10653 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
112: {
l: {
104: {
l: {
59: {
c: [ 8738 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 197 ]
}
}
}
}
},
122: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 9084 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 261 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120146 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10863 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 8776 ]
},
69: {
l: {
59: {
c: [ 10864 ]
}
}
},
101: {
l: {
59: {
c: [ 8778 ]
}
}
},
105: {
l: {
100: {
l: {
59: {
c: [ 8779 ]
}
}
}
}
},
111: {
l: {
115: {
l: {
59: {
c: [ 39 ]
}
}
}
}
},
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 8776 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8778 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 229 ]
}
},
c: [ 229 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119990 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 42 ]
}
}
},
121: {
l: {
109: {
l: {
112: {
l: {
59: {
c: [ 8776 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8781 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 227 ]
}
},
c: [ 227 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 228 ]
}
},
c: [ 228 ]
}
}
}
}
},
119: {
l: {
99: {
l: {
111: {
l: {
110: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8755 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10769 ]
}
}
}
}
}
}
}
}
}
}
},
98: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
99: {
l: {
111: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 8780 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
112: {
l: {
115: {
l: {
105: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 1014 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 8245 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8765 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8909 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
118: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8893 ]
}
}
}
}
}
}
},
119: {
l: {
101: {
l: {
100: {
l: {
59: {
c: [ 8965 ]
},
103: {
l: {
101: {
l: {
59: {
c: [ 8965 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 9141 ]
},
116: {
l: {
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 9142 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
111: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 8780 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1073 ]
}
}
}
}
},
100: {
l: {
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 8222 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
99: {
l: {
97: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8757 ]
},
101: {
l: {
59: {
c: [ 8757 ]
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
112: {
l: {
116: {
l: {
121: {
l: {
118: {
l: {
59: {
c: [ 10672 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
115: {
l: {
105: {
l: {
59: {
c: [ 1014 ]
}
}
}
}
}
}
},
114: {
l: {
110: {
l: {
111: {
l: {
117: {
l: {
59: {
c: [ 8492 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 946 ]
}
}
},
104: {
l: {
59: {
c: [ 8502 ]
}
}
},
119: {
l: {
101: {
l: {
101: {
l: {
110: {
l: {
59: {
c: [ 8812 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120095 ]
}
}
}
}
},
105: {
l: {
103: {
l: {
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8898 ]
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 9711 ]
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 8899 ]
}
}
}
}
}
}
},
111: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10752 ]
}
}
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10753 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 10754 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
113: {
l: {
99: {
l: {
117: {
l: {
112: {
l: {
59: {
c: [ 10758 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 9733 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 9661 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 9651 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10756 ]
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8897 ]
}
}
}
}
}
}
},
119: {
l: {
101: {
l: {
100: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 8896 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
107: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10509 ]
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
108: {
l: {
111: {
l: {
122: {
l: {
101: {
l: {
110: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 10731 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9642 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 9652 ]
},
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 9662 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 9666 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 9656 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
107: {
l: {
59: {
c: [ 9251 ]
}
}
}
}
}
}
},
107: {
l: {
49: {
l: {
50: {
l: {
59: {
c: [ 9618 ]
}
}
},
52: {
l: {
59: {
c: [ 9617 ]
}
}
}
}
},
51: {
l: {
52: {
l: {
59: {
c: [ 9619 ]
}
}
}
}
}
}
},
111: {
l: {
99: {
l: {
107: {
l: {
59: {
c: [ 9608 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
101: {
l: {
59: {
c: [ 61, 8421 ]
},
113: {
l: {
117: {
l: {
105: {
l: {
118: {
l: {
59: {
c: [ 8801, 8421 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
116: {
l: {
59: {
c: [ 8976 ]
}
}
}
}
}
}
},
78: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10989 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120147 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 8869 ]
},
116: {
l: {
111: {
l: {
109: {
l: {
59: {
c: [ 8869 ]
}
}
}
}
}
}
}
}
},
119: {
l: {
116: {
l: {
105: {
l: {
101: {
l: {
59: {
c: [ 8904 ]
}
}
}
}
}
}
}
}
},
120: {
l: {
98: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10697 ]
}
}
}
}
}
}
},
100: {
l: {
108: {
l: {
59: {
c: [ 9488 ]
}
}
},
76: {
l: {
59: {
c: [ 9557 ]
}
}
},
114: {
l: {
59: {
c: [ 9484 ]
}
}
},
82: {
l: {
59: {
c: [ 9554 ]
}
}
}
}
},
68: {
l: {
108: {
l: {
59: {
c: [ 9558 ]
}
}
},
76: {
l: {
59: {
c: [ 9559 ]
}
}
},
114: {
l: {
59: {
c: [ 9555 ]
}
}
},
82: {
l: {
59: {
c: [ 9556 ]
}
}
}
}
},
104: {
l: {
59: {
c: [ 9472 ]
},
100: {
l: {
59: {
c: [ 9516 ]
}
}
},
68: {
l: {
59: {
c: [ 9573 ]
}
}
},
117: {
l: {
59: {
c: [ 9524 ]
}
}
},
85: {
l: {
59: {
c: [ 9576 ]
}
}
}
}
},
72: {
l: {
59: {
c: [ 9552 ]
},
100: {
l: {
59: {
c: [ 9572 ]
}
}
},
68: {
l: {
59: {
c: [ 9574 ]
}
}
},
117: {
l: {
59: {
c: [ 9575 ]
}
}
},
85: {
l: {
59: {
c: [ 9577 ]
}
}
}
}
},
109: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8863 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8862 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8864 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
108: {
l: {
59: {
c: [ 9496 ]
}
}
},
76: {
l: {
59: {
c: [ 9563 ]
}
}
},
114: {
l: {
59: {
c: [ 9492 ]
}
}
},
82: {
l: {
59: {
c: [ 9560 ]
}
}
}
}
},
85: {
l: {
108: {
l: {
59: {
c: [ 9564 ]
}
}
},
76: {
l: {
59: {
c: [ 9565 ]
}
}
},
114: {
l: {
59: {
c: [ 9561 ]
}
}
},
82: {
l: {
59: {
c: [ 9562 ]
}
}
}
}
},
118: {
l: {
59: {
c: [ 9474 ]
},
104: {
l: {
59: {
c: [ 9532 ]
}
}
},
72: {
l: {
59: {
c: [ 9578 ]
}
}
},
108: {
l: {
59: {
c: [ 9508 ]
}
}
},
76: {
l: {
59: {
c: [ 9569 ]
}
}
},
114: {
l: {
59: {
c: [ 9500 ]
}
}
},
82: {
l: {
59: {
c: [ 9566 ]
}
}
}
}
},
86: {
l: {
59: {
c: [ 9553 ]
},
104: {
l: {
59: {
c: [ 9579 ]
}
}
},
72: {
l: {
59: {
c: [ 9580 ]
}
}
},
108: {
l: {
59: {
c: [ 9570 ]
}
}
},
76: {
l: {
59: {
c: [ 9571 ]
}
}
},
114: {
l: {
59: {
c: [ 9567 ]
}
}
},
82: {
l: {
59: {
c: [ 9568 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 8245 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 728 ]
}
}
}
}
}
}
},
118: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 166 ]
}
},
c: [ 166 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119991 ]
}
}
}
}
},
101: {
l: {
109: {
l: {
105: {
l: {
59: {
c: [ 8271 ]
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 8765 ]
},
101: {
l: {
59: {
c: [ 8909 ]
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
98: {
l: {
59: {
c: [ 10693 ]
}
}
},
59: {
c: [ 92 ]
},
104: {
l: {
115: {
l: {
117: {
l: {
98: {
l: {
59: {
c: [ 10184 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
108: {
l: {
108: {
l: {
59: {
c: [ 8226 ]
},
101: {
l: {
116: {
l: {
59: {
c: [ 8226 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
112: {
l: {
59: {
c: [ 8782 ]
},
69: {
l: {
59: {
c: [ 10926 ]
}
}
},
101: {
l: {
59: {
c: [ 8783 ]
},
113: {
l: {
59: {
c: [ 8783 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
66: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
115: {
l: {
108: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8726 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
118: {
l: {
59: {
c: [ 10983 ]
}
}
},
119: {
l: {
101: {
l: {
100: {
l: {
59: {
c: [ 8966 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1041 ]
}
}
}
}
},
101: {
l: {
99: {
l: {
97: {
l: {
117: {
l: {
115: {
l: {
101: {
l: {
59: {
c: [ 8757 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
110: {
l: {
111: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
105: {
l: {
115: {
l: {
59: {
c: [ 8492 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 914 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120069 ]
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120121 ]
}
}
}
}
}
}
},
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 728 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8492 ]
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
112: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8782 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
67: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 262 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8914 ]
},
105: {
l: {
116: {
l: {
97: {
l: {
108: {
l: {
68: {
l: {
105: {
l: {
102: {
l: {
102: {
l: {
101: {
l: {
114: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
105: {
l: {
97: {
l: {
108: {
l: {
68: {
l: {
59: {
c: [ 8517 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
121: {
l: {
108: {
l: {
101: {
l: {
121: {
l: {
115: {
l: {
59: {
c: [ 8493 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 268 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 199 ]
}
},
c: [ 199 ]
}
}
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 264 ]
}
}
}
}
}
}
},
111: {
l: {
110: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8752 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 266 ]
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
108: {
l: {
97: {
l: {
59: {
c: [ 184 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 183 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 8493 ]
}
}
}
}
},
72: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1063 ]
}
}
}
}
}
}
},
104: {
l: {
105: {
l: {
59: {
c: [ 935 ]
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
108: {
l: {
101: {
l: {
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8857 ]
}
}
}
}
}
}
},
77: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8854 ]
}
}
}
}
}
}
}
}
}
}
},
80: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8853 ]
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8855 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
111: {
l: {
99: {
l: {
107: {
l: {
119: {
l: {
105: {
l: {
115: {
l: {
101: {
l: {
67: {
l: {
111: {
l: {
110: {
l: {
116: {
l: {
111: {
l: {
117: {
l: {
114: {
l: {
73: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8754 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
101: {
l: {
67: {
l: {
117: {
l: {
114: {
l: {
108: {
l: {
121: {
l: {
68: {
l: {
111: {
l: {
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
81: {
l: {
117: {
l: {
111: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 8221 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
81: {
l: {
117: {
l: {
111: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 8217 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8759 ]
},
101: {
l: {
59: {
c: [ 10868 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
114: {
l: {
117: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8801 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8751 ]
}
}
}
}
}
}
},
116: {
l: {
111: {
l: {
117: {
l: {
114: {
l: {
73: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8750 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 8450 ]
}
}
},
114: {
l: {
111: {
l: {
100: {
l: {
117: {
l: {
99: {
l: {
116: {
l: {
59: {
c: [ 8720 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
67: {
l: {
108: {
l: {
111: {
l: {
99: {
l: {
107: {
l: {
119: {
l: {
105: {
l: {
115: {
l: {
101: {
l: {
67: {
l: {
111: {
l: {
110: {
l: {
116: {
l: {
111: {
l: {
117: {
l: {
114: {
l: {
73: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8755 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
79: {
l: {
80: {
l: {
89: {
l: {
59: {
c: [ 169 ]
}
},
c: [ 169 ]
}
}
}
}
},
114: {
l: {
111: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10799 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119966 ]
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
67: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8781 ]
}
}
}
}
}
}
},
59: {
c: [ 8915 ]
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 263 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
110: {
l: {
100: {
l: {
59: {
c: [ 10820 ]
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
99: {
l: {
117: {
l: {
112: {
l: {
59: {
c: [ 10825 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10827 ]
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 10823 ]
}
}
}
}
}
}
},
59: {
c: [ 8745 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10816 ]
}
}
}
}
}
}
},
115: {
l: {
59: {
c: [ 8745, 65024 ]
}
}
}
}
},
114: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8257 ]
}
}
}
}
},
111: {
l: {
110: {
l: {
59: {
c: [ 711 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
112: {
l: {
115: {
l: {
59: {
c: [ 10829 ]
}
}
}
}
},
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 269 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 231 ]
}
},
c: [ 231 ]
}
}
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 265 ]
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
115: {
l: {
59: {
c: [ 10828 ]
},
115: {
l: {
109: {
l: {
59: {
c: [ 10832 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 267 ]
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 184 ]
}
},
c: [ 184 ]
}
}
}
}
},
109: {
l: {
112: {
l: {
116: {
l: {
121: {
l: {
118: {
l: {
59: {
c: [ 10674 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
116: {
l: {
59: {
c: [ 162 ]
},
101: {
l: {
114: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 183 ]
}
}
}
}
}
}
}
}
}
}
}
},
c: [ 162 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120096 ]
}
}
}
}
},
104: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1095 ]
}
}
}
}
},
101: {
l: {
99: {
l: {
107: {
l: {
59: {
c: [ 10003 ]
},
109: {
l: {
97: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 10003 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
59: {
c: [ 967 ]
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 710 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8791 ]
}
}
}
}
},
108: {
l: {
101: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8634 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8635 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 8859 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 8858 ]
}
}
}
}
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8861 ]
}
}
}
}
}
}
}
}
},
82: {
l: {
59: {
c: [ 174 ]
}
}
},
83: {
l: {
59: {
c: [ 9416 ]
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 9675 ]
},
69: {
l: {
59: {
c: [ 10691 ]
}
}
},
101: {
l: {
59: {
c: [ 8791 ]
}
}
},
102: {
l: {
110: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10768 ]
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
100: {
l: {
59: {
c: [ 10991 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10690 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
117: {
l: {
98: {
l: {
115: {
l: {
59: {
c: [ 9827 ]
},
117: {
l: {
105: {
l: {
116: {
l: {
59: {
c: [ 9827 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 58 ]
},
101: {
l: {
59: {
c: [ 8788 ]
},
113: {
l: {
59: {
c: [ 8788 ]
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 44 ]
},
116: {
l: {
59: {
c: [ 64 ]
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8705 ]
},
102: {
l: {
110: {
l: {
59: {
c: [ 8728 ]
}
}
}
}
},
108: {
l: {
101: {
l: {
109: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8705 ]
}
}
}
}
}
}
}
}
},
120: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8450 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 8773 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10861 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8750 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120148 ]
}
}
},
114: {
l: {
111: {
l: {
100: {
l: {
59: {
c: [ 8720 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 169 ]
},
115: {
l: {
114: {
l: {
59: {
c: [ 8471 ]
}
}
}
}
}
},
c: [ 169 ]
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8629 ]
}
}
}
}
}
}
},
111: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10007 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119992 ]
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 10959 ]
},
101: {
l: {
59: {
c: [ 10961 ]
}
}
}
}
},
112: {
l: {
59: {
c: [ 10960 ]
},
101: {
l: {
59: {
c: [ 10962 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8943 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
100: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
108: {
l: {
59: {
c: [ 10552 ]
}
}
},
114: {
l: {
59: {
c: [ 10549 ]
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
112: {
l: {
114: {
l: {
59: {
c: [ 8926 ]
}
}
}
}
},
115: {
l: {
99: {
l: {
59: {
c: [ 8927 ]
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8630 ]
},
112: {
l: {
59: {
c: [ 10557 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
98: {
l: {
114: {
l: {
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10824 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10822 ]
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 10826 ]
}
}
}
}
}
}
},
59: {
c: [ 8746 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8845 ]
}
}
}
}
}
}
},
111: {
l: {
114: {
l: {
59: {
c: [ 10821 ]
}
}
}
}
},
115: {
l: {
59: {
c: [ 8746, 65024 ]
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8631 ]
},
109: {
l: {
59: {
c: [ 10556 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
121: {
l: {
101: {
l: {
113: {
l: {
112: {
l: {
114: {
l: {
101: {
l: {
99: {
l: {
59: {
c: [ 8926 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
117: {
l: {
99: {
l: {
99: {
l: {
59: {
c: [ 8927 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8910 ]
}
}
}
}
}
}
},
119: {
l: {
101: {
l: {
100: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 8911 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
101: {
l: {
110: {
l: {
59: {
c: [ 164 ]
}
},
c: [ 164 ]
}
}
}
}
},
118: {
l: {
101: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8630 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8631 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8910 ]
}
}
}
}
}
}
},
119: {
l: {
101: {
l: {
100: {
l: {
59: {
c: [ 8911 ]
}
}
}
}
}
}
}
}
},
119: {
l: {
99: {
l: {
111: {
l: {
110: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8754 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8753 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
108: {
l: {
99: {
l: {
116: {
l: {
121: {
l: {
59: {
c: [ 9005 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
97: {
l: {
103: {
l: {
103: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8224 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
116: {
l: {
104: {
l: {
59: {
c: [ 8504 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8595 ]
}
}
}
}
},
115: {
l: {
104: {
l: {
59: {
c: [ 8208 ]
},
118: {
l: {
59: {
c: [ 8867 ]
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8659 ]
}
}
}
}
}
}
},
98: {
l: {
107: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10511 ]
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
99: {
l: {
59: {
c: [ 733 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 271 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1076 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
103: {
l: {
103: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8225 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8650 ]
}
}
}
}
}
}
},
59: {
c: [ 8518 ]
},
111: {
l: {
116: {
l: {
115: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 10871 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
103: {
l: {
59: {
c: [ 176 ]
}
},
c: [ 176 ]
},
108: {
l: {
116: {
l: {
97: {
l: {
59: {
c: [ 948 ]
}
}
}
}
}
}
},
109: {
l: {
112: {
l: {
116: {
l: {
121: {
l: {
118: {
l: {
59: {
c: [ 10673 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
105: {
l: {
115: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 10623 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120097 ]
}
}
}
}
},
72: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10597 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
108: {
l: {
59: {
c: [ 8643 ]
}
}
},
114: {
l: {
59: {
c: [ 8642 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
97: {
l: {
109: {
l: {
59: {
c: [ 8900 ]
},
111: {
l: {
110: {
l: {
100: {
l: {
59: {
c: [ 8900 ]
},
115: {
l: {
117: {
l: {
105: {
l: {
116: {
l: {
59: {
c: [ 9830 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
59: {
c: [ 9830 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 168 ]
}
}
},
103: {
l: {
97: {
l: {
109: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 989 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
110: {
l: {
59: {
c: [ 8946 ]
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 247 ]
},
105: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 247 ]
},
111: {
l: {
110: {
l: {
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8903 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
c: [ 247 ]
}
}
}
}
},
111: {
l: {
110: {
l: {
120: {
l: {
59: {
c: [ 8903 ]
}
}
}
}
}
}
}
}
}
}
},
106: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1106 ]
}
}
}
}
}
}
},
108: {
l: {
99: {
l: {
111: {
l: {
114: {
l: {
110: {
l: {
59: {
c: [ 8990 ]
}
}
}
}
}
}
},
114: {
l: {
111: {
l: {
112: {
l: {
59: {
c: [ 8973 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
108: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 36 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120149 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 729 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8784 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8785 ]
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8760 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8724 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 8865 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
119: {
l: {
101: {
l: {
100: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 8966 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
110: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8595 ]
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
115: {
l: {
59: {
c: [ 8650 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
111: {
l: {
111: {
l: {
110: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8643 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8642 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
98: {
l: {
107: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10512 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
111: {
l: {
114: {
l: {
110: {
l: {
59: {
c: [ 8991 ]
}
}
}
}
}
}
},
114: {
l: {
111: {
l: {
112: {
l: {
59: {
c: [ 8972 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119993 ]
}
}
},
121: {
l: {
59: {
c: [ 1109 ]
}
}
}
}
},
111: {
l: {
108: {
l: {
59: {
c: [ 10742 ]
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 273 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8945 ]
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
59: {
c: [ 9663 ]
},
102: {
l: {
59: {
c: [ 9662 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8693 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10607 ]
}
}
}
}
}
}
}
}
},
119: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 10662 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
122: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1119 ]
}
}
}
}
},
105: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10239 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
97: {
l: {
103: {
l: {
103: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8225 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8609 ]
}
}
}
}
},
115: {
l: {
104: {
l: {
118: {
l: {
59: {
c: [ 10980 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 270 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1044 ]
}
}
}
}
},
68: {
l: {
59: {
c: [ 8517 ]
},
111: {
l: {
116: {
l: {
114: {
l: {
97: {
l: {
104: {
l: {
100: {
l: {
59: {
c: [ 10513 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
108: {
l: {
59: {
c: [ 8711 ]
},
116: {
l: {
97: {
l: {
59: {
c: [ 916 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120071 ]
}
}
}
}
},
105: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
105: {
l: {
116: {
l: {
105: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
65: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 180 ]
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 729 ]
}
}
},
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
65: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 733 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
71: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 96 ]
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 732 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
111: {
l: {
110: {
l: {
100: {
l: {
59: {
c: [ 8900 ]
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
102: {
l: {
101: {
l: {
114: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
105: {
l: {
97: {
l: {
108: {
l: {
68: {
l: {
59: {
c: [ 8518 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
74: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1026 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120123 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 168 ]
},
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8412 ]
}
}
}
}
}
}
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8784 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
67: {
l: {
111: {
l: {
110: {
l: {
116: {
l: {
111: {
l: {
117: {
l: {
114: {
l: {
73: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8751 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 168 ]
}
}
},
119: {
l: {
110: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8659 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8656 ]
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8660 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 10980 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
110: {
l: {
103: {
l: {
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10232 ]
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10234 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10233 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8658 ]
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8872 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
112: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8657 ]
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8661 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
105: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8741 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
110: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10515 ]
}
}
}
}
}
}
},
59: {
c: [ 8595 ]
},
85: {
l: {
112: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8693 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8659 ]
}
}
}
}
}
}
}
}
}
}
},
66: {
l: {
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 785 ]
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10576 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10590 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10582 ]
}
}
}
}
}
}
},
59: {
c: [ 8637 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
84: {
l: {
101: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10591 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10583 ]
}
}
}
}
}
}
},
59: {
c: [ 8641 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8615 ]
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8868 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119967 ]
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 272 ]
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1029 ]
}
}
}
}
}
}
},
90: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1039 ]
}
}
}
}
}
}
}
}
},
69: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 201 ]
}
},
c: [ 201 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 282 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 202 ]
}
},
c: [ 202 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1069 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 278 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120072 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 200 ]
}
},
c: [ 200 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
109: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8712 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 274 ]
}
}
}
}
}
}
},
112: {
l: {
116: {
l: {
121: {
l: {
83: {
l: {
109: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
83: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9723 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
114: {
l: {
121: {
l: {
83: {
l: {
109: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
83: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9643 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
78: {
l: {
71: {
l: {
59: {
c: [ 330 ]
}
}
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 280 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120124 ]
}
}
}
}
}
}
},
112: {
l: {
115: {
l: {
105: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 917 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10869 ]
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8770 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
108: {
l: {
105: {
l: {
98: {
l: {
114: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
59: {
c: [ 8652 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8496 ]
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 10867 ]
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 919 ]
}
}
}
}
},
84: {
l: {
72: {
l: {
59: {
c: [ 208 ]
}
},
c: [ 208 ]
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 203 ]
}
},
c: [ 203 ]
}
}
}
}
},
120: {
l: {
105: {
l: {
115: {
l: {
116: {
l: {
115: {
l: {
59: {
c: [ 8707 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
111: {
l: {
110: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
105: {
l: {
97: {
l: {
108: {
l: {
69: {
l: {
59: {
c: [ 8519 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 233 ]
}
},
c: [ 233 ]
}
}
}
}
}
}
},
115: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 10862 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 283 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 234 ]
}
},
c: [ 234 ]
},
59: {
c: [ 8790 ]
}
}
}
}
},
111: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8789 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1101 ]
}
}
}
}
},
68: {
l: {
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10871 ]
}
}
}
}
}
}
},
111: {
l: {
116: {
l: {
59: {
c: [ 8785 ]
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 279 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 8519 ]
}
}
},
102: {
l: {
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8786 ]
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120098 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 10906 ]
},
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 232 ]
}
},
c: [ 232 ]
}
}
}
}
}
}
},
115: {
l: {
59: {
c: [ 10902 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10904 ]
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
59: {
c: [ 10905 ]
},
105: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
59: {
c: [ 9191 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
59: {
c: [ 8467 ]
}
}
},
115: {
l: {
59: {
c: [ 10901 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10903 ]
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 275 ]
}
}
}
}
}
}
},
112: {
l: {
116: {
l: {
121: {
l: {
59: {
c: [ 8709 ]
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8709 ]
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 8709 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
112: {
l: {
49: {
l: {
51: {
l: {
59: {
c: [ 8196 ]
}
}
},
52: {
l: {
59: {
c: [ 8197 ]
}
}
}
}
},
59: {
c: [ 8195 ]
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 331 ]
}
}
},
115: {
l: {
112: {
l: {
59: {
c: [ 8194 ]
}
}
}
}
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 281 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120150 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8917 ]
},
115: {
l: {
108: {
l: {
59: {
c: [ 10723 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10865 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
59: {
c: [ 949 ]
},
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 949 ]
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 1013 ]
}
}
}
}
}
}
}
}
},
113: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 8790 ]
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8789 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8770 ]
}
}
}
}
},
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
103: {
l: {
116: {
l: {
114: {
l: {
59: {
c: [ 10902 ]
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10901 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
97: {
l: {
108: {
l: {
115: {
l: {
59: {
c: [ 61 ]
}
}
}
}
}
}
},
101: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 8799 ]
}
}
}
}
}
}
},
105: {
l: {
118: {
l: {
59: {
c: [ 8801 ]
},
68: {
l: {
68: {
l: {
59: {
c: [ 10872 ]
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
112: {
l: {
97: {
l: {
114: {
l: {
115: {
l: {
108: {
l: {
59: {
c: [ 10725 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10609 ]
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8787 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8495 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8784 ]
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 8770 ]
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 951 ]
}
}
},
104: {
l: {
59: {
c: [ 240 ]
}
},
c: [ 240 ]
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 235 ]
}
},
c: [ 235 ]
}
}
},
114: {
l: {
111: {
l: {
59: {
c: [ 8364 ]
}
}
}
}
}
}
},
120: {
l: {
99: {
l: {
108: {
l: {
59: {
c: [ 33 ]
}
}
}
}
},
105: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 8707 ]
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
97: {
l: {
116: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8496 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
110: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
105: {
l: {
97: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 8519 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
115: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8786 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1092 ]
}
}
}
}
},
101: {
l: {
109: {
l: {
97: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 9792 ]
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
105: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 64259 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 64256 ]
}
}
}
}
},
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 64260 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120099 ]
}
}
}
}
},
105: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 64257 ]
}
}
}
}
}
}
}
}
},
106: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 102, 106 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
116: {
l: {
59: {
c: [ 9837 ]
}
}
}
}
},
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 64258 ]
}
}
}
}
}
}
},
116: {
l: {
110: {
l: {
115: {
l: {
59: {
c: [ 9649 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
111: {
l: {
102: {
l: {
59: {
c: [ 402 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120151 ]
}
}
}
}
},
114: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
59: {
c: [ 8704 ]
}
}
}
}
}
}
},
107: {
l: {
59: {
c: [ 8916 ]
},
118: {
l: {
59: {
c: [ 10969 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
116: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10765 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
99: {
l: {
49: {
l: {
50: {
l: {
59: {
c: [ 189 ]
}
},
c: [ 189 ]
},
51: {
l: {
59: {
c: [ 8531 ]
}
}
},
52: {
l: {
59: {
c: [ 188 ]
}
},
c: [ 188 ]
},
53: {
l: {
59: {
c: [ 8533 ]
}
}
},
54: {
l: {
59: {
c: [ 8537 ]
}
}
},
56: {
l: {
59: {
c: [ 8539 ]
}
}
}
}
},
50: {
l: {
51: {
l: {
59: {
c: [ 8532 ]
}
}
},
53: {
l: {
59: {
c: [ 8534 ]
}
}
}
}
},
51: {
l: {
52: {
l: {
59: {
c: [ 190 ]
}
},
c: [ 190 ]
},
53: {
l: {
59: {
c: [ 8535 ]
}
}
},
56: {
l: {
59: {
c: [ 8540 ]
}
}
}
}
},
52: {
l: {
53: {
l: {
59: {
c: [ 8536 ]
}
}
}
}
},
53: {
l: {
54: {
l: {
59: {
c: [ 8538 ]
}
}
},
56: {
l: {
59: {
c: [ 8541 ]
}
}
}
}
},
55: {
l: {
56: {
l: {
59: {
c: [ 8542 ]
}
}
}
}
}
}
},
115: {
l: {
108: {
l: {
59: {
c: [ 8260 ]
}
}
}
}
}
}
},
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 8994 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119995 ]
}
}
}
}
}
}
}
}
},
70: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1060 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120073 ]
}
}
}
}
},
105: {
l: {
108: {
l: {
108: {
l: {
101: {
l: {
100: {
l: {
83: {
l: {
109: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
83: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9724 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
114: {
l: {
121: {
l: {
83: {
l: {
109: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
83: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9642 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120125 ]
}
}
}
}
},
114: {
l: {
65: {
l: {
108: {
l: {
108: {
l: {
59: {
c: [ 8704 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
114: {
l: {
105: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
114: {
l: {
102: {
l: {
59: {
c: [ 8497 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8497 ]
}
}
}
}
}
}
}
}
},
103: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 501 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 947 ]
},
100: {
l: {
59: {
c: [ 989 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 10886 ]
}
}
}
}
},
98: {
l: {
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 287 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 285 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1075 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 289 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 8805 ]
},
108: {
l: {
59: {
c: [ 8923 ]
}
}
},
113: {
l: {
59: {
c: [ 8805 ]
},
113: {
l: {
59: {
c: [ 8807 ]
}
}
},
115: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10878 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
99: {
l: {
59: {
c: [ 10921 ]
}
}
}
}
},
59: {
c: [ 10878 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10880 ]
},
111: {
l: {
59: {
c: [ 10882 ]
},
108: {
l: {
59: {
c: [ 10884 ]
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
59: {
c: [ 8923, 65024 ]
},
101: {
l: {
115: {
l: {
59: {
c: [ 10900 ]
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 8807 ]
},
108: {
l: {
59: {
c: [ 10892 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120100 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 8811 ]
},
103: {
l: {
59: {
c: [ 8921 ]
}
}
}
}
},
105: {
l: {
109: {
l: {
101: {
l: {
108: {
l: {
59: {
c: [ 8503 ]
}
}
}
}
}
}
}
}
},
106: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1107 ]
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
59: {
c: [ 10917 ]
}
}
},
59: {
c: [ 8823 ]
},
69: {
l: {
59: {
c: [ 10898 ]
}
}
},
106: {
l: {
59: {
c: [ 10916 ]
}
}
}
}
},
110: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10890 ]
},
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10890 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 10888 ]
},
113: {
l: {
59: {
c: [ 10888 ]
},
113: {
l: {
59: {
c: [ 8809 ]
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 8809 ]
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8935 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120152 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 96 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8458 ]
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 8819 ]
},
101: {
l: {
59: {
c: [ 10894 ]
}
}
},
108: {
l: {
59: {
c: [ 10896 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
99: {
l: {
99: {
l: {
59: {
c: [ 10919 ]
}
}
},
105: {
l: {
114: {
l: {
59: {
c: [ 10874 ]
}
}
}
}
}
}
},
59: {
c: [ 62 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8919 ]
}
}
}
}
}
}
},
108: {
l: {
80: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10645 ]
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
101: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 10876 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10886 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 10616 ]
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8919 ]
}
}
}
}
}
}
},
101: {
l: {
113: {
l: {
108: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8923 ]
}
}
}
}
}
}
}
}
},
113: {
l: {
108: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10892 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8823 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8819 ]
}
}
}
}
}
}
}
}
}
},
c: [ 62 ]
},
118: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
110: {
l: {
101: {
l: {
113: {
l: {
113: {
l: {
59: {
c: [ 8809, 65024 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
69: {
l: {
59: {
c: [ 8809, 65024 ]
}
}
}
}
}
}
}
}
},
71: {
l: {
97: {
l: {
109: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 915 ]
},
100: {
l: {
59: {
c: [ 988 ]
}
}
}
}
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 286 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 290 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 284 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1043 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 288 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120074 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 8921 ]
}
}
},
74: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1027 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120126 ]
}
}
}
}
}
}
},
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8805 ]
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8923 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8807 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 10914 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8823 ]
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10878 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8819 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119970 ]
}
}
}
}
}
}
},
84: {
l: {
59: {
c: [ 62 ]
}
},
c: [ 62 ]
},
116: {
l: {
59: {
c: [ 8811 ]
}
}
}
}
},
72: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
107: {
l: {
59: {
c: [ 711 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 94 ]
}
}
}
}
},
65: {
l: {
82: {
l: {
68: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1066 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 292 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 8460 ]
}
}
}
}
},
105: {
l: {
108: {
l: {
98: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8459 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 8461 ]
}
}
}
}
},
114: {
l: {
105: {
l: {
122: {
l: {
111: {
l: {
110: {
l: {
116: {
l: {
97: {
l: {
108: {
l: {
76: {
l: {
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 9472 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8459 ]
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 294 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
112: {
l: {
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
72: {
l: {
117: {
l: {
109: {
l: {
112: {
l: {
59: {
c: [ 8782 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8783 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
105: {
l: {
114: {
l: {
115: {
l: {
112: {
l: {
59: {
c: [ 8202 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
102: {
l: {
59: {
c: [ 189 ]
}
}
}
}
},
109: {
l: {
105: {
l: {
108: {
l: {
116: {
l: {
59: {
c: [ 8459 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
100: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1098 ]
}
}
}
}
}
}
},
114: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10568 ]
}
}
}
}
}
}
},
59: {
c: [ 8596 ]
},
119: {
l: {
59: {
c: [ 8621 ]
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8660 ]
}
}
}
}
}
}
},
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8463 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 293 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
97: {
l: {
114: {
l: {
116: {
l: {
115: {
l: {
59: {
c: [ 9829 ]
},
117: {
l: {
105: {
l: {
116: {
l: {
59: {
c: [ 9829 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
108: {
l: {
105: {
l: {
112: {
l: {
59: {
c: [ 8230 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
99: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8889 ]
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120101 ]
}
}
}
}
},
107: {
l: {
115: {
l: {
101: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10533 ]
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10534 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8703 ]
}
}
}
}
}
}
},
109: {
l: {
116: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8763 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
107: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8617 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8618 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120153 ]
}
}
}
}
},
114: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8213 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119997 ]
}
}
}
}
},
108: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8463 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 295 ]
}
}
}
}
}
}
}
}
}
}
},
121: {
l: {
98: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
59: {
c: [ 8259 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
104: {
l: {
101: {
l: {
110: {
l: {
59: {
c: [ 8208 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
73: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 205 ]
}
},
c: [ 205 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 206 ]
}
},
c: [ 206 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1048 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 304 ]
}
}
}
}
}
}
},
69: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1045 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 8465 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 204 ]
}
},
c: [ 204 ]
}
}
}
}
}
}
}
}
},
74: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 306 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 298 ]
}
}
}
}
},
103: {
l: {
105: {
l: {
110: {
l: {
97: {
l: {
114: {
l: {
121: {
l: {
73: {
l: {
59: {
c: [ 8520 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8465 ]
},
112: {
l: {
108: {
l: {
105: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8658 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
116: {
l: {
59: {
c: [ 8748 ]
},
101: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8747 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
115: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8898 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
105: {
l: {
115: {
l: {
105: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
67: {
l: {
111: {
l: {
109: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 8291 ]
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8290 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
79: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1025 ]
}
}
}
}
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 302 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120128 ]
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 921 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8464 ]
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 296 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
107: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1030 ]
}
}
}
}
}
}
},
109: {
l: {
108: {
l: {
59: {
c: [ 207 ]
}
},
c: [ 207 ]
}
}
}
}
}
}
},
105: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 237 ]
}
},
c: [ 237 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
59: {
c: [ 8291 ]
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 238 ]
}
},
c: [ 238 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1080 ]
}
}
}
}
},
101: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1077 ]
}
}
}
}
},
120: {
l: {
99: {
l: {
108: {
l: {
59: {
c: [ 161 ]
}
},
c: [ 161 ]
}
}
}
}
}
}
},
102: {
l: {
102: {
l: {
59: {
c: [ 8660 ]
}
}
},
114: {
l: {
59: {
c: [ 120102 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 236 ]
}
},
c: [ 236 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
59: {
c: [ 8520 ]
},
105: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10764 ]
}
}
}
}
}
}
},
110: {
l: {
116: {
l: {
59: {
c: [ 8749 ]
}
}
}
}
}
}
},
110: {
l: {
102: {
l: {
105: {
l: {
110: {
l: {
59: {
c: [ 10716 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
116: {
l: {
97: {
l: {
59: {
c: [ 8489 ]
}
}
}
}
}
}
}
}
},
106: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 307 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 299 ]
}
}
}
}
},
103: {
l: {
101: {
l: {
59: {
c: [ 8465 ]
}
}
},
108: {
l: {
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 8464 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
116: {
l: {
59: {
c: [ 8465 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
104: {
l: {
59: {
c: [ 305 ]
}
}
}
}
}
}
},
111: {
l: {
102: {
l: {
59: {
c: [ 8887 ]
}
}
}
}
},
112: {
l: {
101: {
l: {
100: {
l: {
59: {
c: [ 437 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
99: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 8453 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 8712 ]
},
102: {
l: {
105: {
l: {
110: {
l: {
59: {
c: [ 8734 ]
},
116: {
l: {
105: {
l: {
101: {
l: {
59: {
c: [ 10717 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 305 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8890 ]
}
}
}
}
}
}
},
59: {
c: [ 8747 ]
},
101: {
l: {
103: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
59: {
c: [ 8484 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8890 ]
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
104: {
l: {
107: {
l: {
59: {
c: [ 10775 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
111: {
l: {
100: {
l: {
59: {
c: [ 10812 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1105 ]
}
}
}
}
},
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 303 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120154 ]
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 953 ]
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
111: {
l: {
100: {
l: {
59: {
c: [ 10812 ]
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
101: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 191 ]
}
},
c: [ 191 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119998 ]
}
}
}
}
},
105: {
l: {
110: {
l: {
59: {
c: [ 8712 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8949 ]
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 8953 ]
}
}
},
115: {
l: {
59: {
c: [ 8948 ]
},
118: {
l: {
59: {
c: [ 8947 ]
}
}
}
}
},
118: {
l: {
59: {
c: [ 8712 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 8290 ]
},
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 297 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
107: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1110 ]
}
}
}
}
}
}
},
109: {
l: {
108: {
l: {
59: {
c: [ 239 ]
}
},
c: [ 239 ]
}
}
}
}
}
}
},
74: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 308 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1049 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120077 ]
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120129 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119973 ]
}
}
}
}
},
101: {
l: {
114: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1032 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
107: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1028 ]
}
}
}
}
}
}
}
}
}
}
},
106: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 309 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1081 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120103 ]
}
}
}
}
},
109: {
l: {
97: {
l: {
116: {
l: {
104: {
l: {
59: {
c: [ 567 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120155 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119999 ]
}
}
}
}
},
101: {
l: {
114: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1112 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
107: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1108 ]
}
}
}
}
}
}
}
}
}
}
},
75: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
97: {
l: {
59: {
c: [ 922 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 310 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1050 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120078 ]
}
}
}
}
},
72: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1061 ]
}
}
}
}
}
}
},
74: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1036 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120130 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119974 ]
}
}
}
}
}
}
}
}
},
107: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
97: {
l: {
59: {
c: [ 954 ]
},
118: {
l: {
59: {
c: [ 1008 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 311 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1082 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120104 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
101: {
l: {
101: {
l: {
110: {
l: {
59: {
c: [ 312 ]
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1093 ]
}
}
}
}
}
}
},
106: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1116 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120156 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 12e4 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
65: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8666 ]
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8656 ]
}
}
}
}
},
116: {
l: {
97: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 10523 ]
}
}
}
}
}
}
}
}
}
}
},
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 314 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
109: {
l: {
112: {
l: {
116: {
l: {
121: {
l: {
118: {
l: {
59: {
c: [ 10676 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
110: {
l: {
59: {
c: [ 8466 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
98: {
l: {
100: {
l: {
97: {
l: {
59: {
c: [ 955 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 10216 ]
},
100: {
l: {
59: {
c: [ 10641 ]
}
}
},
108: {
l: {
101: {
l: {
59: {
c: [ 10216 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 10885 ]
}
}
},
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 171 ]
}
},
c: [ 171 ]
}
}
}
}
},
114: {
l: {
114: {
l: {
98: {
l: {
59: {
c: [ 8676 ]
},
102: {
l: {
115: {
l: {
59: {
c: [ 10527 ]
}
}
}
}
}
}
},
59: {
c: [ 8592 ]
},
102: {
l: {
115: {
l: {
59: {
c: [ 10525 ]
}
}
}
}
},
104: {
l: {
107: {
l: {
59: {
c: [ 8617 ]
}
}
}
}
},
108: {
l: {
112: {
l: {
59: {
c: [ 8619 ]
}
}
}
}
},
112: {
l: {
108: {
l: {
59: {
c: [ 10553 ]
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 10611 ]
}
}
}
}
}
}
},
116: {
l: {
108: {
l: {
59: {
c: [ 8610 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 10521 ]
}
}
}
}
}
}
},
59: {
c: [ 10923 ]
},
101: {
l: {
59: {
c: [ 10925 ]
},
115: {
l: {
59: {
c: [ 10925, 65024 ]
}
}
}
}
}
}
}
}
},
98: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10508 ]
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 10098 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 123 ]
}
}
},
107: {
l: {
59: {
c: [ 91 ]
}
}
}
}
}
}
},
107: {
l: {
101: {
l: {
59: {
c: [ 10635 ]
}
}
},
115: {
l: {
108: {
l: {
100: {
l: {
59: {
c: [ 10639 ]
}
}
},
117: {
l: {
59: {
c: [ 10637 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
66: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10510 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 318 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 316 ]
}
}
}
}
}
}
},
105: {
l: {
108: {
l: {
59: {
c: [ 8968 ]
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 123 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1083 ]
}
}
}
}
},
100: {
l: {
99: {
l: {
97: {
l: {
59: {
c: [ 10550 ]
}
}
}
}
},
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 8220 ]
},
114: {
l: {
59: {
c: [ 8222 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
100: {
l: {
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10599 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
115: {
l: {
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10571 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
104: {
l: {
59: {
c: [ 8626 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 8804 ]
},
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8592 ]
},
116: {
l: {
97: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 8610 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
111: {
l: {
111: {
l: {
110: {
l: {
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 8637 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 8636 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
115: {
l: {
59: {
c: [ 8647 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8596 ]
},
115: {
l: {
59: {
c: [ 8646 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
111: {
l: {
111: {
l: {
110: {
l: {
115: {
l: {
59: {
c: [ 8651 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
113: {
l: {
117: {
l: {
105: {
l: {
103: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8621 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
104: {
l: {
114: {
l: {
101: {
l: {
101: {
l: {
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8907 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
103: {
l: {
59: {
c: [ 8922 ]
}
}
},
113: {
l: {
59: {
c: [ 8804 ]
},
113: {
l: {
59: {
c: [ 8806 ]
}
}
},
115: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10877 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
99: {
l: {
59: {
c: [ 10920 ]
}
}
}
}
},
59: {
c: [ 10877 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10879 ]
},
111: {
l: {
59: {
c: [ 10881 ]
},
114: {
l: {
59: {
c: [ 10883 ]
}
}
}
}
}
}
}
}
}
}
},
103: {
l: {
59: {
c: [ 8922, 65024 ]
},
101: {
l: {
115: {
l: {
59: {
c: [ 10899 ]
}
}
}
}
}
}
},
115: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10885 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8918 ]
}
}
}
}
}
}
},
101: {
l: {
113: {
l: {
103: {
l: {
116: {
l: {
114: {
l: {
59: {
c: [ 8922 ]
}
}
}
}
}
}
},
113: {
l: {
103: {
l: {
116: {
l: {
114: {
l: {
59: {
c: [ 10891 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
103: {
l: {
116: {
l: {
114: {
l: {
59: {
c: [ 8822 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8818 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 8806 ]
},
103: {
l: {
59: {
c: [ 10891 ]
}
}
}
}
},
102: {
l: {
105: {
l: {
115: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 10620 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
111: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 8970 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120105 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 8822 ]
},
69: {
l: {
59: {
c: [ 10897 ]
}
}
}
}
},
72: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10594 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
100: {
l: {
59: {
c: [ 8637 ]
}
}
},
117: {
l: {
59: {
c: [ 8636 ]
},
108: {
l: {
59: {
c: [ 10602 ]
}
}
}
}
}
}
}
}
},
98: {
l: {
108: {
l: {
107: {
l: {
59: {
c: [ 9604 ]
}
}
}
}
}
}
}
}
},
106: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1113 ]
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8647 ]
}
}
}
}
}
}
},
59: {
c: [ 8810 ]
},
99: {
l: {
111: {
l: {
114: {
l: {
110: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8990 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
100: {
l: {
59: {
c: [ 10603 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 9722 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 320 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
117: {
l: {
115: {
l: {
116: {
l: {
97: {
l: {
99: {
l: {
104: {
l: {
101: {
l: {
59: {
c: [ 9136 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 9136 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10889 ]
},
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10889 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 10887 ]
},
113: {
l: {
59: {
c: [ 10887 ]
},
113: {
l: {
59: {
c: [ 8808 ]
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 8808 ]
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8934 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 10220 ]
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8701 ]
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 10214 ]
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10229 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10231 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
112: {
l: {
115: {
l: {
116: {
l: {
111: {
l: {
59: {
c: [ 10236 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10230 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8619 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8620 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10629 ]
}
}
}
}
},
102: {
l: {
59: {
c: [ 120157 ]
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10797 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 10804 ]
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
97: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 8727 ]
}
}
}
}
}
}
},
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 95 ]
}
}
}
}
}
}
}
}
},
122: {
l: {
59: {
c: [ 9674 ]
},
101: {
l: {
110: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 9674 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
59: {
c: [ 10731 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 40 ]
},
108: {
l: {
116: {
l: {
59: {
c: [ 10643 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8646 ]
}
}
}
}
}
}
},
99: {
l: {
111: {
l: {
114: {
l: {
110: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8991 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8651 ]
},
100: {
l: {
59: {
c: [ 10605 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 8206 ]
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 8895 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
97: {
l: {
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 8249 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
114: {
l: {
59: {
c: [ 120001 ]
}
}
}
}
},
104: {
l: {
59: {
c: [ 8624 ]
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 8818 ]
},
101: {
l: {
59: {
c: [ 10893 ]
}
}
},
103: {
l: {
59: {
c: [ 10895 ]
}
}
}
}
}
}
},
113: {
l: {
98: {
l: {
59: {
c: [ 91 ]
}
}
},
117: {
l: {
111: {
l: {
59: {
c: [ 8216 ]
},
114: {
l: {
59: {
c: [ 8218 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 322 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
99: {
l: {
99: {
l: {
59: {
c: [ 10918 ]
}
}
},
105: {
l: {
114: {
l: {
59: {
c: [ 10873 ]
}
}
}
}
}
}
},
59: {
c: [ 60 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8918 ]
}
}
}
}
}
}
},
104: {
l: {
114: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8907 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8905 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10614 ]
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
101: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 10875 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
59: {
c: [ 9667 ]
},
101: {
l: {
59: {
c: [ 8884 ]
}
}
},
102: {
l: {
59: {
c: [ 9666 ]
}
}
}
}
},
80: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10646 ]
}
}
}
}
}
}
}
}
}
},
c: [ 60 ]
},
117: {
l: {
114: {
l: {
100: {
l: {
115: {
l: {
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10570 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10598 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
110: {
l: {
101: {
l: {
113: {
l: {
113: {
l: {
59: {
c: [ 8808, 65024 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
69: {
l: {
59: {
c: [ 8808, 65024 ]
}
}
}
}
}
}
}
}
},
76: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 313 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
98: {
l: {
100: {
l: {
97: {
l: {
59: {
c: [ 923 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 10218 ]
}
}
}
}
},
112: {
l: {
108: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
116: {
l: {
114: {
l: {
102: {
l: {
59: {
c: [ 8466 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8606 ]
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 317 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 315 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1051 ]
}
}
}
}
},
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
114: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 10216 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8676 ]
}
}
}
}
}
}
},
59: {
c: [ 8592 ]
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8646 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8656 ]
}
}
}
}
}
}
}
}
}
}
},
67: {
l: {
101: {
l: {
105: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 8968 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
114: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 10214 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
110: {
l: {
84: {
l: {
101: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10593 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10585 ]
}
}
}
}
}
}
},
59: {
c: [ 8643 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
108: {
l: {
111: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 8970 ]
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8596 ]
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10574 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8660 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8612 ]
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8867 ]
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10586 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10703 ]
}
}
}
}
}
}
},
59: {
c: [ 8882 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8884 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
112: {
l: {
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10577 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10592 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10584 ]
}
}
}
}
}
}
},
59: {
c: [ 8639 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10578 ]
}
}
}
}
}
}
},
59: {
c: [ 8636 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
115: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8922 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8806 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8822 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10913 ]
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10877 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8818 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120079 ]
}
}
}
}
},
74: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1033 ]
}
}
}
}
}
}
},
108: {
l: {
59: {
c: [ 8920 ]
},
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8666 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 319 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
110: {
l: {
103: {
l: {
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10229 ]
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10231 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10232 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10234 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10230 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10233 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120131 ]
}
}
}
}
},
119: {
l: {
101: {
l: {
114: {
l: {
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8601 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8600 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8466 ]
}
}
}
}
},
104: {
l: {
59: {
c: [ 8624 ]
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 321 ]
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
59: {
c: [ 60 ]
}
},
c: [ 60 ]
},
116: {
l: {
59: {
c: [ 8810 ]
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 175 ]
}
},
c: [ 175 ]
}
}
},
108: {
l: {
101: {
l: {
59: {
c: [ 9794 ]
}
}
},
116: {
l: {
59: {
c: [ 10016 ]
},
101: {
l: {
115: {
l: {
101: {
l: {
59: {
c: [ 10016 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8614 ]
},
115: {
l: {
116: {
l: {
111: {
l: {
59: {
c: [ 8614 ]
},
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 8615 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8612 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 8613 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
107: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 9646 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
111: {
l: {
109: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 10793 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1084 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8212 ]
}
}
}
}
}
}
}
}
},
68: {
l: {
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8762 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
97: {
l: {
115: {
l: {
117: {
l: {
114: {
l: {
101: {
l: {
100: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 8737 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120106 ]
}
}
}
}
},
104: {
l: {
111: {
l: {
59: {
c: [ 8487 ]
}
}
}
}
},
105: {
l: {
99: {
l: {
114: {
l: {
111: {
l: {
59: {
c: [ 181 ]
}
},
c: [ 181 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 42 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10992 ]
}
}
}
}
}
}
},
59: {
c: [ 8739 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 183 ]
}
},
c: [ 183 ]
}
}
}
}
}
}
},
110: {
l: {
117: {
l: {
115: {
l: {
98: {
l: {
59: {
c: [ 8863 ]
}
}
},
59: {
c: [ 8722 ]
},
100: {
l: {
59: {
c: [ 8760 ]
},
117: {
l: {
59: {
c: [ 10794 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
99: {
l: {
112: {
l: {
59: {
c: [ 10971 ]
}
}
}
}
},
100: {
l: {
114: {
l: {
59: {
c: [ 8230 ]
}
}
}
}
}
}
},
110: {
l: {
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8723 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
100: {
l: {
101: {
l: {
108: {
l: {
115: {
l: {
59: {
c: [ 8871 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120158 ]
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8723 ]
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120002 ]
}
}
}
}
},
116: {
l: {
112: {
l: {
111: {
l: {
115: {
l: {
59: {
c: [ 8766 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
59: {
c: [ 956 ]
},
108: {
l: {
116: {
l: {
105: {
l: {
109: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8888 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8888 ]
}
}
}
}
}
}
}
}
}
}
},
77: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10501 ]
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1052 ]
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8287 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
114: {
l: {
102: {
l: {
59: {
c: [ 8499 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120080 ]
}
}
}
}
},
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
80: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8723 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120132 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8499 ]
}
}
}
}
}
}
},
117: {
l: {
59: {
c: [ 924 ]
}
}
}
}
},
110: {
l: {
97: {
l: {
98: {
l: {
108: {
l: {
97: {
l: {
59: {
c: [ 8711 ]
}
}
}
}
}
}
},
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 324 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 8736, 8402 ]
}
}
}
}
},
112: {
l: {
59: {
c: [ 8777 ]
},
69: {
l: {
59: {
c: [ 10864, 824 ]
}
}
},
105: {
l: {
100: {
l: {
59: {
c: [ 8779, 824 ]
}
}
}
}
},
111: {
l: {
115: {
l: {
59: {
c: [ 329 ]
}
}
}
}
},
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 8777 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
117: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 9838 ]
},
115: {
l: {
59: {
c: [ 8469 ]
}
}
}
}
}
}
},
59: {
c: [ 9838 ]
}
}
}
}
}
}
}
}
},
98: {
l: {
115: {
l: {
112: {
l: {
59: {
c: [ 160 ]
}
},
c: [ 160 ]
}
}
},
117: {
l: {
109: {
l: {
112: {
l: {
59: {
c: [ 8782, 824 ]
},
101: {
l: {
59: {
c: [ 8783, 824 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10819 ]
}
}
},
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 328 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 326 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 8775 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10861, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 10818 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1085 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8211 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
97: {
l: {
114: {
l: {
104: {
l: {
107: {
l: {
59: {
c: [ 10532 ]
}
}
}
}
},
114: {
l: {
59: {
c: [ 8599 ]
},
111: {
l: {
119: {
l: {
59: {
c: [ 8599 ]
}
}
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8663 ]
}
}
}
}
}
}
},
59: {
c: [ 8800 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8784, 824 ]
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
105: {
l: {
118: {
l: {
59: {
c: [ 8802 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
101: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10536 ]
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 8770, 824 ]
}
}
}
}
}
}
},
120: {
l: {
105: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 8708 ]
},
115: {
l: {
59: {
c: [ 8708 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120107 ]
}
}
}
}
},
103: {
l: {
69: {
l: {
59: {
c: [ 8807, 824 ]
}
}
},
101: {
l: {
59: {
c: [ 8817 ]
},
113: {
l: {
59: {
c: [ 8817 ]
},
113: {
l: {
59: {
c: [ 8807, 824 ]
}
}
},
115: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10878, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
59: {
c: [ 10878, 824 ]
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8821 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 8815 ]
},
114: {
l: {
59: {
c: [ 8815 ]
}
}
}
}
}
}
},
71: {
l: {
103: {
l: {
59: {
c: [ 8921, 824 ]
}
}
},
116: {
l: {
59: {
c: [ 8811, 8402 ]
},
118: {
l: {
59: {
c: [ 8811, 824 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8622 ]
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8654 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10994 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
59: {
c: [ 8715 ]
},
115: {
l: {
59: {
c: [ 8956 ]
},
100: {
l: {
59: {
c: [ 8954 ]
}
}
}
}
},
118: {
l: {
59: {
c: [ 8715 ]
}
}
}
}
},
106: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1114 ]
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8602 ]
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8653 ]
}
}
}
}
}
}
},
100: {
l: {
114: {
l: {
59: {
c: [ 8229 ]
}
}
}
}
},
69: {
l: {
59: {
c: [ 8806, 824 ]
}
}
},
101: {
l: {
59: {
c: [ 8816 ]
},
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8602 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8622 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
113: {
l: {
59: {
c: [ 8816 ]
},
113: {
l: {
59: {
c: [ 8806, 824 ]
}
}
},
115: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10877, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
59: {
c: [ 10877, 824 ]
},
115: {
l: {
59: {
c: [ 8814 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8820 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 8814 ]
},
114: {
l: {
105: {
l: {
59: {
c: [ 8938 ]
},
101: {
l: {
59: {
c: [ 8940 ]
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8653 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8654 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
59: {
c: [ 8920, 824 ]
}
}
},
116: {
l: {
59: {
c: [ 8810, 8402 ]
},
118: {
l: {
59: {
c: [ 8810, 824 ]
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
100: {
l: {
59: {
c: [ 8740 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120159 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 172 ]
},
105: {
l: {
110: {
l: {
59: {
c: [ 8713 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8949, 824 ]
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 8953, 824 ]
}
}
},
118: {
l: {
97: {
l: {
59: {
c: [ 8713 ]
}
}
},
98: {
l: {
59: {
c: [ 8951 ]
}
}
},
99: {
l: {
59: {
c: [ 8950 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
105: {
l: {
59: {
c: [ 8716 ]
},
118: {
l: {
97: {
l: {
59: {
c: [ 8716 ]
}
}
},
98: {
l: {
59: {
c: [ 8958 ]
}
}
},
99: {
l: {
59: {
c: [ 8957 ]
}
}
}
}
}
}
}
}
}
},
c: [ 172 ]
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
101: {
l: {
108: {
l: {
59: {
c: [ 8742 ]
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8742 ]
},
115: {
l: {
108: {
l: {
59: {
c: [ 11005, 8421 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 8706, 824 ]
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10772 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 8832 ]
},
99: {
l: {
117: {
l: {
101: {
l: {
59: {
c: [ 8928 ]
}
}
}
}
}
}
},
101: {
l: {
99: {
l: {
59: {
c: [ 8832 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 10927, 824 ]
}
}
}
}
}
}
},
59: {
c: [ 10927, 824 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 10547, 824 ]
}
}
},
59: {
c: [ 8603 ]
},
119: {
l: {
59: {
c: [ 8605, 824 ]
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8655 ]
}
}
}
}
}
}
},
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8603 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 8939 ]
},
101: {
l: {
59: {
c: [ 8941 ]
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8655 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
59: {
c: [ 8833 ]
},
99: {
l: {
117: {
l: {
101: {
l: {
59: {
c: [ 8929 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 10928, 824 ]
}
}
},
114: {
l: {
59: {
c: [ 120003 ]
}
}
}
}
},
104: {
l: {
111: {
l: {
114: {
l: {
116: {
l: {
109: {
l: {
105: {
l: {
100: {
l: {
59: {
c: [ 8740 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
101: {
l: {
108: {
l: {
59: {
c: [ 8742 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 8769 ]
},
101: {
l: {
59: {
c: [ 8772 ]
},
113: {
l: {
59: {
c: [ 8772 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
100: {
l: {
59: {
c: [ 8740 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8742 ]
}
}
}
}
}
}
},
113: {
l: {
115: {
l: {
117: {
l: {
98: {
l: {
101: {
l: {
59: {
c: [ 8930 ]
}
}
}
}
},
112: {
l: {
101: {
l: {
59: {
c: [ 8931 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 8836 ]
},
69: {
l: {
59: {
c: [ 10949, 824 ]
}
}
},
101: {
l: {
59: {
c: [ 8840 ]
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8834, 8402 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8840 ]
},
113: {
l: {
59: {
c: [ 10949, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
99: {
l: {
59: {
c: [ 8833 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 10928, 824 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8837 ]
},
69: {
l: {
59: {
c: [ 10950, 824 ]
}
}
},
101: {
l: {
59: {
c: [ 8841 ]
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8835, 8402 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8841 ]
},
113: {
l: {
59: {
c: [ 10950, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
103: {
l: {
108: {
l: {
59: {
c: [ 8825 ]
}
}
}
}
},
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 241 ]
}
},
c: [ 241 ]
}
}
}
}
}
}
},
108: {
l: {
103: {
l: {
59: {
c: [ 8824 ]
}
}
}
}
},
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8938 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8940 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8939 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8941 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
59: {
c: [ 957 ]
},
109: {
l: {
59: {
c: [ 35 ]
},
101: {
l: {
114: {
l: {
111: {
l: {
59: {
c: [ 8470 ]
}
}
}
}
}
}
},
115: {
l: {
112: {
l: {
59: {
c: [ 8199 ]
}
}
}
}
}
}
}
}
},
118: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8781, 8402 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8876 ]
}
}
}
}
}
}
}
}
},
68: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8877 ]
}
}
}
}
}
}
}
}
},
103: {
l: {
101: {
l: {
59: {
c: [ 8805, 8402 ]
}
}
},
116: {
l: {
59: {
c: [ 62, 8402 ]
}
}
}
}
},
72: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10500 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
102: {
l: {
105: {
l: {
110: {
l: {
59: {
c: [ 10718 ]
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10498 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 8804, 8402 ]
}
}
},
116: {
l: {
59: {
c: [ 60, 8402 ]
},
114: {
l: {
105: {
l: {
101: {
l: {
59: {
c: [ 8884, 8402 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10499 ]
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
101: {
l: {
59: {
c: [ 8885, 8402 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8764, 8402 ]
}
}
}
}
}
}
}
}
},
86: {
l: {
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8878 ]
}
}
}
}
}
}
}
}
},
68: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8879 ]
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
97: {
l: {
114: {
l: {
104: {
l: {
107: {
l: {
59: {
c: [ 10531 ]
}
}
}
}
},
114: {
l: {
59: {
c: [ 8598 ]
},
111: {
l: {
119: {
l: {
59: {
c: [ 8598 ]
}
}
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8662 ]
}
}
}
}
}
}
},
110: {
l: {
101: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10535 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
78: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 323 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 327 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 325 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1053 ]
}
}
}
}
},
101: {
l: {
103: {
l: {
97: {
l: {
116: {
l: {
105: {
l: {
118: {
l: {
101: {
l: {
77: {
l: {
101: {
l: {
100: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8203 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
104: {
l: {
105: {
l: {
99: {
l: {
107: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8203 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8203 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
114: {
l: {
121: {
l: {
84: {
l: {
104: {
l: {
105: {
l: {
110: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8203 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
116: {
l: {
101: {
l: {
100: {
l: {
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8811 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8810 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
76: {
l: {
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 10 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120081 ]
}
}
}
}
},
74: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1034 ]
}
}
}
}
}
}
},
111: {
l: {
66: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
107: {
l: {
59: {
c: [ 8288 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
66: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
107: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 160 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 8469 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 10988 ]
},
67: {
l: {
111: {
l: {
110: {
l: {
103: {
l: {
114: {
l: {
117: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8802 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
67: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8813 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
105: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8742 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
108: {
l: {
101: {
l: {
109: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8713 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8800 ]
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8770, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
120: {
l: {
105: {
l: {
115: {
l: {
116: {
l: {
115: {
l: {
59: {
c: [ 8708 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8815 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8817 ]
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8807, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8811, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8825 ]
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10878, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8821 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
72: {
l: {
117: {
l: {
109: {
l: {
112: {
l: {
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
72: {
l: {
117: {
l: {
109: {
l: {
112: {
l: {
59: {
c: [ 8782, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8783, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
84: {
l: {
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10703, 824 ]
}
}
}
}
}
}
},
59: {
c: [ 8938 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8940 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
115: {
l: {
59: {
c: [ 8814 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8816 ]
}
}
}
}
}
}
}
}
}
}
},
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8810, 824 ]
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10877, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8820 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
78: {
l: {
101: {
l: {
115: {
l: {
116: {
l: {
101: {
l: {
100: {
l: {
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 10914, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10913, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
80: {
l: {
114: {
l: {
101: {
l: {
99: {
l: {
101: {
l: {
100: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8832 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10927, 824 ]
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8928 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
69: {
l: {
108: {
l: {
101: {
l: {
109: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8716 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
84: {
l: {
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10704, 824 ]
}
}
}
}
}
}
},
59: {
c: [ 8939 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8941 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
83: {
l: {
117: {
l: {
98: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8847, 824 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8930 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8848, 824 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8931 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8834, 8402 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8840 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
99: {
l: {
101: {
l: {
101: {
l: {
100: {
l: {
115: {
l: {
59: {
c: [ 8833 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10928, 824 ]
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8929 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8831, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8835, 8402 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8841 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8769 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8772 ]
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8775 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8777 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
105: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8740 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119977 ]
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 209 ]
}
},
c: [ 209 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
59: {
c: [ 925 ]
}
}
}
}
},
79: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 211 ]
}
},
c: [ 211 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 212 ]
}
},
c: [ 212 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1054 ]
}
}
}
}
},
100: {
l: {
98: {
l: {
108: {
l: {
97: {
l: {
99: {
l: {
59: {
c: [ 336 ]
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 338 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120082 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 210 ]
}
},
c: [ 210 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 332 ]
}
}
}
}
}
}
},
101: {
l: {
103: {
l: {
97: {
l: {
59: {
c: [ 937 ]
}
}
}
}
}
}
},
105: {
l: {
99: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 927 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120134 ]
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
110: {
l: {
67: {
l: {
117: {
l: {
114: {
l: {
108: {
l: {
121: {
l: {
68: {
l: {
111: {
l: {
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
81: {
l: {
117: {
l: {
111: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 8220 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
81: {
l: {
117: {
l: {
111: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 8216 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 10836 ]
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119978 ]
}
}
}
}
},
108: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 216 ]
}
},
c: [ 216 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 213 ]
}
},
c: [ 213 ]
}
}
}
}
},
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 10807 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 214 ]
}
},
c: [ 214 ]
}
}
}
}
},
118: {
l: {
101: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8254 ]
}
}
}
}
},
114: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 9182 ]
}
}
},
107: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 9140 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
80: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
104: {
l: {
101: {
l: {
115: {
l: {
105: {
l: {
115: {
l: {
59: {
c: [ 9180 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 243 ]
}
},
c: [ 243 ]
}
}
}
}
}
}
},
115: {
l: {
116: {
l: {
59: {
c: [ 8859 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 244 ]
}
},
c: [ 244 ]
},
59: {
c: [ 8858 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1086 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8861 ]
}
}
}
}
}
}
},
98: {
l: {
108: {
l: {
97: {
l: {
99: {
l: {
59: {
c: [ 337 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
118: {
l: {
59: {
c: [ 10808 ]
}
}
}
}
},
111: {
l: {
116: {
l: {
59: {
c: [ 8857 ]
}
}
}
}
},
115: {
l: {
111: {
l: {
108: {
l: {
100: {
l: {
59: {
c: [ 10684 ]
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 339 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10687 ]
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120108 ]
}
}
}
}
},
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 731 ]
}
}
}
}
},
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 242 ]
}
},
c: [ 242 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 10689 ]
}
}
}
}
},
104: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10677 ]
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 937 ]
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8750 ]
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8634 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10686 ]
}
}
}
}
},
114: {
l: {
111: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10683 ]
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 8254 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 10688 ]
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 333 ]
}
}
}
}
}
}
},
101: {
l: {
103: {
l: {
97: {
l: {
59: {
c: [ 969 ]
}
}
}
}
}
}
},
105: {
l: {
99: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 959 ]
}
}
}
}
}
}
}
}
},
100: {
l: {
59: {
c: [ 10678 ]
}
}
},
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8854 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120160 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10679 ]
}
}
}
}
},
101: {
l: {
114: {
l: {
112: {
l: {
59: {
c: [ 10681 ]
}
}
}
}
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8853 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8635 ]
}
}
}
}
}
}
},
59: {
c: [ 8744 ]
},
100: {
l: {
59: {
c: [ 10845 ]
},
101: {
l: {
114: {
l: {
59: {
c: [ 8500 ]
},
111: {
l: {
102: {
l: {
59: {
c: [ 8500 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
59: {
c: [ 170 ]
}
},
c: [ 170 ]
},
109: {
l: {
59: {
c: [ 186 ]
}
},
c: [ 186 ]
}
}
},
105: {
l: {
103: {
l: {
111: {
l: {
102: {
l: {
59: {
c: [ 8886 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
114: {
l: {
59: {
c: [ 10838 ]
}
}
}
}
},
115: {
l: {
108: {
l: {
111: {
l: {
112: {
l: {
101: {
l: {
59: {
c: [ 10839 ]
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 10843 ]
}
}
}
}
},
83: {
l: {
59: {
c: [ 9416 ]
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8500 ]
}
}
}
}
},
108: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 248 ]
}
},
c: [ 248 ]
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
59: {
c: [ 8856 ]
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 245 ]
}
},
c: [ 245 ]
}
}
}
}
},
109: {
l: {
101: {
l: {
115: {
l: {
97: {
l: {
115: {
l: {
59: {
c: [ 10806 ]
}
}
}
}
},
59: {
c: [ 8855 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 246 ]
}
},
c: [ 246 ]
}
}
}
}
},
118: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 9021 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
97: {
l: {
59: {
c: [ 182 ]
},
108: {
l: {
108: {
l: {
101: {
l: {
108: {
l: {
59: {
c: [ 8741 ]
}
}
}
}
}
}
}
}
}
},
c: [ 182 ]
},
59: {
c: [ 8741 ]
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 10995 ]
}
}
}
}
},
108: {
l: {
59: {
c: [ 11005 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 8706 ]
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1087 ]
}
}
}
}
},
101: {
l: {
114: {
l: {
99: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 37 ]
}
}
}
}
}
}
},
105: {
l: {
111: {
l: {
100: {
l: {
59: {
c: [ 46 ]
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 8240 ]
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8869 ]
}
}
},
116: {
l: {
101: {
l: {
110: {
l: {
107: {
l: {
59: {
c: [ 8241 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120109 ]
}
}
}
}
},
104: {
l: {
105: {
l: {
59: {
c: [ 966 ]
},
118: {
l: {
59: {
c: [ 981 ]
}
}
}
}
},
109: {
l: {
109: {
l: {
97: {
l: {
116: {
l: {
59: {
c: [ 8499 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 9742 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
59: {
c: [ 960 ]
},
116: {
l: {
99: {
l: {
104: {
l: {
102: {
l: {
111: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 8916 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 982 ]
}
}
}
}
},
108: {
l: {
97: {
l: {
110: {
l: {
99: {
l: {
107: {
l: {
59: {
c: [ 8463 ]
},
104: {
l: {
59: {
c: [ 8462 ]
}
}
}
}
}
}
},
107: {
l: {
118: {
l: {
59: {
c: [ 8463 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
115: {
l: {
97: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10787 ]
}
}
}
}
}
}
}
}
},
98: {
l: {
59: {
c: [ 8862 ]
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10786 ]
}
}
}
}
}
}
},
59: {
c: [ 43 ]
},
100: {
l: {
111: {
l: {
59: {
c: [ 8724 ]
}
}
},
117: {
l: {
59: {
c: [ 10789 ]
}
}
}
}
},
101: {
l: {
59: {
c: [ 10866 ]
}
}
},
109: {
l: {
110: {
l: {
59: {
c: [ 177 ]
}
},
c: [ 177 ]
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 10790 ]
}
}
}
}
}
}
},
116: {
l: {
119: {
l: {
111: {
l: {
59: {
c: [ 10791 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 177 ]
}
}
},
111: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10773 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120161 ]
}
}
}
}
},
117: {
l: {
110: {
l: {
100: {
l: {
59: {
c: [ 163 ]
}
},
c: [ 163 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10935 ]
}
}
}
}
},
59: {
c: [ 8826 ]
},
99: {
l: {
117: {
l: {
101: {
l: {
59: {
c: [ 8828 ]
}
}
}
}
}
}
},
101: {
l: {
99: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10935 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8826 ]
},
99: {
l: {
117: {
l: {
114: {
l: {
108: {
l: {
121: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8828 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
113: {
l: {
59: {
c: [ 10927 ]
}
}
}
}
},
110: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10937 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
113: {
l: {
113: {
l: {
59: {
c: [ 10933 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8936 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8830 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 10927 ]
}
}
},
69: {
l: {
59: {
c: [ 10931 ]
}
}
},
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 8242 ]
},
115: {
l: {
59: {
c: [ 8473 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10937 ]
}
}
}
}
},
69: {
l: {
59: {
c: [ 10933 ]
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8936 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
100: {
l: {
59: {
c: [ 8719 ]
}
}
},
102: {
l: {
97: {
l: {
108: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 9006 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 8978 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
117: {
l: {
114: {
l: {
102: {
l: {
59: {
c: [ 8979 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8733 ]
},
116: {
l: {
111: {
l: {
59: {
c: [ 8733 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8830 ]
}
}
}
}
}
}
},
117: {
l: {
114: {
l: {
101: {
l: {
108: {
l: {
59: {
c: [ 8880 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120005 ]
}
}
}
}
},
105: {
l: {
59: {
c: [ 968 ]
}
}
}
}
},
117: {
l: {
110: {
l: {
99: {
l: {
115: {
l: {
112: {
l: {
59: {
c: [ 8200 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
80: {
l: {
97: {
l: {
114: {
l: {
116: {
l: {
105: {
l: {
97: {
l: {
108: {
l: {
68: {
l: {
59: {
c: [ 8706 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1055 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120083 ]
}
}
}
}
},
104: {
l: {
105: {
l: {
59: {
c: [ 934 ]
}
}
}
}
},
105: {
l: {
59: {
c: [ 928 ]
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
77: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 177 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
105: {
l: {
110: {
l: {
99: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
112: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 8460 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 8473 ]
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 10939 ]
},
101: {
l: {
99: {
l: {
101: {
l: {
100: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8826 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10927 ]
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8828 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8830 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 8243 ]
}
}
}
}
}
}
},
111: {
l: {
100: {
l: {
117: {
l: {
99: {
l: {
116: {
l: {
59: {
c: [ 8719 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
111: {
l: {
114: {
l: {
116: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8733 ]
}
}
}
}
},
59: {
c: [ 8759 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119979 ]
}
}
}
}
},
105: {
l: {
59: {
c: [ 936 ]
}
}
}
}
}
}
},
81: {
l: {
102: {
l: {
114: {
l: {
59: {
c: [ 120084 ]
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 8474 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119980 ]
}
}
}
}
}
}
},
85: {
l: {
79: {
l: {
84: {
l: {
59: {
c: [ 34 ]
}
},
c: [ 34 ]
}
}
}
}
}
}
},
113: {
l: {
102: {
l: {
114: {
l: {
59: {
c: [ 120110 ]
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10764 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120162 ]
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 8279 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120006 ]
}
}
}
}
}
}
},
117: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
110: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
115: {
l: {
59: {
c: [ 8461 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10774 ]
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 63 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8799 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
116: {
l: {
59: {
c: [ 34 ]
}
},
c: [ 34 ]
}
}
}
}
}
}
},
114: {
l: {
65: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8667 ]
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8658 ]
}
}
}
}
},
116: {
l: {
97: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 10524 ]
}
}
}
}
}
}
}
}
}
}
},
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8765, 817 ]
}
}
},
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 341 ]
}
}
}
}
}
}
}
}
},
100: {
l: {
105: {
l: {
99: {
l: {
59: {
c: [ 8730 ]
}
}
}
}
}
}
},
101: {
l: {
109: {
l: {
112: {
l: {
116: {
l: {
121: {
l: {
118: {
l: {
59: {
c: [ 10675 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 10217 ]
},
100: {
l: {
59: {
c: [ 10642 ]
}
}
},
101: {
l: {
59: {
c: [ 10661 ]
}
}
},
108: {
l: {
101: {
l: {
59: {
c: [ 10217 ]
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 187 ]
}
},
c: [ 187 ]
}
}
}
}
},
114: {
l: {
114: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10613 ]
}
}
}
}
},
98: {
l: {
59: {
c: [ 8677 ]
},
102: {
l: {
115: {
l: {
59: {
c: [ 10528 ]
}
}
}
}
}
}
},
99: {
l: {
59: {
c: [ 10547 ]
}
}
},
59: {
c: [ 8594 ]
},
102: {
l: {
115: {
l: {
59: {
c: [ 10526 ]
}
}
}
}
},
104: {
l: {
107: {
l: {
59: {
c: [ 8618 ]
}
}
}
}
},
108: {
l: {
112: {
l: {
59: {
c: [ 8620 ]
}
}
}
}
},
112: {
l: {
108: {
l: {
59: {
c: [ 10565 ]
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 10612 ]
}
}
}
}
}
}
},
116: {
l: {
108: {
l: {
59: {
c: [ 8611 ]
}
}
}
}
},
119: {
l: {
59: {
c: [ 8605 ]
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 10522 ]
}
}
}
}
}
}
},
105: {
l: {
111: {
l: {
59: {
c: [ 8758 ]
},
110: {
l: {
97: {
l: {
108: {
l: {
115: {
l: {
59: {
c: [ 8474 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
98: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10509 ]
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 10099 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 125 ]
}
}
},
107: {
l: {
59: {
c: [ 93 ]
}
}
}
}
}
}
},
107: {
l: {
101: {
l: {
59: {
c: [ 10636 ]
}
}
},
115: {
l: {
108: {
l: {
100: {
l: {
59: {
c: [ 10638 ]
}
}
},
117: {
l: {
59: {
c: [ 10640 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
66: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10511 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 345 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 343 ]
}
}
}
}
}
}
},
105: {
l: {
108: {
l: {
59: {
c: [ 8969 ]
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 125 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1088 ]
}
}
}
}
},
100: {
l: {
99: {
l: {
97: {
l: {
59: {
c: [ 10551 ]
}
}
}
}
},
108: {
l: {
100: {
l: {
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10601 ]
}
}
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 8221 ]
},
114: {
l: {
59: {
c: [ 8221 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
104: {
l: {
59: {
c: [ 8627 ]
}
}
}
}
}
}
},
101: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8476 ]
},
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 8475 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
116: {
l: {
59: {
c: [ 8476 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
59: {
c: [ 8477 ]
}
}
}
}
}
}
},
99: {
l: {
116: {
l: {
59: {
c: [ 9645 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 174 ]
}
},
c: [ 174 ]
}
}
},
102: {
l: {
105: {
l: {
115: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 10621 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
111: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 8971 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120111 ]
}
}
}
}
},
72: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10596 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
100: {
l: {
59: {
c: [ 8641 ]
}
}
},
117: {
l: {
59: {
c: [ 8640 ]
},
108: {
l: {
59: {
c: [ 10604 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
59: {
c: [ 961 ]
},
118: {
l: {
59: {
c: [ 1009 ]
}
}
}
}
}
}
},
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8594 ]
},
116: {
l: {
97: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 8611 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
111: {
l: {
111: {
l: {
110: {
l: {
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 8641 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 8640 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
115: {
l: {
59: {
c: [ 8644 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
111: {
l: {
111: {
l: {
110: {
l: {
115: {
l: {
59: {
c: [ 8652 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
115: {
l: {
59: {
c: [ 8649 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
113: {
l: {
117: {
l: {
105: {
l: {
103: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8605 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
104: {
l: {
114: {
l: {
101: {
l: {
101: {
l: {
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8908 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 730 ]
}
}
}
}
},
115: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
115: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8787 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8644 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8652 ]
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 8207 ]
}
}
}
}
},
109: {
l: {
111: {
l: {
117: {
l: {
115: {
l: {
116: {
l: {
97: {
l: {
99: {
l: {
104: {
l: {
101: {
l: {
59: {
c: [ 9137 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 9137 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
109: {
l: {
105: {
l: {
100: {
l: {
59: {
c: [ 10990 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 10221 ]
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8702 ]
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 10215 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10630 ]
}
}
}
}
},
102: {
l: {
59: {
c: [ 120163 ]
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10798 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 10805 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 41 ]
},
103: {
l: {
116: {
l: {
59: {
c: [ 10644 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
111: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10770 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8649 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
97: {
l: {
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 8250 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
114: {
l: {
59: {
c: [ 120007 ]
}
}
}
}
},
104: {
l: {
59: {
c: [ 8625 ]
}
}
},
113: {
l: {
98: {
l: {
59: {
c: [ 93 ]
}
}
},
117: {
l: {
111: {
l: {
59: {
c: [ 8217 ]
},
114: {
l: {
59: {
c: [ 8217 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
104: {
l: {
114: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8908 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8906 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
59: {
c: [ 9657 ]
},
101: {
l: {
59: {
c: [ 8885 ]
}
}
},
102: {
l: {
59: {
c: [ 9656 ]
}
}
},
108: {
l: {
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 10702 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
108: {
l: {
117: {
l: {
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10600 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
120: {
l: {
59: {
c: [ 8478 ]
}
}
}
}
},
82: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 340 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 10219 ]
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8608 ]
},
116: {
l: {
108: {
l: {
59: {
c: [ 10518 ]
}
}
}
}
}
}
}
}
}
}
},
66: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10512 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 344 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 342 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1056 ]
}
}
}
}
},
101: {
l: {
59: {
c: [ 8476 ]
},
118: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
69: {
l: {
108: {
l: {
101: {
l: {
109: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8715 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
105: {
l: {
108: {
l: {
105: {
l: {
98: {
l: {
114: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
59: {
c: [ 8651 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
112: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
105: {
l: {
108: {
l: {
105: {
l: {
98: {
l: {
114: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
59: {
c: [ 10607 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
71: {
l: {
59: {
c: [ 174 ]
}
},
c: [ 174 ]
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 8476 ]
}
}
}
}
},
104: {
l: {
111: {
l: {
59: {
c: [ 929 ]
}
}
}
}
},
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
114: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 10217 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8677 ]
}
}
}
}
}
}
},
59: {
c: [ 8594 ]
},
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8644 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8658 ]
}
}
}
}
}
}
}
}
}
}
},
67: {
l: {
101: {
l: {
105: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 8969 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
114: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 10215 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
110: {
l: {
84: {
l: {
101: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10589 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10581 ]
}
}
}
}
}
}
},
59: {
c: [ 8642 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
108: {
l: {
111: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 8971 ]
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8614 ]
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8866 ]
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10587 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10704 ]
}
}
}
}
}
}
},
59: {
c: [ 8883 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8885 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
112: {
l: {
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10575 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10588 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10580 ]
}
}
}
}
}
}
},
59: {
c: [ 8638 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10579 ]
}
}
}
}
}
}
},
59: {
c: [ 8640 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 8477 ]
}
}
}
}
},
117: {
l: {
110: {
l: {
100: {
l: {
73: {
l: {
109: {
l: {
112: {
l: {
108: {
l: {
105: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 10608 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8667 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8475 ]
}
}
}
}
},
104: {
l: {
59: {
c: [ 8625 ]
}
}
}
}
},
117: {
l: {
108: {
l: {
101: {
l: {
68: {
l: {
101: {
l: {
108: {
l: {
97: {
l: {
121: {
l: {
101: {
l: {
100: {
l: {
59: {
c: [ 10740 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 346 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 352 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 10940 ]
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 350 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 348 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1057 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120086 ]
}
}
}
}
},
72: {
l: {
67: {
l: {
72: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1065 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1064 ]
}
}
}
}
}
}
},
104: {
l: {
111: {
l: {
114: {
l: {
116: {
l: {
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8595 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8592 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8594 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
112: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8593 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
103: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 931 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
67: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 8728 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
79: {
l: {
70: {
l: {
84: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1068 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120138 ]
}
}
}
}
}
}
},
113: {
l: {
114: {
l: {
116: {
l: {
59: {
c: [ 8730 ]
}
}
}
}
},
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9633 ]
},
73: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8851 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
117: {
l: {
98: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8847 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8849 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8848 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8850 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
110: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8852 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119982 ]
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8902 ]
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 8912 ]
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8912 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8838 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
99: {
l: {
101: {
l: {
101: {
l: {
100: {
l: {
115: {
l: {
59: {
c: [ 8827 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10928 ]
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8829 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8831 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
84: {
l: {
104: {
l: {
97: {
l: {
116: {
l: {
59: {
c: [ 8715 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 8721 ]
}
}
},
112: {
l: {
59: {
c: [ 8913 ]
},
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8835 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8839 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8913 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 347 ]
}
}
}
}
}
}
}
}
}
}
},
98: {
l: {
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 8218 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10936 ]
}
}
},
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 353 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 8827 ]
},
99: {
l: {
117: {
l: {
101: {
l: {
59: {
c: [ 8829 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 10928 ]
},
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 351 ]
}
}
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 10932 ]
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 349 ]
}
}
}
}
}
}
},
110: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10938 ]
}
}
}
}
},
69: {
l: {
59: {
c: [ 10934 ]
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8937 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
111: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10771 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8831 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1089 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
98: {
l: {
59: {
c: [ 8865 ]
}
}
},
59: {
c: [ 8901 ]
},
101: {
l: {
59: {
c: [ 10854 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
97: {
l: {
114: {
l: {
104: {
l: {
107: {
l: {
59: {
c: [ 10533 ]
}
}
}
}
},
114: {
l: {
59: {
c: [ 8600 ]
},
111: {
l: {
119: {
l: {
59: {
c: [ 8600 ]
}
}
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8664 ]
}
}
}
}
}
}
},
99: {
l: {
116: {
l: {
59: {
c: [ 167 ]
}
},
c: [ 167 ]
}
}
},
109: {
l: {
105: {
l: {
59: {
c: [ 59 ]
}
}
}
}
},
115: {
l: {
119: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10537 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
109: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8726 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
59: {
c: [ 8726 ]
}
}
}
}
}
}
},
120: {
l: {
116: {
l: {
59: {
c: [ 10038 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120112 ]
},
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 8994 ]
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
59: {
c: [ 9839 ]
}
}
}
}
}
}
},
99: {
l: {
104: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1097 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1096 ]
}
}
}
}
},
111: {
l: {
114: {
l: {
116: {
l: {
109: {
l: {
105: {
l: {
100: {
l: {
59: {
c: [ 8739 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
101: {
l: {
108: {
l: {
59: {
c: [ 8741 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 173 ]
}
},
c: [ 173 ]
}
}
},
105: {
l: {
103: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 963 ]
},
102: {
l: {
59: {
c: [ 962 ]
}
}
},
118: {
l: {
59: {
c: [ 962 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 8764 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10858 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 8771 ]
},
113: {
l: {
59: {
c: [ 8771 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 10910 ]
},
69: {
l: {
59: {
c: [ 10912 ]
}
}
}
}
},
108: {
l: {
59: {
c: [ 10909 ]
},
69: {
l: {
59: {
c: [ 10911 ]
}
}
}
}
},
110: {
l: {
101: {
l: {
59: {
c: [ 8774 ]
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10788 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10610 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8592 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
109: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8726 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
104: {
l: {
112: {
l: {
59: {
c: [ 10803 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
112: {
l: {
97: {
l: {
114: {
l: {
115: {
l: {
108: {
l: {
59: {
c: [ 10724 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
100: {
l: {
59: {
c: [ 8739 ]
}
}
},
108: {
l: {
101: {
l: {
59: {
c: [ 8995 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 10922 ]
},
101: {
l: {
59: {
c: [ 10924 ]
},
115: {
l: {
59: {
c: [ 10924, 65024 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
102: {
l: {
116: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1100 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 9023 ]
}
}
}
}
},
59: {
c: [ 10692 ]
}
}
},
59: {
c: [ 47 ]
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120164 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
100: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 9824 ]
},
117: {
l: {
105: {
l: {
116: {
l: {
59: {
c: [ 9824 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 8741 ]
}
}
}
}
}
}
},
113: {
l: {
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8851 ]
},
115: {
l: {
59: {
c: [ 8851, 65024 ]
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 8852 ]
},
115: {
l: {
59: {
c: [ 8852, 65024 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
117: {
l: {
98: {
l: {
59: {
c: [ 8847 ]
},
101: {
l: {
59: {
c: [ 8849 ]
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8847 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8849 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8848 ]
},
101: {
l: {
59: {
c: [ 8850 ]
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8848 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8850 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9633 ]
}
}
},
102: {
l: {
59: {
c: [ 9642 ]
}
}
}
}
}
}
},
59: {
c: [ 9633 ]
},
102: {
l: {
59: {
c: [ 9642 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8594 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120008 ]
}
}
}
}
},
101: {
l: {
116: {
l: {
109: {
l: {
110: {
l: {
59: {
c: [ 8726 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 8995 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
114: {
l: {
102: {
l: {
59: {
c: [ 8902 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 9734 ]
},
102: {
l: {
59: {
c: [ 9733 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
101: {
l: {
112: {
l: {
115: {
l: {
105: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 1013 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
104: {
l: {
105: {
l: {
59: {
c: [ 981 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
115: {
l: {
59: {
c: [ 175 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 8834 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10941 ]
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 10949 ]
}
}
},
101: {
l: {
59: {
c: [ 8838 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10947 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
117: {
l: {
108: {
l: {
116: {
l: {
59: {
c: [ 10945 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
69: {
l: {
59: {
c: [ 10955 ]
}
}
},
101: {
l: {
59: {
c: [ 8842 ]
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10943 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10617 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8834 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8838 ]
},
113: {
l: {
59: {
c: [ 10949 ]
}
}
}
}
}
}
},
110: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8842 ]
},
113: {
l: {
59: {
c: [ 10955 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 10951 ]
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 10965 ]
}
}
},
112: {
l: {
59: {
c: [ 10963 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
99: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10936 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8827 ]
},
99: {
l: {
117: {
l: {
114: {
l: {
108: {
l: {
121: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8829 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
113: {
l: {
59: {
c: [ 10928 ]
}
}
}
}
},
110: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10938 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
113: {
l: {
113: {
l: {
59: {
c: [ 10934 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8937 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8831 ]
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 8721 ]
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 9834 ]
}
}
}
}
},
112: {
l: {
49: {
l: {
59: {
c: [ 185 ]
}
},
c: [ 185 ]
},
50: {
l: {
59: {
c: [ 178 ]
}
},
c: [ 178 ]
},
51: {
l: {
59: {
c: [ 179 ]
}
},
c: [ 179 ]
},
59: {
c: [ 8835 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10942 ]
}
}
}
}
},
115: {
l: {
117: {
l: {
98: {
l: {
59: {
c: [ 10968 ]
}
}
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 10950 ]
}
}
},
101: {
l: {
59: {
c: [ 8839 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10948 ]
}
}
}
}
}
}
}
}
},
104: {
l: {
115: {
l: {
111: {
l: {
108: {
l: {
59: {
c: [ 10185 ]
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 10967 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10619 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
117: {
l: {
108: {
l: {
116: {
l: {
59: {
c: [ 10946 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
69: {
l: {
59: {
c: [ 10956 ]
}
}
},
101: {
l: {
59: {
c: [ 8843 ]
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10944 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8835 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8839 ]
},
113: {
l: {
59: {
c: [ 10950 ]
}
}
}
}
}
}
},
110: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8843 ]
},
113: {
l: {
59: {
c: [ 10956 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 10952 ]
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 10964 ]
}
}
},
112: {
l: {
59: {
c: [ 10966 ]
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
97: {
l: {
114: {
l: {
104: {
l: {
107: {
l: {
59: {
c: [ 10534 ]
}
}
}
}
},
114: {
l: {
59: {
c: [ 8601 ]
},
111: {
l: {
119: {
l: {
59: {
c: [ 8601 ]
}
}
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8665 ]
}
}
}
}
}
}
},
110: {
l: {
119: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10538 ]
}
}
}
}
}
}
}
}
}
}
},
122: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 223 ]
}
},
c: [ 223 ]
}
}
}
}
}
}
}
}
},
84: {
l: {
97: {
l: {
98: {
l: {
59: {
c: [ 9 ]
}
}
},
117: {
l: {
59: {
c: [ 932 ]
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 356 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 354 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1058 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120087 ]
}
}
}
}
},
104: {
l: {
101: {
l: {
114: {
l: {
101: {
l: {
102: {
l: {
111: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 8756 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 920 ]
}
}
}
}
}
}
},
105: {
l: {
99: {
l: {
107: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8287, 8202 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8201 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
72: {
l: {
79: {
l: {
82: {
l: {
78: {
l: {
59: {
c: [ 222 ]
}
},
c: [ 222 ]
}
}
}
}
}
}
},
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8764 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8771 ]
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8773 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8776 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120139 ]
}
}
}
}
}
}
},
82: {
l: {
65: {
l: {
68: {
l: {
69: {
l: {
59: {
c: [ 8482 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
112: {
l: {
108: {
l: {
101: {
l: {
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8411 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119983 ]
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 358 ]
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1062 ]
}
}
}
}
},
72: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1035 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
114: {
l: {
103: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8982 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
59: {
c: [ 964 ]
}
}
}
}
},
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 9140 ]
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 357 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 355 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1090 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8411 ]
}
}
}
}
}
}
},
101: {
l: {
108: {
l: {
114: {
l: {
101: {
l: {
99: {
l: {
59: {
c: [ 8981 ]
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120113 ]
}
}
}
}
},
104: {
l: {
101: {
l: {
114: {
l: {
101: {
l: {
52: {
l: {
59: {
c: [ 8756 ]
}
}
},
102: {
l: {
111: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 8756 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 952 ]
},
115: {
l: {
121: {
l: {
109: {
l: {
59: {
c: [ 977 ]
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 977 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
99: {
l: {
107: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 8776 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8764 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
115: {
l: {
112: {
l: {
59: {
c: [ 8201 ]
}
}
}
}
}
}
}
}
},
107: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8776 ]
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8764 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
114: {
l: {
110: {
l: {
59: {
c: [ 254 ]
}
},
c: [ 254 ]
}
}
}
}
}
}
},
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 732 ]
}
}
}
}
}
}
},
109: {
l: {
101: {
l: {
115: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10801 ]
}
}
}
}
},
59: {
c: [ 8864 ]
}
}
},
59: {
c: [ 215 ]
},
100: {
l: {
59: {
c: [ 10800 ]
}
}
}
},
c: [ 215 ]
}
}
}
}
},
110: {
l: {
116: {
l: {
59: {
c: [ 8749 ]
}
}
}
}
}
}
},
111: {
l: {
101: {
l: {
97: {
l: {
59: {
c: [ 10536 ]
}
}
}
}
},
112: {
l: {
98: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 9014 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10993 ]
}
}
}
}
}
}
},
59: {
c: [ 8868 ]
},
102: {
l: {
59: {
c: [ 120165 ]
},
111: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 10970 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
97: {
l: {
59: {
c: [ 10537 ]
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 8244 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8482 ]
}
}
}
}
}
}
},
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 9653 ]
},
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 9663 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 9667 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8884 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
113: {
l: {
59: {
c: [ 8796 ]
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 9657 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8885 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 9708 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 8796 ]
}
}
},
109: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10810 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10809 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
98: {
l: {
59: {
c: [ 10701 ]
}
}
}
}
},
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 10811 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
122: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
59: {
c: [ 9186 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120009 ]
}
}
},
121: {
l: {
59: {
c: [ 1094 ]
}
}
}
}
},
104: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1115 ]
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 359 ]
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
105: {
l: {
120: {
l: {
116: {
l: {
59: {
c: [ 8812 ]
}
}
}
}
}
}
},
111: {
l: {
104: {
l: {
101: {
l: {
97: {
l: {
100: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8606 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8608 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 218 ]
}
},
c: [ 218 ]
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8607 ]
},
111: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10569 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1038 ]
}
}
}
}
},
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 364 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 219 ]
}
},
c: [ 219 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1059 ]
}
}
}
}
},
100: {
l: {
98: {
l: {
108: {
l: {
97: {
l: {
99: {
l: {
59: {
c: [ 368 ]
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120088 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 217 ]
}
},
c: [ 217 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 362 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
100: {
l: {
101: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 95 ]
}
}
}
}
},
114: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 9183 ]
}
}
},
107: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 9141 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
80: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
104: {
l: {
101: {
l: {
115: {
l: {
105: {
l: {
115: {
l: {
59: {
c: [ 9181 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8899 ]
},
80: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8846 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 370 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120140 ]
}
}
}
}
}
}
},
112: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10514 ]
}
}
}
}
}
}
},
59: {
c: [ 8593 ]
},
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8645 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8657 ]
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8597 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8661 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
113: {
l: {
117: {
l: {
105: {
l: {
108: {
l: {
105: {
l: {
98: {
l: {
114: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
59: {
c: [ 10606 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
114: {
l: {
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8598 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8599 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
59: {
c: [ 978 ]
},
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 933 ]
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8613 ]
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8869 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 366 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119984 ]
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 360 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 220 ]
}
},
c: [ 220 ]
}
}
}
}
}
}
},
117: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 250 ]
}
},
c: [ 250 ]
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8593 ]
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8657 ]
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1118 ]
}
}
}
}
},
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 365 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 251 ]
}
},
c: [ 251 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1091 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8645 ]
}
}
}
}
}
}
},
98: {
l: {
108: {
l: {
97: {
l: {
99: {
l: {
59: {
c: [ 369 ]
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10606 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
105: {
l: {
115: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 10622 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120114 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 249 ]
}
},
c: [ 249 ]
}
}
}
}
}
}
}
}
},
72: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10595 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
108: {
l: {
59: {
c: [ 8639 ]
}
}
},
114: {
l: {
59: {
c: [ 8638 ]
}
}
}
}
}
}
},
98: {
l: {
108: {
l: {
107: {
l: {
59: {
c: [ 9600 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
99: {
l: {
111: {
l: {
114: {
l: {
110: {
l: {
59: {
c: [ 8988 ]
},
101: {
l: {
114: {
l: {
59: {
c: [ 8988 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
111: {
l: {
112: {
l: {
59: {
c: [ 8975 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 9720 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 363 ]
}
}
}
}
}
}
},
108: {
l: {
59: {
c: [ 168 ]
}
},
c: [ 168 ]
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 371 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120166 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8593 ]
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8597 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
111: {
l: {
111: {
l: {
110: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8639 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8638 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8846 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
59: {
c: [ 965 ]
},
104: {
l: {
59: {
c: [ 978 ]
}
}
},
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 965 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
115: {
l: {
59: {
c: [ 8648 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
99: {
l: {
111: {
l: {
114: {
l: {
110: {
l: {
59: {
c: [ 8989 ]
},
101: {
l: {
114: {
l: {
59: {
c: [ 8989 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
111: {
l: {
112: {
l: {
59: {
c: [ 8974 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 367 ]
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 9721 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120010 ]
}
}
}
}
}
}
},
116: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8944 ]
}
}
}
}
}
}
},
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 361 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
59: {
c: [ 9653 ]
},
102: {
l: {
59: {
c: [ 9652 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8648 ]
}
}
}
}
}
}
},
109: {
l: {
108: {
l: {
59: {
c: [ 252 ]
}
},
c: [ 252 ]
}
}
}
}
},
119: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 10663 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
114: {
l: {
116: {
l: {
59: {
c: [ 10652 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
101: {
l: {
112: {
l: {
115: {
l: {
105: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 1013 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
107: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
97: {
l: {
59: {
c: [ 1008 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
111: {
l: {
116: {
l: {
104: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 8709 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
104: {
l: {
105: {
l: {
59: {
c: [ 981 ]
}
}
}
}
},
105: {
l: {
59: {
c: [ 982 ]
}
}
},
114: {
l: {
111: {
l: {
112: {
l: {
116: {
l: {
111: {
l: {
59: {
c: [ 8733 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 8597 ]
},
104: {
l: {
111: {
l: {
59: {
c: [ 1009 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
103: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 962 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
110: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8842, 65024 ]
},
113: {
l: {
59: {
c: [ 10955, 65024 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
110: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8843, 65024 ]
},
113: {
l: {
59: {
c: [ 10956, 65024 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
104: {
l: {
101: {
l: {
116: {
l: {
97: {
l: {
59: {
c: [ 977 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8882 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8883 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8661 ]
}
}
}
}
}
}
},
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10984 ]
},
118: {
l: {
59: {
c: [ 10985 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1074 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8866 ]
}
}
}
}
}
}
}
}
},
68: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8872 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
101: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8891 ]
}
}
}
}
}
}
},
59: {
c: [ 8744 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8794 ]
}
}
}
}
}
}
},
108: {
l: {
108: {
l: {
105: {
l: {
112: {
l: {
59: {
c: [ 8942 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 124 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 124 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120115 ]
}
}
}
}
},
108: {
l: {
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 8882 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
115: {
l: {
117: {
l: {
98: {
l: {
59: {
c: [ 8834, 8402 ]
}
}
},
112: {
l: {
59: {
c: [ 8835, 8402 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120167 ]
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
111: {
l: {
112: {
l: {
59: {
c: [ 8733 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 8883 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120011 ]
}
}
}
}
},
117: {
l: {
98: {
l: {
110: {
l: {
69: {
l: {
59: {
c: [ 10955, 65024 ]
}
}
},
101: {
l: {
59: {
c: [ 8842, 65024 ]
}
}
}
}
}
}
},
112: {
l: {
110: {
l: {
69: {
l: {
59: {
c: [ 10956, 65024 ]
}
}
},
101: {
l: {
59: {
c: [ 8843, 65024 ]
}
}
}
}
}
}
}
}
}
}
},
122: {
l: {
105: {
l: {
103: {
l: {
122: {
l: {
97: {
l: {
103: {
l: {
59: {
c: [ 10650 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10987 ]
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1042 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8873 ]
},
108: {
l: {
59: {
c: [ 10982 ]
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8875 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
101: {
l: {
59: {
c: [ 8897 ]
}
}
},
114: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8214 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 8214 ]
},
105: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8739 ]
}
}
}
}
}
}
},
76: {
l: {
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 124 ]
}
}
}
}
}
}
}
}
},
83: {
l: {
101: {
l: {
112: {
l: {
97: {
l: {
114: {
l: {
97: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10072 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8768 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
121: {
l: {
84: {
l: {
104: {
l: {
105: {
l: {
110: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8202 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120089 ]
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120141 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119985 ]
}
}
}
}
}
}
},
118: {
l: {
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8874 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
87: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 372 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 8896 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120090 ]
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120142 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119986 ]
}
}
}
}
}
}
}
}
},
119: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 373 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10847 ]
}
}
}
}
}
}
},
103: {
l: {
101: {
l: {
59: {
c: [ 8743 ]
},
113: {
l: {
59: {
c: [ 8793 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
101: {
l: {
114: {
l: {
112: {
l: {
59: {
c: [ 8472 ]
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120116 ]
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120168 ]
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8472 ]
}
}
},
114: {
l: {
59: {
c: [ 8768 ]
},
101: {
l: {
97: {
l: {
116: {
l: {
104: {
l: {
59: {
c: [ 8768 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120012 ]
}
}
}
}
}
}
}
}
},
120: {
l: {
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8898 ]
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 9711 ]
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 8899 ]
}
}
}
}
}
}
},
100: {
l: {
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 9661 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120117 ]
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10231 ]
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10234 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
59: {
c: [ 958 ]
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10229 ]
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10232 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10236 ]
}
}
}
}
}
}
},
110: {
l: {
105: {
l: {
115: {
l: {
59: {
c: [ 8955 ]
}
}
}
}
}
}
},
111: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10752 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120169 ]
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10753 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 10754 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10230 ]
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10233 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120013 ]
}
}
}
}
},
113: {
l: {
99: {
l: {
117: {
l: {
112: {
l: {
59: {
c: [ 10758 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10756 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 9651 ]
}
}
}
}
}
}
}
}
},
118: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8897 ]
}
}
}
}
}
}
},
119: {
l: {
101: {
l: {
100: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 8896 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
88: {
l: {
102: {
l: {
114: {
l: {
59: {
c: [ 120091 ]
}
}
}
}
},
105: {
l: {
59: {
c: [ 926 ]
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120143 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119987 ]
}
}
}
}
}
}
}
}
},
89: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 221 ]
}
},
c: [ 221 ]
}
}
}
}
}
}
}
}
},
65: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1071 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 374 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1067 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120092 ]
}
}
}
}
},
73: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1031 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120144 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119988 ]
}
}
}
}
}
}
},
85: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1070 ]
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 376 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 253 ]
}
},
c: [ 253 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1103 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 375 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1099 ]
}
}
}
}
},
101: {
l: {
110: {
l: {
59: {
c: [ 165 ]
}
},
c: [ 165 ]
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120118 ]
}
}
}
}
},
105: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1111 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120170 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120014 ]
}
}
}
}
}
}
},
117: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1102 ]
}
}
}
}
},
109: {
l: {
108: {
l: {
59: {
c: [ 255 ]
}
},
c: [ 255 ]
}
}
}
}
}
}
},
90: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 377 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 381 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1047 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 379 ]
}
}
}
}
}
}
},
101: {
l: {
114: {
l: {
111: {
l: {
87: {
l: {
105: {
l: {
100: {
l: {
116: {
l: {
104: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8203 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 918 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 8488 ]
}
}
}
}
},
72: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1046 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 8484 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119989 ]
}
}
}
}
}
}
}
}
},
122: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 378 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 382 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1079 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 380 ]
}
}
}
}
}
}
},
101: {
l: {
101: {
l: {
116: {
l: {
114: {
l: {
102: {
l: {
59: {
c: [ 8488 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 950 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120119 ]
}
}
}
}
},
104: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1078 ]
}
}
}
}
}
}
},
105: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8669 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120171 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120015 ]
}
}
}
}
}
}
},
119: {
l: {
106: {
l: {
59: {
c: [ 8205 ]
}
}
},
110: {
l: {
106: {
l: {
59: {
c: [ 8204 ]
}
}
}
}
}
}
}
}
}
};
}, function(module, exports, __webpack_require__) {
"use strict";
var HTML = __webpack_require__(283);
var $ = HTML.TAG_NAMES, NS = HTML.NAMESPACES;
function isImpliedEndTagRequired(tn) {
switch (tn.length) {
case 1:
return tn === $.P;

case 2:
return tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI;

case 6:
return tn === $.OPTION;

case 8:
return tn === $.OPTGROUP;
}
return false;
}
function isScopingElement(tn, ns) {
switch (tn.length) {
case 2:
if (tn === $.TD || tn === $.TH) return ns === NS.HTML; else if (tn === $.MI || tn === $.MO || tn == $.MN || tn === $.MS) return ns === NS.MATHML;
break;

case 4:
if (tn === $.HTML) return ns === NS.HTML; else if (tn === $.DESC) return ns === NS.SVG;
break;

case 5:
if (tn === $.TABLE) return ns === NS.HTML; else if (tn === $.MTEXT) return ns === NS.MATHML; else if (tn === $.TITLE) return ns === NS.SVG;
break;

case 6:
return (tn === $.APPLET || tn === $.OBJECT) && ns === NS.HTML;

case 7:
return (tn === $.CAPTION || tn === $.MARQUEE) && ns === NS.HTML;

case 8:
return tn === $.TEMPLATE && ns === NS.HTML;

case 13:
return tn === $.FOREIGN_OBJECT && ns === NS.SVG;

case 14:
return tn === $.ANNOTATION_XML && ns === NS.MATHML;
}
return false;
}
var OpenElementStack = module.exports = function(document, treeAdapter) {
this.stackTop = -1;
this.items = [];
this.current = document;
this.currentTagName = null;
this.currentTmplContent = null;
this.tmplCount = 0;
this.treeAdapter = treeAdapter;
};
OpenElementStack.prototype._indexOf = function(element) {
var idx = -1;
for (var i = this.stackTop; i >= 0; i--) {
if (this.items[i] === element) {
idx = i;
break;
}
}
return idx;
};
OpenElementStack.prototype._isInTemplate = function() {
if (this.currentTagName !== $.TEMPLATE) return false;
return this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
};
OpenElementStack.prototype._updateCurrentElement = function() {
this.current = this.items[this.stackTop];
this.currentTagName = this.current && this.treeAdapter.getTagName(this.current);
this.currentTmplContent = this._isInTemplate() ? this.treeAdapter.getChildNodes(this.current)[0] : null;
};
OpenElementStack.prototype.push = function(element) {
this.items[++this.stackTop] = element;
this._updateCurrentElement();
if (this._isInTemplate()) this.tmplCount++;
};
OpenElementStack.prototype.pop = function() {
this.stackTop--;
if (this.tmplCount > 0 && this._isInTemplate()) this.tmplCount--;
this._updateCurrentElement();
};
OpenElementStack.prototype.replace = function(oldElement, newElement) {
var idx = this._indexOf(oldElement);
this.items[idx] = newElement;
if (idx === this.stackTop) this._updateCurrentElement();
};
OpenElementStack.prototype.insertAfter = function(referenceElement, newElement) {
var insertionIdx = this._indexOf(referenceElement) + 1;
this.items.splice(insertionIdx, 0, newElement);
if (insertionIdx == ++this.stackTop) this._updateCurrentElement();
};
OpenElementStack.prototype.popUntilTagNamePopped = function(tagName) {
while (this.stackTop > -1) {
var tn = this.currentTagName;
this.pop();
if (tn === tagName) break;
}
};
OpenElementStack.prototype.popUntilTemplatePopped = function() {
while (this.stackTop > -1) {
var tn = this.currentTagName, ns = this.treeAdapter.getNamespaceURI(this.current);
this.pop();
if (tn === $.TEMPLATE && ns === NS.HTML) break;
}
};
OpenElementStack.prototype.popUntilElementPopped = function(element) {
while (this.stackTop > -1) {
var poppedElement = this.current;
this.pop();
if (poppedElement === element) break;
}
};
OpenElementStack.prototype.popUntilNumberedHeaderPopped = function() {
while (this.stackTop > -1) {
var tn = this.currentTagName;
this.pop();
if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) break;
}
};
OpenElementStack.prototype.popAllUpToHtmlElement = function() {
this.stackTop = 0;
this._updateCurrentElement();
};
OpenElementStack.prototype.clearBackToTableContext = function() {
while (this.currentTagName !== $.TABLE && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML) this.pop();
};
OpenElementStack.prototype.clearBackToTableBodyContext = function() {
while (this.currentTagName !== $.TBODY && this.currentTagName !== $.TFOOT && this.currentTagName !== $.THEAD && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML) {
this.pop();
}
};
OpenElementStack.prototype.clearBackToTableRowContext = function() {
while (this.currentTagName !== $.TR && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML) this.pop();
};
OpenElementStack.prototype.remove = function(element) {
for (var i = this.stackTop; i >= 0; i--) {
if (this.items[i] === element) {
this.items.splice(i, 1);
this.stackTop--;
this._updateCurrentElement();
break;
}
}
};
OpenElementStack.prototype.tryPeekProperlyNestedBodyElement = function() {
var element = this.items[1];
return element && this.treeAdapter.getTagName(element) === $.BODY ? element : null;
};
OpenElementStack.prototype.contains = function(element) {
return this._indexOf(element) > -1;
};
OpenElementStack.prototype.getCommonAncestor = function(element) {
var elementIdx = this._indexOf(element);
return --elementIdx >= 0 ? this.items[elementIdx] : null;
};
OpenElementStack.prototype.isRootHtmlElementCurrent = function() {
return this.stackTop === 0 && this.currentTagName === $.HTML;
};
OpenElementStack.prototype.hasInScope = function(tagName) {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === tagName) return true;
var ns = this.treeAdapter.getNamespaceURI(this.items[i]);
if (isScopingElement(tn, ns)) return false;
}
return true;
};
OpenElementStack.prototype.hasNumberedHeaderInScope = function() {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) return true;
if (isScopingElement(tn, this.treeAdapter.getNamespaceURI(this.items[i]))) return false;
}
return true;
};
OpenElementStack.prototype.hasInListItemScope = function(tagName) {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === tagName) return true;
var ns = this.treeAdapter.getNamespaceURI(this.items[i]);
if ((tn === $.UL || tn === $.OL) && ns === NS.HTML || isScopingElement(tn, ns)) return false;
}
return true;
};
OpenElementStack.prototype.hasInButtonScope = function(tagName) {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === tagName) return true;
var ns = this.treeAdapter.getNamespaceURI(this.items[i]);
if (tn === $.BUTTON && ns === NS.HTML || isScopingElement(tn, ns)) return false;
}
return true;
};
OpenElementStack.prototype.hasInTableScope = function(tagName) {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === tagName) return true;
var ns = this.treeAdapter.getNamespaceURI(this.items[i]);
if ((tn === $.TABLE || tn === $.TEMPLATE || tn === $.HTML) && ns === NS.HTML) return false;
}
return true;
};
OpenElementStack.prototype.hasTableBodyContextInTableScope = function() {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === $.TBODY || tn === $.THEAD || tn === $.TFOOT) return true;
var ns = this.treeAdapter.getNamespaceURI(this.items[i]);
if ((tn === $.TABLE || tn === $.HTML) && ns === NS.HTML) return false;
}
return true;
};
OpenElementStack.prototype.hasInSelectScope = function(tagName) {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === tagName) return true;
var ns = this.treeAdapter.getNamespaceURI(this.items[i]);
if (tn !== $.OPTION && tn !== $.OPTGROUP && ns === NS.HTML) return false;
}
return true;
};
OpenElementStack.prototype.generateImpliedEndTags = function() {
while (isImpliedEndTagRequired(this.currentTagName)) this.pop();
};
OpenElementStack.prototype.generateImpliedEndTagsWithExclusion = function(exclusionTagName) {
while (isImpliedEndTagRequired(this.currentTagName) && this.currentTagName !== exclusionTagName) this.pop();
};
}, function(module, exports) {
"use strict";
var NS = exports.NAMESPACES = {
HTML: "http://www.w3.org/1999/xhtml",
MATHML: "http://www.w3.org/1998/Math/MathML",
SVG: "http://www.w3.org/2000/svg",
XLINK: "http://www.w3.org/1999/xlink",
XML: "http://www.w3.org/XML/1998/namespace",
XMLNS: "http://www.w3.org/2000/xmlns/"
};
exports.ATTRS = {
TYPE: "type",
ACTION: "action",
ENCODING: "encoding",
PROMPT: "prompt",
NAME: "name",
COLOR: "color",
FACE: "face",
SIZE: "size"
};
var $ = exports.TAG_NAMES = {
A: "a",
ADDRESS: "address",
ANNOTATION_XML: "annotation-xml",
APPLET: "applet",
AREA: "area",
ARTICLE: "article",
ASIDE: "aside",
B: "b",
BASE: "base",
BASEFONT: "basefont",
BGSOUND: "bgsound",
BIG: "big",
BLOCKQUOTE: "blockquote",
BODY: "body",
BR: "br",
BUTTON: "button",
CAPTION: "caption",
CENTER: "center",
CODE: "code",
COL: "col",
COLGROUP: "colgroup",
COMMAND: "command",
DD: "dd",
DESC: "desc",
DETAILS: "details",
DIALOG: "dialog",
DIR: "dir",
DIV: "div",
DL: "dl",
DT: "dt",
EM: "em",
EMBED: "embed",
FIELDSET: "fieldset",
FIGCAPTION: "figcaption",
FIGURE: "figure",
FONT: "font",
FOOTER: "footer",
FOREIGN_OBJECT: "foreignObject",
FORM: "form",
FRAME: "frame",
FRAMESET: "frameset",
H1: "h1",
H2: "h2",
H3: "h3",
H4: "h4",
H5: "h5",
H6: "h6",
HEAD: "head",
HEADER: "header",
HGROUP: "hgroup",
HR: "hr",
HTML: "html",
I: "i",
IMG: "img",
IMAGE: "image",
INPUT: "input",
IFRAME: "iframe",
ISINDEX: "isindex",
KEYGEN: "keygen",
LABEL: "label",
LI: "li",
LINK: "link",
LISTING: "listing",
MAIN: "main",
MALIGNMARK: "malignmark",
MARQUEE: "marquee",
MATH: "math",
MENU: "menu",
MENUITEM: "menuitem",
META: "meta",
MGLYPH: "mglyph",
MI: "mi",
MO: "mo",
MN: "mn",
MS: "ms",
MTEXT: "mtext",
NAV: "nav",
NOBR: "nobr",
NOFRAMES: "noframes",
NOEMBED: "noembed",
NOSCRIPT: "noscript",
OBJECT: "object",
OL: "ol",
OPTGROUP: "optgroup",
OPTION: "option",
P: "p",
PARAM: "param",
PLAINTEXT: "plaintext",
PRE: "pre",
RP: "rp",
RT: "rt",
RUBY: "ruby",
S: "s",
SCRIPT: "script",
SECTION: "section",
SELECT: "select",
SOURCE: "source",
SMALL: "small",
SPAN: "span",
STRIKE: "strike",
STRONG: "strong",
STYLE: "style",
SUB: "sub",
SUMMARY: "summary",
SUP: "sup",
TABLE: "table",
TBODY: "tbody",
TEMPLATE: "template",
TEXTAREA: "textarea",
TFOOT: "tfoot",
TD: "td",
TH: "th",
THEAD: "thead",
TITLE: "title",
TR: "tr",
TRACK: "track",
TT: "tt",
U: "u",
UL: "ul",
SVG: "svg",
VAR: "var",
WBR: "wbr",
XMP: "xmp"
};
var SPECIAL_ELEMENTS = exports.SPECIAL_ELEMENTS = {};
SPECIAL_ELEMENTS[NS.HTML] = {};
SPECIAL_ELEMENTS[NS.HTML][$.ADDRESS] = true;
SPECIAL_ELEMENTS[NS.HTML][$.APPLET] = true;
SPECIAL_ELEMENTS[NS.HTML][$.AREA] = true;
SPECIAL_ELEMENTS[NS.HTML][$.ARTICLE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.ASIDE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BASE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BASEFONT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BGSOUND] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BLOCKQUOTE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BODY] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BUTTON] = true;
SPECIAL_ELEMENTS[NS.HTML][$.CAPTION] = true;
SPECIAL_ELEMENTS[NS.HTML][$.CENTER] = true;
SPECIAL_ELEMENTS[NS.HTML][$.COL] = true;
SPECIAL_ELEMENTS[NS.HTML][$.COLGROUP] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DD] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DETAILS] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DIR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DIV] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DL] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.EMBED] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FIELDSET] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FIGCAPTION] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FIGURE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FOOTER] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FORM] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FRAME] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FRAMESET] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H1] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H2] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H3] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H4] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H5] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H6] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HEAD] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HEADER] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HGROUP] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HTML] = true;
SPECIAL_ELEMENTS[NS.HTML][$.IFRAME] = true;
SPECIAL_ELEMENTS[NS.HTML][$.IMG] = true;
SPECIAL_ELEMENTS[NS.HTML][$.INPUT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.ISINDEX] = true;
SPECIAL_ELEMENTS[NS.HTML][$.LI] = true;
SPECIAL_ELEMENTS[NS.HTML][$.LINK] = true;
SPECIAL_ELEMENTS[NS.HTML][$.LISTING] = true;
SPECIAL_ELEMENTS[NS.HTML][$.MAIN] = true;
SPECIAL_ELEMENTS[NS.HTML][$.MARQUEE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.MENU] = true;
SPECIAL_ELEMENTS[NS.HTML][$.MENUITEM] = true;
SPECIAL_ELEMENTS[NS.HTML][$.META] = true;
SPECIAL_ELEMENTS[NS.HTML][$.NAV] = true;
SPECIAL_ELEMENTS[NS.HTML][$.NOEMBED] = true;
SPECIAL_ELEMENTS[NS.HTML][$.NOFRAMES] = true;
SPECIAL_ELEMENTS[NS.HTML][$.NOSCRIPT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.OBJECT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.OL] = true;
SPECIAL_ELEMENTS[NS.HTML][$.P] = true;
SPECIAL_ELEMENTS[NS.HTML][$.PARAM] = true;
SPECIAL_ELEMENTS[NS.HTML][$.PLAINTEXT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.PRE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SCRIPT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SECTION] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SELECT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SOURCE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.STYLE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SUMMARY] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TABLE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TBODY] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TD] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TEMPLATE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TEXTAREA] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TFOOT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TH] = true;
SPECIAL_ELEMENTS[NS.HTML][$.THEAD] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TITLE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TRACK] = true;
SPECIAL_ELEMENTS[NS.HTML][$.UL] = true;
SPECIAL_ELEMENTS[NS.HTML][$.WBR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.XMP] = true;
SPECIAL_ELEMENTS[NS.MATHML] = {};
SPECIAL_ELEMENTS[NS.MATHML][$.MI] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.MO] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.MN] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.MS] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.MTEXT] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.ANNOTATION_XML] = true;
SPECIAL_ELEMENTS[NS.SVG] = {};
SPECIAL_ELEMENTS[NS.SVG][$.TITLE] = true;
SPECIAL_ELEMENTS[NS.SVG][$.FOREIGN_OBJECT] = true;
SPECIAL_ELEMENTS[NS.SVG][$.DESC] = true;
}, function(module, exports) {
"use strict";
var NOAH_ARK_CAPACITY = 3;
var FormattingElementList = module.exports = function(treeAdapter) {
this.length = 0;
this.entries = [];
this.treeAdapter = treeAdapter;
this.bookmark = null;
};
FormattingElementList.MARKER_ENTRY = "MARKER_ENTRY";
FormattingElementList.ELEMENT_ENTRY = "ELEMENT_ENTRY";
FormattingElementList.prototype._getNoahArkConditionCandidates = function(newElement) {
var candidates = [];
if (this.length >= NOAH_ARK_CAPACITY) {
var neAttrsLength = this.treeAdapter.getAttrList(newElement).length, neTagName = this.treeAdapter.getTagName(newElement), neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);
for (var i = this.length - 1; i >= 0; i--) {
var entry = this.entries[i];
if (entry.type === FormattingElementList.MARKER_ENTRY) break;
var element = entry.element, elementAttrs = this.treeAdapter.getAttrList(element);
if (this.treeAdapter.getTagName(element) === neTagName && this.treeAdapter.getNamespaceURI(element) === neNamespaceURI && elementAttrs.length === neAttrsLength) {
candidates.push({
idx: i,
attrs: elementAttrs
});
}
}
}
return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;
};
FormattingElementList.prototype._ensureNoahArkCondition = function(newElement) {
var candidates = this._getNoahArkConditionCandidates(newElement), cLength = candidates.length;
if (cLength) {
var neAttrs = this.treeAdapter.getAttrList(newElement), neAttrsLength = neAttrs.length, neAttrsMap = {};
for (var i = 0; i < neAttrsLength; i++) {
var neAttr = neAttrs[i];
neAttrsMap[neAttr.name] = neAttr.value;
}
for (var i = 0; i < neAttrsLength; i++) {
for (var j = 0; j < cLength; j++) {
var cAttr = candidates[j].attrs[i];
if (neAttrsMap[cAttr.name] !== cAttr.value) {
candidates.splice(j, 1);
cLength--;
}
if (candidates.length < NOAH_ARK_CAPACITY) return;
}
}
for (var i = cLength - 1; i >= NOAH_ARK_CAPACITY - 1; i--) {
this.entries.splice(candidates[i].idx, 1);
this.length--;
}
}
};
FormattingElementList.prototype.insertMarker = function() {
this.entries.push({
type: FormattingElementList.MARKER_ENTRY
});
this.length++;
};
FormattingElementList.prototype.pushElement = function(element, token) {
this._ensureNoahArkCondition(element);
this.entries.push({
type: FormattingElementList.ELEMENT_ENTRY,
element: element,
token: token
});
this.length++;
};
FormattingElementList.prototype.insertElementAfterBookmark = function(element, token) {
var bookmarkIdx = this.length - 1;
for (;bookmarkIdx >= 0; bookmarkIdx--) {
if (this.entries[bookmarkIdx] === this.bookmark) break;
}
this.entries.splice(bookmarkIdx + 1, 0, {
type: FormattingElementList.ELEMENT_ENTRY,
element: element,
token: token
});
this.length++;
};
FormattingElementList.prototype.removeEntry = function(entry) {
for (var i = this.length - 1; i >= 0; i--) {
if (this.entries[i] === entry) {
this.entries.splice(i, 1);
this.length--;
break;
}
}
};
FormattingElementList.prototype.clearToLastMarker = function() {
while (this.length) {
var entry = this.entries.pop();
this.length--;
if (entry.type === FormattingElementList.MARKER_ENTRY) break;
}
};
FormattingElementList.prototype.getElementEntryInScopeWithTagName = function(tagName) {
for (var i = this.length - 1; i >= 0; i--) {
var entry = this.entries[i];
if (entry.type === FormattingElementList.MARKER_ENTRY) return null;
if (this.treeAdapter.getTagName(entry.element) === tagName) return entry;
}
return null;
};
FormattingElementList.prototype.getElementEntry = function(element) {
for (var i = this.length - 1; i >= 0; i--) {
var entry = this.entries[i];
if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element == element) return entry;
}
return null;
};
}, function(module, exports, __webpack_require__) {
"use strict";
var OpenElementStack = __webpack_require__(282), Tokenizer = __webpack_require__(277), HTML = __webpack_require__(283);
var $ = HTML.TAG_NAMES;
function setEndLocation(element, endTagToken) {
if (element.__location) element.__location.end = endTagToken.location.end;
}
function patchOpenElementsStack(stack, parser) {
stack.pop = function() {
setEndLocation(this.current, parser.currentToken);
OpenElementStack.prototype.pop.call(this);
};
stack.popAllUpToHtmlElement = function() {
for (var i = this.stackTop; i > 0; i--) setEndLocation(this.items[i], parser.currentToken);
OpenElementStack.prototype.popAllUpToHtmlElement.call(this);
};
stack.remove = function(element) {
setEndLocation(element, parser.currentToken);
OpenElementStack.prototype.remove.call(this, element);
};
}
exports.assign = function(parser) {
var parserProto = Object.getPrototypeOf(parser);
parser._reset = function(html, document, fragmentContext) {
parserProto._reset.call(this, html, document, fragmentContext);
this.attachableElementLocation = null;
this.lastFosterParentingLocation = null;
this.currentToken = null;
patchOpenElementsStack(this.openElements, parser);
};
parser._processTokenInForeignContent = function(token) {
this.currentToken = token;
parserProto._processTokenInForeignContent.call(this, token);
};
parser._processToken = function(token) {
this.currentToken = token;
parserProto._processToken.call(this, token);
if (token.type === Tokenizer.END_TAG_TOKEN && (token.tagName === $.HTML || token.tagName === $.BODY && this.openElements.hasInScope($.BODY))) {
for (var i = this.openElements.stackTop; i >= 0; i--) {
var element = this.openElements.items[i];
if (this.treeAdapter.getTagName(element) === token.tagName) {
setEndLocation(element, token);
break;
}
}
}
};
parser._setDocumentType = function(token) {
parserProto._setDocumentType.call(this, token);
var documentChildren = this.treeAdapter.getChildNodes(this.document), cnLength = documentChildren.length;
for (var i = 0; i < cnLength; i++) {
var node = documentChildren[i];
if (this.treeAdapter.isDocumentTypeNode(node)) {
node.__location = token.location;
break;
}
}
};
parser._attachElementToTree = function(element) {
element.__location = this.attachableElementLocation || null;
this.attachableElementLocation = null;
parserProto._attachElementToTree.call(this, element);
};
parser._appendElement = function(token, namespaceURI) {
this.attachableElementLocation = token.location;
parserProto._appendElement.call(this, token, namespaceURI);
};
parser._insertElement = function(token, namespaceURI) {
this.attachableElementLocation = token.location;
parserProto._insertElement.call(this, token, namespaceURI);
};
parser._insertTemplate = function(token) {
this.attachableElementLocation = token.location;
parserProto._insertTemplate.call(this, token);
var tmplContent = this.treeAdapter.getChildNodes(this.openElements.current)[0];
tmplContent.__location = null;
};
parser._insertFakeRootElement = function() {
parserProto._insertFakeRootElement.call(this);
this.openElements.current.__location = null;
};
parser._appendCommentNode = function(token, parent) {
parserProto._appendCommentNode.call(this, token, parent);
var children = this.treeAdapter.getChildNodes(parent), commentNode = children[children.length - 1];
commentNode.__location = token.location;
};
parser._findFosterParentingLocation = function() {
this.lastFosterParentingLocation = parserProto._findFosterParentingLocation.call(this);
return this.lastFosterParentingLocation;
};
parser._insertCharacters = function(token) {
parserProto._insertCharacters.call(this, token);
var hasFosterParent = this._shouldFosterParentOnInsertion(), parentingLocation = this.lastFosterParentingLocation, parent = hasFosterParent && parentingLocation.parent || this.openElements.currentTmplContent || this.openElements.current, siblings = this.treeAdapter.getChildNodes(parent), textNodeIdx = hasFosterParent && parentingLocation.beforeElement ? siblings.indexOf(parentingLocation.beforeElement) - 1 : siblings.length - 1, textNode = siblings[textNodeIdx];
if (textNode.__location) textNode.__location.end = token.location.end; else textNode.__location = token.location;
};
};
}, function(module, exports) {
"use strict";
exports.createDocument = function() {
return {
nodeName: "#document",
quirksMode: false,
childNodes: []
};
};
exports.createDocumentFragment = function() {
return {
nodeName: "#document-fragment",
quirksMode: false,
childNodes: []
};
};
exports.createElement = function(tagName, namespaceURI, attrs) {
return {
nodeName: tagName,
tagName: tagName,
attrs: attrs,
namespaceURI: namespaceURI,
childNodes: [],
parentNode: null
};
};
exports.createCommentNode = function(data) {
return {
nodeName: "#comment",
data: data,
parentNode: null
};
};
var createTextNode = function(value) {
return {
nodeName: "#text",
value: value,
parentNode: null
};
};
exports.setDocumentType = function(document, name, publicId, systemId) {
var doctypeNode = null;
for (var i = 0; i < document.childNodes.length; i++) {
if (document.childNodes[i].nodeName === "#documentType") {
doctypeNode = document.childNodes[i];
break;
}
}
if (doctypeNode) {
doctypeNode.name = name;
doctypeNode.publicId = publicId;
doctypeNode.systemId = systemId;
} else {
appendChild(document, {
nodeName: "#documentType",
name: name,
publicId: publicId,
systemId: systemId
});
}
};
exports.setQuirksMode = function(document) {
document.quirksMode = true;
};
exports.isQuirksMode = function(document) {
return document.quirksMode;
};
var appendChild = exports.appendChild = function(parentNode, newNode) {
parentNode.childNodes.push(newNode);
newNode.parentNode = parentNode;
};
var insertBefore = exports.insertBefore = function(parentNode, newNode, referenceNode) {
var insertionIdx = parentNode.childNodes.indexOf(referenceNode);
parentNode.childNodes.splice(insertionIdx, 0, newNode);
newNode.parentNode = parentNode;
};
exports.detachNode = function(node) {
if (node.parentNode) {
var idx = node.parentNode.childNodes.indexOf(node);
node.parentNode.childNodes.splice(idx, 1);
node.parentNode = null;
}
};
exports.insertText = function(parentNode, text) {
if (parentNode.childNodes.length) {
var prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];
if (prevNode.nodeName === "#text") {
prevNode.value += text;
return;
}
}
appendChild(parentNode, createTextNode(text));
};
exports.insertTextBefore = function(parentNode, text, referenceNode) {
var prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
if (prevNode && prevNode.nodeName === "#text") prevNode.value += text; else insertBefore(parentNode, createTextNode(text), referenceNode);
};
exports.adoptAttributes = function(recipientNode, attrs) {
var recipientAttrsMap = [];
for (var i = 0; i < recipientNode.attrs.length; i++) recipientAttrsMap.push(recipientNode.attrs[i].name);
for (var j = 0; j < attrs.length; j++) {
if (recipientAttrsMap.indexOf(attrs[j].name) === -1) recipientNode.attrs.push(attrs[j]);
}
};
exports.getFirstChild = function(node) {
return node.childNodes[0];
};
exports.getChildNodes = function(node) {
return node.childNodes;
};
exports.getParentNode = function(node) {
return node.parentNode;
};
exports.getAttrList = function(node) {
return node.attrs;
};
exports.getTagName = function(element) {
return element.tagName;
};
exports.getNamespaceURI = function(element) {
return element.namespaceURI;
};
exports.getTextNodeContent = function(textNode) {
return textNode.value;
};
exports.getCommentNodeContent = function(commentNode) {
return commentNode.data;
};
exports.getDocumentTypeNodeName = function(doctypeNode) {
return doctypeNode.name;
};
exports.getDocumentTypeNodePublicId = function(doctypeNode) {
return doctypeNode.publicId;
};
exports.getDocumentTypeNodeSystemId = function(doctypeNode) {
return doctypeNode.systemId;
};
exports.isTextNode = function(node) {
return node.nodeName === "#text";
};
exports.isCommentNode = function(node) {
return node.nodeName === "#comment";
};
exports.isDocumentTypeNode = function(node) {
return node.nodeName === "#documentType";
};
exports.isElementNode = function(node) {
return !!node.tagName;
};
}, function(module, exports) {
"use strict";
var VALID_DOCTYPE_NAME = "html", QUIRKS_MODE_SYSTEM_ID = "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd", QUIRKS_MODE_PUBLIC_ID_PREFIXES = [ "+//silmaril//dtd html pro v0r11 19970101//en", "-//advasoft ltd//dtd html 3.0 aswedit + extensions//en", "-//as//dtd html 3.0 aswedit + extensions//en", "-//ietf//dtd html 2.0 level 1//en", "-//ietf//dtd html 2.0 level 2//en", "-//ietf//dtd html 2.0 strict level 1//en", "-//ietf//dtd html 2.0 strict level 2//en", "-//ietf//dtd html 2.0 strict//en", "-//ietf//dtd html 2.0//en", "-//ietf//dtd html 2.1e//en", "-//ietf//dtd html 3.0//en", "-//ietf//dtd html 3.0//en//", "-//ietf//dtd html 3.2 final//en", "-//ietf//dtd html 3.2//en", "-//ietf//dtd html 3//en", "-//ietf//dtd html level 0//en", "-//ietf//dtd html level 0//en//2.0", "-//ietf//dtd html level 1//en", "-//ietf//dtd html level 1//en//2.0", "-//ietf//dtd html level 2//en", "-//ietf//dtd html level 2//en//2.0", "-//ietf//dtd html level 3//en", "-//ietf//dtd html level 3//en//3.0", "-//ietf//dtd html strict level 0//en", "-//ietf//dtd html strict level 0//en//2.0", "-//ietf//dtd html strict level 1//en", "-//ietf//dtd html strict level 1//en//2.0", "-//ietf//dtd html strict level 2//en", "-//ietf//dtd html strict level 2//en//2.0", "-//ietf//dtd html strict level 3//en", "-//ietf//dtd html strict level 3//en//3.0", "-//ietf//dtd html strict//en", "-//ietf//dtd html strict//en//2.0", "-//ietf//dtd html strict//en//3.0", "-//ietf//dtd html//en", "-//ietf//dtd html//en//2.0", "-//ietf//dtd html//en//3.0", "-//metrius//dtd metrius presentational//en", "-//microsoft//dtd internet explorer 2.0 html strict//en", "-//microsoft//dtd internet explorer 2.0 html//en", "-//microsoft//dtd internet explorer 2.0 tables//en", "-//microsoft//dtd internet explorer 3.0 html strict//en", "-//microsoft//dtd internet explorer 3.0 html//en", "-//microsoft//dtd internet explorer 3.0 tables//en", "-//netscape comm. corp.//dtd html//en", "-//netscape comm. corp.//dtd strict html//en", "-//o'reilly and associates//dtd html 2.0//en", "-//o'reilly and associates//dtd html extended 1.0//en", "-//spyglass//dtd html 2.0 extended//en", "-//sq//dtd html 2.0 hotmetal + extensions//en", "-//sun microsystems corp.//dtd hotjava html//en", "-//sun microsystems corp.//dtd hotjava strict html//en", "-//w3c//dtd html 3 1995-03-24//en", "-//w3c//dtd html 3.2 draft//en", "-//w3c//dtd html 3.2 final//en", "-//w3c//dtd html 3.2//en", "-//w3c//dtd html 3.2s draft//en", "-//w3c//dtd html 4.0 frameset//en", "-//w3c//dtd html 4.0 transitional//en", "-//w3c//dtd html experimental 19960712//en", "-//w3c//dtd html experimental 970421//en", "-//w3c//dtd w3 html//en", "-//w3o//dtd w3 html 3.0//en", "-//w3o//dtd w3 html 3.0//en//", "-//webtechs//dtd mozilla html 2.0//en", "-//webtechs//dtd mozilla html//en" ], QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [ "-//w3c//dtd html 4.01 frameset//", "-//w3c//dtd html 4.01 transitional//" ], QUIRKS_MODE_PUBLIC_IDS = [ "-//w3o//dtd w3 html strict 3.0//en//", "-/w3c/dtd html 4.0 transitional/en", "html" ];
function enquoteDoctypeId(id) {
var quote = id.indexOf('"') !== -1 ? "'" : '"';
return quote + id + quote;
}
exports.isQuirks = function(name, publicId, systemId) {
if (name !== VALID_DOCTYPE_NAME) return true;
if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) return true;
if (publicId !== null) {
publicId = publicId.toLowerCase();
if (QUIRKS_MODE_PUBLIC_IDS.indexOf(publicId) > -1) return true;
var prefixes = QUIRKS_MODE_PUBLIC_ID_PREFIXES;
if (systemId === null) prefixes = prefixes.concat(QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES);
for (var i = 0; i < prefixes.length; i++) {
if (publicId.indexOf(prefixes[i]) === 0) return true;
}
}
return false;
};
exports.serializeContent = function(name, publicId, systemId) {
var str = "!DOCTYPE " + name;
if (publicId !== null) str += " PUBLIC " + enquoteDoctypeId(publicId); else if (systemId !== null) str += " SYSTEM";
if (systemId !== null) str += " " + enquoteDoctypeId(systemId);
return str;
};
}, function(module, exports, __webpack_require__) {
"use strict";
var Tokenizer = __webpack_require__(277), HTML = __webpack_require__(283);
var $ = HTML.TAG_NAMES, NS = HTML.NAMESPACES, ATTRS = HTML.ATTRS;
var MIME_TYPES = {
TEXT_HTML: "text/html",
APPLICATION_XML: "application/xhtml+xml"
};
var DEFINITION_URL_ATTR = "definitionurl", ADJUSTED_DEFINITION_URL_ATTR = "definitionURL", SVG_ATTRS_ADJUSTMENT_MAP = {
attributename: "attributeName",
attributetype: "attributeType",
basefrequency: "baseFrequency",
baseprofile: "baseProfile",
calcmode: "calcMode",
clippathunits: "clipPathUnits",
contentscripttype: "contentScriptType",
contentstyletype: "contentStyleType",
diffuseconstant: "diffuseConstant",
edgemode: "edgeMode",
externalresourcesrequired: "externalResourcesRequired",
filterres: "filterRes",
filterunits: "filterUnits",
glyphref: "glyphRef",
gradienttransform: "gradientTransform",
gradientunits: "gradientUnits",
kernelmatrix: "kernelMatrix",
kernelunitlength: "kernelUnitLength",
keypoints: "keyPoints",
keysplines: "keySplines",
keytimes: "keyTimes",
lengthadjust: "lengthAdjust",
limitingconeangle: "limitingConeAngle",
markerheight: "markerHeight",
markerunits: "markerUnits",
markerwidth: "markerWidth",
maskcontentunits: "maskContentUnits",
maskunits: "maskUnits",
numoctaves: "numOctaves",
pathlength: "pathLength",
patterncontentunits: "patternContentUnits",
patterntransform: "patternTransform",
patternunits: "patternUnits",
pointsatx: "pointsAtX",
pointsaty: "pointsAtY",
pointsatz: "pointsAtZ",
preservealpha: "preserveAlpha",
preserveaspectratio: "preserveAspectRatio",
primitiveunits: "primitiveUnits",
refx: "refX",
refy: "refY",
repeatcount: "repeatCount",
repeatdur: "repeatDur",
requiredextensions: "requiredExtensions",
requiredfeatures: "requiredFeatures",
specularconstant: "specularConstant",
specularexponent: "specularExponent",
spreadmethod: "spreadMethod",
startoffset: "startOffset",
stddeviation: "stdDeviation",
stitchtiles: "stitchTiles",
surfacescale: "surfaceScale",
systemlanguage: "systemLanguage",
tablevalues: "tableValues",
targetx: "targetX",
targety: "targetY",
textlength: "textLength",
viewbox: "viewBox",
viewtarget: "viewTarget",
xchannelselector: "xChannelSelector",
ychannelselector: "yChannelSelector",
zoomandpan: "zoomAndPan"
}, XML_ATTRS_ADJUSTMENT_MAP = {
"xlink:actuate": {
prefix: "xlink",
name: "actuate",
namespace: NS.XLINK
},
"xlink:arcrole": {
prefix: "xlink",
name: "arcrole",
namespace: NS.XLINK
},
"xlink:href": {
prefix: "xlink",
name: "href",
namespace: NS.XLINK
},
"xlink:role": {
prefix: "xlink",
name: "role",
namespace: NS.XLINK
},
"xlink:show": {
prefix: "xlink",
name: "show",
namespace: NS.XLINK
},
"xlink:title": {
prefix: "xlink",
name: "title",
namespace: NS.XLINK
},
"xlink:type": {
prefix: "xlink",
name: "type",
namespace: NS.XLINK
},
"xml:base": {
prefix: "xml",
name: "base",
namespace: NS.XML
},
"xml:lang": {
prefix: "xml",
name: "lang",
namespace: NS.XML
},
"xml:space": {
prefix: "xml",
name: "space",
namespace: NS.XML
},
xmlns: {
prefix: "",
name: "xmlns",
namespace: NS.XMLNS
},
"xmlns:xlink": {
prefix: "xmlns",
name: "xlink",
namespace: NS.XMLNS
}
};
var SVG_TAG_NAMES_ADJUSTMENT_MAP = {
altglyph: "altGlyph",
altglyphdef: "altGlyphDef",
altglyphitem: "altGlyphItem",
animatecolor: "animateColor",
animatemotion: "animateMotion",
animatetransform: "animateTransform",
clippath: "clipPath",
feblend: "feBlend",
fecolormatrix: "feColorMatrix",
fecomponenttransfer: "feComponentTransfer",
fecomposite: "feComposite",
feconvolvematrix: "feConvolveMatrix",
fediffuselighting: "feDiffuseLighting",
fedisplacementmap: "feDisplacementMap",
fedistantlight: "feDistantLight",
feflood: "feFlood",
fefunca: "feFuncA",
fefuncb: "feFuncB",
fefuncg: "feFuncG",
fefuncr: "feFuncR",
fegaussianblur: "feGaussianBlur",
feimage: "feImage",
femerge: "feMerge",
femergenode: "feMergeNode",
femorphology: "feMorphology",
feoffset: "feOffset",
fepointlight: "fePointLight",
fespecularlighting: "feSpecularLighting",
fespotlight: "feSpotLight",
fetile: "feTile",
feturbulence: "feTurbulence",
foreignobject: "foreignObject",
glyphref: "glyphRef",
lineargradient: "linearGradient",
radialgradient: "radialGradient",
textpath: "textPath"
};
var EXITS_FOREIGN_CONTENT = {};
EXITS_FOREIGN_CONTENT[$.B] = true;
EXITS_FOREIGN_CONTENT[$.BIG] = true;
EXITS_FOREIGN_CONTENT[$.BLOCKQUOTE] = true;
EXITS_FOREIGN_CONTENT[$.BODY] = true;
EXITS_FOREIGN_CONTENT[$.BR] = true;
EXITS_FOREIGN_CONTENT[$.CENTER] = true;
EXITS_FOREIGN_CONTENT[$.CODE] = true;
EXITS_FOREIGN_CONTENT[$.DD] = true;
EXITS_FOREIGN_CONTENT[$.DIV] = true;
EXITS_FOREIGN_CONTENT[$.DL] = true;
EXITS_FOREIGN_CONTENT[$.DT] = true;
EXITS_FOREIGN_CONTENT[$.EM] = true;
EXITS_FOREIGN_CONTENT[$.EMBED] = true;
EXITS_FOREIGN_CONTENT[$.H1] = true;
EXITS_FOREIGN_CONTENT[$.H2] = true;
EXITS_FOREIGN_CONTENT[$.H3] = true;
EXITS_FOREIGN_CONTENT[$.H4] = true;
EXITS_FOREIGN_CONTENT[$.H5] = true;
EXITS_FOREIGN_CONTENT[$.H6] = true;
EXITS_FOREIGN_CONTENT[$.HEAD] = true;
EXITS_FOREIGN_CONTENT[$.HR] = true;
EXITS_FOREIGN_CONTENT[$.I] = true;
EXITS_FOREIGN_CONTENT[$.IMG] = true;
EXITS_FOREIGN_CONTENT[$.LI] = true;
EXITS_FOREIGN_CONTENT[$.LISTING] = true;
EXITS_FOREIGN_CONTENT[$.MENU] = true;
EXITS_FOREIGN_CONTENT[$.META] = true;
EXITS_FOREIGN_CONTENT[$.NOBR] = true;
EXITS_FOREIGN_CONTENT[$.OL] = true;
EXITS_FOREIGN_CONTENT[$.P] = true;
EXITS_FOREIGN_CONTENT[$.PRE] = true;
EXITS_FOREIGN_CONTENT[$.RUBY] = true;
EXITS_FOREIGN_CONTENT[$.S] = true;
EXITS_FOREIGN_CONTENT[$.SMALL] = true;
EXITS_FOREIGN_CONTENT[$.SPAN] = true;
EXITS_FOREIGN_CONTENT[$.STRONG] = true;
EXITS_FOREIGN_CONTENT[$.STRIKE] = true;
EXITS_FOREIGN_CONTENT[$.SUB] = true;
EXITS_FOREIGN_CONTENT[$.SUP] = true;
EXITS_FOREIGN_CONTENT[$.TABLE] = true;
EXITS_FOREIGN_CONTENT[$.TT] = true;
EXITS_FOREIGN_CONTENT[$.U] = true;
EXITS_FOREIGN_CONTENT[$.UL] = true;
EXITS_FOREIGN_CONTENT[$.VAR] = true;
exports.causesExit = function(startTagToken) {
var tn = startTagToken.tagName;
if (tn === $.FONT && (Tokenizer.getTokenAttr(startTagToken, ATTRS.COLOR) !== null || Tokenizer.getTokenAttr(startTagToken, ATTRS.SIZE) !== null || Tokenizer.getTokenAttr(startTagToken, ATTRS.FACE) !== null)) {
return true;
}
return EXITS_FOREIGN_CONTENT[tn];
};
exports.adjustTokenMathMLAttrs = function(token) {
for (var i = 0; i < token.attrs.length; i++) {
if (token.attrs[i].name === DEFINITION_URL_ATTR) {
token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
break;
}
}
};
exports.adjustTokenSVGAttrs = function(token) {
for (var i = 0; i < token.attrs.length; i++) {
var adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];
if (adjustedAttrName) token.attrs[i].name = adjustedAttrName;
}
};
exports.adjustTokenXMLAttrs = function(token) {
for (var i = 0; i < token.attrs.length; i++) {
var adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];
if (adjustedAttrEntry) {
token.attrs[i].prefix = adjustedAttrEntry.prefix;
token.attrs[i].name = adjustedAttrEntry.name;
token.attrs[i].namespace = adjustedAttrEntry.namespace;
}
}
};
exports.adjustTokenSVGTagName = function(token) {
var adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP[token.tagName];
if (adjustedTagName) token.tagName = adjustedTagName;
};
exports.isMathMLTextIntegrationPoint = function(tn, ns) {
return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);
};
exports.isHtmlIntegrationPoint = function(tn, ns, attrs) {
if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {
for (var i = 0; i < attrs.length; i++) {
if (attrs[i].name === ATTRS.ENCODING) {
var value = attrs[i].value.toLowerCase();
return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
}
}
}
return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);
};
}, function(module, exports) {
"use strict";
exports.mergeOptions = function(defaults, options) {
options = options || {};
return [ defaults, options ].reduce(function(merged, optObj) {
Object.keys(optObj).forEach(function(key) {
merged[key] = optObj[key];
});
return merged;
}, {});
};
}, function(module, exports, __webpack_require__) {
"use strict";
var Tokenizer = __webpack_require__(277), TokenizerProxy = __webpack_require__(291), Utils = __webpack_require__(289);
var DEFAULT_OPTIONS = {
decodeHtmlEntities: true,
locationInfo: false
};
function skip() {}
var SimpleApiParser = module.exports = function(handlers, options) {
this.options = Utils.mergeOptions(DEFAULT_OPTIONS, options);
this.handlers = {
doctype: this._wrapHandler(handlers.doctype),
startTag: this._wrapHandler(handlers.startTag),
endTag: this._wrapHandler(handlers.endTag),
text: this._wrapHandler(handlers.text),
comment: this._wrapHandler(handlers.comment)
};
};
SimpleApiParser.prototype._wrapHandler = function(handler) {
var parser = this;
handler = handler || skip;
if (this.options.locationInfo) {
return function() {
var args = Array.prototype.slice.call(arguments);
args.push(parser.currentTokenLocation);
handler.apply(handler, args);
};
}
return handler;
};
SimpleApiParser.prototype.parse = function(html) {
var token = null;
this._reset(html);
do {
token = this.tokenizerProxy.getNextToken();
if (token.type === Tokenizer.CHARACTER_TOKEN || token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN || token.type === Tokenizer.NULL_CHARACTER_TOKEN) {
if (this.options.locationInfo) {
if (this.pendingText === null) this.currentTokenLocation = token.location; else this.currentTokenLocation.end = token.location.end;
}
this.pendingText = (this.pendingText || "") + token.chars;
} else {
this._emitPendingText();
this._handleToken(token);
}
} while (token.type !== Tokenizer.EOF_TOKEN);
};
SimpleApiParser.prototype._handleToken = function(token) {
if (this.options.locationInfo) this.currentTokenLocation = token.location;
if (token.type === Tokenizer.START_TAG_TOKEN) this.handlers.startTag(token.tagName, token.attrs, token.selfClosing); else if (token.type === Tokenizer.END_TAG_TOKEN) this.handlers.endTag(token.tagName); else if (token.type === Tokenizer.COMMENT_TOKEN) this.handlers.comment(token.data); else if (token.type === Tokenizer.DOCTYPE_TOKEN) this.handlers.doctype(token.name, token.publicId, token.systemId);
};
SimpleApiParser.prototype._reset = function(html) {
this.tokenizerProxy = new TokenizerProxy(html, this.options);
this.pendingText = null;
this.currentTokenLocation = null;
};
SimpleApiParser.prototype._emitPendingText = function() {
if (this.pendingText !== null) {
this.handlers.text(this.pendingText);
this.pendingText = null;
}
};
}, function(module, exports, __webpack_require__) {
"use strict";
var Tokenizer = __webpack_require__(277), ForeignContent = __webpack_require__(288), UNICODE = __webpack_require__(279), HTML = __webpack_require__(283);
var $ = HTML.TAG_NAMES, NS = HTML.NAMESPACES;
var TokenizerProxy = module.exports = function(html, options) {
this.tokenizer = new Tokenizer(html, options);
this.namespaceStack = [];
this.namespaceStackTop = -1;
this.currentNamespace = null;
this.inForeignContent = false;
};
TokenizerProxy.prototype.getNextToken = function() {
var token = this.tokenizer.getNextToken();
if (token.type === Tokenizer.START_TAG_TOKEN) this._handleStartTagToken(token); else if (token.type === Tokenizer.END_TAG_TOKEN) this._handleEndTagToken(token); else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN && this.inForeignContent) {
token.type = Tokenizer.CHARACTER_TOKEN;
token.chars = UNICODE.REPLACEMENT_CHARACTER;
}
return token;
};
TokenizerProxy.prototype._enterNamespace = function(namespace) {
this.namespaceStackTop++;
this.namespaceStack.push(namespace);
this.inForeignContent = namespace !== NS.HTML;
this.currentNamespace = namespace;
this.tokenizer.allowCDATA = this.inForeignContent;
};
TokenizerProxy.prototype._leaveCurrentNamespace = function() {
this.namespaceStackTop--;
this.namespaceStack.pop();
this.currentNamespace = this.namespaceStack[this.namespaceStackTop];
this.inForeignContent = this.currentNamespace !== NS.HTML;
this.tokenizer.allowCDATA = this.inForeignContent;
};
TokenizerProxy.prototype._ensureTokenizerMode = function(tn) {
if (tn === $.TEXTAREA || tn === $.TITLE) this.tokenizer.state = Tokenizer.MODE.RCDATA; else if (tn === $.PLAINTEXT) this.tokenizer.state = Tokenizer.MODE.PLAINTEXT; else if (tn === $.SCRIPT) this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA; else if (tn === $.STYLE || tn === $.IFRAME || tn === $.XMP || tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT) {
this.tokenizer.state = Tokenizer.MODE.RAWTEXT;
}
};
TokenizerProxy.prototype._handleStartTagToken = function(token) {
var tn = token.tagName;
if (tn === $.SVG) this._enterNamespace(NS.SVG); else if (tn === $.MATH) this._enterNamespace(NS.MATHML); else {
if (this.inForeignContent) {
if (ForeignContent.causesExit(token)) this._leaveCurrentNamespace(); else if (ForeignContent.isMathMLTextIntegrationPoint(tn, this.currentNamespace) || ForeignContent.isHtmlIntegrationPoint(tn, this.currentNamespace, token.attrs)) {
this._enterNamespace(NS.HTML);
}
} else this._ensureTokenizerMode(tn);
}
};
TokenizerProxy.prototype._handleEndTagToken = function(token) {
var tn = token.tagName;
if (!this.inForeignContent) {
var previousNs = this.namespaceStack[this.namespaceStackTop - 1];
if (ForeignContent.isMathMLTextIntegrationPoint(tn, previousNs) || ForeignContent.isHtmlIntegrationPoint(tn, previousNs, token.attrs)) {
this._leaveCurrentNamespace();
} else if (tn === $.SCRIPT) this.tokenizer.state = Tokenizer.MODE.DATA;
} else if (tn === $.SVG && this.currentNamespace === NS.SVG || tn === $.MATH && this.currentNamespace === NS.MATHML) this._leaveCurrentNamespace();
};
}, function(module, exports, __webpack_require__) {
"use strict";
var DefaultTreeAdapter = __webpack_require__(286), Doctype = __webpack_require__(287), Utils = __webpack_require__(289), HTML = __webpack_require__(283);
var $ = HTML.TAG_NAMES, NS = HTML.NAMESPACES;
var DEFAULT_OPTIONS = {
encodeHtmlEntities: true
};
var AMP_REGEX = /&/g, NBSP_REGEX = /\u00a0/g, DOUBLE_QUOTE_REGEX = /"/g, LT_REGEX = /</g, GT_REGEX = />/g;
function escapeString(str, attrMode) {
str = str.replace(AMP_REGEX, "&amp;").replace(NBSP_REGEX, "&nbsp;");
if (attrMode) str = str.replace(DOUBLE_QUOTE_REGEX, "&quot;"); else {
str = str.replace(LT_REGEX, "&lt;").replace(GT_REGEX, "&gt;");
}
return str;
}
var Serializer = module.exports = function(treeAdapter, options) {
this.treeAdapter = treeAdapter || DefaultTreeAdapter;
this.options = Utils.mergeOptions(DEFAULT_OPTIONS, options);
};
Serializer.prototype.serialize = function(node) {
this.html = "";
this._serializeChildNodes(node);
return this.html;
};
Serializer.prototype._serializeChildNodes = function(parentNode) {
var childNodes = this.treeAdapter.getChildNodes(parentNode);
if (childNodes) {
for (var i = 0, cnLength = childNodes.length; i < cnLength; i++) {
var currentNode = childNodes[i];
if (this.treeAdapter.isElementNode(currentNode)) this._serializeElement(currentNode); else if (this.treeAdapter.isTextNode(currentNode)) this._serializeTextNode(currentNode); else if (this.treeAdapter.isCommentNode(currentNode)) this._serializeCommentNode(currentNode); else if (this.treeAdapter.isDocumentTypeNode(currentNode)) this._serializeDocumentTypeNode(currentNode);
}
}
};
Serializer.prototype._serializeElement = function(node) {
var tn = this.treeAdapter.getTagName(node), ns = this.treeAdapter.getNamespaceURI(node), qualifiedTn = ns === NS.HTML || ns === NS.SVG || ns === NS.MATHML ? tn : ns + ":" + tn;
this.html += "<" + qualifiedTn;
this._serializeAttributes(node);
this.html += ">";
if (tn !== $.AREA && tn !== $.BASE && tn !== $.BASEFONT && tn !== $.BGSOUND && tn !== $.BR && tn !== $.BR && tn !== $.COL && tn !== $.EMBED && tn !== $.FRAME && tn !== $.HR && tn !== $.IMG && tn !== $.INPUT && tn !== $.KEYGEN && tn !== $.LINK && tn !== $.MENUITEM && tn !== $.META && tn !== $.PARAM && tn !== $.SOURCE && tn !== $.TRACK && tn !== $.WBR) {
if (tn === $.PRE || tn === $.TEXTAREA || tn === $.LISTING) {
var firstChild = this.treeAdapter.getFirstChild(node);
if (firstChild && this.treeAdapter.isTextNode(firstChild)) {
var content = this.treeAdapter.getTextNodeContent(firstChild);
if (content[0] === "\n") this.html += "\n";
}
}
var childNodesHolder = tn === $.TEMPLATE && ns === NS.HTML ? this.treeAdapter.getChildNodes(node)[0] : node;
this._serializeChildNodes(childNodesHolder);
this.html += "</" + qualifiedTn + ">";
}
};
Serializer.prototype._serializeAttributes = function(node) {
var attrs = this.treeAdapter.getAttrList(node);
for (var i = 0, attrsLength = attrs.length; i < attrsLength; i++) {
var attr = attrs[i], value = this.options.encodeHtmlEntities ? escapeString(attr.value, true) : attr.value;
this.html += " ";
if (!attr.namespace) this.html += attr.name; else if (attr.namespace === NS.XML) this.html += "xml:" + attr.name; else if (attr.namespace === NS.XMLNS) {
if (attr.name !== "xmlns") this.html += "xmlns:";
this.html += attr.name;
} else if (attr.namespace === NS.XLINK) this.html += "xlink:" + attr.name; else this.html += attr.namespace + ":" + attr.name;
this.html += '="' + value + '"';
}
};
Serializer.prototype._serializeTextNode = function(node) {
var content = this.treeAdapter.getTextNodeContent(node), parent = this.treeAdapter.getParentNode(node), parentTn = void 0;
if (parent && this.treeAdapter.isElementNode(parent)) parentTn = this.treeAdapter.getTagName(parent);
if (parentTn === $.STYLE || parentTn === $.SCRIPT || parentTn === $.XMP || parentTn === $.IFRAME || parentTn === $.NOEMBED || parentTn === $.NOFRAMES || parentTn === $.PLAINTEXT || parentTn === $.NOSCRIPT) {
this.html += content;
} else this.html += this.options.encodeHtmlEntities ? escapeString(content, false) : content;
};
Serializer.prototype._serializeCommentNode = function(node) {
this.html += "<!--" + this.treeAdapter.getCommentNodeContent(node) + "-->";
};
Serializer.prototype._serializeDocumentTypeNode = function(node) {
var name = this.treeAdapter.getDocumentTypeNodeName(node), publicId = this.treeAdapter.getDocumentTypeNodePublicId(node), systemId = this.treeAdapter.getDocumentTypeNodeSystemId(node);
this.html += "<" + Doctype.serializeContent(name, publicId, systemId) + ">";
};
}, function(module, exports, __webpack_require__) {
(function(process) {
"use strict";
var Parser = __webpack_require__(276), ParsingUnit = __webpack_require__(294);
exports.parseDocument = function(html, treeAdapter) {
var parser = new Parser(treeAdapter), parsingUnit = new ParsingUnit(parser);
parser._runParsingLoop = function() {
parsingUnit.parsingLoopLock = true;
while (!parsingUnit.suspended && !this.stopped) this._iterateParsingLoop();
parsingUnit.parsingLoopLock = false;
if (this.stopped) parsingUnit.callback(this.document);
};
process.nextTick(function() {
parser.parse(html);
});
return parsingUnit;
};
exports.parseInnerHtml = function(innerHtml, contextElement, treeAdapter) {
var parser = new Parser(treeAdapter);
return parser.parseFragment(innerHtml, contextElement);
};
}).call(exports, __webpack_require__(101));
}, function(module, exports) {
"use strict";
var ParsingUnit = module.exports = function(parser) {
this.parser = parser;
this.suspended = false;
this.parsingLoopLock = false;
this.callback = null;
};
ParsingUnit.prototype._stateGuard = function(suspend) {
if (this.suspended && suspend) throw new Error("parse5: Parser was already suspended. Please, check your control flow logic."); else if (!this.suspended && !suspend) throw new Error("parse5: Parser was already resumed. Please, check your control flow logic.");
return suspend;
};
ParsingUnit.prototype.suspend = function() {
this.suspended = this._stateGuard(true);
return this;
};
ParsingUnit.prototype.resume = function() {
this.suspended = this._stateGuard(false);
if (!this.parsingLoopLock) this.parser._runParsingLoop();
return this;
};
ParsingUnit.prototype.documentWrite = function(html) {
this.parser.tokenizer.preprocessor.write(html);
return this;
};
ParsingUnit.prototype.handleScripts = function(scriptHandler) {
this.parser.scriptHandler = scriptHandler;
return this;
};
ParsingUnit.prototype.done = function(callback) {
this.callback = callback;
return this;
};
}, function(module, exports, __webpack_require__) {
"use strict";
var Doctype = __webpack_require__(287);
var nodeTypes = {
element: 1,
text: 3,
cdata: 4,
comment: 8
};
var nodePropertyShorthands = {
tagName: "name",
childNodes: "children",
parentNode: "parent",
previousSibling: "prev",
nextSibling: "next",
nodeValue: "data"
};
var Node = function(props) {
for (var key in props) {
if (props.hasOwnProperty(key)) this[key] = props[key];
}
};
Node.prototype = {
get firstChild() {
var children = this.children;
return children && children[0] || null;
},
get lastChild() {
var children = this.children;
return children && children[children.length - 1] || null;
},
get nodeType() {
return nodeTypes[this.type] || nodeTypes.element;
}
};
Object.keys(nodePropertyShorthands).forEach(function(key) {
var shorthand = nodePropertyShorthands[key];
Object.defineProperty(Node.prototype, key, {
get: function() {
return this[shorthand] || null;
},
set: function(val) {
this[shorthand] = val;
return val;
}
});
});
exports.createDocument = exports.createDocumentFragment = function() {
return new Node({
type: "root",
name: "root",
parent: null,
prev: null,
next: null,
children: []
});
};
exports.createElement = function(tagName, namespaceURI, attrs) {
var attribs = {}, attribsNamespace = {}, attribsPrefix = {};
for (var i = 0; i < attrs.length; i++) {
var attrName = attrs[i].name;
attribs[attrName] = attrs[i].value;
attribsNamespace[attrName] = attrs[i].namespace;
attribsPrefix[attrName] = attrs[i].prefix;
}
return new Node({
type: tagName === "script" || tagName === "style" ? tagName : "tag",
name: tagName,
namespace: namespaceURI,
attribs: attribs,
"x-attribsNamespace": attribsNamespace,
"x-attribsPrefix": attribsPrefix,
children: [],
parent: null,
prev: null,
next: null
});
};
exports.createCommentNode = function(data) {
return new Node({
type: "comment",
data: data,
parent: null,
prev: null,
next: null
});
};
var createTextNode = function(value) {
return new Node({
type: "text",
data: value,
parent: null,
prev: null,
next: null
});
};
exports.setDocumentType = function(document, name, publicId, systemId) {
var data = Doctype.serializeContent(name, publicId, systemId), doctypeNode = null;
for (var i = 0; i < document.children.length; i++) {
if (document.children[i].type === "directive" && document.children[i].name === "!doctype") {
doctypeNode = document.children[i];
break;
}
}
if (doctypeNode) {
doctypeNode.data = data;
doctypeNode["x-name"] = name;
doctypeNode["x-publicId"] = publicId;
doctypeNode["x-systemId"] = systemId;
} else {
appendChild(document, new Node({
type: "directive",
name: "!doctype",
data: data,
"x-name": name,
"x-publicId": publicId,
"x-systemId": systemId
}));
}
};
exports.setQuirksMode = function(document) {
document.quirksMode = true;
};
exports.isQuirksMode = function(document) {
return document.quirksMode;
};
var appendChild = exports.appendChild = function(parentNode, newNode) {
var prev = parentNode.children[parentNode.children.length - 1];
if (prev) {
prev.next = newNode;
newNode.prev = prev;
}
parentNode.children.push(newNode);
newNode.parent = parentNode;
};
var insertBefore = exports.insertBefore = function(parentNode, newNode, referenceNode) {
var insertionIdx = parentNode.children.indexOf(referenceNode), prev = referenceNode.prev;
if (prev) {
prev.next = newNode;
newNode.prev = prev;
}
referenceNode.prev = newNode;
newNode.next = referenceNode;
parentNode.children.splice(insertionIdx, 0, newNode);
newNode.parent = parentNode;
};
exports.detachNode = function(node) {
if (node.parent) {
var idx = node.parent.children.indexOf(node), prev = node.prev, next = node.next;
node.prev = null;
node.next = null;
if (prev) prev.next = next;
if (next) next.prev = prev;
node.parent.children.splice(idx, 1);
node.parent = null;
}
};
exports.insertText = function(parentNode, text) {
var lastChild = parentNode.children[parentNode.children.length - 1];
if (lastChild && lastChild.type === "text") lastChild.data += text; else appendChild(parentNode, createTextNode(text));
};
exports.insertTextBefore = function(parentNode, text, referenceNode) {
var prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];
if (prevNode && prevNode.type === "text") prevNode.data += text; else insertBefore(parentNode, createTextNode(text), referenceNode);
};
exports.adoptAttributes = function(recipientNode, attrs) {
for (var i = 0; i < attrs.length; i++) {
var attrName = attrs[i].name;
if (typeof recipientNode.attribs[attrName] === "undefined") {
recipientNode.attribs[attrName] = attrs[i].value;
recipientNode["x-attribsNamespace"][attrName] = attrs[i].namespace;
recipientNode["x-attribsPrefix"][attrName] = attrs[i].prefix;
}
}
};
exports.getFirstChild = function(node) {
return node.children[0];
};
exports.getChildNodes = function(node) {
return node.children;
};
exports.getParentNode = function(node) {
return node.parent;
};
exports.getAttrList = function(node) {
var attrList = [];
for (var name in node.attribs) {
if (node.attribs.hasOwnProperty(name)) {
attrList.push({
name: name,
value: node.attribs[name],
namespace: node["x-attribsNamespace"][name],
prefix: node["x-attribsPrefix"][name]
});
}
}
return attrList;
};
exports.getTagName = function(element) {
return element.name;
};
exports.getNamespaceURI = function(element) {
return element.namespace;
};
exports.getTextNodeContent = function(textNode) {
return textNode.data;
};
exports.getCommentNodeContent = function(commentNode) {
return commentNode.data;
};
exports.getDocumentTypeNodeName = function(doctypeNode) {
return doctypeNode["x-name"];
};
exports.getDocumentTypeNodePublicId = function(doctypeNode) {
return doctypeNode["x-publicId"];
};
exports.getDocumentTypeNodeSystemId = function(doctypeNode) {
return doctypeNode["x-systemId"];
};
exports.isTextNode = function(node) {
return node.type === "text";
};
exports.isCommentNode = function(node) {
return node.type === "comment";
};
exports.isDocumentTypeNode = function(node) {
return node.type === "directive" && node.name === "!doctype";
};
exports.isElementNode = function(node) {
return !!node.attribs;
};
}, function(module, exports, __webpack_require__) {
"use strict";
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var dom_adapter_1 = __webpack_require__(216);
exports.DOM = dom_adapter_1.DOM;
exports.setRootDomAdapter = dom_adapter_1.setRootDomAdapter;
exports.DomAdapter = dom_adapter_1.DomAdapter;
var dom_renderer_1 = __webpack_require__(219);
exports.DomRenderer = dom_renderer_1.DomRenderer;
var dom_tokens_1 = __webpack_require__(228);
exports.DOCUMENT = dom_tokens_1.DOCUMENT;
var shared_styles_host_1 = __webpack_require__(227);
exports.SharedStylesHost = shared_styles_host_1.SharedStylesHost;
exports.DomSharedStylesHost = shared_styles_host_1.DomSharedStylesHost;
var dom_events_1 = __webpack_require__(297);
exports.DomEventsPlugin = dom_events_1.DomEventsPlugin;
var event_manager_1 = __webpack_require__(229);
exports.EVENT_MANAGER_PLUGINS = event_manager_1.EVENT_MANAGER_PLUGINS;
exports.EventManager = event_manager_1.EventManager;
exports.EventManagerPlugin = event_manager_1.EventManagerPlugin;
__export(__webpack_require__(298));
__export(__webpack_require__(299));
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var dom_adapter_1 = __webpack_require__(216);
var core_1 = __webpack_require__(106);
var event_manager_1 = __webpack_require__(229);
var DomEventsPlugin = function(_super) {
__extends(DomEventsPlugin, _super);
function DomEventsPlugin() {
_super.apply(this, arguments);
}
DomEventsPlugin.prototype.supports = function(eventName) {
return true;
};
DomEventsPlugin.prototype.addEventListener = function(element, eventName, handler) {
var zone = this.manager.getZone();
var outsideHandler = function(event) {
return zone.run(function() {
return handler(event);
});
};
return this.manager.getZone().runOutsideAngular(function() {
return dom_adapter_1.DOM.onAndCancel(element, eventName, outsideHandler);
});
};
DomEventsPlugin.prototype.addGlobalEventListener = function(target, eventName, handler) {
var element = dom_adapter_1.DOM.getGlobalEventTarget(target);
var zone = this.manager.getZone();
var outsideHandler = function(event) {
return zone.run(function() {
return handler(event);
});
};
return this.manager.getZone().runOutsideAngular(function() {
return dom_adapter_1.DOM.onAndCancel(element, eventName, outsideHandler);
});
};
DomEventsPlugin = __decorate([ core_1.Injectable(), __metadata("design:paramtypes", []) ], DomEventsPlugin);
return DomEventsPlugin;
}(event_manager_1.EventManagerPlugin);
exports.DomEventsPlugin = DomEventsPlugin;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var dom_adapter_1 = __webpack_require__(216);
var By = function() {
function By() {}
By.all = function() {
return function(debugElement) {
return true;
};
};
By.css = function(selector) {
return function(debugElement) {
return lang_1.isPresent(debugElement.nativeElement) ? dom_adapter_1.DOM.elementMatches(debugElement.nativeElement, selector) : false;
};
};
By.directive = function(type) {
return function(debugElement) {
return debugElement.providerTokens.indexOf(type) !== -1;
};
};
return By;
}();
exports.By = By;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var di_1 = __webpack_require__(109);
var dom_adapter_1 = __webpack_require__(216);
var debug_node_1 = __webpack_require__(210);
var dom_renderer_1 = __webpack_require__(219);
var core_1 = __webpack_require__(106);
var debug_renderer_1 = __webpack_require__(300);
var CORE_TOKENS = lang_1.CONST_EXPR({
ApplicationRef: core_1.ApplicationRef,
NgZone: core_1.NgZone
});
var INSPECT_GLOBAL_NAME = "ng.probe";
var CORE_TOKENS_GLOBAL_NAME = "ng.coreTokens";
function inspectNativeElement(element) {
return debug_node_1.getDebugNode(element);
}
exports.inspectNativeElement = inspectNativeElement;
function _createConditionalRootRenderer(rootRenderer) {
if (lang_1.assertionsEnabled()) {
return _createRootRenderer(rootRenderer);
}
return rootRenderer;
}
function _createRootRenderer(rootRenderer) {
dom_adapter_1.DOM.setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
dom_adapter_1.DOM.setGlobalVar(CORE_TOKENS_GLOBAL_NAME, CORE_TOKENS);
return new debug_renderer_1.DebugDomRootRenderer(rootRenderer);
}
exports.ELEMENT_PROBE_PROVIDERS = lang_1.CONST_EXPR([ new di_1.Provider(core_1.RootRenderer, {
useFactory: _createConditionalRootRenderer,
deps: [ dom_renderer_1.DomRootRenderer ]
}) ]);
exports.ELEMENT_PROBE_PROVIDERS_PROD_MODE = lang_1.CONST_EXPR([ new di_1.Provider(core_1.RootRenderer, {
useFactory: _createRootRenderer,
deps: [ dom_renderer_1.DomRootRenderer ]
}) ]);
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var debug_node_1 = __webpack_require__(210);
var DebugDomRootRenderer = function() {
function DebugDomRootRenderer(_delegate) {
this._delegate = _delegate;
}
DebugDomRootRenderer.prototype.renderComponent = function(componentProto) {
return new DebugDomRenderer(this, this._delegate.renderComponent(componentProto));
};
return DebugDomRootRenderer;
}();
exports.DebugDomRootRenderer = DebugDomRootRenderer;
var DebugDomRenderer = function() {
function DebugDomRenderer(_rootRenderer, _delegate) {
this._rootRenderer = _rootRenderer;
this._delegate = _delegate;
}
DebugDomRenderer.prototype.renderComponent = function(componentType) {
return this._rootRenderer.renderComponent(componentType);
};
DebugDomRenderer.prototype.selectRootElement = function(selector) {
var nativeEl = this._delegate.selectRootElement(selector);
var debugEl = new debug_node_1.DebugElement(nativeEl, null);
debug_node_1.indexDebugNode(debugEl);
return nativeEl;
};
DebugDomRenderer.prototype.createElement = function(parentElement, name) {
var nativeEl = this._delegate.createElement(parentElement, name);
var debugEl = new debug_node_1.DebugElement(nativeEl, debug_node_1.getDebugNode(parentElement));
debugEl.name = name;
debug_node_1.indexDebugNode(debugEl);
return nativeEl;
};
DebugDomRenderer.prototype.createViewRoot = function(hostElement) {
return this._delegate.createViewRoot(hostElement);
};
DebugDomRenderer.prototype.createTemplateAnchor = function(parentElement) {
var comment = this._delegate.createTemplateAnchor(parentElement);
var debugEl = new debug_node_1.DebugNode(comment, debug_node_1.getDebugNode(parentElement));
debug_node_1.indexDebugNode(debugEl);
return comment;
};
DebugDomRenderer.prototype.createText = function(parentElement, value) {
var text = this._delegate.createText(parentElement, value);
var debugEl = new debug_node_1.DebugNode(text, debug_node_1.getDebugNode(parentElement));
debug_node_1.indexDebugNode(debugEl);
return text;
};
DebugDomRenderer.prototype.projectNodes = function(parentElement, nodes) {
var debugParent = debug_node_1.getDebugNode(parentElement);
if (lang_1.isPresent(debugParent) && debugParent instanceof debug_node_1.DebugElement) {
nodes.forEach(function(node) {
debugParent.addChild(debug_node_1.getDebugNode(node));
});
}
return this._delegate.projectNodes(parentElement, nodes);
};
DebugDomRenderer.prototype.attachViewAfter = function(node, viewRootNodes) {
var debugNode = debug_node_1.getDebugNode(node);
if (lang_1.isPresent(debugNode)) {
var debugParent = debugNode.parent;
if (viewRootNodes.length > 0 && lang_1.isPresent(debugParent)) {
var debugViewRootNodes = [];
viewRootNodes.forEach(function(rootNode) {
return debugViewRootNodes.push(debug_node_1.getDebugNode(rootNode));
});
debugParent.insertChildrenAfter(debugNode, debugViewRootNodes);
}
}
return this._delegate.attachViewAfter(node, viewRootNodes);
};
DebugDomRenderer.prototype.detachView = function(viewRootNodes) {
viewRootNodes.forEach(function(node) {
var debugNode = debug_node_1.getDebugNode(node);
if (lang_1.isPresent(debugNode) && lang_1.isPresent(debugNode.parent)) {
debugNode.parent.removeChild(debugNode);
}
});
return this._delegate.detachView(viewRootNodes);
};
DebugDomRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
viewAllNodes.forEach(function(node) {
debug_node_1.removeDebugNodeFromIndex(debug_node_1.getDebugNode(node));
});
return this._delegate.destroyView(hostElement, viewAllNodes);
};
DebugDomRenderer.prototype.listen = function(renderElement, name, callback) {
var debugEl = debug_node_1.getDebugNode(renderElement);
if (lang_1.isPresent(debugEl)) {
debugEl.listeners.push(new debug_node_1.EventListener(name, callback));
}
return this._delegate.listen(renderElement, name, callback);
};
DebugDomRenderer.prototype.listenGlobal = function(target, name, callback) {
return this._delegate.listenGlobal(target, name, callback);
};
DebugDomRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
var debugEl = debug_node_1.getDebugNode(renderElement);
if (lang_1.isPresent(debugEl) && debugEl instanceof debug_node_1.DebugElement) {
debugEl.properties.set(propertyName, propertyValue);
}
return this._delegate.setElementProperty(renderElement, propertyName, propertyValue);
};
DebugDomRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
var debugEl = debug_node_1.getDebugNode(renderElement);
if (lang_1.isPresent(debugEl) && debugEl instanceof debug_node_1.DebugElement) {
debugEl.attributes.set(attributeName, attributeValue);
}
return this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);
};
DebugDomRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
return this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);
};
DebugDomRenderer.prototype.setElementDebugInfo = function(renderElement, info) {
var debugEl = debug_node_1.getDebugNode(renderElement);
debugEl.setDebugInfo(info);
return this._delegate.setElementDebugInfo(renderElement, info);
};
DebugDomRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
return this._delegate.setElementClass(renderElement, className, isAdd);
};
DebugDomRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
return this._delegate.setElementStyle(renderElement, styleName, styleValue);
};
DebugDomRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
return this._delegate.invokeElementMethod(renderElement, methodName, args);
};
DebugDomRenderer.prototype.setText = function(renderNode, text) {
return this._delegate.setText(renderNode, text);
};
return DebugDomRenderer;
}();
exports.DebugDomRenderer = DebugDomRenderer;
}, function(module, exports, __webpack_require__) {
"use strict";
var collection_1 = __webpack_require__(115);
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var _EMPTY_ATTR_VALUE = "";
var _SELECTOR_REGEXP = lang_1.RegExpWrapper.create("(\\:not\\()|" + "([-\\w]+)|" + "(?:\\.([-\\w]+))|" + "(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|" + "(\\))|" + "(\\s*,\\s*)");
var CssSelector = function() {
function CssSelector() {
this.element = null;
this.classNames = [];
this.attrs = [];
this.notSelectors = [];
}
CssSelector.parse = function(selector) {
var results = [];
var _addResult = function(res, cssSel) {
if (cssSel.notSelectors.length > 0 && lang_1.isBlank(cssSel.element) && collection_1.ListWrapper.isEmpty(cssSel.classNames) && collection_1.ListWrapper.isEmpty(cssSel.attrs)) {
cssSel.element = "*";
}
res.push(cssSel);
};
var cssSelector = new CssSelector();
var matcher = lang_1.RegExpWrapper.matcher(_SELECTOR_REGEXP, selector);
var match;
var current = cssSelector;
var inNot = false;
while (lang_1.isPresent(match = lang_1.RegExpMatcherWrapper.next(matcher))) {
if (lang_1.isPresent(match[1])) {
if (inNot) {
throw new exceptions_1.BaseException("Nesting :not is not allowed in a selector");
}
inNot = true;
current = new CssSelector();
cssSelector.notSelectors.push(current);
}
if (lang_1.isPresent(match[2])) {
current.setElement(match[2]);
}
if (lang_1.isPresent(match[3])) {
current.addClassName(match[3]);
}
if (lang_1.isPresent(match[4])) {
current.addAttribute(match[4], match[5]);
}
if (lang_1.isPresent(match[6])) {
inNot = false;
current = cssSelector;
}
if (lang_1.isPresent(match[7])) {
if (inNot) {
throw new exceptions_1.BaseException("Multiple selectors in :not are not supported");
}
_addResult(results, cssSelector);
cssSelector = current = new CssSelector();
}
}
_addResult(results, cssSelector);
return results;
};
CssSelector.prototype.isElementSelector = function() {
return lang_1.isPresent(this.element) && collection_1.ListWrapper.isEmpty(this.classNames) && collection_1.ListWrapper.isEmpty(this.attrs) && this.notSelectors.length === 0;
};
CssSelector.prototype.setElement = function(element) {
if (element === void 0) {
element = null;
}
this.element = element;
};
CssSelector.prototype.getMatchingElementTemplate = function() {
var tagName = lang_1.isPresent(this.element) ? this.element : "div";
var classAttr = this.classNames.length > 0 ? ' class="' + this.classNames.join(" ") + '"' : "";
var attrs = "";
for (var i = 0; i < this.attrs.length; i += 2) {
var attrName = this.attrs[i];
var attrValue = this.attrs[i + 1] !== "" ? '="' + this.attrs[i + 1] + '"' : "";
attrs += " " + attrName + attrValue;
}
return "<" + tagName + classAttr + attrs + "></" + tagName + ">";
};
CssSelector.prototype.addAttribute = function(name, value) {
if (value === void 0) {
value = _EMPTY_ATTR_VALUE;
}
this.attrs.push(name);
if (lang_1.isPresent(value)) {
value = value.toLowerCase();
} else {
value = _EMPTY_ATTR_VALUE;
}
this.attrs.push(value);
};
CssSelector.prototype.addClassName = function(name) {
this.classNames.push(name.toLowerCase());
};
CssSelector.prototype.toString = function() {
var res = "";
if (lang_1.isPresent(this.element)) {
res += this.element;
}
if (lang_1.isPresent(this.classNames)) {
for (var i = 0; i < this.classNames.length; i++) {
res += "." + this.classNames[i];
}
}
if (lang_1.isPresent(this.attrs)) {
for (var i = 0; i < this.attrs.length; ) {
var attrName = this.attrs[i++];
var attrValue = this.attrs[i++];
res += "[" + attrName;
if (attrValue.length > 0) {
res += "=" + attrValue;
}
res += "]";
}
}
this.notSelectors.forEach(function(notSelector) {
return res += ":not(" + notSelector + ")";
});
return res;
};
return CssSelector;
}();
exports.CssSelector = CssSelector;
var SelectorMatcher = function() {
function SelectorMatcher() {
this._elementMap = new collection_1.Map();
this._elementPartialMap = new collection_1.Map();
this._classMap = new collection_1.Map();
this._classPartialMap = new collection_1.Map();
this._attrValueMap = new collection_1.Map();
this._attrValuePartialMap = new collection_1.Map();
this._listContexts = [];
}
SelectorMatcher.createNotMatcher = function(notSelectors) {
var notMatcher = new SelectorMatcher();
notMatcher.addSelectables(notSelectors, null);
return notMatcher;
};
SelectorMatcher.prototype.addSelectables = function(cssSelectors, callbackCtxt) {
var listContext = null;
if (cssSelectors.length > 1) {
listContext = new SelectorListContext(cssSelectors);
this._listContexts.push(listContext);
}
for (var i = 0; i < cssSelectors.length; i++) {
this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
}
};
SelectorMatcher.prototype._addSelectable = function(cssSelector, callbackCtxt, listContext) {
var matcher = this;
var element = cssSelector.element;
var classNames = cssSelector.classNames;
var attrs = cssSelector.attrs;
var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
if (lang_1.isPresent(element)) {
var isTerminal = attrs.length === 0 && classNames.length === 0;
if (isTerminal) {
this._addTerminal(matcher._elementMap, element, selectable);
} else {
matcher = this._addPartial(matcher._elementPartialMap, element);
}
}
if (lang_1.isPresent(classNames)) {
for (var index = 0; index < classNames.length; index++) {
var isTerminal = attrs.length === 0 && index === classNames.length - 1;
var className = classNames[index];
if (isTerminal) {
this._addTerminal(matcher._classMap, className, selectable);
} else {
matcher = this._addPartial(matcher._classPartialMap, className);
}
}
}
if (lang_1.isPresent(attrs)) {
for (var index = 0; index < attrs.length; ) {
var isTerminal = index === attrs.length - 2;
var attrName = attrs[index++];
var attrValue = attrs[index++];
if (isTerminal) {
var terminalMap = matcher._attrValueMap;
var terminalValuesMap = terminalMap.get(attrName);
if (lang_1.isBlank(terminalValuesMap)) {
terminalValuesMap = new collection_1.Map();
terminalMap.set(attrName, terminalValuesMap);
}
this._addTerminal(terminalValuesMap, attrValue, selectable);
} else {
var parttialMap = matcher._attrValuePartialMap;
var partialValuesMap = parttialMap.get(attrName);
if (lang_1.isBlank(partialValuesMap)) {
partialValuesMap = new collection_1.Map();
parttialMap.set(attrName, partialValuesMap);
}
matcher = this._addPartial(partialValuesMap, attrValue);
}
}
}
};
SelectorMatcher.prototype._addTerminal = function(map, name, selectable) {
var terminalList = map.get(name);
if (lang_1.isBlank(terminalList)) {
terminalList = [];
map.set(name, terminalList);
}
terminalList.push(selectable);
};
SelectorMatcher.prototype._addPartial = function(map, name) {
var matcher = map.get(name);
if (lang_1.isBlank(matcher)) {
matcher = new SelectorMatcher();
map.set(name, matcher);
}
return matcher;
};
SelectorMatcher.prototype.match = function(cssSelector, matchedCallback) {
var result = false;
var element = cssSelector.element;
var classNames = cssSelector.classNames;
var attrs = cssSelector.attrs;
for (var i = 0; i < this._listContexts.length; i++) {
this._listContexts[i].alreadyMatched = false;
}
result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;
if (lang_1.isPresent(classNames)) {
for (var index = 0; index < classNames.length; index++) {
var className = classNames[index];
result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
}
}
if (lang_1.isPresent(attrs)) {
for (var index = 0; index < attrs.length; ) {
var attrName = attrs[index++];
var attrValue = attrs[index++];
var terminalValuesMap = this._attrValueMap.get(attrName);
if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
result = this._matchTerminal(terminalValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) || result;
}
result = this._matchTerminal(terminalValuesMap, attrValue, cssSelector, matchedCallback) || result;
var partialValuesMap = this._attrValuePartialMap.get(attrName);
if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
result = this._matchPartial(partialValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) || result;
}
result = this._matchPartial(partialValuesMap, attrValue, cssSelector, matchedCallback) || result;
}
}
return result;
};
SelectorMatcher.prototype._matchTerminal = function(map, name, cssSelector, matchedCallback) {
if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
return false;
}
var selectables = map.get(name);
var starSelectables = map.get("*");
if (lang_1.isPresent(starSelectables)) {
selectables = selectables.concat(starSelectables);
}
if (lang_1.isBlank(selectables)) {
return false;
}
var selectable;
var result = false;
for (var index = 0; index < selectables.length; index++) {
selectable = selectables[index];
result = selectable.finalize(cssSelector, matchedCallback) || result;
}
return result;
};
SelectorMatcher.prototype._matchPartial = function(map, name, cssSelector, matchedCallback) {
if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
return false;
}
var nestedSelector = map.get(name);
if (lang_1.isBlank(nestedSelector)) {
return false;
}
return nestedSelector.match(cssSelector, matchedCallback);
};
return SelectorMatcher;
}();
exports.SelectorMatcher = SelectorMatcher;
var SelectorListContext = function() {
function SelectorListContext(selectors) {
this.selectors = selectors;
this.alreadyMatched = false;
}
return SelectorListContext;
}();
exports.SelectorListContext = SelectorListContext;
var SelectorContext = function() {
function SelectorContext(selector, cbContext, listContext) {
this.selector = selector;
this.cbContext = cbContext;
this.listContext = listContext;
this.notSelectors = selector.notSelectors;
}
SelectorContext.prototype.finalize = function(cssSelector, callback) {
var result = true;
if (this.notSelectors.length > 0 && (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
result = !notMatcher.match(cssSelector, null);
}
if (result && lang_1.isPresent(callback) && (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
if (lang_1.isPresent(this.listContext)) {
this.listContext.alreadyMatched = true;
}
callback(this.selector, this.cbContext);
}
return result;
};
return SelectorContext;
}();
exports.SelectorContext = SelectorContext;
}, function(module, exports) {
"use strict";
var XHR = function() {
function XHR() {}
XHR.prototype.get = function(url) {
return null;
};
return XHR;
}();
exports.XHR = XHR;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var file_system_1 = __webpack_require__(18);
var xhr_1 = __webpack_require__(302);
var FileSystemXHR = function(_super) {
__extends(FileSystemXHR, _super);
function FileSystemXHR() {
_super.apply(this, arguments);
}
FileSystemXHR.prototype.get = function(url) {
var appDir = file_system_1.knownFolders.currentApp().path;
var templatePath = file_system_1.path.join(appDir, url);
if (!file_system_1.File.exists(templatePath)) {
throw new Error("File " + url + " does not exist.");
}
var templateFile = file_system_1.File.fromPath(templatePath);
return templateFile.readText();
};
return FileSystemXHR;
}(xhr_1.XHR);
exports.FileSystemXHR = FileSystemXHR;
}, function(module, exports, __webpack_require__) {
"use strict";
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var runtime_compiler_1 = __webpack_require__(305);
var template_compiler_1 = __webpack_require__(306);
exports.TemplateCompiler = template_compiler_1.TemplateCompiler;
var directive_metadata_1 = __webpack_require__(307);
exports.CompileDirectiveMetadata = directive_metadata_1.CompileDirectiveMetadata;
exports.CompileTypeMetadata = directive_metadata_1.CompileTypeMetadata;
exports.CompileTemplateMetadata = directive_metadata_1.CompileTemplateMetadata;
var source_module_1 = __webpack_require__(311);
exports.SourceModule = source_module_1.SourceModule;
exports.SourceWithImports = source_module_1.SourceWithImports;
var platform_directives_and_pipes_1 = __webpack_require__(211);
exports.PLATFORM_DIRECTIVES = platform_directives_and_pipes_1.PLATFORM_DIRECTIVES;
exports.PLATFORM_PIPES = platform_directives_and_pipes_1.PLATFORM_PIPES;
__export(__webpack_require__(310));
var template_parser_1 = __webpack_require__(321);
exports.TEMPLATE_TRANSFORMS = template_parser_1.TEMPLATE_TRANSFORMS;
var lang_1 = __webpack_require__(105);
var di_1 = __webpack_require__(109);
var template_parser_2 = __webpack_require__(321);
var html_parser_1 = __webpack_require__(322);
var template_normalizer_1 = __webpack_require__(329);
var runtime_metadata_1 = __webpack_require__(330);
var change_detector_compiler_1 = __webpack_require__(312);
var style_compiler_1 = __webpack_require__(315);
var view_compiler_1 = __webpack_require__(319);
var proto_view_compiler_1 = __webpack_require__(320);
var template_compiler_2 = __webpack_require__(306);
var change_detection_1 = __webpack_require__(128);
var compiler_1 = __webpack_require__(189);
var runtime_compiler_2 = __webpack_require__(305);
var element_schema_registry_1 = __webpack_require__(327);
var dom_element_schema_registry_1 = __webpack_require__(332);
var url_resolver_1 = __webpack_require__(317);
var change_detection_2 = __webpack_require__(128);
function _createChangeDetectorGenConfig() {
return new change_detection_1.ChangeDetectorGenConfig(lang_1.assertionsEnabled(), false, true);
}
exports.COMPILER_PROVIDERS = lang_1.CONST_EXPR([ change_detection_2.Lexer, change_detection_2.Parser, html_parser_1.HtmlParser, template_parser_2.TemplateParser, template_normalizer_1.TemplateNormalizer, runtime_metadata_1.RuntimeMetadataResolver, url_resolver_1.DEFAULT_PACKAGE_URL_PROVIDER, style_compiler_1.StyleCompiler, proto_view_compiler_1.ProtoViewCompiler, view_compiler_1.ViewCompiler, change_detector_compiler_1.ChangeDetectionCompiler, new di_1.Provider(change_detection_1.ChangeDetectorGenConfig, {
useFactory: _createChangeDetectorGenConfig,
deps: []
}), template_compiler_2.TemplateCompiler, new di_1.Provider(runtime_compiler_2.RuntimeCompiler, {
useClass: runtime_compiler_1.RuntimeCompiler_
}), new di_1.Provider(compiler_1.Compiler, {
useExisting: runtime_compiler_2.RuntimeCompiler
}), dom_element_schema_registry_1.DomElementSchemaRegistry, new di_1.Provider(element_schema_registry_1.ElementSchemaRegistry, {
useExisting: dom_element_schema_registry_1.DomElementSchemaRegistry
}), url_resolver_1.UrlResolver ]);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var compiler_1 = __webpack_require__(189);
var view_ref_1 = __webpack_require__(199);
var template_compiler_1 = __webpack_require__(306);
var di_1 = __webpack_require__(109);
var RuntimeCompiler = function(_super) {
__extends(RuntimeCompiler, _super);
function RuntimeCompiler() {
_super.apply(this, arguments);
}
return RuntimeCompiler;
}(compiler_1.Compiler);
exports.RuntimeCompiler = RuntimeCompiler;
var RuntimeCompiler_ = function(_super) {
__extends(RuntimeCompiler_, _super);
function RuntimeCompiler_(_templateCompiler) {
_super.call(this);
this._templateCompiler = _templateCompiler;
}
RuntimeCompiler_.prototype.compileInHost = function(componentType) {
return this._templateCompiler.compileHostComponentRuntime(componentType).then(function(hostViewFactory) {
return new view_ref_1.HostViewFactoryRef_(hostViewFactory);
});
};
RuntimeCompiler_.prototype.clearCache = function() {
_super.prototype.clearCache.call(this);
this._templateCompiler.clearCache();
};
RuntimeCompiler_ = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", [ template_compiler_1.TemplateCompiler ]) ], RuntimeCompiler_);
return RuntimeCompiler_;
}(compiler_1.Compiler_);
exports.RuntimeCompiler_ = RuntimeCompiler_;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(115);
var async_1 = __webpack_require__(150);
var directive_metadata_1 = __webpack_require__(307);
var template_ast_1 = __webpack_require__(310);
var di_1 = __webpack_require__(109);
var source_module_1 = __webpack_require__(311);
var change_detector_compiler_1 = __webpack_require__(312);
var style_compiler_1 = __webpack_require__(315);
var view_compiler_1 = __webpack_require__(319);
var proto_view_compiler_1 = __webpack_require__(320);
var template_parser_1 = __webpack_require__(321);
var template_normalizer_1 = __webpack_require__(329);
var runtime_metadata_1 = __webpack_require__(330);
var view_1 = __webpack_require__(190);
var change_detection_1 = __webpack_require__(128);
var resolved_metadata_cache_1 = __webpack_require__(214);
var util_1 = __webpack_require__(308);
exports.METADATA_CACHE_MODULE_REF = source_module_1.moduleRef("package:angular2/src/core/linker/resolved_metadata_cache" + util_1.MODULE_SUFFIX);
var TemplateCompiler = function() {
function TemplateCompiler(_runtimeMetadataResolver, _templateNormalizer, _templateParser, _styleCompiler, _cdCompiler, _protoViewCompiler, _viewCompiler, _resolvedMetadataCache, _genConfig) {
this._runtimeMetadataResolver = _runtimeMetadataResolver;
this._templateNormalizer = _templateNormalizer;
this._templateParser = _templateParser;
this._styleCompiler = _styleCompiler;
this._cdCompiler = _cdCompiler;
this._protoViewCompiler = _protoViewCompiler;
this._viewCompiler = _viewCompiler;
this._resolvedMetadataCache = _resolvedMetadataCache;
this._genConfig = _genConfig;
this._hostCacheKeys = new Map();
this._compiledTemplateCache = new Map();
this._compiledTemplateDone = new Map();
}
TemplateCompiler.prototype.normalizeDirectiveMetadata = function(directive) {
if (!directive.isComponent) {
return async_1.PromiseWrapper.resolve(directive);
}
return this._templateNormalizer.normalizeTemplate(directive.type, directive.template).then(function(normalizedTemplate) {
return new directive_metadata_1.CompileDirectiveMetadata({
type: directive.type,
isComponent: directive.isComponent,
dynamicLoadable: directive.dynamicLoadable,
selector: directive.selector,
exportAs: directive.exportAs,
changeDetection: directive.changeDetection,
inputs: directive.inputs,
outputs: directive.outputs,
hostListeners: directive.hostListeners,
hostProperties: directive.hostProperties,
hostAttributes: directive.hostAttributes,
lifecycleHooks: directive.lifecycleHooks,
providers: directive.providers,
template: normalizedTemplate
});
});
};
TemplateCompiler.prototype.compileHostComponentRuntime = function(type) {
var compMeta = this._runtimeMetadataResolver.getDirectiveMetadata(type);
var hostCacheKey = this._hostCacheKeys.get(type);
if (lang_1.isBlank(hostCacheKey)) {
hostCacheKey = new Object();
this._hostCacheKeys.set(type, hostCacheKey);
assertComponent(compMeta);
var hostMeta = directive_metadata_1.createHostComponentMeta(compMeta.type, compMeta.selector);
this._compileComponentRuntime(hostCacheKey, hostMeta, [ compMeta ], [], []);
}
return this._compiledTemplateDone.get(hostCacheKey).then(function(compiledTemplate) {
return new view_1.HostViewFactory(compMeta.selector, compiledTemplate.viewFactory);
});
};
TemplateCompiler.prototype.clearCache = function() {
this._styleCompiler.clearCache();
this._compiledTemplateCache.clear();
this._compiledTemplateDone.clear();
this._hostCacheKeys.clear();
};
TemplateCompiler.prototype.compileTemplatesCodeGen = function(components) {
var _this = this;
if (components.length === 0) {
throw new exceptions_1.BaseException("No components given");
}
var declarations = [];
components.forEach(function(componentWithDirs) {
var compMeta = componentWithDirs.component;
assertComponent(compMeta);
_this._compileComponentCodeGen(compMeta, componentWithDirs.directives, componentWithDirs.pipes, declarations);
if (compMeta.dynamicLoadable) {
var hostMeta = directive_metadata_1.createHostComponentMeta(compMeta.type, compMeta.selector);
var viewFactoryExpression = _this._compileComponentCodeGen(hostMeta, [ compMeta ], [], declarations);
var constructionKeyword = lang_1.IS_DART ? "const" : "new";
var compiledTemplateExpr = constructionKeyword + " " + proto_view_compiler_1.APP_VIEW_MODULE_REF + "HostViewFactory('" + compMeta.selector + "'," + viewFactoryExpression + ")";
var varName = codeGenHostViewFactoryName(compMeta.type);
declarations.push("" + util_1.codeGenExportVariable(varName) + compiledTemplateExpr + ";");
}
});
var moduleUrl = components[0].component.type.moduleUrl;
return new source_module_1.SourceModule("" + templateModuleUrl(moduleUrl), declarations.join("\n"));
};
TemplateCompiler.prototype.compileStylesheetCodeGen = function(stylesheetUrl, cssText) {
return this._styleCompiler.compileStylesheetCodeGen(stylesheetUrl, cssText);
};
TemplateCompiler.prototype._compileComponentRuntime = function(cacheKey, compMeta, viewDirectives, pipes, compilingComponentsPath) {
var _this = this;
var uniqViewDirectives = removeDuplicates(viewDirectives);
var uniqViewPipes = removeDuplicates(pipes);
var compiledTemplate = this._compiledTemplateCache.get(cacheKey);
var done = this._compiledTemplateDone.get(cacheKey);
if (lang_1.isBlank(compiledTemplate)) {
compiledTemplate = new CompiledTemplate();
this._compiledTemplateCache.set(cacheKey, compiledTemplate);
done = async_1.PromiseWrapper.all([ this._styleCompiler.compileComponentRuntime(compMeta.template) ].concat(uniqViewDirectives.map(function(dirMeta) {
return _this.normalizeDirectiveMetadata(dirMeta);
}))).then(function(stylesAndNormalizedViewDirMetas) {
var normalizedViewDirMetas = stylesAndNormalizedViewDirMetas.slice(1);
var styles = stylesAndNormalizedViewDirMetas[0];
var parsedTemplate = _this._templateParser.parse(compMeta.template.template, normalizedViewDirMetas, uniqViewPipes, compMeta.type.name);
var childPromises = [];
var usedDirectives = DirectiveCollector.findUsedDirectives(parsedTemplate);
usedDirectives.components.forEach(function(component) {
return _this._compileNestedComponentRuntime(component, compilingComponentsPath, childPromises);
});
return async_1.PromiseWrapper.all(childPromises).then(function(_) {
var filteredPipes = filterPipes(parsedTemplate, uniqViewPipes);
compiledTemplate.init(_this._createViewFactoryRuntime(compMeta, parsedTemplate, usedDirectives.directives, styles, filteredPipes));
return compiledTemplate;
});
});
this._compiledTemplateDone.set(cacheKey, done);
}
return compiledTemplate;
};
TemplateCompiler.prototype._compileNestedComponentRuntime = function(childComponentDir, parentCompilingComponentsPath, childPromises) {
var compilingComponentsPath = collection_1.ListWrapper.clone(parentCompilingComponentsPath);
var childCacheKey = childComponentDir.type.runtime;
var childViewDirectives = this._runtimeMetadataResolver.getViewDirectivesMetadata(childComponentDir.type.runtime);
var childViewPipes = this._runtimeMetadataResolver.getViewPipesMetadata(childComponentDir.type.runtime);
var childIsRecursive = collection_1.ListWrapper.contains(compilingComponentsPath, childCacheKey);
compilingComponentsPath.push(childCacheKey);
this._compileComponentRuntime(childCacheKey, childComponentDir, childViewDirectives, childViewPipes, compilingComponentsPath);
if (!childIsRecursive) {
childPromises.push(this._compiledTemplateDone.get(childCacheKey));
}
};
TemplateCompiler.prototype._createViewFactoryRuntime = function(compMeta, parsedTemplate, directives, styles, pipes) {
var _this = this;
if (lang_1.IS_DART || !this._genConfig.useJit) {
var changeDetectorFactories = this._cdCompiler.compileComponentRuntime(compMeta.type, compMeta.changeDetection, parsedTemplate);
var protoViews = this._protoViewCompiler.compileProtoViewRuntime(this._resolvedMetadataCache, compMeta, parsedTemplate, pipes);
return this._viewCompiler.compileComponentRuntime(compMeta, parsedTemplate, styles, protoViews.protoViews, changeDetectorFactories, function(compMeta) {
return _this._getNestedComponentViewFactory(compMeta);
});
} else {
var declarations = [];
var viewFactoryExpr = this._createViewFactoryCodeGen("resolvedMetadataCache", compMeta, new source_module_1.SourceExpression([], "styles"), parsedTemplate, pipes, declarations);
var vars = {
exports: {},
styles: styles,
resolvedMetadataCache: this._resolvedMetadataCache
};
directives.forEach(function(dirMeta) {
vars[dirMeta.type.name] = dirMeta.type.runtime;
if (dirMeta.isComponent && dirMeta.type.runtime !== compMeta.type.runtime) {
vars["viewFactory_" + dirMeta.type.name + "0"] = _this._getNestedComponentViewFactory(dirMeta);
}
});
pipes.forEach(function(pipeMeta) {
return vars[pipeMeta.type.name] = pipeMeta.type.runtime;
});
var declarationsWithoutImports = source_module_1.SourceModule.getSourceWithoutImports(declarations.join("\n"));
return lang_1.evalExpression("viewFactory_" + compMeta.type.name, viewFactoryExpr, declarationsWithoutImports, mergeStringMaps([ vars, change_detector_compiler_1.CHANGE_DETECTION_JIT_IMPORTS, proto_view_compiler_1.PROTO_VIEW_JIT_IMPORTS, view_compiler_1.VIEW_JIT_IMPORTS ]));
}
};
TemplateCompiler.prototype._getNestedComponentViewFactory = function(compMeta) {
return this._compiledTemplateCache.get(compMeta.type.runtime).viewFactory;
};
TemplateCompiler.prototype._compileComponentCodeGen = function(compMeta, directives, pipes, targetDeclarations) {
var uniqueDirectives = removeDuplicates(directives);
var uniqPipes = removeDuplicates(pipes);
var styleExpr = this._styleCompiler.compileComponentCodeGen(compMeta.template);
var parsedTemplate = this._templateParser.parse(compMeta.template.template, uniqueDirectives, uniqPipes, compMeta.type.name);
var filteredPipes = filterPipes(parsedTemplate, uniqPipes);
return this._createViewFactoryCodeGen(exports.METADATA_CACHE_MODULE_REF + "CODEGEN_RESOLVED_METADATA_CACHE", compMeta, styleExpr, parsedTemplate, filteredPipes, targetDeclarations);
};
TemplateCompiler.prototype._createViewFactoryCodeGen = function(resolvedMetadataCacheExpr, compMeta, styleExpr, parsedTemplate, pipes, targetDeclarations) {
var changeDetectorsExprs = this._cdCompiler.compileComponentCodeGen(compMeta.type, compMeta.changeDetection, parsedTemplate);
var protoViewExprs = this._protoViewCompiler.compileProtoViewCodeGen(new util_1.Expression(resolvedMetadataCacheExpr), compMeta, parsedTemplate, pipes);
var viewFactoryExpr = this._viewCompiler.compileComponentCodeGen(compMeta, parsedTemplate, styleExpr, protoViewExprs.protoViews, changeDetectorsExprs, codeGenComponentViewFactoryName);
util_1.addAll(changeDetectorsExprs.declarations, targetDeclarations);
util_1.addAll(protoViewExprs.declarations, targetDeclarations);
util_1.addAll(viewFactoryExpr.declarations, targetDeclarations);
return viewFactoryExpr.expression;
};
TemplateCompiler = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", [ runtime_metadata_1.RuntimeMetadataResolver, template_normalizer_1.TemplateNormalizer, template_parser_1.TemplateParser, style_compiler_1.StyleCompiler, change_detector_compiler_1.ChangeDetectionCompiler, proto_view_compiler_1.ProtoViewCompiler, view_compiler_1.ViewCompiler, resolved_metadata_cache_1.ResolvedMetadataCache, change_detection_1.ChangeDetectorGenConfig ]) ], TemplateCompiler);
return TemplateCompiler;
}();
exports.TemplateCompiler = TemplateCompiler;
var NormalizedComponentWithViewDirectives = function() {
function NormalizedComponentWithViewDirectives(component, directives, pipes) {
this.component = component;
this.directives = directives;
this.pipes = pipes;
}
return NormalizedComponentWithViewDirectives;
}();
exports.NormalizedComponentWithViewDirectives = NormalizedComponentWithViewDirectives;
var CompiledTemplate = function() {
function CompiledTemplate() {
this.viewFactory = null;
}
CompiledTemplate.prototype.init = function(viewFactory) {
this.viewFactory = viewFactory;
};
return CompiledTemplate;
}();
function assertComponent(meta) {
if (!meta.isComponent) {
throw new exceptions_1.BaseException("Could not compile '" + meta.type.name + "' because it is not a component.");
}
}
function templateModuleUrl(moduleUrl) {
var urlWithoutSuffix = moduleUrl.substring(0, moduleUrl.length - util_1.MODULE_SUFFIX.length);
return urlWithoutSuffix + ".template" + util_1.MODULE_SUFFIX;
}
function codeGenHostViewFactoryName(type) {
return "hostViewFactory_" + type.name;
}
function codeGenComponentViewFactoryName(nestedCompType) {
return source_module_1.moduleRef(templateModuleUrl(nestedCompType.type.moduleUrl)) + "viewFactory_" + nestedCompType.type.name + "0";
}
function mergeStringMaps(maps) {
var result = {};
maps.forEach(function(map) {
collection_1.StringMapWrapper.forEach(map, function(value, key) {
result[key] = value;
});
});
return result;
}
function removeDuplicates(items) {
var res = [];
items.forEach(function(item) {
var hasMatch = res.filter(function(r) {
return r.type.name == item.type.name && r.type.moduleUrl == item.type.moduleUrl && r.type.runtime == item.type.runtime;
}).length > 0;
if (!hasMatch) {
res.push(item);
}
});
return res;
}
var DirectiveCollector = function() {
function DirectiveCollector() {
this.directives = [];
this.components = [];
}
DirectiveCollector.findUsedDirectives = function(parsedTemplate) {
var collector = new DirectiveCollector();
template_ast_1.templateVisitAll(collector, parsedTemplate);
return collector;
};
DirectiveCollector.prototype.visitBoundText = function(ast, context) {
return null;
};
DirectiveCollector.prototype.visitText = function(ast, context) {
return null;
};
DirectiveCollector.prototype.visitNgContent = function(ast, context) {
return null;
};
DirectiveCollector.prototype.visitElement = function(ast, context) {
template_ast_1.templateVisitAll(this, ast.directives);
template_ast_1.templateVisitAll(this, ast.children);
return null;
};
DirectiveCollector.prototype.visitEmbeddedTemplate = function(ast, context) {
template_ast_1.templateVisitAll(this, ast.directives);
template_ast_1.templateVisitAll(this, ast.children);
return null;
};
DirectiveCollector.prototype.visitVariable = function(ast, ctx) {
return null;
};
DirectiveCollector.prototype.visitAttr = function(ast, attrNameAndValues) {
return null;
};
DirectiveCollector.prototype.visitDirective = function(ast, ctx) {
if (ast.directive.isComponent) {
this.components.push(ast.directive);
}
this.directives.push(ast.directive);
return null;
};
DirectiveCollector.prototype.visitEvent = function(ast, eventTargetAndNames) {
return null;
};
DirectiveCollector.prototype.visitDirectiveProperty = function(ast, context) {
return null;
};
DirectiveCollector.prototype.visitElementProperty = function(ast, context) {
return null;
};
return DirectiveCollector;
}();
function filterPipes(template, allPipes) {
var visitor = new PipeVisitor();
template_ast_1.templateVisitAll(visitor, template);
return allPipes.filter(function(pipeMeta) {
return collection_1.SetWrapper.has(visitor.collector.pipes, pipeMeta.name);
});
}
var PipeVisitor = function() {
function PipeVisitor() {
this.collector = new template_parser_1.PipeCollector();
}
PipeVisitor.prototype.visitBoundText = function(ast, context) {
ast.value.visit(this.collector);
return null;
};
PipeVisitor.prototype.visitText = function(ast, context) {
return null;
};
PipeVisitor.prototype.visitNgContent = function(ast, context) {
return null;
};
PipeVisitor.prototype.visitElement = function(ast, context) {
template_ast_1.templateVisitAll(this, ast.inputs);
template_ast_1.templateVisitAll(this, ast.outputs);
template_ast_1.templateVisitAll(this, ast.directives);
template_ast_1.templateVisitAll(this, ast.children);
return null;
};
PipeVisitor.prototype.visitEmbeddedTemplate = function(ast, context) {
template_ast_1.templateVisitAll(this, ast.outputs);
template_ast_1.templateVisitAll(this, ast.directives);
template_ast_1.templateVisitAll(this, ast.children);
return null;
};
PipeVisitor.prototype.visitVariable = function(ast, ctx) {
return null;
};
PipeVisitor.prototype.visitAttr = function(ast, attrNameAndValues) {
return null;
};
PipeVisitor.prototype.visitDirective = function(ast, ctx) {
template_ast_1.templateVisitAll(this, ast.inputs);
template_ast_1.templateVisitAll(this, ast.hostEvents);
template_ast_1.templateVisitAll(this, ast.hostProperties);
return null;
};
PipeVisitor.prototype.visitEvent = function(ast, eventTargetAndNames) {
ast.handler.visit(this.collector);
return null;
};
PipeVisitor.prototype.visitDirectiveProperty = function(ast, context) {
ast.value.visit(this.collector);
return null;
};
PipeVisitor.prototype.visitElementProperty = function(ast, context) {
ast.value.visit(this.collector);
return null;
};
return PipeVisitor;
}();
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(115);
var change_detection_1 = __webpack_require__(128);
var view_1 = __webpack_require__(180);
var selector_1 = __webpack_require__(301);
var util_1 = __webpack_require__(308);
var interfaces_1 = __webpack_require__(309);
var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))$/g;
var CompileMetadataWithIdentifier = function() {
function CompileMetadataWithIdentifier() {}
CompileMetadataWithIdentifier.fromJson = function(data) {
return _COMPILE_METADATA_FROM_JSON[data["class"]](data);
};
Object.defineProperty(CompileMetadataWithIdentifier.prototype, "identifier", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return CompileMetadataWithIdentifier;
}();
exports.CompileMetadataWithIdentifier = CompileMetadataWithIdentifier;
var CompileMetadataWithType = function(_super) {
__extends(CompileMetadataWithType, _super);
function CompileMetadataWithType() {
_super.apply(this, arguments);
}
CompileMetadataWithType.fromJson = function(data) {
return _COMPILE_METADATA_FROM_JSON[data["class"]](data);
};
Object.defineProperty(CompileMetadataWithType.prototype, "type", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(CompileMetadataWithType.prototype, "identifier", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return CompileMetadataWithType;
}(CompileMetadataWithIdentifier);
exports.CompileMetadataWithType = CompileMetadataWithType;
var CompileIdentifierMetadata = function() {
function CompileIdentifierMetadata(_a) {
var _b = _a === void 0 ? {} : _a, runtime = _b.runtime, name = _b.name, moduleUrl = _b.moduleUrl, prefix = _b.prefix, constConstructor = _b.constConstructor;
this.runtime = runtime;
this.name = name;
this.prefix = prefix;
this.moduleUrl = moduleUrl;
this.constConstructor = constConstructor;
}
CompileIdentifierMetadata.fromJson = function(data) {
return new CompileIdentifierMetadata({
name: data["name"],
prefix: data["prefix"],
moduleUrl: data["moduleUrl"],
constConstructor: data["constConstructor"]
});
};
CompileIdentifierMetadata.prototype.toJson = function() {
return {
"class": "Identifier",
name: this.name,
moduleUrl: this.moduleUrl,
prefix: this.prefix,
constConstructor: this.constConstructor
};
};
Object.defineProperty(CompileIdentifierMetadata.prototype, "identifier", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
return CompileIdentifierMetadata;
}();
exports.CompileIdentifierMetadata = CompileIdentifierMetadata;
var CompileDiDependencyMetadata = function() {
function CompileDiDependencyMetadata(_a) {
var _b = _a === void 0 ? {} : _a, isAttribute = _b.isAttribute, isSelf = _b.isSelf, isHost = _b.isHost, isSkipSelf = _b.isSkipSelf, isOptional = _b.isOptional, query = _b.query, viewQuery = _b.viewQuery, token = _b.token;
this.isAttribute = lang_1.normalizeBool(isAttribute);
this.isSelf = lang_1.normalizeBool(isSelf);
this.isHost = lang_1.normalizeBool(isHost);
this.isSkipSelf = lang_1.normalizeBool(isSkipSelf);
this.isOptional = lang_1.normalizeBool(isOptional);
this.query = query;
this.viewQuery = viewQuery;
this.token = token;
}
CompileDiDependencyMetadata.fromJson = function(data) {
return new CompileDiDependencyMetadata({
token: objFromJson(data["token"], CompileIdentifierMetadata.fromJson),
query: objFromJson(data["query"], CompileQueryMetadata.fromJson),
viewQuery: objFromJson(data["viewQuery"], CompileQueryMetadata.fromJson),
isAttribute: data["isAttribute"],
isSelf: data["isSelf"],
isHost: data["isHost"],
isSkipSelf: data["isSkipSelf"],
isOptional: data["isOptional"]
});
};
CompileDiDependencyMetadata.prototype.toJson = function() {
return {
token: objToJson(this.token),
query: objToJson(this.query),
viewQuery: objToJson(this.viewQuery),
isAttribute: this.isAttribute,
isSelf: this.isSelf,
isHost: this.isHost,
isSkipSelf: this.isSkipSelf,
isOptional: this.isOptional
};
};
return CompileDiDependencyMetadata;
}();
exports.CompileDiDependencyMetadata = CompileDiDependencyMetadata;
var CompileProviderMetadata = function() {
function CompileProviderMetadata(_a) {
var token = _a.token, useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
this.token = token;
this.useClass = useClass;
this.useValue = useValue;
this.useExisting = useExisting;
this.useFactory = useFactory;
this.deps = deps;
this.multi = multi;
}
CompileProviderMetadata.fromJson = function(data) {
return new CompileProviderMetadata({
token: objFromJson(data["token"], CompileIdentifierMetadata.fromJson),
useClass: objFromJson(data["useClass"], CompileTypeMetadata.fromJson)
});
};
CompileProviderMetadata.prototype.toJson = function() {
return {
token: objToJson(this.token),
useClass: objToJson(this.useClass)
};
};
return CompileProviderMetadata;
}();
exports.CompileProviderMetadata = CompileProviderMetadata;
var CompileFactoryMetadata = function() {
function CompileFactoryMetadata(_a) {
var runtime = _a.runtime, name = _a.name, moduleUrl = _a.moduleUrl, constConstructor = _a.constConstructor, diDeps = _a.diDeps;
this.runtime = runtime;
this.name = name;
this.moduleUrl = moduleUrl;
this.diDeps = diDeps;
this.constConstructor = constConstructor;
}
Object.defineProperty(CompileFactoryMetadata.prototype, "identifier", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
CompileFactoryMetadata.prototype.toJson = function() {
return null;
};
return CompileFactoryMetadata;
}();
exports.CompileFactoryMetadata = CompileFactoryMetadata;
var CompileTypeMetadata = function() {
function CompileTypeMetadata(_a) {
var _b = _a === void 0 ? {} : _a, runtime = _b.runtime, name = _b.name, moduleUrl = _b.moduleUrl, prefix = _b.prefix, isHost = _b.isHost, constConstructor = _b.constConstructor, diDeps = _b.diDeps;
this.runtime = runtime;
this.name = name;
this.moduleUrl = moduleUrl;
this.prefix = prefix;
this.isHost = lang_1.normalizeBool(isHost);
this.constConstructor = constConstructor;
this.diDeps = lang_1.normalizeBlank(diDeps);
}
CompileTypeMetadata.fromJson = function(data) {
return new CompileTypeMetadata({
name: data["name"],
moduleUrl: data["moduleUrl"],
prefix: data["prefix"],
isHost: data["isHost"],
constConstructor: data["constConstructor"],
diDeps: arrayFromJson(data["diDeps"], CompileDiDependencyMetadata.fromJson)
});
};
Object.defineProperty(CompileTypeMetadata.prototype, "identifier", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
Object.defineProperty(CompileTypeMetadata.prototype, "type", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
CompileTypeMetadata.prototype.toJson = function() {
return {
"class": "Type",
name: this.name,
moduleUrl: this.moduleUrl,
prefix: this.prefix,
isHost: this.isHost,
constConstructor: this.constConstructor,
diDeps: arrayToJson(this.diDeps)
};
};
return CompileTypeMetadata;
}();
exports.CompileTypeMetadata = CompileTypeMetadata;
var CompileQueryMetadata = function() {
function CompileQueryMetadata(_a) {
var _b = _a === void 0 ? {} : _a, selectors = _b.selectors, descendants = _b.descendants, first = _b.first, propertyName = _b.propertyName;
this.selectors = selectors;
this.descendants = descendants;
this.first = lang_1.normalizeBool(first);
this.propertyName = propertyName;
}
CompileQueryMetadata.fromJson = function(data) {
return new CompileQueryMetadata({
selectors: arrayFromJson(data["selectors"], CompileIdentifierMetadata.fromJson),
descendants: data["descendants"],
first: data["first"],
propertyName: data["propertyName"]
});
};
CompileQueryMetadata.prototype.toJson = function() {
return {
selectors: arrayToJson(this.selectors),
descendants: this.descendants,
first: this.first,
propertyName: this.propertyName
};
};
return CompileQueryMetadata;
}();
exports.CompileQueryMetadata = CompileQueryMetadata;
var CompileTemplateMetadata = function() {
function CompileTemplateMetadata(_a) {
var _b = _a === void 0 ? {} : _a, encapsulation = _b.encapsulation, template = _b.template, templateUrl = _b.templateUrl, styles = _b.styles, styleUrls = _b.styleUrls, ngContentSelectors = _b.ngContentSelectors;
this.encapsulation = lang_1.isPresent(encapsulation) ? encapsulation : view_1.ViewEncapsulation.Emulated;
this.template = template;
this.templateUrl = templateUrl;
this.styles = lang_1.isPresent(styles) ? styles : [];
this.styleUrls = lang_1.isPresent(styleUrls) ? styleUrls : [];
this.ngContentSelectors = lang_1.isPresent(ngContentSelectors) ? ngContentSelectors : [];
}
CompileTemplateMetadata.fromJson = function(data) {
return new CompileTemplateMetadata({
encapsulation: lang_1.isPresent(data["encapsulation"]) ? view_1.VIEW_ENCAPSULATION_VALUES[data["encapsulation"]] : data["encapsulation"],
template: data["template"],
templateUrl: data["templateUrl"],
styles: data["styles"],
styleUrls: data["styleUrls"],
ngContentSelectors: data["ngContentSelectors"]
});
};
CompileTemplateMetadata.prototype.toJson = function() {
return {
encapsulation: lang_1.isPresent(this.encapsulation) ? lang_1.serializeEnum(this.encapsulation) : this.encapsulation,
template: this.template,
templateUrl: this.templateUrl,
styles: this.styles,
styleUrls: this.styleUrls,
ngContentSelectors: this.ngContentSelectors
};
};
return CompileTemplateMetadata;
}();
exports.CompileTemplateMetadata = CompileTemplateMetadata;
var CompileDirectiveMetadata = function() {
function CompileDirectiveMetadata(_a) {
var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, dynamicLoadable = _b.dynamicLoadable, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, hostListeners = _b.hostListeners, hostProperties = _b.hostProperties, hostAttributes = _b.hostAttributes, lifecycleHooks = _b.lifecycleHooks, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, template = _b.template;
this.type = type;
this.isComponent = isComponent;
this.dynamicLoadable = dynamicLoadable;
this.selector = selector;
this.exportAs = exportAs;
this.changeDetection = changeDetection;
this.inputs = inputs;
this.outputs = outputs;
this.hostListeners = hostListeners;
this.hostProperties = hostProperties;
this.hostAttributes = hostAttributes;
this.lifecycleHooks = lifecycleHooks;
this.providers = lang_1.normalizeBlank(providers);
this.viewProviders = lang_1.normalizeBlank(viewProviders);
this.queries = queries;
this.viewQueries = viewQueries;
this.template = template;
}
CompileDirectiveMetadata.create = function(_a) {
var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, dynamicLoadable = _b.dynamicLoadable, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, host = _b.host, lifecycleHooks = _b.lifecycleHooks, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, template = _b.template;
var hostListeners = {};
var hostProperties = {};
var hostAttributes = {};
if (lang_1.isPresent(host)) {
collection_1.StringMapWrapper.forEach(host, function(value, key) {
var matches = lang_1.RegExpWrapper.firstMatch(HOST_REG_EXP, key);
if (lang_1.isBlank(matches)) {
hostAttributes[key] = value;
} else if (lang_1.isPresent(matches[1])) {
hostProperties[matches[1]] = value;
} else if (lang_1.isPresent(matches[2])) {
hostListeners[matches[2]] = value;
}
});
}
var inputsMap = {};
if (lang_1.isPresent(inputs)) {
inputs.forEach(function(bindConfig) {
var parts = util_1.splitAtColon(bindConfig, [ bindConfig, bindConfig ]);
inputsMap[parts[0]] = parts[1];
});
}
var outputsMap = {};
if (lang_1.isPresent(outputs)) {
outputs.forEach(function(bindConfig) {
var parts = util_1.splitAtColon(bindConfig, [ bindConfig, bindConfig ]);
outputsMap[parts[0]] = parts[1];
});
}
return new CompileDirectiveMetadata({
type: type,
isComponent: lang_1.normalizeBool(isComponent),
dynamicLoadable: lang_1.normalizeBool(dynamicLoadable),
selector: selector,
exportAs: exportAs,
changeDetection: changeDetection,
inputs: inputsMap,
outputs: outputsMap,
hostListeners: hostListeners,
hostProperties: hostProperties,
hostAttributes: hostAttributes,
lifecycleHooks: lang_1.isPresent(lifecycleHooks) ? lifecycleHooks : [],
providers: providers,
viewProviders: viewProviders,
queries: queries,
viewQueries: viewQueries,
template: template
});
};
Object.defineProperty(CompileDirectiveMetadata.prototype, "identifier", {
get: function() {
return this.type;
},
enumerable: true,
configurable: true
});
CompileDirectiveMetadata.fromJson = function(data) {
return new CompileDirectiveMetadata({
isComponent: data["isComponent"],
dynamicLoadable: data["dynamicLoadable"],
selector: data["selector"],
exportAs: data["exportAs"],
type: lang_1.isPresent(data["type"]) ? CompileTypeMetadata.fromJson(data["type"]) : data["type"],
changeDetection: lang_1.isPresent(data["changeDetection"]) ? change_detection_1.CHANGE_DETECTION_STRATEGY_VALUES[data["changeDetection"]] : data["changeDetection"],
inputs: data["inputs"],
outputs: data["outputs"],
hostListeners: data["hostListeners"],
hostProperties: data["hostProperties"],
hostAttributes: data["hostAttributes"],
lifecycleHooks: data["lifecycleHooks"].map(function(hookValue) {
return interfaces_1.LIFECYCLE_HOOKS_VALUES[hookValue];
}),
template: lang_1.isPresent(data["template"]) ? CompileTemplateMetadata.fromJson(data["template"]) : data["template"],
providers: arrayFromJson(data["providers"], CompileProviderMetadata.fromJson)
});
};
CompileDirectiveMetadata.prototype.toJson = function() {
return {
"class": "Directive",
isComponent: this.isComponent,
dynamicLoadable: this.dynamicLoadable,
selector: this.selector,
exportAs: this.exportAs,
type: lang_1.isPresent(this.type) ? this.type.toJson() : this.type,
changeDetection: lang_1.isPresent(this.changeDetection) ? lang_1.serializeEnum(this.changeDetection) : this.changeDetection,
inputs: this.inputs,
outputs: this.outputs,
hostListeners: this.hostListeners,
hostProperties: this.hostProperties,
hostAttributes: this.hostAttributes,
lifecycleHooks: this.lifecycleHooks.map(function(hook) {
return lang_1.serializeEnum(hook);
}),
template: lang_1.isPresent(this.template) ? this.template.toJson() : this.template,
providers: arrayToJson(this.providers)
};
};
return CompileDirectiveMetadata;
}();
exports.CompileDirectiveMetadata = CompileDirectiveMetadata;
function createHostComponentMeta(componentType, componentSelector) {
var template = selector_1.CssSelector.parse(componentSelector)[0].getMatchingElementTemplate();
return CompileDirectiveMetadata.create({
type: new CompileTypeMetadata({
runtime: Object,
name: "Host" + componentType.name,
moduleUrl: componentType.moduleUrl,
isHost: true
}),
template: new CompileTemplateMetadata({
template: template,
templateUrl: "",
styles: [],
styleUrls: [],
ngContentSelectors: []
}),
changeDetection: change_detection_1.ChangeDetectionStrategy.Default,
inputs: [],
outputs: [],
host: {},
lifecycleHooks: [],
isComponent: true,
dynamicLoadable: false,
selector: "*",
providers: [],
viewProviders: [],
queries: [],
viewQueries: []
});
}
exports.createHostComponentMeta = createHostComponentMeta;
var CompilePipeMetadata = function() {
function CompilePipeMetadata(_a) {
var _b = _a === void 0 ? {} : _a, type = _b.type, name = _b.name, pure = _b.pure;
this.type = type;
this.name = name;
this.pure = lang_1.normalizeBool(pure);
}
Object.defineProperty(CompilePipeMetadata.prototype, "identifier", {
get: function() {
return this.type;
},
enumerable: true,
configurable: true
});
CompilePipeMetadata.fromJson = function(data) {
return new CompilePipeMetadata({
type: lang_1.isPresent(data["type"]) ? CompileTypeMetadata.fromJson(data["type"]) : data["type"],
name: data["name"],
pure: data["pure"]
});
};
CompilePipeMetadata.prototype.toJson = function() {
return {
"class": "Pipe",
type: lang_1.isPresent(this.type) ? this.type.toJson() : null,
name: this.name,
pure: this.pure
};
};
return CompilePipeMetadata;
}();
exports.CompilePipeMetadata = CompilePipeMetadata;
var _COMPILE_METADATA_FROM_JSON = {
Directive: CompileDirectiveMetadata.fromJson,
Pipe: CompilePipeMetadata.fromJson,
Type: CompileTypeMetadata.fromJson,
Identifier: CompileIdentifierMetadata.fromJson
};
function arrayFromJson(obj, fn) {
return lang_1.isBlank(obj) ? null : obj.map(function(o) {
return objFromJson(o, fn);
});
}
function arrayToJson(obj) {
return lang_1.isBlank(obj) ? null : obj.map(objToJson);
}
function objFromJson(obj, fn) {
return lang_1.isString(obj) || lang_1.isBlank(obj) ? obj : fn(obj);
}
function objToJson(obj) {
return lang_1.isString(obj) || lang_1.isBlank(obj) ? obj : obj.toJson();
}
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var CAMEL_CASE_REGEXP = /([A-Z])/g;
var DASH_CASE_REGEXP = /-([a-z])/g;
var SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
var DOUBLE_QUOTE_ESCAPE_STRING_RE = /"|\\|\n|\r|\$/g;
exports.MODULE_SUFFIX = lang_1.IS_DART ? ".dart" : ".js";
exports.CONST_VAR = lang_1.IS_DART ? "const" : "var";
function camelCaseToDashCase(input) {
return lang_1.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function(m) {
return "-" + m[1].toLowerCase();
});
}
exports.camelCaseToDashCase = camelCaseToDashCase;
function dashCaseToCamelCase(input) {
return lang_1.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function(m) {
return m[1].toUpperCase();
});
}
exports.dashCaseToCamelCase = dashCaseToCamelCase;
function escapeSingleQuoteString(input) {
if (lang_1.isBlank(input)) {
return null;
}
return "'" + escapeString(input, SINGLE_QUOTE_ESCAPE_STRING_RE) + "'";
}
exports.escapeSingleQuoteString = escapeSingleQuoteString;
function escapeDoubleQuoteString(input) {
if (lang_1.isBlank(input)) {
return null;
}
return '"' + escapeString(input, DOUBLE_QUOTE_ESCAPE_STRING_RE) + '"';
}
exports.escapeDoubleQuoteString = escapeDoubleQuoteString;
function escapeString(input, re) {
return lang_1.StringWrapper.replaceAllMapped(input, re, function(match) {
if (match[0] == "$") {
return lang_1.IS_DART ? "\\$" : "$";
} else if (match[0] == "\n") {
return "\\n";
} else if (match[0] == "\r") {
return "\\r";
} else {
return "\\" + match[0];
}
});
}
function codeGenExportVariable(name) {
if (lang_1.IS_DART) {
return "const " + name + " = ";
} else {
return "var " + name + " = exports['" + name + "'] = ";
}
}
exports.codeGenExportVariable = codeGenExportVariable;
function codeGenConstConstructorCall(name) {
if (lang_1.IS_DART) {
return "const " + name;
} else {
return "new " + name;
}
}
exports.codeGenConstConstructorCall = codeGenConstConstructorCall;
function codeGenValueFn(params, value, fnName) {
if (fnName === void 0) {
fnName = "";
}
if (lang_1.IS_DART) {
return codeGenFnHeader(params, fnName) + " => " + value;
} else {
return codeGenFnHeader(params, fnName) + " { return " + value + "; }";
}
}
exports.codeGenValueFn = codeGenValueFn;
function codeGenFnHeader(params, fnName) {
if (fnName === void 0) {
fnName = "";
}
if (lang_1.IS_DART) {
return fnName + "(" + params.join(",") + ")";
} else {
return "function " + fnName + "(" + params.join(",") + ")";
}
}
exports.codeGenFnHeader = codeGenFnHeader;
function codeGenToString(expr) {
if (lang_1.IS_DART) {
return "'${" + expr + "}'";
} else {
return expr;
}
}
exports.codeGenToString = codeGenToString;
function splitAtColon(input, defaultValues) {
var parts = lang_1.StringWrapper.split(input.trim(), /\s*:\s*/g);
if (parts.length > 1) {
return parts;
} else {
return defaultValues;
}
}
exports.splitAtColon = splitAtColon;
var Statement = function() {
function Statement(statement) {
this.statement = statement;
}
return Statement;
}();
exports.Statement = Statement;
var Expression = function() {
function Expression(expression, isArray) {
if (isArray === void 0) {
isArray = false;
}
this.expression = expression;
this.isArray = isArray;
}
return Expression;
}();
exports.Expression = Expression;
function escapeValue(value) {
if (value instanceof Expression) {
return value.expression;
} else if (lang_1.isString(value)) {
return escapeSingleQuoteString(value);
} else if (lang_1.isBlank(value)) {
return "null";
} else {
return "" + value;
}
}
exports.escapeValue = escapeValue;
function codeGenArray(data) {
return "[" + data.map(escapeValue).join(",") + "]";
}
exports.codeGenArray = codeGenArray;
function codeGenFlatArray(values) {
var result = "([";
var isFirstArrayEntry = true;
var concatFn = lang_1.IS_DART ? ".addAll" : "concat";
for (var i = 0; i < values.length; i++) {
var value = values[i];
if (value instanceof Expression && value.isArray) {
result += "])." + concatFn + "(" + value.expression + ")." + concatFn + "([";
isFirstArrayEntry = true;
} else {
if (!isFirstArrayEntry) {
result += ",";
}
isFirstArrayEntry = false;
result += escapeValue(value);
}
}
result += "])";
return result;
}
exports.codeGenFlatArray = codeGenFlatArray;
function codeGenStringMap(keyValueArray) {
return "{" + keyValueArray.map(codeGenKeyValue).join(",") + "}";
}
exports.codeGenStringMap = codeGenStringMap;
function codeGenKeyValue(keyValue) {
return escapeValue(keyValue[0]) + ":" + escapeValue(keyValue[1]);
}
function addAll(source, target) {
for (var i = 0; i < source.length; i++) {
target.push(source[i]);
}
}
exports.addAll = addAll;
function flattenArray(source, target) {
if (lang_1.isPresent(source)) {
for (var i = 0; i < source.length; i++) {
var item = source[i];
if (lang_1.isArray(item)) {
flattenArray(item, target);
} else {
target.push(item);
}
}
}
return target;
}
exports.flattenArray = flattenArray;
}, function(module, exports) {
"use strict";
(function(LifecycleHooks) {
LifecycleHooks[LifecycleHooks["OnInit"] = 0] = "OnInit";
LifecycleHooks[LifecycleHooks["OnDestroy"] = 1] = "OnDestroy";
LifecycleHooks[LifecycleHooks["DoCheck"] = 2] = "DoCheck";
LifecycleHooks[LifecycleHooks["OnChanges"] = 3] = "OnChanges";
LifecycleHooks[LifecycleHooks["AfterContentInit"] = 4] = "AfterContentInit";
LifecycleHooks[LifecycleHooks["AfterContentChecked"] = 5] = "AfterContentChecked";
LifecycleHooks[LifecycleHooks["AfterViewInit"] = 6] = "AfterViewInit";
LifecycleHooks[LifecycleHooks["AfterViewChecked"] = 7] = "AfterViewChecked";
})(exports.LifecycleHooks || (exports.LifecycleHooks = {}));
var LifecycleHooks = exports.LifecycleHooks;
exports.LIFECYCLE_HOOKS_VALUES = [ LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges, LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit, LifecycleHooks.AfterViewChecked ];
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var TextAst = function() {
function TextAst(value, ngContentIndex, sourceSpan) {
this.value = value;
this.ngContentIndex = ngContentIndex;
this.sourceSpan = sourceSpan;
}
TextAst.prototype.visit = function(visitor, context) {
return visitor.visitText(this, context);
};
return TextAst;
}();
exports.TextAst = TextAst;
var BoundTextAst = function() {
function BoundTextAst(value, ngContentIndex, sourceSpan) {
this.value = value;
this.ngContentIndex = ngContentIndex;
this.sourceSpan = sourceSpan;
}
BoundTextAst.prototype.visit = function(visitor, context) {
return visitor.visitBoundText(this, context);
};
return BoundTextAst;
}();
exports.BoundTextAst = BoundTextAst;
var AttrAst = function() {
function AttrAst(name, value, sourceSpan) {
this.name = name;
this.value = value;
this.sourceSpan = sourceSpan;
}
AttrAst.prototype.visit = function(visitor, context) {
return visitor.visitAttr(this, context);
};
return AttrAst;
}();
exports.AttrAst = AttrAst;
var BoundElementPropertyAst = function() {
function BoundElementPropertyAst(name, type, value, unit, sourceSpan) {
this.name = name;
this.type = type;
this.value = value;
this.unit = unit;
this.sourceSpan = sourceSpan;
}
BoundElementPropertyAst.prototype.visit = function(visitor, context) {
return visitor.visitElementProperty(this, context);
};
return BoundElementPropertyAst;
}();
exports.BoundElementPropertyAst = BoundElementPropertyAst;
var BoundEventAst = function() {
function BoundEventAst(name, target, handler, sourceSpan) {
this.name = name;
this.target = target;
this.handler = handler;
this.sourceSpan = sourceSpan;
}
BoundEventAst.prototype.visit = function(visitor, context) {
return visitor.visitEvent(this, context);
};
Object.defineProperty(BoundEventAst.prototype, "fullName", {
get: function() {
if (lang_1.isPresent(this.target)) {
return this.target + ":" + this.name;
} else {
return this.name;
}
},
enumerable: true,
configurable: true
});
return BoundEventAst;
}();
exports.BoundEventAst = BoundEventAst;
var VariableAst = function() {
function VariableAst(name, value, sourceSpan) {
this.name = name;
this.value = value;
this.sourceSpan = sourceSpan;
}
VariableAst.prototype.visit = function(visitor, context) {
return visitor.visitVariable(this, context);
};
return VariableAst;
}();
exports.VariableAst = VariableAst;
var ElementAst = function() {
function ElementAst(name, attrs, inputs, outputs, exportAsVars, directives, children, ngContentIndex, sourceSpan) {
this.name = name;
this.attrs = attrs;
this.inputs = inputs;
this.outputs = outputs;
this.exportAsVars = exportAsVars;
this.directives = directives;
this.children = children;
this.ngContentIndex = ngContentIndex;
this.sourceSpan = sourceSpan;
}
ElementAst.prototype.visit = function(visitor, context) {
return visitor.visitElement(this, context);
};
ElementAst.prototype.isBound = function() {
return this.inputs.length > 0 || this.outputs.length > 0 || this.exportAsVars.length > 0 || this.directives.length > 0;
};
ElementAst.prototype.getComponent = function() {
return this.directives.length > 0 && this.directives[0].directive.isComponent ? this.directives[0].directive : null;
};
return ElementAst;
}();
exports.ElementAst = ElementAst;
var EmbeddedTemplateAst = function() {
function EmbeddedTemplateAst(attrs, outputs, vars, directives, children, ngContentIndex, sourceSpan) {
this.attrs = attrs;
this.outputs = outputs;
this.vars = vars;
this.directives = directives;
this.children = children;
this.ngContentIndex = ngContentIndex;
this.sourceSpan = sourceSpan;
}
EmbeddedTemplateAst.prototype.visit = function(visitor, context) {
return visitor.visitEmbeddedTemplate(this, context);
};
return EmbeddedTemplateAst;
}();
exports.EmbeddedTemplateAst = EmbeddedTemplateAst;
var BoundDirectivePropertyAst = function() {
function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
this.directiveName = directiveName;
this.templateName = templateName;
this.value = value;
this.sourceSpan = sourceSpan;
}
BoundDirectivePropertyAst.prototype.visit = function(visitor, context) {
return visitor.visitDirectiveProperty(this, context);
};
return BoundDirectivePropertyAst;
}();
exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;
var DirectiveAst = function() {
function DirectiveAst(directive, inputs, hostProperties, hostEvents, exportAsVars, sourceSpan) {
this.directive = directive;
this.inputs = inputs;
this.hostProperties = hostProperties;
this.hostEvents = hostEvents;
this.exportAsVars = exportAsVars;
this.sourceSpan = sourceSpan;
}
DirectiveAst.prototype.visit = function(visitor, context) {
return visitor.visitDirective(this, context);
};
return DirectiveAst;
}();
exports.DirectiveAst = DirectiveAst;
var NgContentAst = function() {
function NgContentAst(index, ngContentIndex, sourceSpan) {
this.index = index;
this.ngContentIndex = ngContentIndex;
this.sourceSpan = sourceSpan;
}
NgContentAst.prototype.visit = function(visitor, context) {
return visitor.visitNgContent(this, context);
};
return NgContentAst;
}();
exports.NgContentAst = NgContentAst;
(function(PropertyBindingType) {
PropertyBindingType[PropertyBindingType["Property"] = 0] = "Property";
PropertyBindingType[PropertyBindingType["Attribute"] = 1] = "Attribute";
PropertyBindingType[PropertyBindingType["Class"] = 2] = "Class";
PropertyBindingType[PropertyBindingType["Style"] = 3] = "Style";
})(exports.PropertyBindingType || (exports.PropertyBindingType = {}));
var PropertyBindingType = exports.PropertyBindingType;
function templateVisitAll(visitor, asts, context) {
if (context === void 0) {
context = null;
}
var result = [];
asts.forEach(function(ast) {
var astResult = ast.visit(visitor, context);
if (lang_1.isPresent(astResult)) {
result.push(astResult);
}
});
return result;
}
exports.templateVisitAll = templateVisitAll;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var MODULE_REGEXP = /#MODULE\[([^\]]*)\]/g;
function moduleRef(moduleUrl) {
return "#MODULE[" + moduleUrl + "]";
}
exports.moduleRef = moduleRef;
var SourceModule = function() {
function SourceModule(moduleUrl, sourceWithModuleRefs) {
this.moduleUrl = moduleUrl;
this.sourceWithModuleRefs = sourceWithModuleRefs;
}
SourceModule.getSourceWithoutImports = function(sourceWithModuleRefs) {
return lang_1.StringWrapper.replaceAllMapped(sourceWithModuleRefs, MODULE_REGEXP, function(match) {
return "";
});
};
SourceModule.prototype.getSourceWithImports = function() {
var _this = this;
var moduleAliases = {};
var imports = [];
var newSource = lang_1.StringWrapper.replaceAllMapped(this.sourceWithModuleRefs, MODULE_REGEXP, function(match) {
var moduleUrl = match[1];
var alias = moduleAliases[moduleUrl];
if (lang_1.isBlank(alias)) {
if (moduleUrl == _this.moduleUrl) {
alias = "";
} else {
alias = "import" + imports.length;
imports.push([ moduleUrl, alias ]);
}
moduleAliases[moduleUrl] = alias;
}
return alias.length > 0 ? alias + "." : "";
});
return new SourceWithImports(newSource, imports);
};
return SourceModule;
}();
exports.SourceModule = SourceModule;
var SourceExpression = function() {
function SourceExpression(declarations, expression) {
this.declarations = declarations;
this.expression = expression;
}
return SourceExpression;
}();
exports.SourceExpression = SourceExpression;
var SourceExpressions = function() {
function SourceExpressions(declarations, expressions) {
this.declarations = declarations;
this.expressions = expressions;
}
return SourceExpressions;
}();
exports.SourceExpressions = SourceExpressions;
var SourceWithImports = function() {
function SourceWithImports(source, imports) {
this.source = source;
this.imports = imports;
}
return SourceWithImports;
}();
exports.SourceWithImports = SourceWithImports;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var source_module_1 = __webpack_require__(311);
var change_detection_jit_generator_1 = __webpack_require__(176);
var abstract_change_detector_1 = __webpack_require__(146);
var change_detection_util_1 = __webpack_require__(141);
var constants_1 = __webpack_require__(139);
var change_definition_factory_1 = __webpack_require__(313);
var lang_1 = __webpack_require__(105);
var change_detection_1 = __webpack_require__(128);
var change_detector_codegen_1 = __webpack_require__(314);
var util_1 = __webpack_require__(308);
var di_1 = __webpack_require__(109);
var ABSTRACT_CHANGE_DETECTOR = "AbstractChangeDetector";
var UTIL = "ChangeDetectionUtil";
var CHANGE_DETECTOR_STATE = "ChangeDetectorState";
exports.CHANGE_DETECTION_JIT_IMPORTS = lang_1.CONST_EXPR({
AbstractChangeDetector: abstract_change_detector_1.AbstractChangeDetector,
ChangeDetectionUtil: change_detection_util_1.ChangeDetectionUtil,
ChangeDetectorState: constants_1.ChangeDetectorState
});
var ABSTRACT_CHANGE_DETECTOR_MODULE = source_module_1.moduleRef("package:angular2/src/core/change_detection/abstract_change_detector" + util_1.MODULE_SUFFIX);
var UTIL_MODULE = source_module_1.moduleRef("package:angular2/src/core/change_detection/change_detection_util" + util_1.MODULE_SUFFIX);
var PREGEN_PROTO_CHANGE_DETECTOR_MODULE = source_module_1.moduleRef("package:angular2/src/core/change_detection/pregen_proto_change_detector" + util_1.MODULE_SUFFIX);
var CONSTANTS_MODULE = source_module_1.moduleRef("package:angular2/src/core/change_detection/constants" + util_1.MODULE_SUFFIX);
var ChangeDetectionCompiler = function() {
function ChangeDetectionCompiler(_genConfig) {
this._genConfig = _genConfig;
}
ChangeDetectionCompiler.prototype.compileComponentRuntime = function(componentType, strategy, parsedTemplate) {
var _this = this;
var changeDetectorDefinitions = change_definition_factory_1.createChangeDetectorDefinitions(componentType, strategy, this._genConfig, parsedTemplate);
return changeDetectorDefinitions.map(function(definition) {
return _this._createChangeDetectorFactory(definition);
});
};
ChangeDetectionCompiler.prototype._createChangeDetectorFactory = function(definition) {
var proto = new change_detection_1.DynamicProtoChangeDetector(definition);
return function() {
return proto.instantiate();
};
};
ChangeDetectionCompiler.prototype.compileComponentCodeGen = function(componentType, strategy, parsedTemplate) {
var changeDetectorDefinitions = change_definition_factory_1.createChangeDetectorDefinitions(componentType, strategy, this._genConfig, parsedTemplate);
var factories = [];
var index = 0;
var sourceParts = changeDetectorDefinitions.map(function(definition) {
var codegen;
var sourcePart;
if (lang_1.IS_DART) {
codegen = new change_detector_codegen_1.Codegen(PREGEN_PROTO_CHANGE_DETECTOR_MODULE);
var className = "_" + definition.id;
var typeRef = index === 0 && componentType.isHost ? "dynamic" : "" + source_module_1.moduleRef(componentType.moduleUrl) + componentType.name;
codegen.generate(typeRef, className, definition);
factories.push(className + ".newChangeDetector");
sourcePart = codegen.toString();
} else {
codegen = new change_detection_jit_generator_1.ChangeDetectorJITGenerator(definition, "" + UTIL_MODULE + UTIL, "" + ABSTRACT_CHANGE_DETECTOR_MODULE + ABSTRACT_CHANGE_DETECTOR, "" + CONSTANTS_MODULE + CHANGE_DETECTOR_STATE);
factories.push("function() { return new " + codegen.typeName + "(); }");
sourcePart = codegen.generateSource();
}
index++;
return sourcePart;
});
return new source_module_1.SourceExpressions(sourceParts, factories);
};
ChangeDetectionCompiler = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", [ change_detection_1.ChangeDetectorGenConfig ]) ], ChangeDetectionCompiler);
return ChangeDetectionCompiler;
}();
exports.ChangeDetectionCompiler = ChangeDetectionCompiler;
}, function(module, exports, __webpack_require__) {
"use strict";
var collection_1 = __webpack_require__(115);
var lang_1 = __webpack_require__(105);
var reflection_1 = __webpack_require__(120);
var change_detection_1 = __webpack_require__(128);
var template_ast_1 = __webpack_require__(310);
var interfaces_1 = __webpack_require__(309);
function createChangeDetectorDefinitions(componentType, componentStrategy, genConfig, parsedTemplate) {
var pvVisitors = [];
var visitor = new ProtoViewVisitor(null, pvVisitors, componentStrategy);
template_ast_1.templateVisitAll(visitor, parsedTemplate);
return createChangeDefinitions(pvVisitors, componentType, genConfig);
}
exports.createChangeDetectorDefinitions = createChangeDetectorDefinitions;
var ProtoViewVisitor = function() {
function ProtoViewVisitor(parent, allVisitors, strategy) {
this.parent = parent;
this.allVisitors = allVisitors;
this.strategy = strategy;
this.nodeCount = 0;
this.boundElementCount = 0;
this.variableNames = [];
this.bindingRecords = [];
this.eventRecords = [];
this.directiveRecords = [];
this.viewIndex = allVisitors.length;
allVisitors.push(this);
}
ProtoViewVisitor.prototype.visitEmbeddedTemplate = function(ast, context) {
this.nodeCount++;
this.boundElementCount++;
template_ast_1.templateVisitAll(this, ast.outputs);
for (var i = 0; i < ast.directives.length; i++) {
ast.directives[i].visit(this, i);
}
var childVisitor = new ProtoViewVisitor(this, this.allVisitors, change_detection_1.ChangeDetectionStrategy.Default);
template_ast_1.templateVisitAll(childVisitor, ast.vars);
template_ast_1.templateVisitAll(childVisitor, ast.children);
return null;
};
ProtoViewVisitor.prototype.visitElement = function(ast, context) {
this.nodeCount++;
if (ast.isBound()) {
this.boundElementCount++;
}
template_ast_1.templateVisitAll(this, ast.inputs, null);
template_ast_1.templateVisitAll(this, ast.outputs);
template_ast_1.templateVisitAll(this, ast.exportAsVars);
for (var i = 0; i < ast.directives.length; i++) {
ast.directives[i].visit(this, i);
}
template_ast_1.templateVisitAll(this, ast.children);
return null;
};
ProtoViewVisitor.prototype.visitNgContent = function(ast, context) {
return null;
};
ProtoViewVisitor.prototype.visitVariable = function(ast, context) {
this.variableNames.push(ast.name);
return null;
};
ProtoViewVisitor.prototype.visitEvent = function(ast, directiveRecord) {
var bindingRecord = lang_1.isPresent(directiveRecord) ? change_detection_1.BindingRecord.createForHostEvent(ast.handler, ast.fullName, directiveRecord) : change_detection_1.BindingRecord.createForEvent(ast.handler, ast.fullName, this.boundElementCount - 1);
this.eventRecords.push(bindingRecord);
return null;
};
ProtoViewVisitor.prototype.visitElementProperty = function(ast, directiveRecord) {
var boundElementIndex = this.boundElementCount - 1;
var dirIndex = lang_1.isPresent(directiveRecord) ? directiveRecord.directiveIndex : null;
var bindingRecord;
if (ast.type === template_ast_1.PropertyBindingType.Property) {
bindingRecord = lang_1.isPresent(dirIndex) ? change_detection_1.BindingRecord.createForHostProperty(dirIndex, ast.value, ast.name) : change_detection_1.BindingRecord.createForElementProperty(ast.value, boundElementIndex, ast.name);
} else if (ast.type === template_ast_1.PropertyBindingType.Attribute) {
bindingRecord = lang_1.isPresent(dirIndex) ? change_detection_1.BindingRecord.createForHostAttribute(dirIndex, ast.value, ast.name) : change_detection_1.BindingRecord.createForElementAttribute(ast.value, boundElementIndex, ast.name);
} else if (ast.type === template_ast_1.PropertyBindingType.Class) {
bindingRecord = lang_1.isPresent(dirIndex) ? change_detection_1.BindingRecord.createForHostClass(dirIndex, ast.value, ast.name) : change_detection_1.BindingRecord.createForElementClass(ast.value, boundElementIndex, ast.name);
} else if (ast.type === template_ast_1.PropertyBindingType.Style) {
bindingRecord = lang_1.isPresent(dirIndex) ? change_detection_1.BindingRecord.createForHostStyle(dirIndex, ast.value, ast.name, ast.unit) : change_detection_1.BindingRecord.createForElementStyle(ast.value, boundElementIndex, ast.name, ast.unit);
}
this.bindingRecords.push(bindingRecord);
return null;
};
ProtoViewVisitor.prototype.visitAttr = function(ast, context) {
return null;
};
ProtoViewVisitor.prototype.visitBoundText = function(ast, context) {
var nodeIndex = this.nodeCount++;
this.bindingRecords.push(change_detection_1.BindingRecord.createForTextNode(ast.value, nodeIndex));
return null;
};
ProtoViewVisitor.prototype.visitText = function(ast, context) {
this.nodeCount++;
return null;
};
ProtoViewVisitor.prototype.visitDirective = function(ast, directiveIndexAsNumber) {
var directiveIndex = new change_detection_1.DirectiveIndex(this.boundElementCount - 1, directiveIndexAsNumber);
var directiveMetadata = ast.directive;
var outputsArray = [];
collection_1.StringMapWrapper.forEach(ast.directive.outputs, function(eventName, dirProperty) {
return outputsArray.push([ dirProperty, eventName ]);
});
var directiveRecord = new change_detection_1.DirectiveRecord({
directiveIndex: directiveIndex,
callAfterContentInit: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.AfterContentInit) !== -1,
callAfterContentChecked: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.AfterContentChecked) !== -1,
callAfterViewInit: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.AfterViewInit) !== -1,
callAfterViewChecked: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.AfterViewChecked) !== -1,
callOnChanges: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.OnChanges) !== -1,
callDoCheck: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.DoCheck) !== -1,
callOnInit: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.OnInit) !== -1,
callOnDestroy: directiveMetadata.lifecycleHooks.indexOf(interfaces_1.LifecycleHooks.OnDestroy) !== -1,
changeDetection: directiveMetadata.changeDetection,
outputs: outputsArray
});
this.directiveRecords.push(directiveRecord);
template_ast_1.templateVisitAll(this, ast.inputs, directiveRecord);
var bindingRecords = this.bindingRecords;
if (directiveRecord.callOnChanges) {
bindingRecords.push(change_detection_1.BindingRecord.createDirectiveOnChanges(directiveRecord));
}
if (directiveRecord.callOnInit) {
bindingRecords.push(change_detection_1.BindingRecord.createDirectiveOnInit(directiveRecord));
}
if (directiveRecord.callDoCheck) {
bindingRecords.push(change_detection_1.BindingRecord.createDirectiveDoCheck(directiveRecord));
}
template_ast_1.templateVisitAll(this, ast.hostProperties, directiveRecord);
template_ast_1.templateVisitAll(this, ast.hostEvents, directiveRecord);
template_ast_1.templateVisitAll(this, ast.exportAsVars);
return null;
};
ProtoViewVisitor.prototype.visitDirectiveProperty = function(ast, directiveRecord) {
var setter = reflection_1.reflector.setter(ast.directiveName);
this.bindingRecords.push(change_detection_1.BindingRecord.createForDirective(ast.value, ast.directiveName, setter, directiveRecord));
return null;
};
return ProtoViewVisitor;
}();
function createChangeDefinitions(pvVisitors, componentType, genConfig) {
var pvVariableNames = _collectNestedProtoViewsVariableNames(pvVisitors);
return pvVisitors.map(function(pvVisitor) {
var id = componentType.name + "_" + pvVisitor.viewIndex;
return new change_detection_1.ChangeDetectorDefinition(id, pvVisitor.strategy, pvVariableNames[pvVisitor.viewIndex], pvVisitor.bindingRecords, pvVisitor.eventRecords, pvVisitor.directiveRecords, genConfig);
});
}
function _collectNestedProtoViewsVariableNames(pvVisitors) {
var nestedPvVariableNames = collection_1.ListWrapper.createFixedSize(pvVisitors.length);
pvVisitors.forEach(function(pv) {
var parentVariableNames = lang_1.isPresent(pv.parent) ? nestedPvVariableNames[pv.parent.viewIndex] : [];
nestedPvVariableNames[pv.viewIndex] = parentVariableNames.concat(pv.variableNames);
});
return nestedPvVariableNames;
}
}, function(module, exports) {
"use strict";
var Codegen = function() {
function Codegen(moduleAlias) {}
Codegen.prototype.generate = function(typeName, changeDetectorTypeName, def) {
throw "Not implemented in JS";
};
Codegen.prototype.toString = function() {
throw "Not implemented in JS";
};
return Codegen;
}();
exports.Codegen = Codegen;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var source_module_1 = __webpack_require__(311);
var view_1 = __webpack_require__(180);
var xhr_1 = __webpack_require__(302);
var lang_1 = __webpack_require__(105);
var async_1 = __webpack_require__(150);
var shadow_css_1 = __webpack_require__(316);
var url_resolver_1 = __webpack_require__(317);
var style_url_resolver_1 = __webpack_require__(318);
var util_1 = __webpack_require__(308);
var di_1 = __webpack_require__(109);
var COMPONENT_VARIABLE = "%COMP%";
var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
var StyleCompiler = function() {
function StyleCompiler(_xhr, _urlResolver) {
this._xhr = _xhr;
this._urlResolver = _urlResolver;
this._styleCache = new Map();
this._shadowCss = new shadow_css_1.ShadowCss();
}
StyleCompiler.prototype.compileComponentRuntime = function(template) {
var styles = template.styles;
var styleAbsUrls = template.styleUrls;
return this._loadStyles(styles, styleAbsUrls, template.encapsulation === view_1.ViewEncapsulation.Emulated);
};
StyleCompiler.prototype.compileComponentCodeGen = function(template) {
var shim = template.encapsulation === view_1.ViewEncapsulation.Emulated;
return this._styleCodeGen(template.styles, template.styleUrls, shim);
};
StyleCompiler.prototype.compileStylesheetCodeGen = function(stylesheetUrl, cssText) {
var styleWithImports = style_url_resolver_1.extractStyleUrls(this._urlResolver, stylesheetUrl, cssText);
return [ this._styleModule(stylesheetUrl, false, this._styleCodeGen([ styleWithImports.style ], styleWithImports.styleUrls, false)), this._styleModule(stylesheetUrl, true, this._styleCodeGen([ styleWithImports.style ], styleWithImports.styleUrls, true)) ];
};
StyleCompiler.prototype.clearCache = function() {
this._styleCache.clear();
};
StyleCompiler.prototype._loadStyles = function(plainStyles, absUrls, encapsulate) {
var _this = this;
var promises = absUrls.map(function(absUrl) {
var cacheKey = "" + absUrl + (encapsulate ? ".shim" : "");
var result = _this._styleCache.get(cacheKey);
if (lang_1.isBlank(result)) {
result = _this._xhr.get(absUrl).then(function(style) {
var styleWithImports = style_url_resolver_1.extractStyleUrls(_this._urlResolver, absUrl, style);
return _this._loadStyles([ styleWithImports.style ], styleWithImports.styleUrls, encapsulate);
});
_this._styleCache.set(cacheKey, result);
}
return result;
});
return async_1.PromiseWrapper.all(promises).then(function(nestedStyles) {
var result = plainStyles.map(function(plainStyle) {
return _this._shimIfNeeded(plainStyle, encapsulate);
});
nestedStyles.forEach(function(styles) {
return result.push(styles);
});
return result;
});
};
StyleCompiler.prototype._styleCodeGen = function(plainStyles, absUrls, shim) {
var _this = this;
var arrayPrefix = lang_1.IS_DART ? "const" : "";
var styleExpressions = plainStyles.map(function(plainStyle) {
return util_1.escapeSingleQuoteString(_this._shimIfNeeded(plainStyle, shim));
});
for (var i = 0; i < absUrls.length; i++) {
var moduleUrl = this._createModuleUrl(absUrls[i], shim);
styleExpressions.push(source_module_1.moduleRef(moduleUrl) + "STYLES");
}
var expressionSource = arrayPrefix + " [" + styleExpressions.join(",") + "]";
return new source_module_1.SourceExpression([], expressionSource);
};
StyleCompiler.prototype._styleModule = function(stylesheetUrl, shim, expression) {
var moduleSource = "\n      " + expression.declarations.join("\n") + "\n      " + util_1.codeGenExportVariable("STYLES") + expression.expression + ";\n    ";
return new source_module_1.SourceModule(this._createModuleUrl(stylesheetUrl, shim), moduleSource);
};
StyleCompiler.prototype._shimIfNeeded = function(style, shim) {
return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
};
StyleCompiler.prototype._createModuleUrl = function(stylesheetUrl, shim) {
return shim ? stylesheetUrl + ".shim" + util_1.MODULE_SUFFIX : "" + stylesheetUrl + util_1.MODULE_SUFFIX;
};
StyleCompiler = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", [ xhr_1.XHR, url_resolver_1.UrlResolver ]) ], StyleCompiler);
return StyleCompiler;
}();
exports.StyleCompiler = StyleCompiler;
}, function(module, exports, __webpack_require__) {
"use strict";
var collection_1 = __webpack_require__(115);
var lang_1 = __webpack_require__(105);
var ShadowCss = function() {
function ShadowCss() {
this.strictStyling = true;
}
ShadowCss.prototype.shimCssText = function(cssText, selector, hostSelector) {
if (hostSelector === void 0) {
hostSelector = "";
}
cssText = stripComments(cssText);
cssText = this._insertDirectives(cssText);
return this._scopeCssText(cssText, selector, hostSelector);
};
ShadowCss.prototype._insertDirectives = function(cssText) {
cssText = this._insertPolyfillDirectivesInCssText(cssText);
return this._insertPolyfillRulesInCssText(cssText);
};
ShadowCss.prototype._insertPolyfillDirectivesInCssText = function(cssText) {
return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentNextSelectorRe, function(m) {
return m[1] + "{";
});
};
ShadowCss.prototype._insertPolyfillRulesInCssText = function(cssText) {
return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentRuleRe, function(m) {
var rule = m[0];
rule = lang_1.StringWrapper.replace(rule, m[1], "");
rule = lang_1.StringWrapper.replace(rule, m[2], "");
return m[3] + rule;
});
};
ShadowCss.prototype._scopeCssText = function(cssText, scopeSelector, hostSelector) {
var unscoped = this._extractUnscopedRulesFromCssText(cssText);
cssText = this._insertPolyfillHostInCssText(cssText);
cssText = this._convertColonHost(cssText);
cssText = this._convertColonHostContext(cssText);
cssText = this._convertShadowDOMSelectors(cssText);
if (lang_1.isPresent(scopeSelector)) {
cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
}
cssText = cssText + "\n" + unscoped;
return cssText.trim();
};
ShadowCss.prototype._extractUnscopedRulesFromCssText = function(cssText) {
var r = "", m;
var matcher = lang_1.RegExpWrapper.matcher(_cssContentUnscopedRuleRe, cssText);
while (lang_1.isPresent(m = lang_1.RegExpMatcherWrapper.next(matcher))) {
var rule = m[0];
rule = lang_1.StringWrapper.replace(rule, m[2], "");
rule = lang_1.StringWrapper.replace(rule, m[1], m[3]);
r += rule + "\n\n";
}
return r;
};
ShadowCss.prototype._convertColonHost = function(cssText) {
return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
};
ShadowCss.prototype._convertColonHostContext = function(cssText) {
return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
};
ShadowCss.prototype._convertColonRule = function(cssText, regExp, partReplacer) {
return lang_1.StringWrapper.replaceAllMapped(cssText, regExp, function(m) {
if (lang_1.isPresent(m[2])) {
var parts = m[2].split(","), r = [];
for (var i = 0; i < parts.length; i++) {
var p = parts[i];
if (lang_1.isBlank(p)) break;
p = p.trim();
r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
}
return r.join(",");
} else {
return _polyfillHostNoCombinator + m[3];
}
});
};
ShadowCss.prototype._colonHostContextPartReplacer = function(host, part, suffix) {
if (lang_1.StringWrapper.contains(part, _polyfillHost)) {
return this._colonHostPartReplacer(host, part, suffix);
} else {
return host + part + suffix + ", " + part + " " + host + suffix;
}
};
ShadowCss.prototype._colonHostPartReplacer = function(host, part, suffix) {
return host + lang_1.StringWrapper.replace(part, _polyfillHost, "") + suffix;
};
ShadowCss.prototype._convertShadowDOMSelectors = function(cssText) {
for (var i = 0; i < _shadowDOMSelectorsRe.length; i++) {
cssText = lang_1.StringWrapper.replaceAll(cssText, _shadowDOMSelectorsRe[i], " ");
}
return cssText;
};
ShadowCss.prototype._scopeSelectors = function(cssText, scopeSelector, hostSelector) {
var _this = this;
return processRules(cssText, function(rule) {
var selector = rule.selector;
var content = rule.content;
if (rule.selector[0] != "@" || rule.selector.startsWith("@page")) {
selector = _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
} else if (rule.selector.startsWith("@media")) {
content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
}
return new CssRule(selector, content);
});
};
ShadowCss.prototype._scopeSelector = function(selector, scopeSelector, hostSelector, strict) {
var r = [], parts = selector.split(",");
for (var i = 0; i < parts.length; i++) {
var p = parts[i];
p = p.trim();
if (this._selectorNeedsScoping(p, scopeSelector)) {
p = strict && !lang_1.StringWrapper.contains(p, _polyfillHostNoCombinator) ? this._applyStrictSelectorScope(p, scopeSelector) : this._applySelectorScope(p, scopeSelector, hostSelector);
}
r.push(p);
}
return r.join(", ");
};
ShadowCss.prototype._selectorNeedsScoping = function(selector, scopeSelector) {
var re = this._makeScopeMatcher(scopeSelector);
return !lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(re, selector));
};
ShadowCss.prototype._makeScopeMatcher = function(scopeSelector) {
var lre = /\[/g;
var rre = /\]/g;
scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, lre, "\\[");
scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, rre, "\\]");
return lang_1.RegExpWrapper.create("^(" + scopeSelector + ")" + _selectorReSuffix, "m");
};
ShadowCss.prototype._applySelectorScope = function(selector, scopeSelector, hostSelector) {
return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
};
ShadowCss.prototype._applySimpleSelectorScope = function(selector, scopeSelector, hostSelector) {
if (lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(_polyfillHostRe, selector))) {
var replaceBy = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
selector = lang_1.StringWrapper.replace(selector, _polyfillHostNoCombinator, replaceBy);
return lang_1.StringWrapper.replaceAll(selector, _polyfillHostRe, replaceBy + " ");
} else {
return scopeSelector + " " + selector;
}
};
ShadowCss.prototype._applyStrictSelectorScope = function(selector, scopeSelector) {
var isRe = /\[is=([^\]]*)\]/g;
scopeSelector = lang_1.StringWrapper.replaceAllMapped(scopeSelector, isRe, function(m) {
return m[1];
});
var splits = [ " ", ">", "+", "~" ], scoped = selector, attrName = "[" + scopeSelector + "]";
for (var i = 0; i < splits.length; i++) {
var sep = splits[i];
var parts = scoped.split(sep);
scoped = parts.map(function(p) {
var t = lang_1.StringWrapper.replaceAll(p.trim(), _polyfillHostRe, "");
if (t.length > 0 && !collection_1.ListWrapper.contains(splits, t) && !lang_1.StringWrapper.contains(t, attrName)) {
var re = /([^:]*)(:*)(.*)/g;
var m = lang_1.RegExpWrapper.firstMatch(re, t);
if (lang_1.isPresent(m)) {
p = m[1] + attrName + m[2] + m[3];
}
}
return p;
}).join(sep);
}
return scoped;
};
ShadowCss.prototype._insertPolyfillHostInCssText = function(selector) {
selector = lang_1.StringWrapper.replaceAll(selector, _colonHostContextRe, _polyfillHostContext);
selector = lang_1.StringWrapper.replaceAll(selector, _colonHostRe, _polyfillHost);
return selector;
};
return ShadowCss;
}();
exports.ShadowCss = ShadowCss;
var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?['"](.*?)['"][;\s]*}([^{]*?){/gim;
var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
var _polyfillHost = "-shadowcsshost";
var _polyfillHostContext = "-shadowcsscontext";
var _parenSuffix = ")(?:\\((" + "(?:\\([^)(]*\\)|[^)(]*)+?" + ")\\))?([^,{]*)";
var _cssColonHostRe = lang_1.RegExpWrapper.create("(" + _polyfillHost + _parenSuffix, "im");
var _cssColonHostContextRe = lang_1.RegExpWrapper.create("(" + _polyfillHostContext + _parenSuffix, "im");
var _polyfillHostNoCombinator = _polyfillHost + "-no-combinator";
var _shadowDOMSelectorsRe = [ />>>/g, /::shadow/g, /::content/g, /\/deep\//g, /\/shadow-deep\//g, /\/shadow\//g ];
var _selectorReSuffix = "([>\\s~+[.,{:][\\s\\S]*)?$";
var _polyfillHostRe = lang_1.RegExpWrapper.create(_polyfillHost, "im");
var _colonHostRe = /:host/gim;
var _colonHostContextRe = /:host-context/gim;
var _commentRe = /\/\*[\s\S]*?\*\//g;
function stripComments(input) {
return lang_1.StringWrapper.replaceAllMapped(input, _commentRe, function(_) {
return "";
});
}
var _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
var _curlyRe = /([{}])/g;
var OPEN_CURLY = "{";
var CLOSE_CURLY = "}";
var BLOCK_PLACEHOLDER = "%BLOCK%";
var CssRule = function() {
function CssRule(selector, content) {
this.selector = selector;
this.content = content;
}
return CssRule;
}();
exports.CssRule = CssRule;
function processRules(input, ruleCallback) {
var inputWithEscapedBlocks = escapeBlocks(input);
var nextBlockIndex = 0;
return lang_1.StringWrapper.replaceAllMapped(inputWithEscapedBlocks.escapedString, _ruleRe, function(m) {
var selector = m[2];
var content = "";
var suffix = m[4];
var contentPrefix = "";
if (lang_1.isPresent(m[4]) && m[4].startsWith("{" + BLOCK_PLACEHOLDER)) {
content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
suffix = m[4].substring(BLOCK_PLACEHOLDER.length + 1);
contentPrefix = "{";
}
var rule = ruleCallback(new CssRule(selector, content));
return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
});
}
exports.processRules = processRules;
var StringWithEscapedBlocks = function() {
function StringWithEscapedBlocks(escapedString, blocks) {
this.escapedString = escapedString;
this.blocks = blocks;
}
return StringWithEscapedBlocks;
}();
function escapeBlocks(input) {
var inputParts = lang_1.StringWrapper.split(input, _curlyRe);
var resultParts = [];
var escapedBlocks = [];
var bracketCount = 0;
var currentBlockParts = [];
for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {
var part = inputParts[partIndex];
if (part == CLOSE_CURLY) {
bracketCount--;
}
if (bracketCount > 0) {
currentBlockParts.push(part);
} else {
if (currentBlockParts.length > 0) {
escapedBlocks.push(currentBlockParts.join(""));
resultParts.push(BLOCK_PLACEHOLDER);
currentBlockParts = [];
}
resultParts.push(part);
}
if (part == OPEN_CURLY) {
bracketCount++;
}
}
if (currentBlockParts.length > 0) {
escapedBlocks.push(currentBlockParts.join(""));
resultParts.push(BLOCK_PLACEHOLDER);
}
return new StringWithEscapedBlocks(resultParts.join(""), escapedBlocks);
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var di_1 = __webpack_require__(109);
var lang_1 = __webpack_require__(105);
var application_tokens_1 = __webpack_require__(186);
var di_2 = __webpack_require__(109);
function createWithoutPackagePrefix() {
return new UrlResolver();
}
exports.createWithoutPackagePrefix = createWithoutPackagePrefix;
exports.DEFAULT_PACKAGE_URL_PROVIDER = new di_2.Provider(application_tokens_1.PACKAGE_ROOT_URL, {
useValue: "/"
});
var UrlResolver = function() {
function UrlResolver(packagePrefix) {
if (packagePrefix === void 0) {
packagePrefix = null;
}
if (lang_1.isPresent(packagePrefix)) {
this._packagePrefix = lang_1.StringWrapper.stripRight(packagePrefix, "/") + "/";
}
}
UrlResolver.prototype.resolve = function(baseUrl, url) {
var resolvedUrl = url;
if (lang_1.isPresent(baseUrl) && baseUrl.length > 0) {
resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
}
if (lang_1.isPresent(this._packagePrefix) && getUrlScheme(resolvedUrl) == "package") {
resolvedUrl = resolvedUrl.replace("package:", this._packagePrefix);
}
return resolvedUrl;
};
UrlResolver = __decorate([ di_1.Injectable(), __param(0, di_1.Inject(application_tokens_1.PACKAGE_ROOT_URL)), __metadata("design:paramtypes", [ String ]) ], UrlResolver);
return UrlResolver;
}();
exports.UrlResolver = UrlResolver;
function getUrlScheme(url) {
var match = _split(url);
return match && match[_ComponentIndex.Scheme] || "";
}
exports.getUrlScheme = getUrlScheme;
function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
var out = [];
if (lang_1.isPresent(opt_scheme)) {
out.push(opt_scheme + ":");
}
if (lang_1.isPresent(opt_domain)) {
out.push("//");
if (lang_1.isPresent(opt_userInfo)) {
out.push(opt_userInfo + "@");
}
out.push(opt_domain);
if (lang_1.isPresent(opt_port)) {
out.push(":" + opt_port);
}
}
if (lang_1.isPresent(opt_path)) {
out.push(opt_path);
}
if (lang_1.isPresent(opt_queryData)) {
out.push("?" + opt_queryData);
}
if (lang_1.isPresent(opt_fragment)) {
out.push("#" + opt_fragment);
}
return out.join("");
}
var _splitRe = lang_1.RegExpWrapper.create("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([\\w\\d\\-\\u0100-\\uffff.%]*)" + "(?::([0-9]+))?" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
var _ComponentIndex;
(function(_ComponentIndex) {
_ComponentIndex[_ComponentIndex["Scheme"] = 1] = "Scheme";
_ComponentIndex[_ComponentIndex["UserInfo"] = 2] = "UserInfo";
_ComponentIndex[_ComponentIndex["Domain"] = 3] = "Domain";
_ComponentIndex[_ComponentIndex["Port"] = 4] = "Port";
_ComponentIndex[_ComponentIndex["Path"] = 5] = "Path";
_ComponentIndex[_ComponentIndex["QueryData"] = 6] = "QueryData";
_ComponentIndex[_ComponentIndex["Fragment"] = 7] = "Fragment";
})(_ComponentIndex || (_ComponentIndex = {}));
function _split(uri) {
return lang_1.RegExpWrapper.firstMatch(_splitRe, uri);
}
function _removeDotSegments(path) {
if (path == "/") return "/";
var leadingSlash = path[0] == "/" ? "/" : "";
var trailingSlash = path[path.length - 1] === "/" ? "/" : "";
var segments = path.split("/");
var out = [];
var up = 0;
for (var pos = 0; pos < segments.length; pos++) {
var segment = segments[pos];
switch (segment) {
case "":
case ".":
break;

case "..":
if (out.length > 0) {
out.pop();
} else {
up++;
}
break;

default:
out.push(segment);
}
}
if (leadingSlash == "") {
while (up-- > 0) {
out.unshift("..");
}
if (out.length === 0) out.push(".");
}
return leadingSlash + out.join("/") + trailingSlash;
}
function _joinAndCanonicalizePath(parts) {
var path = parts[_ComponentIndex.Path];
path = lang_1.isBlank(path) ? "" : _removeDotSegments(path);
parts[_ComponentIndex.Path] = path;
return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
}
function _resolveUrl(base, url) {
var parts = _split(encodeURI(url));
var baseParts = _split(base);
if (lang_1.isPresent(parts[_ComponentIndex.Scheme])) {
return _joinAndCanonicalizePath(parts);
} else {
parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
}
for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
if (lang_1.isBlank(parts[i])) {
parts[i] = baseParts[i];
}
}
if (parts[_ComponentIndex.Path][0] == "/") {
return _joinAndCanonicalizePath(parts);
}
var path = baseParts[_ComponentIndex.Path];
if (lang_1.isBlank(path)) path = "/";
var index = path.lastIndexOf("/");
path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
parts[_ComponentIndex.Path] = path;
return _joinAndCanonicalizePath(parts);
}
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var StyleWithImports = function() {
function StyleWithImports(style, styleUrls) {
this.style = style;
this.styleUrls = styleUrls;
}
return StyleWithImports;
}();
exports.StyleWithImports = StyleWithImports;
function isStyleUrlResolvable(url) {
if (lang_1.isBlank(url) || url.length === 0 || url[0] == "/") return false;
var schemeMatch = lang_1.RegExpWrapper.firstMatch(_urlWithSchemaRe, url);
return lang_1.isBlank(schemeMatch) || schemeMatch[1] == "package" || schemeMatch[1] == "asset";
}
exports.isStyleUrlResolvable = isStyleUrlResolvable;
function extractStyleUrls(resolver, baseUrl, cssText) {
var foundUrls = [];
var modifiedCssText = lang_1.StringWrapper.replaceAllMapped(cssText, _cssImportRe, function(m) {
var url = lang_1.isPresent(m[1]) ? m[1] : m[2];
if (!isStyleUrlResolvable(url)) {
return m[0];
}
foundUrls.push(resolver.resolve(baseUrl, url));
return "";
});
return new StyleWithImports(modifiedCssText, foundUrls);
}
exports.extractStyleUrls = extractStyleUrls;
var _cssImportRe = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
var _urlWithSchemaRe = /^([a-zA-Z\-\+\.]+):/g;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var collection_1 = __webpack_require__(115);
var template_ast_1 = __webpack_require__(310);
var source_module_1 = __webpack_require__(311);
var view_1 = __webpack_require__(190);
var view_type_1 = __webpack_require__(192);
var element_1 = __webpack_require__(191);
var view_2 = __webpack_require__(180);
var util_1 = __webpack_require__(308);
var di_1 = __webpack_require__(109);
var proto_view_compiler_1 = __webpack_require__(320);
exports.VIEW_JIT_IMPORTS = lang_1.CONST_EXPR({
AppView: view_1.AppView,
AppElement: element_1.AppElement,
flattenNestedViewRenderNodes: view_1.flattenNestedViewRenderNodes,
checkSlotCount: view_1.checkSlotCount
});
var ViewCompiler = function() {
function ViewCompiler() {}
ViewCompiler.prototype.compileComponentRuntime = function(component, template, styles, protoViews, changeDetectorFactories, componentViewFactory) {
var viewFactory = new RuntimeViewFactory(component, styles, protoViews, changeDetectorFactories, componentViewFactory);
return viewFactory.createViewFactory(template, 0, []);
};
ViewCompiler.prototype.compileComponentCodeGen = function(component, template, styles, protoViews, changeDetectorFactoryExpressions, componentViewFactory) {
var viewFactory = new CodeGenViewFactory(component, styles, protoViews, changeDetectorFactoryExpressions, componentViewFactory);
var targetStatements = [];
var viewFactoryExpression = viewFactory.createViewFactory(template, 0, targetStatements);
return new source_module_1.SourceExpression(targetStatements.map(function(stmt) {
return stmt.statement;
}), viewFactoryExpression.expression);
};
ViewCompiler = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", []) ], ViewCompiler);
return ViewCompiler;
}();
exports.ViewCompiler = ViewCompiler;
var CodeGenViewFactory = function() {
function CodeGenViewFactory(component, styles, protoViews, changeDetectorExpressions, componentViewFactory) {
this.component = component;
this.styles = styles;
this.protoViews = protoViews;
this.changeDetectorExpressions = changeDetectorExpressions;
this.componentViewFactory = componentViewFactory;
this._nextVarId = 0;
}
CodeGenViewFactory.prototype._nextVar = function(prefix) {
return "" + prefix + this._nextVarId++ + "_" + this.component.type.name;
};
CodeGenViewFactory.prototype._nextRenderVar = function() {
return this._nextVar("render");
};
CodeGenViewFactory.prototype._nextAppVar = function() {
return this._nextVar("app");
};
CodeGenViewFactory.prototype._nextDisposableVar = function() {
return "disposable" + this._nextVarId++ + "_" + this.component.type.name;
};
CodeGenViewFactory.prototype.createText = function(renderer, parent, text, targetStatements) {
var varName = this._nextRenderVar();
var statement = "var " + varName + " = " + renderer.expression + ".createText(" + (lang_1.isPresent(parent) ? parent.expression : null) + ", " + util_1.escapeSingleQuoteString(text) + ");";
targetStatements.push(new util_1.Statement(statement));
return new util_1.Expression(varName);
};
CodeGenViewFactory.prototype.createElement = function(renderer, parentRenderNode, name, rootSelector, targetStatements) {
var varName = this._nextRenderVar();
var valueExpr;
if (lang_1.isPresent(rootSelector)) {
valueExpr = rootSelector.expression + " == null ?\n        " + renderer.expression + ".createElement(" + (lang_1.isPresent(parentRenderNode) ? parentRenderNode.expression : null) + ", " + util_1.escapeSingleQuoteString(name) + ") :\n        " + renderer.expression + ".selectRootElement(" + rootSelector.expression + ");";
} else {
valueExpr = renderer.expression + ".createElement(" + (lang_1.isPresent(parentRenderNode) ? parentRenderNode.expression : null) + ", " + util_1.escapeSingleQuoteString(name) + ")";
}
var statement = "var " + varName + " = " + valueExpr + ";";
targetStatements.push(new util_1.Statement(statement));
return new util_1.Expression(varName);
};
CodeGenViewFactory.prototype.createTemplateAnchor = function(renderer, parentRenderNode, targetStatements) {
var varName = this._nextRenderVar();
var valueExpr = renderer.expression + ".createTemplateAnchor(" + (lang_1.isPresent(parentRenderNode) ? parentRenderNode.expression : null) + ");";
targetStatements.push(new util_1.Statement("var " + varName + " = " + valueExpr));
return new util_1.Expression(varName);
};
CodeGenViewFactory.prototype.createGlobalEventListener = function(renderer, appView, boundElementIndex, eventAst, targetStatements) {
var disposableVar = this._nextDisposableVar();
var eventHandlerExpr = codeGenEventHandler(appView, boundElementIndex, eventAst.fullName);
targetStatements.push(new util_1.Statement("var " + disposableVar + " = " + renderer.expression + ".listenGlobal(" + util_1.escapeValue(eventAst.target) + ", " + util_1.escapeValue(eventAst.name) + ", " + eventHandlerExpr + ");"));
return new util_1.Expression(disposableVar);
};
CodeGenViewFactory.prototype.createElementEventListener = function(renderer, appView, boundElementIndex, renderNode, eventAst, targetStatements) {
var disposableVar = this._nextDisposableVar();
var eventHandlerExpr = codeGenEventHandler(appView, boundElementIndex, eventAst.fullName);
targetStatements.push(new util_1.Statement("var " + disposableVar + " = " + renderer.expression + ".listen(" + renderNode.expression + ", " + util_1.escapeValue(eventAst.name) + ", " + eventHandlerExpr + ");"));
return new util_1.Expression(disposableVar);
};
CodeGenViewFactory.prototype.setElementAttribute = function(renderer, renderNode, attrName, attrValue, targetStatements) {
targetStatements.push(new util_1.Statement(renderer.expression + ".setElementAttribute(" + renderNode.expression + ", " + util_1.escapeSingleQuoteString(attrName) + ", " + util_1.escapeSingleQuoteString(attrValue) + ");"));
};
CodeGenViewFactory.prototype.createAppElement = function(appProtoEl, appView, renderNode, parentAppEl, embeddedViewFactory, targetStatements) {
var appVar = this._nextAppVar();
var varValue = "new " + proto_view_compiler_1.APP_EL_MODULE_REF + "AppElement(" + appProtoEl.expression + ", " + appView.expression + ",\n      " + (lang_1.isPresent(parentAppEl) ? parentAppEl.expression : null) + ", " + renderNode.expression + ", " + (lang_1.isPresent(embeddedViewFactory) ? embeddedViewFactory.expression : null) + ")";
targetStatements.push(new util_1.Statement("var " + appVar + " = " + varValue + ";"));
return new util_1.Expression(appVar);
};
CodeGenViewFactory.prototype.createAndSetComponentView = function(renderer, viewManager, view, appEl, component, contentNodesByNgContentIndex, targetStatements) {
var codeGenContentNodes;
if (this.component.type.isHost) {
codeGenContentNodes = view.expression + ".projectableNodes";
} else {
codeGenContentNodes = "[" + contentNodesByNgContentIndex.map(function(nodes) {
return util_1.codeGenFlatArray(nodes);
}).join(",") + "]";
}
targetStatements.push(new util_1.Statement(this.componentViewFactory(component) + "(" + renderer.expression + ", " + viewManager.expression + ", " + appEl.expression + ", " + codeGenContentNodes + ", null, null, null);"));
};
CodeGenViewFactory.prototype.getProjectedNodes = function(projectableNodes, ngContentIndex) {
return new util_1.Expression(projectableNodes.expression + "[" + ngContentIndex + "]", true);
};
CodeGenViewFactory.prototype.appendProjectedNodes = function(renderer, parent, nodes, targetStatements) {
targetStatements.push(new util_1.Statement(renderer.expression + ".projectNodes(" + parent.expression + ", " + proto_view_compiler_1.APP_VIEW_MODULE_REF + "flattenNestedViewRenderNodes(" + nodes.expression + "));"));
};
CodeGenViewFactory.prototype.createViewFactory = function(asts, embeddedTemplateIndex, targetStatements) {
var compileProtoView = this.protoViews[embeddedTemplateIndex];
var isHostView = this.component.type.isHost;
var isComponentView = embeddedTemplateIndex === 0 && !isHostView;
var visitor = new ViewBuilderVisitor(new util_1.Expression("renderer"), new util_1.Expression("viewManager"), new util_1.Expression("projectableNodes"), isHostView ? new util_1.Expression("rootSelector") : null, new util_1.Expression("view"), compileProtoView, targetStatements, this);
template_ast_1.templateVisitAll(visitor, asts, new ParentElement(isComponentView ? new util_1.Expression("parentRenderNode") : null, null, null));
var appProtoView = compileProtoView.protoView.expression;
var viewFactoryName = codeGenViewFactoryName(this.component, embeddedTemplateIndex);
var changeDetectorFactory = this.changeDetectorExpressions.expressions[embeddedTemplateIndex];
var factoryArgs = [ "parentRenderer", "viewManager", "containerEl", "projectableNodes", "rootSelector", "dynamicallyCreatedProviders", "rootInjector" ];
var initRendererStmts = [];
var rendererExpr = "parentRenderer";
if (embeddedTemplateIndex === 0) {
var renderCompTypeVar = this._nextVar("renderType");
targetStatements.push(new util_1.Statement("var " + renderCompTypeVar + " = null;"));
var stylesVar = this._nextVar("styles");
targetStatements.push(new util_1.Statement(util_1.CONST_VAR + " " + stylesVar + " = " + this.styles.expression + ";"));
var encapsulation = this.component.template.encapsulation;
initRendererStmts.push("if (" + renderCompTypeVar + " == null) {\n        " + renderCompTypeVar + " = viewManager.createRenderComponentType(" + codeGenViewEncapsulation(encapsulation) + ", " + stylesVar + ");\n      }");
rendererExpr = "parentRenderer.renderComponent(" + renderCompTypeVar + ")";
}
var statement = "\n" + util_1.codeGenFnHeader(factoryArgs, viewFactoryName) + "{\n  " + initRendererStmts.join("\n") + "\n  var renderer = " + rendererExpr + ";\n  var view = new " + proto_view_compiler_1.APP_VIEW_MODULE_REF + "AppView(\n    " + appProtoView + ", renderer, viewManager,\n    projectableNodes,\n    containerEl,\n    dynamicallyCreatedProviders, rootInjector,\n    " + changeDetectorFactory + "()\n  );\n  " + proto_view_compiler_1.APP_VIEW_MODULE_REF + "checkSlotCount(" + util_1.escapeValue(this.component.type.name) + ", " + this.component.template.ngContentSelectors.length + ", projectableNodes);\n  " + (isComponentView ? "var parentRenderNode = renderer.createViewRoot(view.containerAppElement.nativeElement);" : "") + "\n  " + visitor.renderStmts.map(function(stmt) {
return stmt.statement;
}).join("\n") + "\n  " + visitor.appStmts.map(function(stmt) {
return stmt.statement;
}).join("\n") + "\n\n  view.init(" + util_1.codeGenFlatArray(visitor.rootNodesOrAppElements) + ", " + util_1.codeGenArray(visitor.renderNodes) + ", " + util_1.codeGenArray(visitor.appDisposables) + ",\n            " + util_1.codeGenArray(visitor.appElements) + ");\n  return view;\n}";
targetStatements.push(new util_1.Statement(statement));
return new util_1.Expression(viewFactoryName);
};
return CodeGenViewFactory;
}();
var RuntimeViewFactory = function() {
function RuntimeViewFactory(component, styles, protoViews, changeDetectorFactories, componentViewFactory) {
this.component = component;
this.styles = styles;
this.protoViews = protoViews;
this.changeDetectorFactories = changeDetectorFactories;
this.componentViewFactory = componentViewFactory;
}
RuntimeViewFactory.prototype.createText = function(renderer, parent, text, targetStatements) {
return renderer.createText(parent, text);
};
RuntimeViewFactory.prototype.createElement = function(renderer, parent, name, rootSelector, targetStatements) {
var el;
if (lang_1.isPresent(rootSelector)) {
el = renderer.selectRootElement(rootSelector);
} else {
el = renderer.createElement(parent, name);
}
return el;
};
RuntimeViewFactory.prototype.createTemplateAnchor = function(renderer, parent, targetStatements) {
return renderer.createTemplateAnchor(parent);
};
RuntimeViewFactory.prototype.createGlobalEventListener = function(renderer, appView, boundElementIndex, eventAst, targetStatements) {
return renderer.listenGlobal(eventAst.target, eventAst.name, function(event) {
return appView.triggerEventHandlers(eventAst.fullName, event, boundElementIndex);
});
};
RuntimeViewFactory.prototype.createElementEventListener = function(renderer, appView, boundElementIndex, renderNode, eventAst, targetStatements) {
return renderer.listen(renderNode, eventAst.name, function(event) {
return appView.triggerEventHandlers(eventAst.fullName, event, boundElementIndex);
});
};
RuntimeViewFactory.prototype.setElementAttribute = function(renderer, renderNode, attrName, attrValue, targetStatements) {
renderer.setElementAttribute(renderNode, attrName, attrValue);
};
RuntimeViewFactory.prototype.createAppElement = function(appProtoEl, appView, renderNode, parentAppEl, embeddedViewFactory, targetStatements) {
return new element_1.AppElement(appProtoEl, appView, parentAppEl, renderNode, embeddedViewFactory);
};
RuntimeViewFactory.prototype.createAndSetComponentView = function(renderer, viewManager, appView, appEl, component, contentNodesByNgContentIndex, targetStatements) {
var flattenedContentNodes;
if (this.component.type.isHost) {
flattenedContentNodes = appView.projectableNodes;
} else {
flattenedContentNodes = collection_1.ListWrapper.createFixedSize(contentNodesByNgContentIndex.length);
for (var i = 0; i < contentNodesByNgContentIndex.length; i++) {
flattenedContentNodes[i] = util_1.flattenArray(contentNodesByNgContentIndex[i], []);
}
}
this.componentViewFactory(component)(renderer, viewManager, appEl, flattenedContentNodes);
};
RuntimeViewFactory.prototype.getProjectedNodes = function(projectableNodes, ngContentIndex) {
return projectableNodes[ngContentIndex];
};
RuntimeViewFactory.prototype.appendProjectedNodes = function(renderer, parent, nodes, targetStatements) {
renderer.projectNodes(parent, view_1.flattenNestedViewRenderNodes(nodes));
};
RuntimeViewFactory.prototype.createViewFactory = function(asts, embeddedTemplateIndex, targetStatements) {
var _this = this;
var compileProtoView = this.protoViews[embeddedTemplateIndex];
var isComponentView = compileProtoView.protoView.type === view_type_1.ViewType.COMPONENT;
var renderComponentType = null;
return function(parentRenderer, viewManager, containerEl, projectableNodes, rootSelector, dynamicallyCreatedProviders, rootInjector) {
if (rootSelector === void 0) {
rootSelector = null;
}
if (dynamicallyCreatedProviders === void 0) {
dynamicallyCreatedProviders = null;
}
if (rootInjector === void 0) {
rootInjector = null;
}
view_1.checkSlotCount(_this.component.type.name, _this.component.template.ngContentSelectors.length, projectableNodes);
var renderer;
if (embeddedTemplateIndex === 0) {
if (lang_1.isBlank(renderComponentType)) {
renderComponentType = viewManager.createRenderComponentType(_this.component.template.encapsulation, _this.styles);
}
renderer = parentRenderer.renderComponent(renderComponentType);
} else {
renderer = parentRenderer;
}
var changeDetector = _this.changeDetectorFactories[embeddedTemplateIndex]();
var view = new view_1.AppView(compileProtoView.protoView, renderer, viewManager, projectableNodes, containerEl, dynamicallyCreatedProviders, rootInjector, changeDetector);
var visitor = new ViewBuilderVisitor(renderer, viewManager, projectableNodes, rootSelector, view, compileProtoView, [], _this);
var parentRenderNode = isComponentView ? renderer.createViewRoot(containerEl.nativeElement) : null;
template_ast_1.templateVisitAll(visitor, asts, new ParentElement(parentRenderNode, null, null));
view.init(util_1.flattenArray(visitor.rootNodesOrAppElements, []), visitor.renderNodes, visitor.appDisposables, visitor.appElements);
return view;
};
};
return RuntimeViewFactory;
}();
var ParentElement = function() {
function ParentElement(renderNode, appEl, component) {
this.renderNode = renderNode;
this.appEl = appEl;
this.component = component;
if (lang_1.isPresent(component)) {
this.contentNodesByNgContentIndex = collection_1.ListWrapper.createFixedSize(component.template.ngContentSelectors.length);
for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++) {
this.contentNodesByNgContentIndex[i] = [];
}
} else {
this.contentNodesByNgContentIndex = null;
}
}
ParentElement.prototype.addContentNode = function(ngContentIndex, nodeExpr) {
this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);
};
return ParentElement;
}();
var ViewBuilderVisitor = function() {
function ViewBuilderVisitor(renderer, viewManager, projectableNodes, rootSelector, view, protoView, targetStatements, factory) {
this.renderer = renderer;
this.viewManager = viewManager;
this.projectableNodes = projectableNodes;
this.rootSelector = rootSelector;
this.view = view;
this.protoView = protoView;
this.targetStatements = targetStatements;
this.factory = factory;
this.renderStmts = [];
this.renderNodes = [];
this.appStmts = [];
this.appElements = [];
this.appDisposables = [];
this.rootNodesOrAppElements = [];
this.elementCount = 0;
}
ViewBuilderVisitor.prototype._addRenderNode = function(renderNode, appEl, ngContentIndex, parent) {
this.renderNodes.push(renderNode);
if (lang_1.isPresent(parent.component)) {
if (lang_1.isPresent(ngContentIndex)) {
parent.addContentNode(ngContentIndex, lang_1.isPresent(appEl) ? appEl : renderNode);
}
} else if (lang_1.isBlank(parent.renderNode)) {
this.rootNodesOrAppElements.push(lang_1.isPresent(appEl) ? appEl : renderNode);
}
};
ViewBuilderVisitor.prototype._getParentRenderNode = function(ngContentIndex, parent) {
return lang_1.isPresent(parent.component) && parent.component.template.encapsulation !== view_2.ViewEncapsulation.Native ? null : parent.renderNode;
};
ViewBuilderVisitor.prototype.visitBoundText = function(ast, parent) {
return this._visitText("", ast.ngContentIndex, parent);
};
ViewBuilderVisitor.prototype.visitText = function(ast, parent) {
return this._visitText(ast.value, ast.ngContentIndex, parent);
};
ViewBuilderVisitor.prototype._visitText = function(value, ngContentIndex, parent) {
var renderNode = this.factory.createText(this.renderer, this._getParentRenderNode(ngContentIndex, parent), value, this.renderStmts);
this._addRenderNode(renderNode, null, ngContentIndex, parent);
return null;
};
ViewBuilderVisitor.prototype.visitNgContent = function(ast, parent) {
var nodesExpression = this.factory.getProjectedNodes(this.projectableNodes, ast.index);
if (lang_1.isPresent(parent.component)) {
if (lang_1.isPresent(ast.ngContentIndex)) {
parent.addContentNode(ast.ngContentIndex, nodesExpression);
}
} else {
if (lang_1.isPresent(parent.renderNode)) {
this.factory.appendProjectedNodes(this.renderer, parent.renderNode, nodesExpression, this.renderStmts);
} else {
this.rootNodesOrAppElements.push(nodesExpression);
}
}
return null;
};
ViewBuilderVisitor.prototype.visitElement = function(ast, parent) {
var _this = this;
var renderNode = this.factory.createElement(this.renderer, this._getParentRenderNode(ast.ngContentIndex, parent), ast.name, this.rootSelector, this.renderStmts);
var component = ast.getComponent();
var elementIndex = this.elementCount++;
var protoEl = this.protoView.protoElements[elementIndex];
protoEl.renderEvents.forEach(function(eventAst) {
var disposable;
if (lang_1.isPresent(eventAst.target)) {
disposable = _this.factory.createGlobalEventListener(_this.renderer, _this.view, protoEl.boundElementIndex, eventAst, _this.renderStmts);
} else {
disposable = _this.factory.createElementEventListener(_this.renderer, _this.view, protoEl.boundElementIndex, renderNode, eventAst, _this.renderStmts);
}
_this.appDisposables.push(disposable);
});
for (var i = 0; i < protoEl.attrNameAndValues.length; i++) {
var attrName = protoEl.attrNameAndValues[i][0];
var attrValue = protoEl.attrNameAndValues[i][1];
this.factory.setElementAttribute(this.renderer, renderNode, attrName, attrValue, this.renderStmts);
}
var appEl = null;
if (lang_1.isPresent(protoEl.appProtoEl)) {
appEl = this.factory.createAppElement(protoEl.appProtoEl, this.view, renderNode, parent.appEl, null, this.appStmts);
this.appElements.push(appEl);
}
this._addRenderNode(renderNode, appEl, ast.ngContentIndex, parent);
var newParent = new ParentElement(renderNode, lang_1.isPresent(appEl) ? appEl : parent.appEl, component);
template_ast_1.templateVisitAll(this, ast.children, newParent);
if (lang_1.isPresent(appEl) && lang_1.isPresent(component)) {
this.factory.createAndSetComponentView(this.renderer, this.viewManager, this.view, appEl, component, newParent.contentNodesByNgContentIndex, this.appStmts);
}
return null;
};
ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function(ast, parent) {
var renderNode = this.factory.createTemplateAnchor(this.renderer, this._getParentRenderNode(ast.ngContentIndex, parent), this.renderStmts);
var elementIndex = this.elementCount++;
var protoEl = this.protoView.protoElements[elementIndex];
var embeddedViewFactory = this.factory.createViewFactory(ast.children, protoEl.embeddedTemplateIndex, this.targetStatements);
var appEl = this.factory.createAppElement(protoEl.appProtoEl, this.view, renderNode, parent.appEl, embeddedViewFactory, this.appStmts);
this._addRenderNode(renderNode, appEl, ast.ngContentIndex, parent);
this.appElements.push(appEl);
return null;
};
ViewBuilderVisitor.prototype.visitVariable = function(ast, ctx) {
return null;
};
ViewBuilderVisitor.prototype.visitAttr = function(ast, ctx) {
return null;
};
ViewBuilderVisitor.prototype.visitDirective = function(ast, ctx) {
return null;
};
ViewBuilderVisitor.prototype.visitEvent = function(ast, ctx) {
return null;
};
ViewBuilderVisitor.prototype.visitDirectiveProperty = function(ast, context) {
return null;
};
ViewBuilderVisitor.prototype.visitElementProperty = function(ast, context) {
return null;
};
return ViewBuilderVisitor;
}();
function codeGenEventHandler(view, boundElementIndex, eventName) {
return util_1.codeGenValueFn([ "event" ], view.expression + ".triggerEventHandlers(" + util_1.escapeValue(eventName) + ", event, " + boundElementIndex + ")");
}
function codeGenViewFactoryName(component, embeddedTemplateIndex) {
return "viewFactory_" + component.type.name + embeddedTemplateIndex;
}
function codeGenViewEncapsulation(value) {
if (lang_1.IS_DART) {
return "" + proto_view_compiler_1.METADATA_MODULE_REF + value;
} else {
return "" + value;
}
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var collection_1 = __webpack_require__(115);
var template_ast_1 = __webpack_require__(310);
var source_module_1 = __webpack_require__(311);
var view_1 = __webpack_require__(190);
var view_type_1 = __webpack_require__(192);
var element_1 = __webpack_require__(191);
var util_1 = __webpack_require__(308);
var di_1 = __webpack_require__(109);
exports.PROTO_VIEW_JIT_IMPORTS = lang_1.CONST_EXPR({
AppProtoView: view_1.AppProtoView,
AppProtoElement: element_1.AppProtoElement,
ViewType: view_type_1.ViewType
});
exports.APP_VIEW_MODULE_REF = source_module_1.moduleRef("package:angular2/src/core/linker/view" + util_1.MODULE_SUFFIX);
exports.VIEW_TYPE_MODULE_REF = source_module_1.moduleRef("package:angular2/src/core/linker/view_type" + util_1.MODULE_SUFFIX);
exports.APP_EL_MODULE_REF = source_module_1.moduleRef("package:angular2/src/core/linker/element" + util_1.MODULE_SUFFIX);
exports.METADATA_MODULE_REF = source_module_1.moduleRef("package:angular2/src/core/metadata/view" + util_1.MODULE_SUFFIX);
var IMPLICIT_TEMPLATE_VAR = "$implicit";
var CLASS_ATTR = "class";
var STYLE_ATTR = "style";
var ProtoViewCompiler = function() {
function ProtoViewCompiler() {}
ProtoViewCompiler.prototype.compileProtoViewRuntime = function(metadataCache, component, template, pipes) {
var protoViewFactory = new RuntimeProtoViewFactory(metadataCache, component, pipes);
var allProtoViews = [];
protoViewFactory.createCompileProtoView(template, [], [], allProtoViews);
return new CompileProtoViews([], allProtoViews);
};
ProtoViewCompiler.prototype.compileProtoViewCodeGen = function(resolvedMetadataCacheExpr, component, template, pipes) {
var protoViewFactory = new CodeGenProtoViewFactory(resolvedMetadataCacheExpr, component, pipes);
var allProtoViews = [];
var allStatements = [];
protoViewFactory.createCompileProtoView(template, [], allStatements, allProtoViews);
return new CompileProtoViews(allStatements.map(function(stmt) {
return stmt.statement;
}), allProtoViews);
};
ProtoViewCompiler = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", []) ], ProtoViewCompiler);
return ProtoViewCompiler;
}();
exports.ProtoViewCompiler = ProtoViewCompiler;
var CompileProtoViews = function() {
function CompileProtoViews(declarations, protoViews) {
this.declarations = declarations;
this.protoViews = protoViews;
}
return CompileProtoViews;
}();
exports.CompileProtoViews = CompileProtoViews;
var CompileProtoView = function() {
function CompileProtoView(embeddedTemplateIndex, protoElements, protoView) {
this.embeddedTemplateIndex = embeddedTemplateIndex;
this.protoElements = protoElements;
this.protoView = protoView;
}
return CompileProtoView;
}();
exports.CompileProtoView = CompileProtoView;
var CompileProtoElement = function() {
function CompileProtoElement(boundElementIndex, attrNameAndValues, variableNameAndValues, renderEvents, directives, embeddedTemplateIndex, appProtoEl) {
this.boundElementIndex = boundElementIndex;
this.attrNameAndValues = attrNameAndValues;
this.variableNameAndValues = variableNameAndValues;
this.renderEvents = renderEvents;
this.directives = directives;
this.embeddedTemplateIndex = embeddedTemplateIndex;
this.appProtoEl = appProtoEl;
}
return CompileProtoElement;
}();
exports.CompileProtoElement = CompileProtoElement;
function visitAndReturnContext(visitor, asts, context) {
template_ast_1.templateVisitAll(visitor, asts, context);
return context;
}
var ProtoViewFactory = function() {
function ProtoViewFactory(component) {
this.component = component;
}
ProtoViewFactory.prototype.createCompileProtoView = function(template, templateVariableBindings, targetStatements, targetProtoViews) {
var embeddedTemplateIndex = targetProtoViews.length;
targetProtoViews.push(null);
var builder = new ProtoViewBuilderVisitor(this, targetStatements, targetProtoViews);
template_ast_1.templateVisitAll(builder, template);
var viewType = getViewType(this.component, embeddedTemplateIndex);
var appProtoView = this.createAppProtoView(embeddedTemplateIndex, viewType, templateVariableBindings, targetStatements);
var cpv = new CompileProtoView(embeddedTemplateIndex, builder.protoElements, appProtoView);
targetProtoViews[embeddedTemplateIndex] = cpv;
return cpv;
};
return ProtoViewFactory;
}();
var CodeGenProtoViewFactory = function(_super) {
__extends(CodeGenProtoViewFactory, _super);
function CodeGenProtoViewFactory(resolvedMetadataCacheExpr, component, pipes) {
_super.call(this, component);
this.resolvedMetadataCacheExpr = resolvedMetadataCacheExpr;
this.pipes = pipes;
this._nextVarId = 0;
}
CodeGenProtoViewFactory.prototype._nextProtoViewVar = function(embeddedTemplateIndex) {
return "appProtoView" + this._nextVarId++ + "_" + this.component.type.name + embeddedTemplateIndex;
};
CodeGenProtoViewFactory.prototype.createAppProtoView = function(embeddedTemplateIndex, viewType, templateVariableBindings, targetStatements) {
var protoViewVarName = this._nextProtoViewVar(embeddedTemplateIndex);
var viewTypeExpr = codeGenViewType(viewType);
var pipesExpr = embeddedTemplateIndex === 0 ? codeGenTypesArray(this.pipes.map(function(pipeMeta) {
return pipeMeta.type;
})) : null;
var statement = "var " + protoViewVarName + " = " + exports.APP_VIEW_MODULE_REF + "AppProtoView.create(" + this.resolvedMetadataCacheExpr.expression + ", " + viewTypeExpr + ", " + pipesExpr + ", " + util_1.codeGenStringMap(templateVariableBindings) + ");";
targetStatements.push(new util_1.Statement(statement));
return new util_1.Expression(protoViewVarName);
};
CodeGenProtoViewFactory.prototype.createAppProtoElement = function(boundElementIndex, attrNameAndValues, variableNameAndValues, directives, targetStatements) {
var varName = "appProtoEl" + this._nextVarId++ + "_" + this.component.type.name;
var value = exports.APP_EL_MODULE_REF + "AppProtoElement.create(\n        " + this.resolvedMetadataCacheExpr.expression + ",\n        " + boundElementIndex + ",\n        " + util_1.codeGenStringMap(attrNameAndValues) + ",\n        " + codeGenDirectivesArray(directives) + ",\n        " + util_1.codeGenStringMap(variableNameAndValues) + "\n      )";
var statement = "var " + varName + " = " + value + ";";
targetStatements.push(new util_1.Statement(statement));
return new util_1.Expression(varName);
};
return CodeGenProtoViewFactory;
}(ProtoViewFactory);
var RuntimeProtoViewFactory = function(_super) {
__extends(RuntimeProtoViewFactory, _super);
function RuntimeProtoViewFactory(metadataCache, component, pipes) {
_super.call(this, component);
this.metadataCache = metadataCache;
this.pipes = pipes;
}
RuntimeProtoViewFactory.prototype.createAppProtoView = function(embeddedTemplateIndex, viewType, templateVariableBindings, targetStatements) {
var pipes = embeddedTemplateIndex === 0 ? this.pipes.map(function(pipeMeta) {
return pipeMeta.type.runtime;
}) : [];
var templateVars = keyValueArrayToStringMap(templateVariableBindings);
return view_1.AppProtoView.create(this.metadataCache, viewType, pipes, templateVars);
};
RuntimeProtoViewFactory.prototype.createAppProtoElement = function(boundElementIndex, attrNameAndValues, variableNameAndValues, directives, targetStatements) {
var attrs = keyValueArrayToStringMap(attrNameAndValues);
return element_1.AppProtoElement.create(this.metadataCache, boundElementIndex, attrs, directives.map(function(dirMeta) {
return dirMeta.type.runtime;
}), keyValueArrayToStringMap(variableNameAndValues));
};
return RuntimeProtoViewFactory;
}(ProtoViewFactory);
var ProtoViewBuilderVisitor = function() {
function ProtoViewBuilderVisitor(factory, allStatements, allProtoViews) {
this.factory = factory;
this.allStatements = allStatements;
this.allProtoViews = allProtoViews;
this.protoElements = [];
this.boundElementCount = 0;
}
ProtoViewBuilderVisitor.prototype._readAttrNameAndValues = function(directives, attrAsts) {
var attrs = visitAndReturnContext(this, attrAsts, {});
directives.forEach(function(directiveMeta) {
collection_1.StringMapWrapper.forEach(directiveMeta.hostAttributes, function(value, name) {
var prevValue = attrs[name];
attrs[name] = lang_1.isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
});
});
return mapToKeyValueArray(attrs);
};
ProtoViewBuilderVisitor.prototype.visitBoundText = function(ast, context) {
return null;
};
ProtoViewBuilderVisitor.prototype.visitText = function(ast, context) {
return null;
};
ProtoViewBuilderVisitor.prototype.visitNgContent = function(ast, context) {
return null;
};
ProtoViewBuilderVisitor.prototype.visitElement = function(ast, context) {
var _this = this;
var boundElementIndex = null;
if (ast.isBound()) {
boundElementIndex = this.boundElementCount++;
}
var component = ast.getComponent();
var variableNameAndValues = [];
if (lang_1.isBlank(component)) {
ast.exportAsVars.forEach(function(varAst) {
variableNameAndValues.push([ varAst.name, null ]);
});
}
var directives = [];
var renderEvents = visitAndReturnContext(this, ast.outputs, new Map());
collection_1.ListWrapper.forEachWithIndex(ast.directives, function(directiveAst, index) {
directiveAst.visit(_this, new DirectiveContext(index, boundElementIndex, renderEvents, variableNameAndValues, directives));
});
var renderEventArray = [];
renderEvents.forEach(function(eventAst, _) {
return renderEventArray.push(eventAst);
});
var attrNameAndValues = this._readAttrNameAndValues(directives, ast.attrs);
this._addProtoElement(ast.isBound(), boundElementIndex, attrNameAndValues, variableNameAndValues, renderEventArray, directives, null);
template_ast_1.templateVisitAll(this, ast.children);
return null;
};
ProtoViewBuilderVisitor.prototype.visitEmbeddedTemplate = function(ast, context) {
var _this = this;
var boundElementIndex = this.boundElementCount++;
var directives = [];
collection_1.ListWrapper.forEachWithIndex(ast.directives, function(directiveAst, index) {
directiveAst.visit(_this, new DirectiveContext(index, boundElementIndex, new Map(), [], directives));
});
var attrNameAndValues = this._readAttrNameAndValues(directives, ast.attrs);
var templateVariableBindings = ast.vars.map(function(varAst) {
return [ varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name ];
});
var nestedProtoView = this.factory.createCompileProtoView(ast.children, templateVariableBindings, this.allStatements, this.allProtoViews);
this._addProtoElement(true, boundElementIndex, attrNameAndValues, [], [], directives, nestedProtoView.embeddedTemplateIndex);
return null;
};
ProtoViewBuilderVisitor.prototype._addProtoElement = function(isBound, boundElementIndex, attrNameAndValues, variableNameAndValues, renderEvents, directives, embeddedTemplateIndex) {
var appProtoEl = null;
if (isBound) {
appProtoEl = this.factory.createAppProtoElement(boundElementIndex, attrNameAndValues, variableNameAndValues, directives, this.allStatements);
}
var compileProtoEl = new CompileProtoElement(boundElementIndex, attrNameAndValues, variableNameAndValues, renderEvents, directives, embeddedTemplateIndex, appProtoEl);
this.protoElements.push(compileProtoEl);
};
ProtoViewBuilderVisitor.prototype.visitVariable = function(ast, ctx) {
return null;
};
ProtoViewBuilderVisitor.prototype.visitAttr = function(ast, attrNameAndValues) {
attrNameAndValues[ast.name] = ast.value;
return null;
};
ProtoViewBuilderVisitor.prototype.visitDirective = function(ast, ctx) {
ctx.targetDirectives.push(ast.directive);
template_ast_1.templateVisitAll(this, ast.hostEvents, ctx.hostEventTargetAndNames);
ast.exportAsVars.forEach(function(varAst) {
ctx.targetVariableNameAndValues.push([ varAst.name, ctx.index ]);
});
return null;
};
ProtoViewBuilderVisitor.prototype.visitEvent = function(ast, eventTargetAndNames) {
eventTargetAndNames.set(ast.fullName, ast);
return null;
};
ProtoViewBuilderVisitor.prototype.visitDirectiveProperty = function(ast, context) {
return null;
};
ProtoViewBuilderVisitor.prototype.visitElementProperty = function(ast, context) {
return null;
};
return ProtoViewBuilderVisitor;
}();
function mapToKeyValueArray(data) {
var entryArray = [];
collection_1.StringMapWrapper.forEach(data, function(value, name) {
entryArray.push([ name, value ]);
});
collection_1.ListWrapper.sort(entryArray, function(entry1, entry2) {
return lang_1.StringWrapper.compare(entry1[0], entry2[0]);
});
var keyValueArray = [];
entryArray.forEach(function(entry) {
keyValueArray.push([ entry[0], entry[1] ]);
});
return keyValueArray;
}
function mergeAttributeValue(attrName, attrValue1, attrValue2) {
if (attrName == CLASS_ATTR || attrName == STYLE_ATTR) {
return attrValue1 + " " + attrValue2;
} else {
return attrValue2;
}
}
var DirectiveContext = function() {
function DirectiveContext(index, boundElementIndex, hostEventTargetAndNames, targetVariableNameAndValues, targetDirectives) {
this.index = index;
this.boundElementIndex = boundElementIndex;
this.hostEventTargetAndNames = hostEventTargetAndNames;
this.targetVariableNameAndValues = targetVariableNameAndValues;
this.targetDirectives = targetDirectives;
}
return DirectiveContext;
}();
function keyValueArrayToStringMap(keyValueArray) {
var stringMap = {};
for (var i = 0; i < keyValueArray.length; i++) {
var entry = keyValueArray[i];
stringMap[entry[0]] = entry[1];
}
return stringMap;
}
function codeGenDirectivesArray(directives) {
var expressions = directives.map(function(directiveType) {
return typeRef(directiveType.type);
});
return "[" + expressions.join(",") + "]";
}
function codeGenTypesArray(types) {
var expressions = types.map(typeRef);
return "[" + expressions.join(",") + "]";
}
function codeGenViewType(value) {
if (lang_1.IS_DART) {
return "" + exports.VIEW_TYPE_MODULE_REF + value;
} else {
return "" + value;
}
}
function typeRef(type) {
return "" + source_module_1.moduleRef(type.moduleUrl) + type.name;
}
function getViewType(component, embeddedTemplateIndex) {
if (embeddedTemplateIndex > 0) {
return view_type_1.ViewType.EMBEDDED;
} else if (component.type.isHost) {
return view_type_1.ViewType.HOST;
} else {
return view_type_1.ViewType.COMPONENT;
}
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var collection_1 = __webpack_require__(115);
var lang_1 = __webpack_require__(105);
var core_1 = __webpack_require__(106);
var lang_2 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var change_detection_1 = __webpack_require__(128);
var html_parser_1 = __webpack_require__(322);
var html_tags_1 = __webpack_require__(326);
var parse_util_1 = __webpack_require__(325);
var ast_1 = __webpack_require__(133);
var template_ast_1 = __webpack_require__(310);
var selector_1 = __webpack_require__(301);
var element_schema_registry_1 = __webpack_require__(327);
var template_preparser_1 = __webpack_require__(328);
var style_url_resolver_1 = __webpack_require__(318);
var html_ast_1 = __webpack_require__(323);
var util_1 = __webpack_require__(308);
var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(var-|#)|(on-)|(bindon-))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/g;
var TEMPLATE_ELEMENT = "template";
var TEMPLATE_ATTR = "template";
var TEMPLATE_ATTR_PREFIX = "*";
var CLASS_ATTR = "class";
var PROPERTY_PARTS_SEPARATOR = ".";
var ATTRIBUTE_PREFIX = "attr";
var CLASS_PREFIX = "class";
var STYLE_PREFIX = "style";
var TEXT_CSS_SELECTOR = selector_1.CssSelector.parse("*")[0];
exports.TEMPLATE_TRANSFORMS = lang_2.CONST_EXPR(new core_1.OpaqueToken("TemplateTransforms"));
var TemplateParseError = function(_super) {
__extends(TemplateParseError, _super);
function TemplateParseError(message, span) {
_super.call(this, span, message);
}
return TemplateParseError;
}(parse_util_1.ParseError);
exports.TemplateParseError = TemplateParseError;
var TemplateParser = function() {
function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, transforms) {
this._exprParser = _exprParser;
this._schemaRegistry = _schemaRegistry;
this._htmlParser = _htmlParser;
this.transforms = transforms;
}
TemplateParser.prototype.parse = function(template, directives, pipes, templateUrl) {
var parseVisitor = new TemplateParseVisitor(directives, pipes, this._exprParser, this._schemaRegistry);
var htmlAstWithErrors = this._htmlParser.parse(template, templateUrl);
var result = html_ast_1.htmlVisitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_COMPONENT);
var errors = htmlAstWithErrors.errors.concat(parseVisitor.errors);
if (errors.length > 0) {
var errorString = errors.join("\n");
throw new exceptions_1.BaseException("Template parse errors:\n" + errorString);
}
if (lang_1.isPresent(this.transforms)) {
this.transforms.forEach(function(transform) {
result = template_ast_1.templateVisitAll(transform, result);
});
}
return result;
};
TemplateParser = __decorate([ core_1.Injectable(), __param(3, core_1.Optional()), __param(3, core_1.Inject(exports.TEMPLATE_TRANSFORMS)), __metadata("design:paramtypes", [ change_detection_1.Parser, element_schema_registry_1.ElementSchemaRegistry, html_parser_1.HtmlParser, Array ]) ], TemplateParser);
return TemplateParser;
}();
exports.TemplateParser = TemplateParser;
var TemplateParseVisitor = function() {
function TemplateParseVisitor(directives, pipes, _exprParser, _schemaRegistry) {
var _this = this;
this._exprParser = _exprParser;
this._schemaRegistry = _schemaRegistry;
this.errors = [];
this.directivesIndex = new Map();
this.ngContentCount = 0;
this.selectorMatcher = new selector_1.SelectorMatcher();
collection_1.ListWrapper.forEachWithIndex(directives, function(directive, index) {
var selector = selector_1.CssSelector.parse(directive.selector);
_this.selectorMatcher.addSelectables(selector, directive);
_this.directivesIndex.set(directive, index);
});
this.pipesByName = new Map();
pipes.forEach(function(pipe) {
return _this.pipesByName.set(pipe.name, pipe);
});
}
TemplateParseVisitor.prototype._reportError = function(message, sourceSpan) {
this.errors.push(new TemplateParseError(message, sourceSpan));
};
TemplateParseVisitor.prototype._parseInterpolation = function(value, sourceSpan) {
var sourceInfo = sourceSpan.start.toString();
try {
var ast = this._exprParser.parseInterpolation(value, sourceInfo);
this._checkPipes(ast, sourceSpan);
return ast;
} catch (e) {
this._reportError("" + e, sourceSpan);
return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
}
};
TemplateParseVisitor.prototype._parseAction = function(value, sourceSpan) {
var sourceInfo = sourceSpan.start.toString();
try {
var ast = this._exprParser.parseAction(value, sourceInfo);
this._checkPipes(ast, sourceSpan);
return ast;
} catch (e) {
this._reportError("" + e, sourceSpan);
return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
}
};
TemplateParseVisitor.prototype._parseBinding = function(value, sourceSpan) {
var sourceInfo = sourceSpan.start.toString();
try {
var ast = this._exprParser.parseBinding(value, sourceInfo);
this._checkPipes(ast, sourceSpan);
return ast;
} catch (e) {
this._reportError("" + e, sourceSpan);
return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
}
};
TemplateParseVisitor.prototype._parseTemplateBindings = function(value, sourceSpan) {
var _this = this;
var sourceInfo = sourceSpan.start.toString();
try {
var bindings = this._exprParser.parseTemplateBindings(value, sourceInfo);
bindings.forEach(function(binding) {
if (lang_1.isPresent(binding.expression)) {
_this._checkPipes(binding.expression, sourceSpan);
}
});
return bindings;
} catch (e) {
this._reportError("" + e, sourceSpan);
return [];
}
};
TemplateParseVisitor.prototype._checkPipes = function(ast, sourceSpan) {
var _this = this;
if (lang_1.isPresent(ast)) {
var collector = new PipeCollector();
ast.visit(collector);
collector.pipes.forEach(function(pipeName) {
if (!_this.pipesByName.has(pipeName)) {
_this._reportError("The pipe '" + pipeName + "' could not be found", sourceSpan);
}
});
}
};
TemplateParseVisitor.prototype.visitText = function(ast, component) {
var ngContentIndex = component.findNgContentIndex(TEXT_CSS_SELECTOR);
var expr = this._parseInterpolation(ast.value, ast.sourceSpan);
if (lang_1.isPresent(expr)) {
return new template_ast_1.BoundTextAst(expr, ngContentIndex, ast.sourceSpan);
} else {
return new template_ast_1.TextAst(ast.value, ngContentIndex, ast.sourceSpan);
}
};
TemplateParseVisitor.prototype.visitAttr = function(ast, contex) {
return new template_ast_1.AttrAst(ast.name, ast.value, ast.sourceSpan);
};
TemplateParseVisitor.prototype.visitElement = function(element, component) {
var _this = this;
var nodeName = element.name;
var preparsedElement = template_preparser_1.preparseElement(element);
if (preparsedElement.type === template_preparser_1.PreparsedElementType.SCRIPT || preparsedElement.type === template_preparser_1.PreparsedElementType.STYLE) {
return null;
}
if (preparsedElement.type === template_preparser_1.PreparsedElementType.STYLESHEET && style_url_resolver_1.isStyleUrlResolvable(preparsedElement.hrefAttr)) {
return null;
}
var matchableAttrs = [];
var elementOrDirectiveProps = [];
var vars = [];
var events = [];
var templateElementOrDirectiveProps = [];
var templateVars = [];
var templateMatchableAttrs = [];
var hasInlineTemplates = false;
var attrs = [];
element.attrs.forEach(function(attr) {
var hasBinding = _this._parseAttr(attr, matchableAttrs, elementOrDirectiveProps, events, vars);
var hasTemplateBinding = _this._parseInlineTemplateBinding(attr, templateMatchableAttrs, templateElementOrDirectiveProps, templateVars);
if (!hasBinding && !hasTemplateBinding) {
attrs.push(_this.visitAttr(attr, null));
matchableAttrs.push([ attr.name, attr.value ]);
}
if (hasTemplateBinding) {
hasInlineTemplates = true;
}
});
var lcElName = html_tags_1.splitNsName(nodeName.toLowerCase())[1];
var isTemplateElement = lcElName == TEMPLATE_ELEMENT;
var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
var directives = this._createDirectiveAsts(element.name, this._parseDirectives(this.selectorMatcher, elementCssSelector), elementOrDirectiveProps, isTemplateElement ? [] : vars, element.sourceSpan);
var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directives);
var children = html_ast_1.htmlVisitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, Component.create(directives));
var elementNgContentIndex = hasInlineTemplates ? null : component.findNgContentIndex(elementCssSelector);
var parsedElement;
if (preparsedElement.type === template_preparser_1.PreparsedElementType.NG_CONTENT) {
if (lang_1.isPresent(element.children) && element.children.length > 0) {
this._reportError("<ng-content> element cannot have content. <ng-content> must be immediately followed by </ng-content>", element.sourceSpan);
}
parsedElement = new template_ast_1.NgContentAst(this.ngContentCount++, elementNgContentIndex, element.sourceSpan);
} else if (isTemplateElement) {
this._assertAllEventsPublishedByDirectives(directives, events);
this._assertNoComponentsNorElementBindingsOnTemplate(directives, elementProps, element.sourceSpan);
parsedElement = new template_ast_1.EmbeddedTemplateAst(attrs, events, vars, directives, children, elementNgContentIndex, element.sourceSpan);
} else {
this._assertOnlyOneComponent(directives, element.sourceSpan);
var elementExportAsVars = vars.filter(function(varAst) {
return varAst.value.length === 0;
});
parsedElement = new template_ast_1.ElementAst(nodeName, attrs, elementProps, events, elementExportAsVars, directives, children, elementNgContentIndex, element.sourceSpan);
}
if (hasInlineTemplates) {
var templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
var templateDirectives = this._createDirectiveAsts(element.name, this._parseDirectives(this.selectorMatcher, templateCssSelector), templateElementOrDirectiveProps, [], element.sourceSpan);
var templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectives);
this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectives, templateElementProps, element.sourceSpan);
parsedElement = new template_ast_1.EmbeddedTemplateAst([], [], templateVars, templateDirectives, [ parsedElement ], component.findNgContentIndex(templateCssSelector), element.sourceSpan);
}
return parsedElement;
};
TemplateParseVisitor.prototype._parseInlineTemplateBinding = function(attr, targetMatchableAttrs, targetProps, targetVars) {
var templateBindingsSource = null;
if (attr.name == TEMPLATE_ATTR) {
templateBindingsSource = attr.value;
} else if (attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {
var key = attr.name.substring(TEMPLATE_ATTR_PREFIX.length);
templateBindingsSource = attr.value.length == 0 ? key : key + " " + attr.value;
}
if (lang_1.isPresent(templateBindingsSource)) {
var bindings = this._parseTemplateBindings(templateBindingsSource, attr.sourceSpan);
for (var i = 0; i < bindings.length; i++) {
var binding = bindings[i];
if (binding.keyIsVar) {
targetVars.push(new template_ast_1.VariableAst(binding.key, binding.name, attr.sourceSpan));
targetMatchableAttrs.push([ binding.key, binding.name ]);
} else if (lang_1.isPresent(binding.expression)) {
this._parsePropertyAst(binding.key, binding.expression, attr.sourceSpan, targetMatchableAttrs, targetProps);
} else {
targetMatchableAttrs.push([ binding.key, "" ]);
this._parseLiteralAttr(binding.key, null, attr.sourceSpan, targetProps);
}
}
return true;
}
return false;
};
TemplateParseVisitor.prototype._parseAttr = function(attr, targetMatchableAttrs, targetProps, targetEvents, targetVars) {
var attrName = this._normalizeAttributeName(attr.name);
var attrValue = attr.value;
var bindParts = lang_1.RegExpWrapper.firstMatch(BIND_NAME_REGEXP, attrName);
var hasBinding = false;
if (lang_1.isPresent(bindParts)) {
hasBinding = true;
if (lang_1.isPresent(bindParts[1])) {
this._parseProperty(bindParts[5], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
} else if (lang_1.isPresent(bindParts[2])) {
var identifier = bindParts[5];
this._parseVariable(identifier, attrValue, attr.sourceSpan, targetVars);
} else if (lang_1.isPresent(bindParts[3])) {
this._parseEvent(bindParts[5], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
} else if (lang_1.isPresent(bindParts[4])) {
this._parseProperty(bindParts[5], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
this._parseAssignmentEvent(bindParts[5], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
} else if (lang_1.isPresent(bindParts[6])) {
this._parseProperty(bindParts[6], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
this._parseAssignmentEvent(bindParts[6], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
} else if (lang_1.isPresent(bindParts[7])) {
this._parseProperty(bindParts[7], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
} else if (lang_1.isPresent(bindParts[8])) {
this._parseEvent(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
}
} else {
hasBinding = this._parsePropertyInterpolation(attrName, attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
}
if (!hasBinding) {
this._parseLiteralAttr(attrName, attrValue, attr.sourceSpan, targetProps);
}
return hasBinding;
};
TemplateParseVisitor.prototype._normalizeAttributeName = function(attrName) {
return attrName.toLowerCase().startsWith("data-") ? attrName.substring(5) : attrName;
};
TemplateParseVisitor.prototype._parseVariable = function(identifier, value, sourceSpan, targetVars) {
if (identifier.indexOf("-") > -1) {
this._reportError('"-" is not allowed in variable names', sourceSpan);
}
targetVars.push(new template_ast_1.VariableAst(identifier, value, sourceSpan));
};
TemplateParseVisitor.prototype._parseProperty = function(name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
this._parsePropertyAst(name, this._parseBinding(expression, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
};
TemplateParseVisitor.prototype._parsePropertyInterpolation = function(name, value, sourceSpan, targetMatchableAttrs, targetProps) {
var expr = this._parseInterpolation(value, sourceSpan);
if (lang_1.isPresent(expr)) {
this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
return true;
}
return false;
};
TemplateParseVisitor.prototype._parsePropertyAst = function(name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
targetMatchableAttrs.push([ name, ast.source ]);
targetProps.push(new BoundElementOrDirectiveProperty(name, ast, false, sourceSpan));
};
TemplateParseVisitor.prototype._parseAssignmentEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
this._parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
};
TemplateParseVisitor.prototype._parseEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
var parts = util_1.splitAtColon(name, [ null, name ]);
var target = parts[0];
var eventName = parts[1];
var ast = this._parseAction(expression, sourceSpan);
targetMatchableAttrs.push([ name, ast.source ]);
targetEvents.push(new template_ast_1.BoundEventAst(eventName, target, ast, sourceSpan));
};
TemplateParseVisitor.prototype._parseLiteralAttr = function(name, value, sourceSpan, targetProps) {
targetProps.push(new BoundElementOrDirectiveProperty(name, this._exprParser.wrapLiteralPrimitive(value, ""), true, sourceSpan));
};
TemplateParseVisitor.prototype._parseDirectives = function(selectorMatcher, elementCssSelector) {
var _this = this;
var directives = [];
selectorMatcher.match(elementCssSelector, function(selector, directive) {
directives.push(directive);
});
collection_1.ListWrapper.sort(directives, function(dir1, dir2) {
var dir1Comp = dir1.isComponent;
var dir2Comp = dir2.isComponent;
if (dir1Comp && !dir2Comp) {
return -1;
} else if (!dir1Comp && dir2Comp) {
return 1;
} else {
return _this.directivesIndex.get(dir1) - _this.directivesIndex.get(dir2);
}
});
return directives;
};
TemplateParseVisitor.prototype._createDirectiveAsts = function(elementName, directives, props, possibleExportAsVars, sourceSpan) {
var _this = this;
var matchedVariables = new Set();
var directiveAsts = directives.map(function(directive) {
var hostProperties = [];
var hostEvents = [];
var directiveProperties = [];
_this._createDirectiveHostPropertyAsts(elementName, directive.hostProperties, sourceSpan, hostProperties);
_this._createDirectiveHostEventAsts(directive.hostListeners, sourceSpan, hostEvents);
_this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties);
var exportAsVars = [];
possibleExportAsVars.forEach(function(varAst) {
if (varAst.value.length === 0 && directive.isComponent || directive.exportAs == varAst.value) {
exportAsVars.push(varAst);
matchedVariables.add(varAst.name);
}
});
return new template_ast_1.DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, exportAsVars, sourceSpan);
});
possibleExportAsVars.forEach(function(varAst) {
if (varAst.value.length > 0 && !collection_1.SetWrapper.has(matchedVariables, varAst.name)) {
_this._reportError('There is no directive with "exportAs" set to "' + varAst.value + '"', varAst.sourceSpan);
}
});
return directiveAsts;
};
TemplateParseVisitor.prototype._createDirectiveHostPropertyAsts = function(elementName, hostProps, sourceSpan, targetPropertyAsts) {
var _this = this;
if (lang_1.isPresent(hostProps)) {
collection_1.StringMapWrapper.forEach(hostProps, function(expression, propName) {
var exprAst = _this._parseBinding(expression, sourceSpan);
targetPropertyAsts.push(_this._createElementPropertyAst(elementName, propName, exprAst, sourceSpan));
});
}
};
TemplateParseVisitor.prototype._createDirectiveHostEventAsts = function(hostListeners, sourceSpan, targetEventAsts) {
var _this = this;
if (lang_1.isPresent(hostListeners)) {
collection_1.StringMapWrapper.forEach(hostListeners, function(expression, propName) {
_this._parseEvent(propName, expression, sourceSpan, [], targetEventAsts);
});
}
};
TemplateParseVisitor.prototype._createDirectivePropertyAsts = function(directiveProperties, boundProps, targetBoundDirectiveProps) {
if (lang_1.isPresent(directiveProperties)) {
var boundPropsByName = new Map();
boundProps.forEach(function(boundProp) {
var prevValue = boundPropsByName.get(boundProp.name);
if (lang_1.isBlank(prevValue) || prevValue.isLiteral) {
boundPropsByName.set(boundProp.name, boundProp);
}
});
collection_1.StringMapWrapper.forEach(directiveProperties, function(elProp, dirProp) {
var boundProp = boundPropsByName.get(elProp);
if (lang_1.isPresent(boundProp)) {
targetBoundDirectiveProps.push(new template_ast_1.BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
}
});
}
};
TemplateParseVisitor.prototype._createElementPropertyAsts = function(elementName, props, directives) {
var _this = this;
var boundElementProps = [];
var boundDirectivePropsIndex = new Map();
directives.forEach(function(directive) {
directive.inputs.forEach(function(prop) {
boundDirectivePropsIndex.set(prop.templateName, prop);
});
});
props.forEach(function(prop) {
if (!prop.isLiteral && lang_1.isBlank(boundDirectivePropsIndex.get(prop.name))) {
boundElementProps.push(_this._createElementPropertyAst(elementName, prop.name, prop.expression, prop.sourceSpan));
}
});
return boundElementProps;
};
TemplateParseVisitor.prototype._createElementPropertyAst = function(elementName, name, ast, sourceSpan) {
var unit = null;
var bindingType;
var boundPropertyName;
var parts = name.split(PROPERTY_PARTS_SEPARATOR);
if (parts.length === 1) {
boundPropertyName = this._schemaRegistry.getMappedPropName(parts[0]);
bindingType = template_ast_1.PropertyBindingType.Property;
if (!this._schemaRegistry.hasProperty(elementName, boundPropertyName)) {
this._reportError("Can't bind to '" + boundPropertyName + "' since it isn't a known native property", sourceSpan);
}
} else {
if (parts[0] == ATTRIBUTE_PREFIX) {
boundPropertyName = parts[1];
var nsSeparatorIdx = boundPropertyName.indexOf(":");
if (nsSeparatorIdx > -1) {
var ns = boundPropertyName.substring(0, nsSeparatorIdx);
var name_1 = boundPropertyName.substring(nsSeparatorIdx + 1);
boundPropertyName = html_tags_1.mergeNsAndName(ns, name_1);
}
bindingType = template_ast_1.PropertyBindingType.Attribute;
} else if (parts[0] == CLASS_PREFIX) {
boundPropertyName = parts[1];
bindingType = template_ast_1.PropertyBindingType.Class;
} else if (parts[0] == STYLE_PREFIX) {
unit = parts.length > 2 ? parts[2] : null;
boundPropertyName = parts[1];
bindingType = template_ast_1.PropertyBindingType.Style;
} else {
this._reportError("Invalid property name '" + name + "'", sourceSpan);
bindingType = null;
}
}
return new template_ast_1.BoundElementPropertyAst(boundPropertyName, bindingType, ast, unit, sourceSpan);
};
TemplateParseVisitor.prototype._findComponentDirectiveNames = function(directives) {
var componentTypeNames = [];
directives.forEach(function(directive) {
var typeName = directive.directive.type.name;
if (directive.directive.isComponent) {
componentTypeNames.push(typeName);
}
});
return componentTypeNames;
};
TemplateParseVisitor.prototype._assertOnlyOneComponent = function(directives, sourceSpan) {
var componentTypeNames = this._findComponentDirectiveNames(directives);
if (componentTypeNames.length > 1) {
this._reportError("More than one component: " + componentTypeNames.join(","), sourceSpan);
}
};
TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function(directives, elementProps, sourceSpan) {
var _this = this;
var componentTypeNames = this._findComponentDirectiveNames(directives);
if (componentTypeNames.length > 0) {
this._reportError("Components on an embedded template: " + componentTypeNames.join(","), sourceSpan);
}
elementProps.forEach(function(prop) {
_this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template", sourceSpan);
});
};
TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function(directives, events) {
var _this = this;
var allDirectiveEvents = new Set();
directives.forEach(function(directive) {
collection_1.StringMapWrapper.forEach(directive.directive.outputs, function(eventName, _) {
allDirectiveEvents.add(eventName);
});
});
events.forEach(function(event) {
if (lang_1.isPresent(event.target) || !collection_1.SetWrapper.has(allDirectiveEvents, event.name)) {
_this._reportError("Event binding " + event.fullName + " not emitted by any directive on an embedded template", event.sourceSpan);
}
});
};
return TemplateParseVisitor;
}();
var NonBindableVisitor = function() {
function NonBindableVisitor() {}
NonBindableVisitor.prototype.visitElement = function(ast, component) {
var preparsedElement = template_preparser_1.preparseElement(ast);
if (preparsedElement.type === template_preparser_1.PreparsedElementType.SCRIPT || preparsedElement.type === template_preparser_1.PreparsedElementType.STYLE || preparsedElement.type === template_preparser_1.PreparsedElementType.STYLESHEET) {
return null;
}
var attrNameAndValues = ast.attrs.map(function(attrAst) {
return [ attrAst.name, attrAst.value ];
});
var selector = createElementCssSelector(ast.name, attrNameAndValues);
var ngContentIndex = component.findNgContentIndex(selector);
var children = html_ast_1.htmlVisitAll(this, ast.children, EMPTY_COMPONENT);
return new template_ast_1.ElementAst(ast.name, html_ast_1.htmlVisitAll(this, ast.attrs), [], [], [], [], children, ngContentIndex, ast.sourceSpan);
};
NonBindableVisitor.prototype.visitAttr = function(ast, context) {
return new template_ast_1.AttrAst(ast.name, ast.value, ast.sourceSpan);
};
NonBindableVisitor.prototype.visitText = function(ast, component) {
var ngContentIndex = component.findNgContentIndex(TEXT_CSS_SELECTOR);
return new template_ast_1.TextAst(ast.value, ngContentIndex, ast.sourceSpan);
};
return NonBindableVisitor;
}();
var BoundElementOrDirectiveProperty = function() {
function BoundElementOrDirectiveProperty(name, expression, isLiteral, sourceSpan) {
this.name = name;
this.expression = expression;
this.isLiteral = isLiteral;
this.sourceSpan = sourceSpan;
}
return BoundElementOrDirectiveProperty;
}();
function splitClasses(classAttrValue) {
return lang_1.StringWrapper.split(classAttrValue.trim(), /\s+/g);
}
exports.splitClasses = splitClasses;
var Component = function() {
function Component(ngContentIndexMatcher, wildcardNgContentIndex) {
this.ngContentIndexMatcher = ngContentIndexMatcher;
this.wildcardNgContentIndex = wildcardNgContentIndex;
}
Component.create = function(directives) {
if (directives.length === 0 || !directives[0].directive.isComponent) {
return EMPTY_COMPONENT;
}
var matcher = new selector_1.SelectorMatcher();
var ngContentSelectors = directives[0].directive.template.ngContentSelectors;
var wildcardNgContentIndex = null;
for (var i = 0; i < ngContentSelectors.length; i++) {
var selector = ngContentSelectors[i];
if (lang_1.StringWrapper.equals(selector, "*")) {
wildcardNgContentIndex = i;
} else {
matcher.addSelectables(selector_1.CssSelector.parse(ngContentSelectors[i]), i);
}
}
return new Component(matcher, wildcardNgContentIndex);
};
Component.prototype.findNgContentIndex = function(selector) {
var ngContentIndices = [];
this.ngContentIndexMatcher.match(selector, function(selector, ngContentIndex) {
ngContentIndices.push(ngContentIndex);
});
collection_1.ListWrapper.sort(ngContentIndices);
if (lang_1.isPresent(this.wildcardNgContentIndex)) {
ngContentIndices.push(this.wildcardNgContentIndex);
}
return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
};
return Component;
}();
function createElementCssSelector(elementName, matchableAttrs) {
var cssSelector = new selector_1.CssSelector();
var elNameNoNs = html_tags_1.splitNsName(elementName)[1];
cssSelector.setElement(elNameNoNs);
for (var i = 0; i < matchableAttrs.length; i++) {
var attrName = matchableAttrs[i][0];
var attrNameNoNs = html_tags_1.splitNsName(attrName)[1];
var attrValue = matchableAttrs[i][1];
cssSelector.addAttribute(attrNameNoNs, attrValue);
if (attrName.toLowerCase() == CLASS_ATTR) {
var classes = splitClasses(attrValue);
classes.forEach(function(className) {
return cssSelector.addClassName(className);
});
}
}
return cssSelector;
}
var EMPTY_COMPONENT = new Component(new selector_1.SelectorMatcher(), null);
var NON_BINDABLE_VISITOR = new NonBindableVisitor();
var PipeCollector = function(_super) {
__extends(PipeCollector, _super);
function PipeCollector() {
_super.apply(this, arguments);
this.pipes = new Set();
}
PipeCollector.prototype.visitPipe = function(ast) {
this.pipes.add(ast.name);
ast.exp.visit(this);
this.visitAll(ast.args);
return null;
};
return PipeCollector;
}(ast_1.RecursiveAstVisitor);
exports.PipeCollector = PipeCollector;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var collection_1 = __webpack_require__(115);
var html_ast_1 = __webpack_require__(323);
var di_1 = __webpack_require__(109);
var html_lexer_1 = __webpack_require__(324);
var parse_util_1 = __webpack_require__(325);
var html_tags_1 = __webpack_require__(326);
var HtmlTreeError = function(_super) {
__extends(HtmlTreeError, _super);
function HtmlTreeError(elementName, span, msg) {
_super.call(this, span, msg);
this.elementName = elementName;
}
HtmlTreeError.create = function(elementName, span, msg) {
return new HtmlTreeError(elementName, span, msg);
};
return HtmlTreeError;
}(parse_util_1.ParseError);
exports.HtmlTreeError = HtmlTreeError;
var HtmlParseTreeResult = function() {
function HtmlParseTreeResult(rootNodes, errors) {
this.rootNodes = rootNodes;
this.errors = errors;
}
return HtmlParseTreeResult;
}();
exports.HtmlParseTreeResult = HtmlParseTreeResult;
var HtmlParser = function() {
function HtmlParser() {}
HtmlParser.prototype.parse = function(sourceContent, sourceUrl) {
var tokensAndErrors = html_lexer_1.tokenizeHtml(sourceContent, sourceUrl);
var treeAndErrors = new TreeBuilder(tokensAndErrors.tokens).build();
return new HtmlParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));
};
HtmlParser = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", []) ], HtmlParser);
return HtmlParser;
}();
exports.HtmlParser = HtmlParser;
var TreeBuilder = function() {
function TreeBuilder(tokens) {
this.tokens = tokens;
this.index = -1;
this.rootNodes = [];
this.errors = [];
this.elementStack = [];
this._advance();
}
TreeBuilder.prototype.build = function() {
while (this.peek.type !== html_lexer_1.HtmlTokenType.EOF) {
if (this.peek.type === html_lexer_1.HtmlTokenType.TAG_OPEN_START) {
this._consumeStartTag(this._advance());
} else if (this.peek.type === html_lexer_1.HtmlTokenType.TAG_CLOSE) {
this._consumeEndTag(this._advance());
} else if (this.peek.type === html_lexer_1.HtmlTokenType.CDATA_START) {
this._closeVoidElement();
this._consumeCdata(this._advance());
} else if (this.peek.type === html_lexer_1.HtmlTokenType.COMMENT_START) {
this._closeVoidElement();
this._consumeComment(this._advance());
} else if (this.peek.type === html_lexer_1.HtmlTokenType.TEXT || this.peek.type === html_lexer_1.HtmlTokenType.RAW_TEXT || this.peek.type === html_lexer_1.HtmlTokenType.ESCAPABLE_RAW_TEXT) {
this._closeVoidElement();
this._consumeText(this._advance());
} else {
this._advance();
}
}
return new HtmlParseTreeResult(this.rootNodes, this.errors);
};
TreeBuilder.prototype._advance = function() {
var prev = this.peek;
if (this.index < this.tokens.length - 1) {
this.index++;
}
this.peek = this.tokens[this.index];
return prev;
};
TreeBuilder.prototype._advanceIf = function(type) {
if (this.peek.type === type) {
return this._advance();
}
return null;
};
TreeBuilder.prototype._consumeCdata = function(startToken) {
this._consumeText(this._advance());
this._advanceIf(html_lexer_1.HtmlTokenType.CDATA_END);
};
TreeBuilder.prototype._consumeComment = function(startToken) {
this._advanceIf(html_lexer_1.HtmlTokenType.RAW_TEXT);
this._advanceIf(html_lexer_1.HtmlTokenType.COMMENT_END);
};
TreeBuilder.prototype._consumeText = function(token) {
var text = token.parts[0];
if (text.length > 0 && text[0] == "\n") {
var parent_1 = this._getParentElement();
if (lang_1.isPresent(parent_1) && parent_1.children.length == 0 && html_tags_1.getHtmlTagDefinition(parent_1.name).ignoreFirstLf) {
text = text.substring(1);
}
}
if (text.length > 0) {
this._addToParent(new html_ast_1.HtmlTextAst(text, token.sourceSpan));
}
};
TreeBuilder.prototype._closeVoidElement = function() {
if (this.elementStack.length > 0) {
var el = collection_1.ListWrapper.last(this.elementStack);
if (html_tags_1.getHtmlTagDefinition(el.name).isVoid) {
this.elementStack.pop();
}
}
};
TreeBuilder.prototype._consumeStartTag = function(startTagToken) {
var prefix = startTagToken.parts[0];
var name = startTagToken.parts[1];
var attrs = [];
while (this.peek.type === html_lexer_1.HtmlTokenType.ATTR_NAME) {
attrs.push(this._consumeAttr(this._advance()));
}
var fullName = getElementFullName(prefix, name, this._getParentElement());
var selfClosing = false;
if (this.peek.type === html_lexer_1.HtmlTokenType.TAG_OPEN_END_VOID) {
this._advance();
selfClosing = true;
if (html_tags_1.getNsPrefix(fullName) == null && !html_tags_1.getHtmlTagDefinition(fullName).isVoid) {
this.errors.push(HtmlTreeError.create(fullName, startTagToken.sourceSpan, 'Only void and foreign elements can be self closed "' + startTagToken.parts[1] + '"'));
}
} else if (this.peek.type === html_lexer_1.HtmlTokenType.TAG_OPEN_END) {
this._advance();
selfClosing = false;
}
var end = this.peek.sourceSpan.start;
var el = new html_ast_1.HtmlElementAst(fullName, attrs, [], new parse_util_1.ParseSourceSpan(startTagToken.sourceSpan.start, end));
this._pushElement(el);
if (selfClosing) {
this._popElement(fullName);
}
};
TreeBuilder.prototype._pushElement = function(el) {
if (this.elementStack.length > 0) {
var parentEl = collection_1.ListWrapper.last(this.elementStack);
if (html_tags_1.getHtmlTagDefinition(parentEl.name).isClosedByChild(el.name)) {
this.elementStack.pop();
}
}
var tagDef = html_tags_1.getHtmlTagDefinition(el.name);
var parentEl = this._getParentElement();
if (tagDef.requireExtraParent(lang_1.isPresent(parentEl) ? parentEl.name : null)) {
var newParent = new html_ast_1.HtmlElementAst(tagDef.parentToAdd, [], [ el ], el.sourceSpan);
this._addToParent(newParent);
this.elementStack.push(newParent);
this.elementStack.push(el);
} else {
this._addToParent(el);
this.elementStack.push(el);
}
};
TreeBuilder.prototype._consumeEndTag = function(endTagToken) {
var fullName = getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
if (html_tags_1.getHtmlTagDefinition(fullName).isVoid) {
this.errors.push(HtmlTreeError.create(fullName, endTagToken.sourceSpan, 'Void elements do not have end tags "' + endTagToken.parts[1] + '"'));
} else if (!this._popElement(fullName)) {
this.errors.push(HtmlTreeError.create(fullName, endTagToken.sourceSpan, 'Unexpected closing tag "' + endTagToken.parts[1] + '"'));
}
};
TreeBuilder.prototype._popElement = function(fullName) {
for (var stackIndex = this.elementStack.length - 1; stackIndex >= 0; stackIndex--) {
var el = this.elementStack[stackIndex];
if (el.name == fullName) {
collection_1.ListWrapper.splice(this.elementStack, stackIndex, this.elementStack.length - stackIndex);
return true;
}
if (!html_tags_1.getHtmlTagDefinition(el.name).closedByParent) {
return false;
}
}
return false;
};
TreeBuilder.prototype._consumeAttr = function(attrName) {
var fullName = html_tags_1.mergeNsAndName(attrName.parts[0], attrName.parts[1]);
var end = attrName.sourceSpan.end;
var value = "";
if (this.peek.type === html_lexer_1.HtmlTokenType.ATTR_VALUE) {
var valueToken = this._advance();
value = valueToken.parts[0];
end = valueToken.sourceSpan.end;
}
return new html_ast_1.HtmlAttrAst(fullName, value, new parse_util_1.ParseSourceSpan(attrName.sourceSpan.start, end));
};
TreeBuilder.prototype._getParentElement = function() {
return this.elementStack.length > 0 ? collection_1.ListWrapper.last(this.elementStack) : null;
};
TreeBuilder.prototype._addToParent = function(node) {
var parent = this._getParentElement();
if (lang_1.isPresent(parent)) {
parent.children.push(node);
} else {
this.rootNodes.push(node);
}
};
return TreeBuilder;
}();
function getElementFullName(prefix, localName, parentElement) {
if (lang_1.isBlank(prefix)) {
prefix = html_tags_1.getHtmlTagDefinition(localName).implicitNamespacePrefix;
if (lang_1.isBlank(prefix) && lang_1.isPresent(parentElement)) {
prefix = html_tags_1.getNsPrefix(parentElement.name);
}
}
return html_tags_1.mergeNsAndName(prefix, localName);
}
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var HtmlTextAst = function() {
function HtmlTextAst(value, sourceSpan) {
this.value = value;
this.sourceSpan = sourceSpan;
}
HtmlTextAst.prototype.visit = function(visitor, context) {
return visitor.visitText(this, context);
};
return HtmlTextAst;
}();
exports.HtmlTextAst = HtmlTextAst;
var HtmlAttrAst = function() {
function HtmlAttrAst(name, value, sourceSpan) {
this.name = name;
this.value = value;
this.sourceSpan = sourceSpan;
}
HtmlAttrAst.prototype.visit = function(visitor, context) {
return visitor.visitAttr(this, context);
};
return HtmlAttrAst;
}();
exports.HtmlAttrAst = HtmlAttrAst;
var HtmlElementAst = function() {
function HtmlElementAst(name, attrs, children, sourceSpan) {
this.name = name;
this.attrs = attrs;
this.children = children;
this.sourceSpan = sourceSpan;
}
HtmlElementAst.prototype.visit = function(visitor, context) {
return visitor.visitElement(this, context);
};
return HtmlElementAst;
}();
exports.HtmlElementAst = HtmlElementAst;
function htmlVisitAll(visitor, asts, context) {
if (context === void 0) {
context = null;
}
var result = [];
asts.forEach(function(ast) {
var astResult = ast.visit(visitor, context);
if (lang_1.isPresent(astResult)) {
result.push(astResult);
}
});
return result;
}
exports.htmlVisitAll = htmlVisitAll;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(105);
var collection_1 = __webpack_require__(115);
var parse_util_1 = __webpack_require__(325);
var html_tags_1 = __webpack_require__(326);
(function(HtmlTokenType) {
HtmlTokenType[HtmlTokenType["TAG_OPEN_START"] = 0] = "TAG_OPEN_START";
HtmlTokenType[HtmlTokenType["TAG_OPEN_END"] = 1] = "TAG_OPEN_END";
HtmlTokenType[HtmlTokenType["TAG_OPEN_END_VOID"] = 2] = "TAG_OPEN_END_VOID";
HtmlTokenType[HtmlTokenType["TAG_CLOSE"] = 3] = "TAG_CLOSE";
HtmlTokenType[HtmlTokenType["TEXT"] = 4] = "TEXT";
HtmlTokenType[HtmlTokenType["ESCAPABLE_RAW_TEXT"] = 5] = "ESCAPABLE_RAW_TEXT";
HtmlTokenType[HtmlTokenType["RAW_TEXT"] = 6] = "RAW_TEXT";
HtmlTokenType[HtmlTokenType["COMMENT_START"] = 7] = "COMMENT_START";
HtmlTokenType[HtmlTokenType["COMMENT_END"] = 8] = "COMMENT_END";
HtmlTokenType[HtmlTokenType["CDATA_START"] = 9] = "CDATA_START";
HtmlTokenType[HtmlTokenType["CDATA_END"] = 10] = "CDATA_END";
HtmlTokenType[HtmlTokenType["ATTR_NAME"] = 11] = "ATTR_NAME";
HtmlTokenType[HtmlTokenType["ATTR_VALUE"] = 12] = "ATTR_VALUE";
HtmlTokenType[HtmlTokenType["DOC_TYPE"] = 13] = "DOC_TYPE";
HtmlTokenType[HtmlTokenType["EOF"] = 14] = "EOF";
})(exports.HtmlTokenType || (exports.HtmlTokenType = {}));
var HtmlTokenType = exports.HtmlTokenType;
var HtmlToken = function() {
function HtmlToken(type, parts, sourceSpan) {
this.type = type;
this.parts = parts;
this.sourceSpan = sourceSpan;
}
return HtmlToken;
}();
exports.HtmlToken = HtmlToken;
var HtmlTokenError = function(_super) {
__extends(HtmlTokenError, _super);
function HtmlTokenError(errorMsg, tokenType, span) {
_super.call(this, span, errorMsg);
this.tokenType = tokenType;
}
return HtmlTokenError;
}(parse_util_1.ParseError);
exports.HtmlTokenError = HtmlTokenError;
var HtmlTokenizeResult = function() {
function HtmlTokenizeResult(tokens, errors) {
this.tokens = tokens;
this.errors = errors;
}
return HtmlTokenizeResult;
}();
exports.HtmlTokenizeResult = HtmlTokenizeResult;
function tokenizeHtml(sourceContent, sourceUrl) {
return new _HtmlTokenizer(new parse_util_1.ParseSourceFile(sourceContent, sourceUrl)).tokenize();
}
exports.tokenizeHtml = tokenizeHtml;
var $EOF = 0;
var $TAB = 9;
var $LF = 10;
var $FF = 12;
var $CR = 13;
var $SPACE = 32;
var $BANG = 33;
var $DQ = 34;
var $HASH = 35;
var $$ = 36;
var $AMPERSAND = 38;
var $SQ = 39;
var $MINUS = 45;
var $SLASH = 47;
var $0 = 48;
var $SEMICOLON = 59;
var $9 = 57;
var $COLON = 58;
var $LT = 60;
var $EQ = 61;
var $GT = 62;
var $QUESTION = 63;
var $LBRACKET = 91;
var $RBRACKET = 93;
var $A = 65;
var $F = 70;
var $X = 88;
var $Z = 90;
var $a = 97;
var $f = 102;
var $z = 122;
var $x = 120;
var $NBSP = 160;
var CR_OR_CRLF_REGEXP = /\r\n?/g;
function unexpectedCharacterErrorMsg(charCode) {
var char = charCode === $EOF ? "EOF" : lang_1.StringWrapper.fromCharCode(charCode);
return 'Unexpected character "' + char + '"';
}
function unknownEntityErrorMsg(entitySrc) {
return 'Unknown entity "' + entitySrc + '" - use the "&#<decimal>;" or  "&#x<hex>;" syntax';
}
var ControlFlowError = function() {
function ControlFlowError(error) {
this.error = error;
}
return ControlFlowError;
}();
var _HtmlTokenizer = function() {
function _HtmlTokenizer(file) {
this.file = file;
this.peek = -1;
this.index = -1;
this.line = 0;
this.column = -1;
this.tokens = [];
this.errors = [];
this.input = file.content;
this.length = file.content.length;
this._advance();
}
_HtmlTokenizer.prototype._processCarriageReturns = function(content) {
return lang_1.StringWrapper.replaceAll(content, CR_OR_CRLF_REGEXP, "\n");
};
_HtmlTokenizer.prototype.tokenize = function() {
while (this.peek !== $EOF) {
var start = this._getLocation();
try {
if (this._attemptCharCode($LT)) {
if (this._attemptCharCode($BANG)) {
if (this._attemptCharCode($LBRACKET)) {
this._consumeCdata(start);
} else if (this._attemptCharCode($MINUS)) {
this._consumeComment(start);
} else {
this._consumeDocType(start);
}
} else if (this._attemptCharCode($SLASH)) {
this._consumeTagClose(start);
} else {
this._consumeTagOpen(start);
}
} else {
this._consumeText();
}
} catch (e) {
if (e instanceof ControlFlowError) {
this.errors.push(e.error);
} else {
throw e;
}
}
}
this._beginToken(HtmlTokenType.EOF);
this._endToken([]);
return new HtmlTokenizeResult(mergeTextTokens(this.tokens), this.errors);
};
_HtmlTokenizer.prototype._getLocation = function() {
return new parse_util_1.ParseLocation(this.file, this.index, this.line, this.column);
};
_HtmlTokenizer.prototype._getSpan = function(start, end) {
if (lang_1.isBlank(start)) {
start = this._getLocation();
}
if (lang_1.isBlank(end)) {
end = this._getLocation();
}
return new parse_util_1.ParseSourceSpan(start, end);
};
_HtmlTokenizer.prototype._beginToken = function(type, start) {
if (start === void 0) {
start = null;
}
if (lang_1.isBlank(start)) {
start = this._getLocation();
}
this.currentTokenStart = start;
this.currentTokenType = type;
};
_HtmlTokenizer.prototype._endToken = function(parts, end) {
if (end === void 0) {
end = null;
}
if (lang_1.isBlank(end)) {
end = this._getLocation();
}
var token = new HtmlToken(this.currentTokenType, parts, new parse_util_1.ParseSourceSpan(this.currentTokenStart, end));
this.tokens.push(token);
this.currentTokenStart = null;
this.currentTokenType = null;
return token;
};
_HtmlTokenizer.prototype._createError = function(msg, span) {
var error = new HtmlTokenError(msg, this.currentTokenType, span);
this.currentTokenStart = null;
this.currentTokenType = null;
return new ControlFlowError(error);
};
_HtmlTokenizer.prototype._advance = function() {
if (this.index >= this.length) {
throw this._createError(unexpectedCharacterErrorMsg($EOF), this._getSpan());
}
if (this.peek === $LF) {
this.line++;
this.column = 0;
} else if (this.peek !== $LF && this.peek !== $CR) {
this.column++;
}
this.index++;
this.peek = this.index >= this.length ? $EOF : lang_1.StringWrapper.charCodeAt(this.input, this.index);
};
_HtmlTokenizer.prototype._attemptCharCode = function(charCode) {
if (this.peek === charCode) {
this._advance();
return true;
}
return false;
};
_HtmlTokenizer.prototype._attemptCharCodeCaseInsensitive = function(charCode) {
if (compareCharCodeCaseInsensitive(this.peek, charCode)) {
this._advance();
return true;
}
return false;
};
_HtmlTokenizer.prototype._requireCharCode = function(charCode) {
var location = this._getLocation();
if (!this._attemptCharCode(charCode)) {
throw this._createError(unexpectedCharacterErrorMsg(this.peek), this._getSpan(location, location));
}
};
_HtmlTokenizer.prototype._attemptStr = function(chars) {
for (var i = 0; i < chars.length; i++) {
if (!this._attemptCharCode(lang_1.StringWrapper.charCodeAt(chars, i))) {
return false;
}
}
return true;
};
_HtmlTokenizer.prototype._attemptStrCaseInsensitive = function(chars) {
for (var i = 0; i < chars.length; i++) {
if (!this._attemptCharCodeCaseInsensitive(lang_1.StringWrapper.charCodeAt(chars, i))) {
return false;
}
}
return true;
};
_HtmlTokenizer.prototype._requireStr = function(chars) {
var location = this._getLocation();
if (!this._attemptStr(chars)) {
throw this._createError(unexpectedCharacterErrorMsg(this.peek), this._getSpan(location));
}
};
_HtmlTokenizer.prototype._attemptCharCodeUntilFn = function(predicate) {
while (!predicate(this.peek)) {
this._advance();
}
};
_HtmlTokenizer.prototype._requireCharCodeUntilFn = function(predicate, len) {
var start = this._getLocation();
this._attemptCharCodeUntilFn(predicate);
if (this.index - start.offset < len) {
throw this._createError(unexpectedCharacterErrorMsg(this.peek), this._getSpan(start, start));
}
};
_HtmlTokenizer.prototype._attemptUntilChar = function(char) {
while (this.peek !== char) {
this._advance();
}
};
_HtmlTokenizer.prototype._readChar = function(decodeEntities) {
if (decodeEntities && this.peek === $AMPERSAND) {
return this._decodeEntity();
} else {
var index = this.index;
this._advance();
return this.input[index];
}
};
_HtmlTokenizer.prototype._decodeEntity = function() {
var start = this._getLocation();
this._advance();
if (this._attemptCharCode($HASH)) {
var isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
var numberStart = this._getLocation().offset;
this._attemptCharCodeUntilFn(isDigitEntityEnd);
if (this.peek != $SEMICOLON) {
throw this._createError(unexpectedCharacterErrorMsg(this.peek), this._getSpan());
}
this._advance();
var strNum = this.input.substring(numberStart, this.index - 1);
try {
var charCode = lang_1.NumberWrapper.parseInt(strNum, isHex ? 16 : 10);
return lang_1.StringWrapper.fromCharCode(charCode);
} catch (e) {
var entity = this.input.substring(start.offset + 1, this.index - 1);
throw this._createError(unknownEntityErrorMsg(entity), this._getSpan(start));
}
} else {
var startPosition = this._savePosition();
this._attemptCharCodeUntilFn(isNamedEntityEnd);
if (this.peek != $SEMICOLON) {
this._restorePosition(startPosition);
return "&";
}
this._advance();
var name_1 = this.input.substring(start.offset + 1, this.index - 1);
var char = html_tags_1.NAMED_ENTITIES[name_1];
if (lang_1.isBlank(char)) {
throw this._createError(unknownEntityErrorMsg(name_1), this._getSpan(start));
}
return char;
}
};
_HtmlTokenizer.prototype._consumeRawText = function(decodeEntities, firstCharOfEnd, attemptEndRest) {
var tagCloseStart;
var textStart = this._getLocation();
this._beginToken(decodeEntities ? HtmlTokenType.ESCAPABLE_RAW_TEXT : HtmlTokenType.RAW_TEXT, textStart);
var parts = [];
while (true) {
tagCloseStart = this._getLocation();
if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
break;
}
if (this.index > tagCloseStart.offset) {
parts.push(this.input.substring(tagCloseStart.offset, this.index));
}
while (this.peek !== firstCharOfEnd) {
parts.push(this._readChar(decodeEntities));
}
}
return this._endToken([ this._processCarriageReturns(parts.join("")) ], tagCloseStart);
};
_HtmlTokenizer.prototype._consumeComment = function(start) {
var _this = this;
this._beginToken(HtmlTokenType.COMMENT_START, start);
this._requireCharCode($MINUS);
this._endToken([]);
var textToken = this._consumeRawText(false, $MINUS, function() {
return _this._attemptStr("->");
});
this._beginToken(HtmlTokenType.COMMENT_END, textToken.sourceSpan.end);
this._endToken([]);
};
_HtmlTokenizer.prototype._consumeCdata = function(start) {
var _this = this;
this._beginToken(HtmlTokenType.CDATA_START, start);
this._requireStr("CDATA[");
this._endToken([]);
var textToken = this._consumeRawText(false, $RBRACKET, function() {
return _this._attemptStr("]>");
});
this._beginToken(HtmlTokenType.CDATA_END, textToken.sourceSpan.end);
this._endToken([]);
};
_HtmlTokenizer.prototype._consumeDocType = function(start) {
this._beginToken(HtmlTokenType.DOC_TYPE, start);
this._attemptUntilChar($GT);
this._advance();
this._endToken([ this.input.substring(start.offset + 2, this.index - 1) ]);
};
_HtmlTokenizer.prototype._consumePrefixAndName = function() {
var nameOrPrefixStart = this.index;
var prefix = null;
while (this.peek !== $COLON && !isPrefixEnd(this.peek)) {
this._advance();
}
var nameStart;
if (this.peek === $COLON) {
this._advance();
prefix = this.input.substring(nameOrPrefixStart, this.index - 1);
nameStart = this.index;
} else {
nameStart = nameOrPrefixStart;
}
this._requireCharCodeUntilFn(isNameEnd, this.index === nameStart ? 1 : 0);
var name = this.input.substring(nameStart, this.index);
return [ prefix, name ];
};
_HtmlTokenizer.prototype._consumeTagOpen = function(start) {
var savedPos = this._savePosition();
var lowercaseTagName;
try {
if (!isAsciiLetter(this.peek)) {
throw this._createError(unexpectedCharacterErrorMsg(this.peek), this._getSpan());
}
var nameStart = this.index;
this._consumeTagOpenStart(start);
lowercaseTagName = this.input.substring(nameStart, this.index).toLowerCase();
this._attemptCharCodeUntilFn(isNotWhitespace);
while (this.peek !== $SLASH && this.peek !== $GT) {
this._consumeAttributeName();
this._attemptCharCodeUntilFn(isNotWhitespace);
if (this._attemptCharCode($EQ)) {
this._attemptCharCodeUntilFn(isNotWhitespace);
this._consumeAttributeValue();
}
this._attemptCharCodeUntilFn(isNotWhitespace);
}
this._consumeTagOpenEnd();
} catch (e) {
if (e instanceof ControlFlowError) {
this._restorePosition(savedPos);
this._beginToken(HtmlTokenType.TEXT, start);
this._endToken([ "<" ]);
return;
}
throw e;
}
var contentTokenType = html_tags_1.getHtmlTagDefinition(lowercaseTagName).contentType;
if (contentTokenType === html_tags_1.HtmlTagContentType.RAW_TEXT) {
this._consumeRawTextWithTagClose(lowercaseTagName, false);
} else if (contentTokenType === html_tags_1.HtmlTagContentType.ESCAPABLE_RAW_TEXT) {
this._consumeRawTextWithTagClose(lowercaseTagName, true);
}
};
_HtmlTokenizer.prototype._consumeRawTextWithTagClose = function(lowercaseTagName, decodeEntities) {
var _this = this;
var textToken = this._consumeRawText(decodeEntities, $LT, function() {
if (!_this._attemptCharCode($SLASH)) return false;
_this._attemptCharCodeUntilFn(isNotWhitespace);
if (!_this._attemptStrCaseInsensitive(lowercaseTagName)) return false;
_this._attemptCharCodeUntilFn(isNotWhitespace);
if (!_this._attemptCharCode($GT)) return false;
return true;
});
this._beginToken(HtmlTokenType.TAG_CLOSE, textToken.sourceSpan.end);
this._endToken([ null, lowercaseTagName ]);
};
_HtmlTokenizer.prototype._consumeTagOpenStart = function(start) {
this._beginToken(HtmlTokenType.TAG_OPEN_START, start);
var parts = this._consumePrefixAndName();
this._endToken(parts);
};
_HtmlTokenizer.prototype._consumeAttributeName = function() {
this._beginToken(HtmlTokenType.ATTR_NAME);
var prefixAndName = this._consumePrefixAndName();
this._endToken(prefixAndName);
};
_HtmlTokenizer.prototype._consumeAttributeValue = function() {
this._beginToken(HtmlTokenType.ATTR_VALUE);
var value;
if (this.peek === $SQ || this.peek === $DQ) {
var quoteChar = this.peek;
this._advance();
var parts = [];
while (this.peek !== quoteChar) {
parts.push(this._readChar(true));
}
value = parts.join("");
this._advance();
} else {
var valueStart = this.index;
this._requireCharCodeUntilFn(isNameEnd, 1);
value = this.input.substring(valueStart, this.index);
}
this._endToken([ this._processCarriageReturns(value) ]);
};
_HtmlTokenizer.prototype._consumeTagOpenEnd = function() {
var tokenType = this._attemptCharCode($SLASH) ? HtmlTokenType.TAG_OPEN_END_VOID : HtmlTokenType.TAG_OPEN_END;
this._beginToken(tokenType);
this._requireCharCode($GT);
this._endToken([]);
};
_HtmlTokenizer.prototype._consumeTagClose = function(start) {
this._beginToken(HtmlTokenType.TAG_CLOSE, start);
this._attemptCharCodeUntilFn(isNotWhitespace);
var prefixAndName;
prefixAndName = this._consumePrefixAndName();
this._attemptCharCodeUntilFn(isNotWhitespace);
this._requireCharCode($GT);
this._endToken(prefixAndName);
};
_HtmlTokenizer.prototype._consumeText = function() {
var start = this._getLocation();
this._beginToken(HtmlTokenType.TEXT, start);
var parts = [ this._readChar(true) ];
while (!isTextEnd(this.peek)) {
parts.push(this._readChar(true));
}
this._endToken([ this._processCarriageReturns(parts.join("")) ]);
};
_HtmlTokenizer.prototype._savePosition = function() {
return [ this.peek, this.index, this.column, this.line, this.tokens.length ];
};
_HtmlTokenizer.prototype._restorePosition = function(position) {
this.peek = position[0];
this.index = position[1];
this.column = position[2];
this.line = position[3];
var nbTokens = position[4];
if (nbTokens < this.tokens.length) {
this.tokens = collection_1.ListWrapper.slice(this.tokens, 0, nbTokens);
}
};
return _HtmlTokenizer;
}();
function isNotWhitespace(code) {
return !isWhitespace(code) || code === $EOF;
}
function isWhitespace(code) {
return code >= $TAB && code <= $SPACE || code === $NBSP;
}
function isNameEnd(code) {
return isWhitespace(code) || code === $GT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ;
}
function isPrefixEnd(code) {
return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);
}
function isDigitEntityEnd(code) {
return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
}
function isNamedEntityEnd(code) {
return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
}
function isTextEnd(code) {
return code === $LT || code === $EOF;
}
function isAsciiLetter(code) {
return code >= $a && code <= $z || code >= $A && code <= $Z;
}
function isAsciiHexDigit(code) {
return code >= $a && code <= $f || code >= $A && code <= $F || code >= $0 && code <= $9;
}
function compareCharCodeCaseInsensitive(code1, code2) {
return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
}
function toUpperCaseCharCode(code) {
return code >= $a && code <= $z ? code - $a + $A : code;
}
function mergeTextTokens(srcTokens) {
var dstTokens = [];
var lastDstToken;
for (var i = 0; i < srcTokens.length; i++) {
var token = srcTokens[i];
if (lang_1.isPresent(lastDstToken) && lastDstToken.type == HtmlTokenType.TEXT && token.type == HtmlTokenType.TEXT) {
lastDstToken.parts[0] += token.parts[0];
lastDstToken.sourceSpan.end = token.sourceSpan.end;
} else {
lastDstToken = token;
dstTokens.push(lastDstToken);
}
}
return dstTokens;
}
}, function(module, exports) {
"use strict";
var ParseLocation = function() {
function ParseLocation(file, offset, line, col) {
this.file = file;
this.offset = offset;
this.line = line;
this.col = col;
}
ParseLocation.prototype.toString = function() {
return this.file.url + "@" + this.line + ":" + this.col;
};
return ParseLocation;
}();
exports.ParseLocation = ParseLocation;
var ParseSourceFile = function() {
function ParseSourceFile(content, url) {
this.content = content;
this.url = url;
}
return ParseSourceFile;
}();
exports.ParseSourceFile = ParseSourceFile;
var ParseSourceSpan = function() {
function ParseSourceSpan(start, end) {
this.start = start;
this.end = end;
}
ParseSourceSpan.prototype.toString = function() {
return this.start.file.content.substring(this.start.offset, this.end.offset);
};
return ParseSourceSpan;
}();
exports.ParseSourceSpan = ParseSourceSpan;
var ParseError = function() {
function ParseError(span, msg) {
this.span = span;
this.msg = msg;
}
ParseError.prototype.toString = function() {
var source = this.span.start.file.content;
var ctxStart = this.span.start.offset;
if (ctxStart > source.length - 1) {
ctxStart = source.length - 1;
}
var ctxEnd = ctxStart;
var ctxLen = 0;
var ctxLines = 0;
while (ctxLen < 100 && ctxStart > 0) {
ctxStart--;
ctxLen++;
if (source[ctxStart] == "\n") {
if (++ctxLines == 3) {
break;
}
}
}
ctxLen = 0;
ctxLines = 0;
while (ctxLen < 100 && ctxEnd < source.length - 1) {
ctxEnd++;
ctxLen++;
if (source[ctxEnd] == "\n") {
if (++ctxLines == 3) {
break;
}
}
}
var context = source.substring(ctxStart, this.span.start.offset) + "[ERROR ->]" + source.substring(this.span.start.offset, ctxEnd + 1);
return this.msg + ' ("' + context + '"): ' + this.span.start;
};
return ParseError;
}();
exports.ParseError = ParseError;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
exports.NAMED_ENTITIES = lang_1.CONST_EXPR({
Aacute: "Á",
aacute: "á",
Acirc: "Â",
acirc: "â",
acute: "´",
AElig: "Æ",
aelig: "æ",
Agrave: "À",
agrave: "à",
alefsym: "ℵ",
Alpha: "Α",
alpha: "α",
amp: "&",
and: "∧",
ang: "∠",
apos: "'",
Aring: "Å",
aring: "å",
asymp: "≈",
Atilde: "Ã",
atilde: "ã",
Auml: "Ä",
auml: "ä",
bdquo: "„",
Beta: "Β",
beta: "β",
brvbar: "¦",
bull: "•",
cap: "∩",
Ccedil: "Ç",
ccedil: "ç",
cedil: "¸",
cent: "¢",
Chi: "Χ",
chi: "χ",
circ: "ˆ",
clubs: "♣",
cong: "≅",
copy: "©",
crarr: "↵",
cup: "∪",
curren: "¤",
dagger: "†",
Dagger: "‡",
darr: "↓",
dArr: "⇓",
deg: "°",
Delta: "Δ",
delta: "δ",
diams: "♦",
divide: "÷",
Eacute: "É",
eacute: "é",
Ecirc: "Ê",
ecirc: "ê",
Egrave: "È",
egrave: "è",
empty: "∅",
emsp: " ",
ensp: " ",
Epsilon: "Ε",
epsilon: "ε",
equiv: "≡",
Eta: "Η",
eta: "η",
ETH: "Ð",
eth: "ð",
Euml: "Ë",
euml: "ë",
euro: "€",
exist: "∃",
fnof: "ƒ",
forall: "∀",
frac12: "½",
frac14: "¼",
frac34: "¾",
frasl: "⁄",
Gamma: "Γ",
gamma: "γ",
ge: "≥",
gt: ">",
harr: "↔",
hArr: "⇔",
hearts: "♥",
hellip: "…",
Iacute: "Í",
iacute: "í",
Icirc: "Î",
icirc: "î",
iexcl: "¡",
Igrave: "Ì",
igrave: "ì",
image: "ℑ",
infin: "∞",
"int": "∫",
Iota: "Ι",
iota: "ι",
iquest: "¿",
isin: "∈",
Iuml: "Ï",
iuml: "ï",
Kappa: "Κ",
kappa: "κ",
Lambda: "Λ",
lambda: "λ",
lang: "⟨",
laquo: "«",
larr: "←",
lArr: "⇐",
lceil: "⌈",
ldquo: "“",
le: "≤",
lfloor: "⌊",
lowast: "∗",
loz: "◊",
lrm: "‎",
lsaquo: "‹",
lsquo: "‘",
lt: "<",
macr: "¯",
mdash: "—",
micro: "µ",
middot: "·",
minus: "−",
Mu: "Μ",
mu: "μ",
nabla: "∇",
nbsp: " ",
ndash: "–",
ne: "≠",
ni: "∋",
not: "¬",
notin: "∉",
nsub: "⊄",
Ntilde: "Ñ",
ntilde: "ñ",
Nu: "Ν",
nu: "ν",
Oacute: "Ó",
oacute: "ó",
Ocirc: "Ô",
ocirc: "ô",
OElig: "Œ",
oelig: "œ",
Ograve: "Ò",
ograve: "ò",
oline: "‾",
Omega: "Ω",
omega: "ω",
Omicron: "Ο",
omicron: "ο",
oplus: "⊕",
or: "∨",
ordf: "ª",
ordm: "º",
Oslash: "Ø",
oslash: "ø",
Otilde: "Õ",
otilde: "õ",
otimes: "⊗",
Ouml: "Ö",
ouml: "ö",
para: "¶",
permil: "‰",
perp: "⊥",
Phi: "Φ",
phi: "φ",
Pi: "Π",
pi: "π",
piv: "ϖ",
plusmn: "±",
pound: "£",
prime: "′",
Prime: "″",
prod: "∏",
prop: "∝",
Psi: "Ψ",
psi: "ψ",
quot: '"',
radic: "√",
rang: "⟩",
raquo: "»",
rarr: "→",
rArr: "⇒",
rceil: "⌉",
rdquo: "”",
real: "ℜ",
reg: "®",
rfloor: "⌋",
Rho: "Ρ",
rho: "ρ",
rlm: "‏",
rsaquo: "›",
rsquo: "’",
sbquo: "‚",
Scaron: "Š",
scaron: "š",
sdot: "⋅",
sect: "§",
shy: "­",
Sigma: "Σ",
sigma: "σ",
sigmaf: "ς",
sim: "∼",
spades: "♠",
sub: "⊂",
sube: "⊆",
sum: "∑",
sup: "⊃",
sup1: "¹",
sup2: "²",
sup3: "³",
supe: "⊇",
szlig: "ß",
Tau: "Τ",
tau: "τ",
there4: "∴",
Theta: "Θ",
theta: "θ",
thetasym: "ϑ",
thinsp: " ",
THORN: "Þ",
thorn: "þ",
tilde: "˜",
times: "×",
trade: "™",
Uacute: "Ú",
uacute: "ú",
uarr: "↑",
uArr: "⇑",
Ucirc: "Û",
ucirc: "û",
Ugrave: "Ù",
ugrave: "ù",
uml: "¨",
upsih: "ϒ",
Upsilon: "Υ",
upsilon: "υ",
Uuml: "Ü",
uuml: "ü",
weierp: "℘",
Xi: "Ξ",
xi: "ξ",
Yacute: "Ý",
yacute: "ý",
yen: "¥",
yuml: "ÿ",
Yuml: "Ÿ",
Zeta: "Ζ",
zeta: "ζ",
zwj: "‍",
zwnj: "‌"
});
(function(HtmlTagContentType) {
HtmlTagContentType[HtmlTagContentType["RAW_TEXT"] = 0] = "RAW_TEXT";
HtmlTagContentType[HtmlTagContentType["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
HtmlTagContentType[HtmlTagContentType["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
})(exports.HtmlTagContentType || (exports.HtmlTagContentType = {}));
var HtmlTagContentType = exports.HtmlTagContentType;
var HtmlTagDefinition = function() {
function HtmlTagDefinition(_a) {
var _this = this;
var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, contentType = _b.contentType, closedByParent = _b.closedByParent, isVoid = _b.isVoid, ignoreFirstLf = _b.ignoreFirstLf;
this.closedByChildren = {};
this.closedByParent = false;
if (lang_1.isPresent(closedByChildren) && closedByChildren.length > 0) {
closedByChildren.forEach(function(tagName) {
return _this.closedByChildren[tagName] = true;
});
}
this.isVoid = lang_1.normalizeBool(isVoid);
this.closedByParent = lang_1.normalizeBool(closedByParent) || this.isVoid;
if (lang_1.isPresent(requiredParents) && requiredParents.length > 0) {
this.requiredParents = {};
this.parentToAdd = requiredParents[0];
requiredParents.forEach(function(tagName) {
return _this.requiredParents[tagName] = true;
});
}
this.implicitNamespacePrefix = implicitNamespacePrefix;
this.contentType = lang_1.isPresent(contentType) ? contentType : HtmlTagContentType.PARSABLE_DATA;
this.ignoreFirstLf = lang_1.normalizeBool(ignoreFirstLf);
}
HtmlTagDefinition.prototype.requireExtraParent = function(currentParent) {
if (lang_1.isBlank(this.requiredParents)) {
return false;
}
if (lang_1.isBlank(currentParent)) {
return true;
}
var lcParent = currentParent.toLowerCase();
return this.requiredParents[lcParent] != true && lcParent != "template";
};
HtmlTagDefinition.prototype.isClosedByChild = function(name) {
return this.isVoid || lang_1.normalizeBool(this.closedByChildren[name.toLowerCase()]);
};
return HtmlTagDefinition;
}();
exports.HtmlTagDefinition = HtmlTagDefinition;
var TAG_DEFINITIONS = {
area: new HtmlTagDefinition({
isVoid: true
}),
embed: new HtmlTagDefinition({
isVoid: true
}),
link: new HtmlTagDefinition({
isVoid: true
}),
img: new HtmlTagDefinition({
isVoid: true
}),
input: new HtmlTagDefinition({
isVoid: true
}),
param: new HtmlTagDefinition({
isVoid: true
}),
hr: new HtmlTagDefinition({
isVoid: true
}),
br: new HtmlTagDefinition({
isVoid: true
}),
source: new HtmlTagDefinition({
isVoid: true
}),
track: new HtmlTagDefinition({
isVoid: true
}),
wbr: new HtmlTagDefinition({
isVoid: true
}),
p: new HtmlTagDefinition({
closedByChildren: [ "address", "article", "aside", "blockquote", "div", "dl", "fieldset", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "main", "nav", "ol", "p", "pre", "section", "table", "ul" ],
closedByParent: true
}),
thead: new HtmlTagDefinition({
closedByChildren: [ "tbody", "tfoot" ]
}),
tbody: new HtmlTagDefinition({
closedByChildren: [ "tbody", "tfoot" ],
closedByParent: true
}),
tfoot: new HtmlTagDefinition({
closedByChildren: [ "tbody" ],
closedByParent: true
}),
tr: new HtmlTagDefinition({
closedByChildren: [ "tr" ],
requiredParents: [ "tbody", "tfoot", "thead" ],
closedByParent: true
}),
td: new HtmlTagDefinition({
closedByChildren: [ "td", "th" ],
closedByParent: true
}),
th: new HtmlTagDefinition({
closedByChildren: [ "td", "th" ],
closedByParent: true
}),
col: new HtmlTagDefinition({
requiredParents: [ "colgroup" ],
isVoid: true
}),
svg: new HtmlTagDefinition({
implicitNamespacePrefix: "svg"
}),
math: new HtmlTagDefinition({
implicitNamespacePrefix: "math"
}),
li: new HtmlTagDefinition({
closedByChildren: [ "li" ],
closedByParent: true
}),
dt: new HtmlTagDefinition({
closedByChildren: [ "dt", "dd" ]
}),
dd: new HtmlTagDefinition({
closedByChildren: [ "dt", "dd" ],
closedByParent: true
}),
rb: new HtmlTagDefinition({
closedByChildren: [ "rb", "rt", "rtc", "rp" ],
closedByParent: true
}),
rt: new HtmlTagDefinition({
closedByChildren: [ "rb", "rt", "rtc", "rp" ],
closedByParent: true
}),
rtc: new HtmlTagDefinition({
closedByChildren: [ "rb", "rtc", "rp" ],
closedByParent: true
}),
rp: new HtmlTagDefinition({
closedByChildren: [ "rb", "rt", "rtc", "rp" ],
closedByParent: true
}),
optgroup: new HtmlTagDefinition({
closedByChildren: [ "optgroup" ],
closedByParent: true
}),
option: new HtmlTagDefinition({
closedByChildren: [ "option", "optgroup" ],
closedByParent: true
}),
pre: new HtmlTagDefinition({
ignoreFirstLf: true
}),
listing: new HtmlTagDefinition({
ignoreFirstLf: true
}),
style: new HtmlTagDefinition({
contentType: HtmlTagContentType.RAW_TEXT
}),
script: new HtmlTagDefinition({
contentType: HtmlTagContentType.RAW_TEXT
}),
title: new HtmlTagDefinition({
contentType: HtmlTagContentType.ESCAPABLE_RAW_TEXT
}),
textarea: new HtmlTagDefinition({
contentType: HtmlTagContentType.ESCAPABLE_RAW_TEXT,
ignoreFirstLf: true
})
};
var DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
function getHtmlTagDefinition(tagName) {
var result = TAG_DEFINITIONS[tagName.toLowerCase()];
return lang_1.isPresent(result) ? result : DEFAULT_TAG_DEFINITION;
}
exports.getHtmlTagDefinition = getHtmlTagDefinition;
var NS_PREFIX_RE = /^@([^:]+):(.+)/g;
function splitNsName(elementName) {
if (elementName[0] != "@") {
return [ null, elementName ];
}
var match = lang_1.RegExpWrapper.firstMatch(NS_PREFIX_RE, elementName);
return [ match[1], match[2] ];
}
exports.splitNsName = splitNsName;
function getNsPrefix(elementName) {
return splitNsName(elementName)[0];
}
exports.getNsPrefix = getNsPrefix;
function mergeNsAndName(prefix, localName) {
return lang_1.isPresent(prefix) ? "@" + prefix + ":" + localName : localName;
}
exports.mergeNsAndName = mergeNsAndName;
}, function(module, exports) {
"use strict";
var ElementSchemaRegistry = function() {
function ElementSchemaRegistry() {}
ElementSchemaRegistry.prototype.hasProperty = function(tagName, propName) {
return true;
};
ElementSchemaRegistry.prototype.getMappedPropName = function(propName) {
return propName;
};
return ElementSchemaRegistry;
}();
exports.ElementSchemaRegistry = ElementSchemaRegistry;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var html_tags_1 = __webpack_require__(326);
var NG_CONTENT_SELECT_ATTR = "select";
var NG_CONTENT_ELEMENT = "ng-content";
var LINK_ELEMENT = "link";
var LINK_STYLE_REL_ATTR = "rel";
var LINK_STYLE_HREF_ATTR = "href";
var LINK_STYLE_REL_VALUE = "stylesheet";
var STYLE_ELEMENT = "style";
var SCRIPT_ELEMENT = "script";
var NG_NON_BINDABLE_ATTR = "ngNonBindable";
function preparseElement(ast) {
var selectAttr = null;
var hrefAttr = null;
var relAttr = null;
var nonBindable = false;
ast.attrs.forEach(function(attr) {
var lcAttrName = attr.name.toLowerCase();
if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
selectAttr = attr.value;
} else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
hrefAttr = attr.value;
} else if (lcAttrName == LINK_STYLE_REL_ATTR) {
relAttr = attr.value;
} else if (attr.name == NG_NON_BINDABLE_ATTR) {
nonBindable = true;
}
});
selectAttr = normalizeNgContentSelect(selectAttr);
var nodeName = ast.name.toLowerCase();
var type = PreparsedElementType.OTHER;
if (html_tags_1.splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {
type = PreparsedElementType.NG_CONTENT;
} else if (nodeName == STYLE_ELEMENT) {
type = PreparsedElementType.STYLE;
} else if (nodeName == SCRIPT_ELEMENT) {
type = PreparsedElementType.SCRIPT;
} else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
type = PreparsedElementType.STYLESHEET;
}
return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable);
}
exports.preparseElement = preparseElement;
(function(PreparsedElementType) {
PreparsedElementType[PreparsedElementType["NG_CONTENT"] = 0] = "NG_CONTENT";
PreparsedElementType[PreparsedElementType["STYLE"] = 1] = "STYLE";
PreparsedElementType[PreparsedElementType["STYLESHEET"] = 2] = "STYLESHEET";
PreparsedElementType[PreparsedElementType["SCRIPT"] = 3] = "SCRIPT";
PreparsedElementType[PreparsedElementType["OTHER"] = 4] = "OTHER";
})(exports.PreparsedElementType || (exports.PreparsedElementType = {}));
var PreparsedElementType = exports.PreparsedElementType;
var PreparsedElement = function() {
function PreparsedElement(type, selectAttr, hrefAttr, nonBindable) {
this.type = type;
this.selectAttr = selectAttr;
this.hrefAttr = hrefAttr;
this.nonBindable = nonBindable;
}
return PreparsedElement;
}();
exports.PreparsedElement = PreparsedElement;
function normalizeNgContentSelect(selectAttr) {
if (lang_1.isBlank(selectAttr) || selectAttr.length === 0) {
return "*";
}
return selectAttr;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var directive_metadata_1 = __webpack_require__(307);
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var async_1 = __webpack_require__(150);
var xhr_1 = __webpack_require__(302);
var url_resolver_1 = __webpack_require__(317);
var style_url_resolver_1 = __webpack_require__(318);
var di_1 = __webpack_require__(109);
var view_1 = __webpack_require__(180);
var html_ast_1 = __webpack_require__(323);
var html_parser_1 = __webpack_require__(322);
var template_preparser_1 = __webpack_require__(328);
var TemplateNormalizer = function() {
function TemplateNormalizer(_xhr, _urlResolver, _htmlParser) {
this._xhr = _xhr;
this._urlResolver = _urlResolver;
this._htmlParser = _htmlParser;
}
TemplateNormalizer.prototype.normalizeTemplate = function(directiveType, template) {
var _this = this;
if (lang_1.isPresent(template.template)) {
return async_1.PromiseWrapper.resolve(this.normalizeLoadedTemplate(directiveType, template, template.template, directiveType.moduleUrl));
} else if (lang_1.isPresent(template.templateUrl)) {
var sourceAbsUrl = this._urlResolver.resolve(directiveType.moduleUrl, template.templateUrl);
return this._xhr.get(sourceAbsUrl).then(function(templateContent) {
return _this.normalizeLoadedTemplate(directiveType, template, templateContent, sourceAbsUrl);
});
} else {
throw new exceptions_1.BaseException("No template specified for component " + directiveType.name);
}
};
TemplateNormalizer.prototype.normalizeLoadedTemplate = function(directiveType, templateMeta, template, templateAbsUrl) {
var _this = this;
var rootNodesAndErrors = this._htmlParser.parse(template, directiveType.name);
if (rootNodesAndErrors.errors.length > 0) {
var errorString = rootNodesAndErrors.errors.join("\n");
throw new exceptions_1.BaseException("Template parse errors:\n" + errorString);
}
var visitor = new TemplatePreparseVisitor();
html_ast_1.htmlVisitAll(visitor, rootNodesAndErrors.rootNodes);
var allStyles = templateMeta.styles.concat(visitor.styles);
var allStyleAbsUrls = visitor.styleUrls.filter(style_url_resolver_1.isStyleUrlResolvable).map(function(url) {
return _this._urlResolver.resolve(templateAbsUrl, url);
}).concat(templateMeta.styleUrls.filter(style_url_resolver_1.isStyleUrlResolvable).map(function(url) {
return _this._urlResolver.resolve(directiveType.moduleUrl, url);
}));
var allResolvedStyles = allStyles.map(function(style) {
var styleWithImports = style_url_resolver_1.extractStyleUrls(_this._urlResolver, templateAbsUrl, style);
styleWithImports.styleUrls.forEach(function(styleUrl) {
return allStyleAbsUrls.push(styleUrl);
});
return styleWithImports.style;
});
var encapsulation = templateMeta.encapsulation;
if (encapsulation === view_1.ViewEncapsulation.Emulated && allResolvedStyles.length === 0 && allStyleAbsUrls.length === 0) {
encapsulation = view_1.ViewEncapsulation.None;
}
return new directive_metadata_1.CompileTemplateMetadata({
encapsulation: encapsulation,
template: template,
templateUrl: templateAbsUrl,
styles: allResolvedStyles,
styleUrls: allStyleAbsUrls,
ngContentSelectors: visitor.ngContentSelectors
});
};
TemplateNormalizer = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", [ xhr_1.XHR, url_resolver_1.UrlResolver, html_parser_1.HtmlParser ]) ], TemplateNormalizer);
return TemplateNormalizer;
}();
exports.TemplateNormalizer = TemplateNormalizer;
var TemplatePreparseVisitor = function() {
function TemplatePreparseVisitor() {
this.ngContentSelectors = [];
this.styles = [];
this.styleUrls = [];
this.ngNonBindableStackCount = 0;
}
TemplatePreparseVisitor.prototype.visitElement = function(ast, context) {
var preparsedElement = template_preparser_1.preparseElement(ast);
switch (preparsedElement.type) {
case template_preparser_1.PreparsedElementType.NG_CONTENT:
if (this.ngNonBindableStackCount === 0) {
this.ngContentSelectors.push(preparsedElement.selectAttr);
}
break;

case template_preparser_1.PreparsedElementType.STYLE:
var textContent = "";
ast.children.forEach(function(child) {
if (child instanceof html_ast_1.HtmlTextAst) {
textContent += child.value;
}
});
this.styles.push(textContent);
break;

case template_preparser_1.PreparsedElementType.STYLESHEET:
this.styleUrls.push(preparsedElement.hrefAttr);
break;

default:
break;
}
if (preparsedElement.nonBindable) {
this.ngNonBindableStackCount++;
}
html_ast_1.htmlVisitAll(this, ast.children);
if (preparsedElement.nonBindable) {
this.ngNonBindableStackCount--;
}
return null;
};
TemplatePreparseVisitor.prototype.visitAttr = function(ast, context) {
return null;
};
TemplatePreparseVisitor.prototype.visitText = function(ast, context) {
return null;
};
return TemplatePreparseVisitor;
}();
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var di_1 = __webpack_require__(109);
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var cpl = __webpack_require__(307);
var md = __webpack_require__(126);
var directive_resolver_1 = __webpack_require__(208);
var pipe_resolver_1 = __webpack_require__(215);
var view_resolver_1 = __webpack_require__(209);
var directive_lifecycle_reflector_1 = __webpack_require__(331);
var interfaces_1 = __webpack_require__(309);
var reflection_1 = __webpack_require__(120);
var di_2 = __webpack_require__(109);
var platform_directives_and_pipes_1 = __webpack_require__(211);
var util_1 = __webpack_require__(308);
var url_resolver_1 = __webpack_require__(317);
var RuntimeMetadataResolver = function() {
function RuntimeMetadataResolver(_directiveResolver, _pipeResolver, _viewResolver, _platformDirectives, _platformPipes) {
this._directiveResolver = _directiveResolver;
this._pipeResolver = _pipeResolver;
this._viewResolver = _viewResolver;
this._platformDirectives = _platformDirectives;
this._platformPipes = _platformPipes;
this._directiveCache = new Map();
this._pipeCache = new Map();
}
RuntimeMetadataResolver.prototype.getDirectiveMetadata = function(directiveType) {
var meta = this._directiveCache.get(directiveType);
if (lang_1.isBlank(meta)) {
var dirMeta = this._directiveResolver.resolve(directiveType);
var moduleUrl = null;
var templateMeta = null;
var changeDetectionStrategy = null;
if (dirMeta instanceof md.ComponentMetadata) {
var cmpMeta = dirMeta;
moduleUrl = calcModuleUrl(directiveType, cmpMeta);
var viewMeta = this._viewResolver.resolve(directiveType);
templateMeta = new cpl.CompileTemplateMetadata({
encapsulation: viewMeta.encapsulation,
template: viewMeta.template,
templateUrl: viewMeta.templateUrl,
styles: viewMeta.styles,
styleUrls: viewMeta.styleUrls
});
changeDetectionStrategy = cmpMeta.changeDetection;
}
meta = cpl.CompileDirectiveMetadata.create({
selector: dirMeta.selector,
exportAs: dirMeta.exportAs,
isComponent: lang_1.isPresent(templateMeta),
dynamicLoadable: true,
type: new cpl.CompileTypeMetadata({
name: lang_1.stringify(directiveType),
moduleUrl: moduleUrl,
runtime: directiveType
}),
template: templateMeta,
changeDetection: changeDetectionStrategy,
inputs: dirMeta.inputs,
outputs: dirMeta.outputs,
host: dirMeta.host,
lifecycleHooks: interfaces_1.LIFECYCLE_HOOKS_VALUES.filter(function(hook) {
return directive_lifecycle_reflector_1.hasLifecycleHook(hook, directiveType);
})
});
this._directiveCache.set(directiveType, meta);
}
return meta;
};
RuntimeMetadataResolver.prototype.getPipeMetadata = function(pipeType) {
var meta = this._pipeCache.get(pipeType);
if (lang_1.isBlank(meta)) {
var pipeMeta = this._pipeResolver.resolve(pipeType);
var moduleUrl = reflection_1.reflector.importUri(pipeType);
meta = new cpl.CompilePipeMetadata({
type: new cpl.CompileTypeMetadata({
name: lang_1.stringify(pipeType),
moduleUrl: moduleUrl,
runtime: pipeType
}),
name: pipeMeta.name,
pure: pipeMeta.pure
});
this._pipeCache.set(pipeType, meta);
}
return meta;
};
RuntimeMetadataResolver.prototype.getViewDirectivesMetadata = function(component) {
var _this = this;
var view = this._viewResolver.resolve(component);
var directives = flattenDirectives(view, this._platformDirectives);
for (var i = 0; i < directives.length; i++) {
if (!isValidType(directives[i])) {
throw new exceptions_1.BaseException("Unexpected directive value '" + lang_1.stringify(directives[i]) + "' on the View of component '" + lang_1.stringify(component) + "'");
}
}
return directives.map(function(type) {
return _this.getDirectiveMetadata(type);
});
};
RuntimeMetadataResolver.prototype.getViewPipesMetadata = function(component) {
var _this = this;
var view = this._viewResolver.resolve(component);
var pipes = flattenPipes(view, this._platformPipes);
for (var i = 0; i < pipes.length; i++) {
if (!isValidType(pipes[i])) {
throw new exceptions_1.BaseException("Unexpected piped value '" + lang_1.stringify(pipes[i]) + "' on the View of component '" + lang_1.stringify(component) + "'");
}
}
return pipes.map(function(type) {
return _this.getPipeMetadata(type);
});
};
RuntimeMetadataResolver = __decorate([ di_2.Injectable(), __param(3, di_2.Optional()), __param(3, di_2.Inject(platform_directives_and_pipes_1.PLATFORM_DIRECTIVES)), __param(4, di_2.Optional()), __param(4, di_2.Inject(platform_directives_and_pipes_1.PLATFORM_PIPES)), __metadata("design:paramtypes", [ directive_resolver_1.DirectiveResolver, pipe_resolver_1.PipeResolver, view_resolver_1.ViewResolver, Array, Array ]) ], RuntimeMetadataResolver);
return RuntimeMetadataResolver;
}();
exports.RuntimeMetadataResolver = RuntimeMetadataResolver;
function flattenDirectives(view, platformDirectives) {
var directives = [];
if (lang_1.isPresent(platformDirectives)) {
flattenArray(platformDirectives, directives);
}
if (lang_1.isPresent(view.directives)) {
flattenArray(view.directives, directives);
}
return directives;
}
function flattenPipes(view, platformPipes) {
var pipes = [];
if (lang_1.isPresent(platformPipes)) {
flattenArray(platformPipes, pipes);
}
if (lang_1.isPresent(view.pipes)) {
flattenArray(view.pipes, pipes);
}
return pipes;
}
function flattenArray(tree, out) {
for (var i = 0; i < tree.length; i++) {
var item = di_1.resolveForwardRef(tree[i]);
if (lang_1.isArray(item)) {
flattenArray(item, out);
} else {
out.push(item);
}
}
}
function isValidType(value) {
return lang_1.isPresent(value) && value instanceof lang_1.Type;
}
function calcModuleUrl(type, cmpMetadata) {
var moduleId = cmpMetadata.moduleId;
if (lang_1.isPresent(moduleId)) {
var scheme = url_resolver_1.getUrlScheme(moduleId);
return lang_1.isPresent(scheme) && scheme.length > 0 ? moduleId : "package:" + moduleId + util_1.MODULE_SUFFIX;
} else {
return reflection_1.reflector.importUri(type);
}
}
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var interfaces_1 = __webpack_require__(309);
function hasLifecycleHook(lcInterface, token) {
if (!(token instanceof lang_1.Type)) return false;
var proto = token.prototype;
switch (lcInterface) {
case interfaces_1.LifecycleHooks.AfterContentInit:
return !!proto.ngAfterContentInit;

case interfaces_1.LifecycleHooks.AfterContentChecked:
return !!proto.ngAfterContentChecked;

case interfaces_1.LifecycleHooks.AfterViewInit:
return !!proto.ngAfterViewInit;

case interfaces_1.LifecycleHooks.AfterViewChecked:
return !!proto.ngAfterViewChecked;

case interfaces_1.LifecycleHooks.OnChanges:
return !!proto.ngOnChanges;

case interfaces_1.LifecycleHooks.DoCheck:
return !!proto.ngDoCheck;

case interfaces_1.LifecycleHooks.OnDestroy:
return !!proto.ngOnDestroy;

case interfaces_1.LifecycleHooks.OnInit:
return !!proto.ngOnInit;

default:
return false;
}
}
exports.hasLifecycleHook = hasLifecycleHook;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var di_1 = __webpack_require__(109);
var lang_1 = __webpack_require__(105);
var collection_1 = __webpack_require__(115);
var dom_adapter_1 = __webpack_require__(216);
var html_tags_1 = __webpack_require__(326);
var element_schema_registry_1 = __webpack_require__(327);
var NAMESPACE_URIS = lang_1.CONST_EXPR({
xlink: "http://www.w3.org/1999/xlink",
svg: "http://www.w3.org/2000/svg"
});
var DomElementSchemaRegistry = function(_super) {
__extends(DomElementSchemaRegistry, _super);
function DomElementSchemaRegistry() {
_super.apply(this, arguments);
this._protoElements = new Map();
}
DomElementSchemaRegistry.prototype._getProtoElement = function(tagName) {
var element = this._protoElements.get(tagName);
if (lang_1.isBlank(element)) {
var nsAndName = html_tags_1.splitNsName(tagName);
element = lang_1.isPresent(nsAndName[0]) ? dom_adapter_1.DOM.createElementNS(NAMESPACE_URIS[nsAndName[0]], nsAndName[1]) : dom_adapter_1.DOM.createElement(nsAndName[1]);
this._protoElements.set(tagName, element);
}
return element;
};
DomElementSchemaRegistry.prototype.hasProperty = function(tagName, propName) {
if (tagName.indexOf("-") !== -1) {
return true;
} else {
var elm = this._getProtoElement(tagName);
return dom_adapter_1.DOM.hasProperty(elm, propName);
}
};
DomElementSchemaRegistry.prototype.getMappedPropName = function(propName) {
var mappedPropName = collection_1.StringMapWrapper.get(dom_adapter_1.DOM.attrToPropMap, propName);
return lang_1.isPresent(mappedPropName) ? mappedPropName : propName;
};
DomElementSchemaRegistry = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", []) ], DomElementSchemaRegistry);
return DomElementSchemaRegistry;
}(element_schema_registry_1.ElementSchemaRegistry);
exports.DomElementSchemaRegistry = DomElementSchemaRegistry;
}, function(module, exports, __webpack_require__) {
"use strict";
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
__export(__webpack_require__(334));
__export(__webpack_require__(348));
__export(__webpack_require__(356));
__export(__webpack_require__(380));
}, function(module, exports, __webpack_require__) {
"use strict";
var async_pipe_1 = __webpack_require__(335);
exports.AsyncPipe = async_pipe_1.AsyncPipe;
var date_pipe_1 = __webpack_require__(337);
exports.DatePipe = date_pipe_1.DatePipe;
var json_pipe_1 = __webpack_require__(339);
exports.JsonPipe = json_pipe_1.JsonPipe;
var slice_pipe_1 = __webpack_require__(340);
exports.SlicePipe = slice_pipe_1.SlicePipe;
var lowercase_pipe_1 = __webpack_require__(341);
exports.LowerCasePipe = lowercase_pipe_1.LowerCasePipe;
var number_pipe_1 = __webpack_require__(342);
exports.NumberPipe = number_pipe_1.NumberPipe;
exports.DecimalPipe = number_pipe_1.DecimalPipe;
exports.PercentPipe = number_pipe_1.PercentPipe;
exports.CurrencyPipe = number_pipe_1.CurrencyPipe;
var uppercase_pipe_1 = __webpack_require__(343);
exports.UpperCasePipe = uppercase_pipe_1.UpperCasePipe;
var replace_pipe_1 = __webpack_require__(344);
exports.ReplacePipe = replace_pipe_1.ReplacePipe;
var i18n_plural_pipe_1 = __webpack_require__(345);
exports.I18nPluralPipe = i18n_plural_pipe_1.I18nPluralPipe;
var i18n_select_pipe_1 = __webpack_require__(346);
exports.I18nSelectPipe = i18n_select_pipe_1.I18nSelectPipe;
var common_pipes_1 = __webpack_require__(347);
exports.COMMON_PIPES = common_pipes_1.COMMON_PIPES;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var async_1 = __webpack_require__(150);
var core_1 = __webpack_require__(106);
var invalid_pipe_argument_exception_1 = __webpack_require__(336);
var ObservableStrategy = function() {
function ObservableStrategy() {}
ObservableStrategy.prototype.createSubscription = function(async, updateLatestValue) {
return async_1.ObservableWrapper.subscribe(async, updateLatestValue, function(e) {
throw e;
});
};
ObservableStrategy.prototype.dispose = function(subscription) {
async_1.ObservableWrapper.dispose(subscription);
};
ObservableStrategy.prototype.onDestroy = function(subscription) {
async_1.ObservableWrapper.dispose(subscription);
};
return ObservableStrategy;
}();
var PromiseStrategy = function() {
function PromiseStrategy() {}
PromiseStrategy.prototype.createSubscription = function(async, updateLatestValue) {
return async.then(updateLatestValue);
};
PromiseStrategy.prototype.dispose = function(subscription) {};
PromiseStrategy.prototype.onDestroy = function(subscription) {};
return PromiseStrategy;
}();
var _promiseStrategy = new PromiseStrategy();
var _observableStrategy = new ObservableStrategy();
var __unused;
var AsyncPipe = function() {
function AsyncPipe(_ref) {
this._latestValue = null;
this._latestReturnedValue = null;
this._subscription = null;
this._obj = null;
this._strategy = null;
this._ref = _ref;
}
AsyncPipe.prototype.ngOnDestroy = function() {
if (lang_1.isPresent(this._subscription)) {
this._dispose();
}
};
AsyncPipe.prototype.transform = function(obj, args) {
if (lang_1.isBlank(this._obj)) {
if (lang_1.isPresent(obj)) {
this._subscribe(obj);
}
this._latestReturnedValue = this._latestValue;
return this._latestValue;
}
if (obj !== this._obj) {
this._dispose();
return this.transform(obj);
}
if (this._latestValue === this._latestReturnedValue) {
return this._latestReturnedValue;
} else {
this._latestReturnedValue = this._latestValue;
return core_1.WrappedValue.wrap(this._latestValue);
}
};
AsyncPipe.prototype._subscribe = function(obj) {
var _this = this;
this._obj = obj;
this._strategy = this._selectStrategy(obj);
this._subscription = this._strategy.createSubscription(obj, function(value) {
return _this._updateLatestValue(obj, value);
});
};
AsyncPipe.prototype._selectStrategy = function(obj) {
if (lang_1.isPromise(obj)) {
return _promiseStrategy;
} else if (async_1.ObservableWrapper.isObservable(obj)) {
return _observableStrategy;
} else {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(AsyncPipe, obj);
}
};
AsyncPipe.prototype._dispose = function() {
this._strategy.dispose(this._subscription);
this._latestValue = null;
this._latestReturnedValue = null;
this._subscription = null;
this._obj = null;
};
AsyncPipe.prototype._updateLatestValue = function(async, value) {
if (async === this._obj) {
this._latestValue = value;
this._ref.markForCheck();
}
};
AsyncPipe = __decorate([ core_1.Pipe({
name: "async",
pure: false
}), core_1.Injectable(), __metadata("design:paramtypes", [ core_1.ChangeDetectorRef ]) ], AsyncPipe);
return AsyncPipe;
}();
exports.AsyncPipe = AsyncPipe;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var InvalidPipeArgumentException = function(_super) {
__extends(InvalidPipeArgumentException, _super);
function InvalidPipeArgumentException(type, value) {
_super.call(this, "Invalid argument '" + value + "' for pipe '" + lang_1.stringify(type) + "'");
}
return InvalidPipeArgumentException;
}(exceptions_1.BaseException);
exports.InvalidPipeArgumentException = InvalidPipeArgumentException;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var intl_1 = __webpack_require__(338);
var core_1 = __webpack_require__(106);
var collection_1 = __webpack_require__(115);
var invalid_pipe_argument_exception_1 = __webpack_require__(336);
var defaultLocale = "en-US";
var DatePipe = function() {
function DatePipe() {}
DatePipe.prototype.transform = function(value, args) {
if (lang_1.isBlank(value)) return null;
if (!this.supports(value)) {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(DatePipe, value);
}
var pattern = lang_1.isPresent(args) && args.length > 0 ? args[0] : "mediumDate";
if (lang_1.isNumber(value)) {
value = lang_1.DateWrapper.fromMillis(value);
}
if (collection_1.StringMapWrapper.contains(DatePipe._ALIASES, pattern)) {
pattern = collection_1.StringMapWrapper.get(DatePipe._ALIASES, pattern);
}
return intl_1.DateFormatter.format(value, defaultLocale, pattern);
};
DatePipe.prototype.supports = function(obj) {
return lang_1.isDate(obj) || lang_1.isNumber(obj);
};
DatePipe._ALIASES = {
medium: "yMMMdjms",
"short": "yMdjm",
fullDate: "yMMMMEEEEd",
longDate: "yMMMMd",
mediumDate: "yMMMd",
shortDate: "yMd",
mediumTime: "jms",
shortTime: "jm"
};
DatePipe = __decorate([ lang_1.CONST(), core_1.Pipe({
name: "date",
pure: true
}), core_1.Injectable(), __metadata("design:paramtypes", []) ], DatePipe);
return DatePipe;
}();
exports.DatePipe = DatePipe;
}, function(module, exports) {
"use strict";
(function(NumberFormatStyle) {
NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
})(exports.NumberFormatStyle || (exports.NumberFormatStyle = {}));
var NumberFormatStyle = exports.NumberFormatStyle;
var NumberFormatter = function() {
function NumberFormatter() {}
NumberFormatter.format = function(num, locale, style, _a) {
var _b = _a === void 0 ? {} : _a, _c = _b.minimumIntegerDigits, minimumIntegerDigits = _c === void 0 ? 1 : _c, _d = _b.minimumFractionDigits, minimumFractionDigits = _d === void 0 ? 0 : _d, _e = _b.maximumFractionDigits, maximumFractionDigits = _e === void 0 ? 3 : _e, currency = _b.currency, _f = _b.currencyAsSymbol, currencyAsSymbol = _f === void 0 ? false : _f;
var intlOptions = {
minimumIntegerDigits: minimumIntegerDigits,
minimumFractionDigits: minimumFractionDigits,
maximumFractionDigits: maximumFractionDigits
};
intlOptions.style = NumberFormatStyle[style].toLowerCase();
if (style == NumberFormatStyle.Currency) {
intlOptions.currency = currency;
intlOptions.currencyDisplay = currencyAsSymbol ? "symbol" : "code";
}
return new Intl.NumberFormat(locale, intlOptions).format(num);
};
return NumberFormatter;
}();
exports.NumberFormatter = NumberFormatter;
function digitCondition(len) {
return len == 2 ? "2-digit" : "numeric";
}
function nameCondition(len) {
return len < 4 ? "short" : "long";
}
function extractComponents(pattern) {
var ret = {};
var i = 0, j;
while (i < pattern.length) {
j = i;
while (j < pattern.length && pattern[j] == pattern[i]) j++;
var len = j - i;
switch (pattern[i]) {
case "G":
ret.era = nameCondition(len);
break;

case "y":
ret.year = digitCondition(len);
break;

case "M":
if (len >= 3) ret.month = nameCondition(len); else ret.month = digitCondition(len);
break;

case "d":
ret.day = digitCondition(len);
break;

case "E":
ret.weekday = nameCondition(len);
break;

case "j":
ret.hour = digitCondition(len);
break;

case "h":
ret.hour = digitCondition(len);
ret.hour12 = true;
break;

case "H":
ret.hour = digitCondition(len);
ret.hour12 = false;
break;

case "m":
ret.minute = digitCondition(len);
break;

case "s":
ret.second = digitCondition(len);
break;

case "z":
ret.timeZoneName = "long";
break;

case "Z":
ret.timeZoneName = "short";
break;
}
i = j;
}
return ret;
}
var dateFormatterCache = new Map();
var DateFormatter = function() {
function DateFormatter() {}
DateFormatter.format = function(date, locale, pattern) {
var key = locale + pattern;
if (dateFormatterCache.has(key)) {
return dateFormatterCache.get(key).format(date);
}
var formatter = new Intl.DateTimeFormat(locale, extractComponents(pattern));
dateFormatterCache.set(key, formatter);
return formatter.format(date);
};
return DateFormatter;
}();
exports.DateFormatter = DateFormatter;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var core_1 = __webpack_require__(106);
var JsonPipe = function() {
function JsonPipe() {}
JsonPipe.prototype.transform = function(value, args) {
if (args === void 0) {
args = null;
}
return lang_1.Json.stringify(value);
};
JsonPipe = __decorate([ lang_1.CONST(), core_1.Pipe({
name: "json",
pure: false
}), core_1.Injectable(), __metadata("design:paramtypes", []) ], JsonPipe);
return JsonPipe;
}();
exports.JsonPipe = JsonPipe;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(115);
var core_1 = __webpack_require__(106);
var invalid_pipe_argument_exception_1 = __webpack_require__(336);
var SlicePipe = function() {
function SlicePipe() {}
SlicePipe.prototype.transform = function(value, args) {
if (args === void 0) {
args = null;
}
if (lang_1.isBlank(args) || args.length == 0) {
throw new exceptions_1.BaseException("Slice pipe requires one argument");
}
if (!this.supports(value)) {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(SlicePipe, value);
}
if (lang_1.isBlank(value)) return value;
var start = args[0];
var end = args.length > 1 ? args[1] : null;
if (lang_1.isString(value)) {
return lang_1.StringWrapper.slice(value, start, end);
}
return collection_1.ListWrapper.slice(value, start, end);
};
SlicePipe.prototype.supports = function(obj) {
return lang_1.isString(obj) || lang_1.isArray(obj);
};
SlicePipe = __decorate([ core_1.Pipe({
name: "slice",
pure: false
}), core_1.Injectable(), __metadata("design:paramtypes", []) ], SlicePipe);
return SlicePipe;
}();
exports.SlicePipe = SlicePipe;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var core_1 = __webpack_require__(106);
var invalid_pipe_argument_exception_1 = __webpack_require__(336);
var LowerCasePipe = function() {
function LowerCasePipe() {}
LowerCasePipe.prototype.transform = function(value, args) {
if (args === void 0) {
args = null;
}
if (lang_1.isBlank(value)) return value;
if (!lang_1.isString(value)) {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(LowerCasePipe, value);
}
return value.toLowerCase();
};
LowerCasePipe = __decorate([ lang_1.CONST(), core_1.Pipe({
name: "lowercase"
}), core_1.Injectable(), __metadata("design:paramtypes", []) ], LowerCasePipe);
return LowerCasePipe;
}();
exports.LowerCasePipe = LowerCasePipe;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var intl_1 = __webpack_require__(338);
var core_1 = __webpack_require__(106);
var collection_1 = __webpack_require__(115);
var invalid_pipe_argument_exception_1 = __webpack_require__(336);
var defaultLocale = "en-US";
var _re = lang_1.RegExpWrapper.create("^(\\d+)?\\.((\\d+)(\\-(\\d+))?)?$");
var NumberPipe = function() {
function NumberPipe() {}
NumberPipe._format = function(value, style, digits, currency, currencyAsSymbol) {
if (currency === void 0) {
currency = null;
}
if (currencyAsSymbol === void 0) {
currencyAsSymbol = false;
}
if (lang_1.isBlank(value)) return null;
if (!lang_1.isNumber(value)) {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(NumberPipe, value);
}
var minInt = 1, minFraction = 0, maxFraction = 3;
if (lang_1.isPresent(digits)) {
var parts = lang_1.RegExpWrapper.firstMatch(_re, digits);
if (lang_1.isBlank(parts)) {
throw new exceptions_1.BaseException(digits + " is not a valid digit info for number pipes");
}
if (lang_1.isPresent(parts[1])) {
minInt = lang_1.NumberWrapper.parseIntAutoRadix(parts[1]);
}
if (lang_1.isPresent(parts[3])) {
minFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[3]);
}
if (lang_1.isPresent(parts[5])) {
maxFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[5]);
}
}
return intl_1.NumberFormatter.format(value, defaultLocale, style, {
minimumIntegerDigits: minInt,
minimumFractionDigits: minFraction,
maximumFractionDigits: maxFraction,
currency: currency,
currencyAsSymbol: currencyAsSymbol
});
};
NumberPipe = __decorate([ lang_1.CONST(), core_1.Injectable(), __metadata("design:paramtypes", []) ], NumberPipe);
return NumberPipe;
}();
exports.NumberPipe = NumberPipe;
var DecimalPipe = function(_super) {
__extends(DecimalPipe, _super);
function DecimalPipe() {
_super.apply(this, arguments);
}
DecimalPipe.prototype.transform = function(value, args) {
var digits = collection_1.ListWrapper.first(args);
return NumberPipe._format(value, intl_1.NumberFormatStyle.Decimal, digits);
};
DecimalPipe = __decorate([ lang_1.CONST(), core_1.Pipe({
name: "number"
}), core_1.Injectable(), __metadata("design:paramtypes", []) ], DecimalPipe);
return DecimalPipe;
}(NumberPipe);
exports.DecimalPipe = DecimalPipe;
var PercentPipe = function(_super) {
__extends(PercentPipe, _super);
function PercentPipe() {
_super.apply(this, arguments);
}
PercentPipe.prototype.transform = function(value, args) {
var digits = collection_1.ListWrapper.first(args);
return NumberPipe._format(value, intl_1.NumberFormatStyle.Percent, digits);
};
PercentPipe = __decorate([ lang_1.CONST(), core_1.Pipe({
name: "percent"
}), core_1.Injectable(), __metadata("design:paramtypes", []) ], PercentPipe);
return PercentPipe;
}(NumberPipe);
exports.PercentPipe = PercentPipe;
var CurrencyPipe = function(_super) {
__extends(CurrencyPipe, _super);
function CurrencyPipe() {
_super.apply(this, arguments);
}
CurrencyPipe.prototype.transform = function(value, args) {
var currencyCode = lang_1.isPresent(args) && args.length > 0 ? args[0] : "USD";
var symbolDisplay = lang_1.isPresent(args) && args.length > 1 ? args[1] : false;
var digits = lang_1.isPresent(args) && args.length > 2 ? args[2] : null;
return NumberPipe._format(value, intl_1.NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
};
CurrencyPipe = __decorate([ lang_1.CONST(), core_1.Pipe({
name: "currency"
}), core_1.Injectable(), __metadata("design:paramtypes", []) ], CurrencyPipe);
return CurrencyPipe;
}(NumberPipe);
exports.CurrencyPipe = CurrencyPipe;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var core_1 = __webpack_require__(106);
var invalid_pipe_argument_exception_1 = __webpack_require__(336);
var UpperCasePipe = function() {
function UpperCasePipe() {}
UpperCasePipe.prototype.transform = function(value, args) {
if (args === void 0) {
args = null;
}
if (lang_1.isBlank(value)) return value;
if (!lang_1.isString(value)) {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(UpperCasePipe, value);
}
return value.toUpperCase();
};
UpperCasePipe = __decorate([ lang_1.CONST(), core_1.Pipe({
name: "uppercase"
}), core_1.Injectable(), __metadata("design:paramtypes", []) ], UpperCasePipe);
return UpperCasePipe;
}();
exports.UpperCasePipe = UpperCasePipe;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var core_1 = __webpack_require__(106);
var invalid_pipe_argument_exception_1 = __webpack_require__(336);
var ReplacePipe = function() {
function ReplacePipe() {}
ReplacePipe.prototype.transform = function(value, args) {
if (lang_1.isBlank(args) || args.length !== 2) {
throw new exceptions_1.BaseException("ReplacePipe requires two arguments");
}
if (lang_1.isBlank(value)) {
return value;
}
if (!this._supportedInput(value)) {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(ReplacePipe, value);
}
var input = value.toString();
var pattern = args[0];
var replacement = args[1];
if (!this._supportedPattern(pattern)) {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(ReplacePipe, pattern);
}
if (!this._supportedReplacement(replacement)) {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(ReplacePipe, replacement);
}
if (lang_1.isFunction(replacement)) {
var rgxPattern = lang_1.isString(pattern) ? lang_1.RegExpWrapper.create(pattern) : pattern;
return lang_1.StringWrapper.replaceAllMapped(input, rgxPattern, replacement);
}
if (pattern instanceof RegExp) {
return lang_1.StringWrapper.replaceAll(input, pattern, replacement);
}
return lang_1.StringWrapper.replace(input, pattern, replacement);
};
ReplacePipe.prototype._supportedInput = function(input) {
return lang_1.isString(input) || lang_1.isNumber(input);
};
ReplacePipe.prototype._supportedPattern = function(pattern) {
return lang_1.isString(pattern) || pattern instanceof RegExp;
};
ReplacePipe.prototype._supportedReplacement = function(replacement) {
return lang_1.isString(replacement) || lang_1.isFunction(replacement);
};
ReplacePipe = __decorate([ core_1.Pipe({
name: "replace"
}), core_1.Injectable(), __metadata("design:paramtypes", []) ], ReplacePipe);
return ReplacePipe;
}();
exports.ReplacePipe = ReplacePipe;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var core_1 = __webpack_require__(106);
var invalid_pipe_argument_exception_1 = __webpack_require__(336);
var interpolationExp = lang_1.RegExpWrapper.create("#");
var I18nPluralPipe = function() {
function I18nPluralPipe() {}
I18nPluralPipe.prototype.transform = function(value, args) {
if (args === void 0) {
args = null;
}
var key;
var valueStr;
var pluralMap = args[0];
if (!lang_1.isStringMap(pluralMap)) {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(I18nPluralPipe, pluralMap);
}
key = value === 0 || value === 1 ? "=" + value : "other";
valueStr = lang_1.isPresent(value) ? value.toString() : "";
return lang_1.StringWrapper.replaceAll(pluralMap[key], interpolationExp, valueStr);
};
I18nPluralPipe = __decorate([ lang_1.CONST(), core_1.Pipe({
name: "i18nPlural",
pure: true
}), core_1.Injectable(), __metadata("design:paramtypes", []) ], I18nPluralPipe);
return I18nPluralPipe;
}();
exports.I18nPluralPipe = I18nPluralPipe;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var collection_1 = __webpack_require__(115);
var core_1 = __webpack_require__(106);
var invalid_pipe_argument_exception_1 = __webpack_require__(336);
var I18nSelectPipe = function() {
function I18nSelectPipe() {}
I18nSelectPipe.prototype.transform = function(value, args) {
if (args === void 0) {
args = null;
}
var mapping = args[0];
if (!lang_1.isStringMap(mapping)) {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(I18nSelectPipe, mapping);
}
return collection_1.StringMapWrapper.contains(mapping, value) ? mapping[value] : mapping["other"];
};
I18nSelectPipe = __decorate([ lang_1.CONST(), core_1.Pipe({
name: "i18nSelect",
pure: true
}), core_1.Injectable(), __metadata("design:paramtypes", []) ], I18nSelectPipe);
return I18nSelectPipe;
}();
exports.I18nSelectPipe = I18nSelectPipe;
}, function(module, exports, __webpack_require__) {
"use strict";
var async_pipe_1 = __webpack_require__(335);
var uppercase_pipe_1 = __webpack_require__(343);
var lowercase_pipe_1 = __webpack_require__(341);
var json_pipe_1 = __webpack_require__(339);
var slice_pipe_1 = __webpack_require__(340);
var date_pipe_1 = __webpack_require__(337);
var number_pipe_1 = __webpack_require__(342);
var replace_pipe_1 = __webpack_require__(344);
var i18n_plural_pipe_1 = __webpack_require__(345);
var i18n_select_pipe_1 = __webpack_require__(346);
var lang_1 = __webpack_require__(105);
exports.COMMON_PIPES = lang_1.CONST_EXPR([ async_pipe_1.AsyncPipe, uppercase_pipe_1.UpperCasePipe, lowercase_pipe_1.LowerCasePipe, json_pipe_1.JsonPipe, slice_pipe_1.SlicePipe, number_pipe_1.DecimalPipe, number_pipe_1.PercentPipe, number_pipe_1.CurrencyPipe, date_pipe_1.DatePipe, replace_pipe_1.ReplacePipe, i18n_plural_pipe_1.I18nPluralPipe, i18n_select_pipe_1.I18nSelectPipe ]);
}, function(module, exports, __webpack_require__) {
"use strict";
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var ng_class_1 = __webpack_require__(349);
exports.NgClass = ng_class_1.NgClass;
var ng_for_1 = __webpack_require__(350);
exports.NgFor = ng_for_1.NgFor;
var ng_if_1 = __webpack_require__(351);
exports.NgIf = ng_if_1.NgIf;
var ng_style_1 = __webpack_require__(352);
exports.NgStyle = ng_style_1.NgStyle;
var ng_switch_1 = __webpack_require__(353);
exports.NgSwitch = ng_switch_1.NgSwitch;
exports.NgSwitchWhen = ng_switch_1.NgSwitchWhen;
exports.NgSwitchDefault = ng_switch_1.NgSwitchDefault;
__export(__webpack_require__(354));
var core_directives_1 = __webpack_require__(355);
exports.CORE_DIRECTIVES = core_directives_1.CORE_DIRECTIVES;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var lang_1 = __webpack_require__(105);
var core_1 = __webpack_require__(106);
var collection_1 = __webpack_require__(115);
var NgClass = function() {
function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
this._iterableDiffers = _iterableDiffers;
this._keyValueDiffers = _keyValueDiffers;
this._ngEl = _ngEl;
this._renderer = _renderer;
this._initialClasses = [];
}
Object.defineProperty(NgClass.prototype, "initialClasses", {
set: function(v) {
this._applyInitialClasses(true);
this._initialClasses = lang_1.isPresent(v) && lang_1.isString(v) ? v.split(" ") : [];
this._applyInitialClasses(false);
this._applyClasses(this._rawClass, false);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgClass.prototype, "rawClass", {
set: function(v) {
this._cleanupClasses(this._rawClass);
if (lang_1.isString(v)) {
v = v.split(" ");
}
this._rawClass = v;
this._iterableDiffer = null;
this._keyValueDiffer = null;
if (lang_1.isPresent(v)) {
if (collection_1.isListLikeIterable(v)) {
this._iterableDiffer = this._iterableDiffers.find(v).create(null);
} else {
this._keyValueDiffer = this._keyValueDiffers.find(v).create(null);
}
}
},
enumerable: true,
configurable: true
});
NgClass.prototype.ngDoCheck = function() {
if (lang_1.isPresent(this._iterableDiffer)) {
var changes = this._iterableDiffer.diff(this._rawClass);
if (lang_1.isPresent(changes)) {
this._applyIterableChanges(changes);
}
}
if (lang_1.isPresent(this._keyValueDiffer)) {
var changes = this._keyValueDiffer.diff(this._rawClass);
if (lang_1.isPresent(changes)) {
this._applyKeyValueChanges(changes);
}
}
};
NgClass.prototype.ngOnDestroy = function() {
this._cleanupClasses(this._rawClass);
};
NgClass.prototype._cleanupClasses = function(rawClassVal) {
this._applyClasses(rawClassVal, true);
this._applyInitialClasses(false);
};
NgClass.prototype._applyKeyValueChanges = function(changes) {
var _this = this;
changes.forEachAddedItem(function(record) {
_this._toggleClass(record.key, record.currentValue);
});
changes.forEachChangedItem(function(record) {
_this._toggleClass(record.key, record.currentValue);
});
changes.forEachRemovedItem(function(record) {
if (record.previousValue) {
_this._toggleClass(record.key, false);
}
});
};
NgClass.prototype._applyIterableChanges = function(changes) {
var _this = this;
changes.forEachAddedItem(function(record) {
_this._toggleClass(record.item, true);
});
changes.forEachRemovedItem(function(record) {
_this._toggleClass(record.item, false);
});
};
NgClass.prototype._applyInitialClasses = function(isCleanup) {
var _this = this;
this._initialClasses.forEach(function(className) {
return _this._toggleClass(className, !isCleanup);
});
};
NgClass.prototype._applyClasses = function(rawClassVal, isCleanup) {
var _this = this;
if (lang_1.isPresent(rawClassVal)) {
if (lang_1.isArray(rawClassVal)) {
rawClassVal.forEach(function(className) {
return _this._toggleClass(className, !isCleanup);
});
} else if (rawClassVal instanceof Set) {
rawClassVal.forEach(function(className) {
return _this._toggleClass(className, !isCleanup);
});
} else {
collection_1.StringMapWrapper.forEach(rawClassVal, function(expVal, className) {
if (lang_1.isPresent(expVal)) _this._toggleClass(className, !isCleanup);
});
}
}
};
NgClass.prototype._toggleClass = function(className, enabled) {
className = className.trim();
if (className.length > 0) {
if (className.indexOf(" ") > -1) {
var classes = className.split(/\s+/g);
for (var i = 0, len = classes.length; i < len; i++) {
this._renderer.setElementClass(this._ngEl.nativeElement, classes[i], enabled);
}
} else {
this._renderer.setElementClass(this._ngEl.nativeElement, className, enabled);
}
}
};
NgClass = __decorate([ core_1.Directive({
selector: "[ngClass]",
inputs: [ "rawClass: ngClass", "initialClasses: class" ]
}), __metadata("design:paramtypes", [ core_1.IterableDiffers, core_1.KeyValueDiffers, core_1.ElementRef, core_1.Renderer ]) ], NgClass);
return NgClass;
}();
exports.NgClass = NgClass;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(106);
var lang_1 = __webpack_require__(105);
var NgFor = function() {
function NgFor(_viewContainer, _templateRef, _iterableDiffers, _cdr) {
this._viewContainer = _viewContainer;
this._templateRef = _templateRef;
this._iterableDiffers = _iterableDiffers;
this._cdr = _cdr;
}
Object.defineProperty(NgFor.prototype, "ngForOf", {
set: function(value) {
this._ngForOf = value;
if (lang_1.isBlank(this._differ) && lang_1.isPresent(value)) {
this._differ = this._iterableDiffers.find(value).create(this._cdr, this._ngForTrackBy);
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgFor.prototype, "ngForTemplate", {
set: function(value) {
if (lang_1.isPresent(value)) {
this._templateRef = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgFor.prototype, "ngForTrackBy", {
set: function(value) {
this._ngForTrackBy = value;
},
enumerable: true,
configurable: true
});
NgFor.prototype.ngDoCheck = function() {
if (lang_1.isPresent(this._differ)) {
var changes = this._differ.diff(this._ngForOf);
if (lang_1.isPresent(changes)) this._applyChanges(changes);
}
};
NgFor.prototype._applyChanges = function(changes) {
var _this = this;
var recordViewTuples = [];
changes.forEachRemovedItem(function(removedRecord) {
return recordViewTuples.push(new RecordViewTuple(removedRecord, null));
});
changes.forEachMovedItem(function(movedRecord) {
return recordViewTuples.push(new RecordViewTuple(movedRecord, null));
});
var insertTuples = this._bulkRemove(recordViewTuples);
changes.forEachAddedItem(function(addedRecord) {
return insertTuples.push(new RecordViewTuple(addedRecord, null));
});
this._bulkInsert(insertTuples);
for (var i = 0; i < insertTuples.length; i++) {
this._perViewChange(insertTuples[i].view, insertTuples[i].record);
}
for (var i = 0, ilen = this._viewContainer.length; i < ilen; i++) {
var viewRef = this._viewContainer.get(i);
viewRef.setLocal("last", i === ilen - 1);
}
changes.forEachIdentityChange(function(record) {
var viewRef = _this._viewContainer.get(record.currentIndex);
viewRef.setLocal("$implicit", record.item);
});
};
NgFor.prototype._perViewChange = function(view, record) {
view.setLocal("$implicit", record.item);
view.setLocal("index", record.currentIndex);
view.setLocal("even", record.currentIndex % 2 == 0);
view.setLocal("odd", record.currentIndex % 2 == 1);
};
NgFor.prototype._bulkRemove = function(tuples) {
tuples.sort(function(a, b) {
return a.record.previousIndex - b.record.previousIndex;
});
var movedTuples = [];
for (var i = tuples.length - 1; i >= 0; i--) {
var tuple = tuples[i];
if (lang_1.isPresent(tuple.record.currentIndex)) {
tuple.view = this._viewContainer.detach(tuple.record.previousIndex);
movedTuples.push(tuple);
} else {
this._viewContainer.remove(tuple.record.previousIndex);
}
}
return movedTuples;
};
NgFor.prototype._bulkInsert = function(tuples) {
tuples.sort(function(a, b) {
return a.record.currentIndex - b.record.currentIndex;
});
for (var i = 0; i < tuples.length; i++) {
var tuple = tuples[i];
if (lang_1.isPresent(tuple.view)) {
this._viewContainer.insert(tuple.view, tuple.record.currentIndex);
} else {
tuple.view = this._viewContainer.createEmbeddedView(this._templateRef, tuple.record.currentIndex);
}
}
return tuples;
};
NgFor = __decorate([ core_1.Directive({
selector: "[ngFor][ngForOf]",
inputs: [ "ngForTrackBy", "ngForOf", "ngForTemplate" ]
}), __metadata("design:paramtypes", [ core_1.ViewContainerRef, core_1.TemplateRef, core_1.IterableDiffers, core_1.ChangeDetectorRef ]) ], NgFor);
return NgFor;
}();
exports.NgFor = NgFor;
var RecordViewTuple = function() {
function RecordViewTuple(record, view) {
this.record = record;
this.view = view;
}
return RecordViewTuple;
}();
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(106);
var lang_1 = __webpack_require__(105);
var NgIf = function() {
function NgIf(_viewContainer, _templateRef) {
this._viewContainer = _viewContainer;
this._templateRef = _templateRef;
this._prevCondition = null;
}
Object.defineProperty(NgIf.prototype, "ngIf", {
set: function(newCondition) {
if (newCondition && (lang_1.isBlank(this._prevCondition) || !this._prevCondition)) {
this._prevCondition = true;
this._viewContainer.createEmbeddedView(this._templateRef);
} else if (!newCondition && (lang_1.isBlank(this._prevCondition) || this._prevCondition)) {
this._prevCondition = false;
this._viewContainer.clear();
}
},
enumerable: true,
configurable: true
});
NgIf = __decorate([ core_1.Directive({
selector: "[ngIf]",
inputs: [ "ngIf" ]
}), __metadata("design:paramtypes", [ core_1.ViewContainerRef, core_1.TemplateRef ]) ], NgIf);
return NgIf;
}();
exports.NgIf = NgIf;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(106);
var lang_1 = __webpack_require__(105);
var NgStyle = function() {
function NgStyle(_differs, _ngEl, _renderer) {
this._differs = _differs;
this._ngEl = _ngEl;
this._renderer = _renderer;
}
Object.defineProperty(NgStyle.prototype, "rawStyle", {
set: function(v) {
this._rawStyle = v;
if (lang_1.isBlank(this._differ) && lang_1.isPresent(v)) {
this._differ = this._differs.find(this._rawStyle).create(null);
}
},
enumerable: true,
configurable: true
});
NgStyle.prototype.ngDoCheck = function() {
if (lang_1.isPresent(this._differ)) {
var changes = this._differ.diff(this._rawStyle);
if (lang_1.isPresent(changes)) {
this._applyChanges(changes);
}
}
};
NgStyle.prototype._applyChanges = function(changes) {
var _this = this;
changes.forEachAddedItem(function(record) {
_this._setStyle(record.key, record.currentValue);
});
changes.forEachChangedItem(function(record) {
_this._setStyle(record.key, record.currentValue);
});
changes.forEachRemovedItem(function(record) {
_this._setStyle(record.key, null);
});
};
NgStyle.prototype._setStyle = function(name, val) {
this._renderer.setElementStyle(this._ngEl.nativeElement, name, val);
};
NgStyle = __decorate([ core_1.Directive({
selector: "[ngStyle]",
inputs: [ "rawStyle: ngStyle" ]
}), __metadata("design:paramtypes", [ core_1.KeyValueDiffers, core_1.ElementRef, core_1.Renderer ]) ], NgStyle);
return NgStyle;
}();
exports.NgStyle = NgStyle;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var core_1 = __webpack_require__(106);
var lang_1 = __webpack_require__(105);
var collection_1 = __webpack_require__(115);
var _WHEN_DEFAULT = lang_1.CONST_EXPR(new Object());
var SwitchView = function() {
function SwitchView(_viewContainerRef, _templateRef) {
this._viewContainerRef = _viewContainerRef;
this._templateRef = _templateRef;
}
SwitchView.prototype.create = function() {
this._viewContainerRef.createEmbeddedView(this._templateRef);
};
SwitchView.prototype.destroy = function() {
this._viewContainerRef.clear();
};
return SwitchView;
}();
exports.SwitchView = SwitchView;
var NgSwitch = function() {
function NgSwitch() {
this._useDefault = false;
this._valueViews = new collection_1.Map();
this._activeViews = [];
}
Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
set: function(value) {
this._emptyAllActiveViews();
this._useDefault = false;
var views = this._valueViews.get(value);
if (lang_1.isBlank(views)) {
this._useDefault = true;
views = lang_1.normalizeBlank(this._valueViews.get(_WHEN_DEFAULT));
}
this._activateViews(views);
this._switchValue = value;
},
enumerable: true,
configurable: true
});
NgSwitch.prototype._onWhenValueChanged = function(oldWhen, newWhen, view) {
this._deregisterView(oldWhen, view);
this._registerView(newWhen, view);
if (oldWhen === this._switchValue) {
view.destroy();
collection_1.ListWrapper.remove(this._activeViews, view);
} else if (newWhen === this._switchValue) {
if (this._useDefault) {
this._useDefault = false;
this._emptyAllActiveViews();
}
view.create();
this._activeViews.push(view);
}
if (this._activeViews.length === 0 && !this._useDefault) {
this._useDefault = true;
this._activateViews(this._valueViews.get(_WHEN_DEFAULT));
}
};
NgSwitch.prototype._emptyAllActiveViews = function() {
var activeContainers = this._activeViews;
for (var i = 0; i < activeContainers.length; i++) {
activeContainers[i].destroy();
}
this._activeViews = [];
};
NgSwitch.prototype._activateViews = function(views) {
if (lang_1.isPresent(views)) {
for (var i = 0; i < views.length; i++) {
views[i].create();
}
this._activeViews = views;
}
};
NgSwitch.prototype._registerView = function(value, view) {
var views = this._valueViews.get(value);
if (lang_1.isBlank(views)) {
views = [];
this._valueViews.set(value, views);
}
views.push(view);
};
NgSwitch.prototype._deregisterView = function(value, view) {
if (value === _WHEN_DEFAULT) return;
var views = this._valueViews.get(value);
if (views.length == 1) {
this._valueViews.delete(value);
} else {
collection_1.ListWrapper.remove(views, view);
}
};
NgSwitch = __decorate([ core_1.Directive({
selector: "[ngSwitch]",
inputs: [ "ngSwitch" ]
}), __metadata("design:paramtypes", []) ], NgSwitch);
return NgSwitch;
}();
exports.NgSwitch = NgSwitch;
var NgSwitchWhen = function() {
function NgSwitchWhen(viewContainer, templateRef, ngSwitch) {
this._value = _WHEN_DEFAULT;
this._switch = ngSwitch;
this._view = new SwitchView(viewContainer, templateRef);
}
Object.defineProperty(NgSwitchWhen.prototype, "ngSwitchWhen", {
set: function(value) {
this._switch._onWhenValueChanged(this._value, value, this._view);
this._value = value;
},
enumerable: true,
configurable: true
});
NgSwitchWhen = __decorate([ core_1.Directive({
selector: "[ngSwitchWhen]",
inputs: [ "ngSwitchWhen" ]
}), __param(2, core_1.Host()), __metadata("design:paramtypes", [ core_1.ViewContainerRef, core_1.TemplateRef, NgSwitch ]) ], NgSwitchWhen);
return NgSwitchWhen;
}();
exports.NgSwitchWhen = NgSwitchWhen;
var NgSwitchDefault = function() {
function NgSwitchDefault(viewContainer, templateRef, sswitch) {
sswitch._registerView(_WHEN_DEFAULT, new SwitchView(viewContainer, templateRef));
}
NgSwitchDefault = __decorate([ core_1.Directive({
selector: "[ngSwitchDefault]"
}), __param(2, core_1.Host()), __metadata("design:paramtypes", [ core_1.ViewContainerRef, core_1.TemplateRef, NgSwitch ]) ], NgSwitchDefault);
return NgSwitchDefault;
}();
exports.NgSwitchDefault = NgSwitchDefault;
}, function(module, exports) {
"use strict";
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var ng_class_1 = __webpack_require__(349);
var ng_for_1 = __webpack_require__(350);
var ng_if_1 = __webpack_require__(351);
var ng_style_1 = __webpack_require__(352);
var ng_switch_1 = __webpack_require__(353);
exports.CORE_DIRECTIVES = lang_1.CONST_EXPR([ ng_class_1.NgClass, ng_for_1.NgFor, ng_if_1.NgIf, ng_style_1.NgStyle, ng_switch_1.NgSwitch, ng_switch_1.NgSwitchWhen, ng_switch_1.NgSwitchDefault ]);
}, function(module, exports, __webpack_require__) {
"use strict";
var model_1 = __webpack_require__(357);
exports.AbstractControl = model_1.AbstractControl;
exports.Control = model_1.Control;
exports.ControlGroup = model_1.ControlGroup;
exports.ControlArray = model_1.ControlArray;
var abstract_control_directive_1 = __webpack_require__(358);
exports.AbstractControlDirective = abstract_control_directive_1.AbstractControlDirective;
var control_container_1 = __webpack_require__(359);
exports.ControlContainer = control_container_1.ControlContainer;
var ng_control_name_1 = __webpack_require__(360);
exports.NgControlName = ng_control_name_1.NgControlName;
var ng_form_control_1 = __webpack_require__(371);
exports.NgFormControl = ng_form_control_1.NgFormControl;
var ng_model_1 = __webpack_require__(372);
exports.NgModel = ng_model_1.NgModel;
var ng_control_1 = __webpack_require__(361);
exports.NgControl = ng_control_1.NgControl;
var ng_control_group_1 = __webpack_require__(373);
exports.NgControlGroup = ng_control_group_1.NgControlGroup;
var ng_form_model_1 = __webpack_require__(374);
exports.NgFormModel = ng_form_model_1.NgFormModel;
var ng_form_1 = __webpack_require__(375);
exports.NgForm = ng_form_1.NgForm;
var control_value_accessor_1 = __webpack_require__(362);
exports.NG_VALUE_ACCESSOR = control_value_accessor_1.NG_VALUE_ACCESSOR;
var default_value_accessor_1 = __webpack_require__(365);
exports.DefaultValueAccessor = default_value_accessor_1.DefaultValueAccessor;
var ng_control_status_1 = __webpack_require__(376);
exports.NgControlStatus = ng_control_status_1.NgControlStatus;
var checkbox_value_accessor_1 = __webpack_require__(367);
exports.CheckboxControlValueAccessor = checkbox_value_accessor_1.CheckboxControlValueAccessor;
var select_control_value_accessor_1 = __webpack_require__(368);
exports.NgSelectOption = select_control_value_accessor_1.NgSelectOption;
exports.SelectControlValueAccessor = select_control_value_accessor_1.SelectControlValueAccessor;
var directives_1 = __webpack_require__(377);
exports.FORM_DIRECTIVES = directives_1.FORM_DIRECTIVES;
exports.RadioButtonState = directives_1.RadioButtonState;
var validators_1 = __webpack_require__(364);
exports.NG_VALIDATORS = validators_1.NG_VALIDATORS;
exports.NG_ASYNC_VALIDATORS = validators_1.NG_ASYNC_VALIDATORS;
exports.Validators = validators_1.Validators;
var validators_2 = __webpack_require__(378);
exports.RequiredValidator = validators_2.RequiredValidator;
exports.MinLengthValidator = validators_2.MinLengthValidator;
exports.MaxLengthValidator = validators_2.MaxLengthValidator;
exports.PatternValidator = validators_2.PatternValidator;
var form_builder_1 = __webpack_require__(379);
exports.FormBuilder = form_builder_1.FormBuilder;
var form_builder_2 = __webpack_require__(379);
var radio_control_value_accessor_1 = __webpack_require__(369);
var lang_1 = __webpack_require__(105);
exports.FORM_PROVIDERS = lang_1.CONST_EXPR([ form_builder_2.FormBuilder, radio_control_value_accessor_1.RadioControlRegistry ]);
exports.FORM_BINDINGS = exports.FORM_PROVIDERS;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(105);
var async_1 = __webpack_require__(150);
var promise_1 = __webpack_require__(151);
var collection_1 = __webpack_require__(115);
exports.VALID = "VALID";
exports.INVALID = "INVALID";
exports.PENDING = "PENDING";
function isControl(control) {
return control instanceof AbstractControl;
}
exports.isControl = isControl;
function _find(control, path) {
if (lang_1.isBlank(path)) return null;
if (!(path instanceof Array)) {
path = path.split("/");
}
if (path instanceof Array && collection_1.ListWrapper.isEmpty(path)) return null;
return path.reduce(function(v, name) {
if (v instanceof ControlGroup) {
return lang_1.isPresent(v.controls[name]) ? v.controls[name] : null;
} else if (v instanceof ControlArray) {
var index = name;
return lang_1.isPresent(v.at(index)) ? v.at(index) : null;
} else {
return null;
}
}, control);
}
function toObservable(r) {
return promise_1.PromiseWrapper.isPromise(r) ? async_1.ObservableWrapper.fromPromise(r) : r;
}
var AbstractControl = function() {
function AbstractControl(validator, asyncValidator) {
this.validator = validator;
this.asyncValidator = asyncValidator;
this._pristine = true;
this._touched = false;
}
Object.defineProperty(AbstractControl.prototype, "value", {
get: function() {
return this._value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "status", {
get: function() {
return this._status;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "valid", {
get: function() {
return this._status === exports.VALID;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "errors", {
get: function() {
return this._errors;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "pristine", {
get: function() {
return this._pristine;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "dirty", {
get: function() {
return !this.pristine;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "touched", {
get: function() {
return this._touched;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "untouched", {
get: function() {
return !this._touched;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "valueChanges", {
get: function() {
return this._valueChanges;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "statusChanges", {
get: function() {
return this._statusChanges;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "pending", {
get: function() {
return this._status == exports.PENDING;
},
enumerable: true,
configurable: true
});
AbstractControl.prototype.markAsTouched = function() {
this._touched = true;
};
AbstractControl.prototype.markAsDirty = function(_a) {
var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
onlySelf = lang_1.normalizeBool(onlySelf);
this._pristine = false;
if (lang_1.isPresent(this._parent) && !onlySelf) {
this._parent.markAsDirty({
onlySelf: onlySelf
});
}
};
AbstractControl.prototype.markAsPending = function(_a) {
var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
onlySelf = lang_1.normalizeBool(onlySelf);
this._status = exports.PENDING;
if (lang_1.isPresent(this._parent) && !onlySelf) {
this._parent.markAsPending({
onlySelf: onlySelf
});
}
};
AbstractControl.prototype.setParent = function(parent) {
this._parent = parent;
};
AbstractControl.prototype.updateValueAndValidity = function(_a) {
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
onlySelf = lang_1.normalizeBool(onlySelf);
emitEvent = lang_1.isPresent(emitEvent) ? emitEvent : true;
this._updateValue();
this._errors = this._runValidator();
this._status = this._calculateStatus();
if (this._status == exports.VALID || this._status == exports.PENDING) {
this._runAsyncValidator(emitEvent);
}
if (emitEvent) {
async_1.ObservableWrapper.callEmit(this._valueChanges, this._value);
async_1.ObservableWrapper.callEmit(this._statusChanges, this._status);
}
if (lang_1.isPresent(this._parent) && !onlySelf) {
this._parent.updateValueAndValidity({
onlySelf: onlySelf,
emitEvent: emitEvent
});
}
};
AbstractControl.prototype._runValidator = function() {
return lang_1.isPresent(this.validator) ? this.validator(this) : null;
};
AbstractControl.prototype._runAsyncValidator = function(emitEvent) {
var _this = this;
if (lang_1.isPresent(this.asyncValidator)) {
this._status = exports.PENDING;
this._cancelExistingSubscription();
var obs = toObservable(this.asyncValidator(this));
this._asyncValidationSubscription = async_1.ObservableWrapper.subscribe(obs, function(res) {
return _this.setErrors(res, {
emitEvent: emitEvent
});
});
}
};
AbstractControl.prototype._cancelExistingSubscription = function() {
if (lang_1.isPresent(this._asyncValidationSubscription)) {
async_1.ObservableWrapper.dispose(this._asyncValidationSubscription);
}
};
AbstractControl.prototype.setErrors = function(errors, _a) {
var emitEvent = (_a === void 0 ? {} : _a).emitEvent;
emitEvent = lang_1.isPresent(emitEvent) ? emitEvent : true;
this._errors = errors;
this._status = this._calculateStatus();
if (emitEvent) {
async_1.ObservableWrapper.callEmit(this._statusChanges, this._status);
}
if (lang_1.isPresent(this._parent)) {
this._parent._updateControlsErrors();
}
};
AbstractControl.prototype.find = function(path) {
return _find(this, path);
};
AbstractControl.prototype.getError = function(errorCode, path) {
if (path === void 0) {
path = null;
}
var control = lang_1.isPresent(path) && !collection_1.ListWrapper.isEmpty(path) ? this.find(path) : this;
if (lang_1.isPresent(control) && lang_1.isPresent(control._errors)) {
return collection_1.StringMapWrapper.get(control._errors, errorCode);
} else {
return null;
}
};
AbstractControl.prototype.hasError = function(errorCode, path) {
if (path === void 0) {
path = null;
}
return lang_1.isPresent(this.getError(errorCode, path));
};
Object.defineProperty(AbstractControl.prototype, "root", {
get: function() {
var x = this;
while (lang_1.isPresent(x._parent)) {
x = x._parent;
}
return x;
},
enumerable: true,
configurable: true
});
AbstractControl.prototype._updateControlsErrors = function() {
this._status = this._calculateStatus();
if (lang_1.isPresent(this._parent)) {
this._parent._updateControlsErrors();
}
};
AbstractControl.prototype._initObservables = function() {
this._valueChanges = new async_1.EventEmitter();
this._statusChanges = new async_1.EventEmitter();
};
AbstractControl.prototype._calculateStatus = function() {
if (lang_1.isPresent(this._errors)) return exports.INVALID;
if (this._anyControlsHaveStatus(exports.PENDING)) return exports.PENDING;
if (this._anyControlsHaveStatus(exports.INVALID)) return exports.INVALID;
return exports.VALID;
};
return AbstractControl;
}();
exports.AbstractControl = AbstractControl;
var Control = function(_super) {
__extends(Control, _super);
function Control(value, validator, asyncValidator) {
if (value === void 0) {
value = null;
}
if (validator === void 0) {
validator = null;
}
if (asyncValidator === void 0) {
asyncValidator = null;
}
_super.call(this, validator, asyncValidator);
this._value = value;
this.updateValueAndValidity({
onlySelf: true,
emitEvent: false
});
this._initObservables();
}
Control.prototype.updateValue = function(value, _a) {
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange;
emitModelToViewChange = lang_1.isPresent(emitModelToViewChange) ? emitModelToViewChange : true;
this._value = value;
if (lang_1.isPresent(this._onChange) && emitModelToViewChange) this._onChange(this._value);
this.updateValueAndValidity({
onlySelf: onlySelf,
emitEvent: emitEvent
});
};
Control.prototype._updateValue = function() {};
Control.prototype._anyControlsHaveStatus = function(status) {
return false;
};
Control.prototype.registerOnChange = function(fn) {
this._onChange = fn;
};
return Control;
}(AbstractControl);
exports.Control = Control;
var ControlGroup = function(_super) {
__extends(ControlGroup, _super);
function ControlGroup(controls, optionals, validator, asyncValidator) {
if (optionals === void 0) {
optionals = null;
}
if (validator === void 0) {
validator = null;
}
if (asyncValidator === void 0) {
asyncValidator = null;
}
_super.call(this, validator, asyncValidator);
this.controls = controls;
this._optionals = lang_1.isPresent(optionals) ? optionals : {};
this._initObservables();
this._setParentForControls();
this.updateValueAndValidity({
onlySelf: true,
emitEvent: false
});
}
ControlGroup.prototype.addControl = function(name, control) {
this.controls[name] = control;
control.setParent(this);
};
ControlGroup.prototype.removeControl = function(name) {
collection_1.StringMapWrapper.delete(this.controls, name);
};
ControlGroup.prototype.include = function(controlName) {
collection_1.StringMapWrapper.set(this._optionals, controlName, true);
this.updateValueAndValidity();
};
ControlGroup.prototype.exclude = function(controlName) {
collection_1.StringMapWrapper.set(this._optionals, controlName, false);
this.updateValueAndValidity();
};
ControlGroup.prototype.contains = function(controlName) {
var c = collection_1.StringMapWrapper.contains(this.controls, controlName);
return c && this._included(controlName);
};
ControlGroup.prototype._setParentForControls = function() {
var _this = this;
collection_1.StringMapWrapper.forEach(this.controls, function(control, name) {
control.setParent(_this);
});
};
ControlGroup.prototype._updateValue = function() {
this._value = this._reduceValue();
};
ControlGroup.prototype._anyControlsHaveStatus = function(status) {
var _this = this;
var res = false;
collection_1.StringMapWrapper.forEach(this.controls, function(control, name) {
res = res || _this.contains(name) && control.status == status;
});
return res;
};
ControlGroup.prototype._reduceValue = function() {
return this._reduceChildren({}, function(acc, control, name) {
acc[name] = control.value;
return acc;
});
};
ControlGroup.prototype._reduceChildren = function(initValue, fn) {
var _this = this;
var res = initValue;
collection_1.StringMapWrapper.forEach(this.controls, function(control, name) {
if (_this._included(name)) {
res = fn(res, control, name);
}
});
return res;
};
ControlGroup.prototype._included = function(controlName) {
var isOptional = collection_1.StringMapWrapper.contains(this._optionals, controlName);
return !isOptional || collection_1.StringMapWrapper.get(this._optionals, controlName);
};
return ControlGroup;
}(AbstractControl);
exports.ControlGroup = ControlGroup;
var ControlArray = function(_super) {
__extends(ControlArray, _super);
function ControlArray(controls, validator, asyncValidator) {
if (validator === void 0) {
validator = null;
}
if (asyncValidator === void 0) {
asyncValidator = null;
}
_super.call(this, validator, asyncValidator);
this.controls = controls;
this._initObservables();
this._setParentForControls();
this.updateValueAndValidity({
onlySelf: true,
emitEvent: false
});
}
ControlArray.prototype.at = function(index) {
return this.controls[index];
};
ControlArray.prototype.push = function(control) {
this.controls.push(control);
control.setParent(this);
this.updateValueAndValidity();
};
ControlArray.prototype.insert = function(index, control) {
collection_1.ListWrapper.insert(this.controls, index, control);
control.setParent(this);
this.updateValueAndValidity();
};
ControlArray.prototype.removeAt = function(index) {
collection_1.ListWrapper.removeAt(this.controls, index);
this.updateValueAndValidity();
};
Object.defineProperty(ControlArray.prototype, "length", {
get: function() {
return this.controls.length;
},
enumerable: true,
configurable: true
});
ControlArray.prototype._updateValue = function() {
this._value = this.controls.map(function(control) {
return control.value;
});
};
ControlArray.prototype._anyControlsHaveStatus = function(status) {
return this.controls.some(function(c) {
return c.status == status;
});
};
ControlArray.prototype._setParentForControls = function() {
var _this = this;
this.controls.forEach(function(control) {
control.setParent(_this);
});
};
return ControlArray;
}(AbstractControl);
exports.ControlArray = ControlArray;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var AbstractControlDirective = function() {
function AbstractControlDirective() {}
Object.defineProperty(AbstractControlDirective.prototype, "control", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "value", {
get: function() {
return lang_1.isPresent(this.control) ? this.control.value : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "valid", {
get: function() {
return lang_1.isPresent(this.control) ? this.control.valid : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "errors", {
get: function() {
return lang_1.isPresent(this.control) ? this.control.errors : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
get: function() {
return lang_1.isPresent(this.control) ? this.control.pristine : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
get: function() {
return lang_1.isPresent(this.control) ? this.control.dirty : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "touched", {
get: function() {
return lang_1.isPresent(this.control) ? this.control.touched : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
get: function() {
return lang_1.isPresent(this.control) ? this.control.untouched : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "path", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
return AbstractControlDirective;
}();
exports.AbstractControlDirective = AbstractControlDirective;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var abstract_control_directive_1 = __webpack_require__(358);
var ControlContainer = function(_super) {
__extends(ControlContainer, _super);
function ControlContainer() {
_super.apply(this, arguments);
}
Object.defineProperty(ControlContainer.prototype, "formDirective", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ControlContainer.prototype, "path", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
return ControlContainer;
}(abstract_control_directive_1.AbstractControlDirective);
exports.ControlContainer = ControlContainer;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var lang_1 = __webpack_require__(105);
var async_1 = __webpack_require__(150);
var core_1 = __webpack_require__(106);
var control_container_1 = __webpack_require__(359);
var ng_control_1 = __webpack_require__(361);
var control_value_accessor_1 = __webpack_require__(362);
var shared_1 = __webpack_require__(363);
var validators_1 = __webpack_require__(364);
var controlNameBinding = lang_1.CONST_EXPR(new core_1.Provider(ng_control_1.NgControl, {
useExisting: core_1.forwardRef(function() {
return NgControlName;
})
}));
var NgControlName = function(_super) {
__extends(NgControlName, _super);
function NgControlName(_parent, _validators, _asyncValidators, valueAccessors) {
_super.call(this);
this._parent = _parent;
this._validators = _validators;
this._asyncValidators = _asyncValidators;
this.update = new async_1.EventEmitter();
this._added = false;
this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
}
NgControlName.prototype.ngOnChanges = function(changes) {
if (!this._added) {
this.formDirective.addControl(this);
this._added = true;
}
if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
this.viewModel = this.model;
this.formDirective.updateModel(this, this.model);
}
};
NgControlName.prototype.ngOnDestroy = function() {
this.formDirective.removeControl(this);
};
NgControlName.prototype.viewToModelUpdate = function(newValue) {
this.viewModel = newValue;
async_1.ObservableWrapper.callEmit(this.update, newValue);
};
Object.defineProperty(NgControlName.prototype, "path", {
get: function() {
return shared_1.controlPath(this.name, this._parent);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlName.prototype, "formDirective", {
get: function() {
return this._parent.formDirective;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlName.prototype, "validator", {
get: function() {
return shared_1.composeValidators(this._validators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlName.prototype, "asyncValidator", {
get: function() {
return shared_1.composeAsyncValidators(this._asyncValidators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlName.prototype, "control", {
get: function() {
return this.formDirective.getControl(this);
},
enumerable: true,
configurable: true
});
NgControlName = __decorate([ core_1.Directive({
selector: "[ngControl]",
bindings: [ controlNameBinding ],
inputs: [ "name: ngControl", "model: ngModel" ],
outputs: [ "update: ngModelChange" ],
exportAs: "ngForm"
}), __param(0, core_1.Host()), __param(0, core_1.SkipSelf()), __param(1, core_1.Optional()), __param(1, core_1.Self()), __param(1, core_1.Inject(validators_1.NG_VALIDATORS)), __param(2, core_1.Optional()), __param(2, core_1.Self()), __param(2, core_1.Inject(validators_1.NG_ASYNC_VALIDATORS)), __param(3, core_1.Optional()), __param(3, core_1.Self()), __param(3, core_1.Inject(control_value_accessor_1.NG_VALUE_ACCESSOR)), __metadata("design:paramtypes", [ control_container_1.ControlContainer, Array, Array, Array ]) ], NgControlName);
return NgControlName;
}(ng_control_1.NgControl);
exports.NgControlName = NgControlName;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var abstract_control_directive_1 = __webpack_require__(358);
var exceptions_1 = __webpack_require__(117);
var NgControl = function(_super) {
__extends(NgControl, _super);
function NgControl() {
_super.apply(this, arguments);
this.name = null;
this.valueAccessor = null;
}
Object.defineProperty(NgControl.prototype, "validator", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControl.prototype, "asyncValidator", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return NgControl;
}(abstract_control_directive_1.AbstractControlDirective);
exports.NgControl = NgControl;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(106);
var lang_1 = __webpack_require__(105);
exports.NG_VALUE_ACCESSOR = lang_1.CONST_EXPR(new core_1.OpaqueToken("NgValueAccessor"));
}, function(module, exports, __webpack_require__) {
"use strict";
var collection_1 = __webpack_require__(115);
var lang_1 = __webpack_require__(105);
var exceptions_1 = __webpack_require__(117);
var validators_1 = __webpack_require__(364);
var default_value_accessor_1 = __webpack_require__(365);
var number_value_accessor_1 = __webpack_require__(366);
var checkbox_value_accessor_1 = __webpack_require__(367);
var select_control_value_accessor_1 = __webpack_require__(368);
var radio_control_value_accessor_1 = __webpack_require__(369);
var normalize_validator_1 = __webpack_require__(370);
function controlPath(name, parent) {
var p = collection_1.ListWrapper.clone(parent.path);
p.push(name);
return p;
}
exports.controlPath = controlPath;
function setUpControl(control, dir) {
if (lang_1.isBlank(control)) _throwError(dir, "Cannot find control");
if (lang_1.isBlank(dir.valueAccessor)) _throwError(dir, "No value accessor for");
control.validator = validators_1.Validators.compose([ control.validator, dir.validator ]);
control.asyncValidator = validators_1.Validators.composeAsync([ control.asyncValidator, dir.asyncValidator ]);
dir.valueAccessor.writeValue(control.value);
dir.valueAccessor.registerOnChange(function(newValue) {
dir.viewToModelUpdate(newValue);
control.updateValue(newValue, {
emitModelToViewChange: false
});
control.markAsDirty();
});
control.registerOnChange(function(newValue) {
return dir.valueAccessor.writeValue(newValue);
});
dir.valueAccessor.registerOnTouched(function() {
return control.markAsTouched();
});
}
exports.setUpControl = setUpControl;
function setUpControlGroup(control, dir) {
if (lang_1.isBlank(control)) _throwError(dir, "Cannot find control");
control.validator = validators_1.Validators.compose([ control.validator, dir.validator ]);
control.asyncValidator = validators_1.Validators.composeAsync([ control.asyncValidator, dir.asyncValidator ]);
}
exports.setUpControlGroup = setUpControlGroup;
function _throwError(dir, message) {
var path = dir.path.join(" -> ");
throw new exceptions_1.BaseException(message + " '" + path + "'");
}
function composeValidators(validators) {
return lang_1.isPresent(validators) ? validators_1.Validators.compose(validators.map(normalize_validator_1.normalizeValidator)) : null;
}
exports.composeValidators = composeValidators;
function composeAsyncValidators(validators) {
return lang_1.isPresent(validators) ? validators_1.Validators.composeAsync(validators.map(normalize_validator_1.normalizeValidator)) : null;
}
exports.composeAsyncValidators = composeAsyncValidators;
function isPropertyUpdated(changes, viewModel) {
if (!collection_1.StringMapWrapper.contains(changes, "model")) return false;
var change = changes["model"];
if (change.isFirstChange()) return true;
return !lang_1.looseIdentical(viewModel, change.currentValue);
}
exports.isPropertyUpdated = isPropertyUpdated;
function selectValueAccessor(dir, valueAccessors) {
if (lang_1.isBlank(valueAccessors)) return null;
var defaultAccessor;
var builtinAccessor;
var customAccessor;
valueAccessors.forEach(function(v) {
if (lang_1.hasConstructor(v, default_value_accessor_1.DefaultValueAccessor)) {
defaultAccessor = v;
} else if (lang_1.hasConstructor(v, checkbox_value_accessor_1.CheckboxControlValueAccessor) || lang_1.hasConstructor(v, number_value_accessor_1.NumberValueAccessor) || lang_1.hasConstructor(v, select_control_value_accessor_1.SelectControlValueAccessor) || lang_1.hasConstructor(v, radio_control_value_accessor_1.RadioControlValueAccessor)) {
if (lang_1.isPresent(builtinAccessor)) _throwError(dir, "More than one built-in value accessor matches");
builtinAccessor = v;
} else {
if (lang_1.isPresent(customAccessor)) _throwError(dir, "More than one custom value accessor matches");
customAccessor = v;
}
});
if (lang_1.isPresent(customAccessor)) return customAccessor;
if (lang_1.isPresent(builtinAccessor)) return builtinAccessor;
if (lang_1.isPresent(defaultAccessor)) return defaultAccessor;
_throwError(dir, "No valid value accessor for");
return null;
}
exports.selectValueAccessor = selectValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var promise_1 = __webpack_require__(151);
var async_1 = __webpack_require__(150);
var collection_1 = __webpack_require__(115);
var core_1 = __webpack_require__(106);
exports.NG_VALIDATORS = lang_1.CONST_EXPR(new core_1.OpaqueToken("NgValidators"));
exports.NG_ASYNC_VALIDATORS = lang_1.CONST_EXPR(new core_1.OpaqueToken("NgAsyncValidators"));
var Validators = function() {
function Validators() {}
Validators.required = function(control) {
return lang_1.isBlank(control.value) || lang_1.isString(control.value) && control.value == "" ? {
required: true
} : null;
};
Validators.minLength = function(minLength) {
return function(control) {
if (lang_1.isPresent(Validators.required(control))) return null;
var v = control.value;
return v.length < minLength ? {
minlength: {
requiredLength: minLength,
actualLength: v.length
}
} : null;
};
};
Validators.maxLength = function(maxLength) {
return function(control) {
if (lang_1.isPresent(Validators.required(control))) return null;
var v = control.value;
return v.length > maxLength ? {
maxlength: {
requiredLength: maxLength,
actualLength: v.length
}
} : null;
};
};
Validators.pattern = function(pattern) {
return function(control) {
if (lang_1.isPresent(Validators.required(control))) return null;
var regex = new RegExp("^" + pattern + "$");
var v = control.value;
return regex.test(v) ? null : {
pattern: {
requiredPattern: "^" + pattern + "$",
actualValue: v
}
};
};
};
Validators.nullValidator = function(c) {
return null;
};
Validators.compose = function(validators) {
if (lang_1.isBlank(validators)) return null;
var presentValidators = validators.filter(lang_1.isPresent);
if (presentValidators.length == 0) return null;
return function(control) {
return _mergeErrors(_executeValidators(control, presentValidators));
};
};
Validators.composeAsync = function(validators) {
if (lang_1.isBlank(validators)) return null;
var presentValidators = validators.filter(lang_1.isPresent);
if (presentValidators.length == 0) return null;
return function(control) {
var promises = _executeValidators(control, presentValidators).map(_convertToPromise);
return promise_1.PromiseWrapper.all(promises).then(_mergeErrors);
};
};
return Validators;
}();
exports.Validators = Validators;
function _convertToPromise(obj) {
return promise_1.PromiseWrapper.isPromise(obj) ? obj : async_1.ObservableWrapper.toPromise(obj);
}
function _executeValidators(control, validators) {
return validators.map(function(v) {
return v(control);
});
}
function _mergeErrors(arrayOfErrors) {
var res = arrayOfErrors.reduce(function(res, errors) {
return lang_1.isPresent(errors) ? collection_1.StringMapWrapper.merge(res, errors) : res;
}, {});
return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(106);
var control_value_accessor_1 = __webpack_require__(362);
var lang_1 = __webpack_require__(105);
var DEFAULT_VALUE_ACCESSOR = lang_1.CONST_EXPR(new core_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, {
useExisting: core_1.forwardRef(function() {
return DefaultValueAccessor;
}),
multi: true
}));
var DefaultValueAccessor = function() {
function DefaultValueAccessor(_renderer, _elementRef) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this.onChange = function(_) {};
this.onTouched = function() {};
}
DefaultValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = lang_1.isBlank(value) ? "" : value;
this._renderer.setElementProperty(this._elementRef.nativeElement, "value", normalizedValue);
};
DefaultValueAccessor.prototype.registerOnChange = function(fn) {
this.onChange = fn;
};
DefaultValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
DefaultValueAccessor = __decorate([ core_1.Directive({
selector: "input:not([type=checkbox])[ngControl],textarea[ngControl],input:not([type=checkbox])[ngFormControl],textarea[ngFormControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]",
host: {
"(input)": "onChange($event.target.value)",
"(blur)": "onTouched()"
},
bindings: [ DEFAULT_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.Renderer, core_1.ElementRef ]) ], DefaultValueAccessor);
return DefaultValueAccessor;
}();
exports.DefaultValueAccessor = DefaultValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(106);
var control_value_accessor_1 = __webpack_require__(362);
var lang_1 = __webpack_require__(105);
var NUMBER_VALUE_ACCESSOR = lang_1.CONST_EXPR(new core_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, {
useExisting: core_1.forwardRef(function() {
return NumberValueAccessor;
}),
multi: true
}));
var NumberValueAccessor = function() {
function NumberValueAccessor(_renderer, _elementRef) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this.onChange = function(_) {};
this.onTouched = function() {};
}
NumberValueAccessor.prototype.writeValue = function(value) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "value", value);
};
NumberValueAccessor.prototype.registerOnChange = function(fn) {
this.onChange = function(value) {
fn(lang_1.NumberWrapper.parseFloat(value));
};
};
NumberValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
NumberValueAccessor = __decorate([ core_1.Directive({
selector: "input[type=number][ngControl],input[type=number][ngFormControl],input[type=number][ngModel]",
host: {
"(change)": "onChange($event.target.value)",
"(input)": "onChange($event.target.value)",
"(blur)": "onTouched()"
},
bindings: [ NUMBER_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.Renderer, core_1.ElementRef ]) ], NumberValueAccessor);
return NumberValueAccessor;
}();
exports.NumberValueAccessor = NumberValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(106);
var control_value_accessor_1 = __webpack_require__(362);
var lang_1 = __webpack_require__(105);
var CHECKBOX_VALUE_ACCESSOR = lang_1.CONST_EXPR(new core_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, {
useExisting: core_1.forwardRef(function() {
return CheckboxControlValueAccessor;
}),
multi: true
}));
var CheckboxControlValueAccessor = function() {
function CheckboxControlValueAccessor(_renderer, _elementRef) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this.onChange = function(_) {};
this.onTouched = function() {};
}
CheckboxControlValueAccessor.prototype.writeValue = function(value) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "checked", value);
};
CheckboxControlValueAccessor.prototype.registerOnChange = function(fn) {
this.onChange = fn;
};
CheckboxControlValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
CheckboxControlValueAccessor = __decorate([ core_1.Directive({
selector: "input[type=checkbox][ngControl],input[type=checkbox][ngFormControl],input[type=checkbox][ngModel]",
host: {
"(change)": "onChange($event.target.checked)",
"(blur)": "onTouched()"
},
providers: [ CHECKBOX_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.Renderer, core_1.ElementRef ]) ], CheckboxControlValueAccessor);
return CheckboxControlValueAccessor;
}();
exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var core_1 = __webpack_require__(106);
var async_1 = __webpack_require__(150);
var control_value_accessor_1 = __webpack_require__(362);
var lang_1 = __webpack_require__(105);
var SELECT_VALUE_ACCESSOR = lang_1.CONST_EXPR(new core_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, {
useExisting: core_1.forwardRef(function() {
return SelectControlValueAccessor;
}),
multi: true
}));
var NgSelectOption = function() {
function NgSelectOption() {}
NgSelectOption = __decorate([ core_1.Directive({
selector: "option"
}), __metadata("design:paramtypes", []) ], NgSelectOption);
return NgSelectOption;
}();
exports.NgSelectOption = NgSelectOption;
var SelectControlValueAccessor = function() {
function SelectControlValueAccessor(_renderer, _elementRef, query) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this.onChange = function(_) {};
this.onTouched = function() {};
this._updateValueWhenListOfOptionsChanges(query);
}
SelectControlValueAccessor.prototype.writeValue = function(value) {
this.value = value;
this._renderer.setElementProperty(this._elementRef.nativeElement, "value", value);
};
SelectControlValueAccessor.prototype.registerOnChange = function(fn) {
this.onChange = fn;
};
SelectControlValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
SelectControlValueAccessor.prototype._updateValueWhenListOfOptionsChanges = function(query) {
var _this = this;
async_1.ObservableWrapper.subscribe(query.changes, function(_) {
return _this.writeValue(_this.value);
});
};
SelectControlValueAccessor = __decorate([ core_1.Directive({
selector: "select[ngControl],select[ngFormControl],select[ngModel]",
host: {
"(input)": "onChange($event.target.value)",
"(blur)": "onTouched()"
},
bindings: [ SELECT_VALUE_ACCESSOR ]
}), __param(2, core_1.Query(NgSelectOption, {
descendants: true
})), __metadata("design:paramtypes", [ core_1.Renderer, core_1.ElementRef, core_1.QueryList ]) ], SelectControlValueAccessor);
return SelectControlValueAccessor;
}();
exports.SelectControlValueAccessor = SelectControlValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(106);
var control_value_accessor_1 = __webpack_require__(362);
var ng_control_1 = __webpack_require__(361);
var lang_1 = __webpack_require__(105);
var collection_1 = __webpack_require__(115);
var RADIO_VALUE_ACCESSOR = lang_1.CONST_EXPR(new core_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, {
useExisting: core_1.forwardRef(function() {
return RadioControlValueAccessor;
}),
multi: true
}));
var RadioControlRegistry = function() {
function RadioControlRegistry() {
this._accessors = [];
}
RadioControlRegistry.prototype.add = function(control, accessor) {
this._accessors.push([ control, accessor ]);
};
RadioControlRegistry.prototype.remove = function(accessor) {
var indexToRemove = -1;
for (var i = 0; i < this._accessors.length; ++i) {
if (this._accessors[i][1] === accessor) {
indexToRemove = i;
}
}
collection_1.ListWrapper.removeAt(this._accessors, indexToRemove);
};
RadioControlRegistry.prototype.select = function(accessor) {
this._accessors.forEach(function(c) {
if (c[0].control.root === accessor._control.control.root && c[1] !== accessor) {
c[1].fireUncheck();
}
});
};
RadioControlRegistry = __decorate([ core_1.Injectable(), __metadata("design:paramtypes", []) ], RadioControlRegistry);
return RadioControlRegistry;
}();
exports.RadioControlRegistry = RadioControlRegistry;
var RadioButtonState = function() {
function RadioButtonState(checked, value) {
this.checked = checked;
this.value = value;
}
return RadioButtonState;
}();
exports.RadioButtonState = RadioButtonState;
var RadioControlValueAccessor = function() {
function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this._registry = _registry;
this._injector = _injector;
this.onChange = function() {};
this.onTouched = function() {};
}
RadioControlValueAccessor.prototype.ngOnInit = function() {
this._control = this._injector.get(ng_control_1.NgControl);
this._registry.add(this._control, this);
};
RadioControlValueAccessor.prototype.ngOnDestroy = function() {
this._registry.remove(this);
};
RadioControlValueAccessor.prototype.writeValue = function(value) {
this._state = value;
if (lang_1.isPresent(value) && value.checked) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "checked", true);
}
};
RadioControlValueAccessor.prototype.registerOnChange = function(fn) {
var _this = this;
this._fn = fn;
this.onChange = function() {
fn(new RadioButtonState(true, _this._state.value));
_this._registry.select(_this);
};
};
RadioControlValueAccessor.prototype.fireUncheck = function() {
this._fn(new RadioButtonState(false, this._state.value));
};
RadioControlValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
__decorate([ core_1.Input(), __metadata("design:type", String) ], RadioControlValueAccessor.prototype, "name", void 0);
RadioControlValueAccessor = __decorate([ core_1.Directive({
selector: "input[type=radio][ngControl],input[type=radio][ngFormControl],input[type=radio][ngModel]",
host: {
"(change)": "onChange()",
"(blur)": "onTouched()"
},
providers: [ RADIO_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.Renderer, core_1.ElementRef, RadioControlRegistry, core_1.Injector ]) ], RadioControlValueAccessor);
return RadioControlValueAccessor;
}();
exports.RadioControlValueAccessor = RadioControlValueAccessor;
}, function(module, exports) {
"use strict";
function normalizeValidator(validator) {
if (validator.validate !== undefined) {
return function(c) {
return validator.validate(c);
};
} else {
return validator;
}
}
exports.normalizeValidator = normalizeValidator;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var lang_1 = __webpack_require__(105);
var collection_1 = __webpack_require__(115);
var async_1 = __webpack_require__(150);
var core_1 = __webpack_require__(106);
var ng_control_1 = __webpack_require__(361);
var validators_1 = __webpack_require__(364);
var control_value_accessor_1 = __webpack_require__(362);
var shared_1 = __webpack_require__(363);
var formControlBinding = lang_1.CONST_EXPR(new core_1.Provider(ng_control_1.NgControl, {
useExisting: core_1.forwardRef(function() {
return NgFormControl;
})
}));
var NgFormControl = function(_super) {
__extends(NgFormControl, _super);
function NgFormControl(_validators, _asyncValidators, valueAccessors) {
_super.call(this);
this._validators = _validators;
this._asyncValidators = _asyncValidators;
this.update = new async_1.EventEmitter();
this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
}
NgFormControl.prototype.ngOnChanges = function(changes) {
if (this._isControlChanged(changes)) {
shared_1.setUpControl(this.form, this);
this.form.updateValueAndValidity({
emitEvent: false
});
}
if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
this.form.updateValue(this.model);
this.viewModel = this.model;
}
};
Object.defineProperty(NgFormControl.prototype, "path", {
get: function() {
return [];
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgFormControl.prototype, "validator", {
get: function() {
return shared_1.composeValidators(this._validators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgFormControl.prototype, "asyncValidator", {
get: function() {
return shared_1.composeAsyncValidators(this._asyncValidators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgFormControl.prototype, "control", {
get: function() {
return this.form;
},
enumerable: true,
configurable: true
});
NgFormControl.prototype.viewToModelUpdate = function(newValue) {
this.viewModel = newValue;
async_1.ObservableWrapper.callEmit(this.update, newValue);
};
NgFormControl.prototype._isControlChanged = function(changes) {
return collection_1.StringMapWrapper.contains(changes, "form");
};
NgFormControl = __decorate([ core_1.Directive({
selector: "[ngFormControl]",
bindings: [ formControlBinding ],
inputs: [ "form: ngFormControl", "model: ngModel" ],
outputs: [ "update: ngModelChange" ],
exportAs: "ngForm"
}), __param(0, core_1.Optional()), __param(0, core_1.Self()), __param(0, core_1.Inject(validators_1.NG_VALIDATORS)), __param(1, core_1.Optional()), __param(1, core_1.Self()), __param(1, core_1.Inject(validators_1.NG_ASYNC_VALIDATORS)), __param(2, core_1.Optional()), __param(2, core_1.Self()), __param(2, core_1.Inject(control_value_accessor_1.NG_VALUE_ACCESSOR)), __metadata("design:paramtypes", [ Array, Array, Array ]) ], NgFormControl);
return NgFormControl;
}(ng_control_1.NgControl);
exports.NgFormControl = NgFormControl;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var lang_1 = __webpack_require__(105);
var async_1 = __webpack_require__(150);
var core_1 = __webpack_require__(106);
var control_value_accessor_1 = __webpack_require__(362);
var ng_control_1 = __webpack_require__(361);
var model_1 = __webpack_require__(357);
var validators_1 = __webpack_require__(364);
var shared_1 = __webpack_require__(363);
var formControlBinding = lang_1.CONST_EXPR(new core_1.Provider(ng_control_1.NgControl, {
useExisting: core_1.forwardRef(function() {
return NgModel;
})
}));
var NgModel = function(_super) {
__extends(NgModel, _super);
function NgModel(_validators, _asyncValidators, valueAccessors) {
_super.call(this);
this._validators = _validators;
this._asyncValidators = _asyncValidators;
this._control = new model_1.Control();
this._added = false;
this.update = new async_1.EventEmitter();
this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
}
NgModel.prototype.ngOnChanges = function(changes) {
if (!this._added) {
shared_1.setUpControl(this._control, this);
this._control.updateValueAndValidity({
emitEvent: false
});
this._added = true;
}
if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
this._control.updateValue(this.model);
this.viewModel = this.model;
}
};
Object.defineProperty(NgModel.prototype, "control", {
get: function() {
return this._control;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgModel.prototype, "path", {
get: function() {
return [];
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgModel.prototype, "validator", {
get: function() {
return shared_1.composeValidators(this._validators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgModel.prototype, "asyncValidator", {
get: function() {
return shared_1.composeAsyncValidators(this._asyncValidators);
},
enumerable: true,
configurable: true
});
NgModel.prototype.viewToModelUpdate = function(newValue) {
this.viewModel = newValue;
async_1.ObservableWrapper.callEmit(this.update, newValue);
};
NgModel = __decorate([ core_1.Directive({
selector: "[ngModel]:not([ngControl]):not([ngFormControl])",
bindings: [ formControlBinding ],
inputs: [ "model: ngModel" ],
outputs: [ "update: ngModelChange" ],
exportAs: "ngForm"
}), __param(0, core_1.Optional()), __param(0, core_1.Self()), __param(0, core_1.Inject(validators_1.NG_VALIDATORS)), __param(1, core_1.Optional()), __param(1, core_1.Self()), __param(1, core_1.Inject(validators_1.NG_ASYNC_VALIDATORS)), __param(2, core_1.Optional()), __param(2, core_1.Self()), __param(2, core_1.Inject(control_value_accessor_1.NG_VALUE_ACCESSOR)), __metadata("design:paramtypes", [ Array, Array, Array ]) ], NgModel);
return NgModel;
}(ng_control_1.NgControl);
exports.NgModel = NgModel;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var core_1 = __webpack_require__(106);
var lang_1 = __webpack_require__(105);
var control_container_1 = __webpack_require__(359);
var shared_1 = __webpack_require__(363);
var validators_1 = __webpack_require__(364);
var controlGroupProvider = lang_1.CONST_EXPR(new core_1.Provider(control_container_1.ControlContainer, {
useExisting: core_1.forwardRef(function() {
return NgControlGroup;
})
}));
var NgControlGroup = function(_super) {
__extends(NgControlGroup, _super);
function NgControlGroup(parent, _validators, _asyncValidators) {
_super.call(this);
this._validators = _validators;
this._asyncValidators = _asyncValidators;
this._parent = parent;
}
NgControlGroup.prototype.ngOnInit = function() {
this.formDirective.addControlGroup(this);
};
NgControlGroup.prototype.ngOnDestroy = function() {
this.formDirective.removeControlGroup(this);
};
Object.defineProperty(NgControlGroup.prototype, "control", {
get: function() {
return this.formDirective.getControlGroup(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlGroup.prototype, "path", {
get: function() {
return shared_1.controlPath(this.name, this._parent);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlGroup.prototype, "formDirective", {
get: function() {
return this._parent.formDirective;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlGroup.prototype, "validator", {
get: function() {
return shared_1.composeValidators(this._validators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlGroup.prototype, "asyncValidator", {
get: function() {
return shared_1.composeAsyncValidators(this._asyncValidators);
},
enumerable: true,
configurable: true
});
NgControlGroup = __decorate([ core_1.Directive({
selector: "[ngControlGroup]",
providers: [ controlGroupProvider ],
inputs: [ "name: ngControlGroup" ],
exportAs: "ngForm"
}), __param(0, core_1.Host()), __param(0, core_1.SkipSelf()), __param(1, core_1.Optional()), __param(1, core_1.Self()), __param(1, core_1.Inject(validators_1.NG_VALIDATORS)), __param(2, core_1.Optional()), __param(2, core_1.Self()), __param(2, core_1.Inject(validators_1.NG_ASYNC_VALIDATORS)), __metadata("design:paramtypes", [ control_container_1.ControlContainer, Array, Array ]) ], NgControlGroup);
return NgControlGroup;
}(control_container_1.ControlContainer);
exports.NgControlGroup = NgControlGroup;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var lang_1 = __webpack_require__(105);
var collection_1 = __webpack_require__(115);
var async_1 = __webpack_require__(150);
var core_1 = __webpack_require__(106);
var control_container_1 = __webpack_require__(359);
var shared_1 = __webpack_require__(363);
var validators_1 = __webpack_require__(364);
var formDirectiveProvider = lang_1.CONST_EXPR(new core_1.Provider(control_container_1.ControlContainer, {
useExisting: core_1.forwardRef(function() {
return NgFormModel;
})
}));
var NgFormModel = function(_super) {
__extends(NgFormModel, _super);
function NgFormModel(_validators, _asyncValidators) {
_super.call(this);
this._validators = _validators;
this._asyncValidators = _asyncValidators;
this.form = null;
this.directives = [];
this.ngSubmit = new async_1.EventEmitter();
}
NgFormModel.prototype.ngOnChanges = function(changes) {
if (collection_1.StringMapWrapper.contains(changes, "form")) {
var sync = shared_1.composeValidators(this._validators);
this.form.validator = validators_1.Validators.compose([ this.form.validator, sync ]);
var async = shared_1.composeAsyncValidators(this._asyncValidators);
this.form.asyncValidator = validators_1.Validators.composeAsync([ this.form.asyncValidator, async ]);
this.form.updateValueAndValidity({
onlySelf: true,
emitEvent: false
});
}
this._updateDomValue();
};
Object.defineProperty(NgFormModel.prototype, "formDirective", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgFormModel.prototype, "control", {
get: function() {
return this.form;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgFormModel.prototype, "path", {
get: function() {
return [];
},
enumerable: true,
configurable: true
});
NgFormModel.prototype.addControl = function(dir) {
var ctrl = this.form.find(dir.path);
shared_1.setUpControl(ctrl, dir);
ctrl.updateValueAndValidity({
emitEvent: false
});
this.directives.push(dir);
};
NgFormModel.prototype.getControl = function(dir) {
return this.form.find(dir.path);
};
NgFormModel.prototype.removeControl = function(dir) {
collection_1.ListWrapper.remove(this.directives, dir);
};
NgFormModel.prototype.addControlGroup = function(dir) {
var ctrl = this.form.find(dir.path);
shared_1.setUpControlGroup(ctrl, dir);
ctrl.updateValueAndValidity({
emitEvent: false
});
};
NgFormModel.prototype.removeControlGroup = function(dir) {};
NgFormModel.prototype.getControlGroup = function(dir) {
return this.form.find(dir.path);
};
NgFormModel.prototype.updateModel = function(dir, value) {
var ctrl = this.form.find(dir.path);
ctrl.updateValue(value);
};
NgFormModel.prototype.onSubmit = function() {
async_1.ObservableWrapper.callEmit(this.ngSubmit, null);
return false;
};
NgFormModel.prototype._updateDomValue = function() {
var _this = this;
this.directives.forEach(function(dir) {
var ctrl = _this.form.find(dir.path);
dir.valueAccessor.writeValue(ctrl.value);
});
};
NgFormModel = __decorate([ core_1.Directive({
selector: "[ngFormModel]",
bindings: [ formDirectiveProvider ],
inputs: [ "form: ngFormModel" ],
host: {
"(submit)": "onSubmit()"
},
outputs: [ "ngSubmit" ],
exportAs: "ngForm"
}), __param(0, core_1.Optional()), __param(0, core_1.Self()), __param(0, core_1.Inject(validators_1.NG_VALIDATORS)), __param(1, core_1.Optional()), __param(1, core_1.Self()), __param(1, core_1.Inject(validators_1.NG_ASYNC_VALIDATORS)), __metadata("design:paramtypes", [ Array, Array ]) ], NgFormModel);
return NgFormModel;
}(control_container_1.ControlContainer);
exports.NgFormModel = NgFormModel;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var async_1 = __webpack_require__(150);
var collection_1 = __webpack_require__(115);
var lang_1 = __webpack_require__(105);
var core_1 = __webpack_require__(106);
var control_container_1 = __webpack_require__(359);
var model_1 = __webpack_require__(357);
var shared_1 = __webpack_require__(363);
var validators_1 = __webpack_require__(364);
var formDirectiveProvider = lang_1.CONST_EXPR(new core_1.Provider(control_container_1.ControlContainer, {
useExisting: core_1.forwardRef(function() {
return NgForm;
})
}));
var NgForm = function(_super) {
__extends(NgForm, _super);
function NgForm(validators, asyncValidators) {
_super.call(this);
this.ngSubmit = new async_1.EventEmitter();
this.form = new model_1.ControlGroup({}, null, shared_1.composeValidators(validators), shared_1.composeAsyncValidators(asyncValidators));
}
Object.defineProperty(NgForm.prototype, "formDirective", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForm.prototype, "control", {
get: function() {
return this.form;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForm.prototype, "path", {
get: function() {
return [];
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForm.prototype, "controls", {
get: function() {
return this.form.controls;
},
enumerable: true,
configurable: true
});
NgForm.prototype.addControl = function(dir) {
var _this = this;
async_1.PromiseWrapper.scheduleMicrotask(function() {
var container = _this._findContainer(dir.path);
var ctrl = new model_1.Control();
shared_1.setUpControl(ctrl, dir);
container.addControl(dir.name, ctrl);
ctrl.updateValueAndValidity({
emitEvent: false
});
});
};
NgForm.prototype.getControl = function(dir) {
return this.form.find(dir.path);
};
NgForm.prototype.removeControl = function(dir) {
var _this = this;
async_1.PromiseWrapper.scheduleMicrotask(function() {
var container = _this._findContainer(dir.path);
if (lang_1.isPresent(container)) {
container.removeControl(dir.name);
container.updateValueAndValidity({
emitEvent: false
});
}
});
};
NgForm.prototype.addControlGroup = function(dir) {
var _this = this;
async_1.PromiseWrapper.scheduleMicrotask(function() {
var container = _this._findContainer(dir.path);
var group = new model_1.ControlGroup({});
shared_1.setUpControlGroup(group, dir);
container.addControl(dir.name, group);
group.updateValueAndValidity({
emitEvent: false
});
});
};
NgForm.prototype.removeControlGroup = function(dir) {
var _this = this;
async_1.PromiseWrapper.scheduleMicrotask(function() {
var container = _this._findContainer(dir.path);
if (lang_1.isPresent(container)) {
container.removeControl(dir.name);
container.updateValueAndValidity({
emitEvent: false
});
}
});
};
NgForm.prototype.getControlGroup = function(dir) {
return this.form.find(dir.path);
};
NgForm.prototype.updateModel = function(dir, value) {
var _this = this;
async_1.PromiseWrapper.scheduleMicrotask(function() {
var ctrl = _this.form.find(dir.path);
ctrl.updateValue(value);
});
};
NgForm.prototype.onSubmit = function() {
async_1.ObservableWrapper.callEmit(this.ngSubmit, null);
return false;
};
NgForm.prototype._findContainer = function(path) {
path.pop();
return collection_1.ListWrapper.isEmpty(path) ? this.form : this.form.find(path);
};
NgForm = __decorate([ core_1.Directive({
selector: "form:not([ngNoForm]):not([ngFormModel]),ngForm,[ngForm]",
bindings: [ formDirectiveProvider ],
host: {
"(submit)": "onSubmit()"
},
outputs: [ "ngSubmit" ],
exportAs: "ngForm"
}), __param(0, core_1.Optional()), __param(0, core_1.Self()), __param(0, core_1.Inject(validators_1.NG_VALIDATORS)), __param(1, core_1.Optional()), __param(1, core_1.Self()), __param(1, core_1.Inject(validators_1.NG_ASYNC_VALIDATORS)), __metadata("design:paramtypes", [ Array, Array ]) ], NgForm);
return NgForm;
}(control_container_1.ControlContainer);
exports.NgForm = NgForm;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var core_1 = __webpack_require__(106);
var ng_control_1 = __webpack_require__(361);
var lang_1 = __webpack_require__(105);
var NgControlStatus = function() {
function NgControlStatus(cd) {
this._cd = cd;
}
Object.defineProperty(NgControlStatus.prototype, "ngClassUntouched", {
get: function() {
return lang_1.isPresent(this._cd.control) ? this._cd.control.untouched : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlStatus.prototype, "ngClassTouched", {
get: function() {
return lang_1.isPresent(this._cd.control) ? this._cd.control.touched : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlStatus.prototype, "ngClassPristine", {
get: function() {
return lang_1.isPresent(this._cd.control) ? this._cd.control.pristine : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlStatus.prototype, "ngClassDirty", {
get: function() {
return lang_1.isPresent(this._cd.control) ? this._cd.control.dirty : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlStatus.prototype, "ngClassValid", {
get: function() {
return lang_1.isPresent(this._cd.control) ? this._cd.control.valid : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlStatus.prototype, "ngClassInvalid", {
get: function() {
return lang_1.isPresent(this._cd.control) ? !this._cd.control.valid : false;
},
enumerable: true,
configurable: true
});
NgControlStatus = __decorate([ core_1.Directive({
selector: "[ngControl],[ngModel],[ngFormControl]",
host: {
"[class.ng-untouched]": "ngClassUntouched",
"[class.ng-touched]": "ngClassTouched",
"[class.ng-pristine]": "ngClassPristine",
"[class.ng-dirty]": "ngClassDirty",
"[class.ng-valid]": "ngClassValid",
"[class.ng-invalid]": "ngClassInvalid"
}
}), __param(0, core_1.Self()), __metadata("design:paramtypes", [ ng_control_1.NgControl ]) ], NgControlStatus);
return NgControlStatus;
}();
exports.NgControlStatus = NgControlStatus;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var ng_control_name_1 = __webpack_require__(360);
var ng_form_control_1 = __webpack_require__(371);
var ng_model_1 = __webpack_require__(372);
var ng_control_group_1 = __webpack_require__(373);
var ng_form_model_1 = __webpack_require__(374);
var ng_form_1 = __webpack_require__(375);
var default_value_accessor_1 = __webpack_require__(365);
var checkbox_value_accessor_1 = __webpack_require__(367);
var number_value_accessor_1 = __webpack_require__(366);
var radio_control_value_accessor_1 = __webpack_require__(369);
var ng_control_status_1 = __webpack_require__(376);
var select_control_value_accessor_1 = __webpack_require__(368);
var validators_1 = __webpack_require__(378);
var ng_control_name_2 = __webpack_require__(360);
exports.NgControlName = ng_control_name_2.NgControlName;
var ng_form_control_2 = __webpack_require__(371);
exports.NgFormControl = ng_form_control_2.NgFormControl;
var ng_model_2 = __webpack_require__(372);
exports.NgModel = ng_model_2.NgModel;
var ng_control_group_2 = __webpack_require__(373);
exports.NgControlGroup = ng_control_group_2.NgControlGroup;
var ng_form_model_2 = __webpack_require__(374);
exports.NgFormModel = ng_form_model_2.NgFormModel;
var ng_form_2 = __webpack_require__(375);
exports.NgForm = ng_form_2.NgForm;
var default_value_accessor_2 = __webpack_require__(365);
exports.DefaultValueAccessor = default_value_accessor_2.DefaultValueAccessor;
var checkbox_value_accessor_2 = __webpack_require__(367);
exports.CheckboxControlValueAccessor = checkbox_value_accessor_2.CheckboxControlValueAccessor;
var radio_control_value_accessor_2 = __webpack_require__(369);
exports.RadioControlValueAccessor = radio_control_value_accessor_2.RadioControlValueAccessor;
exports.RadioButtonState = radio_control_value_accessor_2.RadioButtonState;
var number_value_accessor_2 = __webpack_require__(366);
exports.NumberValueAccessor = number_value_accessor_2.NumberValueAccessor;
var ng_control_status_2 = __webpack_require__(376);
exports.NgControlStatus = ng_control_status_2.NgControlStatus;
var select_control_value_accessor_2 = __webpack_require__(368);
exports.SelectControlValueAccessor = select_control_value_accessor_2.SelectControlValueAccessor;
exports.NgSelectOption = select_control_value_accessor_2.NgSelectOption;
var validators_2 = __webpack_require__(378);
exports.RequiredValidator = validators_2.RequiredValidator;
exports.MinLengthValidator = validators_2.MinLengthValidator;
exports.MaxLengthValidator = validators_2.MaxLengthValidator;
exports.PatternValidator = validators_2.PatternValidator;
var ng_control_1 = __webpack_require__(361);
exports.NgControl = ng_control_1.NgControl;
exports.FORM_DIRECTIVES = lang_1.CONST_EXPR([ ng_control_name_1.NgControlName, ng_control_group_1.NgControlGroup, ng_form_control_1.NgFormControl, ng_model_1.NgModel, ng_form_model_1.NgFormModel, ng_form_1.NgForm, select_control_value_accessor_1.NgSelectOption, default_value_accessor_1.DefaultValueAccessor, number_value_accessor_1.NumberValueAccessor, checkbox_value_accessor_1.CheckboxControlValueAccessor, select_control_value_accessor_1.SelectControlValueAccessor, radio_control_value_accessor_1.RadioControlValueAccessor, ng_control_status_1.NgControlStatus, validators_1.RequiredValidator, validators_1.MinLengthValidator, validators_1.MaxLengthValidator, validators_1.PatternValidator ]);
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var core_1 = __webpack_require__(106);
var lang_1 = __webpack_require__(105);
var validators_1 = __webpack_require__(364);
var lang_2 = __webpack_require__(105);
var REQUIRED_VALIDATOR = lang_1.CONST_EXPR(new core_1.Provider(validators_1.NG_VALIDATORS, {
useValue: validators_1.Validators.required,
multi: true
}));
var RequiredValidator = function() {
function RequiredValidator() {}
RequiredValidator = __decorate([ core_1.Directive({
selector: "[required][ngControl],[required][ngFormControl],[required][ngModel]",
providers: [ REQUIRED_VALIDATOR ]
}), __metadata("design:paramtypes", []) ], RequiredValidator);
return RequiredValidator;
}();
exports.RequiredValidator = RequiredValidator;
var MIN_LENGTH_VALIDATOR = lang_1.CONST_EXPR(new core_1.Provider(validators_1.NG_VALIDATORS, {
useExisting: core_1.forwardRef(function() {
return MinLengthValidator;
}),
multi: true
}));
var MinLengthValidator = function() {
function MinLengthValidator(minLength) {
this._validator = validators_1.Validators.minLength(lang_2.NumberWrapper.parseInt(minLength, 10));
}
MinLengthValidator.prototype.validate = function(c) {
return this._validator(c);
};
MinLengthValidator = __decorate([ core_1.Directive({
selector: "[minlength][ngControl],[minlength][ngFormControl],[minlength][ngModel]",
providers: [ MIN_LENGTH_VALIDATOR ]
}), __param(0, core_1.Attribute("minlength")), __metadata("design:paramtypes", [ String ]) ], MinLengthValidator);
return MinLengthValidator;
}();
exports.MinLengthValidator = MinLengthValidator;
var MAX_LENGTH_VALIDATOR = lang_1.CONST_EXPR(new core_1.Provider(validators_1.NG_VALIDATORS, {
useExisting: core_1.forwardRef(function() {
return MaxLengthValidator;
}),
multi: true
}));
var MaxLengthValidator = function() {
function MaxLengthValidator(maxLength) {
this._validator = validators_1.Validators.maxLength(lang_2.NumberWrapper.parseInt(maxLength, 10));
}
MaxLengthValidator.prototype.validate = function(c) {
return this._validator(c);
};
MaxLengthValidator = __decorate([ core_1.Directive({
selector: "[maxlength][ngControl],[maxlength][ngFormControl],[maxlength][ngModel]",
providers: [ MAX_LENGTH_VALIDATOR ]
}), __param(0, core_1.Attribute("maxlength")), __metadata("design:paramtypes", [ String ]) ], MaxLengthValidator);
return MaxLengthValidator;
}();
exports.MaxLengthValidator = MaxLengthValidator;
var PATTERN_VALIDATOR = lang_1.CONST_EXPR(new core_1.Provider(validators_1.NG_VALIDATORS, {
useExisting: core_1.forwardRef(function() {
return PatternValidator;
}),
multi: true
}));
var PatternValidator = function() {
function PatternValidator(pattern) {
this._validator = validators_1.Validators.pattern(pattern);
}
PatternValidator.prototype.validate = function(c) {
return this._validator(c);
};
PatternValidator = __decorate([ core_1.Directive({
selector: "[pattern][ngControl],[pattern][ngFormControl],[pattern][ngModel]",
providers: [ PATTERN_VALIDATOR ]
}), __param(0, core_1.Attribute("pattern")), __metadata("design:paramtypes", [ String ]) ], PatternValidator);
return PatternValidator;
}();
exports.PatternValidator = PatternValidator;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(106);
var collection_1 = __webpack_require__(115);
var lang_1 = __webpack_require__(105);
var modelModule = __webpack_require__(357);
var FormBuilder = function() {
function FormBuilder() {}
FormBuilder.prototype.group = function(controlsConfig, extra) {
if (extra === void 0) {
extra = null;
}
var controls = this._reduceControls(controlsConfig);
var optionals = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "optionals") : null;
var validator = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "validator") : null;
var asyncValidator = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "asyncValidator") : null;
return new modelModule.ControlGroup(controls, optionals, validator, asyncValidator);
};
FormBuilder.prototype.control = function(value, validator, asyncValidator) {
if (validator === void 0) {
validator = null;
}
if (asyncValidator === void 0) {
asyncValidator = null;
}
return new modelModule.Control(value, validator, asyncValidator);
};
FormBuilder.prototype.array = function(controlsConfig, validator, asyncValidator) {
var _this = this;
if (validator === void 0) {
validator = null;
}
if (asyncValidator === void 0) {
asyncValidator = null;
}
var controls = controlsConfig.map(function(c) {
return _this._createControl(c);
});
return new modelModule.ControlArray(controls, validator, asyncValidator);
};
FormBuilder.prototype._reduceControls = function(controlsConfig) {
var _this = this;
var controls = {};
collection_1.StringMapWrapper.forEach(controlsConfig, function(controlConfig, controlName) {
controls[controlName] = _this._createControl(controlConfig);
});
return controls;
};
FormBuilder.prototype._createControl = function(controlConfig) {
if (controlConfig instanceof modelModule.Control || controlConfig instanceof modelModule.ControlGroup || controlConfig instanceof modelModule.ControlArray) {
return controlConfig;
} else if (lang_1.isArray(controlConfig)) {
var value = controlConfig[0];
var validator = controlConfig.length > 1 ? controlConfig[1] : null;
var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
return this.control(value, validator, asyncValidator);
} else {
return this.control(controlConfig);
}
};
FormBuilder = __decorate([ core_1.Injectable(), __metadata("design:paramtypes", []) ], FormBuilder);
return FormBuilder;
}();
exports.FormBuilder = FormBuilder;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(105);
var forms_1 = __webpack_require__(356);
var directives_1 = __webpack_require__(348);
exports.COMMON_DIRECTIVES = lang_1.CONST_EXPR([ directives_1.CORE_DIRECTIVES, forms_1.FORM_DIRECTIVES ]);
}, function(module, exports, __webpack_require__) {
"use strict";
var list_view_comp_1 = __webpack_require__(382);
var text_value_accessor_1 = __webpack_require__(383);
var checked_value_accessor_1 = __webpack_require__(385);
var date_value_accessor_1 = __webpack_require__(386);
var time_value_accessor_1 = __webpack_require__(387);
var number_value_accessor_1 = __webpack_require__(388);
var selectedIndex_value_accessor_1 = __webpack_require__(389);
var tab_view_1 = __webpack_require__(390);
var action_bar_1 = __webpack_require__(391);
exports.NS_DIRECTIVES = [ list_view_comp_1.ListViewComponent, tab_view_1.TabViewDirective, tab_view_1.TabViewItemDirective, text_value_accessor_1.TextValueAccessor, checked_value_accessor_1.CheckedValueAccessor, date_value_accessor_1.DateValueAccessor, time_value_accessor_1.TimeValueAccessor, selectedIndex_value_accessor_1.SelectedIndexValueAccessor, number_value_accessor_1.NumberValueAccessor, action_bar_1.ActionBarComponent, action_bar_1.ActionBarScope, action_bar_1.ActionItemDirective, action_bar_1.NavigationButtonDirective ];
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(106);
var observable_array_1 = __webpack_require__(58);
var layout_base_1 = __webpack_require__(73);
var NG_VIEW = "_ngViewRef";
var ListViewComponent = function() {
function ListViewComponent(_elementRef, _iterableDiffers, _cdr, _appViewManager) {
this._elementRef = _elementRef;
this._iterableDiffers = _iterableDiffers;
this._cdr = _cdr;
this._appViewManager = _appViewManager;
this.doCheckDelay = 5;
this.listView = _elementRef.nativeElement;
}
Object.defineProperty(ListViewComponent.prototype, "items", {
set: function(value) {
this._items = value;
var needDiffer = true;
if (value instanceof observable_array_1.ObservableArray) {
needDiffer = false;
}
if (needDiffer && !this._differ && value) {
this._differ = this._iterableDiffers.find(this._items).create(this._cdr, function(index, item) {
return item;
});
}
this.listView.items = this._items;
},
enumerable: true,
configurable: true
});
ListViewComponent.prototype.onItemLoading = function(args) {
if (!this.itemTemplate) {
return;
}
var index = args.index;
var items = args.object.items;
var currentItem = typeof items.getItem === "function" ? items.getItem(index) : items[index];
var viewRef;
if (args.view) {
console.log("ListView.onItemLoading: " + index + " - Reusing exisiting view");
viewRef = args.view[NG_VIEW];
} else {
console.log("ListView.onItemLoading: " + index + " - Creating view from template");
viewRef = this._appViewManager.createEmbeddedViewInContainer(this._elementRef, index, this.itemTemplate);
args.view = getSingleViewFromViewRef(viewRef);
args.view[NG_VIEW] = viewRef;
}
this.setupViewRef(viewRef, currentItem, index);
};
ListViewComponent.prototype.setupViewRef = function(viewRef, data, index) {
viewRef.setLocal("$implicit", data.item);
viewRef.setLocal("item", data);
viewRef.setLocal("index", index);
viewRef.setLocal("even", index % 2 == 0);
viewRef.setLocal("odd", index % 2 == 1);
};
ListViewComponent.prototype.ngDoCheck = function() {
var _this = this;
if (this.timerId) {
clearTimeout(this.timerId);
}
this.timerId = setTimeout(function() {
clearTimeout(_this.timerId);
if (_this._differ) {
var changes = _this._differ.diff(_this._items);
if (changes) {
_this.listView.refresh();
}
}
}, this.doCheckDelay);
};
__decorate([ core_1.ContentChild(core_1.TemplateRef), __metadata("design:type", core_1.TemplateRef) ], ListViewComponent.prototype, "itemTemplate", void 0);
__decorate([ core_1.HostListener("itemLoading", [ "$event" ]), __metadata("design:type", Function), __metadata("design:paramtypes", [ Object ]), __metadata("design:returntype", void 0) ], ListViewComponent.prototype, "onItemLoading", null);
ListViewComponent = __decorate([ core_1.Component({
selector: "ListView",
template: "",
inputs: [ "items" ]
}), __metadata("design:paramtypes", [ core_1.ElementRef, core_1.IterableDiffers, core_1.ChangeDetectorRef, core_1.AppViewManager ]) ], ListViewComponent);
return ListViewComponent;
}();
exports.ListViewComponent = ListViewComponent;
function getSingleViewFromViewRef(viewRef) {
var getSingleViewRecursive = function(nodes, nestLevel) {
var actualNodes = nodes.filter(function(n) {
return !!n && n.nodeName !== "#text";
});
if (actualNodes.length === 0) {
throw new Error("No suitable views found in list template! Nesting level: " + nestLevel);
} else if (actualNodes.length > 1) {
throw new Error("More than one view found in list template! Nesting level: " + nestLevel);
} else {
if (actualNodes[0]) {
var parentLayout = actualNodes[0].parent;
if (parentLayout instanceof layout_base_1.LayoutBase) {
parentLayout.removeChild(actualNodes[0]);
}
return actualNodes[0];
} else {
return getSingleViewRecursive(actualNodes[0].children, nestLevel + 1);
}
}
};
return getSingleViewRecursive(viewRef.rootNodes, 0);
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(106);
var control_value_accessor_1 = __webpack_require__(362);
var lang_1 = __webpack_require__(105);
var base_value_accessor_1 = __webpack_require__(384);
var TEXT_VALUE_ACCESSOR = core_1.provide(control_value_accessor_1.NG_VALUE_ACCESSOR, {
useExisting: core_1.forwardRef(function() {
return TextValueAccessor;
}),
multi: true
});
var TextValueAccessor = function(_super) {
__extends(TextValueAccessor, _super);
function TextValueAccessor(elementRef) {
_super.call(this, elementRef.nativeElement);
this.onTouched = function() {};
}
TextValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = lang_1.isBlank(value) ? "" : value.toString();
this.view.text = normalizedValue;
};
TextValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
TextValueAccessor = __decorate([ core_1.Directive({
selector: "TextField[ngModel], TextView[ngModel], SearchBar[ngModel]",
host: {
"(textChange)": "onChange($event.value)"
},
bindings: [ TEXT_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], TextValueAccessor);
return TextValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
exports.TextValueAccessor = TextValueAccessor;
}, function(module, exports) {
"use strict";
var BaseValueAccessor = function() {
function BaseValueAccessor(view) {
this.view = view;
this.onChange = function(_) {};
this.pendingChangeNotification = 0;
}
BaseValueAccessor.prototype.registerOnChange = function(fn) {
var _this = this;
this.onChange = function(arg) {
if (_this.pendingChangeNotification) {
clearTimeout(_this.pendingChangeNotification);
}
_this.pendingChangeNotification = setTimeout(function() {
_this.pendingChangeNotification = 0;
fn(arg);
}, 20);
};
};
BaseValueAccessor.prototype.writeValue = function(value) {};
BaseValueAccessor.prototype.registerOnTouched = function(fn) {};
return BaseValueAccessor;
}();
exports.BaseValueAccessor = BaseValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(106);
var control_value_accessor_1 = __webpack_require__(362);
var lang_1 = __webpack_require__(105);
var base_value_accessor_1 = __webpack_require__(384);
var CHECKED_VALUE_ACCESSOR = core_1.provide(control_value_accessor_1.NG_VALUE_ACCESSOR, {
useExisting: core_1.forwardRef(function() {
return CheckedValueAccessor;
}),
multi: true
});
var CheckedValueAccessor = function(_super) {
__extends(CheckedValueAccessor, _super);
function CheckedValueAccessor(elementRef) {
_super.call(this, elementRef.nativeElement);
this.onTouched = function() {};
}
CheckedValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = false;
if (!lang_1.isBlank(value)) {
if (typeof value === "string") {
normalizedValue = value.toLowerCase() === "true" ? true : false;
} else {
normalizedValue = !!value;
}
}
this.view.checked = normalizedValue;
};
CheckedValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
CheckedValueAccessor = __decorate([ core_1.Directive({
selector: "Switch[ngModel]",
host: {
"(checkedChange)": "onChange($event.value)"
},
bindings: [ CHECKED_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], CheckedValueAccessor);
return CheckedValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
exports.CheckedValueAccessor = CheckedValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(106);
var control_value_accessor_1 = __webpack_require__(362);
var lang_1 = __webpack_require__(105);
var base_value_accessor_1 = __webpack_require__(384);
var DATE_VALUE_ACCESSOR = core_1.provide(control_value_accessor_1.NG_VALUE_ACCESSOR, {
useExisting: core_1.forwardRef(function() {
return DateValueAccessor;
}),
multi: true
});
var DateValueAccessor = function(_super) {
__extends(DateValueAccessor, _super);
function DateValueAccessor(elementRef) {
_super.call(this, elementRef.nativeElement);
this.onTouched = function() {};
}
DateValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = lang_1.isBlank(value) ? new Date() : value;
if (!lang_1.isDate(normalizedValue)) {
if (typeof normalizedValue === "string" || typeof normalizedValue === "number") {
normalizedValue = new Date(normalizedValue);
}
if (!lang_1.isDate(normalizedValue)) {
normalizedValue = new Date();
}
}
this.view.date = normalizedValue;
};
DateValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
DateValueAccessor = __decorate([ core_1.Directive({
selector: "DatePicker[ngModel]",
host: {
"(dateChange)": "onChange($event.value)"
},
bindings: [ DATE_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], DateValueAccessor);
return DateValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
exports.DateValueAccessor = DateValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(106);
var control_value_accessor_1 = __webpack_require__(362);
var lang_1 = __webpack_require__(105);
var base_value_accessor_1 = __webpack_require__(384);
var TIME_VALUE_ACCESSOR = core_1.provide(control_value_accessor_1.NG_VALUE_ACCESSOR, {
useExisting: core_1.forwardRef(function() {
return TimeValueAccessor;
}),
multi: true
});
var TimeValueAccessor = function(_super) {
__extends(TimeValueAccessor, _super);
function TimeValueAccessor(elementRef) {
_super.call(this, elementRef.nativeElement);
this.onTouched = function() {};
}
TimeValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = lang_1.isBlank(value) ? new Date() : value;
if (!lang_1.isDate(normalizedValue)) {
if (typeof normalizedValue === "string" || typeof normalizedValue === "number") {
normalizedValue = new Date(normalizedValue);
}
if (!lang_1.isDate(normalizedValue)) {
normalizedValue = new Date();
}
}
this.view.time = normalizedValue;
};
TimeValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
TimeValueAccessor = __decorate([ core_1.Directive({
selector: "TimePicker[ngModel]",
host: {
"(timeChange)": "onChange($event.value)"
},
bindings: [ TIME_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], TimeValueAccessor);
return TimeValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
exports.TimeValueAccessor = TimeValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(106);
var control_value_accessor_1 = __webpack_require__(362);
var lang_1 = __webpack_require__(105);
var base_value_accessor_1 = __webpack_require__(384);
var NUMBER_VALUE_ACCESSOR = core_1.provide(control_value_accessor_1.NG_VALUE_ACCESSOR, {
useExisting: core_1.forwardRef(function() {
return NumberValueAccessor;
}),
multi: true
});
var NumberValueAccessor = function(_super) {
__extends(NumberValueAccessor, _super);
function NumberValueAccessor(elementRef) {
_super.call(this, elementRef.nativeElement);
this.onTouched = function() {};
}
NumberValueAccessor.prototype.writeValue = function(value) {
var normalizedValue;
if (lang_1.isBlank(value)) {
normalizedValue = 0;
} else {
if (lang_1.isNumber(value)) {
normalizedValue = value;
} else {
var parsedValue = Number(value);
normalizedValue = isNaN(parsedValue) ? 0 : parsedValue;
}
}
this.view.value = normalizedValue;
};
NumberValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
NumberValueAccessor = __decorate([ core_1.Directive({
selector: "Slider[ngModel]",
host: {
"(valueChange)": "onChange($event.value)"
},
bindings: [ NUMBER_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], NumberValueAccessor);
return NumberValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
exports.NumberValueAccessor = NumberValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(106);
var control_value_accessor_1 = __webpack_require__(362);
var lang_1 = __webpack_require__(105);
var base_value_accessor_1 = __webpack_require__(384);
var SELECTED_INDEX_VALUE_ACCESSOR = core_1.provide(control_value_accessor_1.NG_VALUE_ACCESSOR, {
useExisting: core_1.forwardRef(function() {
return SelectedIndexValueAccessor;
}),
multi: true
});
var SelectedIndexValueAccessor = function(_super) {
__extends(SelectedIndexValueAccessor, _super);
function SelectedIndexValueAccessor(elementRef) {
_super.call(this, elementRef.nativeElement);
this.onTouched = function() {};
}
SelectedIndexValueAccessor.prototype.writeValue = function(value) {
var normalizedValue;
if (lang_1.isBlank(value)) {
normalizedValue = 0;
} else {
if (lang_1.isNumber(value)) {
normalizedValue = value;
} else {
var parsedValue = parseInt(value);
normalizedValue = isNaN(parsedValue) ? 0 : parsedValue;
}
}
this.view.selectedIndex = Math.round(normalizedValue);
};
SelectedIndexValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
SelectedIndexValueAccessor = __decorate([ core_1.Directive({
selector: "SegmentedBar[ngModel], ListPicker[ngModel]",
host: {
"(selectedIndexChange)": "onChange($event.value)"
},
bindings: [ SELECTED_INDEX_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], SelectedIndexValueAccessor);
return SelectedIndexValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
exports.SelectedIndexValueAccessor = SelectedIndexValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(106);
var tab_view_1 = __webpack_require__(263);
var TabViewDirective = function() {
function TabViewDirective(element) {
this.element = element;
this.tabView = element.nativeElement;
}
TabViewDirective = __decorate([ core_1.Directive({
selector: "TabView"
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], TabViewDirective);
return TabViewDirective;
}();
exports.TabViewDirective = TabViewDirective;
var TabViewItemDirective = function() {
function TabViewItemDirective(owner, templateRef, viewContainer) {
this.owner = owner;
this.templateRef = templateRef;
this.viewContainer = viewContainer;
}
TabViewItemDirective.prototype.ngOnInit = function() {
this.item = new tab_view_1.TabViewItem();
this.item.title = this.config.title;
var viewRef = this.viewContainer.createEmbeddedView(this.templateRef);
var realViews = viewRef.rootNodes.filter(function(node) {
return node.nodeName && node.nodeName !== "#text";
});
if (realViews.length > 0) {
this.item.view = realViews[0];
var newItems = (this.owner.tabView.items || []).concat([ this.item ]);
this.owner.tabView.items = newItems;
}
};
__decorate([ core_1.Input("tabItem"), __metadata("design:type", Object) ], TabViewItemDirective.prototype, "config", void 0);
TabViewItemDirective = __decorate([ core_1.Directive({
selector: "[tabItem]"
}), __metadata("design:paramtypes", [ TabViewDirective, core_1.TemplateRef, core_1.ViewContainerRef ]) ], TabViewItemDirective);
return TabViewItemDirective;
}();
exports.TabViewItemDirective = TabViewItemDirective;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var core_1 = __webpack_require__(106);
var action_bar_1 = __webpack_require__(69);
var lang_1 = __webpack_require__(105);
var page_1 = __webpack_require__(66);
var view_1 = __webpack_require__(11);
var element_registry_1 = __webpack_require__(233);
var actionBarMeta = {
skipAddToDom: true,
insertChild: function(parent, child, atIndex) {
var bar = parent;
var childView = child;
if (child instanceof action_bar_1.NavigationButton) {
bar.navigationButton = childView;
childView.parent = bar;
} else if (child instanceof action_bar_1.ActionItem) {
bar.actionItems.addItem(childView);
childView.parent = bar;
} else if (child.nodeName === "template") {
child.templateParent = parent;
} else if (child.nodeName !== "#text" && child instanceof view_1.View) {
bar.titleView = childView;
}
},
removeChild: function(parent, child) {
var bar = parent;
var childView = child;
if (child instanceof action_bar_1.NavigationButton) {
if (bar.navigationButton === childView) {
bar.navigationButton = null;
}
childView.parent = null;
} else if (child instanceof action_bar_1.ActionItem) {
bar.actionItems.removeItem(childView);
childView.parent = null;
} else if (child.nodeName !== "template" && child instanceof view_1.View && bar.titleView && bar.titleView === childView) {
bar.titleView = null;
}
}
};
element_registry_1.registerElement("ActionBar", function() {
return __webpack_require__(69).ActionBar;
}, actionBarMeta);
element_registry_1.registerElement("ActionItem", function() {
return __webpack_require__(69).ActionItem;
});
element_registry_1.registerElement("NavigationButton", function() {
return __webpack_require__(69).NavigationButton;
});
var ActionBarComponent = function() {
function ActionBarComponent(element, page) {
this.element = element;
this.page = page;
}
ActionBarComponent.prototype.ngOnInit = function() {
if (lang_1.isBlank(this.page.actionBarHidden)) {
this.page.actionBarHidden = false;
}
this.page.actionBar = this.element.nativeElement;
this.page.actionBar.update();
};
ActionBarComponent = __decorate([ core_1.Component({
selector: "ActionBar",
template: "<ng-content></ng-content>"
}), __metadata("design:paramtypes", [ core_1.ElementRef, page_1.Page ]) ], ActionBarComponent);
return ActionBarComponent;
}();
exports.ActionBarComponent = ActionBarComponent;
var ActionBarScope = function() {
function ActionBarScope(page) {
this.page = page;
}
ActionBarScope.prototype.onNavButtonInit = function(navBtn) {
this.page.actionBar.navigationButton = navBtn.element.nativeElement;
};
ActionBarScope.prototype.onNavButtonDestroy = function(navBtn) {
var nav = navBtn.element.nativeElement;
if (nav && this.page.actionBar.navigationButton === nav) {
this.page.actionBar.navigationButton = null;
}
};
ActionBarScope.prototype.onActionInit = function(item) {
this.page.actionBar.actionItems.addItem(item.element.nativeElement);
};
ActionBarScope.prototype.onActionDestroy = function(item) {
this.page.actionBar.actionItems.removeItem(item.element.nativeElement);
};
ActionBarScope = __decorate([ core_1.Component({
selector: "ActionBarExtension",
template: ""
}), __metadata("design:paramtypes", [ page_1.Page ]) ], ActionBarScope);
return ActionBarScope;
}();
exports.ActionBarScope = ActionBarScope;
var ActionItemDirective = function() {
function ActionItemDirective(element, ownerScope) {
this.element = element;
this.ownerScope = ownerScope;
}
ActionItemDirective.prototype.ngOnInit = function() {
if (this.ownerScope) {
this.ownerScope.onActionInit(this);
}
};
ActionItemDirective.prototype.ngOnDestroy = function() {
if (this.ownerScope) {
this.ownerScope.onActionDestroy(this);
}
};
ActionItemDirective = __decorate([ core_1.Directive({
selector: "ActionItem"
}), __param(1, core_1.Optional()), __metadata("design:paramtypes", [ core_1.ElementRef, ActionBarScope ]) ], ActionItemDirective);
return ActionItemDirective;
}();
exports.ActionItemDirective = ActionItemDirective;
var NavigationButtonDirective = function() {
function NavigationButtonDirective(element, ownerScope) {
this.element = element;
this.ownerScope = ownerScope;
}
NavigationButtonDirective.prototype.ngOnInit = function() {
if (this.ownerScope) {
this.ownerScope.onNavButtonInit(this);
}
};
NavigationButtonDirective.prototype.ngOnDestroy = function() {
if (this.ownerScope) {
this.ownerScope.onNavButtonDestroy(this);
}
};
NavigationButtonDirective = __decorate([ core_1.Directive({
selector: "NavigationButton"
}), __param(1, core_1.Optional()), __metadata("design:paramtypes", [ core_1.ElementRef, ActionBarScope ]) ], NavigationButtonDirective);
return NavigationButtonDirective;
}();
exports.NavigationButtonDirective = NavigationButtonDirective;
} ]);
