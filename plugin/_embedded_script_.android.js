var global = this;

(function(modules) {
var installedModules = {};
function __webpack_require__(moduleId) {
if (installedModules[moduleId]) return installedModules[moduleId].exports;
var module = installedModules[moduleId] = {
exports: {},
id: moduleId,
loaded: false
};
modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
module.loaded = true;
return module.exports;
}
__webpack_require__.m = modules;
__webpack_require__.c = installedModules;
__webpack_require__.p = "";
return __webpack_require__(0);
})([ function(module, exports, __webpack_require__) {
__webpack_require__(1);
module.exports = __webpack_require__(477);
}, function(module, exports, __webpack_require__) {
"use strict";
__webpack_require__(2);
}, function(module, exports, __webpack_require__) {
"use strict";
__webpack_require__(3);
__webpack_require__(105);
__webpack_require__(106);
__webpack_require__(115);
var security_1 = __webpack_require__(116);
var lang_1 = __webpack_require__(117);
var core_1 = __webpack_require__(118);
var di_1 = __webpack_require__(128);
var api_1 = __webpack_require__(191);
var renderer_1 = __webpack_require__(212);
var dom_adapter_1 = __webpack_require__(276);
var compiler_1 = __webpack_require__(277);
var xhr_1 = __webpack_require__(462);
var exception_handler_1 = __webpack_require__(133);
var application_common_providers_1 = __webpack_require__(204);
var platform_common_providers_1 = __webpack_require__(203);
var common_1 = __webpack_require__(376);
var directives_1 = __webpack_require__(463);
var reflection_capabilities_1 = __webpack_require__(140);
var page_1 = __webpack_require__(72);
var text_view_1 = __webpack_require__(266);
var application = __webpack_require__(16);
var platform_providers_1 = __webpack_require__(213);
var nativescriptIntl = __webpack_require__(475);
global.Intl = nativescriptIntl;
var ConsoleLogger = function() {
function ConsoleLogger() {
this.log = lang_1.print;
this.logError = lang_1.print;
this.logGroup = lang_1.print;
}
ConsoleLogger.prototype.logGroupEnd = function() {};
return ConsoleLogger;
}();
function bootstrap(appComponentType, customProviders) {
if (customProviders === void 0) {
customProviders = null;
}
dom_adapter_1.NativeScriptDomAdapter.makeCurrent();
var platformProviders = [ platform_common_providers_1.PLATFORM_COMMON_PROVIDERS ];
var defaultAppProviders = [ application_common_providers_1.APPLICATION_COMMON_PROVIDERS, common_1.FORM_PROVIDERS, di_1.provide(core_1.PLATFORM_PIPES, {
useValue: common_1.COMMON_PIPES,
multi: true
}), di_1.provide(core_1.PLATFORM_DIRECTIVES, {
useValue: common_1.COMMON_DIRECTIVES,
multi: true
}), di_1.provide(core_1.PLATFORM_DIRECTIVES, {
useValue: directives_1.NS_DIRECTIVES,
multi: true
}), di_1.provide(exception_handler_1.ExceptionHandler, {
useFactory: function() {
return new exception_handler_1.ExceptionHandler(new ConsoleLogger(), true);
},
deps: []
}), platform_providers_1.defaultPageProvider, platform_providers_1.defaultDeviceProvider, renderer_1.NativeScriptRootRenderer, di_1.provide(api_1.RootRenderer, {
useClass: renderer_1.NativeScriptRootRenderer
}), renderer_1.NativeScriptRenderer, di_1.provide(api_1.Renderer, {
useClass: renderer_1.NativeScriptRenderer
}), di_1.provide(security_1.SanitizationService, {
useClass: dom_adapter_1.NativeScriptSanitizationService
}), di_1.provide(compiler_1.ElementSchemaRegistry, {
useClass: dom_adapter_1.NativeScriptElementSchemaRegistry
}), compiler_1.COMPILER_PROVIDERS, di_1.provide(compiler_1.ElementSchemaRegistry, {
useClass: dom_adapter_1.NativeScriptElementSchemaRegistry
}), di_1.provide(compiler_1.XHR, {
useClass: xhr_1.FileSystemXHR
}) ];
var appProviders = [ defaultAppProviders ];
if (lang_1.isPresent(customProviders)) {
appProviders.push(customProviders);
}
var platform = core_1.getPlatform();
if (!lang_1.isPresent(platform)) {
platform = core_1.createPlatform(core_1.ReflectiveInjector.resolveAndCreate(platformProviders));
}
core_1.reflector.reflectionCapabilities = new reflection_capabilities_1.ReflectionCapabilities();
var appInjector = core_1.ReflectiveInjector.resolveAndCreate(appProviders, platform.injector);
return core_1.coreLoadAndBootstrap(appInjector, appComponentType);
}
exports.bootstrap = bootstrap;
function nativeScriptBootstrap(appComponentType, customProviders, appOptions) {
if (appOptions && appOptions.cssFile) {
application.cssFile = appOptions.cssFile;
}
return new Promise(function(resolve, reject) {
application.start({
create: function() {
var page = new page_1.Page();
if (appOptions) {
page.actionBarHidden = appOptions.startPageActionBarHidden;
}
var onLoadedHandler = function(args) {
page.off("loaded", onLoadedHandler);
console.log("Page loaded");
console.log("BOOTSTRAPPING...");
bootstrap(appComponentType, customProviders).then(function(appRef) {
console.log("ANGULAR BOOTSTRAP DONE.");
resolve(appRef);
}, function(err) {
console.log("ERROR BOOTSTRAPPING ANGULAR");
var errorMessage = err.message + "\n\n" + err.stack;
console.log(errorMessage);
var view = new text_view_1.TextView();
view.text = errorMessage;
page.content = view;
reject(err);
});
};
page.on("loaded", onLoadedHandler);
return page;
}
});
});
}
exports.nativeScriptBootstrap = nativeScriptBootstrap;
}, function(module, exports, __webpack_require__) {
global.moduleMerge = function(sourceExports, destExports) {
for (var key in sourceExports) {
destExports[key] = sourceExports[key];
}
};
var modules = new Map();
global.registerModule = function(name, loader) {
modules.set(name, loader);
};
global.moduleExists = function(name) {
return modules.has(name);
};
global.loadModule = function(name) {
var loader = modules.get(name);
if (loader) {
return loader();
} else {
return __webpack_require__(4)(name);
}
};
global.zonedCallback = function(callback) {
if (global.zone) {
return global.zone.bind(callback);
}
if (global.Zone) {
return global.Zone.current.wrap(callback);
} else {
return callback;
}
};
global.__extends = global.__extends || function(d, b) {
for (var p in b) {
if (b.hasOwnProperty(p)) {
d[p] = b[p];
}
}
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
global.registerModule("timer", function() {
return __webpack_require__(7);
});
global.registerModule("ui/dialogs", function() {
return __webpack_require__(8);
});
global.registerModule("xhr", function() {
return __webpack_require__(102);
});
global.registerModule("fetch", function() {
return __webpack_require__(103);
});
var __tnsGlobalMergedModules = new Map();
function registerOnGlobalContext(name, module) {
Object.defineProperty(global, name, {
get: function() {
var m = global.loadModule(module);
if (!__tnsGlobalMergedModules.has(module)) {
__tnsGlobalMergedModules.set(module, true);
global.moduleMerge(m, global);
}
var resolvedValue = m[name];
Object.defineProperty(this, name, {
value: resolvedValue,
configurable: true,
writable: true
});
return resolvedValue;
},
configurable: true
});
}
if (true) {
var timer = __webpack_require__(7);
global.setTimeout = timer.setTimeout;
global.clearTimeout = timer.clearTimeout;
global.setInterval = timer.setInterval;
global.clearInterval = timer.clearInterval;
var dialogs = __webpack_require__(8);
global.alert = dialogs.alert;
global.confirm = dialogs.confirm;
global.prompt = dialogs.prompt;
var xhr = __webpack_require__(102);
global.XMLHttpRequest = xhr.XMLHttpRequest;
global.FormData = xhr.FormData;
var fetch = __webpack_require__(103);
global.fetch = fetch.fetch;
} else {
registerOnGlobalContext("setTimeout", "timer");
registerOnGlobalContext("clearTimeout", "timer");
registerOnGlobalContext("setInterval", "timer");
registerOnGlobalContext("clearInterval", "timer");
registerOnGlobalContext("alert", "ui/dialogs");
registerOnGlobalContext("confirm", "ui/dialogs");
registerOnGlobalContext("prompt", "ui/dialogs");
registerOnGlobalContext("XMLHttpRequest", "xhr");
registerOnGlobalContext("FormData", "xhr");
registerOnGlobalContext("fetch", "fetch");
}
var platform = __webpack_require__(45);
var consoleModule = __webpack_require__(104);
var c = new consoleModule.Console();
if (platform.device.os === platform.platformNames.android) {
global.console = c;
} else if (platform.device.os === platform.platformNames.ios) {
global.console.dump = function(args) {
c.dump(args);
};
}
__webpack_require__(5);
function Deprecated(target, key, descriptor) {
if (descriptor) {
var originalMethod = descriptor.value;
descriptor.value = function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
console.log(key + " is deprecated");
return originalMethod.apply(this, args);
};
return descriptor;
} else {
console.log((target && target.name || target) + " is deprecated");
return target;
}
}
exports.Deprecated = Deprecated;
global.Deprecated = Deprecated;
function Experimental(target, key, descriptor) {
if (descriptor) {
var originalMethod = descriptor.value;
descriptor.value = function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
console.log(key + " is experimental");
return originalMethod.apply(this, args);
};
return descriptor;
} else {
console.log((target && target.name || target) + " is experimental");
return target;
}
}
exports.Experimental = Experimental;
global.Experimental = Experimental;
}, function(module, exports, __webpack_require__) {
var map = {
"./decorators": 5,
"./decorators.js": 5,
"./globals": 3,
"./globals.js": 3
};
function webpackContext(req) {
return __webpack_require__(webpackContextResolve(req));
}
function webpackContextResolve(req) {
return map[req] || function() {
throw new Error("Cannot find module '" + req + "'.");
}();
}
webpackContext.keys = function webpackContextKeys() {
return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 4;
}, function(module, exports) {
if (typeof global.__decorate !== "function") {
global.__decorate = function(decorators, target, key, desc) {
var c = arguments.length;
var r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof global.Reflect === "object" && typeof global.Reflect.decorate === "function") {
r = global.Reflect.decorate(decorators, target, key, desc);
} else {
for (var i = decorators.length - 1; i >= 0; i--) {
if (d = decorators[i]) {
r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
}
}
}
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
}
if (typeof global.__metadata !== "function") {
global.__metadata = function(k, v) {
if (typeof global.Reflect === "object" && typeof global.Reflect.metadata === "function") {
return global.Reflect.metadata(k, v);
}
};
}
if (typeof global.__param !== "function") {
global.__param = global && global.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
}
}, , function(module, exports) {
var timeoutHandler;
var timeoutCallbacks = {};
var timerId = 0;
function createHandlerAndGetId() {
if (!timeoutHandler) {
timeoutHandler = new android.os.Handler(android.os.Looper.getMainLooper());
}
timerId++;
return timerId;
}
function setTimeout(callback, milliseconds) {
if (milliseconds === void 0) {
milliseconds = 0;
}
var id = createHandlerAndGetId();
var zoneBound = zonedCallback(callback);
var runnable = new java.lang.Runnable({
run: function() {
zoneBound();
if (timeoutCallbacks[id]) {
delete timeoutCallbacks[id];
}
}
});
if (!timeoutCallbacks[id]) {
timeoutCallbacks[id] = runnable;
}
timeoutHandler.postDelayed(runnable, long(milliseconds));
return id;
}
exports.setTimeout = setTimeout;
function clearTimeout(id) {
if (timeoutCallbacks[id]) {
timeoutHandler.removeCallbacks(timeoutCallbacks[id]);
delete timeoutCallbacks[id];
}
}
exports.clearTimeout = clearTimeout;
function setInterval(callback, milliseconds) {
if (milliseconds === void 0) {
milliseconds = 0;
}
var id = createHandlerAndGetId();
var handler = timeoutHandler;
var zoneBound = zonedCallback(callback);
var runnable = new java.lang.Runnable({
run: function() {
zoneBound();
if (timeoutCallbacks[id]) {
handler.postDelayed(runnable, long(milliseconds));
}
}
});
if (!timeoutCallbacks[id]) {
timeoutCallbacks[id] = runnable;
}
timeoutHandler.postDelayed(runnable, long(milliseconds));
return id;
}
exports.setInterval = setInterval;
exports.clearInterval = clearTimeout;
}, function(module, exports, __webpack_require__) {
var dialogsCommon = __webpack_require__(9);
var appmodule = __webpack_require__(16);
var types = __webpack_require__(14);
global.moduleMerge(dialogsCommon, exports);
function createAlertDialog(options) {
var alert = new android.app.AlertDialog.Builder(appmodule.android.currentContext);
alert.setTitle(options && types.isString(options.title) ? options.title : "");
alert.setMessage(options && types.isString(options.message) ? options.message : "");
if (options && options.cancelable === false) {
alert.setCancelable(false);
}
return alert;
}
function showDialog(builder) {
var dlg = builder.show();
var labelColor = dialogsCommon.getLabelColor();
if (labelColor) {
var textViewId = dlg.getContext().getResources().getIdentifier("android:id/alertTitle", null, null);
if (textViewId) {
var tv = dlg.findViewById(textViewId);
if (tv) {
tv.setTextColor(labelColor.android);
}
}
var messageTextViewId = dlg.getContext().getResources().getIdentifier("android:id/message", null, null);
if (messageTextViewId) {
var messageTextView = dlg.findViewById(messageTextViewId);
if (messageTextView) {
messageTextView.setTextColor(labelColor.android);
}
}
}
}
function addButtonsToAlertDialog(alert, options, callback) {
if (!options) {
return;
}
if (options.okButtonText) {
alert.setPositiveButton(options.okButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
callback(true);
}
}));
}
if (options.cancelButtonText) {
alert.setNegativeButton(options.cancelButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
callback(false);
}
}));
}
if (options.neutralButtonText) {
alert.setNeutralButton(options.neutralButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
callback(undefined);
}
}));
}
alert.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
onDismiss: function() {
callback(false);
}
}));
}
function alert(arg) {
return new Promise(function(resolve, reject) {
try {
var options = !dialogsCommon.isDialogOptions(arg) ? {
title: dialogsCommon.ALERT,
okButtonText: dialogsCommon.OK,
message: arg + ""
} : arg;
var alert = createAlertDialog(options);
alert.setPositiveButton(options.okButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
resolve();
}
}));
alert.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
onDismiss: function() {
resolve();
}
}));
showDialog(alert);
} catch (ex) {
reject(ex);
}
});
}
exports.alert = alert;
function confirm(arg) {
return new Promise(function(resolve, reject) {
try {
var options = !dialogsCommon.isDialogOptions(arg) ? {
title: dialogsCommon.CONFIRM,
okButtonText: dialogsCommon.OK,
cancelButtonText: dialogsCommon.CANCEL,
message: arg + ""
} : arg;
var alert = createAlertDialog(options);
addButtonsToAlertDialog(alert, options, function(result) {
resolve(result);
});
showDialog(alert);
} catch (ex) {
reject(ex);
}
});
}
exports.confirm = confirm;
function prompt(arg) {
var options;
var defaultOptions = {
title: dialogsCommon.PROMPT,
okButtonText: dialogsCommon.OK,
cancelButtonText: dialogsCommon.CANCEL,
inputType: dialogsCommon.inputType.text
};
if (arguments.length === 1) {
if (types.isString(arg)) {
options = defaultOptions;
options.message = arg;
} else {
options = arg;
}
} else if (arguments.length === 2) {
if (types.isString(arguments[0]) && types.isString(arguments[1])) {
options = defaultOptions;
options.message = arguments[0];
options.defaultText = arguments[1];
}
}
return new Promise(function(resolve, reject) {
try {
var alert = createAlertDialog(options);
var input = new android.widget.EditText(appmodule.android.currentContext);
if (options && options.inputType === dialogsCommon.inputType.password) {
input.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);
}
input.setText(options && options.defaultText || "");
alert.setView(input);
var getText = function() {
return input.getText().toString();
};
addButtonsToAlertDialog(alert, options, function(r) {
resolve({
result: r,
text: getText()
});
});
showDialog(alert);
} catch (ex) {
reject(ex);
}
});
}
exports.prompt = prompt;
function login(arg) {
var options;
var defaultOptions = {
title: dialogsCommon.LOGIN,
okButtonText: dialogsCommon.OK,
cancelButtonText: dialogsCommon.CANCEL
};
if (arguments.length === 1) {
if (types.isString(arguments[0])) {
options = defaultOptions;
options.message = arguments[0];
} else {
options = arguments[0];
}
} else if (arguments.length === 2) {
if (types.isString(arguments[0]) && types.isString(arguments[1])) {
options = defaultOptions;
options.message = arguments[0];
options.userName = arguments[1];
}
} else if (arguments.length === 3) {
if (types.isString(arguments[0]) && types.isString(arguments[1]) && types.isString(arguments[2])) {
options = defaultOptions;
options.message = arguments[0];
options.userName = arguments[1];
options.password = arguments[2];
}
}
return new Promise(function(resolve, reject) {
try {
var context = appmodule.android.currentContext;
var alert = createAlertDialog(options);
var userNameInput = new android.widget.EditText(context);
userNameInput.setText(options.userName ? options.userName : "");
var passwordInput = new android.widget.EditText(context);
passwordInput.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);
passwordInput.setText(options.password ? options.password : "");
var layout = new android.widget.LinearLayout(context);
layout.setOrientation(1);
layout.addView(userNameInput);
layout.addView(passwordInput);
alert.setView(layout);
addButtonsToAlertDialog(alert, options, function(r) {
resolve({
result: r,
userName: userNameInput.getText().toString(),
password: passwordInput.getText().toString()
});
});
showDialog(alert);
} catch (ex) {
reject(ex);
}
});
}
exports.login = login;
function action(arg) {
var options;
var defaultOptions = {
title: null,
cancelButtonText: dialogsCommon.CANCEL
};
if (arguments.length === 1) {
if (types.isString(arguments[0])) {
options = defaultOptions;
options.message = arguments[0];
} else {
options = arguments[0];
}
} else if (arguments.length === 2) {
if (types.isString(arguments[0]) && types.isString(arguments[1])) {
options = defaultOptions;
options.message = arguments[0];
options.cancelButtonText = arguments[1];
}
} else if (arguments.length === 3) {
if (types.isString(arguments[0]) && types.isString(arguments[1]) && types.isDefined(arguments[2])) {
options = defaultOptions;
options.message = arguments[0];
options.cancelButtonText = arguments[1];
options.actions = arguments[2];
}
}
return new Promise(function(resolve, reject) {
try {
var activity = appmodule.android.foregroundActivity || appmodule.android.startActivity;
var alert = new android.app.AlertDialog.Builder(activity);
var message = options && types.isString(options.message) ? options.message : "";
var title = options && types.isString(options.title) ? options.title : "";
if (options && options.cancelable === false) {
alert.setCancelable(false);
}
if (title) {
alert.setTitle(title);
if (!options.actions) {
alert.setMessage(message);
}
} else {
alert.setTitle(message);
}
if (options.actions) {
alert.setItems(options.actions, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, which) {
resolve(options.actions[which]);
}
}));
}
if (types.isString(options.cancelButtonText)) {
alert.setNegativeButton(options.cancelButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
resolve(options.cancelButtonText);
}
}));
}
alert.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
onDismiss: function() {
if (types.isString(options.cancelButtonText)) {
resolve(options.cancelButtonText);
} else {
resolve("");
}
}
}));
showDialog(alert);
} catch (ex) {
reject(ex);
}
});
}
exports.action = action;
}, function(module, exports, __webpack_require__) {
var frame = __webpack_require__(10);
var button = __webpack_require__(51);
var textField = __webpack_require__(94);
var label = __webpack_require__(100);
var types = __webpack_require__(14);
exports.STRING = "string", exports.PROMPT = "Prompt", exports.CONFIRM = "Confirm", 
exports.ALERT = "Alert", exports.LOGIN = "Login", exports.OK = "OK", exports.CANCEL = "Cancel";
var inputType;
(function(inputType) {
inputType.text = "text";
inputType.password = "password";
})(inputType = exports.inputType || (exports.inputType = {}));
function getCurrentPage() {
var topMostFrame = frame.topmost();
if (topMostFrame) {
return topMostFrame.currentPage;
}
return undefined;
}
exports.getCurrentPage = getCurrentPage;
function applySelectors(view) {
var currentPage = getCurrentPage();
if (currentPage) {
var styleScope = currentPage._getStyleScope();
if (styleScope) {
styleScope.applySelectors(view);
}
}
}
var buttonColor;
function getButtonColor() {
if (!buttonColor) {
var btn = new button.Button();
applySelectors(btn);
buttonColor = btn.color;
}
return buttonColor;
}
exports.getButtonColor = getButtonColor;
var textFieldColor;
function getTextFieldColor() {
if (!textFieldColor) {
var tf = new textField.TextField();
applySelectors(tf);
textFieldColor = tf.color;
}
return textFieldColor;
}
exports.getTextFieldColor = getTextFieldColor;
var labelColor;
function getLabelColor() {
if (!labelColor) {
var lbl = new label.Label();
applySelectors(lbl);
labelColor = lbl.color;
}
return labelColor;
}
exports.getLabelColor = getLabelColor;
function isDialogOptions(arg) {
return !types.isNullOrUndefined(arg) && (arg.message || arg.title);
}
exports.isDialogOptions = isDialogOptions;
}, function(module, exports, __webpack_require__) {
var frameCommon = __webpack_require__(11);
var pages = __webpack_require__(72);
var transitionModule = __webpack_require__(90);
var trace = __webpack_require__(30);
var observable_1 = __webpack_require__(18);
var application = __webpack_require__(16);
var types = __webpack_require__(14);
global.moduleMerge(frameCommon, exports);
var TAG = "_fragmentTag";
var HIDDEN = "_hidden";
var INTENT_EXTRA = "com.tns.activity";
var BACKSTACK_TAG = "_backstackTag";
var IS_BACK = "_isBack";
var NAV_DEPTH = "_navDepth";
var CLEARING_HISTORY = "_clearingHistory";
var FRAMEID = "_frameId";
var FRAGMENT = "_FRAGMENT";
var navDepth = -1;
var activityInitialized = false;
function onFragmentShown(fragment) {
trace.write("SHOWN " + fragment.getTag(), trace.categories.NativeLifecycle);
if (fragment[CLEARING_HISTORY]) {
trace.write(fragment.getTag() + " has been shown, but we are currently clearing history. Returning.", trace.categories.NativeLifecycle);
return null;
}
var frame = fragment.frame;
var entry = fragment.entry;
var page = entry.resolvedPage;
var currentNavigationContext;
var navigationQueue = frame._navigationQueue;
for (var i = 0; i < navigationQueue.length; i++) {
if (navigationQueue[i].entry === entry) {
currentNavigationContext = navigationQueue[i];
break;
}
}
var isBack = currentNavigationContext ? currentNavigationContext.isBackNavigation : false;
frame._addView(page);
if (!frame.isLoaded) {
frame._currentEntry = entry;
frame.onLoaded();
}
transitionModule._onFragmentShown(fragment, isBack);
}
function onFragmentHidden(fragment, destroyed) {
trace.write("HIDDEN " + fragment.getTag(), trace.categories.NativeLifecycle);
if (fragment[CLEARING_HISTORY]) {
trace.write(fragment.getTag() + " has been hidden, but we are currently clearing history. Clearing any existing transitions.", trace.categories.NativeLifecycle);
transitionModule._clearBackwardTransitions(fragment);
transitionModule._clearForwardTransitions(fragment);
}
var isBack = fragment.entry[IS_BACK];
fragment.entry[IS_BACK] = undefined;
transitionModule._onFragmentHidden(fragment, isBack, destroyed);
}
var Frame = function(_super) {
__extends(Frame, _super);
function Frame() {
_super.call(this);
this._containerViewId = -1;
this._android = new AndroidFrame(this);
this._listener = new android.view.View.OnAttachStateChangeListener({
onViewAttachedToWindow: this.onNativeViewAttachedToWindow.bind(this),
onViewDetachedFromWindow: this.onNativeViewDetachedToWindow.bind(this)
});
}
Object.defineProperty(Frame, "defaultAnimatedNavigation", {
get: function() {
return frameCommon.Frame.defaultAnimatedNavigation;
},
set: function(value) {
frameCommon.Frame.defaultAnimatedNavigation = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame, "defaultTransition", {
get: function() {
return frameCommon.Frame.defaultTransition;
},
set: function(value) {
frameCommon.Frame.defaultTransition = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "containerViewId", {
get: function() {
return this._containerViewId;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "_nativeView", {
get: function() {
return this._android.rootViewGroup;
},
enumerable: true,
configurable: true
});
Frame.prototype._navigateCore = function(backstackEntry) {
trace.write(this + "._navigateCore(page: " + backstackEntry.resolvedPage + ", backstackVisible: " + this._isEntryBackstackVisible(backstackEntry) + ", clearHistory: " + backstackEntry.entry.clearHistory + "), navDepth: " + navDepth, trace.categories.Navigation);
var activity = this._android.activity;
if (!activity) {
var currentActivity = this._android.currentActivity;
if (currentActivity) {
startActivity(currentActivity, this._android.frameId);
}
this._delayedNavigationEntry = backstackEntry;
return;
}
var manager = activity.getFragmentManager();
var isFirstNavigation = types.isNullOrUndefined(this._currentEntry);
backstackEntry.isNavigation = true;
if (this._currentEntry) {
this._currentEntry.isNavigation = true;
}
if (backstackEntry.entry.clearHistory) {
var backStackEntryCount = manager.getBackStackEntryCount();
var i = backStackEntryCount - 1;
var fragment = void 0;
while (i >= 0) {
fragment = manager.findFragmentByTag(manager.getBackStackEntryAt(i--).getName());
trace.write(fragment.getTag() + "[CLEARING_HISTORY] = true;", trace.categories.NativeLifecycle);
fragment[CLEARING_HISTORY] = true;
}
if (this.currentPage) {
fragment = manager.findFragmentByTag(this.currentPage[TAG]);
if (fragment) {
fragment[CLEARING_HISTORY] = true;
trace.write(fragment.getTag() + "[CLEARING_HISTORY] = true;", trace.categories.NativeLifecycle);
}
}
if (backStackEntryCount) {
var firstEntryName = manager.getBackStackEntryAt(0).getName();
trace.write("manager.popBackStack(" + firstEntryName + ", android.app.FragmentManager.POP_BACK_STACK_INCLUSIVE);", trace.categories.NativeLifecycle);
manager.popBackStack(firstEntryName, android.app.FragmentManager.POP_BACK_STACK_INCLUSIVE);
}
this._currentEntry = null;
navDepth = -1;
}
navDepth++;
var fragmentTransaction = manager.beginTransaction();
var currentFragmentTag;
var currentFragment;
if (this.currentPage) {
currentFragmentTag = this.currentPage[TAG];
currentFragment = manager.findFragmentByTag(currentFragmentTag);
}
var newFragmentTag = "fragment" + navDepth;
var newFragment = new FragmentClass();
var args = new android.os.Bundle();
args.putInt(FRAMEID, this._android.frameId);
newFragment.setArguments(args);
var animated = this._getIsAnimatedNavigation(backstackEntry.entry);
var navigationTransition = this._getNavigationTransition(backstackEntry.entry);
if (currentFragment) {
transitionModule._clearForwardTransitions(currentFragment);
if (animated && navigationTransition) {
transitionModule._setAndroidFragmentTransitions(navigationTransition, currentFragment, newFragment, fragmentTransaction);
}
}
newFragment.frame = this;
newFragment.entry = backstackEntry;
backstackEntry[FRAGMENT] = newFragment;
backstackEntry[BACKSTACK_TAG] = newFragmentTag;
backstackEntry[NAV_DEPTH] = navDepth;
backstackEntry.resolvedPage[TAG] = newFragmentTag;
if (isFirstNavigation) {
fragmentTransaction.add(this.containerViewId, newFragment, newFragmentTag);
trace.write("fragmentTransaction.add(" + newFragmentTag + ");", trace.categories.NativeLifecycle);
} else {
if (this.android.cachePagesOnNavigate && !backstackEntry.entry.clearHistory) {
if (currentFragment) {
fragmentTransaction.hide(currentFragment);
trace.write("fragmentTransaction.hide(" + currentFragmentTag + ");", trace.categories.NativeLifecycle);
} else {
trace.write("Could not find " + currentFragmentTag + " to hide.", trace.categories.NativeLifecycle);
}
fragmentTransaction.add(this.containerViewId, newFragment, newFragmentTag);
trace.write("fragmentTransaction.add(" + newFragmentTag + ");", trace.categories.NativeLifecycle);
} else {
fragmentTransaction.replace(this.containerViewId, newFragment, newFragmentTag);
trace.write("fragmentTransaction.replace(" + newFragmentTag + ");", trace.categories.NativeLifecycle);
}
if (this.backStack.length > 0 && this._currentEntry) {
var backstackTag = this._currentEntry[BACKSTACK_TAG];
fragmentTransaction.addToBackStack(backstackTag);
trace.write("fragmentTransaction.addToBackStack(" + backstackTag + ");", trace.categories.NativeLifecycle);
}
}
if (!isFirstNavigation) {
ensureAnimationFixed();
if (this.android.cachePagesOnNavigate && animationFixed < 0) {
fragmentTransaction.setTransition(android.app.FragmentTransaction.TRANSIT_NONE);
} else {
var transit = animated ? android.app.FragmentTransaction.TRANSIT_FRAGMENT_OPEN : android.app.FragmentTransaction.TRANSIT_NONE;
fragmentTransaction.setTransition(transit);
}
}
fragmentTransaction.commit();
trace.write("fragmentTransaction.commit();", trace.categories.NativeLifecycle);
};
Frame.prototype._goBackCore = function(backstackEntry) {
navDepth = backstackEntry[NAV_DEPTH];
backstackEntry.isNavigation = true;
if (this._currentEntry) {
this._currentEntry[IS_BACK] = true;
this._currentEntry.isNavigation = true;
}
trace.write(this + "._goBackCore(pageId: " + backstackEntry.resolvedPage.id + ", backstackVisible: " + this._isEntryBackstackVisible(backstackEntry) + ", clearHistory: " + backstackEntry.entry.clearHistory + "), navDepth: " + navDepth, trace.categories.Navigation);
var manager = this._android.activity.getFragmentManager();
if (manager.getBackStackEntryCount() > 0) {
manager.popBackStack(backstackEntry[BACKSTACK_TAG], android.app.FragmentManager.POP_BACK_STACK_INCLUSIVE);
}
};
Frame.prototype._createUI = function() {
var root = new org.nativescript.widgets.ContentLayout(this._context);
if (this._containerViewId < 0) {
this._containerViewId = android.view.View.generateViewId();
}
this._android.rootViewGroup = root;
this._android.rootViewGroup.setId(this._containerViewId);
this._android.rootViewGroup.addOnAttachStateChangeListener(this._listener);
};
Frame.prototype.onNativeViewAttachedToWindow = function(view) {
if (this._delayedNavigationEntry) {
this._navigateCore(this._delayedNavigationEntry);
this._delayedNavigationEntry = undefined;
}
};
Frame.prototype.onNativeViewDetachedToWindow = function(view) {};
Frame.prototype._popFromFrameStack = function() {
if (!this._isInFrameStack) {
return;
}
_super.prototype._popFromFrameStack.call(this);
if (this._android.hasOwnActivity) {
this._android.activity.finish();
}
};
Frame.prototype._clearAndroidReference = function() {
this._android.rootViewGroup.removeOnAttachStateChangeListener(this._listener);
this._android.rootViewGroup = null;
};
Frame.prototype._printNativeBackStack = function() {
if (!this._android.activity) {
return;
}
var manager = this._android.activity.getFragmentManager();
var length = manager.getBackStackEntryCount();
var i = length - 1;
console.log("---------------------------");
console.log("Fragment Manager Back Stack (" + length + ")");
while (i >= 0) {
var fragment = manager.findFragmentByTag(manager.getBackStackEntryAt(i--).getName());
console.log("[ " + fragment.getTag() + " ]");
}
};
Frame.prototype._getNavBarVisible = function(page) {
if (types.isDefined(page.actionBarHidden)) {
return !page.actionBarHidden;
}
if (this._android && types.isDefined(this._android.showActionBar)) {
return this._android.showActionBar;
}
return true;
};
Frame.prototype._processNavigationContext = function(navigationContext) {
var _this = this;
var activity = this._android.activity;
if (activity) {
var isForegroundActivity = activity === application.android.foregroundActivity;
var isPaused = application.android.paused;
if (activity && !isForegroundActivity || isForegroundActivity && isPaused) {
var weakActivity_1 = new WeakRef(activity);
var resume_1 = function(args) {
var weakActivityInstance = weakActivity_1.get();
var isCurrent = args.activity === weakActivityInstance;
if (!weakActivityInstance) {
trace.write("Frame _processNavigationContext: Drop For Activity GC-ed", trace.categories.Navigation);
unsubscribe_1();
return;
}
if (isCurrent) {
trace.write("Frame _processNavigationContext: Activity.Resumed, Continue", trace.categories.Navigation);
_super.prototype._processNavigationContext.call(_this, navigationContext);
unsubscribe_1();
}
};
var unsubscribe_1 = function() {
trace.write("Frame _processNavigationContext: Unsubscribe from Activity.Resumed", trace.categories.Navigation);
application.android.off(application.AndroidApplication.activityResumedEvent, resume_1);
application.android.off(application.AndroidApplication.activityStoppedEvent, unsubscribe_1);
application.android.off(application.AndroidApplication.activityDestroyedEvent, unsubscribe_1);
};
trace.write("Frame._processNavigationContext: Subscribe for Activity.Resumed", trace.categories.Navigation);
application.android.on(application.AndroidApplication.activityResumedEvent, resume_1);
application.android.on(application.AndroidApplication.activityStoppedEvent, unsubscribe_1);
application.android.on(application.AndroidApplication.activityDestroyedEvent, unsubscribe_1);
return;
}
}
_super.prototype._processNavigationContext.call(this, navigationContext);
};
return Frame;
}(frameCommon.Frame);
exports.Frame = Frame;
var framesCounter = 0;
var framesCache = new Array();
var AndroidFrame = function(_super) {
__extends(AndroidFrame, _super);
function AndroidFrame(owner) {
_super.call(this);
this.hasOwnActivity = false;
this._showActionBar = true;
this._owner = owner;
this.frameId = framesCounter++;
framesCache.push(new WeakRef(this));
}
Object.defineProperty(AndroidFrame.prototype, "showActionBar", {
get: function() {
return this._showActionBar;
},
set: function(value) {
if (this._showActionBar !== value) {
this._showActionBar = value;
if (this.owner.currentPage) {
this.owner.currentPage.actionBar.update();
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "activity", {
get: function() {
var activity = this.owner._context;
if (activity) {
return activity;
}
var currView = this._owner.parent;
while (currView) {
if (currView instanceof Frame) {
return currView.android.activity;
}
currView = currView.parent;
}
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "actionBar", {
get: function() {
var activity = this.currentActivity;
if (!activity) {
return undefined;
}
var bar = activity.getActionBar();
if (!bar) {
return undefined;
}
return bar;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "currentActivity", {
get: function() {
var activity = this.activity;
if (activity) {
return activity;
}
var stack = frameCommon.stack(), length = stack.length, i = length - 1, frame;
for (i; i >= 0; i--) {
frame = stack[i];
activity = frame.android.activity;
if (activity) {
return activity;
}
}
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "owner", {
get: function() {
return this._owner;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "cachePagesOnNavigate", {
get: function() {
return this._cachePagesOnNavigate;
},
set: function(value) {
if (this._cachePagesOnNavigate !== value) {
if (this._owner.backStack.length > 0) {
throw new Error("Cannot set cachePagesOnNavigate if there are items in the back stack.");
}
this._cachePagesOnNavigate = value;
}
},
enumerable: true,
configurable: true
});
AndroidFrame.prototype.canGoBack = function() {
if (!this.activity) {
return false;
}
return this.activity.getIntent().getAction() !== android.content.Intent.ACTION_MAIN;
};
return AndroidFrame;
}(observable_1.Observable);
function findPageForFragment(fragment, frame) {
var fragmentTag = fragment.getTag();
var page;
var entry;
trace.write("Finding page for " + fragmentTag + ".", trace.categories.NativeLifecycle);
if (fragmentTag === pages.DIALOG_FRAGMENT_TAG) {
trace.write("No need to find page for dialog fragment.", trace.categories.NativeLifecycle);
return;
}
if (frame.currentPage && frame.currentPage[TAG] === fragmentTag) {
page = frame.currentPage;
entry = frame._currentEntry;
trace.write("Current page matches fragment " + fragmentTag + ".", trace.categories.NativeLifecycle);
} else {
var backStack = frame.backStack;
for (var i = 0; i < backStack.length; i++) {
if (backStack[i].resolvedPage[TAG] === fragmentTag) {
entry = backStack[i];
break;
}
}
if (entry) {
page = entry.resolvedPage;
trace.write("Found " + page + " for " + fragmentTag, trace.categories.NativeLifecycle);
}
}
if (page) {
fragment.frame = frame;
fragment.entry = entry;
page[TAG] = fragmentTag;
} else {}
}
function startActivity(activity, frameId) {
var intent = new android.content.Intent(activity, com.tns.NativeScriptActivity.class);
intent.setAction(android.content.Intent.ACTION_DEFAULT);
intent.putExtra(INTENT_EXTRA, frameId);
activity.startActivity(intent);
}
function getFrameById(frameId) {
for (var i = 0; i < framesCache.length; i++) {
var aliveFrame = framesCache[i].get();
if (aliveFrame && aliveFrame.frameId === frameId) {
return aliveFrame.owner;
}
}
return null;
}
var animationFixed;
function ensureAnimationFixed() {
if (!animationFixed) {
animationFixed = android.os.Build.VERSION.SDK_INT >= 19 ? 1 : -1;
}
}
var FragmentClass;
var NativeScriptActivity;
exports.evalLazy = function() {
FragmentClass = function(_super) {
__extends(FragmentClass, _super);
function FragmentClass() {
_super.call(this);
return global.__native(this);
}
FragmentClass.prototype.onHiddenChanged = function(hidden) {
trace.write(this.getTag() + ".onHiddenChanged(" + hidden + ")", trace.categories.NativeLifecycle);
_super.prototype.onHiddenChanged.call(this, hidden);
if (hidden) {
onFragmentHidden(this, false);
} else {
onFragmentShown(this);
}
};
FragmentClass.prototype.onCreateAnimator = function(transit, enter, nextAnim) {
var animator = transitionModule._onFragmentCreateAnimator(this, nextAnim);
if (!animator) {
animator = _super.prototype.onCreateAnimator.call(this, transit, enter, nextAnim);
}
trace.write(this.getTag() + ".onCreateAnimator(" + transit + ", " + enter + ", " + nextAnim + "): " + animator, trace.categories.NativeLifecycle);
return animator;
};
FragmentClass.prototype.onCreate = function(savedInstanceState) {
trace.write(this.getTag() + ".onCreate(" + savedInstanceState + ")", trace.categories.NativeLifecycle);
_super.prototype.onCreate.call(this, savedInstanceState);
_super.prototype.setHasOptionsMenu.call(this, true);
if (!this.entry) {
var frameId = this.getArguments().getInt(FRAMEID);
var frame = getFrameById(frameId);
if (frame) {
this.frame = frame;
} else {
throw new Error("Cannot find Frame for " + this);
}
findPageForFragment(this, this.frame);
}
};
FragmentClass.prototype.onCreateView = function(inflater, container, savedInstanceState) {
trace.write(this.getTag() + ".onCreateView(inflater, container, " + savedInstanceState + ")", trace.categories.NativeLifecycle);
var entry = this.entry;
var page = entry.resolvedPage;
if (savedInstanceState && savedInstanceState.getBoolean(HIDDEN, false)) {
this.getFragmentManager().beginTransaction().hide(this).commit();
page._onAttached(this.getActivity());
} else {
onFragmentShown(this);
}
return page._nativeView;
};
FragmentClass.prototype.onSaveInstanceState = function(outState) {
trace.write(this.getTag() + ".onSaveInstanceState(" + outState + ")", trace.categories.NativeLifecycle);
_super.prototype.onSaveInstanceState.call(this, outState);
if (this.isHidden()) {
outState.putBoolean(HIDDEN, true);
}
};
FragmentClass.prototype.onDestroyView = function() {
trace.write(this.getTag() + ".onDestroyView()", trace.categories.NativeLifecycle);
_super.prototype.onDestroyView.call(this);
onFragmentHidden(this, true);
};
FragmentClass.prototype.onDestroy = function() {
trace.write(this.getTag() + ".onDestroy()", trace.categories.NativeLifecycle);
_super.prototype.onDestroy.call(this);
this.entry[FRAGMENT] = undefined;
};
FragmentClass = __decorate([ JavaProxy("com.tns.FragmentClass") ], FragmentClass);
return FragmentClass;
}(android.app.Fragment);
NativeScriptActivity = function(_super) {
__extends(NativeScriptActivity, _super);
function NativeScriptActivity() {
_super.call(this);
return global.__native(this);
}
NativeScriptActivity.prototype.onCreate = function(savedInstanceState) {
trace.write("NativeScriptActivity.onCreate(" + savedInstanceState + ")", trace.categories.NativeLifecycle);
var app = application.android;
var intent = this.getIntent();
if (application.onLaunch) {
application.onLaunch(intent);
}
var args = {
eventName: application.launchEvent,
object: app,
android: intent
};
application.notify(args);
var frameId = -1;
var rootView = args.root;
var extras = intent.getExtras();
if (extras) {
frameId = extras.getInt(INTENT_EXTRA, -1);
} else if (savedInstanceState) {
frameId = savedInstanceState.getInt(INTENT_EXTRA, -1);
}
var frame;
var navParam;
if (frameId >= 0) {
rootView = getFrameById(frameId);
}
if (!rootView) {
navParam = application.mainEntry;
if (!navParam) {
navParam = application.mainModule;
}
if (navParam) {
frame = new Frame();
} else {
throw new Error("A Frame must be used to navigate to a Page.");
}
rootView = frame;
}
var isRestart = !!savedInstanceState && activityInitialized;
_super.prototype.onCreate.call(this, isRestart ? savedInstanceState : null);
this.rootView = rootView;
rootView._onAttached(this);
this.setContentView(rootView._nativeView, new org.nativescript.widgets.CommonLayoutParams());
if (frame) {
frame.navigate(navParam);
}
activityInitialized = true;
};
NativeScriptActivity.prototype.onSaveInstanceState = function(outState) {
_super.prototype.onSaveInstanceState.call(this, outState);
var view = this.rootView;
if (view instanceof Frame) {
outState.putInt(INTENT_EXTRA, view.android.frameId);
}
};
NativeScriptActivity.prototype.onStart = function() {
_super.prototype.onStart.call(this);
trace.write("NativeScriptActivity.onStart();", trace.categories.NativeLifecycle);
var rootView = this.rootView;
if (rootView && !rootView.isLoaded) {
rootView.onLoaded();
}
};
NativeScriptActivity.prototype.onStop = function() {
_super.prototype.onStop.call(this);
trace.write("NativeScriptActivity.onStop();", trace.categories.NativeLifecycle);
var rootView = this.rootView;
if (rootView && rootView.isLoaded) {
rootView.onUnloaded();
}
};
NativeScriptActivity.prototype.onDestroy = function() {
var rootView = this.rootView;
if (rootView && rootView._context) {
rootView._onDetached(true);
}
_super.prototype.onDestroy.call(this);
trace.write("NativeScriptActivity.onDestroy();", trace.categories.NativeLifecycle);
};
NativeScriptActivity.prototype.onBackPressed = function() {
trace.write("NativeScriptActivity.onBackPressed;", trace.categories.NativeLifecycle);
var args = {
eventName: "activityBackPressed",
object: application.android,
activity: this,
cancel: false
};
application.android.notify(args);
if (args.cancel) {
return;
}
if (!frameCommon.goBack()) {
_super.prototype.onBackPressed.call(this);
}
};
NativeScriptActivity.prototype.onRequestPermissionsResult = function(requestCode, permissions, grantResults) {
trace.write("NativeScriptActivity.onRequestPermissionsResult;", trace.categories.NativeLifecycle);
application.android.notify({
eventName: "activityRequestPermissions",
object: application.android,
activity: this,
requestCode: requestCode,
permissions: permissions,
grantResults: grantResults
});
};
NativeScriptActivity.prototype.onActivityResult = function(requestCode, resultCode, data) {
_super.prototype.onActivityResult.call(this, requestCode, resultCode, data);
trace.write("NativeScriptActivity.onActivityResult(" + requestCode + ", " + resultCode + ", " + data + ")", trace.categories.NativeLifecycle);
var result = application.android.onActivityResult;
if (result) {
result(requestCode, resultCode, data);
}
application.android.notify({
eventName: "activityResult",
object: application.android,
activity: this,
requestCode: requestCode,
resultCode: resultCode,
intent: data
});
};
NativeScriptActivity = __decorate([ JavaProxy("com.tns.NativeScriptActivity") ], NativeScriptActivity);
return NativeScriptActivity;
}(android.app.Activity);
};
}, function(module, exports, __webpack_require__) {
var view_1 = __webpack_require__(12);
var page_1 = __webpack_require__(72);
var types_1 = __webpack_require__(14);
var trace = __webpack_require__(30);
var file_name_resolver_1 = __webpack_require__(44);
var fs = __webpack_require__(19);
var platform = __webpack_require__(45);
var builder;
function ensureBuilder() {
if (!builder) {
builder = __webpack_require__(82);
}
}
var frameStack = [];
function buildEntryFromArgs(arg) {
var entry;
if (arg instanceof page_1.Page) {
throw new Error("Navigating to a Page instance is no longer supported. Please navigate by using either a module name or a page factory function.");
} else if (types_1.isString(arg)) {
entry = {
moduleName: arg
};
} else if (types_1.isFunction(arg)) {
entry = {
create: arg
};
} else {
entry = arg;
}
return entry;
}
function reloadPage() {
var frame = exports.topmost();
if (frame) {
var currentEntry = frame._currentEntry.entry;
var newEntry = {
animated: false,
clearHistory: true,
context: currentEntry.context,
create: currentEntry.create,
moduleName: currentEntry.moduleName,
backstackVisible: currentEntry.backstackVisible
};
frame.navigate(newEntry);
}
}
exports.reloadPage = reloadPage;
function resolvePageFromEntry(entry) {
var page;
if (entry.create) {
page = entry.create();
if (!(page && page instanceof page_1.Page)) {
throw new Error("Failed to create Page with entry.create() function.");
}
} else if (entry.moduleName) {
var currentAppPath = fs.knownFolders.currentApp().path;
var moduleNamePath = fs.path.join(currentAppPath, entry.moduleName);
var moduleExports;
if (global.moduleExists(entry.moduleName)) {
trace.write("Loading pre-registered JS module: " + entry.moduleName, trace.categories.Navigation);
moduleExports = global.loadModule(entry.moduleName);
} else {
var moduleExportsResolvedPath = file_name_resolver_1.resolveFileName(moduleNamePath, "js");
if (moduleExportsResolvedPath) {
trace.write("Loading JS file: " + moduleExportsResolvedPath, trace.categories.Navigation);
moduleExportsResolvedPath = moduleExportsResolvedPath.substr(0, moduleExportsResolvedPath.length - 3);
moduleExports = global.loadModule(moduleExportsResolvedPath);
}
}
if (moduleExports && moduleExports.createPage) {
trace.write("Calling createPage()", trace.categories.Navigation);
page = moduleExports.createPage();
} else {
page = pageFromBuilder(moduleNamePath, moduleExports);
}
if (!(page && page instanceof page_1.Page)) {
throw new Error("Failed to load Page from entry.moduleName: " + entry.moduleName);
}
var cssFileName = file_name_resolver_1.resolveFileName(moduleNamePath, "css");
if (cssFileName && !page["cssFile"]) {
page.addCssFile(cssFileName);
}
}
return page;
}
exports.resolvePageFromEntry = resolvePageFromEntry;
function pageFromBuilder(moduleNamePath, moduleExports) {
var page;
var element;
var fileName = file_name_resolver_1.resolveFileName(moduleNamePath, "xml");
if (fileName) {
trace.write("Loading XML file: " + fileName, trace.categories.Navigation);
ensureBuilder();
element = builder.load(fileName, moduleExports);
if (element instanceof page_1.Page) {
page = element;
}
}
return page;
}
var Frame = function(_super) {
__extends(Frame, _super);
function Frame() {
_super.call(this);
this._isInFrameStack = false;
this._backStack = new Array();
this._navigationQueue = new Array();
}
Frame.prototype.canGoBack = function() {
return this._backStack.length > 0;
};
Frame.prototype.goBack = function(backstackEntry) {
trace.write("GO BACK", trace.categories.Navigation);
if (!this.canGoBack()) {
return;
}
if (!backstackEntry) {
backstackEntry = this._backStack.pop();
} else {
var backIndex = this._backStack.indexOf(backstackEntry);
if (backIndex < 0) {
return;
}
this._backStack.splice(backIndex);
}
var navigationContext = {
entry: backstackEntry,
isBackNavigation: true
};
this._navigationQueue.push(navigationContext);
if (this._navigationQueue.length === 1) {
this._processNavigationContext(navigationContext);
} else {
trace.write("Going back scheduled", trace.categories.Navigation);
}
};
Frame.prototype.navigate = function(param) {
trace.write("NAVIGATE", trace.categories.Navigation);
var entry = buildEntryFromArgs(param);
var page = resolvePageFromEntry(entry);
this._pushInFrameStack();
var backstackEntry = {
entry: entry,
resolvedPage: page,
isNavigation: true
};
var navigationContext = {
entry: backstackEntry,
isBackNavigation: false
};
this._navigationQueue.push(navigationContext);
if (this._navigationQueue.length === 1) {
this._processNavigationContext(navigationContext);
} else {
trace.write("Navigation scheduled", trace.categories.Navigation);
}
};
Frame.prototype._processNavigationQueue = function(page) {
if (this._navigationQueue.length === 0) {
return;
}
var entry = this._navigationQueue[0].entry;
var currentNavigationPage = entry.resolvedPage;
if (page !== currentNavigationPage) {
throw new Error("Corrupted navigation stack; page: " + page + "; currentNavigationPage: " + currentNavigationPage);
}
this._navigationQueue.shift();
if (this._navigationQueue.length > 0) {
var navigationContext = this._navigationQueue[0];
this._processNavigationContext(navigationContext);
}
this._updateActionBar();
};
Frame.prototype.navigationQueueIsEmpty = function() {
return this._navigationQueue.length === 0;
};
Frame.prototype._isEntryBackstackVisible = function(entry) {
if (!entry) {
return false;
}
var backstackVisibleValue = entry.entry.backstackVisible;
var backstackHidden = types_1.isDefined(backstackVisibleValue) && !backstackVisibleValue;
return !backstackHidden;
};
Frame.prototype._updateActionBar = function(page) {};
Frame.prototype._processNavigationContext = function(navigationContext) {
if (navigationContext.isBackNavigation) {
this.performGoBack(navigationContext);
} else {
this.performNavigation(navigationContext);
}
};
Frame.prototype.performNavigation = function(navigationContext) {
var navContext = navigationContext.entry;
if (navigationContext.entry.entry.clearHistory) {
this._backStack.length = 0;
} else if (this._isEntryBackstackVisible(this._currentEntry)) {
this._backStack.push(this._currentEntry);
}
this._onNavigatingTo(navContext, navigationContext.isBackNavigation);
this._navigateCore(navContext);
};
Frame.prototype.performGoBack = function(navigationContext) {
var navContext = navigationContext.entry;
this._onNavigatingTo(navContext, navigationContext.isBackNavigation);
this._goBackCore(navContext);
};
Frame.prototype._goBackCore = function(backstackEntry) {};
Frame.prototype._navigateCore = function(backstackEntry) {};
Frame.prototype._onNavigatingTo = function(backstackEntry, isBack) {
if (this.currentPage) {
this.currentPage.onNavigatingFrom(isBack);
}
backstackEntry.resolvedPage.onNavigatingTo(backstackEntry.entry.context, isBack);
};
Object.defineProperty(Frame.prototype, "animated", {
get: function() {
return this._animated;
},
set: function(value) {
this._animated = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "transition", {
get: function() {
return this._transition;
},
set: function(value) {
this._transition = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "backStack", {
get: function() {
return this._backStack.slice();
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "currentPage", {
get: function() {
if (this._currentEntry) {
return this._currentEntry.resolvedPage;
}
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "currentEntry", {
get: function() {
return this._currentEntry.entry;
},
enumerable: true,
configurable: true
});
Frame.prototype._pushInFrameStack = function() {
if (this._isInFrameStack) {
return;
}
frameStack.push(this);
this._isInFrameStack = true;
};
Frame.prototype._popFromFrameStack = function() {
if (!this._isInFrameStack) {
return;
}
var top = _topmost();
if (top !== this) {
throw new Error("Cannot pop a Frame which is not at the top of the navigation stack.");
}
frameStack.pop();
this._isInFrameStack = false;
};
Object.defineProperty(Frame.prototype, "_childrenCount", {
get: function() {
if (this.currentPage) {
return 1;
}
return 0;
},
enumerable: true,
configurable: true
});
Frame.prototype._eachChildView = function(callback) {
if (this.currentPage) {
callback(this.currentPage);
}
};
Frame.prototype._getIsAnimatedNavigation = function(entry) {
if (entry && types_1.isDefined(entry.animated)) {
return entry.animated;
}
if (types_1.isDefined(this.animated)) {
return this.animated;
}
return Frame.defaultAnimatedNavigation;
};
Frame.prototype._getNavigationTransition = function(entry) {
if (entry) {
if (platform.device.os === platform.platformNames.ios && types_1.isDefined(entry.transitioniOS)) {
return entry.transitioniOS;
}
if (platform.device.os === platform.platformNames.android && types_1.isDefined(entry.transitionAndroid)) {
return entry.transitionAndroid;
}
if (types_1.isDefined(entry.transition)) {
return entry.transition;
}
}
if (types_1.isDefined(this.transition)) {
return this.transition;
}
return Frame.defaultTransition;
};
Object.defineProperty(Frame.prototype, "navigationBarHeight", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Frame.prototype._getNavBarVisible = function(page) {
throw new Error();
};
Frame.prototype._addViewToNativeVisualTree = function(child) {
return true;
};
Frame.prototype._removeViewFromNativeVisualTree = function(child) {
child._isAddedToNativeVisualTree = false;
};
Frame.prototype._printFrameBackStack = function() {
var length = this.backStack.length;
var i = length - 1;
console.log("---------------------------");
console.log("Frame Back Stack (" + length + ")");
while (i >= 0) {
var backstackEntry = this.backStack[i--];
console.log("[ " + backstackEntry.resolvedPage.id + " ]");
}
};
Frame.androidOptionSelectedEvent = "optionSelected";
Frame.defaultAnimatedNavigation = true;
return Frame;
}(view_1.CustomLayoutView);
exports.Frame = Frame;
var _topmost = function() {
if (frameStack.length > 0) {
return frameStack[frameStack.length - 1];
}
return undefined;
};
exports.topmost = _topmost;
function goBack() {
var top = _topmost();
if (top.canGoBack()) {
top.goBack();
return true;
}
if (frameStack.length > 1) {
top._popFromFrameStack();
}
return false;
}
exports.goBack = goBack;
function stack() {
return frameStack;
}
exports.stack = stack;
}, function(module, exports, __webpack_require__) {
var viewCommon = __webpack_require__(13);
var trace = __webpack_require__(30);
var utils = __webpack_require__(22);
var types = __webpack_require__(14);
var style = __webpack_require__(15);
var enums = __webpack_require__(24);
var background = __webpack_require__(48);
global.moduleMerge(viewCommon, exports);
var ANDROID = "_android";
var NATIVE_VIEW = "_nativeView";
var VIEW_GROUP = "_viewGroup";
function onAutomationTextPropertyChanged(data) {
var view = data.object;
view._nativeView.setContentDescription(data.newValue);
}
viewCommon.View.automationTextProperty.metadata.onSetNativeValue = onAutomationTextPropertyChanged;
function onIdPropertyChanged(data) {
var view = data.object;
view._nativeView.setTag(data.newValue);
}
viewCommon.View.idProperty.metadata.onSetNativeValue = onIdPropertyChanged;
function onTranslateXPropertyChanged(data) {
var view = data.object;
view._nativeView.setTranslationX(data.newValue * utils.layout.getDisplayDensity());
}
viewCommon.View.translateXProperty.metadata.onSetNativeValue = onTranslateXPropertyChanged;
function onTranslateYPropertyChanged(data) {
var view = data.object;
view._nativeView.setTranslationY(data.newValue * utils.layout.getDisplayDensity());
}
viewCommon.View.translateYProperty.metadata.onSetNativeValue = onTranslateYPropertyChanged;
function onScaleXPropertyChanged(data) {
var view = data.object;
view._nativeView.setScaleX(data.newValue);
}
viewCommon.View.scaleXProperty.metadata.onSetNativeValue = onScaleXPropertyChanged;
function onScaleYPropertyChanged(data) {
var view = data.object;
view._nativeView.setScaleY(data.newValue);
}
viewCommon.View.scaleYProperty.metadata.onSetNativeValue = onScaleYPropertyChanged;
function onOriginXPropertyChanged(data) {
org.nativescript.widgets.OriginPoint.setX(data.object._nativeView, data.newValue);
}
viewCommon.View.originXProperty.metadata.onSetNativeValue = onOriginXPropertyChanged;
function onOriginYPropertyChanged(data) {
org.nativescript.widgets.OriginPoint.setY(data.object._nativeView, data.newValue);
}
viewCommon.View.originYProperty.metadata.onSetNativeValue = onOriginYPropertyChanged;
function onRotatePropertyChanged(data) {
var view = data.object;
view._nativeView.setRotation(data.newValue);
}
viewCommon.View.rotateProperty.metadata.onSetNativeValue = onRotatePropertyChanged;
function onIsEnabledPropertyChanged(data) {
var view = data.object;
view._nativeView.setEnabled(data.newValue);
}
viewCommon.View.isEnabledProperty.metadata.onSetNativeValue = onIsEnabledPropertyChanged;
function onIsUserInteractionEnabledPropertyChanged(data) {
var view = data.object;
view._updateOnTouchListener(data.newValue);
}
viewCommon.View.isUserInteractionEnabledProperty.metadata.onSetNativeValue = onIsUserInteractionEnabledPropertyChanged;
var View = function(_super) {
__extends(View, _super);
function View() {
_super.apply(this, arguments);
this._disableUserInteractionListener = new android.view.View.OnTouchListener({
onTouch: function(view, event) {
return true;
}
});
}
View.prototype._updateOnTouchListener = function(isUserInteractionEnabled) {
if (!isUserInteractionEnabled) {
this._nativeView.setOnTouchListener(this._disableUserInteractionListener);
return;
}
if (this._gesturesListener) {
this._nativeView.setOnTouchListener(this._gesturesListener);
return;
}
this._nativeView.setOnTouchListener(null);
};
Object.defineProperty(View.prototype, "gesturesListener", {
set: function(value) {
this._gesturesListener = value;
this._updateOnTouchListener(this.isUserInteractionEnabled);
},
enumerable: true,
configurable: true
});
View.prototype.observe = function(type, callback, thisArg) {
_super.prototype.observe.call(this, type, callback, thisArg);
if (this.isLoaded && !this.touchListenerIsSet) {
this.setOnTouchListener();
}
};
View.prototype.onLoaded = function() {
_super.prototype.onLoaded.call(this);
this.setOnTouchListener();
};
View.prototype.onUnloaded = function() {
_super.prototype.onUnloaded.call(this);
if (this._nativeView && this._nativeView.setOnTouchListener) {
this._nativeView.setOnTouchListener(null);
this.touchListenerIsSet = false;
}
};
View.prototype.hasGestureObservers = function() {
return this._gestureObservers && Object.keys(this._gestureObservers).length > 0;
};
View.prototype.setOnTouchListener = function() {
if (this._nativeView && this._nativeView.setOnTouchListener && this.hasGestureObservers()) {
this.touchListenerIsSet = true;
var that = new WeakRef(this);
if (this._nativeView.setClickable) {
this._nativeView.setClickable(true);
}
this._nativeView.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(view, motionEvent) {
var owner = that.get();
if (!owner) {
return false;
}
for (var type in owner._gestureObservers) {
var list = owner._gestureObservers[type];
for (var i = 0; i < list.length; i++) {
list[i].androidOnTouchEvent(motionEvent);
}
}
if (!owner._nativeView || !owner._nativeView.onTouchEvent) {
return false;
}
return owner._nativeView.onTouchEvent(motionEvent);
}
}));
}
};
View.prototype._addViewCore = function(view, atIndex) {
if (this._context) {
view._onAttached(this._context);
}
_super.prototype._addViewCore.call(this, view, atIndex);
};
View.prototype._removeViewCore = function(view) {
_super.prototype._removeViewCore.call(this, view);
if (view._context) {
view._onDetached();
}
};
View.prototype._onAttached = function(context) {
if (!context) {
throw new Error("Expected valid android.content.Context instance.");
}
trace.write("calling _onAttached on view " + this._domId, trace.categories.VisualTreeEvents);
if (this._context === context) {
return;
}
if (this._context) {
this._onDetached(true);
}
this._context = context;
this._onContextChanged();
trace.notifyEvent(this, "_onAttached");
if (this._childrenCount > 0) {
var that = this;
var eachChild = function(child) {
child._onAttached(context);
if (!child._isAddedToNativeVisualTree) {
child._isAddedToNativeVisualTree = that._addViewToNativeVisualTree(child);
}
return true;
};
this._eachChildView(eachChild);
}
};
View.prototype._onDetached = function(force) {
if (this._childrenCount > 0) {
var that = this;
var eachChild = function(child) {
if (child._isAddedToNativeVisualTree) {
that._removeViewFromNativeVisualTree(child);
}
if (child._context) {
child._onDetached(force);
}
return true;
};
this._eachChildView(eachChild);
}
trace.write("calling _onDetached on view " + this._domId, trace.categories.VisualTreeEvents);
this._clearAndroidReference();
this._context = undefined;
trace.notifyEvent(this, "_onDetached");
};
View.prototype._clearAndroidReference = function() {
if (this[NATIVE_VIEW] === this[ANDROID]) {
this[NATIVE_VIEW] = undefined;
}
if (this[VIEW_GROUP] === this[ANDROID]) {
this[VIEW_GROUP] = undefined;
}
this[ANDROID] = undefined;
};
View.prototype._onContextChanged = function() {
trace.write("calling _onContextChanged on view " + this._domId, trace.categories.VisualTreeEvents);
this._createUI();
if (this._nativeView && !(this._nativeView.getLayoutParams() instanceof org.nativescript.widgets.CommonLayoutParams)) {
this._nativeView.setLayoutParams(new org.nativescript.widgets.CommonLayoutParams());
}
this._syncNativeProperties();
trace.notifyEvent(this, "_onContextChanged");
};
Object.defineProperty(View.prototype, "_nativeView", {
get: function() {
return this.android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isLayoutValid", {
get: function() {
if (this._nativeView) {
return !this._nativeView.isLayoutRequested();
}
return false;
},
enumerable: true,
configurable: true
});
View.prototype.layoutNativeView = function(left, top, right, bottom) {
if (this._nativeView) {
this._nativeView.layout(left, top, right, bottom);
}
};
View.prototype.requestLayout = function() {
_super.prototype.requestLayout.call(this);
if (this._nativeView) {
return this._nativeView.requestLayout();
}
};
View.prototype.measure = function(widthMeasureSpec, heightMeasureSpec) {
_super.prototype.measure.call(this, widthMeasureSpec, heightMeasureSpec);
this.onMeasure(widthMeasureSpec, heightMeasureSpec);
};
View.prototype.layout = function(left, top, right, bottom) {
_super.prototype.layout.call(this, left, top, right, bottom);
this.onLayout(left, top, right, bottom);
};
View.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var view = this._nativeView;
if (view) {
view.measure(widthMeasureSpec, heightMeasureSpec);
this.setMeasuredDimension(view.getMeasuredWidth(), view.getMeasuredHeight());
}
};
View.prototype.onLayout = function(left, top, right, bottom) {
var view = this._nativeView;
if (view) {
this.layoutNativeView(left, top, right, bottom);
}
};
View.prototype._getCurrentLayoutBounds = function() {
if (this._nativeView) {
return {
left: this._nativeView.getLeft(),
top: this._nativeView.getTop(),
right: this._nativeView.getRight(),
bottom: this._nativeView.getBottom()
};
}
return _super.prototype._getCurrentLayoutBounds.call(this);
};
View.prototype.getMeasuredWidth = function() {
if (this._nativeView) {
return this._nativeView.getMeasuredWidth();
}
return _super.prototype.getMeasuredWidth.call(this);
};
View.prototype.getMeasuredHeight = function() {
if (this._nativeView) {
return this._nativeView.getMeasuredHeight();
}
return _super.prototype.getMeasuredHeight.call(this);
};
View.prototype.focus = function() {
if (this._nativeView) {
return this._nativeView.requestFocus();
}
return false;
};
View.prototype.getLocationInWindow = function() {
if (!this._nativeView || !this._nativeView.getWindowToken()) {
return undefined;
}
var nativeArray = Array.create("int", 2);
this._nativeView.getLocationInWindow(nativeArray);
return {
x: utils.layout.toDeviceIndependentPixels(nativeArray[0]),
y: utils.layout.toDeviceIndependentPixels(nativeArray[1])
};
};
View.prototype.getLocationOnScreen = function() {
if (!this._nativeView || !this._nativeView.getWindowToken()) {
return undefined;
}
var nativeArray = Array.create("int", 2);
this._nativeView.getLocationOnScreen(nativeArray);
return {
x: utils.layout.toDeviceIndependentPixels(nativeArray[0]),
y: utils.layout.toDeviceIndependentPixels(nativeArray[1])
};
};
View.prototype.getLocationRelativeTo = function(otherView) {
if (!this._nativeView || !this._nativeView.getWindowToken() || !otherView._nativeView || !otherView._nativeView.getWindowToken() || this._nativeView.getWindowToken() !== otherView._nativeView.getWindowToken()) {
return undefined;
}
var myArray = Array.create("int", 2);
this._nativeView.getLocationOnScreen(myArray);
var otherArray = Array.create("int", 2);
otherView._nativeView.getLocationOnScreen(otherArray);
return {
x: utils.layout.toDeviceIndependentPixels(myArray[0] - otherArray[0]),
y: utils.layout.toDeviceIndependentPixels(myArray[1] - otherArray[1])
};
};
View.resolveSizeAndState = function(size, specSize, specMode, childMeasuredState) {
var result = size;
switch (specMode) {
case utils.layout.UNSPECIFIED:
result = size;
break;

case utils.layout.AT_MOST:
if (specSize < size) {
result = specSize | utils.layout.MEASURED_STATE_TOO_SMALL;
}
break;

case utils.layout.EXACTLY:
result = specSize;
break;
}
return result | childMeasuredState & utils.layout.MEASURED_STATE_MASK;
};
return View;
}(viewCommon.View);
exports.View = View;
var CustomLayoutView = function(_super) {
__extends(CustomLayoutView, _super);
function CustomLayoutView() {
_super.apply(this, arguments);
}
Object.defineProperty(CustomLayoutView.prototype, "android", {
get: function() {
return this._viewGroup;
},
enumerable: true,
configurable: true
});
Object.defineProperty(CustomLayoutView.prototype, "_nativeView", {
get: function() {
return this._viewGroup;
},
enumerable: true,
configurable: true
});
CustomLayoutView.prototype._createUI = function() {
this._viewGroup = new org.nativescript.widgets.ContentLayout(this._context);
};
CustomLayoutView.prototype._addViewToNativeVisualTree = function(child, atIndex) {
_super.prototype._addViewToNativeVisualTree.call(this, child);
if (this._nativeView && child._nativeView) {
if (types.isNullOrUndefined(atIndex) || atIndex >= this._nativeView.getChildCount()) {
this._nativeView.addView(child._nativeView);
} else {
this._nativeView.addView(child._nativeView, atIndex);
}
return true;
}
return false;
};
CustomLayoutView.prototype._removeViewFromNativeVisualTree = function(child) {
_super.prototype._removeViewFromNativeVisualTree.call(this, child);
if (this._nativeView && child._nativeView) {
this._nativeView.removeView(child._nativeView);
trace.notifyEvent(child, "childInLayoutRemovedFromNativeVisualTree");
}
};
return CustomLayoutView;
}(View);
exports.CustomLayoutView = CustomLayoutView;
var ViewStyler = function() {
function ViewStyler() {}
ViewStyler.setBackgroundBorderProperty = function(view, newValue, defaultValue) {
background.ad.onBackgroundOrBorderPropertyChanged(view);
};
ViewStyler.resetBackgroundBorderProperty = function(view, nativeValue) {
background.ad.onBackgroundOrBorderPropertyChanged(view);
};
ViewStyler.setVisibilityProperty = function(view, newValue) {
var androidValue = newValue === enums.Visibility.visible ? android.view.View.VISIBLE : android.view.View.GONE;
view._nativeView.setVisibility(androidValue);
};
ViewStyler.resetVisibilityProperty = function(view, nativeValue) {
view._nativeView.setVisibility(android.view.View.VISIBLE);
};
ViewStyler.setOpacityProperty = function(view, newValue) {
view._nativeView.setAlpha(float(newValue));
};
ViewStyler.resetOpacityProperty = function(view, nativeValue) {
view._nativeView.setAlpha(float(1));
};
ViewStyler.setMinWidthProperty = function(view, newValue) {
view._nativeView.setMinimumWidth(Math.round(newValue * utils.layout.getDisplayDensity()));
};
ViewStyler.resetMinWidthProperty = function(view, nativeValue) {
view._nativeView.setMinimumWidth(0);
};
ViewStyler.setMinHeightProperty = function(view, newValue) {
view._nativeView.setMinimumHeight(Math.round(newValue * utils.layout.getDisplayDensity()));
};
ViewStyler.resetMinHeightProperty = function(view, nativeValue) {
view._nativeView.setMinimumHeight(0);
};
ViewStyler.getNativeLayoutParams = function(nativeView) {
var lp = nativeView.getLayoutParams();
if (!(lp instanceof org.nativescript.widgets.CommonLayoutParams)) {
lp = new org.nativescript.widgets.CommonLayoutParams();
}
return lp;
};
ViewStyler.setNativeLayoutParamsProperty = function(view, params) {
var nativeView = view._nativeView;
var lp = ViewStyler.getNativeLayoutParams(nativeView);
lp.widthPercent = params.widthPercent;
lp.heightPercent = params.heightPercent;
lp.leftMarginPercent = params.leftMarginPercent;
lp.topMarginPercent = params.topMarginPercent;
lp.rightMarginPercent = params.rightMarginPercent;
lp.bottomMarginPercent = params.bottomMarginPercent;
lp.leftMargin = Math.round(params.leftMargin * utils.layout.getDisplayDensity());
lp.topMargin = Math.round(params.topMargin * utils.layout.getDisplayDensity());
lp.rightMargin = Math.round(params.rightMargin * utils.layout.getDisplayDensity());
lp.bottomMargin = Math.round(params.bottomMargin * utils.layout.getDisplayDensity());
var width = params.width * utils.layout.getDisplayDensity();
var height = params.height * utils.layout.getDisplayDensity();
if (width < 0) {
width = -2;
}
if (height < 0) {
height = -2;
}
var gravity = 0;
switch (params.horizontalAlignment) {
case enums.HorizontalAlignment.left:
gravity |= android.view.Gravity.LEFT;
break;

case enums.HorizontalAlignment.center:
gravity |= android.view.Gravity.CENTER_HORIZONTAL;
break;

case enums.HorizontalAlignment.right:
gravity |= android.view.Gravity.RIGHT;
break;

case enums.HorizontalAlignment.stretch:
gravity |= android.view.Gravity.FILL_HORIZONTAL;
if (width < 0) {
width = -1;
}
break;

default:
throw new Error("Invalid horizontalAlignment value: " + params.horizontalAlignment);
}
switch (params.verticalAlignment) {
case enums.VerticalAlignment.top:
gravity |= android.view.Gravity.TOP;
break;

case enums.VerticalAlignment.center:
case enums.VerticalAlignment.middle:
gravity |= android.view.Gravity.CENTER_VERTICAL;
break;

case enums.VerticalAlignment.bottom:
gravity |= android.view.Gravity.BOTTOM;
break;

case enums.VerticalAlignment.stretch:
gravity |= android.view.Gravity.FILL_VERTICAL;
if (height < 0) {
height = -1;
}
break;

default:
throw new Error("Invalid verticalAlignment value: " + params.verticalAlignment);
}
lp.gravity = gravity;
lp.width = Math.round(width);
lp.height = Math.round(height);
nativeView.setLayoutParams(lp);
};
ViewStyler.resetNativeLayoutParamsProperty = function(view, nativeValue) {
ViewStyler.setNativeLayoutParamsProperty(view, style.nativeLayoutParamsProperty.metadata.defaultValue);
};
ViewStyler.setPaddingProperty = function(view, newValue) {
var density = utils.layout.getDisplayDensity();
var left = Math.round((newValue.left + view.borderWidth) * density);
var top = Math.round((newValue.top + view.borderWidth) * density);
var right = Math.round((newValue.right + view.borderWidth) * density);
var bottom = Math.round((newValue.bottom + view.borderWidth) * density);
view._nativeView.setPadding(left, top, right, bottom);
};
ViewStyler.resetPaddingProperty = function(view, nativeValue) {
var density = utils.layout.getDisplayDensity();
var left = Math.round((nativeValue.left + view.borderWidth) * density);
var top = Math.round((nativeValue.top + view.borderWidth) * density);
var right = Math.round((nativeValue.right + view.borderWidth) * density);
var bottom = Math.round((nativeValue.bottom + view.borderWidth) * density);
view._nativeView.setPadding(left, top, right, bottom);
};
ViewStyler.setRotateProperty = function(view, newValue) {
view.rotate = newValue;
};
ViewStyler.resetRotateProperty = function(view, nativeValue) {
view.rotate = nativeValue;
};
ViewStyler.getRotateProperty = function(view) {
return view.rotate;
};
ViewStyler.setScaleXProperty = function(view, newValue) {
view.scaleX = newValue;
};
ViewStyler.resetScaleXProperty = function(view, nativeValue) {
view.scaleX = nativeValue;
};
ViewStyler.getScaleXProperty = function(view) {
return view.scaleX;
};
ViewStyler.setScaleYProperty = function(view, newValue) {
view.scaleY = newValue;
};
ViewStyler.resetScaleYProperty = function(view, nativeValue) {
view.scaleY = nativeValue;
};
ViewStyler.getScaleYProperty = function(view) {
return view.scaleY;
};
ViewStyler.setTranslateXProperty = function(view, newValue) {
view.translateX = newValue;
};
ViewStyler.resetTranslateXProperty = function(view, nativeValue) {
view.translateX = nativeValue;
};
ViewStyler.getTranslateXProperty = function(view) {
return view.translateX;
};
ViewStyler.setTranslateYProperty = function(view, newValue) {
view.translateY = newValue;
};
ViewStyler.resetTranslateYProperty = function(view, nativeValue) {
view.translateY = nativeValue;
};
ViewStyler.getTranslateYProperty = function(view) {
return view.translateY;
};
ViewStyler.getZIndexProperty = function(view) {
return view.android.getZ ? view.android.getZ() : 0;
};
ViewStyler.setZIndexProperty = function(view, newValue) {
if (view.android.setZ) {
view.android.setZ(newValue);
if (view.android instanceof android.widget.Button) {
view.android.setStateListAnimator(null);
}
}
};
ViewStyler.resetZIndexProperty = function(view, nativeValue) {
if (view.android.setZ) {
view.android.setZ(nativeValue);
}
};
ViewStyler.registerHandlers = function() {
style.registerHandler(style.visibilityProperty, new style.StylePropertyChangedHandler(ViewStyler.setVisibilityProperty, ViewStyler.resetVisibilityProperty));
style.registerHandler(style.opacityProperty, new style.StylePropertyChangedHandler(ViewStyler.setOpacityProperty, ViewStyler.resetOpacityProperty));
style.registerHandler(style.minWidthProperty, new style.StylePropertyChangedHandler(ViewStyler.setMinWidthProperty, ViewStyler.resetMinWidthProperty));
style.registerHandler(style.minHeightProperty, new style.StylePropertyChangedHandler(ViewStyler.setMinHeightProperty, ViewStyler.resetMinHeightProperty));
var borderHandler = new style.StylePropertyChangedHandler(ViewStyler.setBackgroundBorderProperty, ViewStyler.resetBackgroundBorderProperty);
style.registerHandler(style.backgroundInternalProperty, borderHandler);
style.registerHandler(style.borderWidthProperty, borderHandler);
style.registerHandler(style.borderColorProperty, borderHandler);
style.registerHandler(style.borderRadiusProperty, borderHandler);
style.registerHandler(style.clipPathProperty, borderHandler);
style.registerHandler(style.nativeLayoutParamsProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativeLayoutParamsProperty, ViewStyler.resetNativeLayoutParamsProperty));
style.registerHandler(style.nativePaddingsProperty, new style.StylePropertyChangedHandler(ViewStyler.setPaddingProperty, ViewStyler.resetPaddingProperty), "TextBase");
style.registerHandler(style.nativePaddingsProperty, new style.StylePropertyChangedHandler(ViewStyler.setPaddingProperty, ViewStyler.resetPaddingProperty), "Button");
style.registerHandler(style.nativePaddingsProperty, new style.StylePropertyChangedHandler(ViewStyler.setPaddingProperty, ViewStyler.resetPaddingProperty), "LayoutBase");
style.registerHandler(style.rotateProperty, new style.StylePropertyChangedHandler(ViewStyler.setRotateProperty, ViewStyler.resetRotateProperty, ViewStyler.getRotateProperty));
style.registerHandler(style.scaleXProperty, new style.StylePropertyChangedHandler(ViewStyler.setScaleXProperty, ViewStyler.resetScaleXProperty, ViewStyler.getScaleXProperty));
style.registerHandler(style.scaleYProperty, new style.StylePropertyChangedHandler(ViewStyler.setScaleYProperty, ViewStyler.resetScaleYProperty, ViewStyler.getScaleYProperty));
style.registerHandler(style.translateXProperty, new style.StylePropertyChangedHandler(ViewStyler.setTranslateXProperty, ViewStyler.resetTranslateXProperty, ViewStyler.getTranslateXProperty));
style.registerHandler(style.translateYProperty, new style.StylePropertyChangedHandler(ViewStyler.setTranslateYProperty, ViewStyler.resetTranslateYProperty, ViewStyler.getTranslateYProperty));
style.registerHandler(style.zIndexProperty, new style.StylePropertyChangedHandler(ViewStyler.setZIndexProperty, ViewStyler.resetZIndexProperty, ViewStyler.getZIndexProperty));
};
return ViewStyler;
}();
exports.ViewStyler = ViewStyler;
ViewStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var style = __webpack_require__(15);
var styling = __webpack_require__(68);
var trace = __webpack_require__(30);
var gestures = __webpack_require__(69);
var styleScope = __webpack_require__(32);
var enums = __webpack_require__(24);
var utils = __webpack_require__(22);
var proxy_1 = __webpack_require__(53);
var dependency_observable_1 = __webpack_require__(34);
var special_properties_1 = __webpack_require__(39);
var style_1 = __webpack_require__(15);
var visualStateConstants = __webpack_require__(43);
var debug_1 = __webpack_require__(71);
var bindable;
function ensureBindable() {
if (!bindable) {
bindable = __webpack_require__(54);
}
}
var visualState;
function ensureVisualState() {
if (!visualState) {
visualState = __webpack_require__(42);
}
}
special_properties_1.registerSpecialProperty("class", function(instance, propertyValue) {
instance.className = propertyValue;
});
function getEventOrGestureName(name) {
return name.indexOf("on") === 0 ? name.substr(2, name.length - 2) : name;
}
function isEventOrGesture(name, view) {
if (types.isString(name)) {
var eventOrGestureName = getEventOrGestureName(name);
var evt = eventOrGestureName + "Event";
return view.constructor && evt in view.constructor || gestures.fromString(eventOrGestureName.toLowerCase()) !== undefined;
}
return false;
}
exports.isEventOrGesture = isEventOrGesture;
function getViewById(view, id) {
if (!view) {
return undefined;
}
if (view.id === id) {
return view;
}
var retVal;
var descendantsCallback = function(child) {
if (child.id === id) {
retVal = child;
return false;
}
return true;
};
eachDescendant(view, descendantsCallback);
return retVal;
}
exports.getViewById = getViewById;
function eachDescendant(view, callback) {
if (!callback || !view) {
return;
}
var continueIteration;
var localCallback = function(child) {
continueIteration = callback(child);
if (continueIteration) {
child._eachChildView(localCallback);
}
return continueIteration;
};
view._eachChildView(localCallback);
}
exports.eachDescendant = eachDescendant;
function getAncestor(view, criterion) {
var matcher = null;
if (typeof criterion === "string") {
matcher = function(view) {
return view.typeName === criterion;
};
} else {
matcher = function(view) {
return view instanceof criterion;
};
}
for (var parent_1 = view.parent; parent_1 != null; parent_1 = parent_1.parent) {
if (matcher(parent_1)) {
return parent_1;
}
}
return null;
}
exports.getAncestor = getAncestor;
var viewIdCounter = 0;
function onCssClassPropertyChanged(data) {
var view = data.object;
if (types.isString(data.newValue)) {
view._cssClasses = data.newValue.split(" ");
} else {
view._cssClasses.length = 0;
}
}
var cssClassProperty = new dependency_observable_1.Property("cssClass", "View", new proxy_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.AffectsStyle, onCssClassPropertyChanged));
var classNameProperty = new dependency_observable_1.Property("className", "View", new proxy_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.AffectsStyle, onCssClassPropertyChanged));
var idProperty = new dependency_observable_1.Property("id", "View", new proxy_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.AffectsStyle));
var automationTextProperty = new dependency_observable_1.Property("automationText", "View", new proxy_1.PropertyMetadata(undefined));
var translateXProperty = new dependency_observable_1.Property("translateX", "View", new proxy_1.PropertyMetadata(0));
var translateYProperty = new dependency_observable_1.Property("translateY", "View", new proxy_1.PropertyMetadata(0));
var scaleXProperty = new dependency_observable_1.Property("scaleX", "View", new proxy_1.PropertyMetadata(1));
var scaleYProperty = new dependency_observable_1.Property("scaleY", "View", new proxy_1.PropertyMetadata(1));
var originXProperty = new dependency_observable_1.Property("originX", "View", new proxy_1.PropertyMetadata(.5));
var originYProperty = new dependency_observable_1.Property("originY", "View", new proxy_1.PropertyMetadata(.5));
var rotateProperty = new dependency_observable_1.Property("rotate", "View", new proxy_1.PropertyMetadata(0));
var isEnabledProperty = new dependency_observable_1.Property("isEnabled", "View", new proxy_1.PropertyMetadata(true));
var isUserInteractionEnabledProperty = new dependency_observable_1.Property("isUserInteractionEnabled", "View", new proxy_1.PropertyMetadata(true));
var View = function(_super) {
__extends(View, _super);
function View() {
_super.call(this, {});
this._isVisibleCache = true;
this._measuredWidth = Number.NaN;
this._measuredHeight = Number.NaN;
this._oldWidthMeasureSpec = Number.NaN;
this._oldHeightMeasureSpec = Number.NaN;
this._oldLeft = 0;
this._oldTop = 0;
this._oldRight = 0;
this._oldBottom = 0;
this._isLayoutValid = false;
this._isAddedToNativeVisualTree = false;
this._cssClasses = [];
this._gestureObservers = {};
this._style = new style.Style(this);
this._domId = viewIdCounter++;
this._visualState = visualStateConstants.Normal;
}
View.prototype.getGestureObservers = function(type) {
return this._gestureObservers[type];
};
View.prototype.observe = function(type, callback, thisArg) {
if (!this._gestureObservers[type]) {
this._gestureObservers[type] = [];
}
this._gestureObservers[type].push(gestures.observe(this, type, callback, thisArg));
};
View.prototype.addEventListener = function(arg, callback, thisArg) {
if (types.isString(arg)) {
arg = getEventOrGestureName(arg);
var gesture = gestures.fromString(arg);
if (gesture && !this._isEvent(arg)) {
this.observe(gesture, callback, thisArg);
} else {
var events = arg.split(",");
if (events.length > 0) {
for (var i = 0; i < events.length; i++) {
var evt = events[i].trim();
var gst = gestures.fromString(evt);
if (gst && !this._isEvent(arg)) {
this.observe(gst, callback, thisArg);
} else {
_super.prototype.addEventListener.call(this, evt, callback, thisArg);
}
}
} else {
_super.prototype.addEventListener.call(this, arg, callback, thisArg);
}
}
} else if (types.isNumber(arg)) {
this.observe(arg, callback, thisArg);
}
};
View.prototype.removeEventListener = function(arg, callback, thisArg) {
if (types.isString(arg)) {
var gesture = gestures.fromString(arg);
if (gesture && !this._isEvent(arg)) {
this._disconnectGestureObservers(gesture);
} else {
var events = arg.split(",");
if (events.length > 0) {
for (var i = 0; i < events.length; i++) {
var evt = events[i].trim();
var gst = gestures.fromString(evt);
if (gst && !this._isEvent(arg)) {
this._disconnectGestureObservers(gst);
} else {
_super.prototype.removeEventListener.call(this, evt, callback, thisArg);
}
}
} else {
_super.prototype.removeEventListener.call(this, arg, callback, thisArg);
}
}
} else if (types.isNumber(arg)) {
this._disconnectGestureObservers(arg);
}
};
View.prototype._isEvent = function(name) {
return this.constructor && name + "Event" in this.constructor;
};
View.prototype._disconnectGestureObservers = function(type) {
var observers = this.getGestureObservers(type);
if (observers) {
for (var i = 0; i < observers.length; i++) {
observers[i].disconnect();
}
}
};
View.prototype.getViewById = function(id) {
return getViewById(this, id);
};
Object.defineProperty(View.prototype, "automationText", {
get: function() {
return this._getValue(View.automationTextProperty);
},
set: function(value) {
this._setValue(View.automationTextProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderRadius", {
get: function() {
return this.style.borderRadius;
},
set: function(value) {
this.style.borderRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderWidth", {
get: function() {
return this.style.borderWidth;
},
set: function(value) {
this.style.borderWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderColor", {
get: function() {
return this.style.borderColor;
},
set: function(value) {
this.style.borderColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "color", {
get: function() {
return this.style.color;
},
set: function(value) {
this.style.color = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "backgroundColor", {
get: function() {
return this.style.backgroundColor;
},
set: function(value) {
this.style.backgroundColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "backgroundImage", {
get: function() {
return this.style.backgroundImage;
},
set: function(value) {
this.style.backgroundImage = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "minWidth", {
get: function() {
return this.style.minWidth;
},
set: function(value) {
this.style.minWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "minHeight", {
get: function() {
return this.style.minHeight;
},
set: function(value) {
this.style.minHeight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "width", {
get: function() {
return this.style.width;
},
set: function(value) {
this.style.width = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "height", {
get: function() {
return this.style.height;
},
set: function(value) {
this.style.height = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "margin", {
get: function() {
return this.style.margin;
},
set: function(value) {
this.style.margin = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "marginLeft", {
get: function() {
return this.style.marginLeft;
},
set: function(value) {
this.style.marginLeft = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "marginTop", {
get: function() {
return this.style.marginTop;
},
set: function(value) {
this.style.marginTop = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "marginRight", {
get: function() {
return this.style.marginRight;
},
set: function(value) {
this.style.marginRight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "marginBottom", {
get: function() {
return this.style.marginBottom;
},
set: function(value) {
this.style.marginBottom = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "horizontalAlignment", {
get: function() {
return this.style.horizontalAlignment;
},
set: function(value) {
this.style.horizontalAlignment = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "verticalAlignment", {
get: function() {
return this.style.verticalAlignment;
},
set: function(value) {
this.style.verticalAlignment = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "visibility", {
get: function() {
return this.style.visibility;
},
set: function(value) {
this.style.visibility = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "opacity", {
get: function() {
return this.style.opacity;
},
set: function(value) {
this.style.opacity = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "translateX", {
get: function() {
return this._getValue(View.translateXProperty);
},
set: function(value) {
this._setValue(View.translateXProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "translateY", {
get: function() {
return this._getValue(View.translateYProperty);
},
set: function(value) {
this._setValue(View.translateYProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "scaleX", {
get: function() {
return this._getValue(View.scaleXProperty);
},
set: function(value) {
this._setValue(View.scaleXProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "scaleY", {
get: function() {
return this._getValue(View.scaleYProperty);
},
set: function(value) {
this._setValue(View.scaleYProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "originX", {
get: function() {
return this._getValue(View.originXProperty);
},
set: function(value) {
this._setValue(View.originXProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "originY", {
get: function() {
return this._getValue(View.originYProperty);
},
set: function(value) {
this._setValue(View.originYProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "rotate", {
get: function() {
return this._getValue(View.rotateProperty);
},
set: function(value) {
this._setValue(View.rotateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isEnabled", {
get: function() {
return this._getValue(View.isEnabledProperty);
},
set: function(value) {
this._setValue(View.isEnabledProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "page", {
get: function() {
if (this.parent) {
return this.parent.page;
}
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isUserInteractionEnabled", {
get: function() {
return this._getValue(View.isUserInteractionEnabledProperty);
},
set: function(value) {
this._setValue(View.isUserInteractionEnabledProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "id", {
get: function() {
return this._getValue(View.idProperty);
},
set: function(value) {
this._setValue(View.idProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "cssClass", {
get: function() {
return this._getValue(View.cssClassProperty);
},
set: function(value) {
this._setValue(View.cssClassProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "className", {
get: function() {
return this._getValue(View.cssClassProperty);
},
set: function(value) {
this._setValue(View.cssClassProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "style", {
get: function() {
return this._style;
},
set: function(value) {
throw new Error("View.style property is read-only.");
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isLayoutValid", {
get: function() {
return this._isLayoutValid;
},
set: function(value) {
throw new Error("isLayoutValid is read-only property.");
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "visualState", {
get: function() {
return this._visualState;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "cssType", {
get: function() {
return this.typeName.toLowerCase();
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "parent", {
get: function() {
return this._parent;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isLoaded", {
get: function() {
return this._isLoaded;
},
enumerable: true,
configurable: true
});
View.prototype.onLoaded = function() {
this._isLoaded = true;
this._loadEachChildView();
this._applyStyleFromScope();
this._emit("loaded");
};
View.prototype._loadEachChildView = function() {
if (this._childrenCount > 0) {
var eachChild = function(child) {
child.onLoaded();
return true;
};
this._eachChildView(eachChild);
}
};
View.prototype.onUnloaded = function() {
this._unloadEachChildView();
this._isLoaded = false;
this._emit("unloaded");
};
View.prototype._unloadEachChildView = function() {
if (this._childrenCount > 0) {
var eachChild = function(child) {
child.onUnloaded();
return true;
};
this._eachChildView(eachChild);
}
};
View.prototype._onPropertyChanged = function(property, oldValue, newValue) {
_super.prototype._onPropertyChanged.call(this, property, oldValue, newValue);
if (this._childrenCount > 0) {
var shouldUpdateInheritableProps = property.metadata && property.metadata.inheritable && !(property instanceof styling.Property);
var that = this;
if (shouldUpdateInheritableProps) {
var notifyEachChild = function(child) {
child._setValue(property, that._getValue(property), dependency_observable_1.ValueSource.Inherited);
return true;
};
this._updatingInheritedProperties = true;
this._eachChildView(notifyEachChild);
this._updatingInheritedProperties = false;
}
}
this._checkMetadataOnPropertyChanged(property.metadata);
};
View.prototype._isInheritedChange = function() {
if (this._updatingInheritedProperties) {
return true;
}
var parentView;
parentView = this.parent;
while (parentView) {
if (parentView._updatingInheritedProperties) {
return true;
}
parentView = parentView.parent;
}
return false;
};
View.prototype._checkMetadataOnPropertyChanged = function(metadata) {
if (metadata.affectsLayout) {
this.requestLayout();
}
if (metadata.affectsStyle) {
this.style._resetCssValues();
this._applyStyleFromScope();
}
};
View.prototype.measure = function(widthMeasureSpec, heightMeasureSpec) {
this._setCurrentMeasureSpecs(widthMeasureSpec, heightMeasureSpec);
};
View.prototype.layout = function(left, top, right, bottom) {
this._setCurrentLayoutBounds(left, top, right, bottom);
};
View.prototype.getMeasuredWidth = function() {
return this._measuredWidth & utils.layout.MEASURED_SIZE_MASK;
};
View.prototype.getMeasuredHeight = function() {
return this._measuredHeight & utils.layout.MEASURED_SIZE_MASK;
};
View.prototype.setMeasuredDimension = function(measuredWidth, measuredHeight) {
this._measuredWidth = measuredWidth;
this._measuredHeight = measuredHeight;
trace.write(this + " :setMeasuredDimension: " + measuredWidth + ", " + measuredHeight, trace.categories.Layout);
};
View.prototype.requestLayout = function() {
this._isLayoutValid = false;
};
View.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {};
View.prototype.onLayout = function(left, top, right, bottom) {};
View.prototype.layoutNativeView = function(left, top, right, bottom) {};
View.resolveSizeAndState = function(size, specSize, specMode, childMeasuredState) {
var result = size;
switch (specMode) {
case utils.layout.UNSPECIFIED:
result = size;
break;

case utils.layout.AT_MOST:
if (specSize < size) {
result = Math.round(specSize + .499) | utils.layout.MEASURED_STATE_TOO_SMALL;
}
break;

case utils.layout.EXACTLY:
result = specSize;
break;
}
return Math.round(result + .499) | childMeasuredState & utils.layout.MEASURED_STATE_MASK;
};
View.layoutChild = function(parent, child, left, top, right, bottom) {
if (!child || !child._isVisible) {
return;
}
var density = utils.layout.getDisplayDensity();
var lp = child.style._getValue(style_1.nativeLayoutParamsProperty);
var childTop;
var childLeft;
var childWidth = child.getMeasuredWidth();
var childHeight = child.getMeasuredHeight();
var vAlignment;
if (lp.height >= 0 && child.verticalAlignment === enums.VerticalAlignment.stretch) {
vAlignment = enums.VerticalAlignment.center;
} else {
vAlignment = child.verticalAlignment;
}
var marginTop = lp.topMargin;
var marginBottom = lp.bottomMargin;
var marginLeft = lp.leftMargin;
var marginRight = lp.rightMargin;
switch (vAlignment) {
case enums.VerticalAlignment.top:
childTop = top + marginTop * density;
break;

case enums.VerticalAlignment.center:
case enums.VerticalAlignment.middle:
childTop = top + (bottom - top - childHeight + (marginTop - marginBottom) * density) / 2;
break;

case enums.VerticalAlignment.bottom:
childTop = bottom - childHeight - marginBottom * density;
break;

case enums.VerticalAlignment.stretch:
default:
childTop = top + marginTop * density;
childHeight = bottom - top - (marginTop + marginBottom) * density;
break;
}
var hAlignment;
if (lp.width >= 0 && child.horizontalAlignment === enums.HorizontalAlignment.stretch) {
hAlignment = enums.HorizontalAlignment.center;
} else {
hAlignment = child.horizontalAlignment;
}
switch (hAlignment) {
case enums.HorizontalAlignment.left:
childLeft = left + marginLeft * density;
break;

case enums.HorizontalAlignment.center:
childLeft = left + (right - left - childWidth + (marginLeft - marginRight) * density) / 2;
break;

case enums.HorizontalAlignment.right:
childLeft = right - childWidth - marginRight * density;
break;

case enums.HorizontalAlignment.stretch:
default:
childLeft = left + marginLeft * density;
childWidth = right - left - (marginLeft + marginRight) * density;
break;
}
var childRight = Math.round(childLeft + childWidth);
var childBottom = Math.round(childTop + childHeight);
childLeft = Math.round(childLeft);
childTop = Math.round(childTop);
trace.write(child.parent + " :layoutChild: " + child + " " + childLeft + ", " + childTop + ", " + childRight + ", " + childBottom, trace.categories.Layout);
child.layout(childLeft, childTop, childRight, childBottom);
};
View.measureChild = function(parent, child, widthMeasureSpec, heightMeasureSpec) {
var measureWidth = 0;
var measureHeight = 0;
if (child && child._isVisible) {
var width = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var height = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = utils.layout.getMeasureSpecMode(heightMeasureSpec);
var childWidthMeasureSpec = View.getMeasureSpec(child, width, widthMode, true);
var childHeightMeasureSpec = View.getMeasureSpec(child, height, heightMode, false);
trace.write(child.parent + " :measureChild: " + child + " " + utils.layout.measureSpecToString(childWidthMeasureSpec) + ", " + utils.layout.measureSpecToString(childHeightMeasureSpec), trace.categories.Layout);
child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
measureWidth = child.getMeasuredWidth();
measureHeight = child.getMeasuredHeight();
var density = utils.layout.getDisplayDensity();
var lp = child.style._getValue(style.nativeLayoutParamsProperty);
measureWidth = Math.round(measureWidth + (lp.leftMargin + lp.rightMargin) * density);
measureHeight = Math.round(measureHeight + (lp.topMargin + lp.bottomMargin) * density);
}
return {
measuredWidth: measureWidth,
measuredHeight: measureHeight
};
};
View.getMeasureSpec = function(view, parentLength, parentSpecMode, horizontal) {
var lp = view.style._getValue(style.nativeLayoutParamsProperty);
var density = utils.layout.getDisplayDensity();
var margins = horizontal ? lp.leftMargin + lp.rightMargin : lp.topMargin + lp.bottomMargin;
margins = Math.round(margins * density);
var resultSize = 0;
var resultMode = 0;
var measureLength = Math.max(0, parentLength - margins);
var childLength = Math.round((horizontal ? lp.width : lp.height) * density);
if (childLength >= 0) {
if (parentSpecMode !== utils.layout.UNSPECIFIED) {
resultSize = Math.min(parentLength, childLength);
} else {
resultSize = childLength;
}
resultMode = utils.layout.EXACTLY;
} else {
switch (parentSpecMode) {
case utils.layout.EXACTLY:
resultSize = measureLength;
var stretched = horizontal ? view.horizontalAlignment === enums.HorizontalAlignment.stretch : view.verticalAlignment === enums.VerticalAlignment.stretch;
resultMode = stretched ? utils.layout.EXACTLY : utils.layout.AT_MOST;
break;

case utils.layout.AT_MOST:
resultSize = measureLength;
resultMode = utils.layout.AT_MOST;
break;

case utils.layout.UNSPECIFIED:
resultSize = 0;
resultMode = utils.layout.UNSPECIFIED;
break;
}
}
return utils.layout.makeMeasureSpec(resultSize, resultMode);
};
View.prototype._setCurrentMeasureSpecs = function(widthMeasureSpec, heightMeasureSpec) {
var changed = this._oldWidthMeasureSpec !== widthMeasureSpec || this._oldHeightMeasureSpec !== heightMeasureSpec;
this._oldWidthMeasureSpec = widthMeasureSpec;
this._oldHeightMeasureSpec = heightMeasureSpec;
return changed;
};
View.prototype._getCurrentLayoutBounds = function() {
return {
left: this._oldLeft,
top: this._oldTop,
right: this._oldRight,
bottom: this._oldBottom
};
};
View.prototype._setCurrentLayoutBounds = function(left, top, right, bottom) {
this._isLayoutValid = true;
var boundsChanged = this._oldLeft !== left || this._oldTop !== top || this._oldRight !== right || this._oldBottom !== bottom;
var sizeChanged = this._oldRight - this._oldLeft !== right - left || this._oldBottom - this._oldTop !== bottom - top;
this._oldLeft = left;
this._oldTop = top;
this._oldRight = right;
this._oldBottom = bottom;
return {
boundsChanged: boundsChanged,
sizeChanged: sizeChanged
};
};
View.prototype._applyStyleFromScope = function() {
var rootPage = this.page;
if (!rootPage || !rootPage.isLoaded) {
return;
}
var scope = rootPage._getStyleScope();
scope.applySelectors(this);
};
View.prototype._applyInlineStyle = function(inlineStyle) {
if (types.isString(inlineStyle)) {
try {
this.style._beginUpdate();
styleScope.applyInlineSyle(this, inlineStyle);
} finally {
this.style._endUpdate();
}
}
};
View.prototype._onAttached = function(context) {};
View.prototype._onDetached = function(force) {};
View.prototype._createUI = function() {};
View.prototype._onContextChanged = function() {};
Object.defineProperty(View.prototype, "_childrenCount", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
View.prototype._eachChildView = function(callback) {};
View.prototype._childIndexToNativeChildIndex = function(index) {
return index;
};
View.prototype._getNativeViewsCount = function() {
return this._isAddedToNativeVisualTree ? 1 : 0;
};
View.prototype._eachLayoutView = function(callback) {
return callback(this);
};
View.prototype._addToSuperview = function(superview, index) {
return false;
};
View.prototype._removeFromSuperview = function() {};
View.prototype._addView = function(view, atIndex) {
if (!view) {
throw new Error("Expecting a valid View instance.");
}
if (view._parent) {
throw new Error("View already has a parent. View: " + view + " Parent: " + view._parent);
}
view._parent = this;
this._addViewCore(view, atIndex);
view._parentChanged(null);
trace.write("called _addView on view " + this._domId + " for a child " + view._domId, trace.categories.ViewHierarchy);
};
View.prototype._addViewCore = function(view, atIndex) {
this._propagateInheritableProperties(view);
view.style._inheritStyleProperties();
if (!view._isAddedToNativeVisualTree) {
var nativeIndex = this._childIndexToNativeChildIndex(atIndex);
view._isAddedToNativeVisualTree = this._addViewToNativeVisualTree(view, nativeIndex);
}
if (this._isLoaded) {
view.onLoaded();
}
};
View.prototype._propagateInheritableProperties = function(view) {
view._inheritProperties(this);
};
View.prototype._inheritProperties = function(parentView) {
var that = this;
var inheritablePropertySetCallback = function(property) {
if (property instanceof styling.Property) {
return true;
}
if (property.metadata && property.metadata.inheritable) {
var baseValue = parentView._getValue(property);
that._setValue(property, baseValue, dependency_observable_1.ValueSource.Inherited);
}
return true;
};
parentView._eachSetProperty(inheritablePropertySetCallback);
};
View.prototype._removeView = function(view) {
if (view._parent !== this) {
throw new Error("View not added to this instance. View: " + view + " CurrentParent: " + view._parent + " ExpectedParent: " + this);
}
this._removeViewCore(view);
view._parent = undefined;
view._parentChanged(this);
trace.write("called _removeView on view " + this._domId + " for a child " + view._domId, trace.categories.ViewHierarchy);
};
View.prototype._removeViewCore = function(view) {
this._removeViewFromNativeVisualTree(view);
if (view.isLoaded) {
view.onUnloaded();
}
ensureBindable();
view._setValue(bindable.Bindable.bindingContextProperty, undefined, dependency_observable_1.ValueSource.Inherited);
var inheritablePropertiesSetCallback = function(property) {
if (property instanceof styling.Property) {
return true;
}
if (property.metadata && property.metadata.inheritable) {
view._resetValue(property, dependency_observable_1.ValueSource.Inherited);
}
return true;
};
view._eachSetProperty(inheritablePropertiesSetCallback);
};
View.prototype._parentChanged = function(oldParent) {};
View.prototype._addViewToNativeVisualTree = function(view, atIndex) {
if (view._isAddedToNativeVisualTree) {
throw new Error("Child already added to the native visual tree.");
}
return true;
};
View.prototype._removeViewFromNativeVisualTree = function(view) {
view._isAddedToNativeVisualTree = false;
};
View.prototype._syncNativeProperties = function() {
_super.prototype._syncNativeProperties.call(this);
this.style._syncNativeProperties();
};
View.prototype._goToVisualState = function(state) {
trace.write(this + " going to state: " + state, trace.categories.Style);
if (state === this._visualState || this._requestedVisualState === state) {
return;
}
ensureVisualState();
this._visualState = visualState.goToState(this, state);
this._requestedVisualState = state;
};
View.prototype._applyXmlAttribute = function(attribute, value) {
if (attribute === "style") {
this._applyInlineStyle(value);
return true;
}
return false;
};
View.prototype.setInlineStyle = function(style) {
if (!types.isString(style)) {
throw new Error("Parameter should be valid CSS string!");
}
this._applyInlineStyle(style);
};
View.prototype._updateLayout = function() {};
Object.defineProperty(View.prototype, "_nativeView", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "_isVisible", {
get: function() {
return this._isVisibleCache;
},
enumerable: true,
configurable: true
});
View.prototype._shouldApplyStyleHandlers = function() {
return !!this._nativeView;
};
View.prototype.focus = function() {
return undefined;
};
View.prototype.getLocationInWindow = function() {
return undefined;
};
View.prototype.getLocationOnScreen = function() {
return undefined;
};
View.prototype.getLocationRelativeTo = function(otherView) {
return undefined;
};
View.prototype.getActualSize = function() {
var currentBounds = this._getCurrentLayoutBounds();
if (!currentBounds) {
return undefined;
}
return {
width: utils.layout.toDeviceIndependentPixels(currentBounds.right - currentBounds.left),
height: utils.layout.toDeviceIndependentPixels(currentBounds.bottom - currentBounds.top)
};
};
View.prototype.animate = function(animation) {
return this.createAnimation(animation).play();
};
View.prototype.createAnimation = function(animation) {
var animationModule = __webpack_require__(25);
var that = this;
animation.target = that;
return new animationModule.Animation([ animation ]);
};
View.prototype._registerAnimation = function(animation) {
if (this._registeredAnimations === undefined) {
this._registeredAnimations = new Array();
}
this._registeredAnimations.push(animation);
};
View.prototype._unregisterAnimation = function(animation) {
if (this._registeredAnimations) {
var index_1 = this._registeredAnimations.indexOf(animation);
if (index_1 >= 0) {
this._registeredAnimations.splice(index_1, 1);
}
}
};
View.prototype._unregisterAllAnimations = function() {
if (this._registeredAnimations) {
for (var _i = 0, _a = this._registeredAnimations; _i < _a.length; _i++) {
var animation = _a[_i];
animation.cancel();
}
}
};
View.prototype.toString = function() {
var str = this.typeName;
if (this.id) {
str += "<" + this.id + ">";
} else {
str += "(" + this._domId + ")";
}
var source = debug_1.Source.get(this);
if (source) {
str += "@" + source + ";";
}
return str;
};
View.prototype._setNativeViewFrame = function(nativeView, frame) {};
View.prototype._onStylePropertyChanged = function(property) {};
View.prototype._canApplyNativeProperty = function() {
return !!this._nativeView;
};
View.loadedEvent = "loaded";
View.unloadedEvent = "unloaded";
View.automationTextProperty = automationTextProperty;
View.idProperty = idProperty;
View.cssClassProperty = cssClassProperty;
View.classNameProperty = classNameProperty;
View.translateXProperty = translateXProperty;
View.translateYProperty = translateYProperty;
View.scaleXProperty = scaleXProperty;
View.scaleYProperty = scaleYProperty;
View.originXProperty = originXProperty;
View.originYProperty = originYProperty;
View.rotateProperty = rotateProperty;
View.isEnabledProperty = isEnabledProperty;
View.isUserInteractionEnabledProperty = isUserInteractionEnabledProperty;
return View;
}(proxy_1.ProxyObject);
exports.View = View;
}, function(module, exports) {
function isString(value) {
return typeof value === "string" || value instanceof String;
}
exports.isString = isString;
function isNumber(value) {
return typeof value === "number" || value instanceof Number;
}
exports.isNumber = isNumber;
function isFunction(value) {
if (!value) {
return false;
}
return typeof value === "function";
}
exports.isFunction = isFunction;
function isUndefined(value) {
return typeof value === "undefined";
}
exports.isUndefined = isUndefined;
function isDefined(value) {
return typeof value !== "undefined";
}
exports.isDefined = isDefined;
function isNullOrUndefined(value) {
return typeof value === "undefined" || value === null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function verifyCallback(value) {
if (value && !isFunction(value)) {
throw new TypeError("Callback must be a valid function.");
}
}
exports.verifyCallback = verifyCallback;
var classInfosMap = new Map();
var funcNameRegex = /function (.{1,})\(/;
function getClass(object) {
return getClassInfo(object).name;
}
exports.getClass = getClass;
function getClassInfo(object) {
var constructor = object.constructor;
var result = classInfosMap.get(constructor);
if (!result) {
result = new ClassInfo(constructor);
classInfosMap.set(constructor, result);
}
return result;
}
exports.getClassInfo = getClassInfo;
function getBaseClasses(object) {
var result = [];
var info = getClassInfo(object);
while (info) {
result.push(info.name);
info = info.baseClassInfo;
}
return result;
}
exports.getBaseClasses = getBaseClasses;
var ClassInfo = function() {
function ClassInfo(typeCosntructor) {
this._typeCosntructor = typeCosntructor;
}
Object.defineProperty(ClassInfo.prototype, "name", {
get: function() {
if (!this._name) {
var results = funcNameRegex.exec(this._typeCosntructor.toString());
this._name = results && results.length > 1 ? results[1] : "";
}
return this._name;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ClassInfo.prototype, "baseClassInfo", {
get: function() {
if (isUndefined(this._baseClassInfo)) {
this._baseClassInfo = ClassInfo._getBase(this);
if (this._baseClassInfo && this._baseClassInfo.name === this.name) {
this._baseClassInfo = ClassInfo._getBase(this._baseClassInfo);
}
}
return this._baseClassInfo;
},
enumerable: true,
configurable: true
});
ClassInfo._getBase = function(info) {
var result = null;
var constructorProto = info._typeCosntructor.prototype;
if (constructorProto.__proto__) {
result = getClassInfo(constructorProto.__proto__);
}
return result;
};
return ClassInfo;
}();
exports.ClassInfo = ClassInfo;
function toUIString(obj) {
return isNullOrUndefined(obj) ? "" : obj + "";
}
exports.toUIString = toUIString;
}, function(module, exports, __webpack_require__) {
var application = __webpack_require__(16);
var types = __webpack_require__(14);
var trace = __webpack_require__(30);
var dependency_observable_1 = __webpack_require__(34);
var color_1 = __webpack_require__(27);
var styleProperty = __webpack_require__(35);
var converters = __webpack_require__(38);
var enums = __webpack_require__(24);
var utils = __webpack_require__(22);
var font = __webpack_require__(46);
var background = __webpack_require__(48);
var platform = __webpack_require__(45);
var imageSource;
function ensureImageSource() {
if (!imageSource) {
imageSource = __webpack_require__(64);
}
}
var _registeredHandlers = Array();
var _handlersCache = {};
var noStylingClasses = {};
var AffectsLayout = platform.device.os === platform.platformNames.android ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
function parseMargin(value) {
if (types.isString(value)) {
var arr = value.split(/[ ,]+/);
var top_1;
var right = void 0;
var bottom = void 0;
var left = void 0;
if (arr.length === 1) {
top_1 = right = bottom = left = arr[0];
} else if (arr.length === 2) {
top_1 = bottom = arr[0];
right = left = arr[1];
} else if (arr.length === 4) {
top_1 = arr[0];
right = arr[1];
bottom = arr[2];
left = arr[3];
} else {
throw new Error("Invalid value for margin: " + value);
}
return {
top: top_1,
right: right,
bottom: bottom,
left: left
};
} else if (types.isNumber(value)) {
return {
top: value,
right: value,
bottom: value,
left: value
};
} else {
return value;
}
}
function parseThickness(value) {
var result = {
top: 0,
right: 0,
bottom: 0,
left: 0
};
if (types.isString(value)) {
var arr = value.split(/[ ,]+/);
var top = parseInt(arr[0]);
top = isNaN(top) ? 0 : top;
var right = parseInt(arr[1]);
right = isNaN(right) ? top : right;
var bottom = parseInt(arr[2]);
bottom = isNaN(bottom) ? top : bottom;
var left = parseInt(arr[3]);
left = isNaN(left) ? right : left;
result.top = top;
result.right = right;
result.bottom = bottom;
result.left = left;
} else if (types.isNumber(value)) {
result.top = result.right = result.bottom = result.left = value;
} else {
result = value;
}
return result;
}
function layoutParamsComparer(x, y) {
return x.width === y.width && x.height === y.height && x.leftMargin === y.leftMargin && x.topMargin === y.topMargin && x.rightMargin === y.rightMargin && x.bottomMargin === y.bottomMargin && x.horizontalAlignment === y.horizontalAlignment && x.verticalAlignment === y.verticalAlignment && x.widthPercent === y.widthPercent && x.heightPercent === y.heightPercent && x.leftMarginPercent === y.leftMarginPercent && x.topMarginPercent === y.topMarginPercent && x.rightMarginPercent === y.rightMarginPercent && x.bottomMarginPercent === y.bottomMarginPercent;
}
function onLayoutParamsChanged(data) {
var style = data.object;
var widthValue = convertToPercentHelper(style.width);
var width;
var widthPercent;
if (widthValue.isPercent) {
width = style.horizontalAlignment === enums.HorizontalAlignment.stretch ? -1 : -2;
widthPercent = widthValue.value / 100;
} else {
width = isNaN(widthValue.value) ? -1 : widthValue.value;
widthPercent = -1;
}
var heightValue = convertToPercentHelper(style.height);
var height;
var heightPercent;
if (heightValue.isPercent) {
height = style.verticalAlignment === enums.VerticalAlignment.stretch ? -1 : -2;
heightPercent = heightValue.value / 100;
} else {
height = isNaN(heightValue.value) ? -1 : heightValue.value;
heightPercent = -1;
}
var marginLeftValue = convertToPercentHelper(style.marginLeft);
var marginTopValue = convertToPercentHelper(style.marginTop);
var marginRightValue = convertToPercentHelper(style.marginRight);
var marginBottomValue = convertToPercentHelper(style.marginBottom);
var layoutParams = {
width: width,
height: height,
widthPercent: widthPercent,
heightPercent: heightPercent,
leftMargin: marginLeftValue.isPercent ? 0 : marginLeftValue.value,
leftMarginPercent: marginLeftValue.isPercent ? marginLeftValue.value / 100 : -1,
topMargin: marginTopValue.isPercent ? 0 : marginTopValue.value,
topMarginPercent: marginTopValue.isPercent ? marginTopValue.value / 100 : -1,
rightMargin: marginRightValue.isPercent ? 0 : marginRightValue.value,
rightMarginPercent: marginRightValue.isPercent ? marginRightValue.value / 100 : -1,
bottomMargin: marginBottomValue.isPercent ? 0 : marginBottomValue.value,
bottomMarginPercent: marginBottomValue.isPercent ? marginBottomValue.value / 100 : -1,
horizontalAlignment: style.horizontalAlignment,
verticalAlignment: style.verticalAlignment
};
style._setValue(exports.nativeLayoutParamsProperty, layoutParams);
}
function onPaddingValueChanged(data) {
var style = data.object;
var thickness = {
top: style.paddingTop,
right: style.paddingRight,
bottom: style.paddingBottom,
left: style.paddingLeft
};
style._setValue(exports.nativePaddingsProperty, thickness);
}
function thicknessComparer(x, y) {
if (x && y) {
return x.left === y.left && x.top === y.top && x.right === y.right && x.bottom === y.bottom;
}
return !x === !y;
}
function convertToPercentHelper(value) {
var numberValue = 0;
var isPercent = false;
var isError = true;
if (types.isString(value)) {
var stringValue = value.trim();
var percentIndex = stringValue.indexOf("%");
if (percentIndex !== -1) {
if (percentIndex !== stringValue.length - 1 || percentIndex === 0) {
numberValue = 0;
} else {
isPercent = true;
numberValue = converters.numberConverter(stringValue.substring(0, stringValue.length - 1).trim());
isError = numberValue === 0;
}
} else {
isError = false;
isPercent = false;
numberValue = converters.numberConverter(stringValue);
}
} else if (types.isNumber(value)) {
isError = false;
isPercent = false;
numberValue = value;
}
return {
isError: isError,
isPercent: isPercent,
value: numberValue
};
}
function numberOrPercentConverter(value) {
var result = convertToPercentHelper(value);
if (result.isError) {
throw new Error("Invalid value: " + value);
}
return result.isPercent ? value : result.value;
}
function isWidthHeightValid(value) {
var result = convertToPercentHelper(value);
if (result.isError) {
return false;
}
return isNaN(result.value) || result.value >= 0 && isFinite(result.value);
}
function isMinWidthHeightValid(value) {
return !isNaN(value) && value >= 0 && isFinite(value);
}
function onBackgroundImagePropertyChanged(data) {
var style = data.object;
var url = data.newValue;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
var isValid = false;
if (types.isString(data.newValue)) {
var pattern = /url\(('|")(.*?)\1\)/;
var match = url.match(pattern);
if (match && match[2]) {
url = match[2];
}
ensureImageSource();
if (utils.isDataURI(url)) {
var base64Data = url.split(",")[1];
if (types.isDefined(base64Data)) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withImage(imageSource.fromBase64(base64Data)));
isValid = true;
}
} else if (utils.isFileOrResourcePath(url)) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withImage(imageSource.fromFileOrResource(url)));
isValid = true;
} else if (url.indexOf("http") !== -1) {
style["_url"] = url;
style._setValue(exports.backgroundInternalProperty, currentBackground.withImage(undefined));
imageSource.fromUrl(url).then(function(r) {
if (style && style["_url"] === url) {
currentBackground = style._getValue(exports.backgroundInternalProperty);
style._setValue(exports.backgroundInternalProperty, currentBackground.withImage(r));
}
});
isValid = true;
}
}
if (!isValid) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withImage(undefined));
}
}
function onBackgroundColorPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (!color_1.Color.equals(currentBackground.color, data.newValue)) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withColor(data.newValue));
}
}
function onBackgroundSizePropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.size) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withSize(data.newValue));
}
}
function onBackgroundRepeatPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.repeat) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withRepeat(data.newValue));
}
}
function onBackgroundPositionPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.position) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withPosition(data.newValue));
}
}
function getHandlerInternal(propertyId, classInfo) {
var className = classInfo ? classInfo.name : "default";
var handlerKey = className + propertyId;
var result = _handlersCache[handlerKey];
if (types.isDefined(result)) {
return result;
}
var propertyHandlers = _registeredHandlers[propertyId];
if (noStylingClasses.hasOwnProperty(className) || !propertyHandlers) {
result = null;
} else if (propertyHandlers.hasOwnProperty(className)) {
result = propertyHandlers[className];
} else if (classInfo) {
result = getHandlerInternal(propertyId, classInfo.baseClassInfo);
} else {
result = null;
}
_handlersCache[handlerKey] = result;
return result;
}
function isVisibilityValid(value) {
return value === enums.Visibility.visible || value === enums.Visibility.collapse || value === enums.Visibility.collapsed;
}
function isTextDecorationValid(value) {
var values = (value + "").split(" ");
return values.indexOf(enums.TextDecoration.none) !== -1 || values.indexOf(enums.TextDecoration.underline) !== -1 || values.indexOf(enums.TextDecoration.lineThrough) !== -1;
}
function isTextTransformValid(value) {
return value === enums.TextTransform.none || value === enums.TextTransform.uppercase || value === enums.TextTransform.lowercase || value === enums.TextTransform.capitalize;
}
function isWhiteSpaceValid(value) {
return value === enums.WhiteSpace.nowrap || value === enums.WhiteSpace.normal;
}
function isPaddingValid(value) {
return isFinite(value) && !isNaN(value) && value >= 0;
}
var supportedPaths = [ "rect", "circle", "ellipse", "polygon" ];
function isClipPathValid(value) {
var functionName = value.substring(0, value.indexOf("(")).trim();
return supportedPaths.indexOf(functionName) !== -1 || value === "";
}
function isMarginValid(value) {
var result = convertToPercentHelper(value);
if (result.isError) {
return false;
}
return isFinite(result.value) && !isNaN(result.value);
}
function isOpacityValid(value) {
var parsedValue = parseFloat(value);
return !isNaN(parsedValue) && 0 <= parsedValue && parsedValue <= 1;
}
function isFloatValueValid(value) {
var parsedValue = parseFloat(value);
return !isNaN(parsedValue);
}
function isFontWeightValid(value) {
if (!value) {
console.trace();
}
return value === enums.FontWeight.thin || value === enums.FontWeight.extraLight || value === enums.FontWeight.light || value === enums.FontWeight.normal || value === "400" || value === enums.FontWeight.medium || value === enums.FontWeight.semiBold || value === enums.FontWeight.bold || value === "700" || value === enums.FontWeight.extraBold || value === enums.FontWeight.black;
}
function isFontStyleValid(value) {
return value === enums.FontStyle.normal || value === enums.FontStyle.italic;
}
function onVisibilityChanged(data) {
data.object._view._isVisibleCache = data.newValue === enums.Visibility.visible;
}
function onFontFamilyChanged(data) {
var style = data.object;
var currentFont = style._getValue(exports.fontInternalProperty);
if (currentFont.fontFamily !== data.newValue) {
style._setValue(exports.fontInternalProperty, currentFont.withFontFamily(data.newValue));
}
}
function onFontStyleChanged(data) {
var style = data.object;
var currentFont = style._getValue(exports.fontInternalProperty);
if (currentFont.fontStyle !== data.newValue) {
style._setValue(exports.fontInternalProperty, currentFont.withFontStyle(data.newValue));
}
}
function onFontWeightChanged(data) {
var style = data.object;
var currentFont = style._getValue(exports.fontInternalProperty);
if (currentFont.fontWeight !== data.newValue) {
style._setValue(exports.fontInternalProperty, currentFont.withFontWeight(data.newValue));
}
}
function onFontSizeChanged(data) {
var style = data.object;
var currentFont = style._getValue(exports.fontInternalProperty);
if (currentFont.fontSize !== data.newValue) {
style._setValue(exports.fontInternalProperty, currentFont.withFontSize(data.newValue));
}
}
var Style = function(_super) {
__extends(Style, _super);
function Style(parentView) {
_super.call(this);
this._updateCounter = 0;
this._nativeSetters = new Map();
this._view = parentView;
}
Object.defineProperty(Style.prototype, "rotate", {
get: function() {
return this._getValue(exports.rotateProperty);
},
set: function(value) {
this._setValue(exports.rotateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "scaleX", {
get: function() {
return this._getValue(exports.scaleXProperty);
},
set: function(value) {
this._setValue(exports.scaleXProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "scaleY", {
get: function() {
return this._getValue(exports.scaleYProperty);
},
set: function(value) {
this._setValue(exports.scaleYProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "translateX", {
get: function() {
return this._getValue(exports.translateXProperty);
},
set: function(value) {
this._setValue(exports.translateXProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "translateY", {
get: function() {
return this._getValue(exports.translateYProperty);
},
set: function(value) {
this._setValue(exports.translateYProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "color", {
get: function() {
return this._getValue(exports.colorProperty);
},
set: function(value) {
this._setValue(exports.colorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "backgroundColor", {
get: function() {
return this._getValue(exports.backgroundColorProperty);
},
set: function(value) {
this._setValue(exports.backgroundColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "backgroundImage", {
get: function() {
return this._getValue(exports.backgroundImageProperty);
},
set: function(value) {
this._setValue(exports.backgroundImageProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "backgroundRepeat", {
get: function() {
return this._getValue(exports.backgroundRepeatProperty);
},
set: function(value) {
this._setValue(exports.backgroundRepeatProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "backgroundSize", {
get: function() {
return this._getValue(exports.backgroundSizeProperty);
},
set: function(value) {
this._setValue(exports.backgroundSizeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "backgroundPosition", {
get: function() {
return this._getValue(exports.backgroundPositionProperty);
},
set: function(value) {
this._setValue(exports.backgroundPositionProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderColor", {
get: function() {
return this._getValue(exports.borderColorProperty);
},
set: function(value) {
this._setValue(exports.borderColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderWidth", {
get: function() {
return this._getValue(exports.borderWidthProperty);
},
set: function(value) {
this._setValue(exports.borderWidthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderRadius", {
get: function() {
return this._getValue(exports.borderRadiusProperty);
},
set: function(value) {
this._setValue(exports.borderRadiusProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "clipPath", {
get: function() {
return this._getValue(exports.clipPathProperty);
},
set: function(value) {
this._setValue(exports.clipPathProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "fontSize", {
get: function() {
return this._getValue(exports.fontSizeProperty);
},
set: function(value) {
this._setValue(exports.fontSizeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "fontFamily", {
get: function() {
return this._getValue(exports.fontFamilyProperty);
},
set: function(value) {
this._setValue(exports.fontFamilyProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "fontStyle", {
get: function() {
return this._getValue(exports.fontStyleProperty);
},
set: function(value) {
this._setValue(exports.fontStyleProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "fontWeight", {
get: function() {
return this._getValue(exports.fontWeightProperty);
},
set: function(value) {
this._setValue(exports.fontWeightProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "font", {
get: function() {
return this.fontStyle + " " + this.fontWeight + " " + this.fontSize + " " + this.fontFamily;
},
set: function(value) {
this._setShorthandProperty("font", value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "_fontInternal", {
get: function() {
return this._getValue(exports.fontInternalProperty);
},
set: function(value) {
this._setValue(exports.fontInternalProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "textAlignment", {
get: function() {
return this._getValue(exports.textAlignmentProperty);
},
set: function(value) {
this._setValue(exports.textAlignmentProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "minWidth", {
get: function() {
return this._getValue(exports.minWidthProperty);
},
set: function(value) {
this._setValue(exports.minWidthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "minHeight", {
get: function() {
return this._getValue(exports.minHeightProperty);
},
set: function(value) {
this._setValue(exports.minHeightProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "width", {
get: function() {
return this._getValue(exports.widthProperty);
},
set: function(value) {
this._setValue(exports.widthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "height", {
get: function() {
return this._getValue(exports.heightProperty);
},
set: function(value) {
this._setValue(exports.heightProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "margin", {
get: function() {
return this.marginTop + " " + this.marginRight + " " + this.marginBottom + " " + this.marginLeft;
},
set: function(value) {
this._setShorthandProperty("margin", value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "marginLeft", {
get: function() {
return this._getValue(exports.marginLeftProperty);
},
set: function(value) {
this._setValue(exports.marginLeftProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "marginTop", {
get: function() {
return this._getValue(exports.marginTopProperty);
},
set: function(value) {
this._setValue(exports.marginTopProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "marginRight", {
get: function() {
return this._getValue(exports.marginRightProperty);
},
set: function(value) {
this._setValue(exports.marginRightProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "marginBottom", {
get: function() {
return this._getValue(exports.marginBottomProperty);
},
set: function(value) {
this._setValue(exports.marginBottomProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "padding", {
get: function() {
return this.paddingTop + " " + this.paddingRight + " " + this.paddingBottom + " " + this.paddingLeft;
},
set: function(value) {
this._setShorthandProperty("padding", value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "paddingLeft", {
get: function() {
return this._getValue(exports.paddingLeftProperty);
},
set: function(value) {
this._setValue(exports.paddingLeftProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "paddingTop", {
get: function() {
return this._getValue(exports.paddingTopProperty);
},
set: function(value) {
this._setValue(exports.paddingTopProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "paddingRight", {
get: function() {
return this._getValue(exports.paddingRightProperty);
},
set: function(value) {
this._setValue(exports.paddingRightProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "paddingBottom", {
get: function() {
return this._getValue(exports.paddingBottomProperty);
},
set: function(value) {
this._setValue(exports.paddingBottomProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "horizontalAlignment", {
get: function() {
return this._getValue(exports.horizontalAlignmentProperty);
},
set: function(value) {
this._setValue(exports.horizontalAlignmentProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "verticalAlignment", {
get: function() {
return this._getValue(exports.verticalAlignmentProperty);
},
set: function(value) {
this._setValue(exports.verticalAlignmentProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "visibility", {
get: function() {
return this._getValue(exports.visibilityProperty);
},
set: function(value) {
this._setValue(exports.visibilityProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "opacity", {
get: function() {
return this._getValue(exports.opacityProperty);
},
set: function(value) {
this._setValue(exports.opacityProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "textDecoration", {
get: function() {
return this._getValue(exports.textDecorationProperty);
},
set: function(value) {
this._setValue(exports.textDecorationProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "textTransform", {
get: function() {
return this._getValue(exports.textTransformProperty);
},
set: function(value) {
this._setValue(exports.textTransformProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "whiteSpace", {
get: function() {
return this._getValue(exports.whiteSpaceProperty);
},
set: function(value) {
this._setValue(exports.whiteSpaceProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "letterSpacing", {
get: function() {
return this._getValue(exports.letterSpacingProperty);
},
set: function(value) {
this._setValue(exports.letterSpacingProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "zIndex", {
get: function() {
return this._getValue(exports.zIndexProperty);
},
set: function(value) {
this._setValue(exports.zIndexProperty, value);
},
enumerable: true,
configurable: true
});
Style.prototype._updateTextDecoration = function() {
if (this._getValue(exports.textDecorationProperty) !== enums.TextDecoration.none) {
this._applyProperty(exports.textDecorationProperty, this._getValue(exports.textDecorationProperty));
}
};
Style.prototype._updateTextTransform = function() {
if (this._getValue(exports.textTransformProperty) !== enums.TextTransform.none) {
this._applyProperty(exports.textTransformProperty, this._getValue(exports.textTransformProperty));
}
};
Style.prototype._beginUpdate = function() {
this._updateCounter++;
};
Style.prototype._endUpdate = function() {
var _this = this;
this._updateCounter--;
if (this._updateCounter < 0) {
throw new Error("style._endUpdate() called, but no update is in progress.");
}
if (this._updateCounter === 0) {
this._nativeSetters.forEach(function(newValue, property, map) {
_this._applyStyleProperty(property, newValue);
});
this._nativeSetters.clear();
}
};
Style.prototype._resetCssValues = function() {
var that = this;
this._eachSetProperty(function(property) {
that._resetValue(property, dependency_observable_1.ValueSource.Css);
return true;
});
};
Style.prototype._resetLocalValues = function() {
var that = this;
this._eachSetProperty(function(property) {
that._resetValue(property);
return true;
});
};
Style.prototype._onPropertyChanged = function(property, oldValue, newValue) {
trace.write("Style._onPropertyChanged view:" + this._view + ", property: " + property.name + ", oldValue: " + oldValue + ", newValue: " + newValue, trace.categories.Style);
_super.prototype._onPropertyChanged.call(this, property, oldValue, newValue);
this._view._checkMetadataOnPropertyChanged(property.metadata);
this._applyProperty(property, newValue);
};
Style.prototype._syncNativeProperties = function() {
var that = this;
styleProperty.eachProperty(function(p) {
var value = that._getValue(p);
var valueSource = that._getValueSource(p);
if (valueSource !== dependency_observable_1.ValueSource.Default && types.isDefined(value)) {
that._applyProperty(p, value);
}
});
};
Style.prototype._sizeChanged = function() {
if (!this._getValue(exports.backgroundInternalProperty).isEmpty()) {
this._applyProperty(exports.backgroundInternalProperty, this._getValue(exports.backgroundInternalProperty));
}
var clipPathPropertyValue = this._getValue(exports.clipPathProperty);
if (types.isString(clipPathPropertyValue) && clipPathPropertyValue !== "") {
this._applyProperty(exports.clipPathProperty, clipPathPropertyValue);
}
};
Style.prototype._applyProperty = function(property, newValue) {
this._applyStyleProperty(property, newValue);
if (this._view._childrenCount === 0 || !property.metadata.inheritable) {
return;
}
var eachChild = function(child) {
child.style._inheritStyleProperty(property);
return true;
};
this._view._eachChildView(eachChild);
};
Style.prototype._applyStyleProperty = function(property, newValue) {
if (!this._view._shouldApplyStyleHandlers()) {
return;
}
if (this._updateCounter > 0) {
this._nativeSetters.set(property, newValue);
return;
}
try {
var handler = getHandler(property, this._view);
if (!handler) {
trace.write("No handler for property: " + property.name + " with id: " + property.id + ", view:" + this._view, trace.categories.Style);
} else {
trace.write("Found handler for property: " + property.name + ", view:" + this._view, trace.categories.Style);
var shouldReset = false;
if (property.metadata.equalityComparer) {
shouldReset = property.metadata.equalityComparer(newValue, property.metadata.defaultValue);
} else {
shouldReset = newValue === property.metadata.defaultValue;
}
if (shouldReset) {
handler.resetProperty(property, this._view);
} else {
handler.applyProperty(property, this._view, newValue);
}
this._view._onStylePropertyChanged(property);
}
} catch (ex) {
trace.write("Error setting property: " + property.name + " on " + this._view + ": " + ex, trace.categories.Style, trace.messageType.error);
}
};
Style.prototype._inheritStyleProperty = function(property) {
if (!property.metadata.inheritable) {
throw new Error("An attempt was made to inherit a style property which is not marked as 'inheritable'.");
}
var currentParent = this._view.parent;
var valueSource;
while (currentParent) {
valueSource = currentParent.style._getValueSource(property);
if (valueSource > dependency_observable_1.ValueSource.Default) {
this._setValue(property, currentParent.style._getValue(property), dependency_observable_1.ValueSource.Inherited);
break;
}
currentParent = currentParent.parent;
}
};
Style.prototype._inheritStyleProperties = function() {
var that = this;
styleProperty.eachInheritableProperty(function(p) {
that._inheritStyleProperty(p);
});
};
Object.defineProperty(Style.prototype, "_nativeView", {
get: function() {
return this._view._nativeView;
},
enumerable: true,
configurable: true
});
Style.prototype._setShorthandProperty = function(name, value) {
var pairs = styleProperty.getShorthandPairs(name, value);
if (pairs) {
this._beginUpdate();
for (var j = 0; j < pairs.length; j++) {
var pair = pairs[j];
this._setValue(pair.property, pair.value, dependency_observable_1.ValueSource.Local);
}
this._endUpdate();
}
};
return Style;
}(dependency_observable_1.DependencyObservable);
exports.Style = Style;
function registerHandler(property, handler, className) {
var realClassName = className ? className : "default";
var handlerRecord = _registeredHandlers[property.id];
if (!handlerRecord) {
handlerRecord = {};
_registeredHandlers[property.id] = handlerRecord;
}
handlerRecord[realClassName] = handler;
}
exports.registerHandler = registerHandler;
function registerNoStylingClass(className) {
noStylingClasses[className] = 1;
}
exports.registerNoStylingClass = registerNoStylingClass;
function getHandler(property, view) {
return getHandlerInternal(property.id, types.getClassInfo(view));
}
exports.getHandler = getHandler;
exports.rotateProperty = new styleProperty.Property("rotate", "rotate", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, null));
exports.scaleXProperty = new styleProperty.Property("scaleX", "scaleX", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, null));
exports.scaleYProperty = new styleProperty.Property("scaleY", "scaleY", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, null));
exports.translateXProperty = new styleProperty.Property("translateX", "translateX", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, null));
exports.translateYProperty = new styleProperty.Property("translateY", "translateY", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, null));
exports.colorProperty = new styleProperty.Property("color", "color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.Inheritable, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.backgroundImageProperty = new styleProperty.Property("backgroundImage", "background-image", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBackgroundImagePropertyChanged));
exports.backgroundColorProperty = new styleProperty.Property("backgroundColor", "background-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBackgroundColorPropertyChanged, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.backgroundRepeatProperty = new styleProperty.Property("backgroundRepeat", "background-repeat", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBackgroundRepeatPropertyChanged));
exports.backgroundSizeProperty = new styleProperty.Property("backgroundSize", "background-size", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBackgroundSizePropertyChanged));
exports.backgroundPositionProperty = new styleProperty.Property("backgroundPosition", "background-position", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBackgroundPositionPropertyChanged));
exports.borderColorProperty = new styleProperty.Property("borderColor", "border-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.borderWidthProperty = new styleProperty.Property("borderWidth", "border-width", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, null, isPaddingValid), converters.numberConverter);
exports.borderRadiusProperty = new styleProperty.Property("borderRadius", "border-radius", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, null, isPaddingValid), converters.numberConverter);
exports.clipPathProperty = new styleProperty.Property("clipPath", "clip-path", new dependency_observable_1.PropertyMetadata(undefined, AffectsLayout, null, isClipPathValid));
exports.backgroundInternalProperty = new styleProperty.Property("_backgroundInternal", "_backgroundInternal", new dependency_observable_1.PropertyMetadata(background.Background.default, dependency_observable_1.PropertyMetadataSettings.None, undefined, undefined, background.Background.equals));
exports.fontSizeProperty = new styleProperty.Property("fontSize", "font-size", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.Inheritable, onFontSizeChanged), converters.fontSizeConverter);
exports.fontFamilyProperty = new styleProperty.Property("fontFamily", "font-family", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.Inheritable, onFontFamilyChanged));
exports.fontStyleProperty = new styleProperty.Property("fontStyle", "font-style", new dependency_observable_1.PropertyMetadata(enums.FontStyle.normal, dependency_observable_1.PropertyMetadataSettings.Inheritable, onFontStyleChanged, isFontStyleValid));
exports.fontWeightProperty = new styleProperty.Property("fontWeight", "font-weight", new dependency_observable_1.PropertyMetadata(enums.FontWeight.normal, dependency_observable_1.PropertyMetadataSettings.Inheritable, onFontWeightChanged, isFontWeightValid));
exports.fontInternalProperty = new styleProperty.Property("_fontInternal", "_fontInternal", new dependency_observable_1.PropertyMetadata(font.Font.default, AffectsLayout, null, null, font.Font.equals), font.Font.parse);
exports.textAlignmentProperty = new styleProperty.Property("textAlignment", "text-align", new dependency_observable_1.PropertyMetadata(undefined, AffectsLayout | dependency_observable_1.PropertyMetadataSettings.Inheritable), converters.textAlignConverter);
exports.minWidthProperty = new styleProperty.Property("minWidth", "min-width", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, null, isMinWidthHeightValid), converters.numberConverter);
exports.minHeightProperty = new styleProperty.Property("minHeight", "min-height", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, null, isMinWidthHeightValid), converters.numberConverter);
exports.visibilityProperty = new styleProperty.Property("visibility", "visibility", new dependency_observable_1.PropertyMetadata(enums.Visibility.visible, AffectsLayout, onVisibilityChanged, isVisibilityValid), converters.visibilityConverter);
exports.opacityProperty = new styleProperty.Property("opacity", "opacity", new dependency_observable_1.PropertyMetadata(1, dependency_observable_1.PropertyMetadataSettings.None, undefined, isOpacityValid), converters.opacityConverter);
exports.textDecorationProperty = new styleProperty.Property("textDecoration", "text-decoration", new dependency_observable_1.PropertyMetadata(enums.TextDecoration.none, dependency_observable_1.PropertyMetadataSettings.None, undefined, isTextDecorationValid), converters.textDecorationConverter);
exports.textTransformProperty = new styleProperty.Property("textTransform", "text-transform", new dependency_observable_1.PropertyMetadata(enums.TextTransform.none, dependency_observable_1.PropertyMetadataSettings.None, undefined, isTextTransformValid), converters.textTransformConverter);
exports.whiteSpaceProperty = new styleProperty.Property("whiteSpace", "white-space", new dependency_observable_1.PropertyMetadata(undefined, AffectsLayout, undefined, isWhiteSpaceValid), converters.whiteSpaceConverter);
exports.letterSpacingProperty = new styleProperty.Property("letterSpacing", "letter-spacing", new dependency_observable_1.PropertyMetadata(Number.NaN, AffectsLayout, undefined, isFloatValueValid), converters.floatConverter);
exports.zIndexProperty = new styleProperty.Property("zIndex", "z-index", new dependency_observable_1.PropertyMetadata(Number.NaN, AffectsLayout, undefined, isFloatValueValid), converters.floatConverter);
exports.nativeLayoutParamsProperty = new styleProperty.Property("nativeLayoutParams", "nativeLayoutParams", new dependency_observable_1.PropertyMetadata({
width: -1,
widthPercent: -1,
height: -1,
heightPercent: -1,
leftMargin: 0,
leftMarginPercent: -1,
topMargin: 0,
topMarginPercent: -1,
rightMargin: 0,
rightMarginPercent: -1,
bottomMargin: 0,
bottomMarginPercent: -1,
horizontalAlignment: enums.HorizontalAlignment.stretch,
verticalAlignment: enums.VerticalAlignment.stretch
}, null, null, null, layoutParamsComparer));
exports.widthProperty = new styleProperty.Property("width", "width", new dependency_observable_1.PropertyMetadata(Number.NaN, AffectsLayout, onLayoutParamsChanged, isWidthHeightValid), numberOrPercentConverter);
exports.heightProperty = new styleProperty.Property("height", "height", new dependency_observable_1.PropertyMetadata(Number.NaN, AffectsLayout, onLayoutParamsChanged, isWidthHeightValid), numberOrPercentConverter);
exports.marginLeftProperty = new styleProperty.Property("marginLeft", "margin-left", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onLayoutParamsChanged, isMarginValid), numberOrPercentConverter);
exports.marginRightProperty = new styleProperty.Property("marginRight", "margin-right", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onLayoutParamsChanged, isMarginValid), numberOrPercentConverter);
exports.marginTopProperty = new styleProperty.Property("marginTop", "margin-top", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onLayoutParamsChanged, isMarginValid), numberOrPercentConverter);
exports.marginBottomProperty = new styleProperty.Property("marginBottom", "margin-bottom", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onLayoutParamsChanged, isMarginValid), numberOrPercentConverter);
exports.verticalAlignmentProperty = new styleProperty.Property("verticalAlignment", "vertical-align", new dependency_observable_1.PropertyMetadata(enums.VerticalAlignment.stretch, AffectsLayout, onLayoutParamsChanged));
exports.horizontalAlignmentProperty = new styleProperty.Property("horizontalAlignment", "horizontal-align", new dependency_observable_1.PropertyMetadata(enums.HorizontalAlignment.stretch, AffectsLayout, onLayoutParamsChanged));
function getNativePadding(nativeView, callback) {
return {
result: nativeView ? callback(nativeView) / utils.layout.getDisplayDensity() : 0,
cacheable: !!nativeView
};
}
function getNativePaddingLeft(instance) {
var nativeView = instance._nativeView;
return getNativePadding(nativeView, function(view) {
return view.getPaddingLeft();
});
}
function getNativePaddingTop(instance) {
var nativeView = instance._nativeView;
return getNativePadding(nativeView, function(view) {
return view.getPaddingTop();
});
}
function getNativePaddingRight(instance) {
var nativeView = instance._nativeView;
return getNativePadding(nativeView, function(view) {
return view.getPaddingRight();
});
}
function getNativePaddingBottom(instance) {
var nativeView = instance._nativeView;
return getNativePadding(nativeView, function(view) {
return view.getPaddingBottom();
});
}
exports.nativePaddingsProperty = new styleProperty.Property("paddingNative", "paddingNative", new dependency_observable_1.PropertyMetadata(undefined, null, null, null, thicknessComparer));
var defaultPadding = platform.device.os === platform.platformNames.android ? undefined : 0;
exports.paddingLeftProperty = new styleProperty.Property("paddingLeft", "padding-left", new dependency_observable_1.PropertyMetadata(defaultPadding, AffectsLayout, onPaddingValueChanged, isPaddingValid), converters.numberConverter);
exports.paddingRightProperty = new styleProperty.Property("paddingRight", "padding-right", new dependency_observable_1.PropertyMetadata(defaultPadding, AffectsLayout, onPaddingValueChanged, isPaddingValid), converters.numberConverter);
exports.paddingTopProperty = new styleProperty.Property("paddingTop", "padding-top", new dependency_observable_1.PropertyMetadata(defaultPadding, AffectsLayout, onPaddingValueChanged, isPaddingValid), converters.numberConverter);
exports.paddingBottomProperty = new styleProperty.Property("paddingBottom", "padding-bottom", new dependency_observable_1.PropertyMetadata(defaultPadding, AffectsLayout, onPaddingValueChanged, isPaddingValid), converters.numberConverter);
if (platform.device.os === platform.platformNames.android) {
exports.paddingTopProperty.defaultValueGetter = getNativePaddingTop;
exports.paddingLeftProperty.defaultValueGetter = getNativePaddingLeft;
exports.paddingRightProperty.defaultValueGetter = getNativePaddingRight;
exports.paddingBottomProperty.defaultValueGetter = getNativePaddingBottom;
}
function onPaddingChanged(value) {
var thickness = parseThickness(value);
var array = new Array();
array.push({
property: exports.paddingTopProperty,
value: thickness.top
});
array.push({
property: exports.paddingRightProperty,
value: thickness.right
});
array.push({
property: exports.paddingBottomProperty,
value: thickness.bottom
});
array.push({
property: exports.paddingLeftProperty,
value: thickness.left
});
return array;
}
function onMarginChanged(value) {
var thickness = parseMargin(value);
var array = new Array();
array.push({
property: exports.marginTopProperty,
value: thickness.top
});
array.push({
property: exports.marginRightProperty,
value: thickness.right
});
array.push({
property: exports.marginBottomProperty,
value: thickness.bottom
});
array.push({
property: exports.marginLeftProperty,
value: thickness.left
});
return array;
}
function onFontChanged(value) {
var newFont = font.Font.parse(value);
var array = new Array();
array.push({
property: exports.fontFamilyProperty,
value: newFont.fontFamily
});
array.push({
property: exports.fontStyleProperty,
value: newFont.fontStyle
});
array.push({
property: exports.fontWeightProperty,
value: newFont.fontWeight
});
array.push({
property: exports.fontSizeProperty,
value: newFont.fontSize
});
return array;
}
function onTransformChanged(value) {
var newTransform = converters.transformConverter(value);
var array = new Array();
var values = undefined;
for (var transform in newTransform) {
switch (transform) {
case "scaleX":
array.push({
property: exports.scaleXProperty,
value: parseFloat(newTransform[transform])
});
break;

case "scaleY":
array.push({
property: exports.scaleYProperty,
value: parseFloat(newTransform[transform])
});
break;

case "scale":
case "scale3d":
values = newTransform[transform].split(",");
if (values.length === 2 || values.length === 3) {
array.push({
property: exports.scaleXProperty,
value: parseFloat(values[0])
});
array.push({
property: exports.scaleYProperty,
value: parseFloat(values[1])
});
}
break;

case "translateX":
array.push({
property: exports.translateXProperty,
value: parseFloat(newTransform[transform])
});
break;

case "translateY":
array.push({
property: exports.translateYProperty,
value: parseFloat(newTransform[transform])
});
break;

case "translate":
case "translate3d":
values = newTransform[transform].split(",");
if (values.length === 2 || values.length === 3) {
array.push({
property: exports.translateXProperty,
value: parseFloat(values[0])
});
array.push({
property: exports.translateYProperty,
value: parseFloat(values[1])
});
}
break;

case "rotate":
var text = newTransform[transform];
var val = parseFloat(text);
if (text.slice(-3) === "rad") {
val = val * (180 / Math.PI);
}
array.push({
property: exports.rotateProperty,
value: val
});
break;

case "none":
array.push({
property: exports.scaleXProperty,
value: 1
});
array.push({
property: exports.scaleYProperty,
value: 1
});
array.push({
property: exports.translateXProperty,
value: 0
});
array.push({
property: exports.translateYProperty,
value: 0
});
array.push({
property: exports.rotateProperty,
value: 0
});
break;
}
}
return array;
}
styleProperty.registerShorthandCallback("font", onFontChanged);
styleProperty.registerShorthandCallback("margin", onMarginChanged);
styleProperty.registerShorthandCallback("padding", onPaddingChanged);
styleProperty.registerShorthandCallback("transform", onTransformChanged);
var _defaultNativeValuesCache = {};
var StylePropertyChangedHandler = function() {
function StylePropertyChangedHandler(applyCallback, resetCallback, getNativeValue) {
this._applyProperty = applyCallback;
this._resetProperty = resetCallback;
this._getNativeValue = getNativeValue;
}
StylePropertyChangedHandler.prototype.applyProperty = function(property, view, newValue) {
var className = types.getClass(view);
if (!_defaultNativeValuesCache.hasOwnProperty(className + property.id) && this._getNativeValue) {
_defaultNativeValuesCache[className + property.id] = this._getNativeValue(view);
}
if (application.android) {
newValue = newValue.android ? newValue.android : newValue;
} else if (application.ios) {
newValue = newValue.ios ? newValue.ios : newValue;
}
this._applyProperty(view, newValue, _defaultNativeValuesCache[className + property.id]);
};
StylePropertyChangedHandler.prototype.resetProperty = function(property, view) {
var className = types.getClass(view);
this._resetProperty(view, _defaultNativeValuesCache[className + property.id]);
};
return StylePropertyChangedHandler;
}();
exports.StylePropertyChangedHandler = StylePropertyChangedHandler;
exports.ignorePropertyHandler = new StylePropertyChangedHandler(function(view, val) {}, function(view, val) {});
registerNoStylingClass("Frame");
}, function(module, exports, __webpack_require__) {
var appModule = __webpack_require__(17);
var frame = __webpack_require__(10);
var observable = __webpack_require__(18);
global.moduleMerge(appModule, exports);
var typedExports = exports;
exports.evalLazy = function() {
var NativeScriptApplication = function(_super) {
__extends(NativeScriptApplication, _super);
function NativeScriptApplication() {
_super.call(this);
return global.__native(this);
}
NativeScriptApplication.prototype.onCreate = function() {
androidApp.init(this);
setupOrientationListener(androidApp);
};
NativeScriptApplication.prototype.onLowMemory = function() {
gc();
java.lang.System.gc();
_super.prototype.onLowMemory.call(this);
typedExports.notify({
eventName: typedExports.lowMemoryEvent,
object: this,
android: this
});
};
NativeScriptApplication.prototype.onTrimMemory = function(level) {
gc();
java.lang.System.gc();
_super.prototype.onTrimMemory.call(this, level);
};
NativeScriptApplication = __decorate([ JavaProxy("com.tns.NativeScriptApplication") ], NativeScriptApplication);
return NativeScriptApplication;
}(android.app.Application);
};
function initEvents() {
var lifecycleCallbacks = new android.app.Application.ActivityLifecycleCallbacks({
onActivityCreated: function(activity, bundle) {
if (!androidApp.startActivity) {
androidApp.startActivity = activity;
androidApp.notify({
eventName: "activityCreated",
object: androidApp,
activity: activity,
bundle: bundle
});
if (androidApp.onActivityCreated) {
androidApp.onActivityCreated(activity, bundle);
}
}
androidApp.currentContext = activity;
},
onActivityDestroyed: function(activity) {
if (activity === androidApp.foregroundActivity) {
androidApp.foregroundActivity = undefined;
}
if (activity === androidApp.currentContext) {
androidApp.currentContext = undefined;
}
if (activity === androidApp.startActivity) {
if (typedExports.onExit) {
typedExports.onExit();
}
typedExports.notify({
eventName: typedExports.exitEvent,
object: androidApp,
android: activity
});
androidApp.startActivity = undefined;
}
androidApp.notify({
eventName: "activityDestroyed",
object: androidApp,
activity: activity
});
if (androidApp.onActivityDestroyed) {
androidApp.onActivityDestroyed(activity);
}
gc();
},
onActivityPaused: function(activity) {
androidApp.paused = true;
if (activity === androidApp.foregroundActivity) {
if (typedExports.onSuspend) {
typedExports.onSuspend();
}
typedExports.notify({
eventName: typedExports.suspendEvent,
object: androidApp,
android: activity
});
}
androidApp.notify({
eventName: "activityPaused",
object: androidApp,
activity: activity
});
if (androidApp.onActivityPaused) {
androidApp.onActivityPaused(activity);
}
},
onActivityResumed: function(activity) {
androidApp.paused = false;
androidApp.foregroundActivity = activity;
if (typedExports.onResume) {
typedExports.onResume();
}
typedExports.notify({
eventName: typedExports.resumeEvent,
object: androidApp,
android: activity
});
androidApp.notify({
eventName: "activityResumed",
object: androidApp,
activity: activity
});
if (androidApp.onActivityResumed) {
androidApp.onActivityResumed(activity);
}
},
onActivitySaveInstanceState: function(activity, bundle) {
androidApp.notify({
eventName: "saveActivityState",
object: androidApp,
activity: activity,
bundle: bundle
});
if (androidApp.onSaveActivityState) {
androidApp.onSaveActivityState(activity, bundle);
}
},
onActivityStarted: function(activity) {
androidApp.foregroundActivity = activity;
androidApp.notify({
eventName: "activityStarted",
object: androidApp,
activity: activity
});
if (androidApp.onActivityStarted) {
androidApp.onActivityStarted(activity);
}
},
onActivityStopped: function(activity) {
androidApp.notify({
eventName: "activityStopped",
object: androidApp,
activity: activity
});
if (androidApp.onActivityStopped) {
androidApp.onActivityStopped(activity);
}
}
});
return lifecycleCallbacks;
}
var AndroidApplication = function(_super) {
__extends(AndroidApplication, _super);
function AndroidApplication() {
_super.apply(this, arguments);
this._registeredReceivers = {};
this._pendingReceiverRegistrations = new Array();
}
AndroidApplication.prototype.init = function(nativeApp) {
this.nativeApp = nativeApp;
this.packageName = nativeApp.getPackageName();
this.context = nativeApp.getApplicationContext();
this._eventsToken = initEvents();
this.nativeApp.registerActivityLifecycleCallbacks(this._eventsToken);
this._registerPendingReceivers();
};
AndroidApplication.prototype._registerPendingReceivers = function() {
if (this._pendingReceiverRegistrations) {
var i = 0;
var length = this._pendingReceiverRegistrations.length;
for (;i < length; i++) {
var registerFunc = this._pendingReceiverRegistrations[i];
registerFunc(this.context);
}
this._pendingReceiverRegistrations = new Array();
}
};
AndroidApplication.prototype.registerBroadcastReceiver = function(intentFilter, onReceiveCallback) {
ensureBroadCastReceiverClass();
var that = this;
var registerFunc = function(context) {
var receiver = new BroadcastReceiverClass(onReceiveCallback);
context.registerReceiver(receiver, new android.content.IntentFilter(intentFilter));
that._registeredReceivers[intentFilter] = receiver;
};
if (this.context) {
registerFunc(this.context);
} else {
this._pendingReceiverRegistrations.push(registerFunc);
}
};
AndroidApplication.prototype.unregisterBroadcastReceiver = function(intentFilter) {
var receiver = this._registeredReceivers[intentFilter];
if (receiver) {
this.context.unregisterReceiver(receiver);
this._registeredReceivers[intentFilter] = undefined;
delete this._registeredReceivers[intentFilter];
}
};
AndroidApplication.activityCreatedEvent = "activityCreated";
AndroidApplication.activityDestroyedEvent = "activityDestroyed";
AndroidApplication.activityStartedEvent = "activityStarted";
AndroidApplication.activityPausedEvent = "activityPaused";
AndroidApplication.activityResumedEvent = "activityResumed";
AndroidApplication.activityStoppedEvent = "activityStopped";
AndroidApplication.saveActivityStateEvent = "saveActivityState";
AndroidApplication.activityResultEvent = "activityResult";
AndroidApplication.activityBackPressedEvent = "activityBackPressed";
AndroidApplication.activityRequestPermissionsEvent = "activityRequestPermissions";
return AndroidApplication;
}(observable.Observable);
exports.AndroidApplication = AndroidApplication;
var androidApp = new AndroidApplication();
typedExports.android = androidApp;
var BroadcastReceiverClass;
function ensureBroadCastReceiverClass() {
if (BroadcastReceiverClass) {
return;
}
var BroadcastReceiver = function(_super) {
__extends(BroadcastReceiver, _super);
function BroadcastReceiver(onReceiveCallback) {
_super.call(this);
this._onReceiveCallback = onReceiveCallback;
return global.__native(this);
}
BroadcastReceiver.prototype.onReceive = function(context, intent) {
if (this._onReceiveCallback) {
this._onReceiveCallback(context, intent);
}
};
return BroadcastReceiver;
}(android.content.BroadcastReceiver);
BroadcastReceiverClass = BroadcastReceiver;
}
var started = false;
function start(entry) {
if (started) {
throw new Error("Application is already started.");
}
started = true;
if (entry) {
typedExports.mainEntry = entry;
}
loadCss();
}
exports.start = start;
var currentOrientation;
function setupOrientationListener(androidApp) {
androidApp.registerBroadcastReceiver(android.content.Intent.ACTION_CONFIGURATION_CHANGED, onConfigurationChanged);
currentOrientation = androidApp.context.getResources().getConfiguration().orientation;
}
function onConfigurationChanged(context, intent) {
var orientation = context.getResources().getConfiguration().orientation;
if (currentOrientation !== orientation) {
currentOrientation = orientation;
var enums = __webpack_require__(24);
var newValue;
switch (orientation) {
case android.content.res.Configuration.ORIENTATION_LANDSCAPE:
newValue = enums.DeviceOrientation.landscape;
break;

case android.content.res.Configuration.ORIENTATION_PORTRAIT:
newValue = enums.DeviceOrientation.portrait;
break;

default:
newValue = enums.DeviceOrientation.unknown;
break;
}
typedExports.notify({
eventName: typedExports.orientationChangedEvent,
android: context,
newValue: newValue,
object: typedExports.android
});
}
}
function loadCss() {
typedExports.appSelectors = typedExports.loadCss(typedExports.cssFile) || [];
if (typedExports.appSelectors.length > 0) {
typedExports.mergeCssSelectors(typedExports);
}
}
function addCss(cssText) {
var parsed = typedExports.parseCss(cssText);
if (parsed) {
typedExports.additionalSelectors.push.apply(typedExports.additionalSelectors, parsed);
typedExports.mergeCssSelectors(typedExports);
}
}
exports.addCss = addCss;
global.__onLiveSync = function() {
if (typedExports.android && typedExports.android.paused) {
return;
}
var fileResolver = __webpack_require__(44);
fileResolver.clearCache();
loadCss();
frame.reloadPage();
};
global.__onUncaughtError = function(error) {
var types = __webpack_require__(14);
if (types.isFunction(typedExports.onUncaughtError)) {
typedExports.onUncaughtError(error);
}
typedExports.notify({
eventName: typedExports.uncaughtErrorEvent,
object: appModule.android,
android: error
});
};
}, function(module, exports, __webpack_require__) {
__webpack_require__(3);
var observable = __webpack_require__(18);
var styleScope = undefined;
var events = new observable.Observable();
global.moduleMerge(events, exports);
exports.launchEvent = "launch";
exports.suspendEvent = "suspend";
exports.resumeEvent = "resume";
exports.exitEvent = "exit";
exports.lowMemoryEvent = "lowMemory";
exports.uncaughtErrorEvent = "uncaughtError";
exports.orientationChangedEvent = "orientationChanged";
exports.cssFile = "app.css";
exports.appSelectors = [];
exports.additionalSelectors = [];
exports.cssSelectors = [];
exports.cssSelectorVersion = 0;
exports.keyframes = {};
exports.resources = {};
exports.onUncaughtError = undefined;
exports.onLaunch = undefined;
exports.onSuspend = undefined;
exports.onResume = undefined;
exports.onExit = undefined;
exports.onLowMemory = undefined;
exports.android = undefined;
exports.ios = undefined;
function loadCss(cssFile) {
if (!cssFile) {
return undefined;
}
var result;
var fs = __webpack_require__(19);
if (!styleScope) {
styleScope = __webpack_require__(32);
}
var cssFileName = fs.path.join(fs.knownFolders.currentApp().path, cssFile);
if (fs.File.exists(cssFileName)) {
var file = fs.File.fromPath(cssFileName);
var applicationCss = file.readTextSync();
if (applicationCss) {
result = parseCss(applicationCss, cssFileName);
}
}
return result;
}
exports.loadCss = loadCss;
function mergeCssSelectors(module) {
module.cssSelectors = module.appSelectors.slice();
module.cssSelectors.push.apply(module.cssSelectors, module.additionalSelectors);
module.cssSelectorVersion++;
}
exports.mergeCssSelectors = mergeCssSelectors;
function parseCss(cssText, cssFileName) {
if (!styleScope) {
styleScope = __webpack_require__(32);
}
return styleScope.StyleScope.createSelectorsFromCss(cssText, cssFileName, exports.keyframes);
}
exports.parseCss = parseCss;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var _wrappedIndex = 0;
var WrappedValue = function() {
function WrappedValue(value) {
this._wrapped = value;
}
Object.defineProperty(WrappedValue.prototype, "wrapped", {
get: function() {
return this._wrapped;
},
set: function(value) {
this._wrapped = value;
},
enumerable: true,
configurable: true
});
WrappedValue.unwrap = function(value) {
if (value && value.wrapped) {
return value.wrapped;
}
return value;
};
WrappedValue.wrap = function(value) {
var w = _wrappedValues[_wrappedIndex++ % 5];
w.wrapped = value;
return w;
};
return WrappedValue;
}();
exports.WrappedValue = WrappedValue;
var _wrappedValues = [ new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null) ];
var Observable = function() {
function Observable(json) {
this._observers = {};
this.disableNotifications = {};
if (json) {
this._map = new Map();
for (var prop in json) {
if (json.hasOwnProperty(prop)) {
this._defineNewProperty(prop);
this.set(prop, json[prop]);
}
}
}
}
Observable.prototype._defineNewProperty = function(propertyName) {
Object.defineProperty(this, propertyName, {
get: function() {
return this._map.get(propertyName);
},
set: function(value) {
this._map.set(propertyName, value);
this.notify(this._createPropertyChangeData(propertyName, value));
},
enumerable: true,
configurable: true
});
};
Object.defineProperty(Observable.prototype, "typeName", {
get: function() {
return types.getClass(this);
},
enumerable: true,
configurable: true
});
Observable.prototype.on = function(eventNames, callback, thisArg) {
this.addEventListener(eventNames, callback, thisArg);
};
Observable.prototype.off = function(eventNames, callback, thisArg) {
this.removeEventListener(eventNames, callback, thisArg);
};
Observable.prototype.addEventListener = function(eventNames, callback, thisArg) {
if (!types.isString(eventNames)) {
throw new TypeError("Events name(s) must be string.");
}
types.verifyCallback(callback);
var events = eventNames.split(",");
for (var i = 0, l = events.length; i < l; i++) {
var event = events[i].trim();
var list = this._getEventList(event, true);
list.push({
callback: callback,
thisArg: thisArg
});
}
};
Observable.prototype.removeEventListener = function(eventNames, callback, thisArg) {
if (!types.isString(eventNames)) {
throw new TypeError("Events name(s) must be string.");
}
var events = eventNames.split(",");
for (var i = 0, l = events.length; i < l; i++) {
var event = events[i].trim();
if (callback) {
var list = this._getEventList(event, false);
if (list) {
var index = this._indexOfListener(list, callback, thisArg);
if (index >= 0) {
list.splice(index, 1);
}
if (list.length === 0) {
delete this._observers[event];
}
}
} else {
this._observers[event] = undefined;
delete this._observers[event];
}
}
};
Observable.prototype.notifyPropertyChange = function(propertyName, newValue) {
this.notify(this._createPropertyChangeData(propertyName, newValue));
};
Observable.prototype.set = function(name, value) {
if (this[name] === value) {
return;
}
var data = this._createPropertyChangeData(name, value);
this._setCore(data);
this.notify(data);
};
Observable.prototype.get = function(name) {
return this[name];
};
Observable.prototype._setCore = function(data) {
this.disableNotifications[data.propertyName] = true;
var newValue = WrappedValue.unwrap(data.value);
this[data.propertyName] = newValue;
delete this.disableNotifications[data.propertyName];
};
Observable.prototype.notify = function(data) {
if (this.disableNotifications[data.propertyName]) {
return;
}
var observers = this._getEventList(data.eventName);
if (!observers) {
return;
}
var i;
var entry;
var observersLength = observers.length;
for (i = observersLength - 1; i >= 0; i--) {
entry = observers[i];
if (entry.thisArg) {
entry.callback.apply(entry.thisArg, [ data ]);
} else {
entry.callback(data);
}
}
};
Observable.prototype.hasListeners = function(eventName) {
return eventName in this._observers;
};
Observable.prototype._createPropertyChangeData = function(name, value) {
return {
eventName: Observable.propertyChangeEvent,
propertyName: name,
object: this,
value: value
};
};
Observable.prototype._emit = function(eventNames) {
var events = eventNames.split(",");
for (var i = 0, l = events.length; i < l; i++) {
var event = events[i].trim();
this.notify({
eventName: event,
object: this
});
}
};
Observable.prototype._getEventList = function(eventName, createIfNeeded) {
if (!eventName) {
throw new TypeError("EventName must be valid string.");
}
var list = this._observers[eventName];
if (!list && createIfNeeded) {
list = [];
this._observers[eventName] = list;
}
return list;
};
Observable.prototype._indexOfListener = function(list, callback, thisArg) {
var i;
var entry;
for (i = 0; i < list.length; i++) {
entry = list[i];
if (thisArg) {
if (entry.callback === callback && entry.thisArg === thisArg) {
return i;
}
} else {
if (entry.callback === callback) {
return i;
}
}
}
return -1;
};
Observable.prototype.toString = function() {
return this.typeName;
};
Observable.propertyChangeEvent = "propertyChange";
return Observable;
}();
exports.Observable = Observable;
}, function(module, exports, __webpack_require__) {
var file_access_module = __webpack_require__(20);
var fileAccess;
var getFileAccess = function() {
if (!fileAccess) {
fileAccess = new file_access_module.FileSystemAccess();
}
return fileAccess;
};
var nameProperty = "_name";
var pathProperty = "_path";
var isKnownProperty = "_isKnown";
var fileLockedProperty = "_locked";
var extensionProperty = "_extension";
var lastModifiedProperty = "_lastModified";
var createFile = function(info) {
var file = new File();
file[pathProperty] = info.path;
file[nameProperty] = info.name;
file[extensionProperty] = info.extension;
return file;
};
var createFolder = function(info) {
var documents = knownFolders.documents();
if (info.path === documents.path) {
return documents;
}
var temp = knownFolders.temp();
if (info.path === temp.path) {
return temp;
}
var folder = new Folder();
folder[pathProperty] = info.path;
folder[nameProperty] = info.name;
return folder;
};
var FileSystemEntity = function() {
function FileSystemEntity() {}
Object.defineProperty(FileSystemEntity.prototype, "parent", {
get: function() {
var onError = function(error) {
throw error;
};
var folderInfo = getFileAccess().getParent(this.path, onError);
if (!folderInfo) {
return undefined;
}
return createFolder(folderInfo);
},
enumerable: true,
configurable: true
});
FileSystemEntity.prototype.remove = function() {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
_this.removeSync(localError);
if (!hasError) {
resolve();
}
});
};
FileSystemEntity.prototype.removeSync = function(onError) {
if (this[isKnownProperty]) {
if (onError) {
onError({
message: "Cannot delete known folder."
});
}
return;
}
var fileAccess = getFileAccess();
if (this instanceof File) {
fileAccess.deleteFile(this.path, onError);
} else if (this instanceof Folder) {
fileAccess.deleteFolder(this.path, onError);
}
};
FileSystemEntity.prototype.rename = function(newName) {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
_this.renameSync(newName, localError);
if (!hasError) {
resolve();
}
});
};
FileSystemEntity.prototype.renameSync = function(newName, onError) {
if (this[isKnownProperty]) {
if (onError) {
onError(new Error("Cannot rename known folder."));
}
return;
}
var parentFolder = this.parent;
if (!parentFolder) {
if (onError) {
onError(new Error("No parent folder."));
}
return;
}
var fileAccess = getFileAccess();
var path = parentFolder.path;
var newPath = fileAccess.joinPath(path, newName);
var hasError = false;
var localError = function(error) {
hasError = true;
if (onError) {
onError(error);
}
return null;
};
fileAccess.rename(this.path, newPath, localError);
this[pathProperty] = newPath;
this[nameProperty] = newName;
if (this instanceof File) {
this[extensionProperty] = fileAccess.getFileExtension(newPath);
}
};
Object.defineProperty(FileSystemEntity.prototype, "name", {
get: function() {
return this[nameProperty];
},
enumerable: true,
configurable: true
});
Object.defineProperty(FileSystemEntity.prototype, "path", {
get: function() {
return this[pathProperty];
},
enumerable: true,
configurable: true
});
Object.defineProperty(FileSystemEntity.prototype, "lastModified", {
get: function() {
var value = this[lastModifiedProperty];
if (!this[lastModifiedProperty]) {
value = this[lastModifiedProperty] = getFileAccess().getLastModified(this.path);
}
return value;
},
enumerable: true,
configurable: true
});
return FileSystemEntity;
}();
exports.FileSystemEntity = FileSystemEntity;
var File = function(_super) {
__extends(File, _super);
function File() {
_super.apply(this, arguments);
}
File.fromPath = function(path) {
var onError = function(error) {
throw error;
};
var fileInfo = getFileAccess().getFile(path, onError);
if (!fileInfo) {
return undefined;
}
return createFile(fileInfo);
};
File.exists = function(path) {
return getFileAccess().fileExists(path);
};
Object.defineProperty(File.prototype, "extension", {
get: function() {
return this[extensionProperty];
},
enumerable: true,
configurable: true
});
Object.defineProperty(File.prototype, "isLocked", {
get: function() {
return !!this[fileLockedProperty];
},
enumerable: true,
configurable: true
});
File.prototype.readSync = function(onError) {
this.checkAccess();
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
var content = getFileAccess().read(this.path, localError);
this[fileLockedProperty] = false;
return content;
};
File.prototype.writeSync = function(content, onError) {
this.checkAccess();
try {
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
getFileAccess().write(this.path, content, localError);
} finally {
this[fileLockedProperty] = false;
}
};
File.prototype.readText = function(encoding) {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
var content = _this.readTextSync(localError, encoding);
if (!hasError) {
resolve(content);
}
});
};
File.prototype.readTextSync = function(onError, encoding) {
this.checkAccess();
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
var content = getFileAccess().readText(this.path, localError, encoding);
this[fileLockedProperty] = false;
return content;
};
File.prototype.writeText = function(content, encoding) {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
_this.writeTextSync(content, localError, encoding);
if (!hasError) {
resolve();
}
});
};
File.prototype.writeTextSync = function(content, onError, encoding) {
this.checkAccess();
try {
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
getFileAccess().writeText(this.path, content, localError, encoding);
} finally {
this[fileLockedProperty] = false;
}
};
File.prototype.checkAccess = function() {
if (this.isLocked) {
throw new Error("Cannot access a locked file.");
}
};
return File;
}(FileSystemEntity);
exports.File = File;
var Folder = function(_super) {
__extends(Folder, _super);
function Folder() {
_super.apply(this, arguments);
}
Folder.fromPath = function(path) {
var onError = function(error) {
throw error;
};
var folderInfo = getFileAccess().getFolder(path, onError);
if (!folderInfo) {
return undefined;
}
return createFolder(folderInfo);
};
Folder.exists = function(path) {
return getFileAccess().folderExists(path);
};
Folder.prototype.contains = function(name) {
var fileAccess = getFileAccess();
var path = fileAccess.joinPath(this.path, name);
if (fileAccess.fileExists(path)) {
return true;
}
return fileAccess.folderExists(path);
};
Folder.prototype.clear = function() {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var onError = function(error) {
hasError = true;
reject(error);
};
_this.clearSync(onError);
if (!hasError) {
resolve();
}
});
};
Folder.prototype.clearSync = function(onError) {
getFileAccess().emptyFolder(this.path, onError);
};
Object.defineProperty(Folder.prototype, "isKnown", {
get: function() {
return this[isKnownProperty];
},
enumerable: true,
configurable: true
});
Folder.prototype.getFile = function(name) {
var fileAccess = getFileAccess();
var path = fileAccess.joinPath(this.path, name);
var onError = function(error) {
throw error;
};
var fileInfo = fileAccess.getFile(path, onError);
if (!fileInfo) {
return undefined;
}
return createFile(fileInfo);
};
Folder.prototype.getFolder = function(name) {
var fileAccess = getFileAccess();
var path = fileAccess.joinPath(this.path, name);
var onError = function(error) {
throw error;
};
var folderInfo = fileAccess.getFolder(path, onError);
if (!folderInfo) {
return undefined;
}
return createFolder(folderInfo);
};
Folder.prototype.getEntities = function() {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
var entities = _this.getEntitiesSync(localError);
if (!hasError) {
resolve(entities);
}
});
};
Folder.prototype.getEntitiesSync = function(onError) {
var fileInfos = getFileAccess().getEntities(this.path, onError);
if (!fileInfos) {
return null;
}
var entities = new Array();
var i;
for (i = 0; i < fileInfos.length; i++) {
if (fileInfos[i].extension) {
entities.push(createFile(fileInfos[i]));
} else {
entities.push(createFolder(fileInfos[i]));
}
}
return entities;
};
Folder.prototype.eachEntity = function(onEntity) {
if (!onEntity) {
return;
}
var onSuccess = function(fileInfo) {
var entity;
if (fileInfo.extension) {
entity = createFile(fileInfo);
} else {
entity = createFolder(fileInfo);
}
return onEntity(entity);
};
var onError = function(error) {
throw error;
};
getFileAccess().eachEntity(this.path, onSuccess, onError);
};
return Folder;
}(FileSystemEntity);
exports.Folder = Folder;
var knownFolders;
(function(knownFolders) {
var _documents;
var _temp;
var _app;
knownFolders.documents = function() {
if (!_documents) {
var path = getFileAccess().getDocumentsFolderPath();
_documents = new Folder();
_documents[pathProperty] = path;
_documents[isKnownProperty] = true;
}
return _documents;
};
knownFolders.temp = function() {
if (!_temp) {
var path = getFileAccess().getTempFolderPath();
_temp = new Folder();
_temp[pathProperty] = path;
_temp[isKnownProperty] = true;
}
return _temp;
};
knownFolders.currentApp = function() {
if (!_app) {
var path = getFileAccess().getCurrentAppPath();
_app = new Folder();
_app[pathProperty] = path;
_app[isKnownProperty] = true;
}
return _app;
};
})(knownFolders = exports.knownFolders || (exports.knownFolders = {}));
var path;
(function(path_1) {
function normalize(path) {
return getFileAccess().normalizePath(path);
}
path_1.normalize = normalize;
function join() {
var paths = [];
for (var _i = 0; _i < arguments.length; _i++) {
paths[_i - 0] = arguments[_i];
}
var fileAccess = getFileAccess();
return fileAccess.joinPaths(paths);
}
path_1.join = join;
path_1.separator = getFileAccess().getPathSeparator();
})(path = exports.path || (exports.path = {}));
}, function(module, exports, __webpack_require__) {
var textModule = __webpack_require__(21);
var utils = __webpack_require__(22);
var FileSystemAccess = function() {
function FileSystemAccess() {
this._pathSeparator = "/";
}
FileSystemAccess.prototype.getLastModified = function(path) {
var javaFile = new java.io.File(path);
return new Date(javaFile.lastModified());
};
FileSystemAccess.prototype.getParent = function(path, onError) {
try {
var javaFile = new java.io.File(path);
var parent = javaFile.getParentFile();
return {
path: parent.getAbsolutePath(),
name: parent.getName()
};
} catch (exception) {
if (onError) {
onError(exception);
}
return undefined;
}
};
FileSystemAccess.prototype.getFile = function(path, onError) {
return this.ensureFile(new java.io.File(path), false, onError);
};
FileSystemAccess.prototype.getFolder = function(path, onError) {
var javaFile = new java.io.File(path);
var dirInfo = this.ensureFile(javaFile, true, onError);
if (!dirInfo) {
return undefined;
}
return {
path: dirInfo.path,
name: dirInfo.name
};
};
FileSystemAccess.prototype.eachEntity = function(path, onEntity, onError) {
if (!onEntity) {
return;
}
this.enumEntities(path, onEntity, onError);
};
FileSystemAccess.prototype.getEntities = function(path, onError) {
var fileInfos = new Array();
var onEntity = function(entity) {
fileInfos.push(entity);
return true;
};
var errorOccurred;
var localError = function(error) {
if (onError) {
onError(error);
}
errorOccurred = true;
};
this.enumEntities(path, onEntity, localError);
if (!errorOccurred) {
return fileInfos;
}
return null;
};
FileSystemAccess.prototype.fileExists = function(path) {
var file = new java.io.File(path);
return file.exists();
};
FileSystemAccess.prototype.folderExists = function(path) {
var file = new java.io.File(path);
return file.exists() && file.isDirectory();
};
FileSystemAccess.prototype.deleteFile = function(path, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.isFile()) {
if (onError) {
onError({
message: "The specified parameter is not a File entity."
});
}
return;
}
if (!javaFile.delete()) {
if (onError) {
onError({
message: "File deletion failed"
});
}
}
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.deleteFolder = function(path, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.getCanonicalFile().isDirectory()) {
if (onError) {
onError({
message: "The specified parameter is not a Folder entity."
});
}
return;
}
this.deleteFolderContent(javaFile);
if (!javaFile.delete()) {
if (onError) {
onError({
message: "Folder deletion failed."
});
}
}
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.emptyFolder = function(path, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.getCanonicalFile().isDirectory()) {
if (onError) {
onError({
message: "The specified parameter is not a Folder entity."
});
}
return;
}
this.deleteFolderContent(javaFile);
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.rename = function(path, newPath, onError) {
var javaFile = new java.io.File(path);
if (!javaFile.exists()) {
if (onError) {
onError(new Error("The file to rename does not exist"));
}
return;
}
var newFile = new java.io.File(newPath);
if (newFile.exists()) {
if (onError) {
onError(new Error("A file with the same name already exists."));
}
return;
}
if (!javaFile.renameTo(newFile)) {
if (onError) {
onError(new Error("Failed to rename file '" + path + "' to '" + newPath + "'"));
}
}
};
FileSystemAccess.prototype.getDocumentsFolderPath = function() {
var dir = utils.ad.getApplicationContext().getFilesDir();
return dir.getAbsolutePath();
};
FileSystemAccess.prototype.getLogicalRootPath = function() {
var dir = utils.ad.getApplicationContext().getFilesDir();
return dir.getCanonicalPath();
};
FileSystemAccess.prototype.getTempFolderPath = function() {
var dir = utils.ad.getApplicationContext().getCacheDir();
return dir.getAbsolutePath();
};
FileSystemAccess.prototype.getCurrentAppPath = function() {
return this.getLogicalRootPath() + "/app";
};
FileSystemAccess.prototype.read = function(path, onError) {
try {
var javaFile = new java.io.File(path);
var stream = new java.io.FileInputStream(javaFile);
var bytes = Array.create("byte", javaFile.length());
var dataInputStream = new java.io.DataInputStream(stream);
dataInputStream.readFully(bytes);
return bytes;
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.write = function(path, bytes, onError) {
try {
var javaFile = new java.io.File(path);
var stream = new java.io.FileOutputStream(javaFile);
stream.write(bytes, 0, bytes.length);
stream.close();
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.readText = function(path, onError, encoding) {
try {
var types = __webpack_require__(14);
var javaFile = new java.io.File(path);
var stream = new java.io.FileInputStream(javaFile);
var actualEncoding = encoding;
if (!actualEncoding) {
actualEncoding = textModule.encoding.UTF_8;
}
var reader = new java.io.InputStreamReader(stream, actualEncoding);
var bufferedReader = new java.io.BufferedReader(reader);
var line = undefined;
var result = "";
while (true) {
line = bufferedReader.readLine();
if (types.isNullOrUndefined(line)) {
break;
}
if (result.length > 0) {
result += "\n";
}
result += line;
}
if (actualEncoding === textModule.encoding.UTF_8) {
result = FileSystemAccess._removeUtf8Bom(result);
}
bufferedReader.close();
return result;
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess._removeUtf8Bom = function(s) {
if (s.charCodeAt(0) === 65279) {
s = s.slice(1);
}
return s;
};
FileSystemAccess.prototype.writeText = function(path, content, onError, encoding) {
try {
var javaFile = new java.io.File(path);
var stream = new java.io.FileOutputStream(javaFile);
var actualEncoding = encoding;
if (!actualEncoding) {
actualEncoding = textModule.encoding.UTF_8;
}
var writer = new java.io.OutputStreamWriter(stream, actualEncoding);
writer.write(content);
writer.close();
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.deleteFolderContent = function(file) {
var filesList = file.listFiles();
if (filesList.length === 0) {
return true;
}
var i, childFile, success = false;
for (i = 0; i < filesList.length; i++) {
childFile = filesList[i];
if (childFile.getCanonicalFile().isDirectory()) {
success = this.deleteFolderContent(childFile);
if (!success) {
break;
}
}
success = childFile.delete();
}
return success;
};
FileSystemAccess.prototype.ensureFile = function(javaFile, isFolder, onError) {
try {
if (!javaFile.exists()) {
var created;
if (isFolder) {
created = javaFile.mkdirs();
} else {
javaFile.getParentFile().mkdirs();
created = javaFile.createNewFile();
}
if (!created) {
if (onError) {
onError("Failed to create new java File for path " + javaFile.getAbsolutePath());
}
return undefined;
} else {
javaFile.setReadable(true);
javaFile.setWritable(true);
}
}
var path = javaFile.getAbsolutePath();
return {
path: path,
name: javaFile.getName(),
extension: this.getFileExtension(path)
};
} catch (exception) {
if (onError) {
onError(exception);
}
return undefined;
}
};
FileSystemAccess.prototype.getFileExtension = function(path) {
var dotIndex = path.lastIndexOf(".");
if (dotIndex && dotIndex >= 0 && dotIndex < path.length) {
return path.substring(dotIndex);
}
return "";
};
FileSystemAccess.prototype.enumEntities = function(path, callback, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.getCanonicalFile().isDirectory()) {
if (onError) {
onError("There is no folder existing at path " + path);
}
return;
}
var filesList = javaFile.listFiles();
var length = filesList.length;
var i;
var info;
var retVal;
for (i = 0; i < length; i++) {
javaFile = filesList[i];
info = {
path: javaFile.getAbsolutePath(),
name: javaFile.getName()
};
if (javaFile.isFile()) {
info.extension = this.getFileExtension(info.path);
}
retVal = callback(info);
if (retVal === false) {
break;
}
}
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.getPathSeparator = function() {
return this._pathSeparator;
};
FileSystemAccess.prototype.normalizePath = function(path) {
var file = new java.io.File(path);
return file.getAbsolutePath();
};
FileSystemAccess.prototype.joinPath = function(left, right) {
var file1 = new java.io.File(left);
var file2 = new java.io.File(file1, right);
return file2.getAbsolutePath();
};
FileSystemAccess.prototype.joinPaths = function(paths) {
if (!paths || paths.length === 0) {
return "";
}
if (paths.length === 1) {
return paths[0];
}
var i, result = paths[0];
for (i = 1; i < paths.length; i++) {
result = this.joinPath(result, paths[i]);
}
return this.normalizePath(result);
};
return FileSystemAccess;
}();
exports.FileSystemAccess = FileSystemAccess;
}, function(module, exports) {
var encoding;
(function(encoding) {
encoding.ISO_8859_1 = "ISO-8859-1";
encoding.US_ASCII = "US-ASCII";
encoding.UTF_16 = "UTF-16";
encoding.UTF_16BE = "UTF-16BE";
encoding.UTF_16LE = "UTF-16LE";
encoding.UTF_8 = "UTF-8";
})(encoding = exports.encoding || (exports.encoding = {}));
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(23);
var enums = __webpack_require__(24);
global.moduleMerge(common, exports);
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(30);
}
}
var layout;
(function(layout) {
var density = -1;
var metrics;
var MODE_SHIFT = 30;
var MODE_MASK = 3 << MODE_SHIFT;
var sdkVersion = -1;
var useOldMeasureSpec = false;
function makeMeasureSpec(size, mode) {
if (sdkVersion === -1) {
sdkVersion = ad.getApplicationContext().getApplicationInfo().targetSdkVersion;
useOldMeasureSpec = sdkVersion <= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
}
if (useOldMeasureSpec) {
return size + mode;
}
return size & ~MODE_MASK | mode & MODE_MASK;
}
layout.makeMeasureSpec = makeMeasureSpec;
function getDisplayMetrics() {
if (!metrics) {
metrics = ad.getApplicationContext().getResources().getDisplayMetrics();
}
return metrics;
}
layout.getDisplayMetrics = getDisplayMetrics;
function getDisplayDensity() {
if (density === -1) {
density = getDisplayMetrics().density;
}
return density;
}
layout.getDisplayDensity = getDisplayDensity;
function toDevicePixels(value) {
return value * getDisplayDensity();
}
layout.toDevicePixels = toDevicePixels;
function toDeviceIndependentPixels(value) {
return value / getDisplayDensity();
}
layout.toDeviceIndependentPixels = toDeviceIndependentPixels;
})(layout = exports.layout || (exports.layout = {}));
var ad;
(function(ad) {
function setTextDecoration(view, value) {
var flags = 0;
var values = (value + "").split(" ");
if (values.indexOf(enums.TextDecoration.underline) !== -1) {
flags = flags | android.graphics.Paint.UNDERLINE_TEXT_FLAG;
}
if (values.indexOf(enums.TextDecoration.lineThrough) !== -1) {
flags = flags | android.graphics.Paint.STRIKE_THRU_TEXT_FLAG;
}
if (values.indexOf(enums.TextDecoration.none) === -1) {
view.setPaintFlags(flags);
} else {
view.setPaintFlags(0);
}
}
ad.setTextDecoration = setTextDecoration;
function setTextTransform(v, value) {
var view = v._nativeView;
var str = view.getText() + "";
var result = getTransformedString(value, view, str);
if (v.formattedText) {
for (var i = 0; i < v.formattedText.spans.length; i++) {
var span = v.formattedText.spans.getItem(i);
span.text = getTransformedString(value, view, span.text);
}
} else {
view.setText(result);
}
}
ad.setTextTransform = setTextTransform;
function getTransformedString(textTransform, view, stringToTransform) {
var result;
switch (textTransform) {
case enums.TextTransform.none:
default:
result = view["originalString"] || stringToTransform;
if (view["transformationMethod"]) {
view.setTransformationMethod(view["transformationMethod"]);
}
break;

case enums.TextTransform.uppercase:
view.setTransformationMethod(null);
result = stringToTransform.toUpperCase();
break;

case enums.TextTransform.lowercase:
view.setTransformationMethod(null);
result = stringToTransform.toLowerCase();
break;

case enums.TextTransform.capitalize:
view.setTransformationMethod(null);
result = getCapitalizedString(stringToTransform);
break;
}
if (!view["originalString"]) {
view["originalString"] = stringToTransform;
view["transformationMethod"] = view.getTransformationMethod();
}
return result;
}
function getCapitalizedString(str) {
var words = str.split(" ");
var newWords = [];
for (var i = 0; i < words.length; i++) {
var word = words[i].toLowerCase();
newWords.push(word.substr(0, 1).toUpperCase() + word.substring(1));
}
return newWords.join(" ");
}
function setWhiteSpace(view, value) {
view.setSingleLine(value === enums.WhiteSpace.nowrap);
view.setEllipsize(value === enums.WhiteSpace.nowrap ? android.text.TextUtils.TruncateAt.END : null);
}
ad.setWhiteSpace = setWhiteSpace;
function getApplication() {
return com.tns.NativeScriptApplication.getInstance();
}
ad.getApplication = getApplication;
function getApplicationContext() {
return getApplication().getApplicationContext();
}
ad.getApplicationContext = getApplicationContext;
var inputMethodManager;
function getInputMethodManager() {
if (!inputMethodManager) {
inputMethodManager = getApplicationContext().getSystemService(android.content.Context.INPUT_METHOD_SERVICE);
}
return inputMethodManager;
}
ad.getInputMethodManager = getInputMethodManager;
function showSoftInput(nativeView) {
var imm = getInputMethodManager();
if (imm && nativeView instanceof android.view.View) {
imm.showSoftInput(nativeView, android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT);
}
}
ad.showSoftInput = showSoftInput;
function dismissSoftInput(nativeView) {
var imm = getInputMethodManager();
if (imm && nativeView instanceof android.view.View) {
imm.hideSoftInputFromWindow(nativeView.getWindowToken(), 0);
}
}
ad.dismissSoftInput = dismissSoftInput;
var collections;
(function(collections) {
function stringArrayToStringSet(str) {
var hashSet = new java.util.HashSet();
if ("undefined" !== typeof str) {
for (var element in str) {
hashSet.add("" + str[element]);
}
}
return hashSet;
}
collections.stringArrayToStringSet = stringArrayToStringSet;
function stringSetToStringArray(stringSet) {
var arr = [];
if ("undefined" !== typeof stringSet) {
var it = stringSet.iterator();
while (it.hasNext()) {
var element = "" + it.next();
arr.push(element);
}
}
return arr;
}
collections.stringSetToStringArray = stringSetToStringArray;
})(collections = ad.collections || (ad.collections = {}));
var resources;
(function(resources_1) {
var attr;
var attrCache = new Map();
function getDrawableId(name) {
return getId(":drawable/" + name);
}
resources_1.getDrawableId = getDrawableId;
function getStringId(name) {
return getId(":string/" + name);
}
resources_1.getStringId = getStringId;
function getId(name) {
var resources = getApplicationContext().getResources();
var packageName = getApplicationContext().getPackageName();
var uri = packageName + name;
return resources.getIdentifier(uri, null, null);
}
resources_1.getId = getId;
function getPalleteColor(name, context) {
if (attrCache.has(name)) {
return attrCache.get(name);
}
var result = 0;
try {
if (!attr) {
attr = java.lang.Class.forName("android.support.v7.appcompat.R$attr");
}
var colorID = 0;
var field = attr.getField(name);
if (field) {
colorID = field.getInt(null);
}
if (colorID) {
var typedValue = new android.util.TypedValue();
context.getTheme().resolveAttribute(colorID, typedValue, true);
result = typedValue.data;
}
} catch (ex) {
ensureTrace();
trace.write("Cannot get pallete color: " + name, trace.categories.Error, trace.messageType.error);
}
attrCache.set(name, result);
return result;
}
resources_1.getPalleteColor = getPalleteColor;
})(resources = ad.resources || (ad.resources = {}));
})(ad = exports.ad || (exports.ad = {}));
function GC() {
gc();
}
exports.GC = GC;
function openUrl(location) {
var context = ad.getApplicationContext();
try {
var intent = new android.content.Intent(android.content.Intent.ACTION_VIEW, android.net.Uri.parse(location.trim()));
intent.addFlags(android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
context.startActivity(intent);
} catch (e) {
ensureTrace();
trace.write("Error in OpenURL", trace.categories.Error, trace.messageType.error);
return false;
}
return true;
}
exports.openUrl = openUrl;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
exports.RESOURCE_PREFIX = "res://";
function copyFrom(source, target) {
if (types.isDefined(source) && types.isDefined(target)) {
var i;
var key;
var value;
var keys = Object.keys(source);
for (i = 0; i < keys.length; i++) {
key = keys[i];
value = source[key];
if (types.isDefined(value)) {
target[key] = value;
}
}
}
}
exports.copyFrom = copyFrom;
function parseJSON(source) {
var src = source.trim();
if (src.lastIndexOf(")") === src.length - 1) {
return JSON.parse(src.substring(src.indexOf("(") + 1, src.lastIndexOf(")")));
}
return JSON.parse(src);
}
exports.parseJSON = parseJSON;
function escapeRegexSymbols(source) {
var escapeRegex = /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g;
return source.replace(escapeRegex, "\\$&");
}
exports.escapeRegexSymbols = escapeRegexSymbols;
function convertString(value) {
var result;
if (!types.isString(value)) {
result = value;
} else if (value.trim() === "") {
result = value;
} else {
var valueAsNumber = +value;
if (!isNaN(valueAsNumber)) {
result = valueAsNumber;
} else if (value && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
result = value.toLowerCase() === "true" ? true : false;
} else {
result = value;
}
}
return result;
}
exports.convertString = convertString;
var layout;
(function(layout) {
var MODE_SHIFT = 30;
var MODE_MASK = 3 << MODE_SHIFT;
layout.UNSPECIFIED = 0 << MODE_SHIFT;
layout.EXACTLY = 1 << MODE_SHIFT;
layout.AT_MOST = 2 << MODE_SHIFT;
layout.MEASURED_STATE_TOO_SMALL = 16777216;
layout.MEASURED_STATE_MASK = 4278190080;
layout.MEASURED_SIZE_MASK = 16777215;
function getMode(mode) {
switch (mode) {
case layout.EXACTLY:
return "Exact";

case layout.AT_MOST:
return "AtMost";

default:
return "Unspecified";
}
}
layout.getMode = getMode;
function getMeasureSpecMode(spec) {
return spec & MODE_MASK;
}
layout.getMeasureSpecMode = getMeasureSpecMode;
function getMeasureSpecSize(spec) {
return spec & ~MODE_MASK;
}
layout.getMeasureSpecSize = getMeasureSpecSize;
function measureSpecToString(measureSpec) {
var mode = getMeasureSpecMode(measureSpec);
var size = getMeasureSpecSize(measureSpec);
var text = "MeasureSpec: ";
if (mode === layout.UNSPECIFIED) {
text += "UNSPECIFIED ";
} else if (mode === layout.EXACTLY) {
text += "EXACTLY ";
} else if (mode === layout.AT_MOST) {
text += "AT_MOST ";
} else {
text += mode + " ";
}
text += size;
return text;
}
layout.measureSpecToString = measureSpecToString;
})(layout = exports.layout || (exports.layout = {}));
function isFileOrResourcePath(path) {
if (!types.isString(path)) {
return false;
}
return path.indexOf("~/") === 0 || path.indexOf("/") === 0 || path.indexOf(exports.RESOURCE_PREFIX) === 0;
}
exports.isFileOrResourcePath = isFileOrResourcePath;
function isDataURI(uri) {
if (!types.isString(uri)) {
return false;
}
var firstSegment = uri.trim().split(",")[0];
return firstSegment && firstSegment.indexOf("data:") === 0 && firstSegment.indexOf("base64") >= 0;
}
exports.isDataURI = isDataURI;
}, function(module, exports, __webpack_require__) {
var KeyboardType;
(function(KeyboardType) {
KeyboardType.datetime = "datetime";
KeyboardType.phone = "phone";
KeyboardType.number = "number";
KeyboardType.url = "url";
KeyboardType.email = "email";
})(KeyboardType = exports.KeyboardType || (exports.KeyboardType = {}));
var ReturnKeyType;
(function(ReturnKeyType) {
ReturnKeyType.done = "done";
ReturnKeyType.next = "next";
ReturnKeyType.go = "go";
ReturnKeyType.search = "search";
ReturnKeyType.send = "send";
})(ReturnKeyType = exports.ReturnKeyType || (exports.ReturnKeyType = {}));
var TextAlignment;
(function(TextAlignment) {
TextAlignment.left = "left";
TextAlignment.center = "center";
TextAlignment.right = "right";
})(TextAlignment = exports.TextAlignment || (exports.TextAlignment = {}));
var TextDecoration;
(function(TextDecoration) {
TextDecoration.none = "none";
TextDecoration.underline = "underline";
TextDecoration.lineThrough = "line-through";
})(TextDecoration = exports.TextDecoration || (exports.TextDecoration = {}));
var TextTransform;
(function(TextTransform) {
TextTransform.none = "none";
TextTransform.capitalize = "capitalize";
TextTransform.uppercase = "uppercase";
TextTransform.lowercase = "lowercase";
})(TextTransform = exports.TextTransform || (exports.TextTransform = {}));
var WhiteSpace;
(function(WhiteSpace) {
WhiteSpace.normal = "normal";
WhiteSpace.nowrap = "nowrap";
})(WhiteSpace = exports.WhiteSpace || (exports.WhiteSpace = {}));
var Orientation;
(function(Orientation) {
Orientation.horizontal = "horizontal";
Orientation.vertical = "vertical";
})(Orientation = exports.Orientation || (exports.Orientation = {}));
var DeviceOrientation;
(function(DeviceOrientation) {
DeviceOrientation.portrait = "portrait";
DeviceOrientation.landscape = "landscape";
DeviceOrientation.unknown = "unknown";
})(DeviceOrientation = exports.DeviceOrientation || (exports.DeviceOrientation = {}));
var HorizontalAlignment;
(function(HorizontalAlignment) {
HorizontalAlignment.left = "left";
HorizontalAlignment.center = "center";
HorizontalAlignment.right = "right";
HorizontalAlignment.stretch = "stretch";
})(HorizontalAlignment = exports.HorizontalAlignment || (exports.HorizontalAlignment = {}));
var VerticalAlignment;
(function(VerticalAlignment) {
VerticalAlignment.top = "top";
VerticalAlignment.center = "center";
VerticalAlignment.middle = "middle";
VerticalAlignment.bottom = "bottom";
VerticalAlignment.stretch = "stretch";
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));
var Stretch;
(function(Stretch) {
Stretch.none = "none";
Stretch.aspectFill = "aspectFill";
Stretch.aspectFit = "aspectFit";
Stretch.fill = "fill";
})(Stretch = exports.Stretch || (exports.Stretch = {}));
var Visibility;
(function(Visibility) {
Visibility.visible = "visible";
Visibility.collapse = "collapse";
Visibility.collapsed = "collapsed";
})(Visibility = exports.Visibility || (exports.Visibility = {}));
var FontAttributes;
(function(FontAttributes) {
FontAttributes.Normal = 0;
FontAttributes.Bold = 1;
FontAttributes.Italic = 1 << 1;
})(FontAttributes = exports.FontAttributes || (exports.FontAttributes = {}));
var DeviceType;
(function(DeviceType) {
DeviceType.Phone = "Phone";
DeviceType.Tablet = "Tablet";
})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));
var UpdateTextTrigger;
(function(UpdateTextTrigger) {
UpdateTextTrigger.focusLost = "focusLost";
UpdateTextTrigger.textChanged = "textChanged";
})(UpdateTextTrigger = exports.UpdateTextTrigger || (exports.UpdateTextTrigger = {}));
var Accuracy;
(function(Accuracy) {
Accuracy.any = 300;
Accuracy.high = 3;
})(Accuracy = exports.Accuracy || (exports.Accuracy = {}));
var Dock;
(function(Dock) {
Dock.left = "left";
Dock.top = "top";
Dock.right = "right";
Dock.bottom = "bottom";
})(Dock = exports.Dock || (exports.Dock = {}));
var AutocapitalizationType;
(function(AutocapitalizationType) {
AutocapitalizationType.none = "none";
AutocapitalizationType.words = "words";
AutocapitalizationType.sentences = "sentences";
AutocapitalizationType.allCharacters = "allCharacters";
})(AutocapitalizationType = exports.AutocapitalizationType || (exports.AutocapitalizationType = {}));
var NavigationBarVisibility;
(function(NavigationBarVisibility) {
NavigationBarVisibility.auto = "auto";
NavigationBarVisibility.never = "never";
NavigationBarVisibility.always = "always";
})(NavigationBarVisibility = exports.NavigationBarVisibility || (exports.NavigationBarVisibility = {}));
var AndroidActionBarIconVisibility;
(function(AndroidActionBarIconVisibility) {
AndroidActionBarIconVisibility.auto = "auto";
AndroidActionBarIconVisibility.never = "never";
AndroidActionBarIconVisibility.always = "always";
})(AndroidActionBarIconVisibility = exports.AndroidActionBarIconVisibility || (exports.AndroidActionBarIconVisibility = {}));
var AndroidActionItemPosition;
(function(AndroidActionItemPosition) {
AndroidActionItemPosition.actionBar = "actionBar";
AndroidActionItemPosition.actionBarIfRoom = "actionBarIfRoom";
AndroidActionItemPosition.popup = "popup";
})(AndroidActionItemPosition = exports.AndroidActionItemPosition || (exports.AndroidActionItemPosition = {}));
var IOSActionItemPosition;
(function(IOSActionItemPosition) {
IOSActionItemPosition.left = "left";
IOSActionItemPosition.right = "right";
})(IOSActionItemPosition = exports.IOSActionItemPosition || (exports.IOSActionItemPosition = {}));
var ImageFormat;
(function(ImageFormat) {
ImageFormat.png = "png";
ImageFormat.jpeg = "jpeg";
})(ImageFormat = exports.ImageFormat || (exports.ImageFormat = {}));
var FontStyle;
(function(FontStyle) {
FontStyle.normal = "normal";
FontStyle.italic = "italic";
})(FontStyle = exports.FontStyle || (exports.FontStyle = {}));
var FontWeight;
(function(FontWeight) {
FontWeight.thin = "100";
FontWeight.extraLight = "200";
FontWeight.light = "300";
FontWeight.normal = "normal";
FontWeight.medium = "500";
FontWeight.semiBold = "600";
FontWeight.bold = "bold";
FontWeight.extraBold = "800";
FontWeight.black = "900";
})(FontWeight = exports.FontWeight || (exports.FontWeight = {}));
var BackgroundRepeat;
(function(BackgroundRepeat) {
BackgroundRepeat.repeat = "repeat";
BackgroundRepeat.repeatX = "repeat-x";
BackgroundRepeat.repeatY = "repeat-y";
BackgroundRepeat.noRepeat = "no-repeat";
})(BackgroundRepeat = exports.BackgroundRepeat || (exports.BackgroundRepeat = {}));
var animationModule;
var AnimationCurve;
(function(AnimationCurve) {
AnimationCurve.ease = "ease";
AnimationCurve.easeIn = "easeIn";
AnimationCurve.easeOut = "easeOut";
AnimationCurve.easeInOut = "easeInOut";
AnimationCurve.linear = "linear";
AnimationCurve.spring = "spring";
function cubicBezier(x1, y1, x2, y2) {
animationModule = animationModule || __webpack_require__(25);
return new animationModule.CubicBezierAnimationCurve(x1, y1, x2, y2);
}
AnimationCurve.cubicBezier = cubicBezier;
})(AnimationCurve = exports.AnimationCurve || (exports.AnimationCurve = {}));
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(26);
var utils = __webpack_require__(22);
var color = __webpack_require__(27);
var trace = __webpack_require__(30);
var types = __webpack_require__(14);
var enums = __webpack_require__(24);
var styleModule = __webpack_require__(15);
var lazy_1 = __webpack_require__(31);
global.moduleMerge(common, exports);
var argbEvaluator;
function ensureArgbEvaluator() {
if (!argbEvaluator) {
argbEvaluator = new android.animation.ArgbEvaluator();
}
}
var keyPrefix = "ui.animation.";
var propertyKeys = {};
propertyKeys[common.Properties.backgroundColor] = Symbol(keyPrefix + common.Properties.backgroundColor);
propertyKeys[common.Properties.opacity] = Symbol(keyPrefix + common.Properties.opacity);
propertyKeys[common.Properties.rotate] = Symbol(keyPrefix + common.Properties.rotate);
propertyKeys[common.Properties.scale] = Symbol(keyPrefix + common.Properties.scale);
propertyKeys[common.Properties.translate] = Symbol(keyPrefix + common.Properties.translate);
var Animation = function(_super) {
__extends(Animation, _super);
function Animation(animationDefinitions, playSequentially) {
_super.call(this, animationDefinitions, playSequentially);
if (animationDefinitions.length > 0 && animationDefinitions[0].valueSource !== undefined) {
this._valueSource = animationDefinitions[0].valueSource;
}
var that = this;
this._animatorListener = new android.animation.Animator.AnimatorListener({
onAnimationStart: function(animator) {
trace.write("MainAnimatorListener.onAndroidAnimationStart(" + animator + ")", trace.categories.Animation);
},
onAnimationRepeat: function(animator) {
trace.write("MainAnimatorListener.onAnimationRepeat(" + animator + ")", trace.categories.Animation);
},
onAnimationEnd: function(animator) {
trace.write("MainAnimatorListener.onAnimationEnd(" + animator + ")", trace.categories.Animation);
that._onAndroidAnimationEnd();
},
onAnimationCancel: function(animator) {
trace.write("MainAnimatorListener.onAnimationCancel(" + animator + ")", trace.categories.Animation);
that._onAndroidAnimationCancel();
}
});
}
Animation.prototype.play = function() {
var animationFinishedPromise = _super.prototype.play.call(this);
var i;
var length;
this._animators = new Array();
this._propertyUpdateCallbacks = new Array();
this._propertyResetCallbacks = new Array();
i = 0;
length = this._propertyAnimations.length;
for (;i < length; i++) {
this._createAnimators(this._propertyAnimations[i]);
}
this._nativeAnimatorsArray = Array.create(android.animation.Animator, this._animators.length);
i = 0;
length = this._animators.length;
for (;i < length; i++) {
this._nativeAnimatorsArray[i] = this._animators[i];
}
this._animatorSet = new android.animation.AnimatorSet();
this._animatorSet.addListener(this._animatorListener);
if (length > 0) {
if (this._playSequentially) {
this._animatorSet.playSequentially(this._nativeAnimatorsArray);
} else {
this._animatorSet.playTogether(this._nativeAnimatorsArray);
}
}
trace.write("Starting " + this._nativeAnimatorsArray.length + " animations " + (this._playSequentially ? "sequentially." : "together."), trace.categories.Animation);
this._animatorSet.setupStartValues();
this._animatorSet.start();
return animationFinishedPromise;
};
Animation.prototype.cancel = function() {
_super.prototype.cancel.call(this);
trace.write("Cancelling AnimatorSet.", trace.categories.Animation);
this._animatorSet.cancel();
};
Animation.prototype._onAndroidAnimationEnd = function() {
if (!this.isPlaying) {
return;
}
var i = 0;
var length = this._propertyUpdateCallbacks.length;
for (;i < length; i++) {
this._propertyUpdateCallbacks[i]();
}
this._resolveAnimationFinishedPromise();
};
Animation.prototype._onAndroidAnimationCancel = function() {
var i = 0;
var length = this._propertyResetCallbacks.length;
for (;i < length; i++) {
this._propertyResetCallbacks[i]();
}
this._rejectAnimationFinishedPromise();
};
Animation.prototype._createAnimators = function(propertyAnimation) {
if (!propertyAnimation.target._nativeView) {
return;
}
trace.write("Creating ObjectAnimator(s) for animation: " + common.Animation._getAnimationInfo(propertyAnimation) + "...", trace.categories.Animation);
if (types.isNullOrUndefined(propertyAnimation.target)) {
throw new Error("Animation target cannot be null or undefined!");
}
if (types.isNullOrUndefined(propertyAnimation.property)) {
throw new Error("Animation property cannot be null or undefined!");
}
if (types.isNullOrUndefined(propertyAnimation.value)) {
throw new Error("Animation value cannot be null or undefined!");
}
var nativeArray;
var nativeView = propertyAnimation.target._nativeView;
var animators = new Array();
var propertyUpdateCallbacks = new Array();
var propertyResetCallbacks = new Array();
var originalValue1;
var originalValue2;
var density = utils.layout.getDisplayDensity();
var xyObjectAnimators;
var animatorSet;
var key = propertyKeys[propertyAnimation.property];
if (key) {
propertyAnimation.target[key] = propertyAnimation;
}
function checkAnimation(cb) {
return function() {
if (propertyAnimation.target[key] === propertyAnimation) {
delete propertyAnimation.target[key];
cb();
}
};
}
var valueSource = this._valueSource;
switch (propertyAnimation.property) {
case common.Properties.opacity:
originalValue1 = nativeView.getAlpha();
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value;
if (this._valueSource !== undefined) {
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.opacityProperty, propertyAnimation.value, valueSource);
}));
} else {
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.opacity = propertyAnimation.value;
}));
}
propertyResetCallbacks.push(checkAnimation(function() {
nativeView.setAlpha(originalValue1);
}));
animators.push(android.animation.ObjectAnimator.ofFloat(nativeView, "alpha", nativeArray));
break;

case common.Properties.backgroundColor:
ensureArgbEvaluator();
originalValue1 = nativeView.getBackground();
nativeArray = Array.create(java.lang.Object, 2);
nativeArray[0] = propertyAnimation.target.backgroundColor ? java.lang.Integer.valueOf(propertyAnimation.target.backgroundColor.argb) : java.lang.Integer.valueOf(-1);
nativeArray[1] = java.lang.Integer.valueOf(propertyAnimation.value.argb);
var animator = android.animation.ValueAnimator.ofObject(argbEvaluator, nativeArray);
animator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener({
onAnimationUpdate: function(animator) {
var argb = animator.getAnimatedValue().intValue();
propertyAnimation.target.style._setValue(styleModule.backgroundColorProperty, new color.Color(argb), valueSource);
}
}));
if (this._valueSource !== undefined) {
var valueSource_1 = this._valueSource;
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.backgroundColorProperty, propertyAnimation.value, valueSource_1);
}));
} else {
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.backgroundColor = propertyAnimation.value;
}));
}
propertyResetCallbacks.push(checkAnimation(function() {
nativeView.setBackground(originalValue1);
}));
animators.push(animator);
break;

case common.Properties.translate:
xyObjectAnimators = Array.create(android.animation.Animator, 2);
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.x * density;
xyObjectAnimators[0] = android.animation.ObjectAnimator.ofFloat(nativeView, "translationX", nativeArray);
xyObjectAnimators[0].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.y * density;
xyObjectAnimators[1] = android.animation.ObjectAnimator.ofFloat(nativeView, "translationY", nativeArray);
xyObjectAnimators[1].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
originalValue1 = nativeView.getTranslationX();
originalValue2 = nativeView.getTranslationY();
if (this._valueSource !== undefined) {
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.translateXProperty, propertyAnimation.value.x, valueSource);
propertyAnimation.target.style._setValue(styleModule.translateYProperty, propertyAnimation.value.y, valueSource);
}));
} else {
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.translateX = propertyAnimation.value.x;
propertyAnimation.target.translateY = propertyAnimation.value.y;
}));
}
propertyResetCallbacks.push(checkAnimation(function() {
nativeView.setTranslationX(originalValue1);
nativeView.setTranslationY(originalValue2);
}));
animatorSet = new android.animation.AnimatorSet();
animatorSet.playTogether(xyObjectAnimators);
animatorSet.setupStartValues();
animators.push(animatorSet);
break;

case common.Properties.scale:
xyObjectAnimators = Array.create(android.animation.Animator, 2);
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.x;
xyObjectAnimators[0] = android.animation.ObjectAnimator.ofFloat(nativeView, "scaleX", nativeArray);
xyObjectAnimators[0].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.y;
xyObjectAnimators[1] = android.animation.ObjectAnimator.ofFloat(nativeView, "scaleY", nativeArray);
xyObjectAnimators[1].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
originalValue1 = nativeView.getScaleX();
originalValue2 = nativeView.getScaleY();
if (this._valueSource !== undefined) {
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.scaleXProperty, propertyAnimation.value.x, valueSource);
propertyAnimation.target.style._setValue(styleModule.scaleYProperty, propertyAnimation.value.y, valueSource);
}));
} else {
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.scaleX = propertyAnimation.value.x;
propertyAnimation.target.scaleY = propertyAnimation.value.y;
}));
}
propertyResetCallbacks.push(checkAnimation(function() {
nativeView.setScaleY(originalValue1);
nativeView.setScaleY(originalValue2);
}));
animatorSet = new android.animation.AnimatorSet();
animatorSet.playTogether(xyObjectAnimators);
animatorSet.setupStartValues();
animators.push(animatorSet);
break;

case common.Properties.rotate:
originalValue1 = nativeView.getRotation();
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value;
if (this._valueSource !== undefined) {
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.rotateProperty, propertyAnimation.value, valueSource);
}));
} else {
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.rotate = propertyAnimation.value;
}));
}
propertyResetCallbacks.push(checkAnimation(function() {
nativeView.setRotation(originalValue1);
}));
animators.push(android.animation.ObjectAnimator.ofFloat(nativeView, "rotation", nativeArray));
break;

default:
throw new Error("Cannot animate " + propertyAnimation.property);
}
var i = 0;
var length = animators.length;
for (;i < length; i++) {
if (propertyAnimation.duration !== undefined) {
animators[i].setDuration(propertyAnimation.duration);
}
if (propertyAnimation.delay !== undefined) {
animators[i].setStartDelay(propertyAnimation.delay);
}
if (propertyAnimation.iterations !== undefined && animators[i] instanceof android.animation.ValueAnimator) {
animators[i].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
}
if (propertyAnimation.curve !== undefined) {
animators[i].setInterpolator(propertyAnimation.curve);
}
trace.write("Animator created: " + animators[i], trace.categories.Animation);
}
this._animators = this._animators.concat(animators);
this._propertyUpdateCallbacks = this._propertyUpdateCallbacks.concat(propertyUpdateCallbacks);
this._propertyResetCallbacks = this._propertyResetCallbacks.concat(propertyResetCallbacks);
};
Animation._getAndroidRepeatCount = function(iterations) {
return iterations === Number.POSITIVE_INFINITY ? android.view.animation.Animation.INFINITE : iterations - 1;
};
return Animation;
}(common.Animation);
exports.Animation = Animation;
var easeIn = lazy_1.default(function() {
return new android.view.animation.AccelerateInterpolator(1);
});
var easeOut = lazy_1.default(function() {
return new android.view.animation.DecelerateInterpolator(1);
});
var easeInOut = lazy_1.default(function() {
return new android.view.animation.AccelerateDecelerateInterpolator();
});
var linear = lazy_1.default(function() {
return new android.view.animation.LinearInterpolator();
});
var bounce = lazy_1.default(function() {
return new android.view.animation.BounceInterpolator();
});
function _resolveAnimationCurve(curve) {
switch (curve) {
case enums.AnimationCurve.easeIn:
trace.write("Animation curve resolved to android.view.animation.AccelerateInterpolator(1).", trace.categories.Animation);
return easeIn();

case enums.AnimationCurve.easeOut:
trace.write("Animation curve resolved to android.view.animation.DecelerateInterpolator(1).", trace.categories.Animation);
return easeOut();

case enums.AnimationCurve.easeInOut:
trace.write("Animation curve resolved to android.view.animation.AccelerateDecelerateInterpolator().", trace.categories.Animation);
return easeInOut();

case enums.AnimationCurve.linear:
trace.write("Animation curve resolved to android.view.animation.LinearInterpolator().", trace.categories.Animation);
return linear();

case enums.AnimationCurve.spring:
trace.write("Animation curve resolved to android.view.animation.BounceInterpolator().", trace.categories.Animation);
return bounce();

case enums.AnimationCurve.ease:
return android.support.v4.view.animation.PathInterpolatorCompat.create(.25, .1, .25, 1);

default:
trace.write("Animation curve resolved to original: " + curve, trace.categories.Animation);
if (curve instanceof common.CubicBezierAnimationCurve) {
var animationCurve = curve;
var interpolator = android.support.v4.view.animation.PathInterpolatorCompat.create(animationCurve.x1, animationCurve.y1, animationCurve.x2, animationCurve.y2);
return interpolator;
}
return curve;
}
}
exports._resolveAnimationCurve = _resolveAnimationCurve;
}, function(module, exports, __webpack_require__) {
var definition = __webpack_require__(25);
var colorModule = __webpack_require__(27);
var types = __webpack_require__(14);
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(30);
}
}
var Properties;
(function(Properties) {
Properties.opacity = "opacity";
Properties.backgroundColor = "backgroundColor";
Properties.translate = "translate";
Properties.rotate = "rotate";
Properties.scale = "scale";
})(Properties = exports.Properties || (exports.Properties = {}));
var CubicBezierAnimationCurve = function() {
function CubicBezierAnimationCurve(x1, y1, x2, y2) {
this.x1 = x1;
this.y1 = y1;
this.x2 = x2;
this.y2 = y2;
}
return CubicBezierAnimationCurve;
}();
exports.CubicBezierAnimationCurve = CubicBezierAnimationCurve;
var AnimationPromise = function() {
function AnimationPromise() {}
AnimationPromise.prototype.cancel = function() {};
AnimationPromise.prototype.then = function(onFulfilled, onRejected) {
return new AnimationPromise();
};
AnimationPromise.prototype.catch = function(onRejected) {
return new AnimationPromise();
};
return AnimationPromise;
}();
exports.AnimationPromise = AnimationPromise;
var Animation = function() {
function Animation(animationDefinitions, playSequentially) {
if (!animationDefinitions || animationDefinitions.length === 0) {
throw new Error("No animation definitions specified");
}
ensureTrace();
trace.write("Analyzing " + animationDefinitions.length + " animation definitions...", trace.categories.Animation);
this._propertyAnimations = new Array();
var i = 0;
var length = animationDefinitions.length;
for (;i < length; i++) {
animationDefinitions[i].curve = definition._resolveAnimationCurve(animationDefinitions[i].curve);
this._propertyAnimations = this._propertyAnimations.concat(Animation._createPropertyAnimations(animationDefinitions[i]));
}
if (this._propertyAnimations.length === 0) {
throw new Error("Nothing to animate.");
}
trace.write("Created " + this._propertyAnimations.length + " individual property animations.", trace.categories.Animation);
this._playSequentially = playSequentially;
}
Animation.prototype.play = function() {
var _this = this;
if (this.isPlaying) {
throw new Error("Animation is already playing.");
}
var animationFinishedPromise = new Promise(function(resolve, reject) {
_this._resolve = resolve;
_this._reject = reject;
});
this.fixupAnimationPromise(animationFinishedPromise);
this._isPlaying = true;
return animationFinishedPromise;
};
Animation.prototype.fixupAnimationPromise = function(promise) {
var _this = this;
promise.cancel = function() {
_this.cancel();
};
var _then = promise.then;
promise.then = function() {
var r = _then.apply(promise, arguments);
_this.fixupAnimationPromise(r);
return r;
};
var _catch = promise.catch;
promise.catch = function() {
var r = _catch.apply(promise, arguments);
_this.fixupAnimationPromise(r);
return r;
};
};
Animation.prototype.cancel = function() {
if (!this.isPlaying) {
throw new Error("Animation is not currently playing.");
}
};
Object.defineProperty(Animation.prototype, "isPlaying", {
get: function() {
return this._isPlaying;
},
enumerable: true,
configurable: true
});
Animation.prototype._resolveAnimationFinishedPromise = function() {
this._isPlaying = false;
this._resolve();
};
Animation.prototype._rejectAnimationFinishedPromise = function() {
this._isPlaying = false;
this._reject(new Error("Animation cancelled."));
};
Animation._createPropertyAnimations = function(animationDefinition) {
if (!animationDefinition.target) {
throw new Error("No animation target specified.");
}
for (var item in animationDefinition) {
if (!types.isDefined(animationDefinition[item])) {
continue;
}
if ((item === Properties.opacity || item === Properties.rotate || item === "duration" || item === "delay" || item === "iterations") && !types.isNumber(animationDefinition[item])) {
throw new Error("Property " + item + " must be valid number. Value: " + animationDefinition[item]);
} else if ((item === Properties.scale || item === Properties.translate) && (!types.isNumber(animationDefinition[item].x) || !types.isNumber(animationDefinition[item].y))) {
throw new Error("Property " + item + " must be valid Pair. Value: " + animationDefinition[item]);
} else if (item === Properties.backgroundColor && !colorModule.Color.isValid(animationDefinition.backgroundColor)) {
throw new Error("Property " + item + " must be valid color. Value: " + animationDefinition[item]);
}
}
var propertyAnimations = new Array();
if (animationDefinition.opacity !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.opacity,
value: animationDefinition.opacity,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.backgroundColor !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.backgroundColor,
value: types.isString(animationDefinition.backgroundColor) ? new colorModule.Color(animationDefinition.backgroundColor) : animationDefinition.backgroundColor,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.translate !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.translate,
value: animationDefinition.translate,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.scale !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.scale,
value: animationDefinition.scale,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.rotate !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.rotate,
value: animationDefinition.rotate,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (propertyAnimations.length === 0) {
throw new Error("No animation property specified.");
}
return propertyAnimations;
};
Animation._getAnimationInfo = function(animation) {
return JSON.stringify({
target: animation.target.id,
property: animation.property,
value: animation.value,
duration: animation.duration,
delay: animation.delay,
iterations: animation.iterations,
curve: animation.curve
});
};
return Animation;
}();
exports.Animation = Animation;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(28);
var Color = function(_super) {
__extends(Color, _super);
function Color() {
_super.apply(this, arguments);
}
Object.defineProperty(Color.prototype, "android", {
get: function() {
return this.argb;
},
enumerable: true,
configurable: true
});
Color.prototype._argbFromString = function(hex) {
return android.graphics.Color.parseColor(hex);
};
return Color;
}(common.Color);
exports.Color = Color;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var knownColors = __webpack_require__(29);
var AMP = "#";
var HEX_REGEX = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i;
var Color = function() {
function Color() {
if (arguments.length === 1) {
var arg = arguments[0];
if (types.isString(arg)) {
if (isRgbOrRgba(arg)) {
this._argb = argbFromRgbOrRgba(arg);
} else if (knownColors.isKnownName(arg)) {
this._hex = knownColors.getKnownColor(arg);
this._name = arg;
this._argb = this._argbFromString(this._hex);
} else {
this._hex = this._normalizeHex(arg);
this._argb = this._argbFromString(this._hex);
}
} else if (types.isNumber(arg)) {
this._argb = arg;
} else {
throw new Error("Expected 1 or 4 constructor parameters.");
}
this._parseComponents();
if (!this._hex) {
this._hex = this._buildHex();
}
} else if (arguments.length === 4) {
this._a = arguments[0];
this._r = arguments[1];
this._g = arguments[2];
this._b = arguments[3];
this._buildArgb();
this._hex = this._buildHex();
} else {
throw new Error("Expected 1 or 4 constructor parameters.");
}
}
Object.defineProperty(Color.prototype, "a", {
get: function() {
return this._a;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "r", {
get: function() {
return this._r;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "g", {
get: function() {
return this._g;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "b", {
get: function() {
return this._b;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "argb", {
get: function() {
return this._argb;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "hex", {
get: function() {
return this._hex;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "name", {
get: function() {
return this._name;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "ios", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "android", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Color.prototype._argbFromString = function(hex) {
return undefined;
};
Color.prototype.equals = function(value) {
return this.argb === value.argb;
};
Color.equals = function(value1, value2) {
if (!value1 && !value2) {
return true;
}
if (!value1 || !value2) {
return false;
}
return value1.equals(value2);
};
Color.isValid = function(value) {
if (types.isNullOrUndefined(value) || value instanceof Color) {
return true;
}
if (!types.isString(value)) {
return false;
}
if (knownColors.isKnownName(value)) {
return true;
}
return HEX_REGEX.test(value) || isRgbOrRgba(value);
};
Color.prototype._buildHex = function() {
return AMP + this._componentToHex(this._a) + this._componentToHex(this._r) + this._componentToHex(this._g) + this._componentToHex(this._b);
};
Color.prototype._componentToHex = function(component) {
var hex = component.toString(16);
if (hex.length === 1) {
hex = "0" + hex;
}
return hex;
};
Color.prototype._parseComponents = function() {
if (types.isUndefined(this._argb)) {
throw new Error("Missing the ARGB numeric value");
}
this._a = this._argb >> 24 & 255;
this._r = this._argb >> 16 & 255;
this._g = this._argb >> 8 & 255;
this._b = this._argb & 255;
};
Color.prototype._buildArgb = function() {
this._argb = this._a << 24 | this._r << 16 | this._g << 8 | this._b;
};
Color.prototype._normalizeHex = function(hexStr) {
if (hexStr.charAt(0) === AMP && hexStr.length === 4) {
hexStr = hexStr.charAt(0) + hexStr.charAt(1) + hexStr.charAt(1) + hexStr.charAt(2) + hexStr.charAt(2) + hexStr.charAt(3) + hexStr.charAt(3);
}
return hexStr;
};
return Color;
}();
exports.Color = Color;
function isRgbOrRgba(value) {
var toLower = value.toLowerCase();
return (toLower.indexOf("rgb(") === 0 || toLower.indexOf("rgba(") === 0) && toLower.indexOf(")") === toLower.length - 1;
}
function argbFromRgbOrRgba(value) {
var toLower = value.toLowerCase();
var parts = toLower.replace("rgba(", "").replace("rgb(", "").replace(")", "").trim().split(",");
var r = 255, g = 255, b = 255, a = 255;
if (parts[0]) {
r = parseInt(parts[0].trim());
}
if (parts[1]) {
g = parseInt(parts[1].trim());
}
if (parts[2]) {
b = parseInt(parts[2].trim());
}
if (parts[3]) {
a = Math.round(parseFloat(parts[3].trim()) * 255);
}
return a << 24 | r << 16 | g << 8 | b;
}
}, function(module, exports) {
exports.Transparent = "#00000000";
exports.AliceBlue = "#F0F8FF";
exports.AntiqueWhite = "#FAEBD7";
exports.Aqua = "#00FFFF";
exports.Aquamarine = "#7FFFD4";
exports.Azure = "#F0FFFF";
exports.Beige = "#F5F5DC";
exports.Bisque = "#FFE4C4";
exports.Black = "#000000";
exports.BlanchedAlmond = "#FFEBCD";
exports.Blue = "#0000FF";
exports.BlueViolet = "#8A2BE2";
exports.Brown = "#A52A2A";
exports.BurlyWood = "#DEB887";
exports.CadetBlue = "#5F9EA0";
exports.Chartreuse = "#7FFF00";
exports.Chocolate = "#D2691E";
exports.Coral = "#FF7F50";
exports.CornflowerBlue = "#6495ED";
exports.Cornsilk = "#FFF8DC";
exports.Crimson = "#DC143C";
exports.Cyan = "#00FFFF";
exports.DarkBlue = "#00008B";
exports.DarkCyan = "#008B8B";
exports.DarkGoldenRod = "#B8860B";
exports.DarkGray = "#A9A9A9";
exports.DarkGreen = "#006400";
exports.DarkKhaki = "#BDB76B";
exports.DarkMagenta = "#8B008B";
exports.DarkOliveGreen = "#556B2F";
exports.DarkOrange = "#FF8C00";
exports.DarkOrchid = "#9932CC";
exports.DarkRed = "#8B0000";
exports.DarkSalmon = "#E9967A";
exports.DarkSeaGreen = "#8FBC8F";
exports.DarkSlateBlue = "#483D8B";
exports.DarkSlateGray = "#2F4F4F";
exports.DarkTurquoise = "#00CED1";
exports.DarkViolet = "#9400D3";
exports.DeepPink = "#FF1493";
exports.DeepSkyBlue = "#00BFFF";
exports.DimGray = "#696969";
exports.DodgerBlue = "#1E90FF";
exports.FireBrick = "#B22222";
exports.FloralWhite = "#FFFAF0";
exports.ForestGreen = "#228B22";
exports.Fuchsia = "#FF00FF";
exports.Gainsboro = "#DCDCDC";
exports.GhostWhite = "#F8F8FF";
exports.Gold = "#FFD700";
exports.GoldenRod = "#DAA520";
exports.Gray = "#808080";
exports.Green = "#008000";
exports.GreenYellow = "#ADFF2F";
exports.HoneyDew = "#F0FFF0";
exports.HotPink = "#FF69B4";
exports.IndianRed = "#CD5C5C";
exports.Indigo = "#4B0082";
exports.Ivory = "#FFFFF0";
exports.Khaki = "#F0E68C";
exports.Lavender = "#E6E6FA";
exports.LavenderBlush = "#FFF0F5";
exports.LawnGreen = "#7CFC00";
exports.LemonChiffon = "#FFFACD";
exports.LightBlue = "#ADD8E6";
exports.LightCoral = "#F08080";
exports.LightCyan = "#E0FFFF";
exports.LightGoldenRodYellow = "#FAFAD2";
exports.LightGray = "#D3D3D3";
exports.LightGreen = "#90EE90";
exports.LightPink = "#FFB6C1";
exports.LightSalmon = "#FFA07A";
exports.LightSeaGreen = "#20B2AA";
exports.LightSkyBlue = "#87CEFA";
exports.LightSlateGray = "#778899";
exports.LightSteelBlue = "#B0C4DE";
exports.LightYellow = "#FFFFE0";
exports.Lime = "#00FF00";
exports.LimeGreen = "#32CD32";
exports.Linen = "#FAF0E6";
exports.Magenta = "#FF00FF";
exports.Maroon = "#800000";
exports.MediumAquaMarine = "#66CDAA";
exports.MediumBlue = "#0000CD";
exports.MediumOrchid = "#BA55D3";
exports.MediumPurple = "#9370DB";
exports.MediumSeaGreen = "#3CB371";
exports.MediumSlateBlue = "#7B68EE";
exports.MediumSpringGreen = "#00FA9A";
exports.MediumTurquoise = "#48D1CC";
exports.MediumVioletRed = "#C71585";
exports.MidnightBlue = "#191970";
exports.MintCream = "#F5FFFA";
exports.MistyRose = "#FFE4E1";
exports.Moccasin = "#FFE4B5";
exports.NavajoWhite = "#FFDEAD";
exports.Navy = "#000080";
exports.OldLace = "#FDF5E6";
exports.Olive = "#808000";
exports.OliveDrab = "#6B8E23";
exports.Orange = "#FFA500";
exports.OrangeRed = "#FF4500";
exports.Orchid = "#DA70D6";
exports.PaleGoldenRod = "#EEE8AA";
exports.PaleGreen = "#98FB98";
exports.PaleTurquoise = "#AFEEEE";
exports.PaleVioletRed = "#DB7093";
exports.PapayaWhip = "#FFEFD5";
exports.PeachPuff = "#FFDAB9";
exports.Peru = "#CD853F";
exports.Pink = "#FFC0CB";
exports.Plum = "#DDA0DD";
exports.PowderBlue = "#B0E0E6";
exports.Purple = "#800080";
exports.Red = "#FF0000";
exports.RosyBrown = "#BC8F8F";
exports.RoyalBlue = "#4169E1";
exports.SaddleBrown = "#8B4513";
exports.Salmon = "#FA8072";
exports.SandyBrown = "#F4A460";
exports.SeaGreen = "#2E8B57";
exports.SeaShell = "#FFF5EE";
exports.Sienna = "#A0522D";
exports.Silver = "#C0C0C0";
exports.SkyBlue = "#87CEEB";
exports.SlateBlue = "#6A5ACD";
exports.SlateGray = "#708090";
exports.Snow = "#FFFAFA";
exports.SpringGreen = "#00FF7F";
exports.SteelBlue = "#4682B4";
exports.Tan = "#D2B48C";
exports.Teal = "#008080";
exports.Thistle = "#D8BFD8";
exports.Tomato = "#FF6347";
exports.Turquoise = "#40E0D0";
exports.Violet = "#EE82EE";
exports.Wheat = "#F5DEB3";
exports.White = "#FFFFFF";
exports.WhiteSmoke = "#F5F5F5";
exports.Yellow = "#FFFF00";
exports.YellowGreen = "#9ACD32";
var _allColors = {};
(function() {
var name;
var underscore = "_";
for (var p in exports) {
name = p;
if (name.charAt(0) !== underscore) {
_allColors[name.toLowerCase()] = exports[p];
}
}
})();
function isKnownName(name) {
if (!name) {
return undefined;
}
return name.toLowerCase() in _allColors;
}
exports.isKnownName = isKnownName;
function getKnownColor(name) {
if (!name) {
return undefined;
}
return _allColors[name.toLowerCase()];
}
exports.getKnownColor = getKnownColor;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var _enabled = false;
var _categories = {};
var _writers = [];
var _eventListeners = [];
function enable() {
_enabled = true;
}
exports.enable = enable;
function disable() {
_enabled = false;
}
exports.disable = disable;
function isCategorySet(category) {
return category in _categories;
}
exports.isCategorySet = isCategorySet;
function addWriter(writer) {
_writers.push(writer);
}
exports.addWriter = addWriter;
function removeWriter(writer) {
var index = _writers.indexOf(writer);
if (index >= 0) {
_writers.splice(index, 1);
}
}
exports.removeWriter = removeWriter;
function clearWriters() {
if (_writers.length > 0) {
_writers.splice(0, _writers.length);
}
}
exports.clearWriters = clearWriters;
function setCategories(categories) {
_categories = {};
addCategories(categories);
}
exports.setCategories = setCategories;
function addCategories(categories) {
var split = categories.split(",");
for (var i = 0; i < split.length; i++) {
_categories[split[i].trim()] = true;
}
}
exports.addCategories = addCategories;
function write(message, category, type) {
var i;
if (type === messageType.error) {
for (i = 0; i < _writers.length; i++) {
_writers[i].write(message, category, type);
}
}
if (!_enabled) {
return;
}
if (!(category in _categories)) {
return;
}
for (i = 0; i < _writers.length; i++) {
_writers[i].write(message, category, type);
}
}
exports.write = write;
function notifyEvent(object, name, data) {
if (!_enabled) {
return;
}
var i, listener, filters;
for (i = 0; i < _eventListeners.length; i++) {
listener = _eventListeners[i];
if (listener.filter) {
filters = listener.filter.split(",");
filters.forEach(function(value) {
if (value.trim() === name) {
listener.on(object, name, data);
}
});
} else {
listener.on(object, name, data);
}
}
}
exports.notifyEvent = notifyEvent;
function addEventListener(listener) {
_eventListeners.push(listener);
}
exports.addEventListener = addEventListener;
function removeEventListener(listener) {
var index = _eventListeners.indexOf(listener);
if (index >= 0) {
_eventListeners.splice(index, 1);
}
}
exports.removeEventListener = removeEventListener;
var messageType;
(function(messageType) {
messageType.log = 0;
messageType.info = 1;
messageType.warn = 2;
messageType.error = 3;
})(messageType = exports.messageType || (exports.messageType = {}));
var categories;
(function(categories) {
categories.VisualTreeEvents = "VisualTreeEvents";
categories.Layout = "Layout";
categories.Style = "Style";
categories.ViewHierarchy = "ViewHierarchy";
categories.NativeLifecycle = "NativeLifecycle";
categories.Debug = "Debug";
categories.Navigation = "Navigation";
categories.Test = "Test";
categories.Binding = "Binding";
categories.BindingError = "BindingError";
categories.Error = "Error";
categories.Animation = "Animation";
categories.Transition = "Transition";
categories.All = categories.VisualTreeEvents + "," + categories.Layout + "," + categories.Style + "," + categories.ViewHierarchy + "," + categories.NativeLifecycle + "," + categories.Debug + "," + categories.Navigation + "," + categories.Test + "," + categories.Binding + "," + categories.Error + "," + categories.Animation + "," + categories.Transition;
categories.separator = ",";
function concat() {
var i;
var result;
for (i = 0; i < arguments.length; i++) {
if (!result) {
result = arguments[i];
continue;
}
result = result.concat(categories.separator, arguments[i]);
}
return result;
}
categories.concat = concat;
})(categories = exports.categories || (exports.categories = {}));
var ConsoleWriter = function() {
function ConsoleWriter() {}
ConsoleWriter.prototype.write = function(message, category, type) {
if (!console) {
return;
}
var msgType;
if (types.isUndefined(type)) {
msgType = messageType.log;
} else {
msgType = type;
}
switch (msgType) {
case messageType.log:
console.log(category + ": " + message);
break;

case messageType.info:
console.info(category + ": " + message);
break;

case messageType.warn:
console.warn(category + ": " + message);
break;

case messageType.error:
console.error(category + ": " + message);
break;
}
};
return ConsoleWriter;
}();
addWriter(new ConsoleWriter());
}, function(module, exports) {
function lazy(action) {
var _value;
return function() {
return _value || (_value = action());
};
}
Object.defineProperty(exports, "__esModule", {
value: true
});
exports.default = lazy;
}, function(module, exports, __webpack_require__) {
var trace = __webpack_require__(30);
var cssSelector = __webpack_require__(33);
var cssParser = __webpack_require__(40);
var application = __webpack_require__(16);
var keyframeAnimation = __webpack_require__(36);
var cssAnimationParser = __webpack_require__(37);
var observable = __webpack_require__(34);
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(14);
}
}
var utils;
function ensureUtils() {
if (!utils) {
utils = __webpack_require__(22);
}
}
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(19);
}
}
var vs;
function ensureVisualState() {
if (!vs) {
vs = __webpack_require__(42);
}
}
var pattern = /('|")(.*?)\1/;
var StyleScope = function() {
function StyleScope() {
this._statesByKey = {};
this._viewIdToKey = {};
this._localCssSelectors = [];
this._localCssSelectorVersion = 0;
this._localCssSelectorsAppliedVersion = 0;
this._applicationCssSelectorsAppliedVersion = 0;
this._keyframes = {};
}
Object.defineProperty(StyleScope.prototype, "css", {
get: function() {
return this._css;
},
set: function(value) {
this._cssFileName = undefined;
this.setCss(value);
},
enumerable: true,
configurable: true
});
StyleScope.prototype.addCss = function(cssString, cssFileName) {
this.setCss(cssString, cssFileName, true);
};
StyleScope.prototype.setCss = function(cssString, cssFileName, append) {
if (append === void 0) {
append = false;
}
this._css = this._css && append ? this._css + cssString : cssString;
if (cssFileName) {
this._cssFileName = cssFileName;
}
this._reset();
var parsedSelectors = StyleScope.createSelectorsFromCss(this._css, cssFileName, this._keyframes);
if (append) {
this._localCssSelectors.push.apply(this._localCssSelectors, parsedSelectors);
} else {
this._localCssSelectors = parsedSelectors;
}
this._localCssSelectorVersion++;
this.ensureSelectors();
};
StyleScope.prototype.removeSelectors = function(selectorExpression) {
for (var i = this._mergedCssSelectors.length - 1; i >= 0; i--) {
var selector = this._mergedCssSelectors[i];
if (selector.expression === selectorExpression) {
this._mergedCssSelectors.splice(i, 1);
}
}
};
StyleScope.prototype.getKeyframeAnimationWithName = function(animationName) {
var keyframes = this._keyframes[animationName];
if (keyframes !== undefined) {
var animation = new keyframeAnimation.KeyframeAnimationInfo();
animation.keyframes = cssAnimationParser.CssAnimationParser.keyframesArrayFromCSS(keyframes);
return animation;
}
return undefined;
};
StyleScope.createSelectorsFromCss = function(css, cssFileName, keyframes) {
try {
var pageCssSyntaxTree = css ? cssParser.parse(css, {
source: cssFileName
}) : null;
var pageCssSelectors = new Array();
if (pageCssSyntaxTree) {
pageCssSelectors = StyleScope._joinCssSelectorsArrays([ pageCssSelectors, StyleScope.createSelectorsFromImports(pageCssSyntaxTree, keyframes) ]);
pageCssSelectors = StyleScope._joinCssSelectorsArrays([ pageCssSelectors, StyleScope.createSelectorsFromSyntaxTree(pageCssSyntaxTree, keyframes) ]);
}
return pageCssSelectors;
} catch (e) {
trace.write("Css styling failed: " + e, trace.categories.Error, trace.messageType.error);
}
};
StyleScope.createSelectorsFromImports = function(tree, keyframes) {
var selectors = new Array();
ensureTypes();
if (!types.isNullOrUndefined(tree)) {
var imports = tree["stylesheet"]["rules"].filter(function(r) {
return r.type === "import";
});
for (var i = 0; i < imports.length; i++) {
var importItem = imports[i]["import"];
var match = importItem && importItem.match(pattern);
var url = match && match[2];
if (!types.isNullOrUndefined(url)) {
ensureUtils();
if (utils.isFileOrResourcePath(url)) {
ensureFS();
var fileName = types.isString(url) ? url.trim() : "";
if (fileName.indexOf("~/") === 0) {
fileName = fs.path.join(fs.knownFolders.currentApp().path, fileName.replace("~/", ""));
}
if (fs.File.exists(fileName)) {
var file = fs.File.fromPath(fileName);
var text = file.readTextSync();
if (text) {
selectors = StyleScope._joinCssSelectorsArrays([ selectors, StyleScope.createSelectorsFromCss(text, fileName, keyframes) ]);
}
}
}
}
}
}
return selectors;
};
StyleScope.prototype.ensureSelectors = function() {
var toMerge = [];
if (this._applicationCssSelectorsAppliedVersion !== application.cssSelectorVersion || this._localCssSelectorVersion !== this._localCssSelectorsAppliedVersion || !this._mergedCssSelectors) {
toMerge.push(application.cssSelectors);
this._applicationCssSelectorsAppliedVersion = application.cssSelectorVersion;
toMerge.push(this._localCssSelectors);
this._localCssSelectorsAppliedVersion = this._localCssSelectorVersion;
for (var keyframe in application.keyframes) {
this._keyframes[keyframe] = application.keyframes[keyframe];
}
}
if (toMerge.length > 0) {
this._mergedCssSelectors = StyleScope._joinCssSelectorsArrays(toMerge);
this._applyKeyframesOnSelectors();
return true;
} else {
return false;
}
};
StyleScope._joinCssSelectorsArrays = function(arrays) {
var mergedResult = [];
var i;
for (i = 0; i < arrays.length; i++) {
if (arrays[i]) {
mergedResult.push.apply(mergedResult, arrays[i]);
}
}
mergedResult.sort(function(a, b) {
return a.specificity - b.specificity;
});
return mergedResult;
};
StyleScope.prototype.applySelectors = function(view) {
this.ensureSelectors();
view.style._beginUpdate();
var i, selector, matchedStateSelectors = new Array();
for (i = 0; i < this._mergedCssSelectors.length; i++) {
selector = this._mergedCssSelectors[i];
if (selector.matches(view)) {
if (selector instanceof cssSelector.CssVisualStateSelector) {
matchedStateSelectors.push(selector);
} else {
selector.apply(view, observable.ValueSource.Css);
}
}
}
if (matchedStateSelectors.length > 0) {
var key_1 = "";
matchedStateSelectors.forEach(function(s) {
return key_1 += s.key + "|";
});
this._viewIdToKey[view._domId] = key_1;
if (!this._statesByKey[key_1]) {
this._createVisualsStatesForSelectors(key_1, matchedStateSelectors);
}
}
view.style._endUpdate();
};
StyleScope.prototype.getVisualStates = function(view) {
var key = this._viewIdToKey[view._domId];
if (key === undefined) {
return undefined;
}
return this._statesByKey[key];
};
StyleScope.prototype._createVisualsStatesForSelectors = function(key, matchedStateSelectors) {
var i, allStates = {}, stateSelector;
this._statesByKey[key] = allStates;
ensureVisualState();
var _loop_1 = function() {
stateSelector = matchedStateSelectors[i];
var visualState = allStates[stateSelector.state];
if (!visualState) {
visualState = new vs.VisualState();
allStates[stateSelector.state] = visualState;
}
if (stateSelector.animations && stateSelector.animations.length > 0) {
visualState.animatedSelectors.push(stateSelector);
} else {
stateSelector.eachSetter(function(property, value) {
visualState.setters[property.name] = value;
});
}
};
for (i = 0; i < matchedStateSelectors.length; i++) {
_loop_1();
}
};
StyleScope.createSelectorsFromSyntaxTree = function(ast, keyframes) {
var result = [];
var rules = ast.stylesheet.rules;
var rule;
var i;
var j;
for (i = 0; i < rules.length; i++) {
rule = rules[i];
if (rule.type === "rule") {
var filteredDeclarations = [];
if (rule.declarations) {
for (j = 0; j < rule.declarations.length; j++) {
var declaration = rule.declarations[j];
if (declaration.type === "declaration") {
filteredDeclarations.push({
property: declaration.property.toLowerCase(),
value: declaration.value
});
}
}
}
for (j = 0; j < rule.selectors.length; j++) {
result.push(cssSelector.createSelector(rule.selectors[j], filteredDeclarations));
}
} else if (rule.type === "keyframes") {
keyframes[rule.name] = rule;
}
}
return result;
};
StyleScope.prototype._reset = function() {
this._statesByKey = {};
this._viewIdToKey = {};
};
StyleScope.prototype._applyKeyframesOnSelectors = function() {
for (var i = this._mergedCssSelectors.length - 1; i >= 0; i--) {
var selector = this._mergedCssSelectors[i];
if (selector.animations !== undefined) {
for (var _i = 0, _a = selector.animations; _i < _a.length; _i++) {
var animation = _a[_i];
var keyframe = this._keyframes[animation.name];
if (keyframe !== undefined) {
animation.keyframes = cssAnimationParser.CssAnimationParser.keyframesArrayFromCSS(keyframe);
}
}
}
}
};
return StyleScope;
}();
exports.StyleScope = StyleScope;
function applyInlineSyle(view, style) {
try {
var syntaxTree = cssParser.parse("local { " + style + " }", undefined);
var filteredDeclarations = syntaxTree.stylesheet.rules[0].declarations.filter(function(val, i, arr) {
return val.type === "declaration";
});
cssSelector.applyInlineSyle(view, filteredDeclarations);
} catch (ex) {
trace.write("Applying local style failed: " + ex, trace.categories.Error, trace.messageType.error);
}
}
exports.applyInlineSyle = applyInlineSyle;
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(34);
var trace = __webpack_require__(30);
var style_property_1 = __webpack_require__(35);
var types = __webpack_require__(14);
var utils = __webpack_require__(22);
var keyframeAnimation = __webpack_require__(36);
var cssAnimationParser = __webpack_require__(37);
var special_properties_1 = __webpack_require__(39);
var ID_SPECIFICITY = 1e6;
var ATTR_SPECIFITY = 1e4;
var CLASS_SPECIFICITY = 100;
var TYPE_SPECIFICITY = 1;
var CssSelector = function() {
function CssSelector(expression, declarations) {
if (expression) {
var leftSquareBracketIndex = expression.indexOf(LSBRACKET);
if (leftSquareBracketIndex >= 0) {
var paramsRegex = /\[\s*(.*)\s*\]/;
var attrParams = paramsRegex.exec(expression);
if (attrParams && attrParams.length > 1) {
this._attrExpression = attrParams[1].trim();
}
this._expression = expression.substr(0, leftSquareBracketIndex);
} else {
this._expression = expression;
}
}
this._declarations = declarations;
this.animations = cssAnimationParser.CssAnimationParser.keyframeAnimationsFromCSSDeclarations(declarations);
}
Object.defineProperty(CssSelector.prototype, "expression", {
get: function() {
return this._expression;
},
enumerable: true,
configurable: true
});
Object.defineProperty(CssSelector.prototype, "attrExpression", {
get: function() {
return this._attrExpression;
},
enumerable: true,
configurable: true
});
Object.defineProperty(CssSelector.prototype, "declarations", {
get: function() {
return this._declarations;
},
enumerable: true,
configurable: true
});
Object.defineProperty(CssSelector.prototype, "specificity", {
get: function() {
throw "Specificity property is abstract";
},
enumerable: true,
configurable: true
});
Object.defineProperty(CssSelector.prototype, "valueSourceModifier", {
get: function() {
return observable.ValueSource.Css;
},
enumerable: true,
configurable: true
});
CssSelector.prototype.matches = function(view) {
return false;
};
CssSelector.prototype.apply = function(view, valueSourceModifier) {
var modifier = valueSourceModifier || this.valueSourceModifier;
this.eachSetter(function(property, value) {
if (types.isString(property)) {
var propertyName = property;
var attrHandled = false;
var specialSetter = special_properties_1.getSpecialPropertySetter(propertyName);
if (!attrHandled && specialSetter) {
specialSetter(view, value);
attrHandled = true;
}
if (!attrHandled && propertyName in view) {
view[propertyName] = utils.convertString(value);
}
} else {
var resolvedProperty = property;
try {
view.style._setValue(resolvedProperty, value, modifier);
} catch (ex) {
trace.write("Error setting property: " + resolvedProperty.name + " view: " + view + " value: " + value + " " + ex, trace.categories.Style, trace.messageType.error);
}
}
});
view._unregisterAllAnimations();
if (this.animations && view.isLoaded && view._nativeView !== undefined) {
var _loop_1 = function(animationInfo) {
var animation = keyframeAnimation.KeyframeAnimation.keyframeAnimationFromInfo(animationInfo, modifier);
if (animation) {
view._registerAnimation(animation);
animation.play(view).then(function() {
view._unregisterAnimation(animation);
}).catch(function(e) {
view._unregisterAnimation(animation);
});
}
};
for (var _i = 0, _a = this.animations; _i < _a.length; _i++) {
var animationInfo = _a[_i];
_loop_1(animationInfo);
}
}
};
CssSelector.prototype.eachSetter = function(callback) {
for (var i = 0; i < this._declarations.length; i++) {
var declaration = this._declarations[i];
var name_1 = declaration.property;
var resolvedValue = declaration.value;
style_property_1.withStyleProperty(name_1, resolvedValue, callback);
}
};
Object.defineProperty(CssSelector.prototype, "declarationText", {
get: function() {
return this.declarations.map(function(declaration) {
return declaration.property + ": " + declaration.value;
}).join("; ");
},
enumerable: true,
configurable: true
});
Object.defineProperty(CssSelector.prototype, "attrExpressionText", {
get: function() {
if (this.attrExpression) {
return "[" + this.attrExpression + "]";
} else {
return "";
}
},
enumerable: true,
configurable: true
});
return CssSelector;
}();
exports.CssSelector = CssSelector;
var CssTypeSelector = function(_super) {
__extends(CssTypeSelector, _super);
function CssTypeSelector() {
_super.apply(this, arguments);
}
Object.defineProperty(CssTypeSelector.prototype, "specificity", {
get: function() {
var result = TYPE_SPECIFICITY;
var dotIndex = this.expression.indexOf(DOT);
if (dotIndex > -1) {
result += CLASS_SPECIFICITY;
}
return result;
},
enumerable: true,
configurable: true
});
CssTypeSelector.prototype.matches = function(view) {
var result = matchesType(this.expression, view);
if (result && this.attrExpression) {
return matchesAttr(this.attrExpression, view);
}
return result;
};
CssTypeSelector.prototype.toString = function() {
return "CssTypeSelector " + this.expression + this.attrExpressionText + " { " + this.declarationText + " }";
};
return CssTypeSelector;
}(CssSelector);
function matchesType(expression, view) {
var exprArr = expression.split(".");
var exprTypeName = exprArr[0];
var exprClassName = exprArr[1];
var typeCheck = exprTypeName.toLowerCase() === view.typeName.toLowerCase() || exprTypeName.toLowerCase() === view.typeName.split(/(?=[A-Z])/).join("-").toLowerCase();
if (typeCheck) {
if (exprClassName) {
return view._cssClasses.some(function(cssClass, i, arr) {
return cssClass === exprClassName;
});
} else {
return typeCheck;
}
} else {
return false;
}
}
var CssIdSelector = function(_super) {
__extends(CssIdSelector, _super);
function CssIdSelector() {
_super.apply(this, arguments);
}
Object.defineProperty(CssIdSelector.prototype, "specificity", {
get: function() {
return ID_SPECIFICITY;
},
enumerable: true,
configurable: true
});
CssIdSelector.prototype.matches = function(view) {
var result = this.expression === view.id;
if (result && this.attrExpression) {
return matchesAttr(this.attrExpression, view);
}
return result;
};
CssIdSelector.prototype.toString = function() {
return "CssIdSelector " + this.expression + this.attrExpressionText + " { " + this.declarationText + " }";
};
return CssIdSelector;
}(CssSelector);
var CssClassSelector = function(_super) {
__extends(CssClassSelector, _super);
function CssClassSelector() {
_super.apply(this, arguments);
}
Object.defineProperty(CssClassSelector.prototype, "specificity", {
get: function() {
return CLASS_SPECIFICITY;
},
enumerable: true,
configurable: true
});
CssClassSelector.prototype.matches = function(view) {
var expectedClass = this.expression;
var result = view._cssClasses.some(function(cssClass, i, arr) {
return cssClass === expectedClass;
});
if (result && this.attrExpression) {
return matchesAttr(this.attrExpression, view);
}
return result;
};
CssClassSelector.prototype.toString = function() {
return "CssClassSelector " + this.expression + this.attrExpressionText + " { " + this.declarationText + " }";
};
return CssClassSelector;
}(CssSelector);
var CssCompositeSelector = function(_super) {
__extends(CssCompositeSelector, _super);
function CssCompositeSelector(expr, declarations) {
_super.call(this, expr, declarations);
var expressions = this.splitExpression(expr);
var onlyParent = false;
this.parentCssSelectors = [];
for (var i = expressions.length - 1; i >= 0; i--) {
if (expressions[i].trim() === GTHAN) {
onlyParent = true;
continue;
}
this.parentCssSelectors.push({
selector: createSelector(expressions[i].trim(), null),
onlyDirectParent: onlyParent
});
onlyParent = false;
}
}
Object.defineProperty(CssCompositeSelector.prototype, "specificity", {
get: function() {
var result = 0;
for (var i = 0; i < this.parentCssSelectors.length; i++) {
result += this.parentCssSelectors[i].selector.specificity;
}
return result;
},
enumerable: true,
configurable: true
});
CssCompositeSelector.prototype.splitExpression = function(expression) {
var result = [];
var tempArr = [];
var validSpace = true;
for (var i = 0; i < expression.length; i++) {
if (expression[i] === LSBRACKET) {
validSpace = false;
}
if (expression[i] === RSBRACKET) {
validSpace = true;
}
if (expression[i] === SPACE && validSpace || expression[i] === GTHAN) {
if (tempArr.length > 0) {
result.push(tempArr.join(""));
tempArr = [];
}
if (expression[i] === GTHAN) {
result.push(GTHAN);
}
continue;
}
tempArr.push(expression[i]);
}
if (tempArr.length > 0) {
result.push(tempArr.join(""));
}
return result;
};
CssCompositeSelector.prototype.matches = function(view) {
var result = this.parentCssSelectors[0].selector.matches(view);
if (!result) {
return result;
}
var tempView = view.parent;
for (var i = 1; i < this.parentCssSelectors.length; i++) {
var parentCounter = 0;
while (tempView && parentCounter === 0) {
result = this.parentCssSelectors[i].selector.matches(tempView);
if (result) {
tempView = tempView.parent;
break;
}
if (this.parentCssSelectors[i].onlyDirectParent) {
parentCounter++;
}
tempView = tempView.parent;
}
if (!result) {
break;
}
}
return result;
};
CssCompositeSelector.prototype.toString = function() {
return "CssCompositeSelector " + this.expression + this.attrExpressionText + " { " + this.declarationText + " }";
};
return CssCompositeSelector;
}(CssSelector);
var CssAttrSelector = function(_super) {
__extends(CssAttrSelector, _super);
function CssAttrSelector() {
_super.apply(this, arguments);
}
Object.defineProperty(CssAttrSelector.prototype, "specificity", {
get: function() {
return ATTR_SPECIFITY;
},
enumerable: true,
configurable: true
});
CssAttrSelector.prototype.matches = function(view) {
return matchesAttr(this.attrExpression, view);
};
CssAttrSelector.prototype.toString = function() {
return "CssAttrSelector " + this.expression + this.attrExpressionText + " { " + this.declarationText + " }";
};
return CssAttrSelector;
}(CssSelector);
function matchesAttr(attrExpression, view) {
var equalSignIndex = attrExpression.indexOf(EQUAL);
if (equalSignIndex > 0) {
var nameValueRegex = /(.*[^~|\^\$\*])[~|\^\$\*]?=(.*)/;
var nameValueRegexRes = nameValueRegex.exec(attrExpression);
var attrName = void 0;
var attrValue = void 0;
if (nameValueRegexRes && nameValueRegexRes.length > 2) {
attrName = nameValueRegexRes[1].trim();
attrValue = nameValueRegexRes[2].trim().replace(/^(["'])*(.*)\1$/, "$2");
}
var escapedAttrValue = utils.escapeRegexSymbols(attrValue);
var attrCheckRegex = void 0;
switch (attrExpression.charAt(equalSignIndex - 1)) {
case "~":
attrCheckRegex = new RegExp("(^|[^a-zA-Z-])" + escapedAttrValue + "([^a-zA-Z-]|$)");
break;

case "|":
attrCheckRegex = new RegExp("^" + escapedAttrValue + "\\b");
break;

case "^":
attrCheckRegex = new RegExp("^" + escapedAttrValue);
break;

case "$":
attrCheckRegex = new RegExp(escapedAttrValue + "$");
break;

case "*":
attrCheckRegex = new RegExp(escapedAttrValue);
break;

default:
attrCheckRegex = new RegExp("^" + escapedAttrValue + "$");
break;
}
return !types.isNullOrUndefined(view[attrName]) && attrCheckRegex.test(view[attrName] + "");
} else {
return !types.isNullOrUndefined(view[attrExpression]);
}
}
var CssVisualStateSelector = function(_super) {
__extends(CssVisualStateSelector, _super);
function CssVisualStateSelector(expression, declarations) {
_super.call(this, expression, declarations);
var args = expression.split(COLON);
this._key = args[0];
this._state = args[1];
if (this._key.charAt(0) === HASH) {
this._match = this._key.substring(1);
this._isById = true;
} else if (this._key.charAt(0) === DOT) {
this._match = this._key.substring(1);
this._isByClass = true;
} else if (this._key.charAt(0) === LSBRACKET) {
this._match = this._key;
this._isByAttr = true;
} else if (this._key.length > 0) {
this._match = this._key;
this._isByType = true;
}
}
Object.defineProperty(CssVisualStateSelector.prototype, "specificity", {
get: function() {
return (this._isById ? ID_SPECIFICITY : 0) + (this._isByAttr ? ATTR_SPECIFITY : 0) + (this._isByClass ? CLASS_SPECIFICITY : 0) + (this._isByType ? TYPE_SPECIFICITY : 0);
},
enumerable: true,
configurable: true
});
Object.defineProperty(CssVisualStateSelector.prototype, "key", {
get: function() {
return this._key;
},
enumerable: true,
configurable: true
});
Object.defineProperty(CssVisualStateSelector.prototype, "state", {
get: function() {
return this._state;
},
enumerable: true,
configurable: true
});
Object.defineProperty(CssVisualStateSelector.prototype, "valueSourceModifier", {
get: function() {
return observable.ValueSource.VisualState;
},
enumerable: true,
configurable: true
});
CssVisualStateSelector.prototype.matches = function(view) {
var matches = true;
if (this._isById) {
matches = this._match === view.id;
}
if (this._isByClass) {
var expectedClass_1 = this._match;
matches = view._cssClasses.some(function(cssClass, i, arr) {
return cssClass === expectedClass_1;
});
}
if (this._isByType) {
matches = matchesType(this._match, view);
}
if (this._isByAttr) {
matches = matchesAttr(this._key, view);
}
return matches;
};
CssVisualStateSelector.prototype.toString = function() {
return "CssVisualStateSelector " + this.expression + this.attrExpressionText + " { " + this.declarationText + " }";
};
return CssVisualStateSelector;
}(CssSelector);
exports.CssVisualStateSelector = CssVisualStateSelector;
var HASH = "#";
var DOT = ".";
var COLON = ":";
var SPACE = " ";
var GTHAN = ">";
var LSBRACKET = "[";
var RSBRACKET = "]";
var EQUAL = "=";
function createSelector(expression, declarations) {
var goodExpr = expression.replace(/>/g, " > ").replace(/\s\s+/g, " ");
var spaceIndex = goodExpr.indexOf(SPACE);
if (spaceIndex >= 0) {
return new CssCompositeSelector(goodExpr, declarations);
}
var leftSquareBracketIndex = goodExpr.indexOf(LSBRACKET);
if (leftSquareBracketIndex === 0) {
return new CssAttrSelector(goodExpr, declarations);
}
var colonIndex = goodExpr.indexOf(COLON);
if (colonIndex >= 0) {
return new CssVisualStateSelector(goodExpr, declarations);
}
if (goodExpr.charAt(0) === HASH) {
return new CssIdSelector(goodExpr.substring(1), declarations);
}
if (goodExpr.charAt(0) === DOT) {
return new CssClassSelector(goodExpr.substring(1), declarations);
}
return new CssTypeSelector(goodExpr, declarations);
}
exports.createSelector = createSelector;
var InlineStyleSelector = function(_super) {
__extends(InlineStyleSelector, _super);
function InlineStyleSelector(declarations) {
_super.call(this, undefined, declarations);
}
InlineStyleSelector.prototype.apply = function(view) {
this.eachSetter(function(property, value) {
var resolvedProperty = property;
view.style._setValue(resolvedProperty, value, observable.ValueSource.Local);
});
};
InlineStyleSelector.prototype.toString = function() {
return "InlineStyleSelector " + this.expression + this.attrExpressionText + " { " + this.declarationText + " }";
};
return InlineStyleSelector;
}(CssSelector);
function applyInlineSyle(view, declarations) {
var localStyleSelector = new InlineStyleSelector(declarations);
localStyleSelector.apply(view);
}
exports.applyInlineSyle = applyInlineSyle;
}, function(module, exports, __webpack_require__) {
var observable_1 = __webpack_require__(18);
var types = __webpack_require__(14);
var propertyFromKey = {};
var propertyIdCounter = 0;
function generatePropertyKey(name, ownerType, validate) {
if (validate) {
validateRegisterParameters(name, ownerType);
}
return ownerType + "." + name;
}
function validateRegisterParameters(name, ownerType) {
if (name == null || name.trim().length === 0) {
throw new Error("Name should not be null or empty string.");
}
if (ownerType == null || ownerType.trim().length === 0) {
throw new Error("OwnerType should not be null or empty string.");
}
}
function getPropertyByNameAndType(name, owner) {
var result;
var key;
var classInfo = types.getClassInfo(owner);
while (classInfo) {
key = generatePropertyKey(name, classInfo.name);
result = propertyFromKey[key];
if (result) {
break;
}
classInfo = classInfo.baseClassInfo;
}
return result;
}
var PropertyMetadataSettings;
(function(PropertyMetadataSettings) {
PropertyMetadataSettings.None = 0;
PropertyMetadataSettings.AffectsLayout = 1;
PropertyMetadataSettings.AffectsStyle = 1 << 1;
PropertyMetadataSettings.Inheritable = 1 << 2;
})(PropertyMetadataSettings = exports.PropertyMetadataSettings || (exports.PropertyMetadataSettings = {}));
var ValueSource;
(function(ValueSource) {
ValueSource.Default = 0;
ValueSource.Inherited = 1;
ValueSource.Css = 2;
ValueSource.Local = 3;
ValueSource.VisualState = 4;
})(ValueSource = exports.ValueSource || (exports.ValueSource = {}));
var PropertyMetadata = function() {
function PropertyMetadata(defaultValue, options, onChanged, onValidateValue, equalityComparer) {
this._defaultValue = defaultValue;
this._options = options;
if (types.isNullOrUndefined(this._options)) {
this._options = PropertyMetadataSettings.None;
}
this._onChanged = onChanged;
this._onValidateValue = onValidateValue;
this._equalityComparer = equalityComparer;
}
Object.defineProperty(PropertyMetadata.prototype, "defaultValue", {
get: function() {
return this._defaultValue;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyMetadata.prototype, "options", {
get: function() {
return this._options;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyMetadata.prototype, "onValueChanged", {
get: function() {
return this._onChanged;
},
set: function(value) {
this._onChanged = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyMetadata.prototype, "onValidateValue", {
get: function() {
return this._onValidateValue;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyMetadata.prototype, "equalityComparer", {
get: function() {
return this._equalityComparer;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyMetadata.prototype, "affectsLayout", {
get: function() {
return (this._options & PropertyMetadataSettings.AffectsLayout) === PropertyMetadataSettings.AffectsLayout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyMetadata.prototype, "affectsStyle", {
get: function() {
return (this._options & PropertyMetadataSettings.AffectsStyle) === PropertyMetadataSettings.AffectsStyle;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyMetadata.prototype, "inheritable", {
get: function() {
return (this._options & PropertyMetadataSettings.Inheritable) === PropertyMetadataSettings.Inheritable;
},
enumerable: true,
configurable: true
});
return PropertyMetadata;
}();
exports.PropertyMetadata = PropertyMetadata;
var Property = function() {
function Property(name, ownerType, metadata, valueConverter) {
this._key = generatePropertyKey(name, ownerType, true);
if (propertyFromKey[this._key]) {
throw new Error("Property " + name + " already registered for type " + ownerType + ".");
}
propertyFromKey[this._key] = this;
if (!metadata || !(metadata instanceof PropertyMetadata)) {
throw new Error("Expected valid PropertyMetadata instance.");
}
this._name = name;
this._ownerType = ownerType;
this._metadata = metadata;
this._id = propertyIdCounter++;
this._valueConverter = valueConverter;
}
Object.defineProperty(Property.prototype, "name", {
get: function() {
return this._name;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Property.prototype, "id", {
get: function() {
return this._id;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Property.prototype, "metadata", {
get: function() {
return this._metadata;
},
enumerable: true,
configurable: true
});
Property.prototype.isValidValue = function(value) {
if (this.metadata.onValidateValue) {
return this.metadata.onValidateValue(value);
}
return true;
};
Object.defineProperty(Property.prototype, "valueConverter", {
get: function() {
return this._valueConverter;
},
enumerable: true,
configurable: true
});
Property.prototype._getEffectiveValue = function(entry) {
if (types.isDefined(entry.localValue)) {
entry.valueSource = ValueSource.Local;
return entry.localValue;
}
if (types.isDefined(entry.inheritedValue)) {
entry.valueSource = ValueSource.Inherited;
return entry.inheritedValue;
}
entry.valueSource = ValueSource.Default;
return this.metadata.defaultValue;
};
return Property;
}();
exports.Property = Property;
var PropertyEntry = function() {
function PropertyEntry(property) {
this._property = property;
}
Object.defineProperty(PropertyEntry.prototype, "property", {
get: function() {
return this._property;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyEntry.prototype, "effectiveValue", {
get: function() {
if (!this._effectiveValue) {
this._effectiveValue = this._property._getEffectiveValue(this);
}
return this._effectiveValue;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyEntry.prototype, "valueSource", {
get: function() {
return this._valueSource;
},
set: function(value) {
this._valueSource = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyEntry.prototype, "localValue", {
get: function() {
return this._localValue;
},
set: function(value) {
this._localValue = value;
this._effectiveValue = undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyEntry.prototype, "inheritedValue", {
get: function() {
return this._inheritedValue;
},
set: function(value) {
this._inheritedValue = value;
this._effectiveValue = undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyEntry.prototype, "cssValue", {
get: function() {
return this._cssValue;
},
set: function(value) {
this._cssValue = value;
this._effectiveValue = undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PropertyEntry.prototype, "visualStateValue", {
get: function() {
return this._visualStateValue;
},
set: function(value) {
this._visualStateValue = value;
this._effectiveValue = undefined;
},
enumerable: true,
configurable: true
});
PropertyEntry.prototype.resetValue = function() {
this._valueSource = ValueSource.Default;
this._visualStateValue = undefined;
this._localValue = undefined;
this._cssValue = undefined;
this._inheritedValue = undefined;
this._effectiveValue = undefined;
};
return PropertyEntry;
}();
exports.PropertyEntry = PropertyEntry;
var defaultValueForPropertyPerType = new Map();
var DependencyObservable = function(_super) {
__extends(DependencyObservable, _super);
function DependencyObservable() {
_super.apply(this, arguments);
this._propertyEntries = {};
}
DependencyObservable.prototype.set = function(name, value) {
var property = getPropertyByNameAndType(name, this);
if (property) {
this._setValue(property, value, ValueSource.Local);
} else {
_super.prototype.set.call(this, name, value);
}
};
DependencyObservable.prototype.get = function(name) {
var property = getPropertyByNameAndType(name, this);
if (property) {
return this._getValue(property);
} else {
return _super.prototype.get.call(this, name);
}
};
DependencyObservable.prototype._setValue = function(property, value, source) {
var realValue = observable_1.WrappedValue.unwrap(value);
if (!property.isValidValue(realValue)) {
throw new Error("Invalid value " + realValue + " for property " + property.name);
}
if (types.isUndefined(source)) {
source = ValueSource.Local;
}
this._setValueInternal(property, value, source);
};
DependencyObservable.prototype._getValueSource = function(property) {
var entry = this._propertyEntries[property.id];
if (entry) {
return entry.valueSource;
}
return ValueSource.Default;
};
DependencyObservable.prototype._getValue = function(property) {
var entry = this._propertyEntries[property.id];
if (entry) {
return entry.effectiveValue;
} else if (property.defaultValueGetter) {
var view = this._view || this;
var key = types.getClass(view) + "." + property.id;
var defaultValue = defaultValueForPropertyPerType.get(key);
if (types.isUndefined(defaultValue) && view._nativeView) {
var defaultValueResult = property.defaultValueGetter(this);
defaultValue = defaultValueResult.result;
if (defaultValueResult.cacheable) {
defaultValueForPropertyPerType.set(key, defaultValue);
}
}
return defaultValue;
}
return property.metadata.defaultValue;
};
DependencyObservable.prototype._resetValue = function(property, source) {
if (!(property.id in this._propertyEntries)) {
return;
}
if (types.isDefined(source)) {
this._setValueInternal(property, undefined, source);
} else {
var currentValue = this._getValue(property);
delete this._propertyEntries[property.id];
var newValue = this._getValue(property);
var comparer = property.metadata.equalityComparer || this._defaultComparer;
if (!comparer(currentValue, newValue)) {
this._onPropertyChanged(property, currentValue, newValue);
}
}
};
DependencyObservable.prototype._onPropertyChanged = function(property, oldValue, newValue) {
var realNewValue = observable_1.WrappedValue.unwrap(newValue);
if (property.metadata.onValueChanged) {
property.metadata.onValueChanged({
object: this,
property: property,
eventName: observable_1.Observable.propertyChangeEvent,
newValue: realNewValue,
oldValue: oldValue
});
}
if (this.hasListeners(observable_1.Observable.propertyChangeEvent)) {
var changeData = _super.prototype._createPropertyChangeData.call(this, property.name, newValue);
this.notify(changeData);
}
var eventName = property.name + "Change";
if (this.hasListeners(eventName)) {
var ngChangedData = {
eventName: eventName,
propertyName: property.name,
object: this,
value: realNewValue
};
this.notify(ngChangedData);
}
};
DependencyObservable.prototype._eachSetProperty = function(callback) {
var i;
var key;
var entry;
var retVal;
var keys = Object.keys(this._propertyEntries);
for (i = 0; i < keys.length; i++) {
key = keys[i];
entry = this._propertyEntries[key];
retVal = callback(entry.property);
if (!retVal) {
break;
}
}
};
DependencyObservable.prototype.toString = function() {
return this.typeName;
};
DependencyObservable.prototype._setValueInternal = function(property, value, source) {
var realValue = observable_1.WrappedValue.unwrap(value);
if (types.isString(realValue) && property.valueConverter) {
realValue = property.valueConverter(realValue);
}
var entry = this._propertyEntries[property.id];
if (!entry) {
entry = new PropertyEntry(property);
this._propertyEntries[property.id] = entry;
}
var currentValue = entry.effectiveValue;
switch (source) {
case ValueSource.Css:
entry.cssValue = realValue;
break;

case ValueSource.Inherited:
entry.inheritedValue = realValue;
break;

case ValueSource.Local:
entry.localValue = realValue;
break;

case ValueSource.VisualState:
entry.visualStateValue = realValue;
break;
}
var comparer = property.metadata.equalityComparer || this._defaultComparer;
if (value && value.wrapped || !comparer(currentValue, entry.effectiveValue)) {
this._onPropertyChanged(property, currentValue, entry.effectiveValue);
}
};
DependencyObservable.prototype._defaultComparer = function(x, y) {
return x === y;
};
return DependencyObservable;
}(observable_1.Observable);
exports.DependencyObservable = DependencyObservable;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var observable = __webpack_require__(34);
var propertiesByName = {};
var propertiesByCssName = {};
var callbackByShorthandName = new Map();
var inheritableProperties = [];
function registerProperty(property) {
if (propertiesByCssName[property.cssName]) {
throw new Error("Property with name " + property.cssName + " is already registered!");
}
propertiesByCssName[property.cssName] = property;
propertiesByName[property.name] = property;
if (property.metadata.inheritable) {
inheritableProperties.push(property);
}
}
function withStyleProperty(name, value, resolvedCallback) {
var property = getPropertyByCssName(name);
if (property) {
resolvedCallback(property, value);
} else {
var pairs = getShorthandPairs(name, value);
if (pairs) {
for (var j = 0; j < pairs.length; j++) {
var pair = pairs[j];
resolvedCallback(pair.property, pair.value);
}
} else {
resolvedCallback(name, value);
}
}
}
exports.withStyleProperty = withStyleProperty;
function getShorthandPairs(name, value) {
var callback = callbackByShorthandName.get(name);
if (callback) {
return callback(value);
}
return undefined;
}
exports.getShorthandPairs = getShorthandPairs;
function registerShorthandCallback(name, callback) {
if (callbackByShorthandName.has(name)) {
throw new Error("Shorthand callback already registered for property: " + name);
}
callbackByShorthandName.set(name, callback);
}
exports.registerShorthandCallback = registerShorthandCallback;
function getPropertyByName(name) {
return propertiesByName[name];
}
exports.getPropertyByName = getPropertyByName;
function getPropertyByCssName(name) {
return propertiesByCssName[name];
}
exports.getPropertyByCssName = getPropertyByCssName;
function eachProperty(callback) {
types.verifyCallback(callback);
var i;
var key;
var keys = Object.keys(propertiesByName);
for (i = 0; i < keys.length; i++) {
key = keys[i];
callback(propertiesByName[key]);
}
}
exports.eachProperty = eachProperty;
function eachInheritableProperty(callback) {
types.verifyCallback(callback);
var i;
for (i = 0; i < inheritableProperties.length; i++) {
callback(inheritableProperties[i]);
}
}
exports.eachInheritableProperty = eachInheritableProperty;
var Property = function(_super) {
__extends(Property, _super);
function Property(name, cssName, metadata, valueConverter) {
_super.call(this, name, "Style", metadata, valueConverter);
this._cssName = cssName;
registerProperty(this);
}
Object.defineProperty(Property.prototype, "cssName", {
get: function() {
return this._cssName;
},
enumerable: true,
configurable: true
});
Property.prototype._getEffectiveValue = function(entry) {
if (types.isDefined(entry.visualStateValue)) {
entry.valueSource = observable.ValueSource.VisualState;
return entry.visualStateValue;
}
if (types.isDefined(entry.localValue)) {
entry.valueSource = observable.ValueSource.Local;
return entry.localValue;
}
if (types.isDefined(entry.cssValue)) {
entry.valueSource = observable.ValueSource.Css;
return entry.cssValue;
}
if (types.isDefined(entry.inheritedValue)) {
entry.valueSource = observable.ValueSource.Inherited;
return entry.inheritedValue;
}
entry.valueSource = observable.ValueSource.Default;
return this.metadata.defaultValue;
};
return Property;
}(observable.Property);
exports.Property = Property;
}, function(module, exports, __webpack_require__) {
var animationModule = __webpack_require__(25);
var enums = __webpack_require__(24);
var style = __webpack_require__(15);
var KeyframeDeclaration = function() {
function KeyframeDeclaration() {}
return KeyframeDeclaration;
}();
exports.KeyframeDeclaration = KeyframeDeclaration;
var KeyframeInfo = function() {
function KeyframeInfo() {}
return KeyframeInfo;
}();
exports.KeyframeInfo = KeyframeInfo;
var KeyframeAnimationInfo = function() {
function KeyframeAnimationInfo() {
this.name = "";
this.duration = .3;
this.delay = 0;
this.iterations = 1;
this.curve = enums.AnimationCurve.ease;
this.isForwards = false;
this.isReverse = false;
}
return KeyframeAnimationInfo;
}();
exports.KeyframeAnimationInfo = KeyframeAnimationInfo;
var KeyframeAnimation = function() {
function KeyframeAnimation() {
this.delay = 0;
this.iterations = 1;
}
KeyframeAnimation.keyframeAnimationFromInfo = function(info, valueSourceModifier) {
var animations = new Array();
var length = info.keyframes.length;
var startDuration = 0;
if (info.isReverse) {
for (var index_1 = length - 1; index_1 >= 0; index_1--) {
var keyframe = info.keyframes[index_1];
startDuration = KeyframeAnimation.parseKeyframe(info, keyframe, animations, startDuration, valueSourceModifier);
}
} else {
for (var index_2 = 0; index_2 < length; index_2++) {
var keyframe = info.keyframes[index_2];
startDuration = KeyframeAnimation.parseKeyframe(info, keyframe, animations, startDuration, valueSourceModifier);
}
for (var index_3 = length - 1; index_3 > 0; index_3--) {
var a1 = animations[index_3];
var a2 = animations[index_3 - 1];
if (a2["curve"] !== undefined) {
a1["curve"] = a2["curve"];
a2["curve"] = undefined;
}
}
}
for (var index_4 = 1; index_4 < length; index_4++) {
var a = animations[index_4];
if (a["curve"] === undefined) {
a["curve"] = info.curve;
}
}
var animation = new KeyframeAnimation();
animation.delay = info.delay;
animation.iterations = info.iterations;
animation.animations = animations;
animation._isForwards = info.isForwards;
return animation;
};
KeyframeAnimation.parseKeyframe = function(info, keyframe, animations, startDuration, valueSourceModifier) {
var animation = {};
for (var _i = 0, _a = keyframe.declarations; _i < _a.length; _i++) {
var declaration = _a[_i];
animation[declaration.property] = declaration.value;
}
var duration = keyframe.duration;
if (duration === 0) {
duration = .01;
} else {
duration = info.duration * duration - startDuration;
startDuration += duration;
}
animation["duration"] = info.isReverse ? info.duration - duration : duration;
animation["curve"] = keyframe.curve;
animation["forceLayer"] = true;
animation["valueSource"] = valueSourceModifier;
animations.push(animation);
return startDuration;
};
Object.defineProperty(KeyframeAnimation.prototype, "isPlaying", {
get: function() {
return this._isPlaying;
},
enumerable: true,
configurable: true
});
KeyframeAnimation.prototype.cancel = function() {
if (this._isPlaying) {
this._isPlaying = false;
for (var i = this._nativeAnimations.length - 1; i >= 0; i--) {
var animation = this._nativeAnimations[i];
if (animation.isPlaying) {
animation.cancel();
}
}
this._rejectAnimationFinishedPromise();
}
};
KeyframeAnimation.prototype.play = function(view) {
var _this = this;
if (this._isPlaying) {
throw new Error("Animation is already playing.");
}
var animationFinishedPromise = new Promise(function(resolve, reject) {
_this._resolve = resolve;
_this._reject = reject;
});
this._isPlaying = true;
this._nativeAnimations = new Array();
if (this.delay !== 0) {
var that_1 = this;
setTimeout(function() {
that_1.animate(view, 0, that_1.iterations);
}, that_1.delay, that_1);
} else {
this.animate(view, 0, this.iterations);
}
return animationFinishedPromise;
};
KeyframeAnimation.prototype.animate = function(view, index, iterations) {
var _this = this;
if (!this._isPlaying) {
return;
}
if (index === 0) {
var animation = this.animations[0];
var modifier = animation["valueSource"];
if ("backgroundColor" in animation) {
view.style._setValue(style.backgroundColorProperty, animation["backgroundColor"], modifier);
}
if ("scale" in animation) {
view.style._setValue(style.scaleXProperty, animation["scale"].x, modifier);
view.style._setValue(style.scaleYProperty, animation["scale"].y, modifier);
}
if ("translate" in animation) {
view.style._setValue(style.translateXProperty, animation["translate"].x, modifier);
view.style._setValue(style.translateYProperty, animation["translate"].y, modifier);
}
if ("rotate" in animation) {
view.style._setValue(style.rotateProperty, animation["rotate"], modifier);
}
if ("opacity" in animation) {
view.style._setValue(style.opacityProperty, animation["opacity"], modifier);
}
var that_2 = this;
setTimeout(function() {
that_2.animate(view, 1, iterations);
}, 1, that_2);
} else if (index < 0 || index >= this.animations.length) {
iterations -= 1;
if (iterations > 0) {
this.animate(view, 0, iterations);
} else {
if (this._isForwards === false) {
var animation = this.animations[this.animations.length - 1];
var modifier = animation["valueSource"];
if ("backgroundColor" in animation) {
view.style._resetValue(style.backgroundColorProperty, modifier);
}
if ("scale" in animation) {
view.style._resetValue(style.scaleXProperty, modifier);
view.style._resetValue(style.scaleYProperty, modifier);
}
if ("translate" in animation) {
view.style._resetValue(style.translateXProperty, modifier);
view.style._resetValue(style.translateYProperty, modifier);
}
if ("rotate" in animation) {
view.style._resetValue(style.rotateProperty, modifier);
}
if ("opacity" in animation) {
view.style._resetValue(style.opacityProperty, modifier);
}
}
this._resolveAnimationFinishedPromise();
}
} else {
var animationDef = this.animations[index];
animationDef.target = view;
var animation = new animationModule.Animation([ animationDef ]);
animation.play().then(function() {
_this.animate(view, index + 1, iterations);
});
this._nativeAnimations.push(animation);
}
};
KeyframeAnimation.prototype._resolveAnimationFinishedPromise = function() {
this._nativeAnimations = new Array();
this._isPlaying = false;
this._resolve();
};
KeyframeAnimation.prototype._rejectAnimationFinishedPromise = function() {
this._nativeAnimations = new Array();
this._isPlaying = false;
this._reject(new Error("Animation cancelled."));
};
return KeyframeAnimation;
}();
exports.KeyframeAnimation = KeyframeAnimation;
}, function(module, exports, __webpack_require__) {
var keyframeAnimationModule = __webpack_require__(36);
var converters = __webpack_require__(38);
var types = __webpack_require__(14);
var colorModule = __webpack_require__(27);
var styleProperty = __webpack_require__(35);
var animationProperties = {
"animation-name": function(info, declaration) {
return info.name = declaration.value;
},
"animation-duration": function(info, declaration) {
return info.duration = converters.timeConverter(declaration.value);
},
"animation-delay": function(info, declaration) {
return info.delay = converters.timeConverter(declaration.value);
},
"animation-timing-function": function(info, declaration) {
return info.curve = converters.animationTimingFunctionConverter(declaration.value);
},
"animation-iteration-count": function(info, declaration) {
return declaration.value === "infinite" ? info.iterations = Number.MAX_VALUE : info.iterations = converters.numberConverter(declaration.value);
},
"animation-direction": function(info, declaration) {
return info.isReverse = declaration.value === "reverse";
},
"animation-fill-mode": function(info, declaration) {
return info.isForwards = declaration.value === "forwards";
}
};
var CssAnimationParser = function() {
function CssAnimationParser() {}
CssAnimationParser.keyframeAnimationsFromCSSDeclarations = function(declarations) {
var animations = new Array();
var animationInfo = undefined;
if (declarations === null || declarations === undefined) {
return undefined;
}
for (var _i = 0, declarations_1 = declarations; _i < declarations_1.length; _i++) {
var declaration = declarations_1[_i];
if (declaration.property === "animation") {
CssAnimationParser.keyframeAnimationsFromCSSProperty(declaration.value, animations);
} else {
var propertyHandler = animationProperties[declaration.property];
if (propertyHandler) {
if (animationInfo === undefined) {
animationInfo = new keyframeAnimationModule.KeyframeAnimationInfo();
animations.push(animationInfo);
}
propertyHandler(animationInfo, declaration);
}
}
}
return animations.length === 0 ? undefined : animations;
};
CssAnimationParser.keyframesArrayFromCSS = function(cssKeyframes) {
var parsedKeyframes = new Array();
for (var _i = 0, _a = cssKeyframes.keyframes; _i < _a.length; _i++) {
var keyframe = _a[_i];
var declarations = CssAnimationParser.parseKeyframeDeclarations(keyframe);
for (var _b = 0, _c = keyframe.values; _b < _c.length; _b++) {
var time_1 = _c[_b];
if (time_1 === "from") {
time_1 = 0;
} else if (time_1 === "to") {
time_1 = 1;
} else {
time_1 = parseFloat(time_1) / 100;
if (time_1 < 0) {
time_1 = 0;
}
if (time_1 > 100) {
time_1 = 100;
}
}
var current = parsedKeyframes[time_1];
if (current === undefined) {
current = {};
current.duration = time_1;
parsedKeyframes[time_1] = current;
}
for (var _d = 0, _e = keyframe.declarations; _d < _e.length; _d++) {
var declaration = _e[_d];
if (declaration.property === "animation-timing-function") {
current.curve = converters.animationTimingFunctionConverter(declaration.value);
}
}
current.declarations = declarations;
}
}
var array = new Array();
for (var parsedKeyframe in parsedKeyframes) {
array.push(parsedKeyframes[parsedKeyframe]);
}
array.sort(function(a, b) {
return a.duration - b.duration;
});
return array;
};
CssAnimationParser.keyframeAnimationsFromCSSProperty = function(value, animations) {
if (types.isString(value)) {
var values = value.split(/[,]+/);
for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
var parsedValue = values_1[_i];
var animationInfo = new keyframeAnimationModule.KeyframeAnimationInfo();
var arr = parsedValue.trim().split(/[ ]+/);
if (arr.length > 0) {
animationInfo.name = arr[0];
}
if (arr.length > 1) {
animationInfo.duration = converters.timeConverter(arr[1]);
}
if (arr.length > 2) {
animationInfo.curve = converters.animationTimingFunctionConverter(arr[2]);
}
if (arr.length > 3) {
animationInfo.delay = converters.timeConverter(arr[3]);
}
if (arr.length > 4) {
animationInfo.iterations = parseInt(arr[4]);
}
if (arr.length > 5) {
animationInfo.isReverse = arr[4] === "reverse";
}
if (arr.length > 6) {
animationInfo.isForwards = arr[5] === "forwards";
}
if (arr.length > 7) {
throw new Error("Invalid value for animation: " + value);
}
animations.push(animationInfo);
}
}
};
CssAnimationParser.parseKeyframeDeclarations = function(keyframe) {
var declarations = {};
var transforms = {
scale: undefined,
translate: undefined
};
for (var _i = 0, _a = keyframe.declarations; _i < _a.length; _i++) {
var declaration = _a[_i];
var property = styleProperty.getPropertyByCssName(declaration.property);
if (property) {
var val = declaration.value;
if (property.name === "opacity") {
val = parseFloat(val);
} else if (property.name === "backgroundColor") {
val = new colorModule.Color(val);
}
declarations[property.name] = val;
} else {
var pairs = styleProperty.getShorthandPairs(declaration.property, declaration.value);
if (pairs) {
for (var j = 0; j < pairs.length; j++) {
var pair = pairs[j];
if (!this.preprocessAnimationValues(pair, transforms)) {
declarations[pair.property.name] = pair.value;
}
}
}
}
}
if (transforms.scale !== undefined) {
declarations["scale"] = transforms.scale;
}
if (transforms.translate !== undefined) {
declarations["translate"] = transforms.translate;
}
var array = new Array();
for (var declaration in declarations) {
var keyframeDeclaration = {};
keyframeDeclaration.property = declaration;
keyframeDeclaration.value = declarations[declaration];
array.push(keyframeDeclaration);
}
return array;
};
CssAnimationParser.preprocessAnimationValues = function(pair, transforms) {
if (pair.property.name === "scaleX") {
if (transforms.scale === undefined) {
transforms.scale = {
x: 1,
y: 1
};
}
transforms.scale.x = pair.value;
return true;
}
if (pair.property.name === "scaleY") {
if (transforms.scale === undefined) {
transforms.scale = {
x: 1,
y: 1
};
}
transforms.scale.y = pair.value;
return true;
}
if (pair.property.name === "translateX") {
if (transforms.translate === undefined) {
transforms.translate = {
x: 0,
y: 0
};
}
transforms.translate.x = pair.value;
return true;
}
if (pair.property.name === "translateY") {
if (transforms.translate === undefined) {
transforms.translate = {
x: 0,
y: 0
};
}
transforms.translate.y = pair.value;
return true;
}
return false;
};
return CssAnimationParser;
}();
exports.CssAnimationParser = CssAnimationParser;
}, function(module, exports, __webpack_require__) {
var enums = __webpack_require__(24);
var color = __webpack_require__(27);
var types = __webpack_require__(14);
function colorConverter(value) {
return new color.Color(value);
}
exports.colorConverter = colorConverter;
function floatConverter(value) {
var result = parseFloat(value);
return result;
}
exports.floatConverter = floatConverter;
function fontSizeConverter(value) {
return floatConverter(value);
}
exports.fontSizeConverter = fontSizeConverter;
function textAlignConverter(value) {
switch (value) {
case enums.TextAlignment.left:
case enums.TextAlignment.center:
case enums.TextAlignment.right:
return value;

default:
throw new Error('CSS text-align "' + value + '" is not supported.');
}
}
exports.textAlignConverter = textAlignConverter;
function textDecorationConverter(value) {
var values = (value + "").split(" ");
if (values.indexOf(enums.TextDecoration.none) !== -1 || values.indexOf(enums.TextDecoration.underline) !== -1 || values.indexOf(enums.TextDecoration.lineThrough) !== -1) {
return value;
} else {
throw new Error('CSS text-decoration "' + value + '" is not supported.');
}
}
exports.textDecorationConverter = textDecorationConverter;
function whiteSpaceConverter(value) {
switch (value) {
case enums.WhiteSpace.normal:
case enums.WhiteSpace.nowrap:
return value;

default:
throw new Error('CSS white-space "' + value + '" is not supported.');
}
}
exports.whiteSpaceConverter = whiteSpaceConverter;
function textTransformConverter(value) {
switch (value) {
case enums.TextTransform.none:
case enums.TextTransform.uppercase:
case enums.TextTransform.lowercase:
case enums.TextTransform.capitalize:
return value;

default:
throw new Error('CSS text-transform "' + value + '" is not supported.');
}
}
exports.textTransformConverter = textTransformConverter;
exports.numberConverter = parseFloat;
function visibilityConverter(value) {
if (value.toLowerCase() === enums.Visibility.collapsed) {
return enums.Visibility.collapsed;
} else if (value.toLowerCase() === enums.Visibility.collapse) {
return enums.Visibility.collapse;
}
return enums.Visibility.visible;
}
exports.visibilityConverter = visibilityConverter;
function opacityConverter(value) {
var result = parseFloat(value);
result = Math.max(0, result);
result = Math.min(1, result);
return result;
}
exports.opacityConverter = opacityConverter;
function timeConverter(value) {
var result = parseFloat(value);
if (value.indexOf("ms") === -1) {
result = result * 1e3;
}
result = Math.max(0, result);
return result;
}
exports.timeConverter = timeConverter;
function bezieArgumentConverter(value) {
var result = parseFloat(value);
result = Math.max(0, result);
result = Math.min(1, result);
return result;
}
exports.bezieArgumentConverter = bezieArgumentConverter;
function animationTimingFunctionConverter(value) {
var result = enums.AnimationCurve.ease;
switch (value) {
case "ease":
result = enums.AnimationCurve.ease;
break;

case "linear":
result = enums.AnimationCurve.linear;
break;

case "ease-in":
result = enums.AnimationCurve.easeIn;
break;

case "ease-out":
result = enums.AnimationCurve.easeOut;
break;

case "ease-in-out":
result = enums.AnimationCurve.easeInOut;
break;

case "spring":
result = enums.AnimationCurve.spring;
break;

default:
if (value.indexOf("cubic-bezier(") === 0) {
var bezierArr = value.substring(13).split(/[,]+/);
if (bezierArr.length !== 4) {
throw new Error("Invalid value for animation: " + value);
}
result = enums.AnimationCurve.cubicBezier(bezieArgumentConverter(bezierArr[0]), bezieArgumentConverter(bezierArr[1]), bezieArgumentConverter(bezierArr[2]), bezieArgumentConverter(bezierArr[3]));
} else {
throw new Error("Invalid value for animation: " + value);
}
break;
}
return result;
}
exports.animationTimingFunctionConverter = animationTimingFunctionConverter;
function transformConverter(value) {
if (value === "none") {
var operations = {};
operations[value] = value;
return operations;
} else if (types.isString(value)) {
var operations = {};
var operator = "";
var pos = 0;
while (pos < value.length) {
if (value[pos] === " " || value[pos] === ",") {
pos++;
} else if (value[pos] === "(") {
var start = pos + 1;
while (pos < value.length && value[pos] !== ")") {
pos++;
}
var operand = value.substring(start, pos);
operations[operator] = operand.trim();
operator = "";
pos++;
} else {
operator += value[pos++];
}
}
return operations;
} else {
return undefined;
}
}
exports.transformConverter = transformConverter;
}, function(module, exports) {
var specialProperties = new Map();
function specialPropertyKey(name) {
return name.toLowerCase();
}
function registerSpecialProperty(name, setter) {
var propertyKey = specialPropertyKey(name);
if (specialProperties.has(propertyKey)) {
throw new Error("Property for " + propertyKey + " already registered");
} else {
specialProperties.set(propertyKey, setter);
}
}
exports.registerSpecialProperty = registerSpecialProperty;
function getSpecialPropertySetter(name) {
var propertyKey = specialPropertyKey(name);
return specialProperties.get(propertyKey);
}
exports.getSpecialPropertySetter = getSpecialPropertySetter;
}, function(module, exports, __webpack_require__) {
exports.parse = __webpack_require__(41);
}, function(module, exports) {
var commentre = /\/\*[^*]*\*+([^\/*][^*]*\*+)*\//g;
module.exports = function(css, options) {
options = options || {};
var lineno = 1;
var column = 1;
function updatePosition(str) {
var lines = str.match(/\n/g);
if (lines) lineno += lines.length;
var i = str.lastIndexOf("\n");
column = ~i ? str.length - i : column + str.length;
}
function position() {
var start = {
line: lineno,
column: column
};
return function(node) {
node.position = new Position(start);
whitespace();
return node;
};
}
function Position(start) {
this.start = start;
this.end = {
line: lineno,
column: column
};
this.source = options.source;
}
Position.prototype.content = css;
var errorsList = [];
function error(msg) {
var err = new Error(options.source + ":" + lineno + ":" + column + ": " + msg);
err.reason = msg;
err.filename = options.source;
err.line = lineno;
err.column = column;
err.source = css;
if (options.silent) {
errorsList.push(err);
} else {
throw err;
}
}
function stylesheet() {
var rulesList = rules();
return {
type: "stylesheet",
stylesheet: {
rules: rulesList,
parsingErrors: errorsList
}
};
}
function open() {
return match(/^{\s*/);
}
function close() {
return match(/^}/);
}
function rules() {
var node;
var rules = [];
whitespace();
comments(rules);
while (css.length && css.charAt(0) != "}" && (node = atrule() || rule())) {
if (node !== false) {
rules.push(node);
comments(rules);
}
}
return rules;
}
function match(re) {
var m = re.exec(css);
if (!m) return;
var str = m[0];
updatePosition(str);
css = css.slice(str.length);
return m;
}
function whitespace() {
match(/^\s*/);
}
function comments(rules) {
var c;
rules = rules || [];
while (c = comment()) {
if (c !== false) {
rules.push(c);
}
}
return rules;
}
function comment() {
var pos = position();
if ("/" != css.charAt(0) || "*" != css.charAt(1)) return;
var i = 2;
while ("" != css.charAt(i) && ("*" != css.charAt(i) || "/" != css.charAt(i + 1))) ++i;
i += 2;
if ("" === css.charAt(i - 1)) {
return error("End of comment missing");
}
var str = css.slice(2, i - 2);
column += 2;
updatePosition(str);
css = css.slice(i);
column += 2;
return pos({
type: "comment",
comment: str
});
}
function selector() {
var m = match(/^([^{]+)/);
if (!m) return;
return trim(m[0]).replace(/\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*\/+/g, "").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, function(m) {
return m.replace(/,/g, "‌");
}).split(/\s*(?![^(]*\)),\s*/).map(function(s) {
return s.replace(/\u200C/g, ",");
});
}
function declaration() {
var pos = position();
var prop = match(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
if (!prop) return;
prop = trim(prop[0]);
if (!match(/^:\s*/)) return error("property missing ':'");
var val = match(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/);
var ret = pos({
type: "declaration",
property: prop.replace(commentre, ""),
value: val ? trim(val[0]).replace(commentre, "") : ""
});
match(/^[;\s]*/);
return ret;
}
function declarations() {
var decls = [];
if (!open()) return error("missing '{'");
comments(decls);
var decl;
while (decl = declaration()) {
if (decl !== false) {
decls.push(decl);
comments(decls);
}
}
if (!close()) return error("missing '}'");
return decls;
}
function keyframe() {
var m;
var vals = [];
var pos = position();
while (m = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/)) {
vals.push(m[1]);
match(/^,\s*/);
}
if (!vals.length) return;
return pos({
type: "keyframe",
values: vals,
declarations: declarations()
});
}
function atkeyframes() {
var pos = position();
var m = match(/^@([-\w]+)?keyframes\s*/);
if (!m) return;
var vendor = m[1];
var m = match(/^([-\w]+)\s*/);
if (!m) return error("@keyframes missing name");
var name = m[1];
if (!open()) return error("@keyframes missing '{'");
var frame;
var frames = comments();
while (frame = keyframe()) {
frames.push(frame);
frames = frames.concat(comments());
}
if (!close()) return error("@keyframes missing '}'");
return pos({
type: "keyframes",
name: name,
vendor: vendor,
keyframes: frames
});
}
function atsupports() {
var pos = position();
var m = match(/^@supports *([^{]+)/);
if (!m) return;
var supports = trim(m[1]);
if (!open()) return error("@supports missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@supports missing '}'");
return pos({
type: "supports",
supports: supports,
rules: style
});
}
function athost() {
var pos = position();
var m = match(/^@host\s*/);
if (!m) return;
if (!open()) return error("@host missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@host missing '}'");
return pos({
type: "host",
rules: style
});
}
function atmedia() {
var pos = position();
var m = match(/^@media *([^{]+)/);
if (!m) return;
var media = trim(m[1]);
if (!open()) return error("@media missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@media missing '}'");
return pos({
type: "media",
media: media,
rules: style
});
}
function atcustommedia() {
var pos = position();
var m = match(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
if (!m) return;
return pos({
type: "custom-media",
name: trim(m[1]),
media: trim(m[2])
});
}
function atpage() {
var pos = position();
var m = match(/^@page */);
if (!m) return;
var sel = selector() || [];
if (!open()) return error("@page missing '{'");
var decls = comments();
var decl;
while (decl = declaration()) {
decls.push(decl);
decls = decls.concat(comments());
}
if (!close()) return error("@page missing '}'");
return pos({
type: "page",
selectors: sel,
declarations: decls
});
}
function atdocument() {
var pos = position();
var m = match(/^@([-\w]+)?document *([^{]+)/);
if (!m) return;
var vendor = trim(m[1]);
var doc = trim(m[2]);
if (!open()) return error("@document missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@document missing '}'");
return pos({
type: "document",
document: doc,
vendor: vendor,
rules: style
});
}
function atfontface() {
var pos = position();
var m = match(/^@font-face\s*/);
if (!m) return;
if (!open()) return error("@font-face missing '{'");
var decls = comments();
var decl;
while (decl = declaration()) {
decls.push(decl);
decls = decls.concat(comments());
}
if (!close()) return error("@font-face missing '}'");
return pos({
type: "font-face",
declarations: decls
});
}
var atimport = _compileAtrule("import");
var atcharset = _compileAtrule("charset");
var atnamespace = _compileAtrule("namespace");
function _compileAtrule(name) {
var re = new RegExp("^@" + name + "\\s*([^;]+);");
return function() {
var pos = position();
var m = match(re);
if (!m) return;
var ret = {
type: name
};
ret[name] = m[1].trim();
return pos(ret);
};
}
function atrule() {
if (css[0] != "@") return;
return atkeyframes() || atmedia() || atcustommedia() || atsupports() || atimport() || atcharset() || atnamespace() || atdocument() || atpage() || athost() || atfontface();
}
function rule() {
var pos = position();
var sel = selector();
if (!sel) return error("selector missing");
comments();
return pos({
type: "rule",
selectors: sel,
declarations: declarations()
});
}
return addParent(stylesheet());
};
function trim(str) {
return str ? str.replace(/^\s+|\s+$/g, "") : "";
}
function addParent(obj, parent) {
var isNode = obj && typeof obj.type === "string";
var childParent = isNode ? obj : parent;
for (var k in obj) {
var value = obj[k];
if (Array.isArray(value)) {
value.forEach(function(v) {
addParent(v, childParent);
});
} else if (value && typeof value === "object") {
addParent(value, childParent);
}
}
if (isNode) {
Object.defineProperty(obj, "parent", {
configurable: true,
writable: true,
enumerable: false,
value: parent || null
});
}
return obj;
}
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(34);
var styleProperty = __webpack_require__(35);
var visualStateConstants = __webpack_require__(43);
var VisualState = function() {
function VisualState() {
this._setters = {};
this._animatedSelectors = [];
}
Object.defineProperty(VisualState.prototype, "setters", {
get: function() {
return this._setters;
},
enumerable: true,
configurable: true
});
Object.defineProperty(VisualState.prototype, "animatedSelectors", {
get: function() {
return this._animatedSelectors;
},
enumerable: true,
configurable: true
});
return VisualState;
}();
exports.VisualState = VisualState;
function goToState(view, state) {
var root = view.page;
if (!root) {
return undefined;
}
var allStates = root._getStyleScope().getVisualStates(view);
if (!allStates) {
return undefined;
}
if (!(state in allStates)) {
state = visualStateConstants.Normal;
}
if (state !== view.visualState) {
var newState = allStates[state];
var oldState = allStates[view.visualState];
resetProperties(view, oldState, newState);
applyProperties(view, newState);
}
return state;
}
exports.goToState = goToState;
function resetProperties(view, oldState, newState) {
if (!oldState) {
return;
}
var property;
for (var name_1 in oldState.setters) {
if (newState && name_1 in newState.setters) {
continue;
}
property = styleProperty.getPropertyByName(name_1);
if (property) {
view.style._resetValue(property, observable.ValueSource.VisualState);
}
}
view._unregisterAllAnimations();
for (var _i = 0, _a = oldState.animatedSelectors; _i < _a.length; _i++) {
var selector = _a[_i];
for (var _b = 0, _c = selector.animations; _b < _c.length; _b++) {
var animationInfo = _c[_b];
for (var _d = 0, _e = animationInfo.keyframes; _d < _e.length; _d++) {
var keyframe = _e[_d];
for (var _f = 0, _g = keyframe.declarations; _f < _g.length; _f++) {
var declaration = _g[_f];
property = styleProperty.getPropertyByName(declaration.property);
if (property) {
view.style._resetValue(property, observable.ValueSource.VisualState);
}
}
}
}
}
}
function applyProperties(view, state) {
if (!state) {
return;
}
var property;
for (var name_2 in state.setters) {
property = styleProperty.getPropertyByName(name_2);
if (property) {
view.style._setValue(property, state.setters[name_2], observable.ValueSource.VisualState);
}
}
for (var _i = 0, _a = state.animatedSelectors; _i < _a.length; _i++) {
var selector = _a[_i];
selector.apply(view, observable.ValueSource.VisualState);
}
}
}, function(module, exports) {
exports.Normal = "normal";
exports.Hovered = "hovered";
exports.Pressed = "pressed";
}, function(module, exports, __webpack_require__) {
var fs = __webpack_require__(19);
var types = __webpack_require__(14);
var trace = __webpack_require__(30);
var platform = __webpack_require__(45);
var MIN_WH = "minWH";
var MIN_W = "minW";
var MIN_H = "minH";
var PRIORITY_STEP = 1e4;
var minWidthHeightQualifier = {
isMatch: function(value) {
return value.indexOf(MIN_WH) === 0;
},
getMatchValue: function(value, context) {
var numVal = parseInt(value.substr(MIN_WH.length));
if (isNaN(numVal)) {
return -1;
}
var actualLength = Math.min(context.width, context.height);
if (actualLength < numVal) {
return -1;
}
return PRIORITY_STEP - (actualLength - numVal);
}
};
var minWidthQualifier = {
isMatch: function(value) {
return value.indexOf(MIN_W) === 0 && value.indexOf(MIN_WH) < 0;
},
getMatchValue: function(value, context) {
var numVal = parseInt(value.substr(MIN_W.length));
if (isNaN(numVal)) {
return -1;
}
var actualWidth = context.width;
if (actualWidth < numVal) {
return -1;
}
return PRIORITY_STEP - (actualWidth - numVal);
}
};
var minHeightQualifier = {
isMatch: function(value) {
return value.indexOf(MIN_H) === 0 && value.indexOf(MIN_WH) < 0;
},
getMatchValue: function(value, context) {
var numVal = parseInt(value.substr(MIN_H.length));
if (isNaN(numVal)) {
return -1;
}
var actualHeight = context.height;
if (actualHeight < numVal) {
return -1;
}
return PRIORITY_STEP - (actualHeight - numVal);
}
};
var paltformQualifier = {
isMatch: function(value) {
return value === "android" || value === "ios";
},
getMatchValue: function(value, context) {
return value === context.os.toLowerCase() ? 1 : -1;
}
};
var orientationQualifier = {
isMatch: function(value) {
return value === "land" || value === "port";
},
getMatchValue: function(value, context) {
var isLandscape = context.width > context.height ? 1 : -1;
return value === "land" ? isLandscape : -isLandscape;
}
};
var supportedQualifiers = [ minWidthHeightQualifier, minWidthQualifier, minHeightQualifier, orientationQualifier, paltformQualifier ];
var FileNameResolver = function() {
function FileNameResolver(context) {
this._cache = {};
this._context = context;
}
FileNameResolver.prototype.resolveFileName = function(path, ext) {
var key = path + ext;
var result = this._cache[key];
if (types.isUndefined(result)) {
result = this.resolveFileNameImpl(path, ext);
this._cache[key] = result;
}
return result;
};
FileNameResolver.prototype.clearCache = function() {
this._cache = {};
};
FileNameResolver.prototype.resolveFileNameImpl = function(path, ext) {
var result = null;
path = fs.path.normalize(path);
ext = "." + ext;
var candidates = this.getFileCandidatesFromFolder(path, ext);
result = findFileMatch(path, ext, candidates, this._context);
trace.write('Resolved file name for "' + path + ext + '" result: ' + (result ? result : "no match found"), trace.categories.Navigation);
return result;
};
FileNameResolver.prototype.getFileCandidatesFromFolder = function(path, ext) {
var candidates = new Array();
var folderPath = path.substring(0, path.lastIndexOf(fs.path.separator) + 1);
if (fs.Folder.exists(folderPath)) {
var folder = fs.Folder.fromPath(folderPath);
folder.eachEntity(function(e) {
if (e instanceof fs.File) {
var file = e;
if (file.path.indexOf(path) === 0 && file.extension === ext) {
candidates.push(file.path);
}
}
return true;
});
} else {
trace.write("Could not find folder " + folderPath + " when loading " + path + ext, trace.categories.Navigation);
}
return candidates;
};
return FileNameResolver;
}();
exports.FileNameResolver = FileNameResolver;
function findFileMatch(path, ext, candidates, context) {
var bestValue = -1;
var result = null;
trace.write("Candidates for " + path + ext + ": " + candidates.join(", "), trace.categories.Navigation);
for (var i = 0; i < candidates.length; i++) {
var filePath = candidates[i];
var qualifiersStr = filePath.substr(path.length, filePath.length - path.length - ext.length);
var qualifiers = qualifiersStr.split(".");
var value = checkQualifiers(qualifiers, context);
if (value >= 0 && value > bestValue) {
bestValue = value;
result = candidates[i];
}
}
return result;
}
exports.findFileMatch = findFileMatch;
function checkQualifiers(qualifiers, context) {
var result = 0;
for (var i = 0; i < qualifiers.length; i++) {
if (qualifiers[i]) {
var value = checkQualifier(qualifiers[i], context);
if (value < 0) {
return -1;
}
result += value;
}
}
return result;
}
function checkQualifier(value, context) {
for (var i = 0; i < supportedQualifiers.length; i++) {
if (supportedQualifiers[i].isMatch(value)) {
var result = supportedQualifiers[i].getMatchValue(value, context);
if (result > 0) {
result += (supportedQualifiers.length - i) * PRIORITY_STEP;
}
return result;
}
}
return -1;
}
var appEventAttached = false;
var resolverInstance;
function resolveFileName(path, ext) {
if (!appEventAttached) {
var app = __webpack_require__(16);
app.on(app.orientationChangedEvent, function(data) {
resolverInstance = undefined;
});
appEventAttached = true;
}
if (!resolverInstance) {
resolverInstance = new FileNameResolver({
width: platform.screen.mainScreen.widthDIPs,
height: platform.screen.mainScreen.heightDIPs,
os: platform.device.os,
deviceType: platform.device.deviceType
});
}
return resolverInstance.resolveFileName(path, ext);
}
exports.resolveFileName = resolveFileName;
function clearCache() {
if (resolverInstance) {
resolverInstance.clearCache();
}
}
exports.clearCache = clearCache;
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(22);
var MIN_TABLET_PIXELS = 600;
var platformNames;
(function(platformNames) {
platformNames.android = "Android";
platformNames.ios = "iOS";
})(platformNames = exports.platformNames || (exports.platformNames = {}));
var Device = function() {
function Device() {}
Object.defineProperty(Device.prototype, "os", {
get: function() {
return platformNames.android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "manufacturer", {
get: function() {
if (!this._manufacturer) {
this._manufacturer = android.os.Build.MANUFACTURER;
}
return this._manufacturer;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "osVersion", {
get: function() {
if (!this._osVersion) {
this._osVersion = android.os.Build.VERSION.RELEASE;
}
return this._osVersion;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "model", {
get: function() {
if (!this._model) {
this._model = android.os.Build.MODEL;
}
return this._model;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "sdkVersion", {
get: function() {
if (!this._sdkVersion) {
this._sdkVersion = android.os.Build.VERSION.SDK;
}
return this._sdkVersion;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "deviceType", {
get: function() {
if (!this._deviceType) {
var dips = Math.min(screen.mainScreen.widthPixels, screen.mainScreen.heightPixels) / screen.mainScreen.scale;
var enums = __webpack_require__(24);
if (dips >= MIN_TABLET_PIXELS) {
this._deviceType = enums.DeviceType.Tablet;
} else {
this._deviceType = enums.DeviceType.Phone;
}
}
return this._deviceType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "uuid", {
get: function() {
if (!this._uuid) {
this._uuid = android.provider.Settings.Secure.getString(utils.ad.getApplicationContext().getContentResolver(), android.provider.Settings.Secure.ANDROID_ID);
}
return this._uuid;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "language", {
get: function() {
if (!this._language) {
this._language = java.util.Locale.getDefault().getLanguage().replace("_", "-");
}
return this._language;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "region", {
get: function() {
if (!this._region) {
this._region = java.util.Locale.getDefault().getCountry();
}
return this._region;
},
enumerable: true,
configurable: true
});
return Device;
}();
var MainScreen = function() {
function MainScreen() {}
Object.defineProperty(MainScreen.prototype, "metrics", {
get: function() {
if (!this._metrics) {
this._metrics = utils.ad.getApplicationContext().getResources().getDisplayMetrics();
}
return this._metrics;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "widthPixels", {
get: function() {
return this.metrics.widthPixels;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "heightPixels", {
get: function() {
return this.metrics.heightPixels;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "scale", {
get: function() {
return this.metrics.density;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "widthDIPs", {
get: function() {
return this.metrics.widthPixels / this.metrics.density;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "heightDIPs", {
get: function() {
return this.metrics.heightPixels / this.metrics.density;
},
enumerable: true,
configurable: true
});
return MainScreen;
}();
exports.device = new Device();
var screen;
(function(screen) {
screen.mainScreen = new MainScreen();
})(screen = exports.screen || (exports.screen = {}));
}, function(module, exports, __webpack_require__) {
var enums = __webpack_require__(24);
var common = __webpack_require__(47);
var application;
function ensureApplication() {
if (!application) {
application = __webpack_require__(16);
}
}
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(14);
}
}
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(30);
}
}
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(19);
}
}
var typefaceCache = new Map();
var appAssets;
var FONTS_BASE_PATH = "/fonts/";
var Font = function(_super) {
__extends(Font, _super);
function Font(family, size, style, weight) {
_super.call(this, family, size, style, weight);
}
Font.prototype.withFontFamily = function(family) {
return new Font(family, this.fontSize, this.fontStyle, this.fontWeight);
};
Font.prototype.withFontStyle = function(style) {
return new Font(this.fontFamily, this.fontSize, style, this.fontWeight);
};
Font.prototype.withFontWeight = function(weight) {
return new Font(this.fontFamily, this.fontSize, this.fontStyle, weight);
};
Font.prototype.withFontSize = function(size) {
return new Font(this.fontFamily, size, this.fontStyle, this.fontWeight);
};
Font.prototype.getAndroidTypeface = function() {
if (!this._typeface) {
var fontStyle = 0;
if (this.isBold) {
fontStyle |= android.graphics.Typeface.BOLD;
}
if (this.isItalic) {
fontStyle |= android.graphics.Typeface.ITALIC;
}
var typeFace = createTypeface(this);
this._typeface = android.graphics.Typeface.create(typeFace, fontStyle);
}
return this._typeface;
};
Font.default = new Font(undefined, undefined, enums.FontStyle.normal, enums.FontWeight.normal);
return Font;
}(common.Font);
exports.Font = Font;
function loadFontFromFile(fontFamily) {
ensureApplication();
appAssets = appAssets || application.android.context.getAssets();
if (!appAssets) {
return null;
}
ensureTypes();
var result = typefaceCache.get(fontFamily);
if (types.isUndefined(result)) {
result = null;
ensureTrace();
ensureFS();
var fontAssetPath;
var basePath = fs.path.join(fs.knownFolders.currentApp().path, "fonts", fontFamily);
if (fs.File.exists(basePath + ".ttf")) {
fontAssetPath = FONTS_BASE_PATH + fontFamily + ".ttf";
} else if (fs.File.exists(basePath + ".otf")) {
fontAssetPath = FONTS_BASE_PATH + fontFamily + ".otf";
} else {
trace.write("Could not find font file for " + fontFamily, trace.categories.Error, trace.messageType.error);
}
if (fontAssetPath) {
try {
fontAssetPath = fs.path.join(fs.knownFolders.currentApp().path, fontAssetPath);
result = android.graphics.Typeface.createFromFile(fontAssetPath);
} catch (e) {
trace.write("Error loading font asset: " + fontAssetPath, trace.categories.Error, trace.messageType.error);
}
}
typefaceCache.set(fontFamily, result);
}
return result;
}
function createTypeface(font) {
var fonts = common.parseFontFamily(font.fontFamily);
var result = null;
if (fonts.length === 0) {
return null;
}
for (var i = 0; i < fonts.length; i++) {
switch (fonts[i].toLowerCase()) {
case common.genericFontFamilies.serif:
result = android.graphics.Typeface.create("serif" + getFontWeightSuffix(font.fontWeight), 0);
break;

case common.genericFontFamilies.sansSerif:
case common.genericFontFamilies.system:
result = android.graphics.Typeface.create("sans-serif" + getFontWeightSuffix(font.fontWeight), 0);
break;

case common.genericFontFamilies.monospace:
result = android.graphics.Typeface.create("monospace" + getFontWeightSuffix(font.fontWeight), 0);
break;

default:
result = loadFontFromFile(fonts[i]);
break;
}
if (result) {
return result;
}
}
return null;
}
function getFontWeightSuffix(fontWeight) {
switch (fontWeight) {
case enums.FontWeight.thin:
return android.os.Build.VERSION.SDK_INT >= 16 ? "-thin" : "";

case enums.FontWeight.extraLight:
case enums.FontWeight.light:
return android.os.Build.VERSION.SDK_INT >= 16 ? "-light" : "";

case enums.FontWeight.normal:
case "400":
case undefined:
case null:
return "";

case enums.FontWeight.medium:
case enums.FontWeight.semiBold:
return android.os.Build.VERSION.SDK_INT >= 21 ? "-medium" : "";

case enums.FontWeight.bold:
case "700":
case enums.FontWeight.extraBold:
return "";

case enums.FontWeight.black:
return android.os.Build.VERSION.SDK_INT >= 21 ? "-black" : "";

default:
throw new Error('Invalid font weight: "' + fontWeight + '"');
}
}
}, function(module, exports, __webpack_require__) {
var enums = __webpack_require__(24);
var converters = __webpack_require__(38);
var Font = function() {
function Font(family, size, style, weight) {
this._fontFamily = family;
this._fontSize = size;
this._fontStyle = style;
this._fontWeight = weight;
}
Object.defineProperty(Font.prototype, "fontFamily", {
get: function() {
return this._fontFamily;
},
set: function(value) {
throw new Error("fontFamily is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(Font.prototype, "fontStyle", {
get: function() {
return this._fontStyle;
},
set: function(value) {
throw new Error("fontStyle is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(Font.prototype, "fontWeight", {
get: function() {
return this._fontWeight;
},
set: function(value) {
throw new Error("fontWeight is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(Font.prototype, "fontSize", {
get: function() {
return this._fontSize;
},
set: function(value) {
throw new Error("fontSize is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(Font.prototype, "isBold", {
get: function() {
return this._fontWeight.toLowerCase() === enums.FontWeight.bold || this._fontWeight.toLowerCase() === "700";
},
set: function(value) {
throw new Error("isBold is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(Font.prototype, "isItalic", {
get: function() {
return this._fontStyle.toLowerCase() === enums.FontStyle.italic;
},
set: function(value) {
throw new Error("isItalic is read-only");
},
enumerable: true,
configurable: true
});
Font.prototype.getAndroidTypeface = function() {
return undefined;
};
Font.prototype.getUIFont = function(defaultFont) {
return undefined;
};
Font.prototype.withFontFamily = function(family) {
throw new Error("This should be called on the derived class");
};
Font.prototype.withFontStyle = function(style) {
throw new Error("This should be called on the derived class");
};
Font.prototype.withFontWeight = function(weight) {
throw new Error("This should be called on the derived class");
};
Font.prototype.withFontSize = function(size) {
throw new Error("This should be called on the derived class");
};
Font.equals = function(value1, value2) {
if (!value1 && !value2) {
return true;
}
if (!value1 || !value2) {
return false;
}
return value1.fontFamily === value2.fontFamily && value1.fontSize === value2.fontSize && value1.fontStyle === value2.fontStyle && value1.fontWeight === value2.fontWeight;
};
Font.parse = function(cssValue) {
var parsed = parseFont(cssValue);
var size = converters.fontSizeConverter(parsed.fontSize);
size = !!size ? size : undefined;
return new Font(parsed.fontFamily, size, parsed.fontStyle, parsed.fontWeight);
};
Font.default = undefined;
return Font;
}();
exports.Font = Font;
function parseFontFamily(value) {
var result = new Array();
if (!value) {
return result;
}
var split = value.split(",");
for (var i = 0; i < split.length; i++) {
var str = split[i].trim().replace(/['"]+/g, "");
if (str) {
result.push(str);
}
}
return result;
}
exports.parseFontFamily = parseFontFamily;
var genericFontFamilies;
(function(genericFontFamilies) {
genericFontFamilies.serif = "serif";
genericFontFamilies.sansSerif = "sans-serif";
genericFontFamilies.monospace = "monospace";
genericFontFamilies.system = "system";
})(genericFontFamilies = exports.genericFontFamilies || (exports.genericFontFamilies = {}));
var styles = new Set();
[ "italic", "oblique" ].forEach(function(val, i, a) {
return styles.add(val);
});
var weights = new Set();
[ "normal", "bold", "100", "200", "300", "400", "500", "600", "700", "800", "900" ].forEach(function(val, i, a) {
return weights.add(val);
});
function parseFont(fontValue) {
var result = {
fontStyle: "normal",
fontVariant: "normal",
fontWeight: "normal"
};
var parts = fontValue.split(/\s+/);
var part;
while (part = parts.shift()) {
if (part === "normal") {} else if (part === "small-caps") {
result.fontVariant = part;
} else if (styles.has(part)) {
result.fontStyle = part;
} else if (weights.has(part)) {
result.fontWeight = part;
} else if (!result.fontSize) {
var sizes = part.split("/");
result.fontSize = sizes[0];
result.lineHeight = sizes.length > 1 ? sizes[1] : undefined;
} else {
result.fontFamily = part;
if (parts.length) {
result.fontFamily += " " + parts.join(" ");
}
break;
}
}
return result;
}
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(22);
var common = __webpack_require__(49);
var types = __webpack_require__(14);
var button;
var style;
function ensureLazyRequires() {
if (!button) {
button = __webpack_require__(51);
}
if (!style) {
style = __webpack_require__(15);
}
}
global.moduleMerge(common, exports);
var ad;
(function(ad) {
Object.defineProperty(ad, "BorderDrawable", {
get: function() {
ensureBorderDrawable();
return BorderDrawableClass;
},
configurable: true
});
var BorderDrawableClass;
function ensureBorderDrawable() {
if (BorderDrawableClass) {
return;
}
var BorderDrawable = function(_super) {
__extends(BorderDrawable, _super);
function BorderDrawable() {
_super.call(this);
this._density = utils.layout.getDisplayDensity();
return global.__native(this);
}
Object.defineProperty(BorderDrawable.prototype, "clipPath", {
get: function() {
return this._clipPath;
},
set: function(value) {
if (this._clipPath !== value) {
this._clipPath = value;
this.invalidateSelf();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(BorderDrawable.prototype, "borderWidth", {
get: function() {
return this._borderWidth;
},
set: function(value) {
if (this._borderWidth !== value) {
this._borderWidth = value;
this.invalidateSelf();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(BorderDrawable.prototype, "cornerRadius", {
get: function() {
return this._cornerRadius;
},
set: function(value) {
if (this._cornerRadius !== value) {
this._cornerRadius = value;
this.invalidateSelf();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(BorderDrawable.prototype, "borderColor", {
get: function() {
return this._borderColor;
},
set: function(value) {
if (this._borderColor !== value) {
this._borderColor = value;
this.invalidateSelf();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(BorderDrawable.prototype, "background", {
get: function() {
return this._background;
},
set: function(value) {
if (this._background !== value) {
this._background = value;
this.invalidateSelf();
}
},
enumerable: true,
configurable: true
});
BorderDrawable.prototype.draw = function(canvas) {
var bounds = this.getBounds();
var borderWidth = this._borderWidth * this._density;
var halfBorderWidth = borderWidth / 2;
var normalizedBorderAlpha = android.graphics.Color.alpha(this._borderColor) / 255;
var backoffAntialias = Math.min(.5, halfBorderWidth) * normalizedBorderAlpha;
var backgroundBoundsF = new android.graphics.RectF(bounds.left + backoffAntialias, bounds.top + backoffAntialias, bounds.right - backoffAntialias, bounds.bottom - backoffAntialias);
var outerRadius = this._cornerRadius * this._density;
if (this.background.color && this.background.color.android) {
var backgroundColorPaint = new android.graphics.Paint();
backgroundColorPaint.setStyle(android.graphics.Paint.Style.FILL);
backgroundColorPaint.setColor(this.background.color.android);
backgroundColorPaint.setAntiAlias(true);
if (this.clipPath) {
drawClipPath(this.clipPath, canvas, backgroundColorPaint, backgroundBoundsF);
} else {
canvas.drawRoundRect(backgroundBoundsF, outerRadius, outerRadius, backgroundColorPaint);
}
}
if (this.background.image) {
var bitmap = this.background.image.android;
var params = this.background.getDrawParams(bounds.width(), bounds.height());
var transform = new android.graphics.Matrix();
if (params.sizeX > 0 && params.sizeY > 0) {
var scaleX = params.sizeX / bitmap.getWidth();
var scaleY = params.sizeY / bitmap.getHeight();
transform.setScale(scaleX, scaleY, 0, 0);
} else {
params.sizeX = bitmap.getWidth();
params.sizeY = bitmap.getHeight();
}
transform.postTranslate(params.posX - backoffAntialias, params.posY - backoffAntialias);
var shader = new android.graphics.BitmapShader(bitmap, android.graphics.Shader.TileMode.REPEAT, android.graphics.Shader.TileMode.REPEAT);
shader.setLocalMatrix(transform);
var backgroundImagePaint = new android.graphics.Paint();
backgroundImagePaint.setShader(shader);
var imageWidth = params.repeatX ? bounds.width() : params.sizeX;
var imageHeight = params.repeatY ? bounds.height() : params.sizeY;
params.posX = params.repeatX ? 0 : params.posX;
params.posY = params.repeatY ? 0 : params.posY;
if (this.clipPath) {
drawClipPath(this.clipPath, canvas, backgroundImagePaint, backgroundBoundsF);
} else {
var supportsPathOp = android.os.Build.VERSION.SDK_INT >= 19;
if (supportsPathOp) {
var backgroundPath = new android.graphics.Path();
backgroundPath.addRoundRect(backgroundBoundsF, outerRadius, outerRadius, android.graphics.Path.Direction.CCW);
var backgroundNoRepeatPath = new android.graphics.Path();
backgroundNoRepeatPath.addRect(params.posX, params.posY, params.posX + imageWidth, params.posY + imageHeight, android.graphics.Path.Direction.CCW);
backgroundPath.op(backgroundNoRepeatPath, android.graphics.Path.Op.INTERSECT);
canvas.drawPath(backgroundPath, backgroundImagePaint);
} else {
canvas.save();
canvas.clipRect(params.posX, params.posY, params.posX + imageWidth, params.posY + imageHeight);
canvas.drawRoundRect(backgroundBoundsF, outerRadius, outerRadius, backgroundImagePaint);
canvas.restore();
}
}
}
if (borderWidth > 0 && this._borderColor) {
var middleBoundsF = new android.graphics.RectF(bounds.left + halfBorderWidth, bounds.top + halfBorderWidth, bounds.right - halfBorderWidth, bounds.bottom - halfBorderWidth);
var borderPaint = new android.graphics.Paint();
borderPaint.setColor(this._borderColor);
borderPaint.setAntiAlias(true);
if (this.clipPath) {
borderPaint.setStyle(android.graphics.Paint.Style.STROKE);
borderPaint.setStrokeWidth(borderWidth);
drawClipPath(this.clipPath, canvas, borderPaint, backgroundBoundsF);
} else {
if (outerRadius <= 0) {
borderPaint.setStyle(android.graphics.Paint.Style.STROKE);
borderPaint.setStrokeWidth(borderWidth);
canvas.drawRect(middleBoundsF, borderPaint);
} else if (outerRadius >= borderWidth) {
borderPaint.setStyle(android.graphics.Paint.Style.STROKE);
borderPaint.setStrokeWidth(borderWidth);
var middleRadius = Math.max(0, outerRadius - halfBorderWidth);
canvas.drawRoundRect(middleBoundsF, middleRadius, middleRadius, borderPaint);
} else {
var borderPath = new android.graphics.Path();
var borderOuterBoundsF = new android.graphics.RectF(bounds.left, bounds.top, bounds.right, bounds.bottom);
borderPath.addRoundRect(borderOuterBoundsF, outerRadius, outerRadius, android.graphics.Path.Direction.CCW);
var borderInnerBoundsF = new android.graphics.RectF(bounds.left + borderWidth, bounds.top + borderWidth, bounds.right - borderWidth, bounds.bottom - borderWidth);
borderPath.addRect(borderInnerBoundsF, android.graphics.Path.Direction.CW);
borderPaint.setStyle(android.graphics.Paint.Style.FILL);
canvas.drawPath(borderPath, borderPaint);
}
}
}
};
return BorderDrawable;
}(android.graphics.drawable.ColorDrawable);
BorderDrawableClass = BorderDrawable;
}
var SDK;
function getSDK() {
if (!SDK) {
SDK = android.os.Build.VERSION.SDK_INT;
}
return SDK;
}
var _defaultBackgrounds = new Map();
function onBackgroundOrBorderPropertyChanged(v) {
var nativeView = v._nativeView;
if (!nativeView) {
return;
}
ensureBorderDrawable();
ensureLazyRequires();
var clipPathValue = v.style._getValue(style.clipPathProperty);
var backgroundValue = v.style._getValue(style.backgroundInternalProperty);
var borderWidth = v.borderWidth;
var bkg = nativeView.getBackground();
if (v instanceof button.Button && !types.isNullOrUndefined(bkg) && types.isFunction(bkg.setColorFilter) && v.borderWidth === 0 && v.borderRadius === 0 && !clipPathValue && types.isNullOrUndefined(v.style._getValue(style.backgroundImageProperty)) && !types.isNullOrUndefined(v.style._getValue(style.backgroundColorProperty))) {
var backgroundColor = bkg.backgroundColor = v.style._getValue(style.backgroundColorProperty).android;
bkg.setColorFilter(backgroundColor, android.graphics.PorterDuff.Mode.SRC_IN);
bkg.backgroundColor = backgroundColor;
} else if (v.borderWidth !== 0 || v.borderRadius !== 0 || !backgroundValue.isEmpty() || clipPathValue) {
if (!(bkg instanceof BorderDrawableClass)) {
bkg = new BorderDrawableClass();
var viewClass = types.getClass(v);
if (!(v instanceof button.Button) && !_defaultBackgrounds.has(viewClass)) {
_defaultBackgrounds.set(viewClass, nativeView.getBackground());
}
nativeView.setBackground(bkg);
}
bkg.borderWidth = v.borderWidth;
bkg.cornerRadius = v.borderRadius;
bkg.borderColor = v.borderColor ? v.borderColor.android : android.graphics.Color.TRANSPARENT;
bkg.background = backgroundValue;
bkg.clipPath = clipPathValue;
if (getSDK() < 18) {
nativeView.setLayerType(android.view.View.LAYER_TYPE_SOFTWARE, null);
} else {
nativeView.setLayerType(android.view.View.LAYER_TYPE_HARDWARE, null);
}
} else {
if (v instanceof button.Button) {
var nativeButton = new android.widget.Button(nativeView.getContext());
nativeView.setBackground(nativeButton.getBackground());
} else {
var viewClass = types.getClass(v);
if (_defaultBackgrounds.has(viewClass)) {
nativeView.setBackground(_defaultBackgrounds.get(viewClass));
}
}
if (getSDK() < 18) {
nativeView.setLayerType(android.view.View.LAYER_TYPE_HARDWARE, null);
}
}
var density = utils.layout.getDisplayDensity();
nativeView.setPadding(Math.round((borderWidth + v.style.paddingLeft) * density), Math.round((borderWidth + v.style.paddingTop) * density), Math.round((borderWidth + v.style.paddingRight) * density), Math.round((borderWidth + v.style.paddingBottom) * density));
}
ad.onBackgroundOrBorderPropertyChanged = onBackgroundOrBorderPropertyChanged;
})(ad = exports.ad || (exports.ad = {}));
function drawClipPath(clipPath, canvas, paint, bounds) {
var functionName = clipPath.substring(0, clipPath.indexOf("("));
var value = clipPath.replace(functionName + "(", "").replace(")", "");
if (functionName === "rect") {
var arr = value.split(/[\s]+/);
var top = common.cssValueToDevicePixels(arr[0], bounds.top);
var left = common.cssValueToDevicePixels(arr[1], bounds.left);
var bottom = common.cssValueToDevicePixels(arr[2], bounds.bottom);
var right = common.cssValueToDevicePixels(arr[3], bounds.right);
canvas.drawRect(left, top, right, bottom, paint);
} else if (functionName === "circle") {
var arr = value.split(/[\s]+/);
var radius = common.cssValueToDevicePixels(arr[0], (bounds.width() > bounds.height() ? bounds.height() : bounds.width()) / 2);
var y = common.cssValueToDevicePixels(arr[2], bounds.height());
var x = common.cssValueToDevicePixels(arr[3], bounds.width());
canvas.drawCircle(x, y, radius, paint);
} else if (functionName === "ellipse") {
var arr = value.split(/[\s]+/);
var rX = common.cssValueToDevicePixels(arr[0], bounds.right);
var rY = common.cssValueToDevicePixels(arr[1], bounds.bottom);
var cX = common.cssValueToDevicePixels(arr[3], bounds.right);
var cY = common.cssValueToDevicePixels(arr[4], bounds.bottom);
var left = cX - rX;
var top = cY - rY;
var right = rX * 2 + left;
var bottom = rY * 2 + top;
canvas.drawOval(new android.graphics.RectF(left, top, right, bottom), paint);
} else if (functionName === "polygon") {
var path = new android.graphics.Path();
var firstPoint;
var arr = value.split(/[,]+/);
for (var i = 0; i < arr.length; i++) {
var xy = arr[i].trim().split(/[\s]+/);
var point = {
x: common.cssValueToDevicePixels(xy[0], bounds.width()),
y: common.cssValueToDevicePixels(xy[1], bounds.height())
};
if (!firstPoint) {
firstPoint = point;
path.moveTo(point.x, point.y);
}
path.lineTo(point.x, point.y);
}
path.lineTo(firstPoint.x, firstPoint.y);
canvas.drawPath(path, paint);
}
}
}, function(module, exports, __webpack_require__) {
var colorModule = __webpack_require__(27);
var enums = __webpack_require__(24);
var cssValue = __webpack_require__(50);
var utils = __webpack_require__(22);
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(14);
}
}
var Background = function() {
function Background(color, image, repeat, position, size) {
this.color = color;
this.image = image;
this.repeat = repeat;
this.position = position;
this.size = size;
}
Background.prototype.withColor = function(value) {
return new Background(value, this.image, this.repeat, this.position, this.size);
};
Background.prototype.withImage = function(value) {
return new Background(this.color, value, this.repeat, this.position, this.size);
};
Background.prototype.withRepeat = function(value) {
return new Background(this.color, this.image, value, this.position, this.size);
};
Background.prototype.withPosition = function(value) {
return new Background(this.color, this.image, this.repeat, value, this.size);
};
Background.prototype.withSize = function(value) {
return new Background(this.color, this.image, this.repeat, this.position, value);
};
Background.prototype.getDrawParams = function(width, height) {
if (!this.image) {
return null;
}
var res = {
repeatX: true,
repeatY: true,
posX: 0,
posY: 0
};
if (this.repeat) {
switch (this.repeat.toLowerCase()) {
case enums.BackgroundRepeat.noRepeat:
res.repeatX = false;
res.repeatY = false;
break;

case enums.BackgroundRepeat.repeatX:
res.repeatY = false;
break;

case enums.BackgroundRepeat.repeatY:
res.repeatX = false;
break;
}
}
var imageWidth = this.image.width;
var imageHeight = this.image.height;
if (this.size) {
var values = cssValue(this.size);
if (values.length === 2) {
var vx = values[0];
var vy = values[1];
if (vx.unit === "%" && vy.unit === "%") {
imageWidth = width * vx.value / 100;
imageHeight = height * vy.value / 100;
res.sizeX = imageWidth;
res.sizeY = imageHeight;
} else if (vx.type === "number" && vy.type === "number" && (vx.unit === "px" && vy.unit === "px" || vx.unit === "" && vy.unit === "")) {
imageWidth = vx.value;
imageHeight = vy.value;
res.sizeX = imageWidth;
res.sizeY = imageHeight;
}
} else if (values.length === 1 && values[0].type === "ident") {
var scale = 0;
if (values[0].string === "cover") {
scale = Math.max(width / imageWidth, height / imageHeight);
} else if (values[0].string === "contain") {
scale = Math.min(width / imageWidth, height / imageHeight);
}
if (scale > 0) {
imageWidth *= scale;
imageHeight *= scale;
res.sizeX = imageWidth;
res.sizeY = imageHeight;
}
}
}
if (this.position) {
var v = Background.parsePosition(this.position);
if (v) {
var spaceX = width - imageWidth;
var spaceY = height - imageHeight;
if (v.x.unit === "%" && v.y.unit === "%") {
res.posX = spaceX * v.x.value / 100;
res.posY = spaceY * v.y.value / 100;
} else if (v.x.type === "number" && v.y.type === "number" && (v.x.unit === "px" && v.y.unit === "px" || v.x.unit === "" && v.y.unit === "")) {
res.posX = v.x.value;
res.posY = v.y.value;
} else if (v.x.type === "ident" && v.y.type === "ident") {
if (v.x.string.toLowerCase() === "center") {
res.posX = spaceX / 2;
} else if (v.x.string.toLowerCase() === "right") {
res.posX = spaceX;
}
if (v.y.string.toLowerCase() === "center") {
res.posY = spaceY / 2;
} else if (v.y.string.toLowerCase() === "bottom") {
res.posY = spaceY;
}
}
}
}
return res;
};
Background.parsePosition = function(pos) {
var values = cssValue(pos);
if (values.length === 2) {
return {
x: values[0],
y: values[1]
};
}
if (values.length === 1 && values[0].type === "ident") {
var val = values[0].string.toLocaleLowerCase();
var center = {
type: "ident",
string: "center"
};
if (val === "left" || val === "right") {
return {
x: values[0],
y: center
};
} else if (val === "top" || val === "bottom") {
return {
x: center,
y: values[0]
};
} else if (val === "center") {
return {
x: center,
y: center
};
}
}
return null;
};
Background.prototype.isEmpty = function() {
ensureTypes();
return types.isNullOrUndefined(this.image) && types.isNullOrUndefined(this.color);
};
Background.equals = function(value1, value2) {
if (!value1 && !value2) {
return true;
}
if (!value1 || !value2) {
return false;
}
return value1.image === value2.image && value1.position === value2.position && value1.repeat === value2.repeat && value1.size === value2.size && colorModule.Color.equals(value1.color, value2.color);
};
Background.default = new Background(undefined, undefined, undefined, undefined, undefined);
return Background;
}();
exports.Background = Background;
function cssValueToDevicePixels(source, total) {
var result;
source = source.trim();
if (source.indexOf("px") !== -1) {
result = parseFloat(source.replace("px", ""));
} else if (source.indexOf("%") !== -1 && total > 0) {
result = parseFloat(source.replace("%", "")) / 100 * utils.layout.toDeviceIndependentPixels(total);
} else {
result = parseFloat(source);
}
return utils.layout.toDevicePixels(result);
}
exports.cssValueToDevicePixels = cssValueToDevicePixels;
}, function(module, exports) {
module.exports = parse;
function parse(str) {
return new Parser(str).parse();
}
function Parser(str) {
this.str = str;
}
Parser.prototype.skip = function(m) {
this.str = this.str.slice(m[0].length);
};
Parser.prototype.comma = function() {
var m = /^, */.exec(this.str);
if (!m) return;
this.skip(m);
return {
type: "comma",
string: ","
};
};
Parser.prototype.ident = function() {
var m = /^([\w-]+) */.exec(this.str);
if (!m) return;
this.skip(m);
return {
type: "ident",
string: m[1]
};
};
Parser.prototype.int = function() {
var m = /^(([-\+]?\d+)(\S+)?) */.exec(this.str);
if (!m) return;
this.skip(m);
var n = ~~m[2];
var u = m[3];
return {
type: "number",
string: m[1],
unit: u || "",
value: n
};
};
Parser.prototype.float = function() {
var m = /^(((?:[-\+]?\d+)?\.\d+)(\S+)?) */.exec(this.str);
if (!m) return;
this.skip(m);
var n = parseFloat(m[2]);
var u = m[3];
return {
type: "number",
string: m[1],
unit: u || "",
value: n
};
};
Parser.prototype.number = function() {
return this.float() || this.int();
};
Parser.prototype.double = function() {
var m = /^"([^"]*)" */.exec(this.str);
if (!m) return m;
this.skip(m);
return {
type: "string",
quote: '"',
string: '"' + m[1] + '"',
value: m[1]
};
};
Parser.prototype.single = function() {
var m = /^'([^']*)' */.exec(this.str);
if (!m) return m;
this.skip(m);
return {
type: "string",
quote: "'",
string: "'" + m[1] + "'",
value: m[1]
};
};
Parser.prototype.string = function() {
return this.single() || this.double();
};
Parser.prototype.value = function() {
return this.number() || this.ident() || this.string() || this.comma();
};
Parser.prototype.parse = function() {
var vals = [];
while (this.str.length) {
var obj = this.value();
if (!obj) throw new Error("failed to parse near `" + this.str.slice(0, 10) + "...`");
vals.push(obj);
}
return vals;
};
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(52);
var style = __webpack_require__(15);
var text_base_styler_1 = __webpack_require__(63);
global.moduleMerge(common, exports);
var Button = function(_super) {
__extends(Button, _super);
function Button() {
_super.call(this);
this._isPressed = false;
}
Object.defineProperty(Button.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Button.prototype._createUI = function() {
var that = new WeakRef(this);
this._android = new android.widget.Button(this._context);
this._android.setOnClickListener(new android.view.View.OnClickListener({
get owner() {
return that.get();
},
onClick: function(v) {
if (this.owner) {
this.owner._emit(common.Button.tapEvent);
}
}
}));
this._android.setOnTouchListener(new android.view.View.OnTouchListener({
get owner() {
return that.get();
},
onTouch: function(v, ev) {
if (ev.getAction() === 0) {
this.owner._goToVisualState("highlighted");
} else if (ev.getAction() === 1) {
this.owner._goToVisualState("normal");
}
return false;
}
}));
};
Button.prototype._onTextPropertyChanged = function(data) {
if (this.android) {
this.android.setText(data.newValue + "");
}
};
Button.prototype._setFormattedTextPropertyToNative = function(value) {
var newText = value ? value._formattedText : null;
if (this.android) {
if (newText) {
if (!this._transformationMethod) {
this._transformationMethod = this.android.getTransformationMethod();
}
this.android.setTransformationMethod(null);
} else {
if (this._transformationMethod && !this.android.getTransformationMethod()) {
this.android.setTransformationMethod(this._transformationMethod);
}
}
this.android.setText(newText);
}
};
return Button;
}(common.Button);
exports.Button = Button;
var ButtonStyler = function() {
function ButtonStyler() {}
ButtonStyler.registerHandlers = function() {
var TextBaseStyler = text_base_styler_1.TextBaseStyler;
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setColorProperty, TextBaseStyler.resetColorProperty, TextBaseStyler.getNativeColorValue), "Button");
style.registerHandler(style.fontInternalProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setFontInternalProperty, TextBaseStyler.resetFontInternalProperty, TextBaseStyler.getNativeFontInternalValue), "Button");
style.registerHandler(style.textAlignmentProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextAlignmentProperty, TextBaseStyler.resetTextAlignmentProperty, TextBaseStyler.getNativeTextAlignmentValue), "Button");
style.registerHandler(style.textDecorationProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextDecorationProperty, TextBaseStyler.resetTextDecorationProperty), "Button");
style.registerHandler(style.textTransformProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextTransformProperty, TextBaseStyler.resetTextTransformProperty), "Button");
style.registerHandler(style.whiteSpaceProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setWhiteSpaceProperty, TextBaseStyler.resetWhiteSpaceProperty), "Button");
style.registerHandler(style.letterSpacingProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setLetterSpacingProperty, TextBaseStyler.resetLetterSpacingProperty, TextBaseStyler.getLetterSpacingProperty), "Button");
};
return ButtonStyler;
}();
exports.ButtonStyler = ButtonStyler;
ButtonStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(34);
var view = __webpack_require__(12);
var proxy = __webpack_require__(53);
var formattedString = __webpack_require__(60);
var observable = __webpack_require__(18);
var weakEvents;
function ensureWeakEvents() {
if (!weakEvents) {
weakEvents = __webpack_require__(55);
}
}
var enums;
function ensureEnums() {
if (!enums) {
enums = __webpack_require__(24);
}
}
var textProperty = new dependencyObservable.Property("text", "Button", new proxy.PropertyMetadata("", dependencyObservable.PropertyMetadataSettings.AffectsLayout));
var formattedTextProperty = new dependencyObservable.Property("formattedText", "Button", new proxy.PropertyMetadata("", dependencyObservable.PropertyMetadataSettings.AffectsLayout));
function onTextPropertyChanged(data) {
var button = data.object;
button._onTextPropertyChanged(data);
button.style._updateTextDecoration();
button.style._updateTextTransform();
}
function onFormattedTextPropertyChanged(data) {
var button = data.object;
button._onFormattedTextPropertyChanged(data);
}
textProperty.metadata.onSetNativeValue = onTextPropertyChanged;
formattedTextProperty.metadata.onSetNativeValue = onFormattedTextPropertyChanged;
var Button = function(_super) {
__extends(Button, _super);
function Button() {
_super.apply(this, arguments);
}
Button.prototype._onBindingContextChanged = function(oldValue, newValue) {
_super.prototype._onBindingContextChanged.call(this, oldValue, newValue);
if (this.formattedText) {
this.formattedText.updateSpansBindingContext(newValue);
}
this.style._updateTextDecoration();
this.style._updateTextTransform();
};
Object.defineProperty(Button.prototype, "text", {
get: function() {
return this._getValue(Button.textProperty);
},
set: function(value) {
this._setValue(Button.textProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Button.prototype, "formattedText", {
get: function() {
return this._getValue(Button.formattedTextProperty);
},
set: function(value) {
if (this.formattedText !== value) {
ensureWeakEvents();
if (this.formattedText) {
weakEvents.removeWeakEventListener(this.formattedText, observable.Observable.propertyChangeEvent, this.onFormattedTextChanged, this);
}
this._setValue(Button.formattedTextProperty, value);
if (value) {
weakEvents.addWeakEventListener(value, observable.Observable.propertyChangeEvent, this.onFormattedTextChanged, this);
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Button.prototype, "textWrap", {
get: function() {
return this._getValue(Button.textWrapProperty);
},
set: function(value) {
this._setValue(Button.textWrapProperty, value);
},
enumerable: true,
configurable: true
});
Button.prototype.onFormattedTextChanged = function(eventData) {
var value = eventData.value;
this._setFormattedTextPropertyToNative(value);
this._onPropertyChangedFromNative(Button.textProperty, value.toString());
};
Button.prototype._onTextPropertyChanged = function(data) {};
Button.prototype._setFormattedTextPropertyToNative = function(value) {};
Button.prototype._onFormattedTextPropertyChanged = function(data) {
var newValue = data.newValue;
if (newValue) {
newValue.parent = this;
}
this._setFormattedTextPropertyToNative(newValue);
var newText = newValue ? newValue.toString() : "";
this._onPropertyChangedFromNative(Button.textProperty, newText);
};
Button.prototype._addChildFromBuilder = function(name, value) {
formattedString.FormattedString.addFormattedStringToView(this, name, value);
};
Button.tapEvent = "tap";
Button.textProperty = textProperty;
Button.formattedTextProperty = formattedTextProperty;
Button.textWrapProperty = new dependencyObservable.Property("textWrap", "Button", new proxy.PropertyMetadata(false, dependencyObservable.PropertyMetadataSettings.AffectsLayout));
return Button;
}(view.View);
exports.Button = Button;
function onTextWrapPropertyChanged(data) {
var v = data.object;
ensureEnums();
v.style.whiteSpace = data.newValue ? enums.WhiteSpace.normal : enums.WhiteSpace.nowrap;
}
Button.textWrapProperty.metadata.onSetNativeValue = onTextWrapPropertyChanged;
}, function(module, exports, __webpack_require__) {
var bindable = __webpack_require__(54);
var dependencyObservable = __webpack_require__(34);
var types = __webpack_require__(14);
var observable = __webpack_require__(18);
var PropertyMetadata = function(_super) {
__extends(PropertyMetadata, _super);
function PropertyMetadata(defaultValue, options, onChanged, onValidateValue, onSetNativeValue) {
_super.call(this, defaultValue, options, onChanged, onValidateValue);
this._onSetNativeValue = onSetNativeValue;
}
Object.defineProperty(PropertyMetadata.prototype, "onSetNativeValue", {
get: function() {
return this._onSetNativeValue;
},
set: function(value) {
this._onSetNativeValue = value;
},
enumerable: true,
configurable: true
});
return PropertyMetadata;
}(dependencyObservable.PropertyMetadata);
exports.PropertyMetadata = PropertyMetadata;
var ProxyObject = function(_super) {
__extends(ProxyObject, _super);
function ProxyObject() {
_super.apply(this, arguments);
this._updatingJSPropertiesDict = {};
}
Object.defineProperty(ProxyObject.prototype, "android", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProxyObject.prototype, "ios", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
ProxyObject.prototype._onPropertyChanged = function(property, oldValue, newValue) {
_super.prototype._onPropertyChanged.call(this, property, oldValue, newValue);
this._trySetNativeValue(property, oldValue, newValue);
};
ProxyObject.prototype._onPropertyChangedFromNative = function(property, newValue) {
if (this._updatingJSPropertiesDict[property.name]) {
return;
}
this._updatingJSPropertiesDict[property.name] = true;
this._setValue(property, newValue);
delete this._updatingJSPropertiesDict[property.name];
};
ProxyObject.prototype._syncNativeProperties = function() {
var that = this;
var eachPropertyCallback = function(property) {
that._trySetNativeValue(property);
return true;
};
this._eachSetProperty(eachPropertyCallback);
};
ProxyObject.prototype._canApplyNativeProperty = function() {
return false;
};
ProxyObject.prototype._trySetNativeValue = function(property, oldValue, newValue) {
if (this._updatingJSPropertiesDict[property.name]) {
return;
}
if (!this._canApplyNativeProperty()) {
return;
}
var metadata = property.metadata;
if (!(metadata instanceof PropertyMetadata)) {
return;
}
var proxyMetadata = metadata;
if (proxyMetadata.onSetNativeValue) {
if (types.isUndefined(newValue)) {
newValue = this._getValue(property);
}
proxyMetadata.onSetNativeValue({
object: this,
property: property,
eventName: observable.Observable.propertyChangeEvent,
newValue: newValue,
oldValue: oldValue
});
}
};
return ProxyObject;
}(bindable.Bindable);
exports.ProxyObject = ProxyObject;
}, function(module, exports, __webpack_require__) {
var observable_1 = __webpack_require__(18);
var dependency_observable_1 = __webpack_require__(34);
var weakEvents = __webpack_require__(55);
var types = __webpack_require__(14);
var trace = __webpack_require__(30);
var bindingBuilder = __webpack_require__(56);
var viewModule = __webpack_require__(12);
var application = __webpack_require__(16);
var polymerExpressions = __webpack_require__(57);
var specialProperties = __webpack_require__(39);
var utils = __webpack_require__(22);
var bindingContextProperty = new dependency_observable_1.Property("bindingContext", "Bindable", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.Inheritable, onBindingContextChanged));
function onBindingContextChanged(data) {
var bindable = data.object;
bindable._onBindingContextChanged(data.oldValue, data.newValue);
}
var contextKey = "context";
var paramsRegex = /\[\s*(['"])*(\w*)\1\s*\]/;
var bc = bindingBuilder.bindingConstants;
var defaultBindingSource = {};
var Bindable = function(_super) {
__extends(Bindable, _super);
function Bindable() {
_super.apply(this, arguments);
this.bindings = new Map();
}
Object.defineProperty(Bindable.prototype, "bindingContext", {
get: function() {
return this._getValue(Bindable.bindingContextProperty);
},
set: function(value) {
this._setValue(Bindable.bindingContextProperty, value);
},
enumerable: true,
configurable: true
});
Bindable.prototype.bind = function(options, source) {
if (source === void 0) {
source = defaultBindingSource;
}
var binding = this.bindings.get(options.targetProperty);
if (binding) {
binding.unbind();
}
binding = new Binding(this, options);
this.bindings.set(options.targetProperty, binding);
var bindingSource = source;
if (bindingSource === defaultBindingSource) {
bindingSource = this.bindingContext;
binding.sourceIsBindingContext = true;
}
if (!types.isNullOrUndefined(bindingSource)) {
binding.bind(bindingSource);
}
};
Bindable.prototype.unbind = function(property) {
var binding = this.bindings.get(property);
if (binding) {
binding.unbind();
this.bindings.delete(property);
}
};
Bindable.prototype._updateTwoWayBinding = function(propertyName, value) {
var binding = this.bindings.get(propertyName);
if (binding) {
binding.updateTwoWay(value);
}
};
Bindable.prototype._setCore = function(data) {
_super.prototype._setCore.call(this, data);
this._updateTwoWayBinding(data.propertyName, data.value);
};
Bindable.prototype._onPropertyChanged = function(property, oldValue, newValue) {
trace.write(this + "._onPropertyChanged(" + property.name + ", " + oldValue + ", " + newValue + ")", trace.categories.Binding);
_super.prototype._onPropertyChanged.call(this, property, oldValue, newValue);
if (this instanceof viewModule.View) {
if (property.metadata.inheritable && this._isInheritedChange() === true) {
return;
}
}
var binding = this.bindings.get(property.name);
if (binding && !binding.updating) {
if (binding.options.twoWay) {
trace.write(this + "._updateTwoWayBinding(" + property.name + ", " + newValue + ");" + property.name, trace.categories.Binding);
this._updateTwoWayBinding(property.name, newValue);
} else {
trace.write(this + ".unbind(" + property.name + ");", trace.categories.Binding);
this.unbind(property.name);
}
}
};
Bindable.prototype._onBindingContextChanged = function(oldValue, newValue) {
this.bindings.forEach(function(binding, index, bindings) {
if (!binding.updating && binding.sourceIsBindingContext) {
trace.write("Binding " + binding.target.get() + "." + binding.options.targetProperty + " to new context " + newValue, trace.categories.Binding);
binding.bind(newValue);
}
});
};
Bindable.bindingContextProperty = bindingContextProperty;
return Bindable;
}(dependency_observable_1.DependencyObservable);
exports.Bindable = Bindable;
var emptyArray = [];
function getProperties(property) {
var result = emptyArray;
if (property) {
var parentsMatches = property.match(bindingBuilder.parentsRegex);
result = property.replace(bindingBuilder.parentsRegex, "parentsMatch").replace(/\]/g, "").split(/\.|\[/);
var parentsMatchesCounter = 0;
for (var i = 0, resultLength = result.length; i < resultLength; i++) {
if (result[i] === "parentsMatch") {
result[i] = parentsMatches[parentsMatchesCounter++];
}
}
}
return result;
}
var Binding = function() {
function Binding(target, options) {
this.propertyChangeListeners = new Map();
this.target = new WeakRef(target);
this.options = options;
this.sourceProperties = getProperties(options.sourceProperty);
this.targetOptions = this.resolveOptions(target, getProperties(options.targetProperty));
}
Binding.prototype.loadedHandlerVisualTreeBinding = function(args) {
var target = args.object;
target.off(viewModule.View.loadedEvent, this.loadedHandlerVisualTreeBinding, this);
if (!types.isNullOrUndefined(target.bindingContext)) {
this.bind(target.bindingContext);
}
};
Binding.prototype.clearSource = function() {
var _this = this;
this.propertyChangeListeners.forEach(function(observable, index, map) {
weakEvents.removeWeakEventListener(observable, observable_1.Observable.propertyChangeEvent, _this.onSourcePropertyChanged, _this);
});
this.propertyChangeListeners.clear();
this.sourcesAndProperties = null;
if (this.source) {
this.source.clear();
}
if (this.sourceOptions) {
this.sourceOptions.instance.clear();
this.sourceOptions = undefined;
}
};
Binding.prototype.sourceAsObject = function(source) {
var objectType = typeof source;
if (objectType === "number") {
source = new Number(source);
} else if (objectType === "boolean") {
source = new Boolean(source);
} else if (objectType === "string") {
source = new String(source);
}
return source;
};
Binding.prototype.bind = function(source) {
this.clearSource();
source = this.sourceAsObject(source);
if (!types.isNullOrUndefined(source)) {
this.source = new WeakRef(source);
this.sourceOptions = this.resolveOptions(source, this.sourceProperties);
var sourceValue = this.getSourcePropertyValue();
this.updateTarget(sourceValue);
this.addPropertyChangeListeners(this.source, this.sourceProperties);
} else {
this.updateTarget(source);
}
};
Binding.prototype.resolveObjectsAndProperties = function(source, properties) {
var result = [];
var currentObject = source;
var currentObjectChanged = false;
for (var i = 0, propsArrayLength = properties.length; i < propsArrayLength; i++) {
var property = properties[i];
if (property === bc.bindingValueKey) {
currentObjectChanged = true;
}
if (property === bc.parentValueKey || property.indexOf(bc.parentsValueKey) === 0) {
var parentView = this.getParentView(this.target.get(), property).view;
if (parentView) {
currentObject = parentView.bindingContext;
} else {
var targetInstance = this.target.get();
targetInstance.off(viewModule.View.loadedEvent, this.loadedHandlerVisualTreeBinding, this);
targetInstance.on(viewModule.View.loadedEvent, this.loadedHandlerVisualTreeBinding, this);
}
currentObjectChanged = true;
}
if (currentObject) {
result.push({
instance: currentObject,
property: property
});
} else {
break;
}
if (!currentObjectChanged && i < propsArrayLength - 1) {
currentObject = currentObject ? currentObject[properties[i]] : null;
}
currentObjectChanged = false;
}
return result;
};
Binding.prototype.addPropertyChangeListeners = function(source, sourceProperty, parentProperies) {
var objectsAndProperties = this.resolveObjectsAndProperties(source.get(), sourceProperty);
var prop = parentProperies || "";
for (var i = 0, length_1 = objectsAndProperties.length; i < length_1; i++) {
prop += "$" + objectsAndProperties[i].property;
var currentObject = objectsAndProperties[i].instance;
if (!this.propertyChangeListeners.has(prop) && currentObject instanceof observable_1.Observable) {
weakEvents.addWeakEventListener(currentObject, observable_1.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
this.propertyChangeListeners.set(prop, currentObject);
}
}
};
Binding.prototype.unbind = function() {
if (!this.source) {
return;
}
this.clearSource();
if (this.targetOptions) {
this.targetOptions = undefined;
}
this.sourceProperties = undefined;
};
Binding.prototype.prepareExpressionForUpdate = function() {
var escapedSourceProperty = utils.escapeRegexSymbols(this.options.sourceProperty);
var expRegex = new RegExp(escapedSourceProperty, "g");
var resultExp = this.options.expression.replace(expRegex, bc.newPropertyValueKey);
return resultExp;
};
Binding.prototype.updateTwoWay = function(value) {
if (this.updating || !this.options.twoWay) {
return;
}
var newValue = value;
if (this.options.expression) {
var changedModel = {};
changedModel[bc.bindingValueKey] = value;
changedModel[bc.newPropertyValueKey] = value;
var sourcePropertyName = "";
if (this.sourceOptions) {
sourcePropertyName = this.sourceOptions.property;
} else if (typeof this.options.sourceProperty === "string" && this.options.sourceProperty.indexOf(".") === -1) {
sourcePropertyName = this.options.sourceProperty;
}
if (sourcePropertyName !== "") {
changedModel[sourcePropertyName] = value;
}
var updateExpression = this.prepareExpressionForUpdate();
this.prepareContextForExpression(changedModel, updateExpression, undefined);
var expressionValue = this._getExpressionValue(updateExpression, true, changedModel);
if (expressionValue instanceof Error) {
trace.write(expressionValue.message, trace.categories.Binding, trace.messageType.error);
}
newValue = expressionValue;
}
this.updateSource(newValue);
};
Binding.prototype._getExpressionValue = function(expression, isBackConvert, changedModel) {
try {
var exp_1 = polymerExpressions.PolymerExpressions.getExpression(expression);
if (exp_1) {
var context_1 = this.source && this.source.get && this.source.get() || global;
var model = {};
var addedProps = [];
for (var prop in application.resources) {
if (application.resources.hasOwnProperty(prop) && !context_1.hasOwnProperty(prop)) {
context_1[prop] = application.resources[prop];
addedProps.push(prop);
}
}
this.prepareContextForExpression(context_1, expression, addedProps);
model[contextKey] = context_1;
var result = exp_1.getValue(model, isBackConvert, changedModel ? changedModel : model);
var addedPropsLength = addedProps.length;
for (var i = 0; i < addedPropsLength; i++) {
delete context_1[addedProps[i]];
}
addedProps.length = 0;
return result;
}
return new Error(expression + " is not a valid expression.");
} catch (e) {
var errorMessage = "Run-time error occured in file: " + e.sourceURL + " at line: " + e.line + " and column: " + e.column;
return new Error(errorMessage);
}
};
Binding.prototype.onSourcePropertyChanged = function(data) {
var sourceProps = this.sourceProperties;
var sourcePropsLength = sourceProps.length;
var changedPropertyIndex = sourceProps.indexOf(data.propertyName);
var parentProps = "";
if (changedPropertyIndex > -1) {
parentProps = "$" + sourceProps.slice(0, changedPropertyIndex + 1).join("$");
while (this.propertyChangeListeners.get(parentProps) !== data.object) {
changedPropertyIndex += sourceProps.slice(changedPropertyIndex + 1).indexOf(data.propertyName) + 1;
parentProps = "$" + sourceProps.slice(0, changedPropertyIndex + 1).join("$");
}
}
if (this.options.expression) {
var expressionValue = this._getExpressionValue(this.options.expression, false, undefined);
if (expressionValue instanceof Error) {
trace.write(expressionValue.message, trace.categories.Binding, trace.messageType.error);
} else {
this.updateTarget(expressionValue);
}
} else {
if (changedPropertyIndex > -1) {
var props = sourceProps.slice(changedPropertyIndex + 1);
var propsLength = props.length;
if (propsLength > 0) {
var value = data.value;
for (var i = 0; i < propsLength; i++) {
value = value[props[i]];
}
this.updateTarget(value);
} else if (data.propertyName === this.sourceOptions.property) {
this.updateTarget(data.value);
}
}
}
if (changedPropertyIndex > -1 && changedPropertyIndex < sourcePropsLength - 1) {
var probablyChangedObject = this.propertyChangeListeners.get(parentProps);
if (probablyChangedObject && probablyChangedObject !== data.object[sourceProps[changedPropertyIndex]]) {
for (var i = sourcePropsLength - 1; i > changedPropertyIndex; i--) {
var prop = "$" + sourceProps.slice(0, i + 1).join("$");
if (this.propertyChangeListeners.has(prop)) {
weakEvents.removeWeakEventListener(this.propertyChangeListeners.get(prop), observable_1.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
this.propertyChangeListeners.delete(prop);
}
}
var newProps = sourceProps.slice(changedPropertyIndex + 1);
var newObject = data.object[sourceProps[changedPropertyIndex]];
if (!types.isNullOrUndefined(newObject) && typeof newObject === "object") {
this.addPropertyChangeListeners(new WeakRef(newObject), newProps, parentProps);
}
}
}
};
Binding.prototype.prepareContextForExpression = function(model, expression, newProps) {
var parentViewAndIndex;
var parentView;
var addedProps = newProps || [];
if (expression.indexOf(bc.bindingValueKey) > -1) {
model[bc.bindingValueKey] = model;
addedProps.push(bc.bindingValueKey);
}
if (expression.indexOf(bc.parentValueKey) > -1) {
parentView = this.getParentView(this.target.get(), bc.parentValueKey).view;
if (parentView) {
model[bc.parentValueKey] = parentView.bindingContext;
addedProps.push(bc.parentValueKey);
}
}
var parentsArray = expression.match(bindingBuilder.parentsRegex);
if (parentsArray) {
for (var i = 0; i < parentsArray.length; i++) {
parentViewAndIndex = this.getParentView(this.target.get(), parentsArray[i]);
if (parentViewAndIndex.view) {
model[bc.parentsValueKey] = model[bc.parentsValueKey] || {};
model[bc.parentsValueKey][parentViewAndIndex.index] = parentViewAndIndex.view.bindingContext;
addedProps.push(bc.parentsValueKey);
}
}
}
};
Binding.prototype.getSourcePropertyValue = function() {
if (this.options.expression) {
var changedModel = {};
changedModel[bc.bindingValueKey] = this.source.get();
var expressionValue = this._getExpressionValue(this.options.expression, false, changedModel);
if (expressionValue instanceof Error) {
trace.write(expressionValue.message, trace.categories.Binding, trace.messageType.error);
} else {
return expressionValue;
}
}
if (this.sourceOptions) {
var sourceOptionsInstance = this.sourceOptions.instance.get();
if (this.sourceOptions.property === bc.bindingValueKey) {
return sourceOptionsInstance;
} else if (sourceOptionsInstance instanceof observable_1.Observable && (this.sourceOptions.property && this.sourceOptions.property !== "")) {
return sourceOptionsInstance.get(this.sourceOptions.property);
} else if (sourceOptionsInstance && this.sourceOptions.property && this.sourceOptions.property !== "" && this.sourceOptions.property in sourceOptionsInstance) {
return sourceOptionsInstance[this.sourceOptions.property];
} else {
trace.write("Property: '" + this.sourceOptions.property + "' is invalid or does not exist. SourceProperty: '" + this.options.sourceProperty + "'", trace.categories.Binding, trace.messageType.error);
}
}
return null;
};
Binding.prototype.updateTarget = function(value) {
if (this.updating) {
return;
}
this.updateOptions(this.targetOptions, value);
};
Binding.prototype.updateSource = function(value) {
if (this.updating || !this.source || !this.source.get()) {
return;
}
this.updateOptions(this.sourceOptions, value);
};
Binding.prototype.getParentView = function(target, property) {
if (!target || !(target instanceof viewModule.View)) {
return {
view: null,
index: null
};
}
var result;
if (property === bc.parentValueKey) {
result = target.parent;
}
var index = null;
if (property.indexOf(bc.parentsValueKey) === 0) {
result = target.parent;
var indexParams = paramsRegex.exec(property);
if (indexParams && indexParams.length > 1) {
index = indexParams[2];
}
if (!isNaN(index)) {
var indexAsInt = parseInt(index);
while (indexAsInt > 0) {
result = result.parent;
indexAsInt--;
}
} else if (types.isString(index)) {
while (result && result.typeName !== index) {
result = result.parent;
}
}
}
return {
view: result,
index: index
};
};
Binding.prototype.resolveOptions = function(obj, properties) {
var objectsAndProperties = this.resolveObjectsAndProperties(obj, properties);
if (objectsAndProperties.length > 0) {
var resolvedObj = objectsAndProperties[objectsAndProperties.length - 1].instance;
var prop = objectsAndProperties[objectsAndProperties.length - 1].property;
return {
instance: new WeakRef(this.sourceAsObject(resolvedObj)),
property: prop
};
}
return null;
};
Binding.prototype.updateOptions = function(options, value) {
var optionsInstance;
if (options && options.instance) {
optionsInstance = options.instance.get();
}
if (!optionsInstance) {
return;
}
this.updating = true;
try {
if (optionsInstance instanceof Bindable && viewModule.isEventOrGesture(options.property, optionsInstance) && types.isFunction(value)) {
optionsInstance.off(options.property, null, optionsInstance.bindingContext);
optionsInstance.on(options.property, value, optionsInstance.bindingContext);
} else {
var specialSetter = specialProperties.getSpecialPropertySetter(options.property);
if (specialSetter) {
specialSetter(optionsInstance, value);
} else {
if (optionsInstance instanceof observable_1.Observable) {
optionsInstance.set(options.property, value);
} else {
optionsInstance[options.property] = value;
}
}
}
} catch (ex) {
trace.write("Binding error while setting property " + options.property + " of " + optionsInstance + ": " + ex, trace.categories.Binding, trace.messageType.error);
}
this.updating = false;
};
return Binding;
}();
exports.Binding = Binding;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var handlersForEventName = new Map();
var sourcesMap = new WeakMap();
var TargetHandlerPair = function() {
function TargetHandlerPair(target, handler) {
this.tagetRef = new WeakRef(target);
this.handler = handler;
}
return TargetHandlerPair;
}();
function getHandlerForEventName(eventName) {
var handler = handlersForEventName.get(eventName);
if (!handler) {
handler = function(eventData) {
var source = eventData.object;
var sourceEventMap = sourcesMap.get(source);
if (!sourceEventMap) {
source.removeEventListener(eventName, handlersForEventName.get(eventName));
return;
}
var targetHandlerPairList = sourceEventMap.get(eventName);
if (!targetHandlerPairList) {
return;
}
var deadPairsIndexes = [];
for (var i = 0; i < targetHandlerPairList.length; i++) {
var pair = targetHandlerPairList[i];
var target = pair.tagetRef.get();
if (target) {
pair.handler.call(target, eventData);
} else {
deadPairsIndexes.push(i);
}
}
if (deadPairsIndexes.length === targetHandlerPairList.length) {
source.removeEventListener(eventName, handlersForEventName.get(eventName));
sourceEventMap.delete(eventName);
} else {
for (var j = deadPairsIndexes.length - 1; j >= 0; j--) {
targetHandlerPairList.splice(deadPairsIndexes[j], 1);
}
}
};
handlersForEventName.set(eventName, handler);
}
return handler;
}
function validateArgs(source, eventName, handler, target) {
if (types.isNullOrUndefined(source)) {
throw new Error("source is null or undefined");
}
if (types.isNullOrUndefined(target)) {
throw new Error("target is null or undefined");
}
if (!types.isString(eventName)) {
throw new Error("eventName is not a string");
}
if (!types.isFunction(handler)) {
throw new Error("handler is not a function");
}
}
function addWeakEventListener(source, eventName, handler, target) {
validateArgs(source, eventName, handler, target);
var shouldAttach = false;
var sourceEventMap = sourcesMap.get(source);
if (!sourceEventMap) {
sourceEventMap = new Map();
sourcesMap.set(source, sourceEventMap);
shouldAttach = true;
}
var pairList = sourceEventMap.get(eventName);
if (!pairList) {
pairList = new Array();
sourceEventMap.set(eventName, pairList);
shouldAttach = true;
}
pairList.push(new TargetHandlerPair(target, handler));
if (shouldAttach) {
source.addEventListener(eventName, getHandlerForEventName(eventName));
}
}
exports.addWeakEventListener = addWeakEventListener;
function removeWeakEventListener(source, eventName, handler, target) {
validateArgs(source, eventName, handler, target);
var handlerForEventWithName = handlersForEventName.get(eventName);
if (!handlerForEventWithName) {
return;
}
var sourceEventMap = sourcesMap.get(source);
if (!sourceEventMap) {
return;
}
var targetHandlerPairList = sourceEventMap.get(eventName);
if (!targetHandlerPairList) {
return;
}
var targetHandlerPairsToRemove = [];
for (var i = 0; i < targetHandlerPairList.length; i++) {
var pair = targetHandlerPairList[i];
var registeredTarget = pair.tagetRef.get();
if (!registeredTarget || registeredTarget === target && handler === pair.handler) {
targetHandlerPairsToRemove.push(i);
}
}
if (targetHandlerPairsToRemove.length === targetHandlerPairList.length) {
source.removeEventListener(eventName, handlerForEventWithName);
sourceEventMap.delete(eventName);
} else {
for (var j = targetHandlerPairsToRemove.length - 1; j >= 0; j--) {
targetHandlerPairList.splice(targetHandlerPairsToRemove[j], 1);
}
}
}
exports.removeWeakEventListener = removeWeakEventListener;
}, function(module, exports) {
var expressionSymbolsRegex = /[\+\-\*\/%\?:<>=!\|&\(\)^~]/;
var bindingConstants;
(function(bindingConstants) {
bindingConstants.sourceProperty = "sourceProperty";
bindingConstants.targetProperty = "targetProperty";
bindingConstants.expression = "expression";
bindingConstants.twoWay = "twoWay";
bindingConstants.source = "source";
bindingConstants.bindingValueKey = "$value";
bindingConstants.parentValueKey = "$parent";
bindingConstants.parentsValueKey = "$parents";
bindingConstants.newPropertyValueKey = "$newPropertyValue";
})(bindingConstants = exports.bindingConstants || (exports.bindingConstants = {}));
var hasEqualSignRegex = /=+/;
var equalSignComparisionOperatorsRegex = /(==|===|>=|<=|!=|!==)/;
exports.parentsRegex = /\$parents\s*\[\s*(['"]*)\w*\1\s*\]/g;
function isNamedParam(value) {
var equalSignIndex = value.search(hasEqualSignRegex);
if (equalSignIndex > -1) {
var equalSignSurround = value.substr(equalSignIndex > 0 ? equalSignIndex - 1 : 0, 3);
if (equalSignSurround.search(equalSignComparisionOperatorsRegex) === -1) {
return true;
}
}
return false;
}
function areNamedParams(params) {
var i;
for (i = 0; i < params.length; i++) {
if (isNamedParam(params[i])) {
return true;
}
}
return false;
}
var namedParamConstants = {
propName: "propName",
propValue: "propValue"
};
function getPropertyNameValuePair(param, knownOptions, callback) {
var nameValuePair = {};
var propertyName = param.substr(0, param.indexOf("=")).trim();
var propertyValue = param.substr(param.indexOf("=") + 1).trim();
if (knownOptions) {
if (!propertyName) {
propertyName = knownOptions.defaultProperty;
} else {
propertyName = propertyName in knownOptions ? propertyName : null;
}
}
if (propertyName) {
if (callback) {
nameValuePair = callback(propertyName, propertyValue);
} else {
nameValuePair[namedParamConstants.propName] = propertyName;
nameValuePair[namedParamConstants.propValue] = propertyValue;
}
return nameValuePair;
}
return null;
}
function parseNamedProperties(parameterList, knownOptions, callback) {
var result = {};
var i;
for (i = 0; i < parameterList.length; i++) {
var nameValuePair = getPropertyNameValuePair(parameterList[i], knownOptions, callback);
if (nameValuePair) {
result[nameValuePair[namedParamConstants.propName]] = nameValuePair[namedParamConstants.propValue];
}
}
return result;
}
function getParamsArray(value) {
var result = [];
var i;
var skipComma = 0;
var indexReached = 0;
var singleQuoteBlock, doubleQuoteBlock = false;
for (i = 0; i < value.length; i++) {
if (value[i] === '"') {
doubleQuoteBlock = !doubleQuoteBlock;
}
if (value[i] === "'") {
singleQuoteBlock = !singleQuoteBlock;
}
if (value[i] === "(" || value[i] === "[") {
skipComma++;
}
if (value[i] === ")" || value[i] === "]") {
skipComma--;
}
if (value[i] === "," && skipComma === 0 && !(singleQuoteBlock || doubleQuoteBlock)) {
result.push(value.substr(indexReached, i - indexReached));
indexReached = i + 1;
}
}
result.push(value.substr(indexReached));
return result;
}
function isExpression(expression) {
if (expression.search(expressionSymbolsRegex) > -1) {
var parentsMatches = expression.match(exports.parentsRegex);
if (parentsMatches) {
var restOfExpression = expression.substr(expression.indexOf(parentsMatches[0]) + parentsMatches[0].length);
if (!(restOfExpression.search(expressionSymbolsRegex) > -1)) {
return false;
}
}
return true;
}
return false;
}
function getBindingOptions(name, value) {
var namedParams = [];
var params = getParamsArray(value);
if (!areNamedParams(params)) {
if (params.length === 1) {
var trimmedValue = params[0].trim();
var sourceProp;
if (isExpression(trimmedValue)) {
sourceProp = bindingConstants.bindingValueKey;
namedParams.push(bindingConstants.expression + " = " + trimmedValue);
} else {
sourceProp = trimmedValue;
}
namedParams.push(bindingConstants.sourceProperty + " = " + sourceProp);
namedParams.push(bindingConstants.twoWay + " = true");
} else {
namedParams.push(bindingConstants.sourceProperty + " = " + params[0].trim());
namedParams.push(bindingConstants.expression + " = " + params[1].trim());
var twoWay = params[2] ? params[2].toLowerCase().trim() === "true" : true;
namedParams.push(bindingConstants.twoWay + " = " + twoWay);
}
} else {
namedParams = params;
}
var bindingPropertyHandler = function(prop, value) {
var result = {};
result[namedParamConstants.propName] = prop;
if (prop === bindingConstants.twoWay) {
if (value === "true") {
result[namedParamConstants.propValue] = true;
} else {
result[namedParamConstants.propValue] = false;
}
} else {
result[namedParamConstants.propValue] = value;
}
return result;
};
var bindingOptionsParameters = parseNamedProperties(namedParams, xmlBindingProperties, bindingPropertyHandler);
var bindOptions = {
targetProperty: name
};
for (var prop in bindingOptionsParameters) {
if (bindingOptionsParameters.hasOwnProperty(prop)) {
bindOptions[prop] = bindingOptionsParameters[prop];
}
}
if (bindOptions[bindingConstants.twoWay] === undefined) {
bindOptions[bindingConstants.twoWay] = true;
}
return bindOptions;
}
exports.getBindingOptions = getBindingOptions;
var xmlBindingProperties = {
sourceProperty: true,
expression: true,
twoWay: true,
source: true,
defaultProperty: bindingConstants.sourceProperty
};
}, function(module, exports, __webpack_require__) {
var esprima = __webpack_require__(58).esprima;
var Path = __webpack_require__(59).Path;
(function(global) {
"use strict";
var expressionParseCache = Object.create(null);
function getExpression(expressionText) {
var expression = expressionParseCache[expressionText];
if (!expression) {
var delegate = new ASTDelegate();
esprima.parse(expressionText, delegate);
expression = new Expression(delegate);
expressionParseCache[expressionText] = expression;
}
return expression;
}
function Literal(value) {
this.value = value;
this.valueFn_ = undefined;
}
Literal.prototype = {
valueFn: function() {
if (!this.valueFn_) {
var value = this.value;
this.valueFn_ = function() {
return value;
};
}
return this.valueFn_;
}
};
function IdentPath(name) {
this.name = name;
this.path = Path.get(name);
}
IdentPath.prototype = {
valueFn: function() {
if (!this.valueFn_) {
var name = this.name;
var path = this.path;
this.valueFn_ = function(model, observer, changedModel) {
if (observer) observer.addPath(model, path);
if (changedModel) {
var result = path.getValueFrom(changedModel);
if (result !== undefined) {
return result;
}
}
return path.getValueFrom(model);
};
}
return this.valueFn_;
},
setValue: function(model, newValue) {
if (this.path.length == 1) {
model = findScope(model, this.path[0]);
}
return this.path.setValueFrom(model, newValue);
}
};
function MemberExpression(object, property, accessor) {
this.computed = accessor == "[";
this.dynamicDeps = typeof object == "function" || object.dynamicDeps || this.computed && !(property instanceof Literal);
this.simplePath = !this.dynamicDeps && (property instanceof IdentPath || property instanceof Literal) && (object instanceof MemberExpression || object instanceof IdentPath);
this.object = this.simplePath ? object : getFn(object);
this.property = !this.computed || this.simplePath ? property : getFn(property);
}
MemberExpression.prototype = {
get fullPath() {
if (!this.fullPath_) {
var parts = this.object instanceof MemberExpression ? this.object.fullPath.slice() : [ this.object.name ];
parts.push(this.property instanceof IdentPath ? this.property.name : this.property.value);
this.fullPath_ = Path.get(parts);
}
return this.fullPath_;
},
valueFn: function() {
if (!this.valueFn_) {
var object = this.object;
if (this.simplePath) {
var path = this.fullPath;
this.valueFn_ = function(model, observer) {
if (observer) observer.addPath(model, path);
return path.getValueFrom(model);
};
} else if (!this.computed) {
var path = Path.get(this.property.name);
this.valueFn_ = function(model, observer, filterRegistry) {
var context = object(model, observer, filterRegistry);
if (observer) observer.addPath(context, path);
return path.getValueFrom(context);
};
} else {
var property = this.property;
this.valueFn_ = function(model, observer, filterRegistry) {
var context = object(model, observer, filterRegistry);
var propName = property(model, observer, filterRegistry);
if (observer) observer.addPath(context, [ propName ]);
return context ? context[propName] : undefined;
};
}
}
return this.valueFn_;
},
setValue: function(model, newValue) {
if (this.simplePath) {
this.fullPath.setValueFrom(model, newValue);
return newValue;
}
var object = this.object(model);
var propName = this.property instanceof IdentPath ? this.property.name : this.property(model);
return object[propName] = newValue;
}
};
function Filter(name, args) {
this.name = name;
this.args = [];
for (var i = 0; i < args.length; i++) {
this.args[i] = getFn(args[i]);
}
}
Filter.prototype = {
transform: function(model, observer, filterRegistry, toModelDirection, initialArgs) {
var fn = filterRegistry[this.name];
var context = model;
if (fn) {
context = undefined;
} else {
fn = context[this.name];
if (!fn) {
console.error("Cannot find function or filter: " + this.name);
return;
}
}
if (toModelDirection) {
fn = fn.toModel;
} else if (typeof fn.toView == "function") {
fn = fn.toView;
}
if (typeof fn != "function") {
console.error("Cannot find function or filter: " + this.name);
return;
}
var args = initialArgs || [];
for (var i = 0; i < this.args.length; i++) {
args.push(getFn(this.args[i])(model, observer, filterRegistry));
}
return fn.apply(context, args);
}
};
function notImplemented() {
throw Error("Not Implemented");
}
var unaryOperators = {
"+": function(v) {
return +v;
},
"-": function(v) {
return -v;
},
"!": function(v) {
return !v;
}
};
var binaryOperators = {
"+": function(l, r) {
return l + r;
},
"-": function(l, r) {
return l - r;
},
"*": function(l, r) {
return l * r;
},
"/": function(l, r) {
return l / r;
},
"%": function(l, r) {
return l % r;
},
"<": function(l, r) {
return l < r;
},
">": function(l, r) {
return l > r;
},
"<=": function(l, r) {
return l <= r;
},
">=": function(l, r) {
return l >= r;
},
"==": function(l, r) {
return l == r;
},
"!=": function(l, r) {
return l != r;
},
"===": function(l, r) {
return l === r;
},
"!==": function(l, r) {
return l !== r;
},
"&&": function(l, r) {
return l && r;
},
"||": function(l, r) {
return l || r;
}
};
function getFn(arg) {
return typeof arg == "function" ? arg : arg.valueFn();
}
function ASTDelegate() {
this.expression = null;
this.filters = [];
this.deps = {};
this.currentPath = undefined;
this.scopeIdent = undefined;
this.indexIdent = undefined;
this.dynamicDeps = false;
}
ASTDelegate.prototype = {
createUnaryExpression: function(op, argument) {
if (!unaryOperators[op]) throw Error("Disallowed operator: " + op);
argument = getFn(argument);
return function(model, observer, filterRegistry) {
return unaryOperators[op](argument(model, observer, filterRegistry));
};
},
createBinaryExpression: function(op, left, right) {
if (!binaryOperators[op]) throw Error("Disallowed operator: " + op);
left = getFn(left);
right = getFn(right);
switch (op) {
case "||":
this.dynamicDeps = true;
return function(model, observer, filterRegistry) {
return left(model, observer, filterRegistry) || right(model, observer, filterRegistry);
};

case "&&":
this.dynamicDeps = true;
return function(model, observer, filterRegistry) {
return left(model, observer, filterRegistry) && right(model, observer, filterRegistry);
};
}
return function(model, observer, filterRegistry) {
return binaryOperators[op](left(model, observer, filterRegistry), right(model, observer, filterRegistry));
};
},
createConditionalExpression: function(test, consequent, alternate) {
test = getFn(test);
consequent = getFn(consequent);
alternate = getFn(alternate);
this.dynamicDeps = true;
return function(model, observer, filterRegistry) {
return test(model, observer, filterRegistry) ? consequent(model, observer, filterRegistry) : alternate(model, observer, filterRegistry);
};
},
createIdentifier: function(name) {
var ident = new IdentPath(name);
ident.type = "Identifier";
return ident;
},
createMemberExpression: function(accessor, object, property) {
var ex = new MemberExpression(object, property, accessor);
if (ex.dynamicDeps) this.dynamicDeps = true;
return ex;
},
createCallExpression: function(expression, args) {
if (!(expression instanceof IdentPath)) throw Error("Only identifier function invocations are allowed");
var filter = new Filter(expression.name, args);
return function(model, observer, filterRegistry) {
return filter.transform(model, observer, filterRegistry, false);
};
},
createLiteral: function(token) {
return new Literal(token.value);
},
createArrayExpression: function(elements) {
for (var i = 0; i < elements.length; i++) elements[i] = getFn(elements[i]);
return function(model, observer, filterRegistry) {
var arr = [];
for (var i = 0; i < elements.length; i++) arr.push(elements[i](model, observer, filterRegistry));
return arr;
};
},
createProperty: function(kind, key, value) {
return {
key: key instanceof IdentPath ? key.name : key.value,
value: value
};
},
createObjectExpression: function(properties) {
for (var i = 0; i < properties.length; i++) properties[i].value = getFn(properties[i].value);
return function(model, observer, filterRegistry) {
var obj = {};
for (var i = 0; i < properties.length; i++) obj[properties[i].key] = properties[i].value(model, observer, filterRegistry);
return obj;
};
},
createFilter: function(name, args) {
this.filters.push(new Filter(name, args));
},
createAsExpression: function(expression, scopeIdent) {
this.expression = expression;
this.scopeIdent = scopeIdent;
},
createInExpression: function(scopeIdent, indexIdent, expression) {
this.expression = expression;
this.scopeIdent = scopeIdent;
this.indexIdent = indexIdent;
},
createTopLevel: function(expression) {
this.expression = expression;
},
createThisExpression: notImplemented
};
function Expression(delegate) {
this.scopeIdent = delegate.scopeIdent;
this.indexIdent = delegate.indexIdent;
if (!delegate.expression) throw Error("No expression found.");
this.expression = delegate.expression;
getFn(this.expression);
this.filters = delegate.filters;
this.dynamicDeps = delegate.dynamicDeps;
}
Expression.prototype = {
getValue: function(model, isBackConvert, changedModel, observer) {
var value = getFn(this.expression)(model.context, observer, changedModel);
for (var i = 0; i < this.filters.length; i++) {
value = this.filters[i].transform(model.context, observer, model.context, isBackConvert, [ value ]);
}
return value;
},
setValue: function(model, newValue, filterRegistry) {
var count = this.filters ? this.filters.length : 0;
while (count-- > 0) {
newValue = this.filters[count].transform(model, undefined, filterRegistry, true, [ newValue ]);
}
if (this.expression.setValue) return this.expression.setValue(model, newValue);
}
};
function convertStylePropertyName(name) {
return String(name).replace(/[A-Z]/g, function(c) {
return "-" + c.toLowerCase();
});
}
var parentScopeName = "@" + Math.random().toString(36).slice(2);
function findScope(model, prop) {
while (model[parentScopeName] && !Object.prototype.hasOwnProperty.call(model, prop)) {
model = model[parentScopeName];
}
return model;
}
function isLiteralExpression(pathString) {
switch (pathString) {
case "":
return false;

case "false":
case "null":
case "true":
return true;
}
if (!isNaN(Number(pathString))) return true;
return false;
}
function PolymerExpressions() {}
PolymerExpressions.prototype = {
styleObject: function(value) {
var parts = [];
for (var key in value) {
parts.push(convertStylePropertyName(key) + ": " + value[key]);
}
return parts.join("; ");
},
tokenList: function(value) {
var tokens = [];
for (var key in value) {
if (value[key]) tokens.push(key);
}
return tokens.join(" ");
},
prepareInstancePositionChanged: function(template) {
var indexIdent = template.polymerExpressionIndexIdent_;
if (!indexIdent) return;
return function(templateInstance, index) {
templateInstance.model[indexIdent] = index;
};
},
prepareInstanceModel: function(template) {
var scopeName = template.polymerExpressionScopeIdent_;
if (!scopeName) return;
var parentScope = template.templateInstance ? template.templateInstance.model : template.model;
var indexName = template.polymerExpressionIndexIdent_;
return function(model) {
return createScopeObject(parentScope, model, scopeName, indexName);
};
}
};
var createScopeObject = "__proto__" in {} ? function(parentScope, model, scopeName, indexName) {
var scope = {};
scope[scopeName] = model;
scope[indexName] = undefined;
scope[parentScopeName] = parentScope;
scope.__proto__ = parentScope;
return scope;
} : function(parentScope, model, scopeName, indexName) {
var scope = Object.create(parentScope);
Object.defineProperty(scope, scopeName, {
value: model,
configurable: true,
writable: true
});
Object.defineProperty(scope, indexName, {
value: undefined,
configurable: true,
writable: true
});
Object.defineProperty(scope, parentScopeName, {
value: parentScope,
configurable: true,
writable: true
});
return scope;
};
global.PolymerExpressions = PolymerExpressions;
PolymerExpressions.getExpression = getExpression;
})(module.exports);
}, function(module, exports) {
(function(global) {
"use strict";
var Token, TokenName, Syntax, Messages, source, index, length, delegate, lookahead, state;
Token = {
BooleanLiteral: 1,
EOF: 2,
Identifier: 3,
Keyword: 4,
NullLiteral: 5,
NumericLiteral: 6,
Punctuator: 7,
StringLiteral: 8
};
TokenName = {};
TokenName[Token.BooleanLiteral] = "Boolean";
TokenName[Token.EOF] = "<end>";
TokenName[Token.Identifier] = "Identifier";
TokenName[Token.Keyword] = "Keyword";
TokenName[Token.NullLiteral] = "Null";
TokenName[Token.NumericLiteral] = "Numeric";
TokenName[Token.Punctuator] = "Punctuator";
TokenName[Token.StringLiteral] = "String";
Syntax = {
ArrayExpression: "ArrayExpression",
BinaryExpression: "BinaryExpression",
CallExpression: "CallExpression",
ConditionalExpression: "ConditionalExpression",
EmptyStatement: "EmptyStatement",
ExpressionStatement: "ExpressionStatement",
Identifier: "Identifier",
Literal: "Literal",
LabeledStatement: "LabeledStatement",
LogicalExpression: "LogicalExpression",
MemberExpression: "MemberExpression",
ObjectExpression: "ObjectExpression",
Program: "Program",
Property: "Property",
ThisExpression: "ThisExpression",
UnaryExpression: "UnaryExpression"
};
Messages = {
UnexpectedToken: "Unexpected token %0",
UnknownLabel: "Undefined label '%0'",
Redeclaration: "%0 '%1' has already been declared"
};
function assert(condition, message) {
if (!condition) {
throw new Error("ASSERT: " + message);
}
}
function isDecimalDigit(ch) {
return ch >= 48 && ch <= 57;
}
function isWhiteSpace(ch) {
return ch === 32 || ch === 9 || ch === 11 || ch === 12 || ch === 160 || ch >= 5760 && " ᠎             　\ufeff".indexOf(String.fromCharCode(ch)) > 0;
}
function isLineTerminator(ch) {
return ch === 10 || ch === 13 || ch === 8232 || ch === 8233;
}
function isIdentifierStart(ch) {
return ch === 36 || ch === 95 || ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
}
function isIdentifierPart(ch) {
return ch === 36 || ch === 95 || ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 48 && ch <= 57;
}
function isKeyword(id) {
return id === "this";
}
function skipWhitespace() {
while (index < length && isWhiteSpace(source.charCodeAt(index))) {
++index;
}
}
function getIdentifier() {
var start, ch;
start = index++;
while (index < length) {
ch = source.charCodeAt(index);
if (isIdentifierPart(ch)) {
++index;
} else {
break;
}
}
return source.slice(start, index);
}
function scanIdentifier() {
var start, id, type;
start = index;
id = getIdentifier();
if (id.length === 1) {
type = Token.Identifier;
} else if (isKeyword(id)) {
type = Token.Keyword;
} else if (id === "null") {
type = Token.NullLiteral;
} else if (id === "true" || id === "false") {
type = Token.BooleanLiteral;
} else {
type = Token.Identifier;
}
return {
type: type,
value: id,
range: [ start, index ]
};
}
function scanPunctuator() {
var start = index, code = source.charCodeAt(index), code2, ch1 = source[index], ch2;
switch (code) {
case 46:
case 40:
case 41:
case 59:
case 44:
case 123:
case 125:
case 91:
case 93:
case 58:
case 63:
++index;
return {
type: Token.Punctuator,
value: String.fromCharCode(code),
range: [ start, index ]
};

default:
code2 = source.charCodeAt(index + 1);
if (code2 === 61) {
switch (code) {
case 37:
case 38:
case 42:
case 43:
case 45:
case 47:
case 60:
case 62:
case 124:
index += 2;
return {
type: Token.Punctuator,
value: String.fromCharCode(code) + String.fromCharCode(code2),
range: [ start, index ]
};

case 33:
case 61:
index += 2;
if (source.charCodeAt(index) === 61) {
++index;
}
return {
type: Token.Punctuator,
value: source.slice(start, index),
range: [ start, index ]
};

default:
break;
}
}
break;
}
ch2 = source[index + 1];
if (ch1 === ch2 && "&|".indexOf(ch1) >= 0) {
index += 2;
return {
type: Token.Punctuator,
value: ch1 + ch2,
range: [ start, index ]
};
}
if ("<>=!+-*%&|^/".indexOf(ch1) >= 0) {
++index;
return {
type: Token.Punctuator,
value: ch1,
range: [ start, index ]
};
}
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
function scanNumericLiteral() {
var number, start, ch;
ch = source[index];
assert(isDecimalDigit(ch.charCodeAt(0)) || ch === ".", "Numeric literal must start with a decimal digit or a decimal point");
start = index;
number = "";
if (ch !== ".") {
number = source[index++];
ch = source[index];
if (number === "0") {
if (ch && isDecimalDigit(ch.charCodeAt(0))) {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
}
while (isDecimalDigit(source.charCodeAt(index))) {
number += source[index++];
}
ch = source[index];
}
if (ch === ".") {
number += source[index++];
while (isDecimalDigit(source.charCodeAt(index))) {
number += source[index++];
}
ch = source[index];
}
if (ch === "e" || ch === "E") {
number += source[index++];
ch = source[index];
if (ch === "+" || ch === "-") {
number += source[index++];
}
if (isDecimalDigit(source.charCodeAt(index))) {
while (isDecimalDigit(source.charCodeAt(index))) {
number += source[index++];
}
} else {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
}
if (isIdentifierStart(source.charCodeAt(index))) {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
return {
type: Token.NumericLiteral,
value: parseFloat(number),
range: [ start, index ]
};
}
function scanStringLiteral() {
var str = "", quote, start, ch, octal = false;
quote = source[index];
assert(quote === "'" || quote === '"', "String literal must starts with a quote");
start = index;
++index;
while (index < length) {
ch = source[index++];
if (ch === quote) {
quote = "";
break;
} else if (ch === "\\") {
ch = source[index++];
if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
switch (ch) {
case "n":
str += "\n";
break;

case "r":
str += "\r";
break;

case "t":
str += "	";
break;

case "b":
str += "\b";
break;

case "f":
str += "\f";
break;

case "v":
str += "";
break;

default:
str += ch;
break;
}
} else {
if (ch === "\r" && source[index] === "\n") {
++index;
}
}
} else if (isLineTerminator(ch.charCodeAt(0))) {
break;
} else {
str += ch;
}
}
if (quote !== "") {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
return {
type: Token.StringLiteral,
value: str,
octal: octal,
range: [ start, index ]
};
}
function isIdentifierName(token) {
return token.type === Token.Identifier || token.type === Token.Keyword || token.type === Token.BooleanLiteral || token.type === Token.NullLiteral;
}
function advance() {
var ch;
skipWhitespace();
if (index >= length) {
return {
type: Token.EOF,
range: [ index, index ]
};
}
ch = source.charCodeAt(index);
if (ch === 40 || ch === 41 || ch === 58) {
return scanPunctuator();
}
if (ch === 39 || ch === 34) {
return scanStringLiteral();
}
if (isIdentifierStart(ch)) {
return scanIdentifier();
}
if (ch === 46) {
if (isDecimalDigit(source.charCodeAt(index + 1))) {
return scanNumericLiteral();
}
return scanPunctuator();
}
if (isDecimalDigit(ch)) {
return scanNumericLiteral();
}
return scanPunctuator();
}
function lex() {
var token;
token = lookahead;
index = token.range[1];
lookahead = advance();
index = token.range[1];
return token;
}
function peek() {
var pos;
pos = index;
lookahead = advance();
index = pos;
}
function throwError(token, messageFormat) {
var error, args = Array.prototype.slice.call(arguments, 2), msg = messageFormat.replace(/%(\d)/g, function(whole, index) {
assert(index < args.length, "Message reference must be in range");
return args[index];
});
error = new Error(msg);
error.index = index;
error.description = msg;
throw error;
}
function throwUnexpected(token) {
throwError(token, Messages.UnexpectedToken, token.value);
}
function expect(value) {
var token = lex();
if (token.type !== Token.Punctuator || token.value !== value) {
throwUnexpected(token);
}
}
function match(value) {
return lookahead.type === Token.Punctuator && lookahead.value === value;
}
function matchKeyword(keyword) {
return lookahead.type === Token.Keyword && lookahead.value === keyword;
}
function consumeSemicolon() {
if (source.charCodeAt(index) === 59) {
lex();
return;
}
skipWhitespace();
if (match(";")) {
lex();
return;
}
if (lookahead.type !== Token.EOF && !match("}")) {
throwUnexpected(lookahead);
}
}
function parseArrayInitialiser() {
var elements = [];
expect("[");
while (!match("]")) {
if (match(",")) {
lex();
elements.push(null);
} else {
elements.push(parseExpression());
if (!match("]")) {
expect(",");
}
}
}
expect("]");
return delegate.createArrayExpression(elements);
}
function parseObjectPropertyKey() {
var token;
skipWhitespace();
token = lex();
if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
return delegate.createLiteral(token);
}
return delegate.createIdentifier(token.value);
}
function parseObjectProperty() {
var token, key;
token = lookahead;
skipWhitespace();
if (token.type === Token.EOF || token.type === Token.Punctuator) {
throwUnexpected(token);
}
key = parseObjectPropertyKey();
expect(":");
return delegate.createProperty("init", key, parseExpression());
}
function parseObjectInitialiser() {
var properties = [];
expect("{");
while (!match("}")) {
properties.push(parseObjectProperty());
if (!match("}")) {
expect(",");
}
}
expect("}");
return delegate.createObjectExpression(properties);
}
function parseGroupExpression() {
var expr;
expect("(");
expr = parseExpression();
expect(")");
return expr;
}
function parsePrimaryExpression() {
var type, token, expr;
if (match("(")) {
return parseGroupExpression();
}
type = lookahead.type;
if (type === Token.Identifier) {
expr = delegate.createIdentifier(lex().value);
} else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
expr = delegate.createLiteral(lex());
} else if (type === Token.Keyword) {
if (matchKeyword("this")) {
lex();
expr = delegate.createThisExpression();
}
} else if (type === Token.BooleanLiteral) {
token = lex();
token.value = token.value === "true";
expr = delegate.createLiteral(token);
} else if (type === Token.NullLiteral) {
token = lex();
token.value = null;
expr = delegate.createLiteral(token);
} else if (match("[")) {
expr = parseArrayInitialiser();
} else if (match("{")) {
expr = parseObjectInitialiser();
}
if (expr) {
return expr;
}
throwUnexpected(lex());
}
function parseArguments() {
var args = [];
expect("(");
if (!match(")")) {
while (index < length) {
args.push(parseExpression());
if (match(")")) {
break;
}
expect(",");
}
}
expect(")");
return args;
}
function parseNonComputedProperty() {
var token;
token = lex();
if (!isIdentifierName(token)) {
throwUnexpected(token);
}
return delegate.createIdentifier(token.value);
}
function parseNonComputedMember() {
expect(".");
return parseNonComputedProperty();
}
function parseComputedMember() {
var expr;
expect("[");
expr = parseExpression();
expect("]");
return expr;
}
function parseLeftHandSideExpression() {
var expr, args, property;
expr = parsePrimaryExpression();
while (true) {
if (match("[")) {
property = parseComputedMember();
expr = delegate.createMemberExpression("[", expr, property);
} else if (match(".")) {
property = parseNonComputedMember();
expr = delegate.createMemberExpression(".", expr, property);
} else if (match("(")) {
args = parseArguments();
expr = delegate.createCallExpression(expr, args);
} else {
break;
}
}
return expr;
}
var parsePostfixExpression = parseLeftHandSideExpression;
function parseUnaryExpression() {
var token, expr;
if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
expr = parsePostfixExpression();
} else if (match("+") || match("-") || match("!")) {
token = lex();
expr = parseUnaryExpression();
expr = delegate.createUnaryExpression(token.value, expr);
} else if (matchKeyword("delete") || matchKeyword("void") || matchKeyword("typeof")) {
throwError({}, Messages.UnexpectedToken);
} else {
expr = parsePostfixExpression();
}
return expr;
}
function binaryPrecedence(token) {
var prec = 0;
if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
return 0;
}
switch (token.value) {
case "||":
prec = 1;
break;

case "&&":
prec = 2;
break;

case "==":
case "!=":
case "===":
case "!==":
prec = 6;
break;

case "<":
case ">":
case "<=":
case ">=":
case "instanceof":
prec = 7;
break;

case "in":
prec = 7;
break;

case "+":
case "-":
prec = 9;
break;

case "*":
case "/":
case "%":
prec = 11;
break;

default:
break;
}
return prec;
}
function parseBinaryExpression() {
var expr, token, prec, stack, right, operator, left, i;
left = parseUnaryExpression();
token = lookahead;
prec = binaryPrecedence(token);
if (prec === 0) {
return left;
}
token.prec = prec;
lex();
right = parseUnaryExpression();
stack = [ left, token, right ];
while ((prec = binaryPrecedence(lookahead)) > 0) {
while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {
right = stack.pop();
operator = stack.pop().value;
left = stack.pop();
expr = delegate.createBinaryExpression(operator, left, right);
stack.push(expr);
}
token = lex();
token.prec = prec;
stack.push(token);
expr = parseUnaryExpression();
stack.push(expr);
}
i = stack.length - 1;
expr = stack[i];
while (i > 1) {
expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
i -= 2;
}
return expr;
}
function parseConditionalExpression() {
var expr, consequent, alternate;
expr = parseBinaryExpression();
if (match("?")) {
lex();
consequent = parseConditionalExpression();
expect(":");
alternate = parseConditionalExpression();
expr = delegate.createConditionalExpression(expr, consequent, alternate);
}
return expr;
}
var parseExpression = parseConditionalExpression;
function parseFilter() {
var identifier, args;
identifier = lex();
if (identifier.type !== Token.Identifier) {
throwUnexpected(identifier);
}
args = match("(") ? parseArguments() : [];
return delegate.createFilter(identifier.value, args);
}
function parseFilters() {
while (match("|")) {
lex();
parseFilter();
}
}
function parseTopLevel() {
skipWhitespace();
peek();
var expr = parseExpression();
if (expr) {
if (lookahead.value === "," || lookahead.value == "in" && expr.type === Syntax.Identifier) {
parseInExpression(expr);
} else {
parseFilters();
if (lookahead.value === "as") {
parseAsExpression(expr);
} else {
delegate.createTopLevel(expr);
}
}
}
if (lookahead.type !== Token.EOF) {
throwUnexpected(lookahead);
}
}
function parseAsExpression(expr) {
lex();
var identifier = lex().value;
delegate.createAsExpression(expr, identifier);
}
function parseInExpression(identifier) {
var indexName;
if (lookahead.value === ",") {
lex();
if (lookahead.type !== Token.Identifier) throwUnexpected(lookahead);
indexName = lex().value;
}
lex();
var expr = parseExpression();
parseFilters();
delegate.createInExpression(identifier.name, indexName, expr);
}
function parse(code, inDelegate) {
delegate = inDelegate;
source = code;
index = 0;
length = source.length;
lookahead = null;
state = {
labelSet: {}
};
return parseTopLevel();
}
global.esprima = {
parse: parse
};
})(module.exports);
}, function(module, exports) {
"use strict";
function detectEval() {
if (typeof chrome !== "undefined" && chrome.app && chrome.app.runtime) {
return false;
}
if (typeof navigator != "undefined" && navigator.getDeviceStorage) {
return false;
}
try {
var f = new Function("", "return true;");
return f();
} catch (ex) {
return false;
}
}
var hasEval = detectEval();
function isIndex(s) {
return +s === s >>> 0 && s !== "";
}
function toNumber(s) {
return +s;
}
function isObject(obj) {
return obj === Object(obj);
}
var numberIsNaN = Number.isNaN || function(value) {
return typeof value === "number" && isNaN(value);
};
function areSameValue(left, right) {
if (left === right) return left !== 0 || 1 / left === 1 / right;
if (numberIsNaN(left) && numberIsNaN(right)) return true;
return left !== left && right !== right;
}
var createObject = "__proto__" in {} ? function(obj) {
return obj;
} : function(obj) {
var proto = obj.__proto__;
if (!proto) return obj;
var newObject = Object.create(proto);
Object.getOwnPropertyNames(obj).forEach(function(name) {
Object.defineProperty(newObject, name, Object.getOwnPropertyDescriptor(obj, name));
});
return newObject;
};
var identStart = "[$_a-zA-Z]";
var identPart = "[$_a-zA-Z0-9]";
var identRegExp = new RegExp("^" + identStart + "+" + identPart + "*" + "$");
function getPathCharType(char) {
if (char === undefined) return "eof";
var code = char.charCodeAt(0);
switch (code) {
case 91:
case 93:
case 46:
case 34:
case 39:
case 48:
return char;

case 95:
case 36:
return "ident";

case 32:
case 9:
case 10:
case 13:
case 160:
case 65279:
case 8232:
case 8233:
return "ws";
}
if (97 <= code && code <= 122 || 65 <= code && code <= 90) return "ident";
if (49 <= code && code <= 57) return "number";
return "else";
}
var pathStateMachine = {
beforePath: {
ws: [ "beforePath" ],
ident: [ "inIdent", "append" ],
"[": [ "beforeElement" ],
eof: [ "afterPath" ]
},
inPath: {
ws: [ "inPath" ],
".": [ "beforeIdent" ],
"[": [ "beforeElement" ],
eof: [ "afterPath" ]
},
beforeIdent: {
ws: [ "beforeIdent" ],
ident: [ "inIdent", "append" ]
},
inIdent: {
ident: [ "inIdent", "append" ],
0: [ "inIdent", "append" ],
number: [ "inIdent", "append" ],
ws: [ "inPath", "push" ],
".": [ "beforeIdent", "push" ],
"[": [ "beforeElement", "push" ],
eof: [ "afterPath", "push" ]
},
beforeElement: {
ws: [ "beforeElement" ],
0: [ "afterZero", "append" ],
number: [ "inIndex", "append" ],
"'": [ "inSingleQuote", "append", "" ],
'"': [ "inDoubleQuote", "append", "" ]
},
afterZero: {
ws: [ "afterElement", "push" ],
"]": [ "inPath", "push" ]
},
inIndex: {
0: [ "inIndex", "append" ],
number: [ "inIndex", "append" ],
ws: [ "afterElement" ],
"]": [ "inPath", "push" ]
},
inSingleQuote: {
"'": [ "afterElement" ],
eof: [ "error" ],
"else": [ "inSingleQuote", "append" ]
},
inDoubleQuote: {
'"': [ "afterElement" ],
eof: [ "error" ],
"else": [ "inDoubleQuote", "append" ]
},
afterElement: {
ws: [ "afterElement" ],
"]": [ "inPath", "push" ]
}
};
function noop() {}
function parsePath(path) {
var keys = [];
var index = -1;
var c, newChar, key, type, transition, action, typeMap, mode = "beforePath";
var actions = {
push: function() {
if (key === undefined) return;
keys.push(key);
key = undefined;
},
append: function() {
if (key === undefined) key = newChar; else key += newChar;
}
};
function maybeUnescapeQuote() {
if (index >= path.length) return;
var nextChar = path[index + 1];
if (mode == "inSingleQuote" && nextChar == "'" || mode == "inDoubleQuote" && nextChar == '"') {
index++;
newChar = nextChar;
actions.append();
return true;
}
}
while (mode) {
index++;
c = path[index];
if (c == "\\" && maybeUnescapeQuote(mode)) continue;
type = getPathCharType(c);
typeMap = pathStateMachine[mode];
transition = typeMap[type] || typeMap["else"] || "error";
if (transition == "error") return;
mode = transition[0];
action = actions[transition[1]] || noop;
newChar = transition[2] === undefined ? c : transition[2];
action();
if (mode === "afterPath") {
return keys;
}
}
return;
}
function isIdent(s) {
return identRegExp.test(s);
}
var constructorIsPrivate = {};
function Path(parts, privateToken) {
if (privateToken !== constructorIsPrivate) throw Error("Use Path.get to retrieve path objects");
for (var i = 0; i < parts.length; i++) {
this.push(String(parts[i]));
}
if (hasEval && this.length) {
this.getValueFrom = this.compiledGetValueFromFn();
}
}
var pathCache = {};
function getPath(pathString) {
if (pathString instanceof Path) return pathString;
if (pathString == null || pathString.length == 0) pathString = "";
if (typeof pathString != "string") {
if (isIndex(pathString.length)) {
return new Path(pathString, constructorIsPrivate);
}
pathString = String(pathString);
}
var path = pathCache[pathString];
if (path) return path;
var parts = parsePath(pathString);
if (!parts) return invalidPath;
var path = new Path(parts, constructorIsPrivate);
pathCache[pathString] = path;
return path;
}
Path.get = getPath;
function formatAccessor(key) {
if (isIndex(key)) {
return "[" + key + "]";
} else {
return '["' + key.replace(/"/g, '\\"') + '"]';
}
}
Path.prototype = createObject({
__proto__: [],
valid: true,
toString: function() {
var pathString = "";
for (var i = 0; i < this.length; i++) {
var key = this[i];
if (isIdent(key)) {
pathString += i ? "." + key : key;
} else {
pathString += formatAccessor(key);
}
}
return pathString;
},
getValueFrom: function(obj, directObserver) {
for (var i = 0; i < this.length; i++) {
if (obj == null) return;
obj = obj[this[i]];
}
return obj;
},
iterateObjects: function(obj, observe) {
for (var i = 0; i < this.length; i++) {
if (i) obj = obj[this[i - 1]];
if (!isObject(obj)) return;
observe(obj, this[i]);
}
},
compiledGetValueFromFn: function() {
var str = "";
var pathString = "obj";
str += "if (obj != null";
var i = 0;
var key;
for (;i < this.length - 1; i++) {
key = this[i];
pathString += isIdent(key) ? "." + key : formatAccessor(key);
str += " &&\n     " + pathString + " != null";
}
str += ")\n";
var key = this[i];
pathString += isIdent(key) ? "." + key : formatAccessor(key);
str += "  return " + pathString + ";\nelse\n  return undefined;";
return new Function("obj", str);
},
setValueFrom: function(obj, value) {
if (!this.length) return false;
for (var i = 0; i < this.length - 1; i++) {
if (!isObject(obj)) return false;
obj = obj[this[i]];
}
if (!isObject(obj)) return false;
obj[this[i]] = value;
return true;
}
});
var invalidPath = new Path("", constructorIsPrivate);
invalidPath.valid = false;
invalidPath.getValueFrom = invalidPath.setValueFrom = function() {};
exports.Path = Path;
}, function(module, exports, __webpack_require__) {
var formattedStringCommon = __webpack_require__(61);
var types = __webpack_require__(14);
global.moduleMerge(formattedStringCommon, exports);
var FormattedString = function(_super) {
__extends(FormattedString, _super);
function FormattedString() {
_super.apply(this, arguments);
}
FormattedString.prototype.createFormattedStringCore = function() {
var ssb = new android.text.SpannableStringBuilder();
var i;
var spanStart = 0;
var spanLength = 0;
var spanText = "";
for (i = 0; i < this.spans.length; i++) {
var span = this.spans.getItem(i);
spanText = types.toUIString(span.text);
spanLength = spanText.length;
if (spanLength !== 0) {
ssb.insert(spanStart, spanText);
span.updateSpanModifiers(this);
var p;
for (p = 0; p < span.spanModifiers.length; p++) {
ssb.setSpan(span.spanModifiers[p], spanStart, spanStart + spanLength, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
}
spanStart += spanLength;
}
}
this._formattedText = ssb;
};
return FormattedString;
}(formattedStringCommon.FormattedString);
exports.FormattedString = FormattedString;
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(18);
var observableArray = __webpack_require__(62);
var types = __webpack_require__(14);
var colorModule = __webpack_require__(27);
var knownCollections;
(function(knownCollections) {
knownCollections.spans = "spans";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
var CHILD_SPAN = "Span";
var CHILD_FORMATTED_TEXT = "formattedText";
var CHILD_FORMATTED_STRING = "FormattedString";
var FormattedString = function(_super) {
__extends(FormattedString, _super);
function FormattedString() {
_super.call(this);
this._spans = new observableArray.ObservableArray();
this._spans.addEventListener(observableArray.ObservableArray.changeEvent, this.onSpansCollectionChanged, this);
this._isDirty = true;
}
Object.defineProperty(FormattedString.prototype, "parent", {
get: function() {
return this._parent;
},
set: function(value) {
if (this._parent !== value) {
this._parent = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "fontFamily", {
get: function() {
return this._fontFamily;
},
set: function(value) {
if (this._fontFamily !== value) {
this._fontFamily = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "fontSize", {
get: function() {
return this._fontSize;
},
set: function(value) {
var fSize;
if (types.isString(value)) {
fSize = parseInt(value);
} else {
fSize = value;
}
if (this._fontSize !== fSize) {
this._fontSize = fSize;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "foregroundColor", {
get: function() {
return this._foregroundColor;
},
set: function(value) {
var foreColor;
if (types.isString(value)) {
foreColor = new colorModule.Color(value);
} else {
foreColor = value;
}
if (this._foregroundColor !== foreColor) {
this._foregroundColor = foreColor;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "backgroundColor", {
get: function() {
return this._backgroundColor;
},
set: function(value) {
var backColor;
if (types.isString(value)) {
backColor = new colorModule.Color(value);
} else {
backColor = value;
}
if (this._backgroundColor !== backColor) {
this._backgroundColor = backColor;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "underline", {
get: function() {
return this._underline;
},
set: function(value) {
var underlineIntValue;
if (types.isString(value)) {
underlineIntValue = parseInt(value);
} else {
underlineIntValue = value;
}
if (this._underline !== underlineIntValue) {
this._underline = underlineIntValue;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "strikethrough", {
get: function() {
return this._strikethrough;
},
set: function(value) {
var strikethroughIntValue;
if (types.isString(value)) {
strikethroughIntValue = parseInt(value);
} else {
strikethroughIntValue = value;
}
if (this._strikethrough !== strikethroughIntValue) {
this._strikethrough = strikethroughIntValue;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "fontAttributes", {
get: function() {
return this._fontAttributes;
},
set: function(value) {
if (this._fontAttributes !== value) {
this._fontAttributes = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "spans", {
get: function() {
if (!this._spans) {
this._spans = new observableArray.ObservableArray();
}
return this._spans;
},
enumerable: true,
configurable: true
});
FormattedString.prototype.onSpansCollectionChanged = function(eventData) {
var i;
if (eventData.addedCount > 0) {
for (i = 0; i < eventData.addedCount; i++) {
var addedSpan = eventData.object.getItem(eventData.index + i);
addedSpan.parentFormattedString = this;
addedSpan.addEventListener(observable.Observable.propertyChangeEvent, this.onSpanChanged, this);
}
}
if (eventData.removed && eventData.removed.length > 0) {
var p;
for (p = 0; p < eventData.removed.length; p++) {
var removedSpan = eventData.removed[p];
removedSpan.removeEventListener(observable.Observable.propertyChangeEvent, this.onSpanChanged, this);
}
}
this.updateFormattedText(true);
};
FormattedString.prototype.onSpanChanged = function(eventData) {
this.updateFormattedText(true);
};
FormattedString.prototype.updateFormattedText = function(isDirty) {
var shouldUpdate = isDirty || this._isDirty;
if (shouldUpdate) {
this.createFormattedStringCore();
this._isDirty = false;
this.notify(this._createPropertyChangeData("", this));
}
};
FormattedString.prototype.createFormattedStringCore = function() {};
FormattedString.prototype.toString = function() {
var result = "";
var i;
for (i = 0; i < this._spans.length; i++) {
result += this._spans.getItem(i).text;
}
return result;
};
FormattedString.prototype._addArrayFromBuilder = function(name, value) {
var i;
var span;
if (name === knownCollections.spans) {
for (i = 0; i < value.length; i++) {
span = value[i];
this.spans.push(span);
}
}
};
FormattedString.prototype.updateSpansBindingContext = function(newBindingContext) {
var i;
for (i = 0; i < this.spans.length; i++) {
var span = this.spans.getItem(i);
span.bindingContext = newBindingContext;
}
};
FormattedString.prototype._addChildFromBuilder = function(name, value) {
if (name === CHILD_SPAN) {
this.spans.push(value);
}
};
FormattedString.addFormattedStringToView = function(view, name, value) {
if (name === CHILD_SPAN) {
if (!view.formattedText) {
view.formattedText = new FormattedString();
}
view.formattedText.spans.push(value);
} else if (name === CHILD_FORMATTED_TEXT || name === CHILD_FORMATTED_STRING) {
view.formattedText = value;
}
};
return FormattedString;
}(observable.Observable);
exports.FormattedString = FormattedString;
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(18);
var types = __webpack_require__(14);
var ChangeType = function() {
function ChangeType() {}
ChangeType.Add = "add";
ChangeType.Delete = "delete";
ChangeType.Update = "update";
ChangeType.Splice = "splice";
return ChangeType;
}();
exports.ChangeType = ChangeType;
var CHANGE = "change";
var ObservableArray = function(_super) {
__extends(ObservableArray, _super);
function ObservableArray() {
_super.call(this);
if (arguments.length === 1 && Array.isArray(arguments[0])) {
this._array = arguments[0].slice();
} else {
this._array = Array.apply(null, arguments);
}
this._addArgs = {
eventName: CHANGE,
object: this,
action: ChangeType.Add,
index: null,
removed: new Array(),
addedCount: 1
};
this._deleteArgs = {
eventName: CHANGE,
object: this,
action: ChangeType.Delete,
index: null,
removed: null,
addedCount: 0
};
}
ObservableArray.prototype.getItem = function(index) {
return this._array[index];
};
ObservableArray.prototype.setItem = function(index, value) {
var oldValue = this._array[index];
this._array[index] = value;
this.notify({
eventName: CHANGE,
object: this,
action: ChangeType.Update,
index: index,
removed: [ oldValue ],
addedCount: 1
});
};
Object.defineProperty(ObservableArray.prototype, "length", {
get: function() {
return this._array.length;
},
set: function(value) {
if (types.isNumber(value) && this._array && this._array.length !== value) {
this.splice(value, this._array.length - value);
}
},
enumerable: true,
configurable: true
});
ObservableArray.prototype.toString = function() {
return this._array.toString();
};
ObservableArray.prototype.toLocaleString = function() {
return this._array.toLocaleString();
};
ObservableArray.prototype.concat = function() {
this._addArgs.index = this._array.length;
var result = this._array.concat.apply(this._array, arguments);
return result;
};
ObservableArray.prototype.join = function(separator) {
return this._array.join(separator);
};
ObservableArray.prototype.pop = function() {
this._deleteArgs.index = this._array.length - 1;
var result = this._array.pop();
this._deleteArgs.removed = [ result ];
this.notify(this._deleteArgs);
this._notifyLengthChange();
return result;
};
ObservableArray.prototype.push = function() {
this._addArgs.index = this._array.length;
if (arguments.length === 1 && Array.isArray(arguments[0])) {
var source = arguments[0];
for (var i = 0, l = source.length; i < l; i++) {
this._array.push(source[i]);
}
} else {
this._array.push.apply(this._array, arguments);
}
this._addArgs.addedCount = this._array.length - this._addArgs.index;
this.notify(this._addArgs);
this._notifyLengthChange();
return this._array.length;
};
ObservableArray.prototype._notifyLengthChange = function() {
var lengthChangedData = this._createPropertyChangeData("length", this._array.length);
this.notify(lengthChangedData);
};
ObservableArray.prototype.reverse = function() {
return this._array.reverse();
};
ObservableArray.prototype.shift = function() {
var result = this._array.shift();
this._deleteArgs.index = 0;
this._deleteArgs.removed = [ result ];
this.notify(this._deleteArgs);
this._notifyLengthChange();
return result;
};
ObservableArray.prototype.slice = function(start, end) {
return this._array.slice(start, end);
};
ObservableArray.prototype.sort = function(compareFn) {
return this._array.sort(compareFn);
};
ObservableArray.prototype.splice = function(start, deleteCount) {
var length = this._array.length;
var result = this._array.splice.apply(this._array, arguments);
this.notify({
eventName: CHANGE,
object: this,
action: ChangeType.Splice,
index: start,
removed: result,
addedCount: this._array.length > length ? this._array.length - length : 0
});
if (this._array.length !== length) {
this._notifyLengthChange();
}
return result;
};
ObservableArray.prototype.unshift = function() {
var length = this._array.length;
var result = this._array.unshift.apply(this._array, arguments);
this._addArgs.index = 0;
this._addArgs.addedCount = result - length;
this.notify(this._addArgs);
this._notifyLengthChange();
return result;
};
ObservableArray.prototype.indexOf = function(searchElement, fromIndex) {
var index = fromIndex ? fromIndex : 0;
for (var i = index, l = this._array.length; i < l; i++) {
if (this._array[i] === searchElement) {
return i;
}
}
return -1;
};
ObservableArray.prototype.lastIndexOf = function(searchElement, fromIndex) {
var index = fromIndex ? fromIndex : this._array.length - 1;
for (var i = index; i >= 0; i--) {
if (this._array[i] === searchElement) {
return i;
}
}
return -1;
};
ObservableArray.prototype.every = function(callbackfn, thisArg) {
return this._array.every(callbackfn, thisArg);
};
ObservableArray.prototype.some = function(callbackfn, thisArg) {
return this._array.some(callbackfn, thisArg);
};
ObservableArray.prototype.forEach = function(callbackfn, thisArg) {
this._array.forEach(callbackfn, thisArg);
};
ObservableArray.prototype.map = function(callbackfn, thisArg) {
return this._array.map(callbackfn, thisArg);
};
ObservableArray.prototype.filter = function(callbackfn, thisArg) {
return this._array.filter(callbackfn, thisArg);
};
ObservableArray.prototype.reduce = function(callbackfn, initialValue) {
return this._array.reduce(callbackfn, initialValue);
};
ObservableArray.prototype.reduceRight = function(callbackfn, initialValue) {
return this._array.reduceRight(callbackfn, initialValue);
};
ObservableArray.changeEvent = CHANGE;
return ObservableArray;
}(observable.Observable);
exports.ObservableArray = ObservableArray;
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(22);
var style = __webpack_require__(15);
var enums = __webpack_require__(24);
var TextBaseStyler = function() {
function TextBaseStyler() {}
TextBaseStyler.setColorProperty = function(view, newValue) {
view._nativeView.setTextColor(newValue);
};
TextBaseStyler.resetColorProperty = function(view, nativeValue) {
view._nativeView.setTextColor(nativeValue);
};
TextBaseStyler.getNativeColorValue = function(view) {
return view._nativeView.getTextColors().getDefaultColor();
};
TextBaseStyler.setFontInternalProperty = function(view, newValue, nativeValue) {
var tv = view._nativeView;
var fontValue = newValue;
var typeface = fontValue.getAndroidTypeface();
if (typeface) {
tv.setTypeface(typeface);
} else {
tv.setTypeface(nativeValue.typeface);
}
if (fontValue.fontSize) {
tv.setTextSize(fontValue.fontSize);
} else {
tv.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
};
TextBaseStyler.resetFontInternalProperty = function(view, nativeValue) {
var tv = view._nativeView;
if (tv && nativeValue) {
tv.setTypeface(nativeValue.typeface);
tv.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
};
TextBaseStyler.getNativeFontInternalValue = function(view) {
var tv = view._nativeView;
return {
typeface: tv.getTypeface(),
size: tv.getTextSize()
};
};
TextBaseStyler.setTextAlignmentProperty = function(view, newValue) {
var verticalGravity = view._nativeView.getGravity() & android.view.Gravity.VERTICAL_GRAVITY_MASK;
switch (newValue) {
case enums.TextAlignment.left:
view._nativeView.setGravity(android.view.Gravity.LEFT | verticalGravity);
break;

case enums.TextAlignment.center:
view._nativeView.setGravity(android.view.Gravity.CENTER_HORIZONTAL | verticalGravity);
break;

case enums.TextAlignment.right:
view._nativeView.setGravity(android.view.Gravity.RIGHT | verticalGravity);
break;

default:
break;
}
};
TextBaseStyler.resetTextAlignmentProperty = function(view, nativeValue) {
view._nativeView.setGravity(nativeValue);
};
TextBaseStyler.getNativeTextAlignmentValue = function(view) {
return view._nativeView.getGravity();
};
TextBaseStyler.setTextDecorationProperty = function(view, newValue) {
utils.ad.setTextDecoration(view._nativeView, newValue);
};
TextBaseStyler.resetTextDecorationProperty = function(view, nativeValue) {
utils.ad.setTextDecoration(view._nativeView, enums.TextDecoration.none);
};
TextBaseStyler.setTextTransformProperty = function(view, newValue) {
utils.ad.setTextTransform(view, newValue);
};
TextBaseStyler.resetTextTransformProperty = function(view, nativeValue) {
utils.ad.setTextTransform(view, enums.TextTransform.none);
};
TextBaseStyler.setWhiteSpaceProperty = function(view, newValue) {
utils.ad.setWhiteSpace(view._nativeView, newValue);
};
TextBaseStyler.resetWhiteSpaceProperty = function(view, nativeValue) {
utils.ad.setWhiteSpace(view._nativeView, enums.WhiteSpace.normal);
};
TextBaseStyler.getLetterSpacingProperty = function(view) {
return view.android.getLetterSpacing ? view.android.getLetterSpacing() : 0;
};
TextBaseStyler.setLetterSpacingProperty = function(view, newValue) {
if (view.android.setLetterSpacing) {
view.android.setLetterSpacing(utils.layout.toDeviceIndependentPixels(newValue));
}
};
TextBaseStyler.resetLetterSpacingProperty = function(view, nativeValue) {
if (view.android.setLetterSpacing) {
view.android.setLetterSpacing(nativeValue);
}
};
TextBaseStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setColorProperty, TextBaseStyler.resetColorProperty, TextBaseStyler.getNativeColorValue), "TextBase");
style.registerHandler(style.fontInternalProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setFontInternalProperty, TextBaseStyler.resetFontInternalProperty, TextBaseStyler.getNativeFontInternalValue), "TextBase");
style.registerHandler(style.textAlignmentProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextAlignmentProperty, TextBaseStyler.resetTextAlignmentProperty, TextBaseStyler.getNativeTextAlignmentValue), "TextBase");
style.registerHandler(style.textDecorationProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextDecorationProperty, TextBaseStyler.resetTextDecorationProperty), "TextBase");
style.registerHandler(style.textTransformProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextTransformProperty, TextBaseStyler.resetTextTransformProperty), "TextBase");
style.registerHandler(style.whiteSpaceProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setWhiteSpaceProperty, TextBaseStyler.resetWhiteSpaceProperty), "TextBase");
style.registerHandler(style.letterSpacingProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setLetterSpacingProperty, TextBaseStyler.resetLetterSpacingProperty, TextBaseStyler.getLetterSpacingProperty), "TextBase");
};
return TextBaseStyler;
}();
exports.TextBaseStyler = TextBaseStyler;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var common = __webpack_require__(65);
global.moduleMerge(common, exports);
var utils;
function ensureUtils() {
if (!utils) {
utils = __webpack_require__(22);
}
}
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(19);
}
}
var enums;
function ensureEnums() {
if (!enums) {
enums = __webpack_require__(24);
}
}
var ImageSource = function() {
function ImageSource() {}
ImageSource.prototype.loadFromResource = function(name) {
this.android = null;
ensureUtils();
var res = utils.ad.getApplicationContext().getResources();
if (res) {
var identifier = res.getIdentifier(name, "drawable", utils.ad.getApplication().getPackageName());
if (0 < identifier) {
var bitmapDrawable = res.getDrawable(identifier);
if (bitmapDrawable && bitmapDrawable.getBitmap) {
this.android = bitmapDrawable.getBitmap();
}
}
}
return this.android != null;
};
ImageSource.prototype.loadFromFile = function(path) {
ensureFS();
var fileName = types.isString(path) ? path.trim() : "";
if (fileName.indexOf("~/") === 0) {
fileName = fs.path.join(fs.knownFolders.currentApp().path, fileName.replace("~/", ""));
}
this.android = android.graphics.BitmapFactory.decodeFile(fileName, null);
return this.android != null;
};
ImageSource.prototype.loadFromData = function(data) {
this.android = android.graphics.BitmapFactory.decodeStream(data);
return this.android != null;
};
ImageSource.prototype.loadFromBase64 = function(source) {
if (types.isString(source)) {
var bytes = android.util.Base64.decode(source, android.util.Base64.DEFAULT);
this.android = android.graphics.BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
}
return this.android != null;
};
ImageSource.prototype.setNativeSource = function(source) {
this.android = source;
return source != null;
};
ImageSource.prototype.saveToFile = function(path, format, quality) {
if (quality === void 0) {
quality = 100;
}
if (!this.android) {
return false;
}
var targetFormat = getTargetFormat(format);
var outputStream = new java.io.BufferedOutputStream(new java.io.FileOutputStream(path));
var res = this.android.compress(targetFormat, quality, outputStream);
outputStream.close();
return res;
};
ImageSource.prototype.toBase64String = function(format, quality) {
if (quality === void 0) {
quality = 100;
}
if (!this.android) {
return null;
}
var targetFormat = getTargetFormat(format);
var outputStream = new java.io.ByteArrayOutputStream();
var base64Stream = new android.util.Base64OutputStream(outputStream, android.util.Base64.NO_WRAP);
this.android.compress(targetFormat, quality, base64Stream);
base64Stream.close();
outputStream.close();
return outputStream.toString();
};
Object.defineProperty(ImageSource.prototype, "height", {
get: function() {
if (this.android) {
return this.android.getHeight();
}
return NaN;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageSource.prototype, "width", {
get: function() {
if (this.android) {
return this.android.getWidth();
}
return NaN;
},
enumerable: true,
configurable: true
});
return ImageSource;
}();
exports.ImageSource = ImageSource;
function getTargetFormat(format) {
ensureEnums();
switch (format) {
case enums.ImageFormat.jpeg:
return android.graphics.Bitmap.CompressFormat.JPEG;

default:
return android.graphics.Bitmap.CompressFormat.PNG;
}
}
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(22);
var http;
function ensureHttp() {
if (!http) {
http = __webpack_require__(66);
}
}
var definition = __webpack_require__(64);
function fromResource(name) {
var image = new definition.ImageSource();
return image.loadFromResource(name) ? image : null;
}
exports.fromResource = fromResource;
function fromFile(path) {
var image = new definition.ImageSource();
return image.loadFromFile(path) ? image : null;
}
exports.fromFile = fromFile;
function fromData(data) {
var image = new definition.ImageSource();
return image.loadFromData(data) ? image : null;
}
exports.fromData = fromData;
function fromBase64(source) {
var image = new definition.ImageSource();
return image.loadFromBase64(source) ? image : null;
}
exports.fromBase64 = fromBase64;
function fromNativeSource(source) {
var image = new definition.ImageSource();
return image.setNativeSource(source) ? image : null;
}
exports.fromNativeSource = fromNativeSource;
function fromUrl(url) {
ensureHttp();
return http.getImage(url);
}
exports.fromUrl = fromUrl;
function fromFileOrResource(path) {
if (!isFileOrResourcePath(path)) {
throw new Error('Path "' + '" is not a valid file or resource.');
}
if (path.indexOf(utils.RESOURCE_PREFIX) === 0) {
return fromResource(path.substr(utils.RESOURCE_PREFIX.length));
}
return fromFile(path);
}
exports.fromFileOrResource = fromFileOrResource;
function isFileOrResourcePath(path) {
return utils.isFileOrResourcePath(path);
}
exports.isFileOrResourcePath = isFileOrResourcePath;
}, function(module, exports, __webpack_require__) {
var httpRequest = __webpack_require__(67);
global.moduleMerge(httpRequest, exports);
function getString(arg) {
return new Promise(function(resolve, reject) {
httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(r) {
try {
var str = r.content.toString();
resolve(str);
} catch (e) {
reject(e);
}
}, function(e) {
return reject(e);
});
});
}
exports.getString = getString;
function getJSON(arg) {
return new Promise(function(resolve, reject) {
httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(r) {
try {
var json = r.content.toJSON();
resolve(json);
} catch (e) {
reject(e);
}
}, function(e) {
return reject(e);
});
});
}
exports.getJSON = getJSON;
function getImage(arg) {
return new Promise(function(resolve, reject) {
httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(r) {
r.content.toImage().then(function(source) {
return resolve(source);
}, function(e) {
return reject(e);
});
}, function(e) {
return reject(e);
});
});
}
exports.getImage = getImage;
function getFile(arg, destinationFilePath) {
return new Promise(function(resolve, reject) {
httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(r) {
try {
var file = r.content.toFile(destinationFilePath);
resolve(file);
} catch (e) {
reject(e);
}
}, function(e) {
return reject(e);
});
});
}
exports.getFile = getFile;
function addHeader(headers, key, value) {
if (!headers[key]) {
headers[key] = value;
} else if (Array.isArray(headers[key])) {
headers[key].push(value);
} else {
var values = [ headers[key] ];
values.push(value);
headers[key] = values;
}
}
exports.addHeader = addHeader;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var http = __webpack_require__(66);
var requestIdCounter = 0;
var pendingRequests = {};
var utils;
function ensureUtils() {
if (!utils) {
utils = __webpack_require__(22);
}
}
var imageSource;
function ensureImageSource() {
if (!imageSource) {
imageSource = __webpack_require__(64);
}
}
var platform;
function ensurePlatform() {
if (!platform) {
platform = __webpack_require__(45);
}
}
var completeCallback;
function ensureCompleteCallback() {
if (completeCallback) {
return;
}
completeCallback = new com.tns.Async.CompleteCallback({
onComplete: function(result, context) {
onRequestComplete(context, result);
}
});
}
function onRequestComplete(requestId, result) {
var callbacks = pendingRequests[requestId];
delete pendingRequests[requestId];
if (result.error) {
callbacks.rejectCallback(new Error(result.error.toString()));
return;
}
var headers = {};
if (result.headers) {
var jHeaders = result.headers;
var length = jHeaders.size();
var i;
var pair;
for (i = 0; i < length; i++) {
pair = jHeaders.get(i);
http.addHeader(headers, pair.key, pair.value);
}
}
callbacks.resolveCallback({
content: {
raw: result.raw,
toString: function() {
if (types.isString(result.responseAsString)) {
return result.responseAsString;
} else {
throw new Error("Response content may not be converted to string");
}
},
toJSON: function() {
ensureUtils();
return utils.parseJSON(result.responseAsString);
},
toImage: function() {
ensureImageSource();
return new Promise(function(resolveImage, rejectImage) {
if (result.responseAsImage != null) {
resolveImage(imageSource.fromNativeSource(result.responseAsImage));
} else {
rejectImage(new Error("Response content may not be converted to an Image"));
}
});
},
toFile: function(destinationFilePath) {
var fs = __webpack_require__(19);
var fileName = callbacks.url;
if (!destinationFilePath) {
destinationFilePath = fs.path.join(fs.knownFolders.documents().path, fileName.substring(fileName.lastIndexOf("/") + 1));
}
var stream;
try {
var javaFile = new java.io.File(destinationFilePath);
stream = new java.io.FileOutputStream(javaFile);
stream.write(result.raw.toByteArray());
return fs.File.fromPath(destinationFilePath);
} catch (exception) {
throw new Error("Cannot save file with path: " + destinationFilePath + ".");
} finally {
if (stream) {
stream.close();
}
}
}
},
statusCode: result.statusCode,
headers: headers
});
}
function buildJavaOptions(options) {
if (!types.isString(options.url)) {
throw new Error("Http request must provide a valid url.");
}
var javaOptions = new com.tns.Async.Http.RequestOptions();
javaOptions.url = options.url;
if (types.isString(options.method)) {
javaOptions.method = options.method;
}
if (types.isString(options.content) || options.content instanceof FormData) {
javaOptions.content = options.content.toString();
}
if (types.isNumber(options.timeout)) {
javaOptions.timeout = options.timeout;
}
if (options.headers) {
var arrayList = new java.util.ArrayList();
var pair = com.tns.Async.Http.KeyValuePair;
for (var key in options.headers) {
arrayList.add(new pair(key, options.headers[key] + ""));
}
javaOptions.headers = arrayList;
}
ensurePlatform();
var screen = platform.screen.mainScreen;
javaOptions.screenWidth = screen.widthPixels;
javaOptions.screenHeight = screen.heightPixels;
return javaOptions;
}
function request(options) {
if (!types.isDefined(options)) {
return;
}
return new Promise(function(resolve, reject) {
try {
var javaOptions = buildJavaOptions(options);
var callbacks = {
url: options.url,
resolveCallback: resolve,
rejectCallback: reject
};
pendingRequests[requestIdCounter] = callbacks;
ensureCompleteCallback();
com.tns.Async.Http.MakeRequest(javaOptions, completeCallback, new java.lang.Integer(requestIdCounter));
requestIdCounter++;
} catch (ex) {
reject(ex);
}
});
}
exports.request = request;
}, function(module, exports, __webpack_require__) {
var styleModule = __webpack_require__(15);
var stylePropertyModule = __webpack_require__(35);
var visualStateConstatnsModule = __webpack_require__(43);
var convertersModule = __webpack_require__(38);
exports.Property = stylePropertyModule.Property;
exports.Style = styleModule.Style;
var properties;
(function(properties) {
properties.fontSizeProperty = styleModule.fontSizeProperty;
properties.colorProperty = styleModule.colorProperty;
properties.backgroundColorProperty = styleModule.backgroundColorProperty;
properties.textAlignmentProperty = styleModule.textAlignmentProperty;
properties.getPropertyByName = stylePropertyModule.getPropertyByName;
properties.getPropertyByCssName = stylePropertyModule.getPropertyByCssName;
properties.eachProperty = stylePropertyModule.eachProperty;
properties.eachInheritableProperty = stylePropertyModule.eachInheritableProperty;
})(properties = exports.properties || (exports.properties = {}));
var converters;
(function(converters) {
converters.colorConverter = convertersModule.colorConverter;
converters.fontSizeConverter = convertersModule.fontSizeConverter;
converters.textAlignConverter = convertersModule.textAlignConverter;
converters.numberConverter = convertersModule.numberConverter;
converters.visibilityConverter = convertersModule.visibilityConverter;
})(converters = exports.converters || (exports.converters = {}));
var visualStates;
(function(visualStates) {
visualStates.Normal = visualStateConstatnsModule.Normal;
visualStates.Hovered = visualStateConstatnsModule.Hovered;
visualStates.Pressed = visualStateConstatnsModule.Pressed;
})(visualStates = exports.visualStates || (exports.visualStates = {}));
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(70);
var definition = __webpack_require__(69);
var view = __webpack_require__(12);
var trace = __webpack_require__(30);
var utils = __webpack_require__(22);
global.moduleMerge(common, exports);
var SWIPE_THRESHOLD = 100;
var SWIPE_VELOCITY_THRESHOLD = 100;
var INVALID_POINTER_ID = -1;
var TO_DEGREES = 180 / Math.PI;
var GesturesObserver = function(_super) {
__extends(GesturesObserver, _super);
function GesturesObserver() {
_super.apply(this, arguments);
}
GesturesObserver.prototype.observe = function(type) {
var _this = this;
if (this.target) {
this.type = type;
this._onTargetLoaded = function(args) {
trace.write(_this.target + ".target loaded. android:" + _this.target._nativeView, "gestures");
_this._attach(_this.target, type);
};
this._onTargetUnloaded = function(args) {
trace.write(_this.target + ".target unloaded. android:" + _this.target._nativeView, "gestures");
_this._detach();
};
this.target.on(view.View.loadedEvent, this._onTargetLoaded);
this.target.on(view.View.unloadedEvent, this._onTargetUnloaded);
if (this.target.isLoaded) {
this._attach(this.target, type);
}
}
};
GesturesObserver.prototype.disconnect = function() {
this._detach();
if (this.target) {
this.target.off(view.View.loadedEvent, this._onTargetLoaded);
this.target.off(view.View.unloadedEvent, this._onTargetUnloaded);
this._onTargetLoaded = null;
this._onTargetUnloaded = null;
}
_super.prototype.disconnect.call(this);
};
GesturesObserver.prototype._detach = function() {
trace.write(this.target + "._detach() android:" + this.target._nativeView, "gestures");
this._notifyTouch = false;
this._simpleGestureDetector = null;
this._scaleGestureDetector = null;
this._swipeGestureDetector = null;
this._panGestureDetector = null;
this._rotateGestureDetector = null;
this._eventData = null;
};
GesturesObserver.prototype._attach = function(target, type) {
trace.write(this.target + "._attach() android:" + this.target._nativeView, "gestures");
this._detach();
if (type & definition.GestureTypes.tap || type & definition.GestureTypes.doubleTap || type & definition.GestureTypes.longPress) {
ensureTapAndDoubleTapGestureListenerClass();
this._simpleGestureDetector = new android.support.v4.view.GestureDetectorCompat(target._context, new TapAndDoubleTapGestureListenerClass(this, this.target, type));
}
if (type & definition.GestureTypes.pinch) {
ensurePinchGestureListenerClass();
this._scaleGestureDetector = new android.view.ScaleGestureDetector(target._context, new PinchGestureListenerClass(this, this.target));
}
if (type & definition.GestureTypes.swipe) {
ensureSwipeGestureListenerClass();
this._swipeGestureDetector = new android.support.v4.view.GestureDetectorCompat(target._context, new SwipeGestureListenerClass(this, this.target));
}
if (type & definition.GestureTypes.pan) {
this._panGestureDetector = new CustomPanGestureDetector(this, this.target);
}
if (type & definition.GestureTypes.rotation) {
this._rotateGestureDetector = new CustomRotateGestureDetector(this, this.target);
}
if (type & definition.GestureTypes.touch) {
this._notifyTouch = true;
}
};
GesturesObserver.prototype.androidOnTouchEvent = function(motionEvent) {
if (this._notifyTouch) {
if (!this._eventData) {
this._eventData = new TouchGestureEventData();
}
this._eventData.prepare(this.target, motionEvent);
_executeCallback(this, this._eventData);
}
if (this._simpleGestureDetector) {
this._simpleGestureDetector.onTouchEvent(motionEvent);
}
if (this._scaleGestureDetector) {
this._scaleGestureDetector.onTouchEvent(motionEvent);
}
if (this._swipeGestureDetector) {
this._swipeGestureDetector.onTouchEvent(motionEvent);
}
if (this._panGestureDetector) {
this._panGestureDetector.onTouchEvent(motionEvent);
}
if (this._rotateGestureDetector) {
this._rotateGestureDetector.onTouchEvent(motionEvent);
}
};
return GesturesObserver;
}(common.GesturesObserver);
exports.GesturesObserver = GesturesObserver;
function _getArgs(type, view, e) {
return {
type: type,
view: view,
android: e,
ios: undefined,
object: view,
eventName: definition.toString(type)
};
}
function _getSwipeArgs(direction, view, initialEvent, currentEvent) {
return {
type: definition.GestureTypes.swipe,
view: view,
android: {
initial: initialEvent,
current: currentEvent
},
direction: direction,
ios: undefined,
object: view,
eventName: definition.toString(definition.GestureTypes.swipe)
};
}
function _getPanArgs(deltaX, deltaY, view, state, initialEvent, currentEvent) {
return {
type: definition.GestureTypes.pan,
view: view,
android: {
initial: initialEvent,
current: currentEvent
},
deltaX: deltaX,
deltaY: deltaY,
ios: undefined,
object: view,
eventName: definition.toString(definition.GestureTypes.pan),
state: state
};
}
function _executeCallback(observer, args) {
if (observer && observer.callback) {
observer.callback.call(observer._context, args);
}
}
var TapAndDoubleTapGestureListenerClass;
function ensureTapAndDoubleTapGestureListenerClass() {
if (TapAndDoubleTapGestureListenerClass) {
return;
}
var TapAndDoubleTapGestureListener = function(_super) {
__extends(TapAndDoubleTapGestureListener, _super);
function TapAndDoubleTapGestureListener(observer, target, type) {
_super.call(this);
this._observer = observer;
this._target = target;
this._type = type;
return global.__native(this);
}
TapAndDoubleTapGestureListener.prototype.onSingleTapUp = function(motionEvent) {
if (this._type & definition.GestureTypes.tap) {
var args = _getArgs(definition.GestureTypes.tap, this._target, motionEvent);
_executeCallback(this._observer, args);
}
return true;
};
TapAndDoubleTapGestureListener.prototype.onDoubleTap = function(motionEvent) {
if (this._type & definition.GestureTypes.doubleTap) {
var args = _getArgs(definition.GestureTypes.doubleTap, this._target, motionEvent);
_executeCallback(this._observer, args);
}
return true;
};
TapAndDoubleTapGestureListener.prototype.onDown = function(motionEvent) {
return true;
};
TapAndDoubleTapGestureListener.prototype.onLongPress = function(motionEvent) {
if (this._type & definition.GestureTypes.longPress) {
var args = _getArgs(definition.GestureTypes.longPress, this._target, motionEvent);
_executeCallback(this._observer, args);
}
};
return TapAndDoubleTapGestureListener;
}(android.view.GestureDetector.SimpleOnGestureListener);
TapAndDoubleTapGestureListenerClass = TapAndDoubleTapGestureListener;
}
var PinchGestureEventData = function() {
function PinchGestureEventData(view, android, scale, object, state) {
this.view = view;
this.android = android;
this.scale = scale;
this.object = object;
this.state = state;
this.type = definition.GestureTypes.pinch;
this.eventName = definition.toString(definition.GestureTypes.pinch);
}
PinchGestureEventData.prototype.getFocusX = function() {
return this.android.getFocusX() / utils.layout.getDisplayDensity();
};
PinchGestureEventData.prototype.getFocusY = function() {
return this.android.getFocusY() / utils.layout.getDisplayDensity();
};
return PinchGestureEventData;
}();
var PinchGestureListenerClass;
function ensurePinchGestureListenerClass() {
if (PinchGestureListenerClass) {
return;
}
var PinchGestureListener = function(_super) {
__extends(PinchGestureListener, _super);
function PinchGestureListener(observer, target) {
_super.call(this);
this._observer = observer;
this._target = target;
this._density = utils.layout.getDisplayDensity();
return global.__native(this);
}
PinchGestureListener.prototype.onScaleBegin = function(detector) {
this._scale = detector.getScaleFactor();
var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, common.GestureStateTypes.began);
_executeCallback(this._observer, args);
return true;
};
PinchGestureListener.prototype.onScale = function(detector) {
this._scale *= detector.getScaleFactor();
var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, common.GestureStateTypes.changed);
_executeCallback(this._observer, args);
return true;
};
PinchGestureListener.prototype.onScaleEnd = function(detector) {
this._scale *= detector.getScaleFactor();
var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, common.GestureStateTypes.ended);
_executeCallback(this._observer, args);
};
return PinchGestureListener;
}(android.view.ScaleGestureDetector.SimpleOnScaleGestureListener);
PinchGestureListenerClass = PinchGestureListener;
}
var SwipeGestureListenerClass;
function ensureSwipeGestureListenerClass() {
if (SwipeGestureListenerClass) {
return;
}
var SwipeGestureListener = function(_super) {
__extends(SwipeGestureListener, _super);
function SwipeGestureListener(observer, target) {
_super.call(this);
this._observer = observer;
this._target = target;
return global.__native(this);
}
SwipeGestureListener.prototype.onDown = function(motionEvent) {
return true;
};
SwipeGestureListener.prototype.onFling = function(initialEvent, currentEvent, velocityX, velocityY) {
var result = false;
var args;
try {
var deltaY = currentEvent.getY() - initialEvent.getY();
var deltaX = currentEvent.getX() - initialEvent.getX();
if (Math.abs(deltaX) > Math.abs(deltaY)) {
if (Math.abs(deltaX) > SWIPE_THRESHOLD && Math.abs(velocityX) > SWIPE_VELOCITY_THRESHOLD) {
if (deltaX > 0) {
args = _getSwipeArgs(definition.SwipeDirection.right, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
} else {
args = _getSwipeArgs(definition.SwipeDirection.left, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
}
}
} else {
if (Math.abs(deltaY) > SWIPE_THRESHOLD && Math.abs(velocityY) > SWIPE_VELOCITY_THRESHOLD) {
if (deltaY > 0) {
args = _getSwipeArgs(definition.SwipeDirection.down, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
} else {
args = _getSwipeArgs(definition.SwipeDirection.up, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
}
}
}
} catch (ex) {}
return result;
};
return SwipeGestureListener;
}(android.view.GestureDetector.SimpleOnGestureListener);
SwipeGestureListenerClass = SwipeGestureListener;
}
var CustomPanGestureDetector = function() {
function CustomPanGestureDetector(observer, target) {
this.observer = observer;
this.target = target;
this.isTracking = false;
this.density = utils.layout.getDisplayDensity();
}
CustomPanGestureDetector.prototype.onTouchEvent = function(event) {
switch (event.getActionMasked()) {
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
this.trackStop(event, false);
break;

case android.view.MotionEvent.ACTION_DOWN:
case android.view.MotionEvent.ACTION_POINTER_DOWN:
case android.view.MotionEvent.ACTION_POINTER_UP:
this.trackStop(event, true);
break;

case android.view.MotionEvent.ACTION_MOVE:
if (!this.isTracking) {
this.trackStart(event);
}
this.trackChange(event);
break;
}
return true;
};
CustomPanGestureDetector.prototype.trackStop = function(currentEvent, cahceEvent) {
if (this.isTracking) {
var args = _getPanArgs(this.deltaX, this.deltaY, this.target, common.GestureStateTypes.ended, null, currentEvent);
_executeCallback(this.observer, args);
this.deltaX = undefined;
this.deltaY = undefined;
this.isTracking = false;
}
if (cahceEvent) {
this.lastEventCache = currentEvent;
} else {
this.lastEventCache = undefined;
}
};
CustomPanGestureDetector.prototype.trackStart = function(currentEvent) {
var inital = this.getMotionEventCenter(this.lastEventCache ? this.lastEventCache : currentEvent);
this.initialX = inital.x;
this.initialY = inital.y;
this.isTracking = true;
var args = _getPanArgs(0, 0, this.target, common.GestureStateTypes.began, null, currentEvent);
_executeCallback(this.observer, args);
};
CustomPanGestureDetector.prototype.trackChange = function(currentEvent) {
var current = this.getMotionEventCenter(currentEvent);
this.deltaX = current.x - this.initialX;
this.deltaY = current.y - this.initialY;
var args = _getPanArgs(this.deltaX, this.deltaY, this.target, common.GestureStateTypes.changed, null, currentEvent);
_executeCallback(this.observer, args);
};
CustomPanGestureDetector.prototype.getMotionEventCenter = function(event) {
var count = event.getPointerCount();
var res = {
x: 0,
y: 0
};
for (var i = 0; i < count; i++) {
res.x += event.getX(i);
res.y += event.getY(i);
}
res.x /= count * this.density;
res.y /= count * this.density;
return res;
};
return CustomPanGestureDetector;
}();
var CustomRotateGestureDetector = function() {
function CustomRotateGestureDetector(observer, target) {
this.observer = observer;
this.target = target;
this.trackedPtrId1 = INVALID_POINTER_ID;
this.trackedPtrId2 = INVALID_POINTER_ID;
}
Object.defineProperty(CustomRotateGestureDetector.prototype, "isTracking", {
get: function() {
return this.trackedPtrId1 !== INVALID_POINTER_ID && this.trackedPtrId2 !== INVALID_POINTER_ID;
},
enumerable: true,
configurable: true
});
CustomRotateGestureDetector.prototype.onTouchEvent = function(event) {
var pointerID = event.getPointerId(event.getActionIndex());
var wasTracking = this.isTracking;
switch (event.getActionMasked()) {
case android.view.MotionEvent.ACTION_DOWN:
case android.view.MotionEvent.ACTION_POINTER_DOWN:
var assigned = false;
if (this.trackedPtrId1 === INVALID_POINTER_ID && pointerID !== this.trackedPtrId2) {
this.trackedPtrId1 = pointerID;
assigned = true;
} else if (this.trackedPtrId2 === INVALID_POINTER_ID && pointerID !== this.trackedPtrId1) {
this.trackedPtrId2 = pointerID;
assigned = true;
}
if (assigned && this.isTracking) {
this.angle = 0;
this.initalPointersAngle = this.getPointersAngle(event);
this.executeCallback(event, common.GestureStateTypes.began);
}
break;

case android.view.MotionEvent.ACTION_MOVE:
if (this.isTracking) {
this.updateAngle(event);
this.executeCallback(event, common.GestureStateTypes.changed);
}
break;

case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_POINTER_UP:
if (pointerID === this.trackedPtrId1) {
this.trackedPtrId1 = INVALID_POINTER_ID;
} else if (pointerID === this.trackedPtrId2) {
this.trackedPtrId2 = INVALID_POINTER_ID;
}
if (wasTracking && !this.isTracking) {
this.executeCallback(event, common.GestureStateTypes.ended);
}
break;

case android.view.MotionEvent.ACTION_CANCEL:
this.trackedPtrId1 = INVALID_POINTER_ID;
this.trackedPtrId2 = INVALID_POINTER_ID;
if (wasTracking) {
this.executeCallback(event, common.GestureStateTypes.cancelled);
}
break;
}
return true;
};
CustomRotateGestureDetector.prototype.executeCallback = function(event, state) {
var args = {
type: definition.GestureTypes.rotation,
view: this.target,
android: event,
rotation: this.angle,
ios: undefined,
object: this.target,
eventName: definition.toString(definition.GestureTypes.rotation),
state: state
};
_executeCallback(this.observer, args);
};
CustomRotateGestureDetector.prototype.updateAngle = function(event) {
var newPointersAngle = this.getPointersAngle(event);
var result = (newPointersAngle - this.initalPointersAngle) * TO_DEGREES % 360;
if (result < -180) {
result += 360;
}
if (result > 180) {
result -= 360;
}
this.angle = result;
};
CustomRotateGestureDetector.prototype.getPointersAngle = function(event) {
var firstX = event.getX(event.findPointerIndex(this.trackedPtrId1));
var firstY = event.getY(event.findPointerIndex(this.trackedPtrId1));
var secondX = event.getX(event.findPointerIndex(this.trackedPtrId2));
var secondY = event.getY(event.findPointerIndex(this.trackedPtrId2));
return Math.atan2(secondY - firstY, secondX - firstX);
};
return CustomRotateGestureDetector;
}();
var Pointer = function() {
function Pointer(id, event) {
this.event = event;
this.ios = undefined;
this.android = id;
}
Pointer.prototype.getX = function() {
return this.event.getX(this.android) / utils.layout.getDisplayDensity();
};
Pointer.prototype.getY = function() {
return this.event.getY(this.android) / utils.layout.getDisplayDensity();
};
return Pointer;
}();
var TouchGestureEventData = function() {
function TouchGestureEventData() {
this.eventName = definition.toString(definition.GestureTypes.touch);
this.type = definition.GestureTypes.touch;
this.ios = undefined;
}
TouchGestureEventData.prototype.prepare = function(view, e) {
this.view = view;
this.object = view;
this.android = e;
this.action = this.getActionType(e);
this._activePointers = undefined;
this._allPointers = undefined;
};
TouchGestureEventData.prototype.getPointerCount = function() {
return this.android.getPointerCount();
};
TouchGestureEventData.prototype.getActivePointers = function() {
if (!this._activePointers) {
this._activePointers = [ new Pointer(this.android.getActionIndex(), this.android) ];
}
return this._activePointers;
};
TouchGestureEventData.prototype.getAllPointers = function() {
if (!this._allPointers) {
this._allPointers = [];
for (var i = 0; i < this.getPointerCount(); i++) {
this._allPointers.push(new Pointer(i, this.android));
}
}
return this._allPointers;
};
TouchGestureEventData.prototype.getX = function() {
return this.getActivePointers()[0].getX();
};
TouchGestureEventData.prototype.getY = function() {
return this.getActivePointers()[0].getY();
};
TouchGestureEventData.prototype.getActionType = function(e) {
switch (e.getActionMasked()) {
case android.view.MotionEvent.ACTION_DOWN:
case android.view.MotionEvent.ACTION_POINTER_DOWN:
return common.TouchAction.down;

case android.view.MotionEvent.ACTION_MOVE:
return common.TouchAction.move;

case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_POINTER_UP:
return common.TouchAction.up;

case android.view.MotionEvent.ACTION_CANCEL:
return common.TouchAction.cancel;
}
return "";
};
return TouchGestureEventData;
}();
}, function(module, exports, __webpack_require__) {
var definition = __webpack_require__(69);
(function(GestureTypes) {
GestureTypes[GestureTypes["tap"] = 1] = "tap";
GestureTypes[GestureTypes["doubleTap"] = 2] = "doubleTap";
GestureTypes[GestureTypes["pinch"] = 4] = "pinch";
GestureTypes[GestureTypes["pan"] = 8] = "pan";
GestureTypes[GestureTypes["swipe"] = 16] = "swipe";
GestureTypes[GestureTypes["rotation"] = 32] = "rotation";
GestureTypes[GestureTypes["longPress"] = 64] = "longPress";
GestureTypes[GestureTypes["touch"] = 128] = "touch";
})(exports.GestureTypes || (exports.GestureTypes = {}));
var GestureTypes = exports.GestureTypes;
(function(GestureStateTypes) {
GestureStateTypes[GestureStateTypes["cancelled"] = 0] = "cancelled";
GestureStateTypes[GestureStateTypes["began"] = 1] = "began";
GestureStateTypes[GestureStateTypes["changed"] = 2] = "changed";
GestureStateTypes[GestureStateTypes["ended"] = 3] = "ended";
})(exports.GestureStateTypes || (exports.GestureStateTypes = {}));
var GestureStateTypes = exports.GestureStateTypes;
(function(SwipeDirection) {
SwipeDirection[SwipeDirection["right"] = 1] = "right";
SwipeDirection[SwipeDirection["left"] = 2] = "left";
SwipeDirection[SwipeDirection["up"] = 4] = "up";
SwipeDirection[SwipeDirection["down"] = 8] = "down";
})(exports.SwipeDirection || (exports.SwipeDirection = {}));
var SwipeDirection = exports.SwipeDirection;
var TouchAction;
(function(TouchAction) {
TouchAction.down = "down";
TouchAction.up = "up";
TouchAction.move = "move";
TouchAction.cancel = "cancel";
})(TouchAction = exports.TouchAction || (exports.TouchAction = {}));
function observe(target, type, callback, context) {
var observer = new definition.GesturesObserver(target, callback, context);
observer.observe(type);
return observer;
}
exports.observe = observe;
function toString(type, separator) {
var types = new Array();
if (type & definition.GestureTypes.tap) {
types.push("tap");
}
if (type & definition.GestureTypes.doubleTap) {
types.push("doubleTap");
}
if (type & definition.GestureTypes.pinch) {
types.push("pinch");
}
if (type & definition.GestureTypes.pan) {
types.push("pan");
}
if (type & definition.GestureTypes.swipe) {
types.push("swipe");
}
if (type & definition.GestureTypes.rotation) {
types.push("rotation");
}
if (type & definition.GestureTypes.longPress) {
types.push("longPress");
}
if (type & definition.GestureTypes.touch) {
types.push("touch");
}
return types.join(separator);
}
exports.toString = toString;
function fromString(type) {
var t = type.trim().toLowerCase();
if (t === "tap") {
return definition.GestureTypes.tap;
} else if (t === "doubletap") {
return definition.GestureTypes.doubleTap;
} else if (t === "pinch") {
return definition.GestureTypes.pinch;
} else if (t === "pan") {
return definition.GestureTypes.pan;
} else if (t === "swipe") {
return definition.GestureTypes.swipe;
} else if (t === "rotation") {
return definition.GestureTypes.rotation;
} else if (t === "longpress") {
return definition.GestureTypes.longPress;
} else if (t === "touch") {
return definition.GestureTypes.touch;
}
return undefined;
}
exports.fromString = fromString;
var GesturesObserver = function() {
function GesturesObserver(target, callback, context) {
this._target = target;
this._callback = callback;
this._context = context;
}
Object.defineProperty(GesturesObserver.prototype, "callback", {
get: function() {
return this._callback;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GesturesObserver.prototype, "target", {
get: function() {
return this._target;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GesturesObserver.prototype, "context", {
get: function() {
return this._context;
},
enumerable: true,
configurable: true
});
GesturesObserver.prototype.androidOnTouchEvent = function(motionEvent) {};
GesturesObserver.prototype.observe = function(type) {};
GesturesObserver.prototype.disconnect = function() {
if (this.target) {
var list = this.target.getGestureObservers(this.type);
if (list && list.length > 0) {
for (var i = 0; i < list.length; i++) {
if (list[i].callback === this.callback) {
break;
}
}
list.length = 0;
this.target._gestureObservers[this.type] = undefined;
delete this.target._gestureObservers[this.type];
}
}
this._target = null;
this._callback = null;
this._context = null;
};
return GesturesObserver;
}();
exports.GesturesObserver = GesturesObserver;
}, function(module, exports, __webpack_require__) {
var file_system_1 = __webpack_require__(19);
exports.debug = true;
var applicationRootPath;
function ensureAppRootPath() {
if (!applicationRootPath) {
applicationRootPath = file_system_1.knownFolders.currentApp().path;
applicationRootPath = applicationRootPath.substr(0, applicationRootPath.length - "app/".length);
}
}
var Source = function() {
function Source(uri, line, column) {
ensureAppRootPath();
if (uri.length > applicationRootPath.length && uri.substr(0, applicationRootPath.length) === applicationRootPath) {
this._uri = "file://" + uri.substr(applicationRootPath.length);
} else {
this._uri = uri;
}
this._line = line;
this._column = column;
}
Object.defineProperty(Source.prototype, "uri", {
get: function() {
return this._uri;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Source.prototype, "line", {
get: function() {
return this._line;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Source.prototype, "column", {
get: function() {
return this._column;
},
enumerable: true,
configurable: true
});
Source.prototype.toString = function() {
return this._uri + ":" + this._line + ":" + this._column;
};
Source.get = function(object) {
return object[Source._source];
};
Source.set = function(object, src) {
object[Source._source] = src;
};
Source._source = Symbol("source");
return Source;
}();
exports.Source = Source;
var ScopeError = function(_super) {
__extends(ScopeError, _super);
function ScopeError(child, message) {
_super.call(this, message);
if (!child) {
throw new Error("Required child error!");
}
this._child = child;
this._message = message;
}
Object.defineProperty(ScopeError.prototype, "child", {
get: function() {
return this._child;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScopeError.prototype, "message", {
get: function() {
if (this._message && this._childMessage) {
return this._message + "\n ↳" + this._childMessage.replace("\n", "\n  ");
}
return this._message || this._childMessage || undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScopeError.prototype, "name", {
get: function() {
return this.child.name;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScopeError.prototype, "stack", {
get: function() {
return this.child.stack;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScopeError.prototype, "_childMessage", {
get: function() {
return this.child.message;
},
enumerable: true,
configurable: true
});
ScopeError.prototype.toString = function() {
return "Error: " + this.message;
};
return ScopeError;
}(Error);
exports.ScopeError = ScopeError;
var SourceError = function(_super) {
__extends(SourceError, _super);
function SourceError(child, source, message) {
_super.call(this, child, message ? message + " @" + source + "" : source + "");
this._source = source;
}
Object.defineProperty(SourceError.prototype, "source", {
get: function() {
return this._source;
},
enumerable: true,
configurable: true
});
return SourceError;
}(ScopeError);
exports.SourceError = SourceError;
}, function(module, exports, __webpack_require__) {
var pageCommon = __webpack_require__(73);
var enums = __webpack_require__(24);
var actionBar = __webpack_require__(75);
var gridLayout = __webpack_require__(77);
global.moduleMerge(pageCommon, exports);
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(30);
}
}
var color;
function ensureColor() {
if (!color) {
color = __webpack_require__(27);
}
}
exports.DIALOG_FRAGMENT_TAG = "dialog";
var DialogFragmentClass;
function ensureDialogFragmentClass() {
if (DialogFragmentClass) {
return;
}
var DialogFragmentClassInner = function(_super) {
__extends(DialogFragmentClassInner, _super);
function DialogFragmentClassInner(_owner, _fullscreen, _shownCallback, _dismissCallback) {
_super.call(this);
this._owner = _owner;
this._fullscreen = _fullscreen;
this._shownCallback = _shownCallback;
this._dismissCallback = _dismissCallback;
return global.__native(this);
}
DialogFragmentClassInner.prototype.onCreateDialog = function(savedInstanceState) {
var dialog = new android.app.Dialog(this._owner._context);
dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
this._owner.horizontalAlignment = this._fullscreen ? enums.HorizontalAlignment.stretch : enums.HorizontalAlignment.center;
this._owner.verticalAlignment = this._fullscreen ? enums.VerticalAlignment.stretch : enums.VerticalAlignment.center;
this._owner.actionBarHidden = true;
dialog.setContentView(this._owner._nativeView, this._owner._nativeView.getLayoutParams());
var window = dialog.getWindow();
window.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
if (this._fullscreen) {
window.setLayout(android.view.ViewGroup.LayoutParams.FILL_PARENT, android.view.ViewGroup.LayoutParams.FILL_PARENT);
}
return dialog;
};
DialogFragmentClassInner.prototype.onStart = function() {
_super.prototype.onStart.call(this);
if (!this._owner.isLoaded) {
this._owner.onLoaded();
}
this._shownCallback();
};
DialogFragmentClassInner.prototype.onDestroyView = function() {
_super.prototype.onDestroyView.call(this);
if (this._owner.isLoaded) {
this._owner.onUnloaded();
}
this._owner._isAddedToNativeVisualTree = false;
this._owner._onDetached(true);
};
DialogFragmentClassInner.prototype.onDismiss = function(dialog) {
_super.prototype.onDismiss.call(this, dialog);
this._dismissCallback();
};
return DialogFragmentClassInner;
}(android.app.DialogFragment);
DialogFragmentClass = DialogFragmentClassInner;
}
var Page = function(_super) {
__extends(Page, _super);
function Page() {
_super.apply(this, arguments);
this._isBackNavigation = false;
}
Object.defineProperty(Page.prototype, "android", {
get: function() {
return this._grid;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "_nativeView", {
get: function() {
return this._grid;
},
enumerable: true,
configurable: true
});
Page.prototype._createUI = function() {
this._grid = new org.nativescript.widgets.GridLayout(this._context);
this._grid.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.auto));
this._grid.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.star));
};
Page.prototype._addViewToNativeVisualTree = function(child, atIndex) {
if (this._nativeView && child._nativeView) {
if (child instanceof actionBar.ActionBar) {
gridLayout.GridLayout.setRow(child, 0);
child.horizontalAlignment = enums.HorizontalAlignment.stretch;
child.verticalAlignment = enums.VerticalAlignment.top;
} else {
gridLayout.GridLayout.setRow(child, 1);
}
}
return _super.prototype._addViewToNativeVisualTree.call(this, child, atIndex);
};
Page.prototype._onDetached = function(force) {
var skipDetached = !force && this.frame.android.cachePagesOnNavigate && !this._isBackNavigation;
if (skipDetached) {
ensureTrace();
trace.write("Caching " + this, trace.categories.NativeLifecycle);
} else {
_super.prototype._onDetached.call(this);
}
};
Page.prototype.onNavigatedFrom = function(isBackNavigation) {
this._isBackNavigation = isBackNavigation;
_super.prototype.onNavigatedFrom.call(this, isBackNavigation);
};
Page.prototype._showNativeModalView = function(parent, context, closeCallback, fullscreen) {
var _this = this;
_super.prototype._showNativeModalView.call(this, parent, context, closeCallback, fullscreen);
if (!this.backgroundColor) {
ensureColor();
this.backgroundColor = new color.Color("White");
}
this._onAttached(parent._context);
this._isAddedToNativeVisualTree = true;
ensureDialogFragmentClass();
this._dialogFragment = new DialogFragmentClass(this, !!fullscreen, function() {
return _this._raiseShownModallyEvent();
}, function() {
return _this.closeModal();
});
_super.prototype._raiseShowingModallyEvent.call(this);
this._dialogFragment.show(parent.frame.android.activity.getFragmentManager(), exports.DIALOG_FRAGMENT_TAG);
};
Page.prototype._hideNativeModalView = function(parent) {
this._dialogFragment.dismissAllowingStateLoss();
this._dialogFragment = null;
parent._modal = undefined;
_super.prototype._hideNativeModalView.call(this, parent);
};
Page.prototype._updateActionBar = function(hidden) {
this.actionBar.update();
};
return Page;
}(pageCommon.Page);
exports.Page = Page;
}, function(module, exports, __webpack_require__) {
var content_view_1 = __webpack_require__(74);
var view = __webpack_require__(12);
var styleScope = __webpack_require__(32);
var action_bar_1 = __webpack_require__(75);
var dependency_observable_1 = __webpack_require__(34);
var style = __webpack_require__(15);
var proxy = __webpack_require__(53);
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(19);
}
}
var frame;
function ensureFrame() {
if (!frame) {
frame = __webpack_require__(10);
}
}
var AffectsLayout = global.android ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
var backgroundSpanUnderStatusBarProperty = new dependency_observable_1.Property("backgroundSpanUnderStatusBar", "Page", new proxy.PropertyMetadata(false, AffectsLayout));
var actionBarHiddenProperty = new dependency_observable_1.Property("actionBarHidden", "Page", new proxy.PropertyMetadata(undefined, AffectsLayout));
function onActionBarHiddenPropertyChanged(data) {
var page = data.object;
if (page.isLoaded) {
page._updateActionBar(data.newValue);
}
}
actionBarHiddenProperty.metadata.onSetNativeValue = onActionBarHiddenPropertyChanged;
var Page = function(_super) {
__extends(Page, _super);
function Page() {
_super.call(this);
this._styleScope = new styleScope.StyleScope();
this._cssFiles = {};
this.actionBar = new action_bar_1.ActionBar();
}
Page.prototype.onLoaded = function() {
this.style._setValue(style.backgroundColorProperty, "white", dependency_observable_1.ValueSource.Inherited);
this._applyCss();
if (this.actionBarHidden !== undefined) {
this._updateActionBar(this.actionBarHidden);
}
_super.prototype.onLoaded.call(this);
};
Object.defineProperty(Page.prototype, "backgroundSpanUnderStatusBar", {
get: function() {
return this._getValue(Page.backgroundSpanUnderStatusBarProperty);
},
set: function(value) {
this._setValue(Page.backgroundSpanUnderStatusBarProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "actionBarHidden", {
get: function() {
return this._getValue(Page.actionBarHiddenProperty);
},
set: function(value) {
this._setValue(Page.actionBarHiddenProperty, value);
},
enumerable: true,
configurable: true
});
Page.prototype._updateActionBar = function(hidden) {};
Object.defineProperty(Page.prototype, "navigationContext", {
get: function() {
return this._navigationContext;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "css", {
get: function() {
if (this._styleScope) {
return this._styleScope.css;
}
return undefined;
},
set: function(value) {
this._styleScope.css = value;
this._refreshCss();
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "actionBar", {
get: function() {
return this._actionBar;
},
set: function(value) {
if (!value) {
throw new Error("ActionBar cannot be null or undefined.");
}
if (this._actionBar !== value) {
if (this._actionBar) {
this._actionBar.page = undefined;
this._removeView(this._actionBar);
}
this._actionBar = value;
this._actionBar.page = this;
this._addView(this._actionBar);
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "page", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
Page.prototype._refreshCss = function() {
if (this._cssApplied) {
this._resetCssValues();
}
this._cssApplied = false;
if (this.isLoaded) {
this._applyCss();
}
};
Page.prototype.addCss = function(cssString) {
this._addCssInternal(cssString, undefined);
};
Page.prototype._addCssInternal = function(cssString, cssFileName) {
this._styleScope.addCss(cssString, cssFileName);
this._refreshCss();
};
Page.prototype.addCssFile = function(cssFileName) {
ensureFS();
if (cssFileName.indexOf("~/") === 0) {
cssFileName = fs.path.join(fs.knownFolders.currentApp().path, cssFileName.replace("~/", ""));
}
if (!this._cssFiles[cssFileName]) {
if (fs.File.exists(cssFileName)) {
var file = fs.File.fromPath(cssFileName);
var text = file.readTextSync();
if (text) {
this._addCssInternal(text, cssFileName);
this._cssFiles[cssFileName] = true;
}
}
}
};
Page.prototype.removeCssSelectors = function(selectorExpression) {
this._styleScope.removeSelectors(selectorExpression);
this._refreshCss();
};
Page.prototype.getKeyframeAnimationWithName = function(animationName) {
return this._styleScope.getKeyframeAnimationWithName(animationName);
};
Object.defineProperty(Page.prototype, "frame", {
get: function() {
return this.parent;
},
enumerable: true,
configurable: true
});
Page.prototype.createNavigatedData = function(eventName, isBackNavigation) {
return {
eventName: eventName,
object: this,
context: this.navigationContext,
isBackNavigation: isBackNavigation
};
};
Page.prototype.onNavigatingTo = function(context, isBackNavigation) {
this._navigationContext = context;
this.notify(this.createNavigatedData(Page.navigatingToEvent, isBackNavigation));
};
Page.prototype.onNavigatedTo = function(isBackNavigation) {
this.notify(this.createNavigatedData(Page.navigatedToEvent, isBackNavigation));
};
Page.prototype.onNavigatingFrom = function(isBackNavigation) {
this.notify(this.createNavigatedData(Page.navigatingFromEvent, isBackNavigation));
};
Page.prototype.onNavigatedFrom = function(isBackNavigation) {
this.notify(this.createNavigatedData(Page.navigatedFromEvent, isBackNavigation));
this._navigationContext = undefined;
};
Page.prototype.showModal = function() {
ensureFrame();
if (arguments.length === 0) {
this._showNativeModalView(frame.topmost().currentPage, undefined, undefined, true);
return this;
} else {
var context = arguments[1];
var closeCallback = arguments[2];
var fullscreen = arguments[3];
var page;
if (arguments[0] instanceof Page) {
page = arguments[0];
} else {
page = frame.resolvePageFromEntry({
moduleName: arguments[0]
});
}
page._showNativeModalView(this, context, closeCallback, fullscreen);
return page;
}
};
Page.prototype.closeModal = function() {
if (this._closeModalCallback) {
this._closeModalCallback.apply(undefined, arguments);
}
};
Object.defineProperty(Page.prototype, "modal", {
get: function() {
return this._modal;
},
enumerable: true,
configurable: true
});
Page.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof action_bar_1.ActionBar) {
this.actionBar = value;
} else {
_super.prototype._addChildFromBuilder.call(this, name, value);
}
};
Page.prototype._showNativeModalView = function(parent, context, closeCallback, fullscreen) {
parent._modal = this;
var that = this;
this._modalContext = context;
this._closeModalCallback = function() {
if (that._closeModalCallback) {
that._closeModalCallback = null;
that._modalContext = null;
that._hideNativeModalView(parent);
if (typeof closeCallback === "function") {
closeCallback.apply(undefined, arguments);
}
}
};
};
Page.prototype._hideNativeModalView = function(parent) {};
Page.prototype._raiseShownModallyEvent = function() {
var args = {
eventName: Page.shownModallyEvent,
object: this,
context: this._modalContext,
closeCallback: this._closeModalCallback
};
this.notify(args);
};
Page.prototype._raiseShowingModallyEvent = function() {
var args = {
eventName: Page.showingModallyEvent,
object: this,
context: this._modalContext,
closeCallback: this._closeModalCallback
};
this.notify(args);
};
Page.prototype._getStyleScope = function() {
return this._styleScope;
};
Page.prototype._eachChildView = function(callback) {
_super.prototype._eachChildView.call(this, callback);
callback(this.actionBar);
};
Object.defineProperty(Page.prototype, "_childrenCount", {
get: function() {
return (this.content ? 1 : 0) + (this.actionBar ? 1 : 0);
},
enumerable: true,
configurable: true
});
Page.prototype._applyCss = function() {
if (this._cssApplied) {
return;
}
this._styleScope.ensureSelectors();
var scope = this._styleScope;
var checkSelectors = function(view) {
scope.applySelectors(view);
return true;
};
checkSelectors(this);
view.eachDescendant(this, checkSelectors);
this._cssApplied = true;
};
Page.prototype._resetCssValues = function() {
var resetCssValuesFunc = function(view) {
view.style._resetCssValues();
return true;
};
resetCssValuesFunc(this);
view.eachDescendant(this, resetCssValuesFunc);
};
Page.backgroundSpanUnderStatusBarProperty = backgroundSpanUnderStatusBarProperty;
Page.actionBarHiddenProperty = actionBarHiddenProperty;
Page.navigatingToEvent = "navigatingTo";
Page.navigatedToEvent = "navigatedTo";
Page.navigatingFromEvent = "navigatingFrom";
Page.navigatedFromEvent = "navigatedFrom";
Page.shownModallyEvent = "shownModally";
Page.showingModallyEvent = "showingModally";
return Page;
}(content_view_1.ContentView);
exports.Page = Page;
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var utils = __webpack_require__(22);
var ContentView = function(_super) {
__extends(ContentView, _super);
function ContentView() {
_super.apply(this, arguments);
}
Object.defineProperty(ContentView.prototype, "content", {
get: function() {
return this._content;
},
set: function(value) {
var oldView = this._content;
if (this._content) {
this._removeView(this._content);
}
this._content = value;
if (this._content) {
this._addView(this._content);
}
this._onContentChanged(oldView, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ContentView.prototype, "layoutView", {
get: function() {
var result;
if (this._content) {
var first_1 = true;
this._content._eachLayoutView(function(child) {
if (first_1) {
first_1 = false;
result = child;
} else {
throw new Error("More than one layout child inside a ContentView");
}
});
}
return result;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ContentView.prototype, "_childrenCount", {
get: function() {
if (this._content) {
return 1;
}
return 0;
},
enumerable: true,
configurable: true
});
ContentView.prototype._onContentChanged = function(oldView, newView) {};
ContentView.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof view.View) {
this.content = value;
}
};
ContentView.prototype._eachChildView = function(callback) {
if (this._content) {
callback(this._content);
}
};
ContentView.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var result = view.View.measureChild(this, this.layoutView, widthMeasureSpec, heightMeasureSpec);
var width = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var height = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = utils.layout.getMeasureSpecMode(heightMeasureSpec);
var density = utils.layout.getDisplayDensity();
var measureWidth = Math.max(result.measuredWidth, this.minWidth * density);
var measureHeight = Math.max(result.measuredHeight, this.minHeight * density);
var widthAndState = view.View.resolveSizeAndState(measureWidth, width, widthMode, 0);
var heightAndState = view.View.resolveSizeAndState(measureHeight, height, heightMode, 0);
this.setMeasuredDimension(widthAndState, heightAndState);
};
ContentView.prototype.onLayout = function(left, top, right, bottom) {
view.View.layoutChild(this, this.layoutView, 0, 0, right - left, bottom - top);
};
return ContentView;
}(view.CustomLayoutView);
exports.ContentView = ContentView;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(76);
var frame = __webpack_require__(10);
var types = __webpack_require__(14);
var enums = __webpack_require__(24);
var application = __webpack_require__(16);
var style = __webpack_require__(15);
var R_ID_HOME = 16908332;
var ACTION_ITEM_ID_OFFSET = 1e3;
global.moduleMerge(common, exports);
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(30);
}
}
var utils;
function ensureUtils() {
if (!utils) {
utils = __webpack_require__(22);
}
}
var imageSource;
function ensureImageSource() {
if (!imageSource) {
imageSource = __webpack_require__(64);
}
}
var actionItemIdGenerator = ACTION_ITEM_ID_OFFSET;
function generateItemId() {
actionItemIdGenerator++;
return actionItemIdGenerator;
}
var ActionItem = function(_super) {
__extends(ActionItem, _super);
function ActionItem() {
_super.call(this);
this._androidPosition = {
position: enums.AndroidActionItemPosition.actionBar,
systemIcon: undefined
};
this._itemId = generateItemId();
}
Object.defineProperty(ActionItem.prototype, "android", {
get: function() {
return this._androidPosition;
},
set: function(value) {
throw new Error("ActionItem.android is read-only");
},
enumerable: true,
configurable: true
});
ActionItem.prototype._getItemId = function() {
return this._itemId;
};
return ActionItem;
}(common.ActionItem);
exports.ActionItem = ActionItem;
var AndroidActionBarSettings = function() {
function AndroidActionBarSettings(actionBar) {
this._iconVisibility = enums.AndroidActionBarIconVisibility.auto;
this._actionBar = actionBar;
}
Object.defineProperty(AndroidActionBarSettings.prototype, "icon", {
get: function() {
return this._icon;
},
set: function(value) {
if (value !== this._icon) {
this._icon = value;
this._actionBar._onIconPropertyChanged();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidActionBarSettings.prototype, "iconVisibility", {
get: function() {
return this._iconVisibility;
},
set: function(value) {
if (value !== this._iconVisibility) {
this._iconVisibility = value;
this._actionBar._onIconPropertyChanged();
}
},
enumerable: true,
configurable: true
});
return AndroidActionBarSettings;
}();
exports.AndroidActionBarSettings = AndroidActionBarSettings;
var NavigationButton = function(_super) {
__extends(NavigationButton, _super);
function NavigationButton() {
_super.apply(this, arguments);
}
return NavigationButton;
}(ActionItem);
exports.NavigationButton = NavigationButton;
var ActionBar = function(_super) {
__extends(ActionBar, _super);
function ActionBar() {
_super.call(this);
this._appResources = application.android.context.getResources();
this._android = new AndroidActionBarSettings(this);
}
Object.defineProperty(ActionBar.prototype, "android", {
get: function() {
return this._android;
},
set: function(value) {
throw new Error("ActionBar.android is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "_nativeView", {
get: function() {
return this._toolbar;
},
enumerable: true,
configurable: true
});
ActionBar.prototype._createUI = function() {
this._toolbar = new android.support.v7.widget.Toolbar(this._context);
var owner = this;
this._toolbar.setOnMenuItemClickListener(new android.support.v7.widget.Toolbar.OnMenuItemClickListener({
onMenuItemClick: function(item) {
var itemId = item.getItemId();
return owner._onAndroidItemSelected(itemId);
}
}));
};
ActionBar.prototype.onLoaded = function() {
_super.prototype.onLoaded.call(this);
this.update();
};
ActionBar.prototype.update = function() {
if (!this._toolbar) {
return;
}
if (!this.page.frame || !this.page.frame._getNavBarVisible(this.page)) {
this._toolbar.setVisibility(android.view.View.GONE);
return;
}
this._toolbar.setVisibility(android.view.View.VISIBLE);
this._addActionItems();
this._updateTitleAndTitleView();
this._updateIcon();
this._updateNavigationButton();
};
ActionBar.prototype._onAndroidItemSelected = function(itemId) {
if (this.navigationButton && itemId === R_ID_HOME) {
this.navigationButton._raiseTap();
return true;
}
var menuItem = undefined;
var items = this.actionItems.getItems();
for (var i = 0; i < items.length; i++) {
if (items[i]._getItemId() === itemId) {
menuItem = items[i];
break;
}
}
if (menuItem) {
menuItem._raiseTap();
return true;
}
return false;
};
ActionBar.prototype._updateNavigationButton = function() {
var navButton = this.navigationButton;
if (navButton && common.isVisible(navButton)) {
if (navButton.android.systemIcon) {
var systemResourceId = getSystemResourceId(navButton.android.systemIcon);
if (systemResourceId) {
this._toolbar.setNavigationIcon(systemResourceId);
}
} else if (navButton.icon) {
var drawableOrId = getDrawableOrResourceId(navButton.icon, this._appResources);
this._toolbar.setNavigationIcon(drawableOrId);
}
this._toolbar.setNavigationOnClickListener(new android.view.View.OnClickListener({
onClick: function(v) {
if (navButton) {
navButton._raiseTap();
}
}
}));
} else {
this._toolbar.setNavigationIcon(null);
}
};
ActionBar.prototype._updateIcon = function() {
var visibility = getIconVisibility(this.android.iconVisibility);
if (visibility) {
var icon = this.android.icon;
if (types.isDefined(icon)) {
var drawableOrId = getDrawableOrResourceId(icon, this._appResources);
if (drawableOrId) {
this._toolbar.setLogo(drawableOrId);
}
} else {
var defaultIcon = application.android.nativeApp.getApplicationInfo().icon;
this._toolbar.setLogo(defaultIcon);
}
} else {
this._toolbar.setLogo(null);
}
};
ActionBar.prototype._updateTitleAndTitleView = function() {
if (!this.titleView) {
var title = this.title;
if (types.isDefined(title)) {
this._toolbar.setTitle(title);
} else {
var appContext = application.android.context;
var appInfo = appContext.getApplicationInfo();
var appLabel = appContext.getPackageManager().getApplicationLabel(appInfo);
if (appLabel) {
this._toolbar.setTitle(appLabel);
}
}
}
};
ActionBar.prototype._addActionItems = function() {
var menu = this._toolbar.getMenu();
var items = this.actionItems.getVisibleItems();
menu.clear();
for (var i = 0; i < items.length; i++) {
var item = items[i];
var menuItem = menu.add(android.view.Menu.NONE, item._getItemId(), android.view.Menu.NONE, item.text + "");
if (item.actionView && item.actionView.android) {
item.android.position = enums.AndroidActionItemPosition.actionBar;
menuItem.setActionView(item.actionView.android);
ActionBar._setOnClickListener(item);
} else if (item.android.systemIcon) {
var systemResourceId = getSystemResourceId(item.android.systemIcon);
if (systemResourceId) {
menuItem.setIcon(systemResourceId);
}
} else if (item.icon) {
var drawableOrId = getDrawableOrResourceId(item.icon, this._appResources);
if (drawableOrId) {
menuItem.setIcon(drawableOrId);
} else {
throw new Error("Error loading icon from " + item.icon);
}
}
var showAsAction = getShowAsAction(item);
menuItem.setShowAsAction(showAsAction);
}
};
ActionBar._setOnClickListener = function(item) {
item.actionView.android.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(v) {
item._raiseTap();
}
}));
};
ActionBar.prototype._onTitlePropertyChanged = function() {
var topFrame = frame.topmost();
if (this._toolbar && topFrame && topFrame.currentPage === this.page) {
this._updateTitleAndTitleView();
}
};
ActionBar.prototype._onIconPropertyChanged = function() {
var topFrame = frame.topmost();
if (this._toolbar && topFrame && topFrame.currentPage === this.page) {
this._updateIcon();
}
};
ActionBar.prototype._clearAndroidReference = function() {
this._toolbar = undefined;
};
ActionBar.prototype._addViewToNativeVisualTree = function(child, atIndex) {
_super.prototype._addViewToNativeVisualTree.call(this, child);
if (this._toolbar && child._nativeView) {
if (types.isNullOrUndefined(atIndex) || atIndex >= this._nativeView.getChildCount()) {
this._toolbar.addView(child._nativeView);
} else {
this._toolbar.addView(child._nativeView, atIndex);
}
return true;
}
return false;
};
ActionBar.prototype._removeViewFromNativeVisualTree = function(child) {
_super.prototype._removeViewFromNativeVisualTree.call(this, child);
if (this._toolbar && child._nativeView) {
this._toolbar.removeView(child._nativeView);
ensureTrace();
trace.notifyEvent(child, "childInLayoutRemovedFromNativeVisualTree");
}
};
return ActionBar;
}(common.ActionBar);
exports.ActionBar = ActionBar;
function getDrawableOrResourceId(icon, resources) {
if (!types.isString(icon)) {
return undefined;
}
ensureUtils();
if (icon.indexOf(utils.RESOURCE_PREFIX) === 0) {
var resourceId = resources.getIdentifier(icon.substr(utils.RESOURCE_PREFIX.length), "drawable", application.android.packageName);
if (resourceId > 0) {
return resourceId;
}
} else {
var drawable;
ensureImageSource();
var is = imageSource.fromFileOrResource(icon);
if (is) {
drawable = new android.graphics.drawable.BitmapDrawable(is.android);
}
return drawable;
}
return undefined;
}
function getShowAsAction(menuItem) {
switch (menuItem.android.position) {
case enums.AndroidActionItemPosition.actionBarIfRoom:
return android.view.MenuItem.SHOW_AS_ACTION_IF_ROOM;

case enums.AndroidActionItemPosition.popup:
return android.view.MenuItem.SHOW_AS_ACTION_NEVER;

case enums.AndroidActionItemPosition.actionBar:
default:
return android.view.MenuItem.SHOW_AS_ACTION_ALWAYS;
}
}
function getIconVisibility(iconVisibility) {
switch (iconVisibility) {
case enums.AndroidActionBarIconVisibility.always:
return true;

case enums.AndroidActionBarIconVisibility.auto:
case enums.AndroidActionBarIconVisibility.never:
default:
return false;
}
}
function getSystemResourceId(systemIcon) {
return android.content.res.Resources.getSystem().getIdentifier(systemIcon, "drawable", "android");
}
var ActionBarStyler = function() {
function ActionBarStyler() {}
ActionBarStyler.setColorProperty = function(v, newValue) {
var toolbar = v._nativeView;
toolbar.setTitleTextColor(newValue);
};
ActionBarStyler.resetColorProperty = function(v, nativeValue) {
if (types.isNullOrUndefined(nativeValue)) {
nativeValue = android.graphics.Color.BLACK;
}
v._nativeView.setTitleTextColor(nativeValue);
};
ActionBarStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(ActionBarStyler.setColorProperty, ActionBarStyler.resetColorProperty), "ActionBar");
};
return ActionBarStyler;
}();
exports.ActionBarStyler = ActionBarStyler;
ActionBarStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var dts = __webpack_require__(75);
var bindable = __webpack_require__(54);
var dependencyObservable = __webpack_require__(34);
var enums = __webpack_require__(24);
var proxy = __webpack_require__(53);
var view = __webpack_require__(12);
var ACTION_ITEMS = "actionItems";
var style;
function ensureStyle() {
if (!style) {
style = __webpack_require__(15);
}
}
var knownCollections;
(function(knownCollections) {
knownCollections.actionItems = "actionItems";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
function onTitlePropertyChanged(data) {
var actionBar = data.object;
actionBar._onTitlePropertyChanged();
}
var ActionBar = function(_super) {
__extends(ActionBar, _super);
function ActionBar() {
_super.call(this);
this._actionItems = new ActionItems(this);
}
Object.defineProperty(ActionBar.prototype, "title", {
get: function() {
return this._getValue(ActionBar.titleProperty);
},
set: function(value) {
this._setValue(ActionBar.titleProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "navigationButton", {
get: function() {
return this._navigationButton;
},
set: function(value) {
if (this._navigationButton !== value) {
if (this._navigationButton) {
this._navigationButton.actionBar = undefined;
}
this._navigationButton = value;
if (this._navigationButton) {
this._navigationButton.actionBar = this;
}
this.update();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "actionItems", {
get: function() {
return this._actionItems;
},
set: function(value) {
throw new Error("actionItems property is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "titleView", {
get: function() {
return this._titleView;
},
set: function(value) {
if (this._titleView !== value) {
ensureStyle();
if (this._titleView) {
this._removeView(this._titleView);
this._titleView.style._resetValue(style.horizontalAlignmentProperty, dependencyObservable.ValueSource.Inherited);
this._titleView.style._resetValue(style.verticalAlignmentProperty, dependencyObservable.ValueSource.Inherited);
}
this._titleView = value;
if (this._titleView) {
this._titleView.style._setValue(style.horizontalAlignmentProperty, enums.HorizontalAlignment.center, dependencyObservable.ValueSource.Inherited);
this._titleView.style._setValue(style.verticalAlignmentProperty, enums.VerticalAlignment.center, dependencyObservable.ValueSource.Inherited);
this._addView(this._titleView);
}
this.update();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "page", {
get: function() {
return this._page;
},
set: function(value) {
this._page = value;
this.unbind("bindingContext");
this.bind({
sourceProperty: "bindingContext",
targetProperty: "bindingContext"
}, this._page);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "android", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "_childrenCount", {
get: function() {
var actionViewsCount = 0;
this._actionItems.getItems().forEach(function(actionItem) {
if (actionItem.actionView) {
actionViewsCount++;
}
});
return actionViewsCount + (this.titleView ? 1 : 0);
},
enumerable: true,
configurable: true
});
ActionBar.prototype.update = function() {};
ActionBar.prototype._onTitlePropertyChanged = function() {};
ActionBar.prototype._addArrayFromBuilder = function(name, value) {
if (name === ACTION_ITEMS) {
this.actionItems.setItems(value);
}
};
ActionBar.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof dts.NavigationButton) {
this.navigationButton = value;
} else if (value instanceof dts.ActionItem) {
this.actionItems.addItem(value);
} else if (value instanceof view.View) {
this.titleView = value;
}
};
ActionBar.prototype._onBindingContextChanged = function(oldValue, newValue) {
_super.prototype._onBindingContextChanged.call(this, oldValue, newValue);
if (this._navigationButton) {
this._navigationButton.bindingContext = newValue;
}
this._actionItems.getItems().forEach(function(item, i, arr) {
item.bindingContext = newValue;
});
};
ActionBar.prototype._eachChildView = function(callback) {
if (this.titleView) {
callback(this.titleView);
}
this.actionItems.getItems().forEach(function(actionItem) {
if (actionItem.actionView) {
callback(actionItem.actionView);
}
});
};
ActionBar.prototype._isEmpty = function() {
if (this.title || this.titleView || this.android && this.android.icon || this.navigationButton || this.actionItems.getItems().length > 0) {
return false;
}
return true;
};
ActionBar.titleProperty = new dependencyObservable.Property("title", "ActionBar", new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None, onTitlePropertyChanged));
return ActionBar;
}(view.View);
exports.ActionBar = ActionBar;
var ActionItems = function() {
function ActionItems(actionBar) {
this._items = new Array();
this._actionBar = actionBar;
}
ActionItems.prototype.addItem = function(item) {
if (!item) {
throw new Error("Cannot add empty item");
}
this._items.push(item);
item.actionBar = this._actionBar;
this.invalidate();
};
ActionItems.prototype.removeItem = function(item) {
if (!item) {
throw new Error("Cannot remove empty item");
}
var itemIndex = this._items.indexOf(item);
if (itemIndex < 0) {
throw new Error("Cannot find item to remove");
}
this._items.splice(itemIndex, 1);
item.actionBar = undefined;
this.invalidate();
};
ActionItems.prototype.getItems = function() {
return this._items.slice();
};
ActionItems.prototype.getVisibleItems = function() {
var visibleItems = [];
this._items.forEach(function(item) {
if (isVisible(item)) {
visibleItems.push(item);
}
});
return visibleItems;
};
ActionItems.prototype.getItemAt = function(index) {
if (index < 0 || index >= this._items.length) {
return undefined;
}
return this._items[index];
};
ActionItems.prototype.setItems = function(items) {
while (this._items.length > 0) {
this.removeItem(this._items[this._items.length - 1]);
}
for (var i = 0; i < items.length; i++) {
this.addItem(items[i]);
}
this.invalidate();
};
ActionItems.prototype.invalidate = function() {
if (this._actionBar) {
this._actionBar.update();
}
};
return ActionItems;
}();
exports.ActionItems = ActionItems;
var ActionItem = function(_super) {
__extends(ActionItem, _super);
function ActionItem() {
_super.apply(this, arguments);
}
Object.defineProperty(ActionItem.prototype, "actionView", {
get: function() {
return this._actionView;
},
set: function(value) {
if (this._actionView !== value) {
ensureStyle();
if (this._actionView && this._actionBar) {
this._actionBar._removeView(this._actionView);
this._actionView.style._resetValue(style.horizontalAlignmentProperty, dependencyObservable.ValueSource.Inherited);
this._actionView.style._resetValue(style.verticalAlignmentProperty, dependencyObservable.ValueSource.Inherited);
}
this._actionView = value;
this._addActionViewToActionBar();
if (this._actionBar) {
this._actionBar.update();
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItem.prototype, "text", {
get: function() {
return this._getValue(ActionItem.textProperty);
},
set: function(value) {
this._setValue(ActionItem.textProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItem.prototype, "icon", {
get: function() {
return this._getValue(ActionItem.iconProperty);
},
set: function(value) {
this._setValue(ActionItem.iconProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItem.prototype, "visibility", {
get: function() {
return this._getValue(ActionItem.visibilityProperty);
},
set: function(value) {
this._setValue(ActionItem.visibilityProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItem.prototype, "actionBar", {
get: function() {
return this._actionBar;
},
set: function(value) {
if (value !== this._actionBar) {
this._actionBar = value;
if (this._actionBar) {
this.bindingContext = this._actionBar.bindingContext;
this._addActionViewToActionBar();
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItem.prototype, "page", {
get: function() {
return this.actionBar ? this.actionBar.page : undefined;
},
enumerable: true,
configurable: true
});
ActionItem.prototype._raiseTap = function() {
this._emit(ActionItem.tapEvent);
};
ActionItem.onItemChanged = function(data) {
var menuItem = data.object;
if (menuItem.actionBar) {
menuItem.actionBar.update();
}
};
ActionItem.prototype._addActionViewToActionBar = function() {
if (this._actionView && !this._actionView._isAddedToNativeVisualTree && this._actionBar) {
ensureStyle();
this._actionView.style._setValue(style.horizontalAlignmentProperty, enums.HorizontalAlignment.center, dependencyObservable.ValueSource.Inherited);
this._actionView.style._setValue(style.verticalAlignmentProperty, enums.VerticalAlignment.center, dependencyObservable.ValueSource.Inherited);
this._actionBar._addView(this._actionView);
}
};
ActionItem.prototype._addChildFromBuilder = function(name, value) {
this.actionView = value;
};
ActionItem.tapEvent = "tap";
ActionItem.textProperty = new dependencyObservable.Property("text", "ActionItem", new dependencyObservable.PropertyMetadata("", null, ActionItem.onItemChanged));
ActionItem.iconProperty = new dependencyObservable.Property("icon", "ActionItem", new dependencyObservable.PropertyMetadata(null, null, ActionItem.onItemChanged));
ActionItem.visibilityProperty = new dependencyObservable.Property("visibility", "ActionItem", new dependencyObservable.PropertyMetadata(enums.Visibility.visible, null, ActionItem.onItemChanged));
return ActionItem;
}(bindable.Bindable);
exports.ActionItem = ActionItem;
function isVisible(item) {
return item.visibility === enums.Visibility.visible;
}
exports.isVisible = isVisible;
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(22);
var common = __webpack_require__(78);
var view_1 = __webpack_require__(12);
global.moduleMerge(common, exports);
function setNativeProperty(data, setter) {
var view = data.object;
if (view instanceof view_1.View) {
var nativeView = view._nativeView;
var lp = nativeView.getLayoutParams();
if (!(lp instanceof org.nativescript.widgets.CommonLayoutParams)) {
lp = new org.nativescript.widgets.CommonLayoutParams();
}
setter(lp);
nativeView.setLayoutParams(lp);
}
}
function setNativeRowProperty(data) {
setNativeProperty(data, function(lp) {
lp.row = data.newValue;
});
}
function setNativeRowSpanProperty(data) {
setNativeProperty(data, function(lp) {
lp.rowSpan = data.newValue;
});
}
function setNativeColumnProperty(data) {
setNativeProperty(data, function(lp) {
lp.column = data.newValue;
});
}
function setNativeColumnSpanProperty(data) {
setNativeProperty(data, function(lp) {
lp.columnSpan = data.newValue;
});
}
common.GridLayout.rowProperty.metadata.onSetNativeValue = setNativeRowProperty;
common.GridLayout.rowSpanProperty.metadata.onSetNativeValue = setNativeRowSpanProperty;
common.GridLayout.columnProperty.metadata.onSetNativeValue = setNativeColumnProperty;
common.GridLayout.columnSpanProperty.metadata.onSetNativeValue = setNativeColumnSpanProperty;
function createNativeSpec(itemSpec) {
switch (itemSpec.gridUnitType) {
case common.GridUnitType.auto:
return new org.nativescript.widgets.ItemSpec(itemSpec.value, org.nativescript.widgets.GridUnitType.auto);

case common.GridUnitType.star:
return new org.nativescript.widgets.ItemSpec(itemSpec.value, org.nativescript.widgets.GridUnitType.star);

case common.GridUnitType.pixel:
return new org.nativescript.widgets.ItemSpec(itemSpec.value * utils.layout.getDisplayDensity(), org.nativescript.widgets.GridUnitType.pixel);

default:
throw new Error("Invalid gridUnitType: " + itemSpec.gridUnitType);
}
}
var ItemSpec = function(_super) {
__extends(ItemSpec, _super);
function ItemSpec() {
_super.apply(this, arguments);
}
Object.defineProperty(ItemSpec.prototype, "actualLength", {
get: function() {
if (this.nativeSpec) {
return Math.round(this.nativeSpec.getActualLength() / utils.layout.getDisplayDensity());
}
return 0;
},
enumerable: true,
configurable: true
});
return ItemSpec;
}(common.ItemSpec);
exports.ItemSpec = ItemSpec;
var GridLayout = function(_super) {
__extends(GridLayout, _super);
function GridLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(GridLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GridLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
GridLayout.prototype._createUI = function() {
var _this = this;
this._layout = new org.nativescript.widgets.GridLayout(this._context);
this.getRows().forEach(function(itemSpec, index, rows) {
_this._onRowAdded(itemSpec);
}, this);
this.getColumns().forEach(function(itemSpec, index, rows) {
_this._onColumnAdded(itemSpec);
}, this);
};
GridLayout.prototype._onRowAdded = function(itemSpec) {
if (this._layout) {
var nativeSpec = createNativeSpec(itemSpec);
itemSpec.nativeSpec = nativeSpec;
this._layout.addRow(nativeSpec);
}
};
GridLayout.prototype._onColumnAdded = function(itemSpec) {
if (this._layout) {
var nativeSpec = createNativeSpec(itemSpec);
itemSpec.nativeSpec = nativeSpec;
this._layout.addColumn(nativeSpec);
}
};
GridLayout.prototype._onRowRemoved = function(itemSpec, index) {
itemSpec.nativeSpec = null;
if (this._layout) {
this._layout.removeRowAt(index);
}
};
GridLayout.prototype._onColumnRemoved = function(itemSpec, index) {
itemSpec.nativeSpec = null;
if (this._layout) {
this._layout.removeColumnAt(index);
}
};
GridLayout.prototype.invalidate = function() {};
return GridLayout;
}(common.GridLayout);
exports.GridLayout = GridLayout;
}, function(module, exports, __webpack_require__) {
var layout_base_1 = __webpack_require__(79);
var view_1 = __webpack_require__(12);
var bindable_1 = __webpack_require__(54);
var proxy_1 = __webpack_require__(53);
var dependency_observable_1 = __webpack_require__(34);
var special_properties_1 = __webpack_require__(39);
var numberUtils = __webpack_require__(81);
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(14);
}
}
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
var GridUnitType;
(function(GridUnitType) {
GridUnitType.auto = "auto";
GridUnitType.pixel = "pixel";
GridUnitType.star = "star";
})(GridUnitType = exports.GridUnitType || (exports.GridUnitType = {}));
special_properties_1.registerSpecialProperty("row", function(instance, propertyValue) {
GridLayout.setRow(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("col", function(instance, propertyValue) {
GridLayout.setColumn(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("colSpan", function(instance, propertyValue) {
GridLayout.setColumnSpan(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("rowSpan", function(instance, propertyValue) {
GridLayout.setRowSpan(instance, !isNaN(+propertyValue) && +propertyValue);
});
var ItemSpec = function(_super) {
__extends(ItemSpec, _super);
function ItemSpec() {
_super.call(this);
this._actualLength = 0;
if (arguments.length === 0) {
this._value = 1;
this._unitType = GridUnitType.star;
} else if (arguments.length === 2) {
ensureTypes();
if (types.isNumber(arguments[0]) && types.isString(arguments[1])) {
if (arguments[0] < 0 || arguments[1] !== GridUnitType.auto && arguments[1] !== GridUnitType.star && arguments[1] !== GridUnitType.pixel) {
throw new Error("Invalid values.");
}
this._value = arguments[0];
this._unitType = arguments[1];
} else {
throw new Error("Arguments must be number and string.");
}
} else {
throw new Error("ItemSpec expects 0 or 2 arguments");
}
this.index = -1;
}
ItemSpec.create = function(value, type) {
var spec = new ItemSpec();
spec._value = value;
spec._unitType = type;
return spec;
};
Object.defineProperty(ItemSpec.prototype, "actualLength", {
get: function() {
return this._actualLength;
},
set: function(value) {
throw new Error("actualLength is read-only property");
},
enumerable: true,
configurable: true
});
ItemSpec.equals = function(value1, value2) {
return value1.gridUnitType === value2.gridUnitType && value1.value === value2.value && value1.owner === value2.owner && value1.index === value2.index;
};
Object.defineProperty(ItemSpec.prototype, "gridUnitType", {
get: function() {
return this._unitType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "isAbsolute", {
get: function() {
return this._unitType === GridUnitType.pixel;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "isAuto", {
get: function() {
return this._unitType === GridUnitType.auto;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "isStar", {
get: function() {
return this._unitType === GridUnitType.star;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "value", {
get: function() {
return this._value;
},
enumerable: true,
configurable: true
});
return ItemSpec;
}(bindable_1.Bindable);
exports.ItemSpec = ItemSpec;
var GridLayout = function(_super) {
__extends(GridLayout, _super);
function GridLayout() {
_super.apply(this, arguments);
this._rows = new Array();
this._cols = new Array();
}
GridLayout.getColumn = function(element) {
return validateArgs(element)._getValue(GridLayout.columnProperty);
};
GridLayout.setColumn = function(element, value) {
validateArgs(element)._setValue(GridLayout.columnProperty, value);
};
GridLayout.getColumnSpan = function(element) {
return validateArgs(element)._getValue(GridLayout.columnSpanProperty);
};
GridLayout.setColumnSpan = function(element, value) {
validateArgs(element)._setValue(GridLayout.columnSpanProperty, value);
};
GridLayout.getRow = function(element) {
return validateArgs(element)._getValue(GridLayout.rowProperty);
};
GridLayout.setRow = function(element, value) {
validateArgs(element)._setValue(GridLayout.rowProperty, value);
};
GridLayout.getRowSpan = function(element) {
return validateArgs(element)._getValue(GridLayout.rowSpanProperty);
};
GridLayout.setRowSpan = function(element, value) {
validateArgs(element)._setValue(GridLayout.rowSpanProperty, value);
};
GridLayout.prototype.addRow = function(itemSpec) {
GridLayout.validateItemSpec(itemSpec);
itemSpec.owner = this;
this._rows.push(itemSpec);
this._onRowAdded(itemSpec);
this.invalidate();
};
GridLayout.prototype.addColumn = function(itemSpec) {
GridLayout.validateItemSpec(itemSpec);
itemSpec.owner = this;
this._cols.push(itemSpec);
this._onColumnAdded(itemSpec);
this.invalidate();
};
GridLayout.prototype.removeRow = function(itemSpec) {
if (!itemSpec) {
throw new Error("Value is null.");
}
var index = this._rows.indexOf(itemSpec);
if (itemSpec.owner !== this || index < 0) {
throw new Error("Row is not child of this GridLayout");
}
itemSpec.index = -1;
this._rows.splice(index, 1);
this._onRowRemoved(itemSpec, index);
this.invalidate();
};
GridLayout.prototype.removeColumn = function(itemSpec) {
if (!itemSpec) {
throw new Error("Value is null.");
}
var index = this._cols.indexOf(itemSpec);
if (itemSpec.owner !== this || index < 0) {
throw new Error("Column is not child of this GridLayout");
}
itemSpec.index = -1;
this._cols.splice(index, 1);
this._onColumnRemoved(itemSpec, index);
this.invalidate();
};
GridLayout.prototype.removeColumns = function() {
for (var i = this._cols.length - 1; i >= 0; i--) {
var colSpec = this._cols[i];
this._onColumnRemoved(colSpec, i);
colSpec.index = -1;
}
this._cols.length = 0;
this.invalidate();
};
GridLayout.prototype.removeRows = function() {
for (var i = this._rows.length - 1; i >= 0; i--) {
var rowSpec = this._rows[i];
this._onRowRemoved(rowSpec, i);
rowSpec.index = -1;
}
this._rows.length = 0;
this.invalidate();
};
GridLayout.prototype.onRowChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayout.prototype.onRowSpanChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayout.prototype.onColumnChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayout.prototype.onColumnSpanChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayout.prototype._onRowAdded = function(itemSpec) {};
GridLayout.prototype._onColumnAdded = function(itemSpec) {};
GridLayout.prototype._onRowRemoved = function(itemSpec, index) {};
GridLayout.prototype._onColumnRemoved = function(itemSpec, index) {};
GridLayout.prototype.getColumns = function() {
return this._cols.slice();
};
GridLayout.prototype.getRows = function() {
return this._rows.slice();
};
Object.defineProperty(GridLayout.prototype, "columnsInternal", {
get: function() {
return this._cols;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GridLayout.prototype, "rowsInternal", {
get: function() {
return this._rows;
},
enumerable: true,
configurable: true
});
GridLayout.prototype.invalidate = function() {
this.requestLayout();
};
GridLayout.prototype._applyXmlAttribute = function(attributeName, attributeValue) {
if (attributeName === "columns") {
this._setColumns(attributeValue);
return true;
} else if (attributeName === "rows") {
this._setRows(attributeValue);
return true;
}
return _super.prototype._applyXmlAttribute.call(this, attributeName, attributeValue);
};
GridLayout.parseItemSpecs = function(value) {
var result = new Array();
var arr = value.split(/[\s,]+/);
for (var i = 0; i < arr.length; i++) {
var str = arr[i].trim();
if (str.length > 0) {
result.push(GridLayout.convertGridLength(arr[i].trim()));
}
}
return result;
};
GridLayout.convertGridLength = function(value) {
if (value === "auto") {
return ItemSpec.create(1, GridUnitType.auto);
} else if (value.indexOf("*") !== -1) {
var starCount = parseInt(value.replace("*", "") || "1");
return ItemSpec.create(starCount, GridUnitType.star);
} else if (!isNaN(parseInt(value))) {
return ItemSpec.create(parseInt(value), GridUnitType.pixel);
} else {
throw new Error("Cannot parse item spec from string: " + value);
}
};
GridLayout.onRowPropertyChanged = function(data) {
var element = GridLayout.getView(data.object);
var grid = element.parent;
if (grid instanceof GridLayout) {
grid.onRowChanged(element, data.oldValue, data.newValue);
}
};
GridLayout.onColumnPropertyChanged = function(data) {
var element = GridLayout.getView(data.object);
var grid = element.parent;
if (grid instanceof GridLayout) {
grid.onColumnChanged(element, data.oldValue, data.newValue);
}
};
GridLayout.onRowSpanPropertyChanged = function(data) {
var element = GridLayout.getView(data.object);
var grid = element.parent;
if (grid instanceof GridLayout) {
grid.onRowSpanChanged(element, data.oldValue, data.newValue);
}
};
GridLayout.onColumnSpanPropertyChanged = function(data) {
var element = GridLayout.getView(data.object);
var grid = element.parent;
if (grid instanceof GridLayout) {
grid.onColumnSpanChanged(element, data.oldValue, data.newValue);
}
};
GridLayout.validateItemSpec = function(itemSpec) {
if (!itemSpec) {
throw new Error("Value cannot be undefined.");
}
if (itemSpec.owner) {
throw new Error("itemSpec is already added to GridLayout.");
}
};
GridLayout.getView = function(object) {
if (object instanceof view_1.View) {
return object;
}
throw new Error("Element is not View or its descendant.");
};
GridLayout.prototype._setColumns = function(value) {
this.removeColumns();
var columns = GridLayout.parseItemSpecs(value);
for (var i = 0, count = columns.length; i < count; i++) {
this.addColumn(columns[i]);
}
};
GridLayout.prototype._setRows = function(value) {
this.removeRows();
var rows = GridLayout.parseItemSpecs(value);
for (var i = 0, count = rows.length; i < count; i++) {
this.addRow(rows[i]);
}
};
GridLayout.columnProperty = new dependency_observable_1.Property("Column", "GridLayout", new proxy_1.PropertyMetadata(0, dependency_observable_1.PropertyMetadataSettings.None, GridLayout.onColumnPropertyChanged, numberUtils.notNegative));
GridLayout.columnSpanProperty = new dependency_observable_1.Property("ColumnSpan", "GridLayout", new proxy_1.PropertyMetadata(1, dependency_observable_1.PropertyMetadataSettings.None, GridLayout.onColumnSpanPropertyChanged, numberUtils.greaterThanZero));
GridLayout.rowProperty = new dependency_observable_1.Property("Row", "GridLayout", new proxy_1.PropertyMetadata(0, dependency_observable_1.PropertyMetadataSettings.None, GridLayout.onRowPropertyChanged, numberUtils.notNegative));
GridLayout.rowSpanProperty = new dependency_observable_1.Property("RowSpan", "GridLayout", new proxy_1.PropertyMetadata(1, dependency_observable_1.PropertyMetadataSettings.None, GridLayout.onRowSpanPropertyChanged, numberUtils.greaterThanZero));
return GridLayout;
}(layout_base_1.LayoutBase);
exports.GridLayout = GridLayout;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(80);
var LayoutBase = function(_super) {
__extends(LayoutBase, _super);
function LayoutBase() {
_super.apply(this, arguments);
}
LayoutBase.prototype._onClipToBoundsChanged = function(oldValue, newValue) {
console.warn("clipToBounds with value false is not supported on Android. You can use this.android.getParent().setClipChildren(false) as an alternative");
};
return LayoutBase;
}(common.LayoutBase);
exports.LayoutBase = LayoutBase;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var view = __webpack_require__(12);
var dependencyObservable = __webpack_require__(34);
var utils = __webpack_require__(22);
var style = __webpack_require__(15);
var dependency_observable_1 = __webpack_require__(34);
var proxy_1 = __webpack_require__(53);
var clipToBoundsProperty = new dependency_observable_1.Property("clipToBounds", "LayoutBase", new proxy_1.PropertyMetadata(true, dependencyObservable.PropertyMetadataSettings.None));
function onClipToBoundsPropertyChanged(data) {
var layout = data.object;
layout._onClipToBoundsChanged(data.oldValue, data.newValue);
}
clipToBoundsProperty.metadata.onSetNativeValue = onClipToBoundsPropertyChanged;
var LayoutBase = function(_super) {
__extends(LayoutBase, _super);
function LayoutBase() {
_super.apply(this, arguments);
this._subViews = new Array();
}
LayoutBase.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof view.View) {
this.addChild(value);
}
};
LayoutBase.prototype.getChildrenCount = function() {
return this._subViews.length;
};
Object.defineProperty(LayoutBase.prototype, "_childrenCount", {
get: function() {
return this._subViews.length;
},
enumerable: true,
configurable: true
});
LayoutBase.prototype.getChildAt = function(index) {
return this._subViews[index];
};
LayoutBase.prototype.getChildIndex = function(child) {
return this._subViews.indexOf(child);
};
LayoutBase.prototype.getChildById = function(id) {
return view.getViewById(this, id);
};
LayoutBase.prototype._registerLayoutChild = function(child) {};
LayoutBase.prototype._unregisterLayoutChild = function(child) {};
LayoutBase.prototype.addChild = function(child) {
this._subViews.push(child);
this._addView(child);
this._registerLayoutChild(child);
};
LayoutBase.prototype.insertChild = function(child, atIndex) {
this._subViews.splice(atIndex, 0, child);
this._addView(child, atIndex);
this._registerLayoutChild(child);
};
LayoutBase.prototype.removeChild = function(child) {
this._removeView(child);
var index = this._subViews.indexOf(child);
this._subViews.splice(index, 1);
this._unregisterLayoutChild(child);
};
LayoutBase.prototype.removeChildren = function() {
while (this.getChildrenCount() !== 0) {
this.removeChild(this._subViews[this.getChildrenCount() - 1]);
}
};
Object.defineProperty(LayoutBase.prototype, "padding", {
get: function() {
return this.style.padding;
},
set: function(value) {
this.style.padding = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBase.prototype, "paddingTop", {
get: function() {
return this.style.paddingTop;
},
set: function(value) {
this.style.paddingTop = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBase.prototype, "paddingRight", {
get: function() {
return this.style.paddingRight;
},
set: function(value) {
this.style.paddingRight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBase.prototype, "paddingBottom", {
get: function() {
return this.style.paddingBottom;
},
set: function(value) {
this.style.paddingBottom = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBase.prototype, "paddingLeft", {
get: function() {
return this.style.paddingLeft;
},
set: function(value) {
this.style.paddingLeft = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBase.prototype, "clipToBounds", {
get: function() {
return this._getValue(LayoutBase.clipToBoundsProperty);
},
set: function(value) {
this._setValue(LayoutBase.clipToBoundsProperty, value);
},
enumerable: true,
configurable: true
});
LayoutBase.prototype._onClipToBoundsChanged = function(oldValue, newValue) {};
LayoutBase.prototype._childIndexToNativeChildIndex = function(index) {
if (types.isUndefined(index)) {
return undefined;
}
var result = 0;
for (var i = 0; i < index && i < this._subViews.length; i++) {
result += this._subViews[i]._getNativeViewsCount();
}
return result;
};
LayoutBase.prototype._eachChildView = function(callback) {
var i;
var length = this._subViews.length;
var retVal;
for (i = 0; i < length; i++) {
retVal = callback(this._subViews[i]);
if (retVal === false) {
break;
}
}
};
LayoutBase.prototype.eachLayoutChild = function(callback) {
var lastChild = null;
this._eachChildView(function(cv) {
cv._eachLayoutView(function(lv) {
if (lastChild && lastChild._isVisible) {
callback(lastChild, false);
}
lastChild = lv;
});
return true;
});
if (lastChild && lastChild._isVisible) {
callback(lastChild, true);
}
};
LayoutBase.adjustChildrenLayoutParams = function(layoutBase, widthMeasureSpec, heightMeasureSpec) {
var availableWidth = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthSpec = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var availableHeight = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightSpec = utils.layout.getMeasureSpecMode(heightMeasureSpec);
for (var i = 0, count = layoutBase.getChildrenCount(); i < count; i++) {
var child = layoutBase.getChildAt(i);
var lp = child.style._getValue(style.nativeLayoutParamsProperty);
if (widthSpec !== utils.layout.UNSPECIFIED) {
if (lp.widthPercent > 0) {
lp.width = Math.round(availableWidth * lp.widthPercent);
}
if (lp.leftMarginPercent > 0) {
lp.leftMargin = Math.round(availableWidth * lp.leftMarginPercent);
}
if (lp.rightMarginPercent > 0) {
lp.rightMargin = Math.round(availableWidth * lp.rightMarginPercent);
}
}
if (heightSpec !== utils.layout.UNSPECIFIED) {
if (lp.heightPercent > 0) {
lp.height = Math.round(availableHeight * lp.heightPercent);
}
if (lp.topMarginPercent > 0) {
lp.topMargin = Math.round(availableHeight * lp.topMarginPercent);
}
if (lp.bottomMarginPercent > 0) {
lp.bottomMargin = Math.round(availableHeight * lp.bottomMarginPercent);
}
}
}
};
LayoutBase.restoreOriginalParams = function(layoutBase) {
for (var i = 0, count = layoutBase.getChildrenCount(); i < count; i++) {
var child = layoutBase.getChildAt(i);
var lp = child.style._getValue(style.nativeLayoutParamsProperty);
if (lp.widthPercent > 0) {
lp.width = -1;
}
if (lp.heightPercent > 0) {
lp.height = -1;
}
if (lp.leftMarginPercent > 0) {
lp.leftMargin = 0;
}
if (lp.topMarginPercent > 0) {
lp.topMargin = 0;
}
if (lp.rightMarginPercent > 0) {
lp.rightMargin = 0;
}
if (lp.bottomMarginPercent > 0) {
lp.bottomMargin = 0;
}
}
};
LayoutBase.clipToBoundsProperty = clipToBoundsProperty;
return LayoutBase;
}(view.CustomLayoutView);
exports.LayoutBase = LayoutBase;
}, function(module, exports) {
var epsilon = 1e-5;
function areClose(value1, value2) {
return Math.abs(value1 - value2) < epsilon;
}
exports.areClose = areClose;
function greaterThanOrClose(value1, value2) {
return value1 > value2 || areClose(value1, value2);
}
exports.greaterThanOrClose = greaterThanOrClose;
function greaterThan(value1, value2) {
return value1 > value2 && !areClose(value1, value2);
}
exports.greaterThan = greaterThan;
function lessThan(value1, value2) {
return value1 < value2 && !areClose(value1, value2);
}
exports.lessThan = lessThan;
function isZero(value) {
return Math.abs(value) < epsilon;
}
exports.isZero = isZero;
function greaterThanZero(value) {
return value > 0;
}
exports.greaterThanZero = greaterThanZero;
function notNegative(value) {
return value >= 0;
}
exports.notNegative = notNegative;
}, function(module, exports, __webpack_require__) {
var debug_1 = __webpack_require__(71);
var xml = __webpack_require__(83);
var view_1 = __webpack_require__(12);
var file_system_1 = __webpack_require__(19);
var types_1 = __webpack_require__(14);
var component_builder_1 = __webpack_require__(85);
var platform_1 = __webpack_require__(45);
var page_1 = __webpack_require__(72);
var file_name_resolver_1 = __webpack_require__(44);
var defaultNameSpaceMatcher = /tns\.xsd$/i;
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(30);
}
}
function parse(value, context) {
if (types_1.isString(value)) {
var viewToReturn;
if (context instanceof view_1.View) {
context = getExports(context);
}
var componentModule = parseInternal(value, context);
if (componentModule) {
viewToReturn = componentModule.component;
}
return viewToReturn;
} else if (types_1.isFunction(value)) {
return value();
}
}
exports.parse = parse;
function parseInternal(value, context, uri) {
var start;
var ui;
var errorFormat = debug_1.debug && uri ? xml2ui.SourceErrorFormat(uri) : xml2ui.PositionErrorFormat;
var componentSourceTracker = debug_1.debug && uri ? xml2ui.ComponentSourceTracker(uri) : function() {};
(start = new xml2ui.XmlStringParser(errorFormat)).pipe(new xml2ui.PlatformFilter()).pipe(new xml2ui.XmlStateParser(ui = new xml2ui.ComponentParser(context, errorFormat, componentSourceTracker)));
start.parse(value);
return ui.rootComponentModule;
}
function loadCustomComponent(componentPath, componentName, attributes, context, parentPage) {
var result;
componentPath = componentPath.replace("~/", "");
var fullComponentPathFilePathWithoutExt = componentPath;
if (!file_system_1.File.exists(componentPath) || componentPath === "." || componentPath === "./") {
fullComponentPathFilePathWithoutExt = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, componentPath, componentName);
}
var xmlFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "xml");
if (xmlFilePath) {
var jsFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "js");
var subExports = context;
if (jsFilePath) {
subExports = global.loadModule(jsFilePath);
}
result = loadInternal(xmlFilePath, subExports);
if (types_1.isDefined(result) && types_1.isDefined(result.component) && types_1.isDefined(attributes)) {
var attr;
for (attr in attributes) {
component_builder_1.setPropertyValue(result.component, subExports, context, attr, attributes[attr]);
}
}
} else {
result = component_builder_1.getComponentModule(componentName, componentPath, attributes, context);
}
var cssFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "css");
if (cssFilePath) {
if (parentPage) {
parentPage.addCssFile(cssFilePath);
} else {
ensureTrace();
trace.write("CSS file found but no page specified. Please specify page in the options!", trace.categories.Error, trace.messageType.error);
}
}
return result;
}
function load(pathOrOptions, context) {
var viewToReturn;
var componentModule;
if (!context) {
if (!types_1.isString(pathOrOptions)) {
var options = pathOrOptions;
componentModule = loadCustomComponent(options.path, options.name, options.attributes, options.exports, options.page);
} else {
var path_1 = pathOrOptions;
componentModule = loadInternal(path_1);
}
} else {
var path_2 = pathOrOptions;
componentModule = loadInternal(path_2, context);
}
if (componentModule) {
viewToReturn = componentModule.component;
}
return viewToReturn;
}
exports.load = load;
function loadInternal(fileName, context) {
var componentModule;
if (file_system_1.File.exists(fileName)) {
var file = file_system_1.File.fromPath(fileName);
var onError = function(error) {
throw new Error("Error loading file " + fileName + " :" + error.message);
};
var text = file.readTextSync(onError);
componentModule = parseInternal(text, context, fileName);
}
if (componentModule && componentModule.component) {
componentModule.component.exports = context;
}
return componentModule;
}
function getExports(instance) {
var parent = instance.parent;
while (parent && parent.exports === undefined) {
parent = parent.parent;
}
return parent ? parent.exports : undefined;
}
var xml2ui;
(function(xml2ui) {
var XmlProducerBase = function() {
function XmlProducerBase() {}
XmlProducerBase.prototype.pipe = function(next) {
this._next = next;
return next;
};
XmlProducerBase.prototype.next = function(args) {
this._next.parse(args);
};
return XmlProducerBase;
}();
xml2ui.XmlProducerBase = XmlProducerBase;
var XmlStringParser = function(_super) {
__extends(XmlStringParser, _super);
function XmlStringParser(error) {
_super.call(this);
this.error = error || PositionErrorFormat;
}
XmlStringParser.prototype.parse = function(value) {
var _this = this;
var xmlParser = new xml.XmlParser(function(args) {
try {
_this.next(args);
} catch (e) {
throw _this.error(e, args.position);
}
}, function(e, p) {
throw _this.error(e, p);
}, true);
if (types_1.isString(value)) {
xmlParser.parse(value);
}
};
return XmlStringParser;
}(XmlProducerBase);
xml2ui.XmlStringParser = XmlStringParser;
function PositionErrorFormat(e, p) {
return new debug_1.ScopeError(e, "Parsing XML at " + p.line + ":" + p.column);
}
xml2ui.PositionErrorFormat = PositionErrorFormat;
function SourceErrorFormat(uri) {
return function(e, p) {
var source = p ? new debug_1.Source(uri, p.line, p.column) : new debug_1.Source(uri, -1, -1);
e = new debug_1.SourceError(e, source, "Building UI from XML.");
return e;
};
}
xml2ui.SourceErrorFormat = SourceErrorFormat;
function ComponentSourceTracker(uri) {
return function(component, p) {
if (!debug_1.Source.get(component)) {
var source = p ? new debug_1.Source(uri, p.line, p.column) : new debug_1.Source(uri, -1, -1);
debug_1.Source.set(component, source);
}
};
}
xml2ui.ComponentSourceTracker = ComponentSourceTracker;
var PlatformFilter = function(_super) {
__extends(PlatformFilter, _super);
function PlatformFilter() {
_super.apply(this, arguments);
}
PlatformFilter.prototype.parse = function(args) {
if (args.eventType === xml.ParserEventType.StartElement) {
if (PlatformFilter.isPlatform(args.elementName)) {
if (this.currentPlatformContext) {
throw new Error("Already in '" + this.currentPlatformContext + "' platform context and cannot switch to '" + args.elementName + "' platform! Platform tags cannot be nested.");
}
this.currentPlatformContext = args.elementName;
return;
}
}
if (args.eventType === xml.ParserEventType.EndElement) {
if (PlatformFilter.isPlatform(args.elementName)) {
this.currentPlatformContext = undefined;
return;
}
}
if (this.currentPlatformContext && !PlatformFilter.isCurentPlatform(this.currentPlatformContext)) {
return;
}
this.next(args);
};
PlatformFilter.isPlatform = function(value) {
return value && (value.toLowerCase() === platform_1.platformNames.android.toLowerCase() || value.toLowerCase() === platform_1.platformNames.ios.toLowerCase());
};
PlatformFilter.isCurentPlatform = function(value) {
return value && value.toLowerCase() === platform_1.device.os.toLowerCase();
};
return PlatformFilter;
}(XmlProducerBase);
xml2ui.PlatformFilter = PlatformFilter;
var XmlArgsReplay = function(_super) {
__extends(XmlArgsReplay, _super);
function XmlArgsReplay(args, errorFormat) {
_super.call(this);
this.args = args;
this.error = errorFormat;
}
XmlArgsReplay.prototype.replay = function() {
var _this = this;
this.args.forEach(function(args) {
try {
_this.next(args);
} catch (e) {
throw _this.error(e, args.position);
}
});
};
return XmlArgsReplay;
}(XmlProducerBase);
xml2ui.XmlArgsReplay = XmlArgsReplay;
var XmlStateParser = function() {
function XmlStateParser(state) {
this.state = state;
}
XmlStateParser.prototype.parse = function(args) {
this.state = this.state.parse(args);
};
return XmlStateParser;
}();
xml2ui.XmlStateParser = XmlStateParser;
var TemplateParser = function() {
function TemplateParser(parent, templateProperty) {
this.parent = parent;
this._context = templateProperty.context;
this._recordedXmlStream = new Array();
this._templateProperty = templateProperty;
this._nestingLevel = 0;
this._state = 0;
}
TemplateParser.prototype.parse = function(args) {
if (args.eventType === xml.ParserEventType.StartElement) {
this.parseStartElement(args.prefix, args.namespace, args.elementName, args.attributes);
} else if (args.eventType === xml.ParserEventType.EndElement) {
this.parseEndElement(args.prefix, args.elementName);
}
this._recordedXmlStream.push(args);
return this._state === 2 ? this.parent : this;
};
Object.defineProperty(TemplateParser.prototype, "elementName", {
get: function() {
return this._templateProperty.elementName;
},
enumerable: true,
configurable: true
});
TemplateParser.prototype.parseStartElement = function(prefix, namespace, elementName, attributes) {
if (this._state === 0) {
this._state = 1;
} else if (this._state === 2) {
throw new Error("Template must have exactly one root element but multiple elements were found.");
}
this._nestingLevel++;
};
TemplateParser.prototype.parseEndElement = function(prefix, elementName) {
if (this._state === 0) {
throw new Error("Template must have exactly one root element but none was found.");
} else if (this._state === 2) {
throw new Error("No more closing elements expected for this template.");
}
this._nestingLevel--;
if (this._nestingLevel === 0) {
this._state = 2;
this.build();
}
};
TemplateParser.prototype.build = function() {
var _this = this;
if (this._templateProperty.name in this._templateProperty.parent.component) {
var context = this._context;
var errorFormat = this._templateProperty.errorFormat;
var sourceTracker = this._templateProperty.sourceTracker;
var template = function() {
var start;
var ui;
(start = new xml2ui.XmlArgsReplay(_this._recordedXmlStream, errorFormat)).pipe(new XmlStateParser(ui = new ComponentParser(context, errorFormat, sourceTracker)));
start.replay();
return ui.rootComponentModule.component;
};
this._templateProperty.parent.component[this._templateProperty.name] = template;
}
};
return TemplateParser;
}();
xml2ui.TemplateParser = TemplateParser;
var ComponentParser = function() {
function ComponentParser(context, errorFormat, sourceTracker) {
this.parents = new Array();
this.complexProperties = new Array();
this.context = context;
this.error = errorFormat;
this.sourceTracker = sourceTracker;
}
ComponentParser.prototype.parse = function(args) {
var parent = this.parents[this.parents.length - 1];
var complexProperty = this.complexProperties[this.complexProperties.length - 1];
if (args.eventType === xml.ParserEventType.StartElement) {
if (ComponentParser.isComplexProperty(args.elementName)) {
var name = ComponentParser.getComplexPropertyName(args.elementName);
this.complexProperties.push({
parent: parent,
name: name,
items: []
});
if (ComponentParser.isKnownTemplate(name, parent.exports)) {
return new TemplateParser(this, {
context: (parent ? getExports(parent.component) : null) || this.context,
parent: parent,
name: name,
elementName: args.elementName,
templateItems: [],
errorFormat: this.error,
sourceTracker: this.sourceTracker
});
}
} else {
var componentModule;
if (args.prefix && args.namespace) {
componentModule = loadCustomComponent(args.namespace, args.elementName, args.attributes, this.context, this.currentPage);
} else {
var namespace = args.namespace;
if (defaultNameSpaceMatcher.test(namespace || "")) {
namespace = undefined;
}
componentModule = component_builder_1.getComponentModule(args.elementName, namespace, args.attributes, this.context);
}
if (componentModule) {
this.sourceTracker(componentModule.component, args.position);
if (parent) {
if (complexProperty) {
ComponentParser.addToComplexProperty(parent, complexProperty, componentModule);
} else if (parent.component._addChildFromBuilder) {
parent.component._addChildFromBuilder(args.elementName, componentModule.component);
}
} else if (this.parents.length === 0) {
this.rootComponentModule = componentModule;
if (this.rootComponentModule && this.rootComponentModule.component instanceof page_1.Page) {
this.currentPage = this.rootComponentModule.component;
if (this.currentPage.exports) {
this.context = this.currentPage.exports;
}
}
}
this.parents.push(componentModule);
}
}
} else if (args.eventType === xml.ParserEventType.EndElement) {
if (ComponentParser.isComplexProperty(args.elementName)) {
if (complexProperty) {
if (parent && parent.component._addArrayFromBuilder) {
parent.component._addArrayFromBuilder(complexProperty.name, complexProperty.items);
complexProperty.items = [];
}
}
this.complexProperties.pop();
} else {
this.parents.pop();
}
}
return this;
};
ComponentParser.isComplexProperty = function(name) {
return types_1.isString(name) && name.indexOf(".") !== -1;
};
ComponentParser.getComplexPropertyName = function(fullName) {
var name;
if (types_1.isString(fullName)) {
var names = fullName.split(".");
name = names[names.length - 1];
}
return name;
};
ComponentParser.isKnownTemplate = function(name, exports) {
return ComponentParser.KNOWNTEMPLATES in exports && exports[ComponentParser.KNOWNTEMPLATES] && name in exports[ComponentParser.KNOWNTEMPLATES];
};
ComponentParser.addToComplexProperty = function(parent, complexProperty, elementModule) {
var parentComponent = parent.component;
if (ComponentParser.isKnownCollection(complexProperty.name, parent.exports)) {
complexProperty.items.push(elementModule.component);
} else if (parentComponent._addChildFromBuilder) {
parentComponent._addChildFromBuilder(complexProperty.name, elementModule.component);
} else {
parentComponent[complexProperty.name] = elementModule.component;
}
};
ComponentParser.isKnownCollection = function(name, context) {
return ComponentParser.KNOWNCOLLECTIONS in context && context[ComponentParser.KNOWNCOLLECTIONS] && name in context[ComponentParser.KNOWNCOLLECTIONS];
};
ComponentParser.KNOWNCOLLECTIONS = "knownCollections";
ComponentParser.KNOWNTEMPLATES = "knownTemplates";
return ComponentParser;
}();
xml2ui.ComponentParser = ComponentParser;
})(xml2ui || (xml2ui = {}));
}, function(module, exports, __webpack_require__) {
"use strict";
var easysax = __webpack_require__(84);
var ParserEventType = function() {
function ParserEventType() {}
ParserEventType.StartElement = "StartElement";
ParserEventType.EndElement = "EndElement";
ParserEventType.Text = "Text";
ParserEventType.CDATA = "CDATA";
ParserEventType.Comment = "Comment";
return ParserEventType;
}();
exports.ParserEventType = ParserEventType;
var ParserEvent = function() {
function ParserEvent(eventType, position, prefix, namespace, elementName, attributes, data) {
this._eventType = eventType;
this._position = position;
this._prefix = prefix;
this._namespace = namespace;
this._elementName = elementName;
this._attributes = attributes;
this._data = data;
}
ParserEvent.prototype.toString = function() {
return JSON.stringify({
eventType: this.eventType,
position: this.position,
prefix: this.prefix,
namespace: this.namespace,
elementName: this.elementName,
attributes: this.attributes,
data: this.data
});
};
Object.defineProperty(ParserEvent.prototype, "eventType", {
get: function() {
return this._eventType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "position", {
get: function() {
return this._position;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "prefix", {
get: function() {
return this._prefix;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "namespace", {
get: function() {
return this._namespace;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "elementName", {
get: function() {
return this._elementName;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "attributes", {
get: function() {
return this._attributes;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "data", {
get: function() {
return this._data;
},
enumerable: true,
configurable: true
});
return ParserEvent;
}();
exports.ParserEvent = ParserEvent;
var _ampCodes;
var _entitySearchRegEx = /&#(\d+);|&#x([0123456789abcdef]+);|&(\w+);/gi;
function _generateAmpMap() {
var objCodes = {
Tab: 9,
NewLine: 10,
excl: 33,
quot: 34,
QUOT: 34,
num: 35,
dollar: 36,
percent: 37,
amp: 38,
AMP: 38,
apos: 39,
lpar: 40,
rpar: 41,
ast: 42,
midast: 42,
plus: 43,
comma: 44,
period: 46,
sol: 47,
colon: 58,
semi: 59,
lt: 60,
LT: 60,
equals: 61,
gt: 62,
GT: 62,
quest: 63,
commat: 64,
lsqb: 91,
lbrack: 91,
bsol: 92,
rsqb: 92,
rbrack: 92,
Hat: 94,
lowbar: 95,
grave: 96,
DiacriticalGrave: 96,
lcub: 123,
lbrace: 123,
verbar: 124,
vert: 124,
VerticalLine: 124,
rcub: 125,
rbrace: 125,
nbsp: 160,
iexcl: 161,
cent: 162,
pound: 163,
curren: 164,
yen: 165,
brvbar: 166,
brkbar: 166,
sect: 167,
uml: 168,
copy: 169,
ordf: 170,
laquo: 171,
not: 172,
shy: 173,
reg: 174,
macr: 175,
hibar: 175,
deg: 176,
plusmn: 177,
sup2: 178,
sup3: 179,
acute: 180,
micro: 181,
para: 182,
middot: 183,
cedil: 184,
sup1: 185,
ordm: 186,
raquo: 187,
frac14: 188,
frac12: 189,
frac34: 190,
iquest: 191,
Agrave: 192,
Aacute: 193,
Acirc: 194,
Atilde: 195,
Auml: 196,
Aring: 197,
AElig: 198,
Ccedil: 199,
Egrave: 200,
Eacute: 201,
Ecirc: 202,
Euml: 203,
Igrave: 204,
Iacute: 205,
Icirc: 206,
Iuml: 207,
ETH: 208,
Dstrok: 208,
Ntilde: 209,
Ograve: 210,
Oacute: 211,
Ocirc: 212,
Otilde: 213,
Ouml: 214,
times: 215,
Oslash: 216,
Ugrave: 217,
Uacute: 218,
Ucirc: 219,
Uuml: 220,
Yacute: 221,
THORN: 222,
szlig: 223,
agrave: 224,
aacute: 225,
acirc: 226,
atilde: 227,
auml: 228,
aring: 229,
aelig: 230,
ccedil: 231,
egrave: 232,
eacute: 233,
ecirc: 234,
euml: 235,
igrave: 236,
iacute: 237,
icirc: 238,
iuml: 239,
eth: 240,
ntilde: 241,
ograve: 242,
oacute: 243,
ocirc: 244,
otilde: 245,
ouml: 246,
divide: 247,
oslash: 248,
ugrave: 249,
uacute: 250,
ucirc: 251,
uuml: 252,
yacute: 253,
thorn: 254,
yuml: 255,
fnof: 402,
imped: 437,
gacute: 501,
jmath: 567,
circ: 710,
caron: 711,
Hacek: 711,
breve: 728,
Breve: 728,
dot: 729,
DiacriticalDot: 729,
ring: 730,
ogon: 731,
tilde: 732,
DiacriticalTilde: 732,
dblac: 733,
DiacriticalDoubleAcute: 733,
DownBreve: 785,
UnderBar: 818,
Alpha: 913,
Beta: 914,
Gamma: 915,
Delta: 916,
Epsilon: 917,
Zeta: 918,
Eta: 919,
Theta: 920,
Iota: 921,
Kappa: 922,
Lambda: 923,
Mu: 924,
Nu: 925,
Xi: 926,
Omicron: 927,
Pi: 928,
Rho: 929,
Sigma: 931,
Tau: 932,
Upsilon: 933,
Phi: 934,
Chi: 935,
Psi: 936,
Omega: 937,
alpha: 945,
beta: 946,
gamma: 947,
delta: 948,
epsilon: 949,
epsiv: 949,
varepsilon: 949,
zeta: 950,
eta: 951,
theta: 952,
iota: 953,
kappa: 954,
lambda: 955,
mu: 956,
nu: 957,
xi: 958,
omicron: 959,
pi: 960,
rho: 961,
sigmaf: 962,
sigmav: 962,
varsigma: 962,
sigma: 963,
tau: 964,
upsilon: 965,
phi: 966,
chi: 967,
psi: 968,
omega: 969,
thetav: 977,
vartheta: 977,
thetasym: 977,
Upsi: 978,
upsih: 978,
straightphi: 981,
piv: 982,
varpi: 982,
Gammad: 988,
gammad: 989,
digamma: 989,
kappav: 1008,
varkappa: 1008,
rhov: 1009,
varrho: 1009,
epsi: 1013,
straightepsilon: 1013,
bepsi: 1014,
backepsilon: 1014,
euro: 8364,
trade: 8482,
TRADE: 8482,
forall: 8704,
part: 8706,
larr: 8592,
rarr: 8593,
hyphen: 8208,
dash: 8208,
ndash: 8211,
mdash: 8212,
horbar: 8213,
Vert: 8214,
Verbar: 8214,
lsquo: 8216,
OpenCurlyQuote: 8216,
rsquo: 8217,
rsquor: 8217,
CloseCurlyQuote: 8217,
lsquor: 8218,
sbquo: 8218,
ldquo: 8220,
OpenCurlyDoubleQuote: 8220,
rdquo: 8221,
rdquor: 8221,
CloseCurlyDoubleQuote: 8221,
ldquor: 8222,
bdquo: 8222,
dagger: 8224,
Dagger: 8225,
ddagger: 8225,
bull: 8226,
bullet: 8226,
nldr: 8229,
hellip: 8230,
mldr: 8230,
hybull: 8259,
tdot: 8411,
TripleDot: 8411,
DotDot: 8412,
star: 9734,
phone: 9742,
spades: 9824,
clubs: 9827,
hearts: 9829,
diams: 9830,
female: 9792,
male: 9794,
check: 10003,
checkmark: 10003,
cross: 10007,
VerticalSeparator: 10072,
EmptySmallSquare: 9723,
FilledSmallSquare: 9724,
starf: 9733,
bigstar: 9733,
square: 9633,
squ: 9633,
Square: 9633
};
var ampCodes = new Map();
for (var key in objCodes) {
if (objCodes.hasOwnProperty(key)) {
ampCodes.set(key, objCodes[key]);
}
}
return ampCodes;
}
if (true) {
_ampCodes = _generateAmpMap();
}
function _HandleAmpEntities(found, decimalValue, hexValue, wordValue) {
if (wordValue) {
if (!_ampCodes) {
_ampCodes = _generateAmpMap();
}
var res = _ampCodes.get(wordValue);
if (res) {
return String.fromCharCode(res);
}
return found;
}
if (decimalValue) {
return String.fromCharCode(parseInt(decimalValue, 10));
}
return String.fromCharCode(parseInt(hexValue, 16));
}
var XmlParser = function() {
function XmlParser(onEvent, onError, processNamespaces) {
this._processNamespaces = processNamespaces;
this._parser = new easysax.EasySAXParser();
var that = this;
this._parser.on("startNode", function(elem, attr, uq, tagend, str, pos) {
var attributes = attr();
if (attributes === true) {
attributes = undefined;
}
if (attributes) {
var key;
for (key in attributes) {
if (attributes.hasOwnProperty(key)) {
attributes[key] = XmlParser._dereferenceEntities(attributes[key]);
}
}
}
var prefix = undefined;
var namespace = undefined;
var name = elem;
if (that._processNamespaces) {
var stackEntry = XmlParser._getNamespacesStackEntry(attributes);
that._namespaceStack.push(stackEntry);
var resolved = that._resolveNamespace(name);
prefix = resolved.prefix;
namespace = resolved.namespace;
name = resolved.name;
}
onEvent(new ParserEvent(ParserEventType.StartElement, pos(), prefix, namespace, name, attributes, undefined));
});
this._parser.on("textNode", function(text, uq, pos) {
var data = uq(XmlParser._dereferenceEntities(text));
onEvent(new ParserEvent(ParserEventType.Text, pos(), undefined, undefined, undefined, undefined, data));
});
this._parser.on("endNode", function(elem, uq, tagstart, str, pos) {
var prefix = undefined;
var namespace = undefined;
var name = elem;
if (that._processNamespaces) {
var resolved = that._resolveNamespace(name);
prefix = resolved.prefix;
namespace = resolved.namespace;
name = resolved.name;
}
onEvent(new ParserEvent(ParserEventType.EndElement, pos(), prefix, namespace, name, undefined, undefined));
if (that._processNamespaces) {
that._namespaceStack.pop();
}
});
this._parser.on("cdata", function(data, res, pos) {
onEvent(new ParserEvent(ParserEventType.CDATA, pos(), undefined, undefined, undefined, undefined, data));
});
this._parser.on("comment", function(text, uq, pos) {
onEvent(new ParserEvent(ParserEventType.Comment, pos(), undefined, undefined, undefined, undefined, text));
});
if (onError) {
this._parser.on("error", function(msg, pos) {
onError(new Error(msg), pos());
});
}
}
Object.defineProperty(XmlParser.prototype, "angularSyntax", {
get: function() {
return this._parser.angularSyntax;
},
set: function(value) {
this._parser.angularSyntax = value;
},
enumerable: true,
configurable: true
});
XmlParser.prototype.parse = function(xmlString) {
if (this._processNamespaces) {
this._namespaceStack = [];
}
this._parser.parse(xmlString);
};
XmlParser._getNamespacesStackEntry = function(attributes) {
var stackEntry = {};
if (!attributes) {
return stackEntry;
}
for (var key in attributes) {
if (!attributes.hasOwnProperty(key)) {
continue;
}
var attributeName = key;
if (attributeName.indexOf("xmlns") !== 0) {
continue;
}
var namespacePrefix = "";
if (attributeName.indexOf(":") !== -1) {
namespacePrefix = attributeName.split(":")[1];
}
stackEntry[namespacePrefix] = attributes[key];
}
return stackEntry;
};
XmlParser.prototype._resolveNamespace = function(fullName) {
var result = {
prefix: undefined,
namespace: undefined,
name: undefined
};
result.prefix = "";
if (fullName.indexOf(":") !== -1) {
var split = fullName.split(":");
result.prefix = split[0];
result.name = split[1];
} else {
result.name = fullName;
}
var i;
var stackEntry;
for (i = this._namespaceStack.length - 1; i >= 0; i--) {
stackEntry = this._namespaceStack[i];
for (var key in stackEntry) {
if (!stackEntry.hasOwnProperty(key)) {
continue;
}
if (result.prefix === key) {
result.namespace = stackEntry[key];
return result;
}
}
}
return result;
};
XmlParser._dereferenceEntities = function(s) {
s = String(s);
if (s.length > 3 && s.indexOf("&") !== -1) {
s = s.replace(_entitySearchRegEx, _HandleAmpEntities);
}
return s;
};
return XmlParser;
}();
exports.XmlParser = XmlParser;
}, function(module, exports, __webpack_require__) {
if (true) {
module.exports.EasySAXParser = EasySAXParser;
}
function EasySAXParser() {
"use strict";
if (!this) return null;
this.angularSyntax = false;
function nullFunc() {}
this.onTextNode = nullFunc;
this.onStartNode = nullFunc;
this.onEndNode = nullFunc;
this.onCDATA = nullFunc;
this.onError = nullFunc;
this.onComment = null;
this.onQuestion = null;
this.onAttention = null;
this.is_onComment = this.is_onQuestion = this.is_onAttention = false;
this.isNamespace = false;
this.useNS = null;
this.default_xmlns = null;
this.xmlns = null;
this.nsmatrix = {
xmlns: this.xmlns
};
this.hasSurmiseNS = false;
this.attr_string = "";
this.attr_posstart = 0;
this.attr_res;
}
EasySAXParser.prototype.on = function(name, cb) {
if (typeof cb !== "function") {
if (cb !== null) return;
}
switch (name) {
case "error":
this.onError = cb || nullFunc;
break;

case "startNode":
this.onStartNode = cb || nullFunc;
break;

case "endNode":
this.onEndNode = cb || nullFunc;
break;

case "textNode":
this.onTextNode = cb || nullFunc;
break;

case "cdata":
this.onCDATA = cb || nullFunc;
break;

case "comment":
this.onComment = cb;
this.is_onComment = !!cb;
break;

case "question":
this.onQuestion = cb;
this.is_onQuestion = !!cb;
break;

case "attention":
this.onAttention = cb;
this.is_onAttention = !!cb;
break;
}
};
EasySAXParser.prototype.ns = function(root, ns) {
if (!root || typeof root !== "string" || !ns) {
return;
}
var u, x = {}, ok, v, i;
for (i in ns) {
v = ns[i];
if (typeof v === "string") {
if (root === v) ok = true;
x[i] = v;
}
}
if (ok) {
this.isNamespace = true;
this.default_xmlns = root;
this.useNS = x;
}
};
EasySAXParser.prototype.parse = function(xml) {
if (typeof xml !== "string") {
return;
}
if (this.isNamespace) {
this.nsmatrix = {
xmlns: this.default_xmlns
};
parse(xml);
this.nsmatrix = false;
} else {
parse(xml);
}
this.attr_res = true;
};
var xharsQuot = {
constructor: false,
hasOwnProperty: false,
isPrototypeOf: false,
propertyIsEnumerable: false,
toLocaleString: false,
toString: false,
valueOf: false,
quot: '"',
QUOT: '"',
amp: "&",
AMP: "&",
nbsp: " ",
apos: "'",
lt: "<",
LT: "<",
gt: ">",
GT: ">",
copy: "©",
laquo: "«",
raquo: "»",
reg: "®",
deg: "°",
plusmn: "±",
sup2: "²",
sup3: "³",
micro: "µ",
para: "¶"
};
function rpEntities(s, d, x, z) {
if (z) {
return xharsQuot[z] || "";
}
if (d) {
return String.fromCharCode(d);
}
return String.fromCharCode(parseInt(x, 16));
}
function unEntities(s, i) {
s = String(s);
if (s.length > 3 && s.indexOf("&") !== -1) {
if (s.indexOf("&gt;") !== -1) s = s.replace(/&gt;/g, ">");
if (s.indexOf("&lt;") !== -1) s = s.replace(/&lt;/g, "<");
if (s.indexOf("&quot;") !== -1) s = s.replace(/&quot;/g, '"');
if (s.indexOf("&") !== -1) {
s = s.replace(/&#(\d+);|&#x([0123456789abcdef]+);|&(\w+);/gi, rpEntities);
}
}
return s;
}
EasySAXParser.prototype.allowedAngularAttributeChars = function(w) {
if (!this.angularSyntax) {
return false;
} else {
return w === 40 || w === 41 || w === 91 || w === 93 || w === 94 || w === 35;
}
};
EasySAXParser.prototype.getAttrs = function() {
if (this.attr_res !== null) {
return this.attr_res;
}
var u, res = {}, s = this.attr_string, i = this.attr_posstart, l = s.length, attr_list = this.hasSurmiseNS ? [] : false, name, value = "", ok = false, noValueAttribute = false, j, w, nn, n, hasNewMatrix, alias, newalias;
aa: for (;i < l; i++) {
w = s.charCodeAt(i);
if (w === 32 || w < 14 && w > 8) {
continue;
}
if (w < 65 && !this.allowedAngularAttributeChars(w) || w > 122 || w > 90 && w < 97 && !this.allowedAngularAttributeChars(w)) {
return this.attr_res = false;
}
for (j = i + 1; j < l; j++) {
w = s.charCodeAt(j);
if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w === 46) {
if (noValueAttribute) {
j--;
break;
} else {
continue;
}
}
if (this.allowedAngularAttributeChars(w)) {
continue;
}
if (w === 32 || w > 8 && w < 14) {
noValueAttribute = true;
continue;
} else if (w === 61) {
noValueAttribute = false;
break;
} else {
if (!noValueAttribute) return this.attr_res = false;
}
break;
}
name = s.substring(i, j).trim();
ok = true;
if (name === "xmlns:xmlns") {
return this.attr_res = false;
}
w = s.charCodeAt(j + 1);
while (w = s.charCodeAt(j + 1)) {
if (w === 32 || w > 8 && w < 14) {
j++;
} else {
break;
}
}
if (!noValueAttribute) {
if (w === 34) {
j = s.indexOf('"', i = j + 2);
} else {
if (w === 39) {
j = s.indexOf("'", i = j + 2);
} else {
return this.attr_res = false;
}
}
}
if (j === -1) {
return this.attr_res = false;
}
if (j + 1 < l && !noValueAttribute) {
w = s.charCodeAt(j + 1);
if (w > 32 || w < 9 || w < 32 && w > 13) {
return this.attr_res = false;
}
}
if (noValueAttribute) {
value = "";
} else {
value = s.substring(i, j);
}
i = j;
if (this.isNamespace) {
if (this.hasSurmiseNS) {
if (newalias = name === "xmlns" ? "xmlns" : name.charCodeAt(0) === 120 && name.substr(0, 6) === "xmlns:" && name.substr(6)) {
alias = this.useNS[unEntities(value)];
if (alias) {
if (this.nsmatrix[newalias] !== alias) {
if (!hasNewMatrix) {
hasNewMatrix = true;
nn = {};
for (n in this.nsmatrix) nn[n] = this.nsmatrix[n];
this.nsmatrix = nn;
}
this.nsmatrix[newalias] = alias;
}
} else {
if (this.nsmatrix[newalias]) {
if (!hasNewMatrix) {
hasNewMatrix = true;
nn = {};
for (n in this.nsmatrix) nn[n] = this.nsmatrix[n];
this.nsmatrix = nn;
}
this.nsmatrix[newalias] = false;
}
}
res[name] = value;
continue;
}
attr_list.push(name, value);
continue;
}
w = name.length;
while (--w) {
if (name.charCodeAt(w) === 58) {
if (w = this.nsmatrix[name.substring(0, w)]) {
res[w + name.substr(w)] = value;
}
continue aa;
}
}
}
res[name] = value;
noValueAttribute = false;
}
if (!ok) {
return this.attr_res = true;
}
if (this.hasSurmiseNS) {
bb: for (i = 0, l = attr_list.length; i < l; i++) {
name = attr_list[i++];
w = name.length;
while (--w) {
if (name.charCodeAt(w) === 58) {
if (w = this.nsmatrix[name.substring(0, w)]) {
res[w + name.substr(w)] = attr_list[i];
}
continue bb;
break;
}
}
res[name] = attr_list[i];
}
}
return this.attr_res = res;
};
EasySAXParser.prototype.parse = function(xml) {
var u, xml = String(xml), nodestack = [], stacknsmatrix = [], elem, tagend = false, tagstart = false, j = 0, i = 0, k = 0, len, x, y, q, w, xmlns, stopIndex = 0, stop, _nsmatrix, ok, pos = 0, ln = 0, lnStart = -2, lnEnd = -1;
len = xml.length;
function getStringNode() {
return xml.substring(i, j + 1);
}
function findLineAndColumnFromPos() {
while (lnStart < lnEnd && lnEnd < pos) {
lnStart = lnEnd;
lnEnd = xml.indexOf("\n", lnEnd + 1);
++ln;
}
return {
line: ln,
column: pos - lnStart
};
}
function position(p) {
pos = p;
return findLineAndColumnFromPos;
}
while (j !== -1) {
stop = stopIndex > 0;
if (xml.charCodeAt(j) === 60) {
i = j;
} else {
i = xml.indexOf("<", j);
}
if (i === -1) {
if (nodestack.length) {
this.onError("end file", position(j));
return;
}
return;
}
if (j !== i && !stop) {
ok = this.onTextNode(xml.substring(j, i), unEntities, position(j));
if (ok === false) return;
}
w = xml.charCodeAt(i + 1);
if (w === 33) {
w = xml.charCodeAt(i + 2);
if (w === 91 && xml.substr(i + 3, 6) === "CDATA[") {
j = xml.indexOf("]]>", i);
if (j === -1) {
this.onError("cdata", position(i));
return;
}
if (!stop) {
ok = this.onCDATA(xml.substring(i + 9, j), false, position(i));
if (ok === false) return;
}
j += 3;
continue;
}
if (w === 45 && xml.charCodeAt(i + 3) === 45) {
j = xml.indexOf("-->", i);
if (j === -1) {
this.onError("expected -->", position(i));
return;
}
if (this.is_onComment && !stop) {
ok = this.onComment(xml.substring(i + 4, j), unEntities, position(i));
if (ok === false) return;
}
j += 3;
continue;
}
j = xml.indexOf(">", i + 1);
if (j === -1) {
this.onError('expected ">"', position(i + 1));
return;
}
if (this.is_onAttention && !stop) {
ok = this.onAttention(xml.substring(i, j + 1), unEntities, position(i));
if (ok === false) return;
}
j += 1;
continue;
} else {
if (w === 63) {
j = xml.indexOf("?>", i);
if (j === -1) {
this.onError("...?>", position(i));
return;
}
if (this.is_onQuestion) {
ok = this.onQuestion(xml.substring(i, j + 2), position(i));
if (ok === false) return;
}
j += 2;
continue;
}
}
var inside = false;
for (k = i, j = -1; k < len; k++) {
var c = xml.charCodeAt(k);
if (!inside) {
if (c === 34) {
inside = c;
} else if (c === 39) {
inside = c;
} else if (c === 62) {
j = k;
break;
}
} else {
if (c === inside) {
inside = false;
}
}
}
if (j == -1) {
this.onError("...>", position(i + 1));
return;
}
this.attr_res = true;
if (w === 47) {
tagstart = false;
tagend = true;
x = elem = nodestack.pop();
q = i + 2 + x.length;
if (xml.substring(i + 2, q) !== x) {
this.onError("close tagname", position(i + 2));
return;
}
for (;q < j; q++) {
w = xml.charCodeAt(q);
if (w === 32 || w > 8 && w < 14) {
continue;
}
this.onError("close tag", position(i + 2));
return;
}
} else {
if (xml.charCodeAt(j - 1) === 47) {
x = elem = xml.substring(i + 1, j - 1);
tagstart = true;
tagend = true;
} else {
x = elem = xml.substring(i + 1, j);
tagstart = true;
tagend = false;
}
if (!(w > 96 && w < 123 || w > 64 && w < 91)) {
this.onError("first char nodeName", position(i + 1));
return;
}
for (q = 1, y = x.length; q < y; q++) {
w = x.charCodeAt(q);
if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w === 46) {
continue;
}
if (w === 32 || w < 14 && w > 8) {
elem = x.substring(0, q);
this.attr_res = null;
break;
}
this.onError("invalid nodeName", position(i + 1));
return;
}
if (!tagend) {
nodestack.push(elem);
}
}
if (this.isNamespace) {
if (stop) {
if (tagend) {
if (!tagstart) {
if (--stopIndex === 0) {
this.nsmatrix = stacknsmatrix.pop();
}
}
} else {
stopIndex += 1;
}
j += 1;
continue;
}
_nsmatrix = this.nsmatrix;
if (!tagend) {
stacknsmatrix.push(this.nsmatrix);
if (this.attr_res !== true) {
if (this.hasSurmiseNS = x.indexOf("xmlns", q) !== -1) {
this.attr_string = x;
this.attr_posstart = q;
this.getAttrs();
this.hasSurmiseNS = false;
}
}
}
w = elem.indexOf(":");
if (w !== -1) {
xmlns = this.nsmatrix[elem.substring(0, w)];
elem = elem.substr(w + 1);
} else {
xmlns = this.nsmatrix.xmlns;
}
if (!xmlns) {
if (tagend) {
if (tagstart) {
this.nsmatrix = _nsmatrix;
} else {
this.nsmatrix = stacknsmatrix.pop();
}
} else {
stopIndex = 1;
this.attr_res = true;
}
j += 1;
continue;
}
elem = xmlns + ":" + elem;
}
if (tagstart) {
this.attr_string = x;
this.attr_posstart = q;
var that = this;
ok = this.onStartNode(elem, function() {
return that.getAttrs();
}, unEntities, tagend, getStringNode, position(i));
if (ok === false) {
return;
}
this.attr_res = true;
}
if (tagend) {
ok = this.onEndNode(elem, unEntities, tagstart, getStringNode, position(i));
if (ok === false) {
return;
}
if (this.isNamespace) {
if (tagstart) {
this.nsmatrix = _nsmatrix;
} else {
this.nsmatrix = stacknsmatrix.pop();
}
}
}
j += 1;
}
};
}, function(module, exports, __webpack_require__) {
var types_1 = __webpack_require__(14);
var page_1 = __webpack_require__(72);
var view_1 = __webpack_require__(12);
var file_system_1 = __webpack_require__(19);
var binding_builder_1 = __webpack_require__(56);
var utils_1 = __webpack_require__(22);
__webpack_require__(86);
__webpack_require__(77);
__webpack_require__(88);
var special_properties_1 = __webpack_require__(39);
var UI_PATH = "ui/";
var MODULES = {
TabViewItem: "ui/tab-view",
FormattedString: "text/formatted-string",
Span: "text/span",
ActionItem: "ui/action-bar",
NavigationButton: "ui/action-bar",
SegmentedBarItem: "ui/segmented-bar"
};
var CODEFILE = "codeFile";
var CSSFILE = "cssFile";
var platform;
function ensurePlatform() {
if (!platform) {
platform = __webpack_require__(45);
}
}
function getComponentModule(elementName, namespace, attributes, exports) {
var instance;
var instanceModule;
var componentModule;
elementName = elementName.split("-").map(function(s) {
return s[0].toUpperCase() + s.substring(1);
}).join("");
var moduleId = MODULES[elementName] || UI_PATH + (elementName.toLowerCase().indexOf("layout") !== -1 ? "layouts/" : "") + elementName.split(/(?=[A-Z])/).join("-").toLowerCase();
try {
if (types_1.isString(namespace)) {
var pathInsideTNSModules = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, "tns_modules", namespace);
if (file_system_1.Folder.exists(pathInsideTNSModules)) {
moduleId = pathInsideTNSModules;
} else {
moduleId = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, namespace);
}
}
instanceModule = global.loadModule(moduleId);
var instanceType = instanceModule[elementName] || Object;
instance = new instanceType();
} catch (ex) {
var debug = __webpack_require__(71);
throw new debug.ScopeError(ex, "Module '" + moduleId + "' not found for element '" + (namespace ? namespace + ":" : "") + elementName + "'.");
}
if (attributes) {
if (attributes[CODEFILE]) {
if (instance instanceof page_1.Page) {
var codeFilePath = attributes[CODEFILE].trim();
if (codeFilePath.indexOf("~/") === 0) {
codeFilePath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, codeFilePath.replace("~/", ""));
}
var codeFilePathWithExt = codeFilePath.indexOf(".js") !== -1 ? codeFilePath : codeFilePath + ".js";
if (file_system_1.File.exists(codeFilePathWithExt)) {
exports = global.loadModule(codeFilePath);
instance.exports = exports;
} else {
throw new Error('Code file with path "' + codeFilePathWithExt + '" cannot be found!');
}
} else {
throw new Error("Code file atribute is valid only for pages!");
}
}
if (attributes[CSSFILE]) {
if (instance instanceof page_1.Page) {
var cssFilePath = attributes[CSSFILE].trim();
if (cssFilePath.indexOf("~/") === 0) {
cssFilePath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, cssFilePath.replace("~/", ""));
}
if (file_system_1.File.exists(cssFilePath)) {
instance.addCssFile(cssFilePath);
instance[CSSFILE] = true;
} else {
throw new Error('Css file with path "' + cssFilePath + '" cannot be found!');
}
} else {
throw new Error("Css file atribute is valid only for pages!");
}
}
}
if (instance && instanceModule) {
for (var attr in attributes) {
var attrValue = attributes[attr];
if (attr.indexOf(":") !== -1) {
var platformName = attr.split(":")[0].trim();
ensurePlatform();
if (platformName.toLowerCase() === platform.device.os.toLowerCase()) {
attr = attr.split(":")[1].trim();
} else {
continue;
}
}
if (attr.indexOf(".") !== -1) {
var subObj = instance;
var properties = attr.split(".");
var subPropName = properties[properties.length - 1];
var i;
for (i = 0; i < properties.length - 1; i++) {
if (types_1.isDefined(subObj)) {
subObj = subObj[properties[i]];
}
}
if (types_1.isDefined(subObj)) {
setPropertyValue(subObj, instanceModule, exports, subPropName, attrValue);
}
} else {
setPropertyValue(instance, instanceModule, exports, attr, attrValue);
}
}
componentModule = {
component: instance,
exports: instanceModule
};
}
return componentModule;
}
exports.getComponentModule = getComponentModule;
function setPropertyValue(instance, instanceModule, exports, propertyName, propertyValue) {
if (isBinding(propertyValue) && instance.bind) {
var bindOptions = binding_builder_1.getBindingOptions(propertyName, getBindingExpressionFromAttribute(propertyValue));
instance.bind({
sourceProperty: bindOptions[binding_builder_1.bindingConstants.sourceProperty],
targetProperty: bindOptions[binding_builder_1.bindingConstants.targetProperty],
expression: bindOptions[binding_builder_1.bindingConstants.expression],
twoWay: bindOptions[binding_builder_1.bindingConstants.twoWay]
}, bindOptions[binding_builder_1.bindingConstants.source]);
} else if (view_1.isEventOrGesture(propertyName, instance)) {
var handler = exports && exports[propertyValue];
if (types_1.isFunction(handler)) {
instance.on(propertyName, handler);
}
} else {
var attrHandled = false;
var specialSetter = special_properties_1.getSpecialPropertySetter(propertyName);
if (!attrHandled && specialSetter) {
specialSetter(instance, propertyValue);
attrHandled = true;
}
if (!attrHandled && instance._applyXmlAttribute) {
attrHandled = instance._applyXmlAttribute(propertyName, propertyValue);
}
if (!attrHandled) {
instance[propertyName] = utils_1.convertString(propertyValue);
}
}
}
exports.setPropertyValue = setPropertyValue;
function getBindingExpressionFromAttribute(value) {
return value.replace("{{", "").replace("}}", "").trim();
}
function isBinding(value) {
var isBinding;
if (types_1.isString(value)) {
var str = value.trim();
isBinding = str.indexOf("{{") === 0 && str.lastIndexOf("}}") === str.length - 2;
}
return isBinding;
}
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(87);
var enums_1 = __webpack_require__(24);
var view_1 = __webpack_require__(12);
global.moduleMerge(common, exports);
function setNativeDockProperty(data) {
var view = data.object;
if (view instanceof view_1.View) {
var nativeView = view._nativeView;
var lp = nativeView.getLayoutParams();
if (!(lp instanceof org.nativescript.widgets.CommonLayoutParams)) {
lp = new org.nativescript.widgets.CommonLayoutParams();
}
switch (data.newValue) {
case enums_1.Dock.left:
lp.dock = org.nativescript.widgets.Dock.left;
break;

case enums_1.Dock.top:
lp.dock = org.nativescript.widgets.Dock.top;
break;

case enums_1.Dock.right:
lp.dock = org.nativescript.widgets.Dock.right;
break;

case enums_1.Dock.bottom:
lp.dock = org.nativescript.widgets.Dock.bottom;
break;

default:
throw new Error("Invalid dock value: " + data.newValue + " on element: " + view);
}
nativeView.setLayoutParams(lp);
}
}
common.DockLayout.dockProperty.metadata.onSetNativeValue = setNativeDockProperty;
function setNativeStretchLastChildProperty(data) {
var dockLayout = data.object;
var nativeView = dockLayout._nativeView;
nativeView.setStretchLastChild(data.newValue);
}
common.DockLayout.stretchLastChildProperty.metadata.onSetNativeValue = setNativeStretchLastChildProperty;
var DockLayout = function(_super) {
__extends(DockLayout, _super);
function DockLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(DockLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DockLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
DockLayout.prototype._createUI = function() {
this._layout = new org.nativescript.widgets.DockLayout(this._context);
};
return DockLayout;
}(common.DockLayout);
exports.DockLayout = DockLayout;
}, function(module, exports, __webpack_require__) {
var platform = __webpack_require__(45);
var enums_1 = __webpack_require__(24);
var layout_base_1 = __webpack_require__(79);
var view_1 = __webpack_require__(12);
var proxy_1 = __webpack_require__(53);
var dependency_observable_1 = __webpack_require__(34);
var special_properties_1 = __webpack_require__(39);
var AffectsLayout = platform.device.os === platform.platformNames.android ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
function isDockValid(value) {
return value === enums_1.Dock.left || value === enums_1.Dock.top || value === enums_1.Dock.right || value === enums_1.Dock.bottom;
}
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
special_properties_1.registerSpecialProperty("dock", function(instance, propertyValue) {
DockLayout.setDock(instance, propertyValue);
});
var DockLayout = function(_super) {
__extends(DockLayout, _super);
function DockLayout() {
_super.apply(this, arguments);
}
DockLayout.onDockPropertyChanged = function(data) {
var view = data.object;
if (view instanceof view_1.View) {
var layout = view.parent;
if (layout instanceof DockLayout) {
layout.onDockChanged(view, data.oldValue, data.newValue);
}
}
};
DockLayout.getDock = function(element) {
return validateArgs(element)._getValue(DockLayout.dockProperty);
};
DockLayout.setDock = function(element, value) {
validateArgs(element)._setValue(DockLayout.dockProperty, value);
};
Object.defineProperty(DockLayout.prototype, "stretchLastChild", {
get: function() {
return this._getValue(DockLayout.stretchLastChildProperty);
},
set: function(value) {
this._setValue(DockLayout.stretchLastChildProperty, value);
},
enumerable: true,
configurable: true
});
DockLayout.prototype.onDockChanged = function(view, oldValue, newValue) {};
DockLayout.dockProperty = new dependency_observable_1.Property("dock", "DockLayout", new proxy_1.PropertyMetadata(enums_1.Dock.left, undefined, DockLayout.onDockPropertyChanged, isDockValid));
DockLayout.stretchLastChildProperty = new dependency_observable_1.Property("stretchLastChild", "DockLayout", new proxy_1.PropertyMetadata(true, AffectsLayout));
return DockLayout;
}(layout_base_1.LayoutBase);
exports.DockLayout = DockLayout;
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(22);
var common = __webpack_require__(89);
var view_1 = __webpack_require__(12);
global.moduleMerge(common, exports);
function setNativeProperty(data, setter) {
var view = data.object;
if (view instanceof view_1.View) {
var nativeView = view._nativeView;
var lp = nativeView.getLayoutParams();
if (!(lp instanceof org.nativescript.widgets.CommonLayoutParams)) {
lp = new org.nativescript.widgets.CommonLayoutParams();
}
setter(lp);
nativeView.setLayoutParams(lp);
}
}
function setNativeLeftProperty(data) {
setNativeProperty(data, function(lp) {
lp.left = data.newValue * utils.layout.getDisplayDensity();
});
}
function setNativeTopProperty(data) {
setNativeProperty(data, function(lp) {
lp.top = data.newValue * utils.layout.getDisplayDensity();
});
}
common.AbsoluteLayout.leftProperty.metadata.onSetNativeValue = setNativeLeftProperty;
common.AbsoluteLayout.topProperty.metadata.onSetNativeValue = setNativeTopProperty;
var AbsoluteLayout = function(_super) {
__extends(AbsoluteLayout, _super);
function AbsoluteLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(AbsoluteLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbsoluteLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
AbsoluteLayout.prototype._createUI = function() {
this._layout = new org.nativescript.widgets.AbsoluteLayout(this._context);
};
return AbsoluteLayout;
}(common.AbsoluteLayout);
exports.AbsoluteLayout = AbsoluteLayout;
}, function(module, exports, __webpack_require__) {
var layout_base_1 = __webpack_require__(79);
var view_1 = __webpack_require__(12);
var proxy_1 = __webpack_require__(53);
var dependency_observable_1 = __webpack_require__(34);
var special_properties_1 = __webpack_require__(39);
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
special_properties_1.registerSpecialProperty("left", function(instance, propertyValue) {
AbsoluteLayout.setLeft(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("top", function(instance, propertyValue) {
AbsoluteLayout.setTop(instance, !isNaN(+propertyValue) && +propertyValue);
});
var AbsoluteLayout = function(_super) {
__extends(AbsoluteLayout, _super);
function AbsoluteLayout() {
_super.apply(this, arguments);
}
AbsoluteLayout.isValid = function(value) {
return isFinite(value);
};
AbsoluteLayout.onLeftPropertyChanged = function(data) {
var view = data.object;
if (view instanceof view_1.View) {
var layout = view.parent;
if (layout instanceof AbsoluteLayout) {
layout.onLeftChanged(view, data.oldValue, data.newValue);
}
}
};
AbsoluteLayout.onTopPropertyChanged = function(data) {
var view = data.object;
if (view instanceof view_1.View) {
var layout = view.parent;
if (layout instanceof AbsoluteLayout) {
layout.onTopChanged(view, data.oldValue, data.newValue);
}
}
};
AbsoluteLayout.getLeft = function(element) {
return validateArgs(element)._getValue(AbsoluteLayout.leftProperty);
};
AbsoluteLayout.setLeft = function(element, value) {
validateArgs(element)._setValue(AbsoluteLayout.leftProperty, value);
};
AbsoluteLayout.getTop = function(element) {
return validateArgs(element)._getValue(AbsoluteLayout.topProperty);
};
AbsoluteLayout.setTop = function(element, value) {
validateArgs(element)._setValue(AbsoluteLayout.topProperty, value);
};
AbsoluteLayout.prototype.onLeftChanged = function(view, oldValue, newValue) {};
AbsoluteLayout.prototype.onTopChanged = function(view, oldValue, newValue) {};
AbsoluteLayout.leftProperty = new dependency_observable_1.Property("left", "AbsoluteLayout", new proxy_1.PropertyMetadata(0, undefined, AbsoluteLayout.onLeftPropertyChanged, AbsoluteLayout.isValid));
AbsoluteLayout.topProperty = new dependency_observable_1.Property("top", "AbsoluteLayout", new proxy_1.PropertyMetadata(0, undefined, AbsoluteLayout.onTopPropertyChanged, AbsoluteLayout.isValid));
return AbsoluteLayout;
}(layout_base_1.LayoutBase);
exports.AbsoluteLayout = AbsoluteLayout;
}, function(module, exports, __webpack_require__) {
var platform = __webpack_require__(45);
var types = __webpack_require__(14);
var trace = __webpack_require__(30);
var lazy_1 = __webpack_require__(31);
var _sdkVersion = lazy_1.default(function() {
return parseInt(platform.device.sdkVersion);
});
var _defaultInterpolator = lazy_1.default(function() {
return new android.view.animation.AccelerateDecelerateInterpolator();
});
var enterFakeResourceId = -10;
var exitFakeResourceId = -20;
var popEnterFakeResourceId = -30;
var popExitFakeResourceId = -40;
var AndroidTransitionType;
(function(AndroidTransitionType) {
AndroidTransitionType.enter = "enter";
AndroidTransitionType.exit = "exit";
AndroidTransitionType.popEnter = "popEnter";
AndroidTransitionType.popExit = "popExit";
})(AndroidTransitionType = exports.AndroidTransitionType || (exports.AndroidTransitionType = {}));
function _clearBackwardTransitions(fragment) {
var expandedFragment = fragment;
if (expandedFragment.enterPopExitTransition) {
trace.write("Cleared enterPopExitTransition " + expandedFragment.enterPopExitTransition + " for " + fragment.getTag(), trace.categories.Transition);
expandedFragment.enterPopExitTransition = undefined;
}
if (_sdkVersion() >= 21) {
var enterTransition = fragment.getEnterTransition();
if (enterTransition) {
trace.write("Cleared Enter " + enterTransition.getClass().getSimpleName() + " transition for " + fragment.getTag(), trace.categories.Transition);
fragment.setEnterTransition(null);
}
var returnTransition = fragment.getReturnTransition();
if (returnTransition) {
trace.write("Cleared Pop Exit " + returnTransition.getClass().getSimpleName() + " transition for " + fragment.getTag(), trace.categories.Transition);
fragment.setReturnTransition(null);
}
}
}
exports._clearBackwardTransitions = _clearBackwardTransitions;
function _clearForwardTransitions(fragment) {
var expandedFragment = fragment;
if (expandedFragment.exitPopEnterTransition) {
trace.write("Cleared exitPopEnterTransition " + expandedFragment.exitPopEnterTransition + " for " + fragment.getTag(), trace.categories.Transition);
expandedFragment.exitPopEnterTransition = undefined;
}
if (_sdkVersion() >= 21) {
var exitTransition = fragment.getExitTransition();
if (exitTransition) {
trace.write("Cleared Exit " + exitTransition.getClass().getSimpleName() + " transition for " + fragment.getTag(), trace.categories.Transition);
fragment.setExitTransition(null);
}
var reenterTransition = fragment.getReenterTransition();
if (reenterTransition) {
trace.write("Cleared Pop Enter " + reenterTransition.getClass().getSimpleName() + " transition for " + fragment.getTag(), trace.categories.Transition);
fragment.setReenterTransition(null);
}
}
}
exports._clearForwardTransitions = _clearForwardTransitions;
function _setAndroidFragmentTransitions(navigationTransition, currentFragment, newFragment, fragmentTransaction) {
var name;
if (navigationTransition.name) {
name = navigationTransition.name.toLowerCase();
}
var useLollipopTransition = name && (name.indexOf("slide") === 0 || name === "fade" || name === "explode") && _sdkVersion() >= 21;
if (useLollipopTransition) {
newFragment.setAllowEnterTransitionOverlap(true);
newFragment.setAllowReturnTransitionOverlap(true);
if (currentFragment) {
currentFragment.setAllowEnterTransitionOverlap(true);
currentFragment.setAllowReturnTransitionOverlap(true);
}
if (name.indexOf("slide") === 0) {
var direction = name.substr("slide".length) || "left";
switch (direction) {
case "left":
var rightEdge = new android.transition.Slide(android.view.Gravity.RIGHT);
_setUpNativeTransition(navigationTransition, rightEdge);
_addNativeTransitionListener(newFragment, rightEdge);
newFragment.setEnterTransition(rightEdge);
if (currentFragment) {
var leftEdge_1 = new android.transition.Slide(android.view.Gravity.LEFT);
_setUpNativeTransition(navigationTransition, leftEdge_1);
_addNativeTransitionListener(currentFragment, leftEdge_1);
currentFragment.setExitTransition(leftEdge_1);
}
break;

case "right":
var leftEdge = new android.transition.Slide(android.view.Gravity.LEFT);
_setUpNativeTransition(navigationTransition, leftEdge);
_addNativeTransitionListener(newFragment, leftEdge);
newFragment.setEnterTransition(leftEdge);
if (currentFragment) {
var rightEdge_1 = new android.transition.Slide(android.view.Gravity.RIGHT);
_setUpNativeTransition(navigationTransition, rightEdge_1);
_addNativeTransitionListener(currentFragment, rightEdge_1);
currentFragment.setExitTransition(rightEdge_1);
}
break;

case "top":
var bottomEdge = new android.transition.Slide(android.view.Gravity.BOTTOM);
_setUpNativeTransition(navigationTransition, bottomEdge);
_addNativeTransitionListener(newFragment, bottomEdge);
newFragment.setEnterTransition(bottomEdge);
if (currentFragment) {
var topEdge_1 = new android.transition.Slide(android.view.Gravity.TOP);
_setUpNativeTransition(navigationTransition, topEdge_1);
_addNativeTransitionListener(currentFragment, topEdge_1);
currentFragment.setExitTransition(topEdge_1);
}
break;

case "bottom":
var topEdge = new android.transition.Slide(android.view.Gravity.TOP);
_setUpNativeTransition(navigationTransition, topEdge);
_addNativeTransitionListener(newFragment, topEdge);
newFragment.setEnterTransition(topEdge);
if (currentFragment) {
var bottomEdge_1 = new android.transition.Slide(android.view.Gravity.BOTTOM);
_setUpNativeTransition(navigationTransition, bottomEdge_1);
_addNativeTransitionListener(currentFragment, bottomEdge_1);
currentFragment.setExitTransition(bottomEdge_1);
}
break;
}
} else if (name === "fade") {
var fadeEnter = new android.transition.Fade(android.transition.Fade.IN);
_setUpNativeTransition(navigationTransition, fadeEnter);
_addNativeTransitionListener(newFragment, fadeEnter);
newFragment.setEnterTransition(fadeEnter);
var fadeReturn = new android.transition.Fade(android.transition.Fade.OUT);
_setUpNativeTransition(navigationTransition, fadeReturn);
_addNativeTransitionListener(newFragment, fadeReturn);
newFragment.setReturnTransition(fadeReturn);
if (currentFragment) {
var fadeExit = new android.transition.Fade(android.transition.Fade.OUT);
_setUpNativeTransition(navigationTransition, fadeExit);
_addNativeTransitionListener(currentFragment, fadeExit);
currentFragment.setExitTransition(fadeExit);
var fadeReenter = new android.transition.Fade(android.transition.Fade.IN);
_setUpNativeTransition(navigationTransition, fadeReenter);
_addNativeTransitionListener(currentFragment, fadeReenter);
currentFragment.setReenterTransition(fadeReenter);
}
} else if (name === "explode") {
var explodeEnter = new android.transition.Explode();
_setUpNativeTransition(navigationTransition, explodeEnter);
_addNativeTransitionListener(newFragment, explodeEnter);
newFragment.setEnterTransition(explodeEnter);
if (currentFragment) {
var explodeExit = new android.transition.Explode();
_setUpNativeTransition(navigationTransition, explodeExit);
_addNativeTransitionListener(currentFragment, explodeExit);
currentFragment.setExitTransition(explodeExit);
}
}
return;
}
var transition;
if (name) {
if (name.indexOf("slide") === 0) {
var slideTransitionModule = __webpack_require__(91);
var direction = name.substr("slide".length) || "left";
transition = new slideTransitionModule.SlideTransition(direction, navigationTransition.duration, navigationTransition.curve);
} else if (name === "fade") {
var fadeTransitionModule = __webpack_require__(92);
transition = new fadeTransitionModule.FadeTransition(navigationTransition.duration, navigationTransition.curve);
} else if (name.indexOf("flip") === 0) {
var flipTransitionModule = __webpack_require__(93);
var direction = name.substr("flip".length) || "right";
transition = new flipTransitionModule.FlipTransition(direction, navigationTransition.duration, navigationTransition.curve);
}
} else {
transition = navigationTransition.instance;
}
if (transition) {
var newexpandedFragment = newFragment;
newexpandedFragment.enterPopExitTransition = transition;
if (currentFragment) {
var currentexpandedFragment = currentFragment;
currentexpandedFragment.exitPopEnterTransition = transition;
}
fragmentTransaction.setCustomAnimations(enterFakeResourceId, exitFakeResourceId, popEnterFakeResourceId, popExitFakeResourceId);
}
}
exports._setAndroidFragmentTransitions = _setAndroidFragmentTransitions;
function _setUpNativeTransition(navigationTransition, nativeTransition) {
if (navigationTransition.duration) {
nativeTransition.setDuration(navigationTransition.duration);
}
if (navigationTransition.curve) {
var animation = __webpack_require__(25);
var interpolator = animation._resolveAnimationCurve(navigationTransition.curve);
nativeTransition.setInterpolator(interpolator);
} else {
nativeTransition.setInterpolator(_defaultInterpolator());
}
}
function _onFragmentShown(fragment, isBack) {
var expandedFragment = fragment;
var transitionType = isBack ? "Pop Enter" : "Enter";
var relevantTransition = isBack ? expandedFragment.exitPopEnterTransition : expandedFragment.enterPopExitTransition;
if (relevantTransition) {
trace.write(fragment.getTag() + " has been shown when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + relevantTransition + ". Will complete page addition when transition ends.", trace.categories.Transition);
expandedFragment.completePageAdditionWhenTransitionEnds = {
isBack: isBack
};
} else if (_sdkVersion() >= 21) {
var nativeTransition = isBack ? fragment.getReenterTransition() : fragment.getEnterTransition();
if (nativeTransition) {
trace.write(fragment.getTag() + " has been shown when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + nativeTransition.getClass().getSimpleName() + " transition. Will complete page addition when transition ends.", trace.categories.Transition);
expandedFragment.completePageAdditionWhenTransitionEnds = {
isBack: isBack
};
}
}
if (!expandedFragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(fragment, isBack);
}
}
exports._onFragmentShown = _onFragmentShown;
function _onFragmentHidden(fragment, isBack, destroyed) {
var expandedFragment = fragment;
var transitionType = isBack ? "Pop Exit" : "Exit";
var relevantTransition = isBack ? expandedFragment.enterPopExitTransition : expandedFragment.exitPopEnterTransition;
if (relevantTransition) {
trace.write(fragment.getTag() + " has been hidden when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + relevantTransition + ". Will complete page removal when transition ends.", trace.categories.Transition);
expandedFragment.completePageRemovalWhenTransitionEnds = {
isBack: isBack
};
} else if (_sdkVersion() >= 21) {
var nativeTransition = isBack ? fragment.getReturnTransition() : fragment.getExitTransition();
if (nativeTransition) {
trace.write(fragment.getTag() + " has been hidden when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + nativeTransition.getClass().getSimpleName() + " transition. Will complete page removal when transition ends.", trace.categories.Transition);
expandedFragment.completePageRemovalWhenTransitionEnds = {
isBack: isBack
};
}
}
expandedFragment.isDestroyed = destroyed;
if (expandedFragment.completePageRemovalWhenTransitionEnds === undefined) {
_completePageRemoval(fragment, isBack);
}
}
exports._onFragmentHidden = _onFragmentHidden;
function _completePageAddition(fragment, isBack) {
var expandedFragment = fragment;
expandedFragment.completePageAdditionWhenTransitionEnds = undefined;
var frame = fragment.frame;
var entry = fragment.entry;
var page = entry.resolvedPage;
frame._currentEntry = entry;
page.onNavigatedTo(isBack);
frame._processNavigationQueue(page);
entry.isNavigation = undefined;
trace.write("ADDITION of " + page + " completed", trace.categories.Transition);
}
function _completePageRemoval(fragment, isBack) {
var expandedFragment = fragment;
expandedFragment.completePageRemovalWhenTransitionEnds = undefined;
var frame = fragment.frame;
var entry = fragment.entry;
var page = entry.resolvedPage;
if (page.frame) {
frame._removeView(page);
if (entry.isNavigation) {
page.onNavigatedFrom(isBack);
}
trace.write("REMOVAL of " + page + " completed", trace.categories.Transition);
} else {
trace.write("REMOVAL of " + page + " has already been done", trace.categories.Transition);
}
if (expandedFragment.isDestroyed) {
expandedFragment.isDestroyed = undefined;
if (page._context) {
page._onDetached(true);
trace.write("DETACHMENT of " + page + " completed", trace.categories.Transition);
} else {
trace.write("DETACHMENT of " + page + " has already been done", trace.categories.Transition);
}
}
entry.isNavigation = undefined;
}
function _addNativeTransitionListener(fragment, nativeTransition) {
var expandedFragment = fragment;
var transitionListener = new android.transition.Transition.TransitionListener({
onTransitionCancel: function(transition) {
trace.write("CANCEL " + nativeTransition + " transition for " + fragment, trace.categories.Transition);
if (expandedFragment.completePageRemovalWhenTransitionEnds) {
_completePageRemoval(fragment, expandedFragment.completePageRemovalWhenTransitionEnds.isBack);
}
if (expandedFragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(fragment, expandedFragment.completePageAdditionWhenTransitionEnds.isBack);
}
},
onTransitionEnd: function(transition) {
trace.write("END " + nativeTransition + " transition for " + fragment, trace.categories.Transition);
if (expandedFragment.completePageRemovalWhenTransitionEnds) {
_completePageRemoval(fragment, expandedFragment.completePageRemovalWhenTransitionEnds.isBack);
}
if (expandedFragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(fragment, expandedFragment.completePageAdditionWhenTransitionEnds.isBack);
}
},
onTransitionPause: function(transition) {
trace.write("PAUSE " + nativeTransition + " transition for " + fragment, trace.categories.Transition);
},
onTransitionResume: function(transition) {
trace.write("RESUME " + nativeTransition + " transition for " + fragment, trace.categories.Transition);
},
onTransitionStart: function(transition) {
trace.write("START " + nativeTransition + " transition for " + fragment, trace.categories.Transition);
}
});
nativeTransition.addListener(transitionListener);
}
function _onFragmentCreateAnimator(fragment, nextAnim) {
var expandedFragment = fragment;
var transitionType;
switch (nextAnim) {
case enterFakeResourceId:
transitionType = AndroidTransitionType.enter;
break;

case exitFakeResourceId:
transitionType = AndroidTransitionType.exit;
break;

case popEnterFakeResourceId:
transitionType = AndroidTransitionType.popEnter;
break;

case popExitFakeResourceId:
transitionType = AndroidTransitionType.popExit;
break;
}
var transition;
switch (transitionType) {
case AndroidTransitionType.enter:
case AndroidTransitionType.popExit:
transition = expandedFragment.enterPopExitTransition;
break;

case AndroidTransitionType.exit:
case AndroidTransitionType.popEnter:
transition = expandedFragment.exitPopEnterTransition;
break;
}
var animator;
if (transition) {
animator = transition.createAndroidAnimator(transitionType);
var transitionListener = new android.animation.Animator.AnimatorListener({
onAnimationStart: function(animator) {
trace.write("START " + transitionType + " " + transition + " for " + fragment.getTag(), trace.categories.Transition);
},
onAnimationRepeat: function(animator) {
trace.write("REPEAT " + transitionType + " " + transition + " for " + fragment.getTag(), trace.categories.Transition);
},
onAnimationEnd: function(animator) {
trace.write("END " + transitionType + " " + transition, trace.categories.Transition);
if (expandedFragment.completePageRemovalWhenTransitionEnds) {
_completePageRemoval(fragment, expandedFragment.completePageRemovalWhenTransitionEnds.isBack);
}
if (expandedFragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(fragment, expandedFragment.completePageAdditionWhenTransitionEnds.isBack);
}
},
onAnimationCancel: function(animator) {
trace.write("CANCEL " + transitionType + " " + transition + " for " + fragment.getTag(), trace.categories.Transition);
if (expandedFragment.completePageRemovalWhenTransitionEnds) {
_completePageRemoval(fragment, expandedFragment.completePageRemovalWhenTransitionEnds.isBack);
}
if (expandedFragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(fragment, expandedFragment.completePageAdditionWhenTransitionEnds.isBack);
}
}
});
animator.addListener(transitionListener);
}
return animator;
}
exports._onFragmentCreateAnimator = _onFragmentCreateAnimator;
var transitionId = 0;
var Transition = function() {
function Transition(duration, curve) {
this._duration = duration;
if (curve) {
var animation = __webpack_require__(25);
this._interpolator = animation._resolveAnimationCurve(curve);
} else {
this._interpolator = _defaultInterpolator();
}
this._id = transitionId++;
}
Transition.prototype.getDuration = function() {
return this._duration;
};
Transition.prototype.getCurve = function() {
return this._interpolator;
};
Transition.prototype.animateIOSTransition = function(containerView, fromView, toView, operation, completion) {
throw new Error("Abstract method call");
};
Transition.prototype.createAndroidAnimator = function(transitionType) {
throw new Error("Abstract method call");
};
Transition.prototype.toString = function() {
return types.getClass(this) + "@" + this._id;
};
return Transition;
}();
exports.Transition = Transition;
}, function(module, exports, __webpack_require__) {
var transition = __webpack_require__(90);
var platform = __webpack_require__(45);
var lazy_1 = __webpack_require__(31);
var screenWidth = lazy_1.default(function() {
return platform.screen.mainScreen.widthPixels;
});
var screenHeight = lazy_1.default(function() {
return platform.screen.mainScreen.heightPixels;
});
var SlideTransition = function(_super) {
__extends(SlideTransition, _super);
function SlideTransition(direction, duration, curve) {
_super.call(this, duration, curve);
this._direction = direction;
}
SlideTransition.prototype.createAndroidAnimator = function(transitionType) {
var translationValues = Array.create("float", 2);
switch (this._direction) {
case "left":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = screenWidth();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = -screenWidth();
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = -screenWidth();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = screenWidth();
break;
}
break;

case "right":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = -screenWidth();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = screenWidth();
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = screenWidth();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = -screenWidth();
break;
}
break;

case "top":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = screenHeight();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = -screenHeight();
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = -screenHeight();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = screenHeight();
break;
}
break;

case "bottom":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = -screenHeight();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = screenHeight();
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = screenHeight();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = -screenHeight();
break;
}
break;
}
var prop;
if (this._direction === "left" || this._direction === "right") {
prop = "translationX";
} else {
prop = "translationY";
}
var animator = android.animation.ObjectAnimator.ofFloat(null, prop, translationValues);
var duration = this.getDuration();
if (duration !== undefined) {
animator.setDuration(duration);
}
animator.setInterpolator(this.getCurve());
return animator;
};
return SlideTransition;
}(transition.Transition);
exports.SlideTransition = SlideTransition;
}, function(module, exports, __webpack_require__) {
var transition_1 = __webpack_require__(90);
var FadeTransition = function(_super) {
__extends(FadeTransition, _super);
function FadeTransition() {
_super.apply(this, arguments);
}
FadeTransition.prototype.createAndroidAnimator = function(transitionType) {
var alphaValues = Array.create("float", 2);
switch (transitionType) {
case transition_1.AndroidTransitionType.enter:
case transition_1.AndroidTransitionType.popEnter:
alphaValues[0] = 0;
alphaValues[1] = 1;
break;

case transition_1.AndroidTransitionType.exit:
case transition_1.AndroidTransitionType.popExit:
alphaValues[0] = 1;
alphaValues[1] = 0;
break;
}
var animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", alphaValues);
var duration = this.getDuration();
if (duration !== undefined) {
animator.setDuration(duration);
}
animator.setInterpolator(this.getCurve());
return animator;
};
return FadeTransition;
}(transition_1.Transition);
exports.FadeTransition = FadeTransition;
}, function(module, exports, __webpack_require__) {
var transition_1 = __webpack_require__(90);
var FlipTransition = function(_super) {
__extends(FlipTransition, _super);
function FlipTransition(direction, duration, curve) {
_super.call(this, duration, curve);
this._direction = direction;
}
FlipTransition.prototype.createAndroidAnimator = function(transitionType) {
var objectAnimators;
var values;
var animator;
var animatorSet = new android.animation.AnimatorSet();
var fullDuration = this.getDuration() || 300;
var interpolator = this.getCurve();
var rotationY = this._direction === "right" ? 180 : -180;
switch (transitionType) {
case transition_1.AndroidTransitionType.enter:
objectAnimators = Array.create(android.animation.Animator, 3);
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setDuration(0);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = rotationY;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[1] = animator;
values = Array.create("float", 2);
values[0] = 0;
values[1] = 1;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[2] = animator;
break;

case transition_1.AndroidTransitionType.exit:
objectAnimators = Array.create(android.animation.Animator, 2);
values = Array.create("float", 2);
values[0] = 0;
values[1] = -rotationY;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[1] = animator;
break;

case transition_1.AndroidTransitionType.popEnter:
objectAnimators = Array.create(android.animation.Animator, 3);
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setDuration(0);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = -rotationY;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[1] = animator;
values = Array.create("float", 2);
values[0] = 0;
values[1] = 1;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[2] = animator;
break;

case transition_1.AndroidTransitionType.popExit:
objectAnimators = Array.create(android.animation.Animator, 2);
values = Array.create("float", 2);
values[0] = 0;
values[1] = rotationY;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[1] = animator;
break;
}
animatorSet.playTogether(objectAnimators);
return animatorSet;
};
return FlipTransition;
}(transition_1.Transition);
exports.FlipTransition = FlipTransition;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(95);
function onSecurePropertyChanged(data) {
var textField = data.object;
if (!textField.android) {
return;
}
var currentInputType = textField.android.getInputType();
var currentClass = currentInputType & android.text.InputType.TYPE_MASK_CLASS;
var currentFlags = currentInputType & android.text.InputType.TYPE_MASK_FLAGS;
var newInputType = currentInputType;
if (data.newValue) {
if (currentClass === android.text.InputType.TYPE_CLASS_TEXT) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD;
} else if (currentClass === android.text.InputType.TYPE_CLASS_NUMBER) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_NUMBER_VARIATION_PASSWORD;
}
newInputType = newInputType & ~28672;
} else {
if (currentClass === android.text.InputType.TYPE_CLASS_TEXT) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL;
} else if (currentClass === android.text.InputType.TYPE_CLASS_NUMBER) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL;
}
}
textField.android.setInputType(newInputType);
}
common.secureProperty.metadata.onSetNativeValue = onSecurePropertyChanged;
global.moduleMerge(common, exports);
var TextField = function(_super) {
__extends(TextField, _super);
function TextField() {
_super.apply(this, arguments);
}
TextField.prototype._configureEditText = function() {
this.android.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
this.android.setLines(1);
this.android.setMaxLines(1);
this.android.setHorizontallyScrolling(true);
};
TextField.prototype._onReturnPress = function() {
this.notify({
eventName: TextField.returnPressEvent,
object: this
});
};
return TextField;
}(common.TextField);
exports.TextField = TextField;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(34);
var proxy = __webpack_require__(53);
var textBase = __webpack_require__(96);
var editableTextBase = __webpack_require__(98);
exports.secureProperty = new dependencyObservable.Property("secure", "TextField", new proxy.PropertyMetadata(false));
global.moduleMerge(textBase, exports);
var TextField = function(_super) {
__extends(TextField, _super);
function TextField() {
_super.apply(this, arguments);
}
Object.defineProperty(TextField.prototype, "secure", {
get: function() {
return this._getValue(exports.secureProperty);
},
set: function(value) {
this._setValue(exports.secureProperty, value);
},
enumerable: true,
configurable: true
});
TextField.returnPressEvent = "returnPress";
return TextField;
}(editableTextBase.EditableTextBase);
exports.TextField = TextField;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(97);
var types = __webpack_require__(14);
var TextBase = function(_super) {
__extends(TextBase, _super);
function TextBase() {
_super.apply(this, arguments);
}
TextBase.prototype._onTextPropertyChanged = function(data) {
if (this.android) {
var newValue = types.toUIString(data.newValue);
this.android.setText(newValue);
}
};
TextBase.prototype._setFormattedTextPropertyToNative = function(value) {
var newText = value ? value._formattedText : null;
if (this.android) {
this.android.setText(newText);
}
};
return TextBase;
}(common.TextBase);
exports.TextBase = TextBase;
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var observable = __webpack_require__(18);
var dependencyObservable = __webpack_require__(34);
var proxy = __webpack_require__(53);
var formattedString = __webpack_require__(60);
var tbs = __webpack_require__(63);
var weakEvents;
function ensureWeakEvents() {
if (!weakEvents) {
weakEvents = __webpack_require__(55);
}
}
var textProperty = new dependencyObservable.Property("text", "TextBase", new proxy.PropertyMetadata("", dependencyObservable.PropertyMetadataSettings.AffectsLayout));
var formattedTextProperty = new dependencyObservable.Property("formattedText", "TextBase", new proxy.PropertyMetadata("", dependencyObservable.PropertyMetadataSettings.AffectsLayout));
function onTextPropertyChanged(data) {
var textBase = data.object;
textBase._onTextPropertyChanged(data);
textBase.style._updateTextTransform();
textBase.style._updateTextDecoration();
}
textProperty.metadata.onSetNativeValue = onTextPropertyChanged;
function onFormattedTextPropertyChanged(data) {
var textBase = data.object;
textBase._onFormattedTextPropertyChanged(data);
}
formattedTextProperty.metadata.onSetNativeValue = onFormattedTextPropertyChanged;
var TextBase = function(_super) {
__extends(TextBase, _super);
function TextBase() {
_super.apply(this, arguments);
}
TextBase.prototype._onBindingContextChanged = function(oldValue, newValue) {
_super.prototype._onBindingContextChanged.call(this, oldValue, newValue);
if (this.formattedText) {
this.formattedText.updateSpansBindingContext(newValue);
}
this.style._updateTextTransform();
this.style._updateTextDecoration();
};
Object.defineProperty(TextBase.prototype, "text", {
get: function() {
return this._getValue(TextBase.textProperty);
},
set: function(value) {
this._setValue(TextBase.textProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBase.prototype, "fontSize", {
get: function() {
return this.style.fontSize;
},
set: function(value) {
this.style.fontSize = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBase.prototype, "textAlignment", {
get: function() {
return this.style.textAlignment;
},
set: function(value) {
this.style.textAlignment = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBase.prototype, "formattedText", {
get: function() {
return this._getValue(TextBase.formattedTextProperty);
},
set: function(value) {
if (this.formattedText !== value) {
ensureWeakEvents();
if (this.formattedText) {
weakEvents.removeWeakEventListener(this.formattedText, observable.Observable.propertyChangeEvent, this.onFormattedTextChanged, this);
}
this._setValue(TextBase.formattedTextProperty, value);
if (value) {
weakEvents.addWeakEventListener(value, observable.Observable.propertyChangeEvent, this.onFormattedTextChanged, this);
}
}
},
enumerable: true,
configurable: true
});
TextBase.prototype.onFormattedTextChanged = function(eventData) {
var value = eventData.value;
this._setFormattedTextPropertyToNative(value);
this._onPropertyChangedFromNative(TextBase.textProperty, value.toString());
};
TextBase.prototype._onTextPropertyChanged = function(data) {};
TextBase.prototype._setFormattedTextPropertyToNative = function(value) {};
TextBase.prototype._onFormattedTextPropertyChanged = function(data) {
var newValue = data.newValue;
if (newValue) {
newValue.parent = this;
}
this._setFormattedTextPropertyToNative(newValue);
var newText = newValue ? newValue.toString() : "";
this._onPropertyChangedFromNative(TextBase.textProperty, newText);
};
TextBase.prototype._addChildFromBuilder = function(name, value) {
formattedString.FormattedString.addFormattedStringToView(this, name, value);
};
TextBase.textProperty = textProperty;
TextBase.formattedTextProperty = formattedTextProperty;
return TextBase;
}(view.View);
exports.TextBase = TextBase;
tbs.TextBaseStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(99);
var enums = __webpack_require__(24);
var utils = __webpack_require__(22);
var types = __webpack_require__(14);
var EditableTextBase = function(_super) {
__extends(EditableTextBase, _super);
function EditableTextBase() {
_super.apply(this, arguments);
}
Object.defineProperty(EditableTextBase.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
EditableTextBase.prototype._createUI = function() {
this._android = new android.widget.EditText(this._context);
this._configureEditText();
this._keyListenerCache = this.android.getKeyListener();
var that = new WeakRef(this);
this._textWatcher = new android.text.TextWatcher({
beforeTextChanged: function(text, start, count, after) {},
onTextChanged: function(text, start, before, count) {
var owner = that.get();
if (!owner) {
return;
}
var selectionStart = owner.android.getSelectionStart();
owner.android.removeTextChangedListener(owner._textWatcher);
owner.style._updateTextTransform();
owner.android.addTextChangedListener(owner._textWatcher);
owner.android.setSelection(selectionStart);
},
afterTextChanged: function(editable) {
var owner = that.get();
if (!owner) {
return;
}
switch (owner.updateTextTrigger) {
case enums.UpdateTextTrigger.focusLost:
owner._dirtyTextAccumulator = editable.toString();
break;

case enums.UpdateTextTrigger.textChanged:
owner._onPropertyChangedFromNative(EditableTextBase.textProperty, editable.toString());
break;

default:
throw new Error("Invalid updateTextTrigger: " + owner.updateTextTrigger);
}
}
});
this._android.addTextChangedListener(this._textWatcher);
var focusChangeListener = new android.view.View.OnFocusChangeListener({
onFocusChange: function(view, hasFocus) {
var owner = that.get();
if (!owner) {
return;
}
if (!hasFocus) {
if (owner._dirtyTextAccumulator) {
owner._onPropertyChangedFromNative(EditableTextBase.textProperty, owner._dirtyTextAccumulator);
owner._dirtyTextAccumulator = undefined;
}
owner.dismissSoftInput();
}
}
});
this._android.setOnFocusChangeListener(focusChangeListener);
var editorActionListener = new android.widget.TextView.OnEditorActionListener({
onEditorAction: function(textView, actionId, event) {
var owner = that.get();
if (owner) {
if (actionId === android.view.inputmethod.EditorInfo.IME_ACTION_DONE || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_GO || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_SEND || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_NEXT || event && event.getKeyCode() === android.view.KeyEvent.KEYCODE_ENTER) {
owner.dismissSoftInput();
owner._onReturnPress();
}
}
return false;
}
});
this._android.setOnEditorActionListener(editorActionListener);
};
EditableTextBase.prototype._configureEditText = function() {};
EditableTextBase.prototype._onReturnPress = function() {};
EditableTextBase.prototype._onDetached = function(force) {
this._android = undefined;
_super.prototype._onDetached.call(this, force);
};
EditableTextBase.prototype.dismissSoftInput = function() {
utils.ad.dismissSoftInput(this._nativeView);
};
EditableTextBase.prototype.focus = function() {
var result = _super.prototype.focus.call(this);
if (result) {
utils.ad.showSoftInput(this._nativeView);
}
return result;
};
EditableTextBase.prototype._onTextPropertyChanged = function(data) {
if (this._android) {
var newValue = types.toUIString(data.newValue);
this.android.setText(newValue, android.widget.TextView.BufferType.EDITABLE);
}
};
EditableTextBase.prototype._onKeyboardTypePropertyChanged = function(data) {
if (!this._android) {
return;
}
var newInputType;
switch (data.newValue) {
case enums.KeyboardType.datetime:
newInputType = android.text.InputType.TYPE_CLASS_DATETIME | android.text.InputType.TYPE_DATETIME_VARIATION_NORMAL;
break;

case enums.KeyboardType.phone:
newInputType = android.text.InputType.TYPE_CLASS_PHONE;
break;

case enums.KeyboardType.number:
newInputType = android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED | android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL;
break;

case enums.KeyboardType.url:
newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_URI;
break;

case enums.KeyboardType.email:
newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS;
break;

default:
newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL;
break;
}
this._setInputType(newInputType);
};
EditableTextBase.prototype._onReturnKeyTypePropertyChanged = function(data) {
if (!this._android) {
return;
}
var newImeOptions;
switch (data.newValue) {
case enums.ReturnKeyType.done:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_DONE;
break;

case enums.ReturnKeyType.go:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_GO;
break;

case enums.ReturnKeyType.next:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_NEXT;
break;

case enums.ReturnKeyType.search:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH;
break;

case enums.ReturnKeyType.send:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_SEND;
break;

default:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_UNSPECIFIED;
break;
}
this._android.setImeOptions(newImeOptions);
};
EditableTextBase.prototype._onEditablePropertyChanged = function(data) {
if (!this._android) {
return;
}
if (data.newValue) {
this.android.setKeyListener(this._keyListenerCache);
} else {
this.android.setKeyListener(null);
}
};
EditableTextBase.prototype._onAutocapitalizationTypePropertyChanged = function(data) {
var editableTextBase = data.object;
if (!editableTextBase.android) {
return;
}
var inputType = editableTextBase.android.getInputType();
inputType = inputType & ~28672;
switch (data.newValue) {
case enums.AutocapitalizationType.none:
break;

case enums.AutocapitalizationType.words:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS;
break;

case enums.AutocapitalizationType.sentences:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
break;

case enums.AutocapitalizationType.allCharacters:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS;
break;

default:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
break;
}
editableTextBase._setInputType(inputType);
};
EditableTextBase.prototype._onAutocorrectPropertyChanged = function(data) {
var editableTextBase = data.object;
if (!editableTextBase.android) {
return;
}
var inputType = editableTextBase.android.getInputType();
switch (data.newValue) {
case true:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
break;

case false:
inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;
inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
break;

default:
break;
}
editableTextBase._setInputType(inputType);
};
EditableTextBase.prototype._onHintPropertyChanged = function(data) {
var editableTextBase = data.object;
if (!editableTextBase.android) {
return;
}
editableTextBase.android.setHint(data.newValue + "");
};
EditableTextBase.prototype._setInputType = function(inputType) {
this.android.setInputType(inputType);
var listener = this.android.getKeyListener();
if (listener) {
this._keyListenerCache = listener;
}
if (!this.editable) {
this.android.setKeyListener(null);
}
};
return EditableTextBase;
}(common.EditableTextBase);
exports.EditableTextBase = EditableTextBase;
}, function(module, exports, __webpack_require__) {
var textBase = __webpack_require__(96);
var proxy = __webpack_require__(53);
var dependencyObservable = __webpack_require__(34);
var enums = __webpack_require__(24);
var keyboardTypeProperty = new dependencyObservable.Property("keyboardType", "EditableTextBase", new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None));
var returnKeyTypeProperty = new dependencyObservable.Property("returnKeyType", "EditableTextBase", new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None));
var editableProperty = new dependencyObservable.Property("editable", "EditableTextBase", new proxy.PropertyMetadata(true, dependencyObservable.PropertyMetadataSettings.None));
var updateTextTriggerProperty = new dependencyObservable.Property("updateTextTrigger", "EditableTextBase", new proxy.PropertyMetadata(enums.UpdateTextTrigger.textChanged, dependencyObservable.PropertyMetadataSettings.None));
var autocapitalizationTypeProperty = new dependencyObservable.Property("autocapitalizationType", "EditableTextBase", new proxy.PropertyMetadata(enums.AutocapitalizationType.sentences, dependencyObservable.PropertyMetadataSettings.None));
var autocorrectProperty = new dependencyObservable.Property("autocorrect", "EditableTextBase", new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None));
exports.hintProperty = new dependencyObservable.Property("hint", "EditableTextBase", new proxy.PropertyMetadata(""));
function onKeyboardTypePropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onKeyboardTypePropertyChanged(data);
}
keyboardTypeProperty.metadata.onSetNativeValue = onKeyboardTypePropertyChanged;
function onReturnKeyTypePropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onReturnKeyTypePropertyChanged(data);
}
returnKeyTypeProperty.metadata.onSetNativeValue = onReturnKeyTypePropertyChanged;
function onEditablePropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onEditablePropertyChanged(data);
}
editableProperty.metadata.onSetNativeValue = onEditablePropertyChanged;
function onAutocapitalizationTypePropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onAutocapitalizationTypePropertyChanged(data);
}
autocapitalizationTypeProperty.metadata.onSetNativeValue = onAutocapitalizationTypePropertyChanged;
function onAutocorrectPropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onAutocorrectPropertyChanged(data);
}
autocorrectProperty.metadata.onSetNativeValue = onAutocorrectPropertyChanged;
function onHintPropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onHintPropertyChanged(data);
}
exports.hintProperty.metadata.onSetNativeValue = onHintPropertyChanged;
var EditableTextBase = function(_super) {
__extends(EditableTextBase, _super);
function EditableTextBase() {
_super.apply(this, arguments);
}
Object.defineProperty(EditableTextBase.prototype, "keyboardType", {
get: function() {
return this._getValue(EditableTextBase.keyboardTypeProperty);
},
set: function(value) {
this._setValue(EditableTextBase.keyboardTypeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "returnKeyType", {
get: function() {
return this._getValue(EditableTextBase.returnKeyTypeProperty);
},
set: function(value) {
this._setValue(EditableTextBase.returnKeyTypeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "editable", {
get: function() {
return this._getValue(EditableTextBase.editableProperty);
},
set: function(value) {
this._setValue(EditableTextBase.editableProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "updateTextTrigger", {
get: function() {
return this._getValue(EditableTextBase.updateTextTriggerProperty);
},
set: function(value) {
this._setValue(EditableTextBase.updateTextTriggerProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "autocapitalizationType", {
get: function() {
return this._getValue(EditableTextBase.autocapitalizationTypeProperty);
},
set: function(value) {
this._setValue(EditableTextBase.autocapitalizationTypeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "autocorrect", {
get: function() {
return this._getValue(EditableTextBase.autocorrectProperty);
},
set: function(value) {
this._setValue(EditableTextBase.autocorrectProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "hint", {
get: function() {
return this._getValue(EditableTextBase.hintProperty);
},
set: function(value) {
this._setValue(EditableTextBase.hintProperty, value);
},
enumerable: true,
configurable: true
});
EditableTextBase.prototype.dismissSoftInput = function() {};
EditableTextBase.prototype._onKeyboardTypePropertyChanged = function(data) {};
EditableTextBase.prototype._onReturnKeyTypePropertyChanged = function(data) {};
EditableTextBase.prototype._onEditablePropertyChanged = function(data) {};
EditableTextBase.prototype._onAutocapitalizationTypePropertyChanged = function(data) {};
EditableTextBase.prototype._onAutocorrectPropertyChanged = function(data) {};
EditableTextBase.prototype._onHintPropertyChanged = function(data) {};
EditableTextBase.keyboardTypeProperty = keyboardTypeProperty;
EditableTextBase.returnKeyTypeProperty = returnKeyTypeProperty;
EditableTextBase.editableProperty = editableProperty;
EditableTextBase.updateTextTriggerProperty = updateTextTriggerProperty;
EditableTextBase.autocapitalizationTypeProperty = autocapitalizationTypeProperty;
EditableTextBase.autocorrectProperty = autocorrectProperty;
EditableTextBase.hintProperty = exports.hintProperty;
return EditableTextBase;
}(textBase.TextBase);
exports.EditableTextBase = EditableTextBase;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(101);
global.moduleMerge(common, exports);
var Label = function(_super) {
__extends(Label, _super);
function Label() {
_super.apply(this, arguments);
}
Object.defineProperty(Label.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Label.prototype._createUI = function() {
this._android = new android.widget.TextView(this._context);
this._android.setSingleLine(true);
this._android.setEllipsize(android.text.TextUtils.TruncateAt.END);
};
return Label;
}(common.Label);
exports.Label = Label;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(34);
var proxy = __webpack_require__(53);
var textBase = __webpack_require__(96);
var enums;
function ensureEnums() {
if (!enums) {
enums = __webpack_require__(24);
}
}
var Label = function(_super) {
__extends(Label, _super);
function Label() {
_super.apply(this, arguments);
}
Object.defineProperty(Label.prototype, "textWrap", {
get: function() {
return this._getValue(Label.textWrapProperty);
},
set: function(value) {
this._setValue(Label.textWrapProperty, value);
},
enumerable: true,
configurable: true
});
Label.textWrapProperty = new dependencyObservable.Property("textWrap", "Label", new proxy.PropertyMetadata(false, dependencyObservable.PropertyMetadataSettings.AffectsLayout));
return Label;
}(textBase.TextBase);
exports.Label = Label;
function onTextWrapPropertyChanged(data) {
var v = data.object;
ensureEnums();
v.style.whiteSpace = data.newValue ? enums.WhiteSpace.normal : enums.WhiteSpace.nowrap;
}
Label.textWrapProperty.metadata.onSetNativeValue = onTextWrapPropertyChanged;
}, function(module, exports, __webpack_require__) {
var http = __webpack_require__(66);
var types = __webpack_require__(14);
var XMLHttpRequestResponseType;
(function(XMLHttpRequestResponseType) {
XMLHttpRequestResponseType.empty = "";
XMLHttpRequestResponseType.text = "text";
XMLHttpRequestResponseType.json = "json";
})(XMLHttpRequestResponseType || (XMLHttpRequestResponseType = {}));
var XMLHttpRequest = function() {
function XMLHttpRequest() {
this.UNSENT = 0;
this.OPENED = 1;
this.HEADERS_RECEIVED = 2;
this.LOADING = 3;
this.DONE = 4;
this._responseType = "";
this._listeners = new Map();
this._readyState = this.UNSENT;
}
XMLHttpRequest.prototype.open = function(method, url, async, user, password) {
if (types.isString(method) && types.isString(url)) {
this._options = {
url: url,
method: method
};
this._options.headers = {};
if (types.isString(user)) {
this._options.headers["user"] = user;
}
if (types.isString(password)) {
this._options.headers["password"] = password;
}
this._setReadyState(this.OPENED);
}
};
XMLHttpRequest.prototype.abort = function() {
this._errorFlag = true;
this._response = null;
this._responseTextReader = null;
this._headers = null;
this._status = null;
if (this._readyState === this.UNSENT || this._readyState === this.OPENED || this._readyState === this.DONE) {
this._readyState = this.UNSENT;
} else {
this._setReadyState(this.DONE);
}
};
XMLHttpRequest.prototype.send = function(data) {
var _this = this;
this._errorFlag = false;
this._response = null;
this._responseTextReader = null;
this._headers = null;
this._status = null;
if (types.isDefined(this._options)) {
if (types.isString(data) && this._options.method !== "GET") {
this._options.content = data;
} else if (data instanceof FormData) {
this._options.content = data.toString();
}
http.request(this._options).then(function(r) {
if (!_this._errorFlag) {
_this._loadResponse(r);
}
}).catch(function(e) {
_this._errorFlag = true;
_this._setReadyState(_this.DONE, e);
});
}
};
XMLHttpRequest.prototype._loadResponse = function(r) {
this._status = r.statusCode;
this._response = r.content.raw;
this._headers = r.headers;
this._setReadyState(this.HEADERS_RECEIVED);
this._setReadyState(this.LOADING);
this._setResponseType();
if (this.responseType === XMLHttpRequestResponseType.json) {
this._prepareJsonResponse(r);
} else if (this.responseType === XMLHttpRequestResponseType.empty || this.responseType === XMLHttpRequestResponseType.text) {
this._responseTextReader = function() {
return r.content.toString();
};
}
this._setReadyState(this.DONE);
};
XMLHttpRequest.prototype._prepareJsonResponse = function(r) {
var _this = this;
this._responseTextReader = function() {
return r.content.toString();
};
this._response = JSON.parse(this.responseText);
Object.defineProperty(this._response, "toString", {
configurable: true,
enumerable: false,
writable: true,
value: function() {
return _this.responseText;
}
});
};
XMLHttpRequest.prototype._setResponseType = function() {
var header = this.getResponseHeader("Content-Type");
var contentType = header && header.toLowerCase();
if (contentType) {
if (contentType.indexOf("application/json") >= 0) {
this.responseType = XMLHttpRequestResponseType.json;
} else if (contentType.indexOf("text/plain") >= 0) {
this.responseType = XMLHttpRequestResponseType.text;
}
} else {
this.responseType = XMLHttpRequestResponseType.text;
}
};
XMLHttpRequest.prototype.addEventListener = function(eventName, handler) {
if (eventName !== "load" && eventName !== "error") {
throw new Error("Event not supported: " + eventName);
}
var handlers = this._listeners.get(eventName) || [];
handlers.push(handler);
this._listeners.set(eventName, handlers);
};
XMLHttpRequest.prototype.removeEventListener = function(eventName, toDetach) {
var handlers = this._listeners.get(eventName) || [];
handlers = handlers.filter(function(handler) {
return handler !== toDetach;
});
this._listeners.set(eventName, handlers);
};
XMLHttpRequest.prototype.emitEvent = function(eventName) {
var args = [];
for (var _i = 1; _i < arguments.length; _i++) {
args[_i - 1] = arguments[_i];
}
var handlers = this._listeners.get(eventName) || [];
handlers.forEach(function(handler) {
handler.apply(void 0, args);
});
};
XMLHttpRequest.prototype.setRequestHeader = function(header, value) {
if (types.isDefined(this._options) && types.isString(header) && types.isString(value)) {
this._options.headers[header] = value;
}
};
XMLHttpRequest.prototype.getAllResponseHeaders = function() {
if (this._readyState < 2 || this._errorFlag) {
return "";
}
var result = "";
for (var i in this._headers) {
if (i !== "set-cookie" && i !== "set-cookie2") {
result += i + ": " + this._headers[i] + "\r\n";
}
}
return result.substr(0, result.length - 2);
};
XMLHttpRequest.prototype.getResponseHeader = function(header) {
if (types.isString(header) && this._readyState > 1 && this._headers && this._headers[header] && !this._errorFlag) {
return this._headers[header];
}
return null;
};
XMLHttpRequest.prototype.overrideMimeType = function(mime) {};
Object.defineProperty(XMLHttpRequest.prototype, "readyState", {
get: function() {
return this._readyState;
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "responseType", {
get: function() {
return this._responseType;
},
set: function(value) {
if (value === XMLHttpRequestResponseType.empty || value in XMLHttpRequestResponseType) {
this._responseType = value;
} else {
throw new Error("Response type of '" + value + "' not supported.");
}
},
enumerable: true,
configurable: true
});
XMLHttpRequest.prototype._setReadyState = function(value, error) {
if (this._readyState !== value) {
this._readyState = value;
if (types.isFunction(this.onreadystatechange)) {
this.onreadystatechange();
}
}
if (this._readyState === this.DONE) {
if (this._errorFlag) {
if (types.isFunction(this.onerror)) {
this.onerror(error);
}
this.emitEvent("error", error);
} else {
if (types.isFunction(this.onload)) {
this.onload();
}
this.emitEvent("load");
}
}
};
Object.defineProperty(XMLHttpRequest.prototype, "responseText", {
get: function() {
if (types.isFunction(this._responseTextReader)) {
return this._responseTextReader();
}
return "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "response", {
get: function() {
return this._response;
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "status", {
get: function() {
return this._status;
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "statusText", {
get: function() {
if (this._readyState === this.UNSENT || this._readyState === this.OPENED || this._errorFlag) {
return "";
}
return statuses[this._status];
},
enumerable: true,
configurable: true
});
return XMLHttpRequest;
}();
exports.XMLHttpRequest = XMLHttpRequest;
var statuses = {
100: "Continue",
101: "Switching Protocols",
200: "OK",
201: "Created",
202: "Accepted",
203: "Non - Authoritative Information",
204: "No Content",
205: "Reset Content",
206: "Partial Content",
300: "Multiple Choices",
301: "Moved Permanently",
302: "Found",
303: "See Other",
304: "Not Modified",
305: "Use Proxy",
307: "Temporary Redirect",
400: "Bad Request",
401: "Unauthorized",
402: "Payment Required",
403: "Forbidden",
404: "Not Found",
405: "Method Not Allowed",
406: "Not Acceptable",
407: "Proxy Authentication Required",
408: "Request Timeout",
409: "Conflict",
410: "Gone",
411: "Length Required",
412: "Precondition Failed",
413: "Request Entity Too Large",
414: "Request - URI Too Long",
415: "Unsupported Media Type",
416: "Requested Range Not Satisfiable",
417: "Expectation Failed",
500: "Internal Server Error",
501: "Not Implemented",
502: "Bad Gateway",
503: "Service Unavailable",
504: "Gateway Timeout",
505: "HTTP Version Not Supported"
};
var FormData = function() {
function FormData() {
this._data = new Map();
}
FormData.prototype.append = function(name, value) {
this._data.set(name, value);
};
FormData.prototype.toString = function() {
var arr = new Array();
this._data.forEach(function(value, name, map) {
arr.push(encodeURIComponent(name) + "=" + encodeURIComponent(value));
});
return arr.join("&");
};
return FormData;
}();
exports.FormData = FormData;
}, function(module, exports, __webpack_require__) {
(function() {
"use strict";
exports.XMLHttpRequest = global.XMLHttpRequest;
exports.FormData = global.FormData;
if (!exports.XMLHttpRequest) {
var xhr = __webpack_require__(102);
exports.XMLHttpRequest = xhr.XMLHttpRequest;
exports.FormData = xhr.FormData;
}
function normalizeName(name) {
if (typeof name !== "string") {
name = name.toString();
}
if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
throw new TypeError("Invalid character in header field name");
}
return name.toLowerCase();
}
function normalizeValue(value) {
if (typeof value !== "string") {
value = value.toString();
}
return value;
}
function Headers(headers) {
this.map = {};
if (headers instanceof Headers) {
headers.forEach(function(value, name) {
this.append(name, value);
}, this);
} else if (headers) {
Object.getOwnPropertyNames(headers).forEach(function(name) {
this.append(name, headers[name]);
}, this);
}
}
Headers.prototype.append = function(name, value) {
name = normalizeName(name);
value = normalizeValue(value);
var list = this.map[name];
if (!list) {
list = [];
this.map[name] = list;
}
list.push(value);
};
Headers.prototype["delete"] = function(name) {
delete this.map[normalizeName(name)];
};
Headers.prototype.get = function(name) {
var values = this.map[normalizeName(name)];
return values ? values[0] : null;
};
Headers.prototype.getAll = function(name) {
return this.map[normalizeName(name)] || [];
};
Headers.prototype.has = function(name) {
return this.map.hasOwnProperty(normalizeName(name));
};
Headers.prototype.set = function(name, value) {
this.map[normalizeName(name)] = [ normalizeValue(value) ];
};
Headers.prototype.forEach = function(callback, thisArg) {
Object.getOwnPropertyNames(this.map).forEach(function(name) {
this.map[name].forEach(function(value) {
callback.call(thisArg, value, name, this);
}, this);
}, this);
};
function consumed(body) {
if (body.bodyUsed) {
return Promise.reject(new TypeError("Already read"));
}
body.bodyUsed = true;
}
function fileReaderReady(reader) {
return new Promise(function(resolve, reject) {
reader.onload = function() {
resolve(reader.result);
};
reader.onerror = function() {
reject(reader.error);
};
});
}
function readBlobAsArrayBuffer(blob) {
var reader = new FileReader();
reader.readAsArrayBuffer(blob);
return fileReaderReady(reader);
}
function readBlobAsText(blob) {
var reader = new FileReader();
reader.readAsText(blob);
return fileReaderReady(reader);
}
var support = {
blob: "FileReader" in exports && "Blob" in exports && function() {
try {
new Blob();
return true;
} catch (e) {
return false;
}
}(),
formData: "FormData" in exports
};
function Body() {
this.bodyUsed = false;
this._initBody = function(body) {
this._bodyInit = body;
if (typeof body === "string") {
this._bodyText = body;
} else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
this._bodyBlob = body;
} else if (support.formData && exports.FormData.prototype.isPrototypeOf(body)) {
this._bodyFormData = body;
} else if (!body) {
this._bodyText = "";
} else {
throw new Error("unsupported BodyInit type");
}
};
if (support.blob) {
this.blob = function() {
var rejected = consumed(this);
if (rejected) {
return rejected;
}
if (this._bodyBlob) {
return Promise.resolve(this._bodyBlob);
} else if (this._bodyFormData) {
throw new Error("could not read FormData body as blob");
} else {
return Promise.resolve(new Blob([ this._bodyText ]));
}
};
this.arrayBuffer = function() {
return this.blob().then(readBlobAsArrayBuffer);
};
this.text = function() {
var rejected = consumed(this);
if (rejected) {
return rejected;
}
if (this._bodyBlob) {
return readBlobAsText(this._bodyBlob);
} else if (this._bodyFormData) {
throw new Error("could not read FormData body as text");
} else {
return Promise.resolve(this._bodyText);
}
};
} else {
this.text = function() {
var rejected = consumed(this);
return rejected ? rejected : Promise.resolve(this._bodyText);
};
}
if (support.formData) {
this.formData = function() {
return this.text().then(decode);
};
}
this.json = function() {
return this.text().then(JSON.parse);
};
return this;
}
var methods = [ "DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT" ];
function normalizeMethod(method) {
var upcased = method.toUpperCase();
return methods.indexOf(upcased) > -1 ? upcased : method;
}
function Request(url, options) {
options = options || {};
this.url = url;
this.credentials = options.credentials || "omit";
this.headers = new Headers(options.headers);
this.method = normalizeMethod(options.method || "GET");
this.mode = options.mode || null;
this.referrer = null;
if ((this.method === "GET" || this.method === "HEAD") && options.body) {
throw new TypeError("Body not allowed for GET or HEAD requests");
}
this._initBody(options.body);
}
function decode(body) {
var form = new exports.FormData();
body.trim().split("&").forEach(function(bytes) {
if (bytes) {
var split = bytes.split("=");
var name = split.shift().replace(/\+/g, " ");
var value = split.join("=").replace(/\+/g, " ");
form.append(decodeURIComponent(name), decodeURIComponent(value));
}
});
return form;
}
function headers(xhr) {
var head = new Headers();
var pairs = xhr.getAllResponseHeaders().trim().split("\n");
pairs.forEach(function(header) {
var split = header.trim().split(":");
var key = split.shift().trim();
var value = split.join(":").trim();
head.append(key, value);
});
return head;
}
Body.call(Request.prototype);
function Response(bodyInit, options) {
if (!options) {
options = {};
}
this._initBody(bodyInit);
this.type = "default";
this.url = null;
this.status = options.status;
this.ok = this.status >= 200 && this.status < 300;
this.statusText = options.statusText;
this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers);
this.url = options.url || "";
}
Body.call(Response.prototype);
exports.Headers = Headers;
exports.Request = Request;
exports.Response = Response;
exports.fetch = function(input, init) {
var request;
if (Request.prototype.isPrototypeOf(input) && !init) {
request = input;
} else {
request = new Request(input, init);
}
return new Promise(function(resolve, reject) {
var xhr = new exports.XMLHttpRequest();
function responseURL() {
if ("responseURL" in xhr) {
return xhr.responseURL;
}
if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
return xhr.getResponseHeader("X-Request-URL");
}
return;
}
xhr.onload = function() {
var status = xhr.status === 1223 ? 204 : xhr.status;
if (status < 100 || status > 599) {
reject(new TypeError("Network request failed"));
return;
}
var options = {
status: status,
statusText: xhr.statusText,
headers: headers(xhr),
url: responseURL()
};
resolve(new Response(xhr.responseText, options));
};
xhr.onerror = function() {
reject(new TypeError("Network request failed"));
};
xhr.open(request.method, request.url, true);
if (request.credentials === "include") {
xhr.withCredentials = true;
}
if ("responseType" in xhr && support.blob) {
xhr.responseType = "blob";
}
request.headers.forEach(function(value, name) {
xhr.setRequestHeader(name, value);
});
xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
});
};
exports.fetch.polyfill = true;
})();
}, function(module, exports, __webpack_require__) {
var trace = __webpack_require__(30);
var platform = __webpack_require__(45);
var Console = function() {
function Console() {
this.TAG = "JS";
this.dir = this.dump;
this._timers = {};
this._stripFirstTwoLinesRegEx = /^([^\n]*?\n){2}((.|\n)*)$/gim;
}
Console.prototype.sprintf = function(message) {
var regex = /%%|%(\d+\$)?([-+\'#0 ]*)(\*\d+\$|\*|\d+)?(\.(\*\d+\$|\*|\d+))?([scboxXuideEfFgGj])/g;
var a = arguments;
var i = 0;
var format = a[i++];
var pad = function(str, len, chr, leftJustify) {
if (!chr) {
chr = " ";
}
var padding = str.length >= len ? "" : new Array(1 + len - str.length >>> 0).join(chr);
return leftJustify ? str + padding : padding + str;
};
var justify = function(value, prefix, leftJustify, minWidth, zeroPad, customPadChar) {
var diff = minWidth - value.length;
if (diff > 0) {
if (leftJustify || !zeroPad) {
value = pad(value, minWidth, customPadChar, leftJustify);
} else {
value = value.slice(0, prefix.length) + pad("", diff, "0", true) + value.slice(prefix.length);
}
}
return value;
};
var formatBaseX = function(value, base, prefix, leftJustify, minWidth, precision, zeroPad) {
var number = value >>> 0;
prefix = prefix && number && {
2: "0b",
8: "0",
16: "0x"
}[base] || "";
value = prefix + pad(number.toString(base), precision || 0, "0", false);
return justify(value, prefix, leftJustify, minWidth, zeroPad);
};
var formatString = function(value, leftJustify, minWidth, precision, zeroPad, customPadChar) {
if (precision != null) {
value = value.slice(0, precision);
}
return justify(value, "", leftJustify, minWidth, zeroPad, customPadChar);
};
var that = this;
var doFormat = function(substring, valueIndex, flags, minWidth, _, precision, type) {
var number, prefix, method, textTransform, value;
if (substring === "%%") {
return "%";
}
var leftJustify = false;
var positivePrefix = "";
var zeroPad = false;
var prefixBaseX = false;
var customPadChar = " ";
var flagsl = flags.length;
for (var j = 0; flags && j < flagsl; j++) {
switch (flags.charAt(j)) {
case " ":
positivePrefix = " ";
break;

case "+":
positivePrefix = "+";
break;

case "-":
leftJustify = true;
break;

case "'":
customPadChar = flags.charAt(j + 1);
break;

case "0":
zeroPad = true;
customPadChar = "0";
break;

case "#":
prefixBaseX = true;
break;
}
}
if (!minWidth) {
minWidth = 0;
} else if (minWidth === "*") {
minWidth = +a[i++];
} else if (minWidth.charAt(0) === "*") {
minWidth = +a[minWidth.slice(1, -1)];
} else {
minWidth = +minWidth;
}
if (minWidth < 0) {
minWidth = -minWidth;
leftJustify = true;
}
if (!isFinite(minWidth)) {
throw new Error("sprintf: (minimum-)width must be finite");
}
if (!precision) {
precision = "fFeE".indexOf(type) > -1 ? 6 : type === "d" ? 0 : undefined;
} else if (precision === "*") {
precision = +a[i++];
} else if (precision.charAt(0) === "*") {
precision = +a[precision.slice(1, -1)];
} else {
precision = +precision;
}
value = valueIndex ? a[valueIndex.slice(0, -1)] : a[i++];
switch (type) {
case "s":
return formatString(String(value), leftJustify, minWidth, precision, zeroPad, customPadChar);

case "c":
return formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, zeroPad);

case "b":
return formatBaseX(value, 2, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "o":
return formatBaseX(value, 8, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "x":
return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "X":
return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad).toUpperCase();

case "u":
return formatBaseX(value, 10, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "i":
case "d":
number = +value || 0;
number = Math.round(number - number % 1);
prefix = number < 0 ? "-" : positivePrefix;
value = prefix + pad(String(Math.abs(number)), precision, "0", false);
return justify(value, prefix, leftJustify, minWidth, zeroPad);

case "e":
case "E":
case "f":
case "F":
case "g":
case "G":
number = +value;
prefix = number < 0 ? "-" : positivePrefix;
method = [ "toExponential", "toFixed", "toPrecision" ]["efg".indexOf(type.toLowerCase())];
textTransform = [ "toString", "toUpperCase" ]["eEfFgG".indexOf(type) % 2];
value = prefix + Math.abs(number)[method](precision);
return justify(value, prefix, leftJustify, minWidth, zeroPad)[textTransform]();

case "j":
return that.createDump(value);

default:
return substring;
}
};
return format.replace(regex, doFormat);
};
Console.prototype.formatParams = function(message) {
if (arguments.length <= 1) {
return "" + message;
}
var res = this.sprintf.apply(this, arguments);
if (res === message) {
var args = Array.prototype.slice.call(arguments);
return args.join(" ");
}
return res;
};
Console.prototype.timeMillis = function() {
return java.lang.System.nanoTime() / 1e6;
};
Console.prototype.time = function(reportName) {
var name = reportName ? "__" + reportName : "__internal_console_time__";
if ("undefined" === typeof this._timers[name] || this._timers.hasOwnProperty(name)) {
this._timers[name] = this.timeMillis();
} else {
this.warn("invalid name for timer console.time(" + reportName + ")");
}
};
Console.prototype.timeEnd = function(reportName) {
var name = reportName ? "__" + reportName : "__internal_console_time__";
if (this._timers.hasOwnProperty(name)) {
var val = this._timers[name];
if (val) {
var time = this.timeMillis();
this.info("console.time(" + reportName + "): %.6f ms", time - val);
this._timers[name] = undefined;
} else {
this.warn("undefined console.time(" + reportName + ")");
}
}
};
Console.prototype.assert = function(test, message) {
var formatParams = [];
for (var _i = 2; _i < arguments.length; _i++) {
formatParams[_i - 2] = arguments[_i];
}
if (!test) {
Array.prototype.shift.apply(arguments);
var formatedMessage = this.formatParams.apply(this, arguments);
this.error(formatedMessage, trace.messageType.error);
if (global.__consoleMessage) {
global.__consoleMessage(formatedMessage, "error");
}
}
};
Console.prototype.info = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
this.logMessage(this.formatParams.apply(this, arguments), trace.messageType.info);
};
Console.prototype.warn = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
var formatedMessage = this.formatParams.apply(this, arguments);
this.logMessage(formatedMessage, trace.messageType.warn);
if (global.__consoleMessage) {
global.__consoleMessage(formatedMessage, "warning");
}
};
Console.prototype.error = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
var formatedMessage = this.formatParams.apply(this, arguments);
this.logMessage(formatedMessage, trace.messageType.error);
if (global.__consoleMessage) {
global.__consoleMessage(formatedMessage, "error");
}
};
Console.prototype.log = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
var formatedMessage = this.formatParams.apply(this, arguments);
this.logMessage(formatedMessage, trace.messageType.log);
if (global.__consoleMessage) {
global.__consoleMessage(formatedMessage, "log");
}
};
Console.prototype.logMessage = function(message, messageType) {
if (!global.android) {
return;
}
var arrayToLog = [];
if (message.length > 4e3) {
var i;
for (i = 0; i * 4e3 < message.length; i++) {
arrayToLog.push(message.substr(i * 4e3, 4e3));
}
} else {
arrayToLog.push(message);
}
for (i = 0; i < arrayToLog.length; i++) {
switch (messageType) {
case trace.messageType.log:
{
android.util.Log.v(this.TAG, arrayToLog[i]);
break;
}

case trace.messageType.warn:
{
android.util.Log.w(this.TAG, arrayToLog[i]);
break;
}

case trace.messageType.error:
{
android.util.Log.e(this.TAG, arrayToLog[i]);
break;
}

case trace.messageType.info:
{
android.util.Log.i(this.TAG, arrayToLog[i]);
break;
}
}
}
};
Console.prototype.trace = function() {
var stack;
stack = new Error().stack.toString();
stack = stack.replace(this._stripFirstTwoLinesRegEx, "$2");
stack = "Stack Trace:\n" + stack;
this.log(stack);
};
Console.prototype.createDump = function(obj) {
var result = [];
if (null == obj) {
result.push("=== dump(): object is 'null' ===");
return result.join("");
}
if ("undefined" === typeof obj) {
result.push("=== dump(): object is 'undefined' ===");
return result.join("");
}
result.push("=== dump(): dumping members ===\n");
var stringifyValueCache = [];
var stringifyKeyCache = [];
result.push(JSON.stringify(obj, function(k, v) {
stringifyKeyCache.push(k);
if (typeof v === "object" && v !== null) {
if (stringifyValueCache.indexOf(v) !== -1) {
return "#CR:" + (v.toString ? v.toString() : v);
}
stringifyValueCache.push(v);
}
if (typeof v === "function") {
return k + "()" + v;
}
return v;
}, 4));
result.push("\n=== dump(): dumping function and properties names ===\n");
for (var id in obj) {
try {
if (typeof obj[id] === "function") {
result.push(id + "()\n");
} else {
if (typeof obj[id] !== "object" && stringifyKeyCache.indexOf(id) === -1) {
result.push(id + ": " + (obj[id] + "\n"));
}
}
} catch (err) {
result.push(id + ": inaccessible");
}
}
stringifyValueCache = null;
stringifyKeyCache = null;
result.push("=== dump(): finished ===");
return result.join("");
};
Console.prototype.dump = function(obj) {
var dump = this.createDump(obj);
if (platform.device.os === platform.platformNames.android) {
this.log(dump);
} else if (platform.device.os === platform.platformNames.ios) {
console.log(dump);
}
};
return Console;
}();
exports.Console = Console;
}, function(module, exports) {
(function(modules) {
var installedModules = {};
function __webpack_require__(moduleId) {
if (installedModules[moduleId]) return installedModules[moduleId].exports;
var module = installedModules[moduleId] = {
exports: {},
id: moduleId,
loaded: false
};
modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
module.loaded = true;
return module.exports;
}
__webpack_require__.m = modules;
__webpack_require__.c = installedModules;
__webpack_require__.p = "";
return __webpack_require__(0);
})([ function(module, exports, __webpack_require__) {
(function(global) {
"use strict";
__webpack_require__(1);
var timers_1 = __webpack_require__(2);
var set = "set";
var clear = "clear";
var _global = typeof window === "undefined" ? global : window;
var timers = __webpack_require__(4);
timers_1.patchTimer(timers, set, clear, "Timeout");
timers_1.patchTimer(timers, set, clear, "Interval");
timers_1.patchTimer(timers, set, clear, "Immediate");
var shouldPatchGlobalTimers = global.setTimeout !== timers.setTimeout;
if (shouldPatchGlobalTimers) {
timers_1.patchTimer(_global, set, clear, "Timeout");
timers_1.patchTimer(_global, set, clear, "Interval");
timers_1.patchTimer(_global, set, clear, "Immediate");
}
var crypto;
try {
crypto = __webpack_require__(6);
} catch (err) {}
if (crypto) {
var nativeRandomBytes_1 = crypto.randomBytes;
crypto.randomBytes = function randomBytesZone(size, callback) {
if (!callback) {
return nativeRandomBytes_1(size);
} else {
var zone = Zone.current;
var source = crypto.constructor.name + ".randomBytes";
return nativeRandomBytes_1(size, zone.wrap(callback, source));
}
}.bind(crypto);
var nativePbkdf2_1 = crypto.pbkdf2;
crypto.pbkdf2 = function pbkdf2Zone() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
var fn = args[args.length - 1];
if (typeof fn === "function") {
var zone = Zone.current;
var source = crypto.constructor.name + ".pbkdf2";
args[args.length - 1] = zone.wrap(fn, source);
return nativePbkdf2_1.apply(void 0, args);
} else {
return nativePbkdf2_1.apply(void 0, args);
}
}.bind(crypto);
}
}).call(exports, function() {
return this;
}());
}, function(module, exports) {
(function(global) {
var Zone = function(global) {
var Zone = function() {
function Zone(parent, zoneSpec) {
this._properties = null;
this._parent = parent;
this._name = zoneSpec ? zoneSpec.name || "unnamed" : "<root>";
this._properties = zoneSpec && zoneSpec.properties || {};
this._zoneDelegate = new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
}
Object.defineProperty(Zone, "current", {
get: function() {
return _currentZone;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone, "currentTask", {
get: function() {
return _currentTask;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone.prototype, "parent", {
get: function() {
return this._parent;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Zone.prototype, "name", {
get: function() {
return this._name;
},
enumerable: true,
configurable: true
});
Zone.prototype.get = function(key) {
var current = this;
while (current) {
if (current._properties.hasOwnProperty(key)) {
return current._properties[key];
}
current = current._parent;
}
};
Zone.prototype.fork = function(zoneSpec) {
if (!zoneSpec) throw new Error("ZoneSpec required!");
return this._zoneDelegate.fork(this, zoneSpec);
};
Zone.prototype.wrap = function(callback, source) {
if (typeof callback !== "function") {
throw new Error("Expecting function got: " + callback);
}
var _callback = this._zoneDelegate.intercept(this, callback, source);
var zone = this;
return function() {
return zone.runGuarded(_callback, this, arguments, source);
};
};
Zone.prototype.run = function(callback, applyThis, applyArgs, source) {
if (applyThis === void 0) {
applyThis = null;
}
if (applyArgs === void 0) {
applyArgs = null;
}
if (source === void 0) {
source = null;
}
var oldZone = _currentZone;
_currentZone = this;
try {
return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
} finally {
_currentZone = oldZone;
}
};
Zone.prototype.runGuarded = function(callback, applyThis, applyArgs, source) {
if (applyThis === void 0) {
applyThis = null;
}
if (applyArgs === void 0) {
applyArgs = null;
}
if (source === void 0) {
source = null;
}
var oldZone = _currentZone;
_currentZone = this;
try {
try {
return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
} catch (error) {
if (this._zoneDelegate.handleError(this, error)) {
throw error;
}
}
} finally {
_currentZone = oldZone;
}
};
Zone.prototype.runTask = function(task, applyThis, applyArgs) {
task.runCount++;
if (task.zone != this) throw new Error("A task can only be run in the zone which created it! (Creation: " + task.zone.name + "; Execution: " + this.name + ")");
var previousTask = _currentTask;
_currentTask = task;
var oldZone = _currentZone;
_currentZone = this;
try {
if (task.type == "macroTask" && task.data && !task.data.isPeriodic) {
task.cancelFn = null;
}
try {
return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
} catch (error) {
if (this._zoneDelegate.handleError(this, error)) {
throw error;
}
}
} finally {
_currentZone = oldZone;
_currentTask = previousTask;
}
};
Zone.prototype.scheduleMicroTask = function(source, callback, data, customSchedule) {
return this._zoneDelegate.scheduleTask(this, new ZoneTask("microTask", this, source, callback, data, customSchedule, null));
};
Zone.prototype.scheduleMacroTask = function(source, callback, data, customSchedule, customCancel) {
return this._zoneDelegate.scheduleTask(this, new ZoneTask("macroTask", this, source, callback, data, customSchedule, customCancel));
};
Zone.prototype.scheduleEventTask = function(source, callback, data, customSchedule, customCancel) {
return this._zoneDelegate.scheduleTask(this, new ZoneTask("eventTask", this, source, callback, data, customSchedule, customCancel));
};
Zone.prototype.cancelTask = function(task) {
var value = this._zoneDelegate.cancelTask(this, task);
task.runCount = -1;
task.cancelFn = null;
return value;
};
Zone.__symbol__ = __symbol__;
return Zone;
}();
var ZoneDelegate = function() {
function ZoneDelegate(zone, parentDelegate, zoneSpec) {
this._taskCounts = {
microTask: 0,
macroTask: 0,
eventTask: 0
};
this.zone = zone;
this._parentDelegate = parentDelegate;
this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
this._interceptZS = zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
this._interceptDlgt = zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
this._invokeDlgt = zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
this._handleErrorZS = zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
this._handleErrorDlgt = zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
this._scheduleTaskZS = zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
this._scheduleTaskDlgt = zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
this._invokeTaskZS = zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
this._invokeTaskDlgt = zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
this._cancelTaskZS = zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
this._cancelTaskDlgt = zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
this._hasTaskZS = zoneSpec && (zoneSpec.onHasTask ? zoneSpec : parentDelegate._hasTaskZS);
this._hasTaskDlgt = zoneSpec && (zoneSpec.onHasTask ? parentDelegate : parentDelegate._hasTaskDlgt);
}
ZoneDelegate.prototype.fork = function(targetZone, zoneSpec) {
return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) : new Zone(targetZone, zoneSpec);
};
ZoneDelegate.prototype.intercept = function(targetZone, callback, source) {
return this._interceptZS ? this._interceptZS.onIntercept(this._interceptDlgt, this.zone, targetZone, callback, source) : callback;
};
ZoneDelegate.prototype.invoke = function(targetZone, callback, applyThis, applyArgs, source) {
return this._invokeZS ? this._invokeZS.onInvoke(this._invokeDlgt, this.zone, targetZone, callback, applyThis, applyArgs, source) : callback.apply(applyThis, applyArgs);
};
ZoneDelegate.prototype.handleError = function(targetZone, error) {
return this._handleErrorZS ? this._handleErrorZS.onHandleError(this._handleErrorDlgt, this.zone, targetZone, error) : true;
};
ZoneDelegate.prototype.scheduleTask = function(targetZone, task) {
try {
if (this._scheduleTaskZS) {
return this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this.zone, targetZone, task);
} else if (task.scheduleFn) {
task.scheduleFn(task);
} else if (task.type == "microTask") {
scheduleMicroTask(task);
} else {
throw new Error("Task is missing scheduleFn.");
}
return task;
} finally {
if (targetZone == this.zone) {
this._updateTaskCount(task.type, 1);
}
}
};
ZoneDelegate.prototype.invokeTask = function(targetZone, task, applyThis, applyArgs) {
try {
return this._invokeTaskZS ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this.zone, targetZone, task, applyThis, applyArgs) : task.callback.apply(applyThis, applyArgs);
} finally {
if (targetZone == this.zone && task.type != "eventTask" && !(task.data && task.data.isPeriodic)) {
this._updateTaskCount(task.type, -1);
}
}
};
ZoneDelegate.prototype.cancelTask = function(targetZone, task) {
var value;
if (this._cancelTaskZS) {
value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this.zone, targetZone, task);
} else if (!task.cancelFn) {
throw new Error("Task does not support cancellation, or is already canceled.");
} else {
value = task.cancelFn(task);
}
if (targetZone == this.zone) {
this._updateTaskCount(task.type, -1);
}
return value;
};
ZoneDelegate.prototype.hasTask = function(targetZone, isEmpty) {
return this._hasTaskZS && this._hasTaskZS.onHasTask(this._hasTaskDlgt, this.zone, targetZone, isEmpty);
};
ZoneDelegate.prototype._updateTaskCount = function(type, count) {
var counts = this._taskCounts;
var prev = counts[type];
var next = counts[type] = prev + count;
if (next < 0) {
throw new Error("More tasks executed then were scheduled.");
}
if (prev == 0 || next == 0) {
var isEmpty = {
microTask: counts.microTask > 0,
macroTask: counts.macroTask > 0,
eventTask: counts.eventTask > 0,
change: type
};
try {
this.hasTask(this.zone, isEmpty);
} finally {
if (this._parentDelegate) {
this._parentDelegate._updateTaskCount(type, count);
}
}
}
};
return ZoneDelegate;
}();
var ZoneTask = function() {
function ZoneTask(type, zone, source, callback, options, scheduleFn, cancelFn) {
this.runCount = 0;
this.type = type;
this.zone = zone;
this.source = source;
this.data = options;
this.scheduleFn = scheduleFn;
this.cancelFn = cancelFn;
this.callback = callback;
var self = this;
this.invoke = function() {
try {
return zone.runTask(self, this, arguments);
} finally {
drainMicroTaskQueue();
}
};
}
return ZoneTask;
}();
function __symbol__(name) {
return "__zone_symbol__" + name;
}
var symbolSetTimeout = __symbol__("setTimeout");
var symbolPromise = __symbol__("Promise");
var symbolThen = __symbol__("then");
var _currentZone = new Zone(null, null);
var _currentTask = null;
var _microTaskQueue = [];
var _isDrainingMicrotaskQueue = false;
var _uncaughtPromiseErrors = [];
var _drainScheduled = false;
function scheduleQueueDrain() {
if (!_drainScheduled && !_currentTask && _microTaskQueue.length == 0) {
if (global[symbolPromise]) {
global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);
} else {
global[symbolSetTimeout](drainMicroTaskQueue, 0);
}
}
}
function scheduleMicroTask(task) {
scheduleQueueDrain();
_microTaskQueue.push(task);
}
function consoleError(e) {
var rejection = e && e.rejection;
if (rejection) {
console.error("Unhandled Promise rejection:", rejection instanceof Error ? rejection.message : rejection, "; Zone:", e.zone.name, "; Task:", e.task && e.task.source, "; Value:", rejection);
}
console.error(e);
}
function drainMicroTaskQueue() {
if (!_isDrainingMicrotaskQueue) {
_isDrainingMicrotaskQueue = true;
while (_microTaskQueue.length) {
var queue = _microTaskQueue;
_microTaskQueue = [];
for (var i = 0; i < queue.length; i++) {
var task = queue[i];
try {
task.zone.runTask(task, null, null);
} catch (e) {
consoleError(e);
}
}
}
while (_uncaughtPromiseErrors.length) {
var uncaughtPromiseErrors = _uncaughtPromiseErrors;
_uncaughtPromiseErrors = [];
var _loop_1 = function(i) {
var uncaughtPromiseError = uncaughtPromiseErrors[i];
try {
uncaughtPromiseError.zone.runGuarded(function() {
throw uncaughtPromiseError;
});
} catch (e) {
consoleError(e);
}
};
for (var i = 0; i < uncaughtPromiseErrors.length; i++) {
_loop_1(i);
}
}
_isDrainingMicrotaskQueue = false;
_drainScheduled = false;
}
}
function isThenable(value) {
return value && value.then;
}
function forwardResolution(value) {
return value;
}
function forwardRejection(rejection) {
return ZoneAwarePromise.reject(rejection);
}
var symbolState = __symbol__("state");
var symbolValue = __symbol__("value");
var source = "Promise.then";
var UNRESOLVED = null;
var RESOLVED = true;
var REJECTED = false;
var REJECTED_NO_CATCH = 0;
function makeResolver(promise, state) {
return function(v) {
resolvePromise(promise, state, v);
};
}
function resolvePromise(promise, state, value) {
if (promise[symbolState] === UNRESOLVED) {
if (value instanceof ZoneAwarePromise && value[symbolState] !== UNRESOLVED) {
clearRejectedNoCatch(value);
resolvePromise(promise, value[symbolState], value[symbolValue]);
} else if (isThenable(value)) {
value.then(makeResolver(promise, state), makeResolver(promise, false));
} else {
promise[symbolState] = state;
var queue = promise[symbolValue];
promise[symbolValue] = value;
for (var i = 0; i < queue.length; ) {
scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
}
if (queue.length == 0 && state == REJECTED) {
promise[symbolState] = REJECTED_NO_CATCH;
try {
throw new Error("Uncaught (in promise): " + value);
} catch (e) {
var error = e;
error.rejection = value;
error.promise = promise;
error.zone = Zone.current;
error.task = Zone.currentTask;
_uncaughtPromiseErrors.push(error);
scheduleQueueDrain();
}
}
}
}
return promise;
}
function clearRejectedNoCatch(promise) {
if (promise[symbolState] === REJECTED_NO_CATCH) {
promise[symbolState] = REJECTED;
for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {
if (promise === _uncaughtPromiseErrors[i].promise) {
_uncaughtPromiseErrors.splice(i, 1);
break;
}
}
}
}
function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
clearRejectedNoCatch(promise);
var delegate = promise[symbolState] ? onFulfilled || forwardResolution : onRejected || forwardRejection;
zone.scheduleMicroTask(source, function() {
try {
resolvePromise(chainPromise, true, zone.run(delegate, null, [ promise[symbolValue] ]));
} catch (error) {
resolvePromise(chainPromise, false, error);
}
});
}
var ZoneAwarePromise = function() {
function ZoneAwarePromise(executor) {
var promise = this;
promise[symbolState] = UNRESOLVED;
promise[symbolValue] = [];
try {
executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
} catch (e) {
resolvePromise(promise, false, e);
}
}
ZoneAwarePromise.resolve = function(value) {
return resolvePromise(new this(null), RESOLVED, value);
};
ZoneAwarePromise.reject = function(error) {
return resolvePromise(new this(null), REJECTED, error);
};
ZoneAwarePromise.race = function(values) {
var resolve;
var reject;
var promise = new this(function(res, rej) {
resolve = res;
reject = rej;
});
function onResolve(value) {
promise && (promise = null || resolve(value));
}
function onReject(error) {
promise && (promise = null || reject(error));
}
for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
var value = values_1[_i];
if (!isThenable(value)) {
value = this.resolve(value);
}
value.then(onResolve, onReject);
}
return promise;
};
ZoneAwarePromise.all = function(values) {
var resolve;
var reject;
var promise = new this(function(res, rej) {
resolve = res;
reject = rej;
});
var count = 0;
var resolvedValues = [];
function onReject(error) {
promise && reject(error);
promise = null;
}
for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
var value = values_2[_i];
if (!isThenable(value)) {
value = this.resolve(value);
}
value.then(function(index) {
return function(value) {
resolvedValues[index] = value;
count--;
if (promise && !count) {
resolve(resolvedValues);
}
promise == null;
};
}(count), onReject);
count++;
}
if (!count) resolve(resolvedValues);
return promise;
};
ZoneAwarePromise.prototype.then = function(onFulfilled, onRejected) {
var chainPromise = new ZoneAwarePromise(null);
var zone = Zone.current;
if (this[symbolState] == UNRESOLVED) {
this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
} else {
scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
}
return chainPromise;
};
ZoneAwarePromise.prototype.catch = function(onRejected) {
return this.then(null, onRejected);
};
return ZoneAwarePromise;
}();
var NativePromise = global[__symbol__("Promise")] = global.Promise;
global.Promise = ZoneAwarePromise;
if (NativePromise) {
var NativePromiseProtototype = NativePromise.prototype;
var NativePromiseThen_1 = NativePromiseProtototype[__symbol__("then")] = NativePromiseProtototype.then;
NativePromiseProtototype.then = function(onResolve, onReject) {
var nativePromise = this;
return new ZoneAwarePromise(function(resolve, reject) {
NativePromiseThen_1.call(nativePromise, resolve, reject);
}).then(onResolve, onReject);
};
}
return global.Zone = Zone;
}(typeof window === "undefined" ? global : window);
}).call(exports, function() {
return this;
}());
}, function(module, exports, __webpack_require__) {
"use strict";
var utils_1 = __webpack_require__(3);
function patchTimer(window, setName, cancelName, nameSuffix) {
var setNative = null;
var clearNative = null;
setName += nameSuffix;
cancelName += nameSuffix;
function scheduleTask(task) {
var data = task.data;
data.args[0] = task.invoke;
data.handleId = setNative.apply(window, data.args);
return task;
}
function clearTask(task) {
return clearNative(task.data.handleId);
}
setNative = utils_1.patchMethod(window, setName, function(delegate) {
return function(self, args) {
if (typeof args[0] === "function") {
var zone = Zone.current;
var options = {
handleId: null,
isPeriodic: nameSuffix === "Interval",
delay: nameSuffix === "Timeout" || nameSuffix === "Interval" ? args[1] || 0 : null,
args: args
};
return zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);
} else {
return delegate.apply(window, args);
}
};
});
clearNative = utils_1.patchMethod(window, cancelName, function(delegate) {
return function(self, args) {
var task = args[0];
if (task && typeof task.type === "string") {
if (task.cancelFn && task.data.isPeriodic || task.runCount === 0) {
task.zone.cancelTask(task);
}
} else {
delegate.apply(window, args);
}
};
});
}
exports.patchTimer = patchTimer;
}, function(module, exports) {
(function(global) {
"use strict";
exports.zoneSymbol = Zone["__symbol__"];
var _global = typeof window == "undefined" ? global : window;
function bindArguments(args, source) {
for (var i = args.length - 1; i >= 0; i--) {
if (typeof args[i] === "function") {
args[i] = Zone.current.wrap(args[i], source + "_" + i);
}
}
return args;
}
exports.bindArguments = bindArguments;
function patchPrototype(prototype, fnNames) {
var source = prototype.constructor["name"];
var _loop_1 = function(i) {
var name_1 = fnNames[i];
var delegate = prototype[name_1];
if (delegate) {
prototype[name_1] = function(delegate) {
return function() {
return delegate.apply(this, bindArguments(arguments, source + "." + name_1));
};
}(delegate);
}
};
for (var i = 0; i < fnNames.length; i++) {
_loop_1(i);
}
}
exports.patchPrototype = patchPrototype;
exports.isWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
exports.isNode = typeof process !== "undefined" && {}.toString.call(process) === "[object process]";
exports.isBrowser = !exports.isNode && !exports.isWebWorker && !!(typeof window !== "undefined" && window["HTMLElement"]);
function patchProperty(obj, prop) {
var desc = Object.getOwnPropertyDescriptor(obj, prop) || {
enumerable: true,
configurable: true
};
delete desc.writable;
delete desc.value;
var eventName = prop.substr(2);
var _prop = "_" + prop;
desc.set = function(fn) {
if (this[_prop]) {
this.removeEventListener(eventName, this[_prop]);
}
if (typeof fn === "function") {
var wrapFn = function(event) {
var result;
result = fn.apply(this, arguments);
if (result != undefined && !result) event.preventDefault();
};
this[_prop] = wrapFn;
this.addEventListener(eventName, wrapFn, false);
} else {
this[_prop] = null;
}
};
desc.get = function() {
return this[_prop];
};
Object.defineProperty(obj, prop, desc);
}
exports.patchProperty = patchProperty;
function patchOnProperties(obj, properties) {
var onProperties = [];
for (var prop in obj) {
if (prop.substr(0, 2) == "on") {
onProperties.push(prop);
}
}
for (var j = 0; j < onProperties.length; j++) {
patchProperty(obj, onProperties[j]);
}
if (properties) {
for (var i = 0; i < properties.length; i++) {
patchProperty(obj, "on" + properties[i]);
}
}
}
exports.patchOnProperties = patchOnProperties;
var EVENT_TASKS = exports.zoneSymbol("eventTasks");
var ADD_EVENT_LISTENER = "addEventListener";
var REMOVE_EVENT_LISTENER = "removeEventListener";
var SYMBOL_ADD_EVENT_LISTENER = exports.zoneSymbol(ADD_EVENT_LISTENER);
var SYMBOL_REMOVE_EVENT_LISTENER = exports.zoneSymbol(REMOVE_EVENT_LISTENER);
function findExistingRegisteredTask(target, handler, name, capture, remove) {
var eventTasks = target[EVENT_TASKS];
if (eventTasks) {
for (var i = 0; i < eventTasks.length; i++) {
var eventTask = eventTasks[i];
var data = eventTask.data;
if (data.handler === handler && data.useCapturing === capture && data.eventName === name) {
if (remove) {
eventTasks.splice(i, 1);
}
return eventTask;
}
}
}
return null;
}
function attachRegisteredEvent(target, eventTask) {
var eventTasks = target[EVENT_TASKS];
if (!eventTasks) {
eventTasks = target[EVENT_TASKS] = [];
}
eventTasks.push(eventTask);
}
function scheduleEventListener(eventTask) {
var meta = eventTask.data;
attachRegisteredEvent(meta.target, eventTask);
return meta.target[SYMBOL_ADD_EVENT_LISTENER](meta.eventName, eventTask.invoke, meta.useCapturing);
}
function cancelEventListener(eventTask) {
var meta = eventTask.data;
findExistingRegisteredTask(meta.target, eventTask.invoke, meta.eventName, meta.useCapturing, true);
meta.target[SYMBOL_REMOVE_EVENT_LISTENER](meta.eventName, eventTask.invoke, meta.useCapturing);
}
function zoneAwareAddEventListener(self, args) {
var eventName = args[0];
var handler = args[1];
var useCapturing = args[2] || false;
var target = self || _global;
var delegate = null;
if (typeof handler == "function") {
delegate = handler;
} else if (handler && handler.handleEvent) {
delegate = function(event) {
return handler.handleEvent(event);
};
}
var validZoneHandler = false;
try {
validZoneHandler = handler && handler.toString() === "[object FunctionWrapper]";
} catch (e) {
return;
}
if (!delegate || validZoneHandler) {
return target[SYMBOL_ADD_EVENT_LISTENER](eventName, handler, useCapturing);
}
var eventTask = findExistingRegisteredTask(target, handler, eventName, useCapturing, false);
if (eventTask) {
return target[SYMBOL_ADD_EVENT_LISTENER](eventName, eventTask.invoke, useCapturing);
}
var zone = Zone.current;
var source = target.constructor["name"] + ".addEventListener:" + eventName;
var data = {
target: target,
eventName: eventName,
name: eventName,
useCapturing: useCapturing,
handler: handler
};
zone.scheduleEventTask(source, delegate, data, scheduleEventListener, cancelEventListener);
}
function zoneAwareRemoveEventListener(self, args) {
var eventName = args[0];
var handler = args[1];
var useCapturing = args[2] || false;
var target = self || _global;
var eventTask = findExistingRegisteredTask(target, handler, eventName, useCapturing, true);
if (eventTask) {
eventTask.zone.cancelTask(eventTask);
} else {
target[SYMBOL_REMOVE_EVENT_LISTENER](eventName, handler, useCapturing);
}
}
function patchEventTargetMethods(obj) {
if (obj && obj.addEventListener) {
patchMethod(obj, ADD_EVENT_LISTENER, function() {
return zoneAwareAddEventListener;
});
patchMethod(obj, REMOVE_EVENT_LISTENER, function() {
return zoneAwareRemoveEventListener;
});
return true;
} else {
return false;
}
}
exports.patchEventTargetMethods = patchEventTargetMethods;
var originalInstanceKey = exports.zoneSymbol("originalInstance");
function patchClass(className) {
var OriginalClass = _global[className];
if (!OriginalClass) return;
_global[className] = function() {
var a = bindArguments(arguments, className);
switch (a.length) {
case 0:
this[originalInstanceKey] = new OriginalClass();
break;

case 1:
this[originalInstanceKey] = new OriginalClass(a[0]);
break;

case 2:
this[originalInstanceKey] = new OriginalClass(a[0], a[1]);
break;

case 3:
this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);
break;

case 4:
this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);
break;

default:
throw new Error("Arg list too long.");
}
};
var instance = new OriginalClass(function() {});
var prop;
for (prop in instance) {
(function(prop) {
if (typeof instance[prop] === "function") {
_global[className].prototype[prop] = function() {
return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
};
} else {
Object.defineProperty(_global[className].prototype, prop, {
set: function(fn) {
if (typeof fn === "function") {
this[originalInstanceKey][prop] = Zone.current.wrap(fn, className + "." + prop);
} else {
this[originalInstanceKey][prop] = fn;
}
},
get: function() {
return this[originalInstanceKey][prop];
}
});
}
})(prop);
}
for (prop in OriginalClass) {
if (prop !== "prototype" && OriginalClass.hasOwnProperty(prop)) {
_global[className][prop] = OriginalClass[prop];
}
}
}
exports.patchClass = patchClass;
function createNamedFn(name, delegate) {
try {
return Function("f", "return function " + name + "(){return f(this, arguments)}")(delegate);
} catch (e) {
return function() {
return delegate(this, arguments);
};
}
}
exports.createNamedFn = createNamedFn;
function patchMethod(target, name, patchFn) {
var proto = target;
while (proto && !proto.hasOwnProperty(name)) {
proto = Object.getPrototypeOf(proto);
}
if (!proto && target[name]) {
proto = target;
}
var delegateName = exports.zoneSymbol(name);
var delegate;
if (proto && !(delegate = proto[delegateName])) {
delegate = proto[delegateName] = proto[name];
proto[name] = createNamedFn(name, patchFn(delegate, delegateName, name));
}
return delegate;
}
exports.patchMethod = patchMethod;
}).call(exports, function() {
return this;
}());
}, function(module, exports, __webpack_require__) {
(function(setImmediate, clearImmediate) {
var nextTick = __webpack_require__(5).nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;
exports.setTimeout = function() {
return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout = exports.clearInterval = function(timeout) {
timeout.close();
};
function Timeout(id, clearFn) {
this._id = id;
this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
this._clearFn.call(window, this._id);
};
exports.enroll = function(item, msecs) {
clearTimeout(item._idleTimeoutId);
item._idleTimeout = msecs;
};
exports.unenroll = function(item) {
clearTimeout(item._idleTimeoutId);
item._idleTimeout = -1;
};
exports._unrefActive = exports.active = function(item) {
clearTimeout(item._idleTimeoutId);
var msecs = item._idleTimeout;
if (msecs >= 0) {
item._idleTimeoutId = setTimeout(function onTimeout() {
if (item._onTimeout) item._onTimeout();
}, msecs);
}
};
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
var id = nextImmediateId++;
var args = arguments.length < 2 ? false : slice.call(arguments, 1);
immediateIds[id] = true;
nextTick(function onNextTick() {
if (immediateIds[id]) {
if (args) {
fn.apply(null, args);
} else {
fn.call(null);
}
exports.clearImmediate(id);
}
});
return id;
};
exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
delete immediateIds[id];
};
}).call(exports, __webpack_require__(4).setImmediate, __webpack_require__(4).clearImmediate);
}, function(module, exports) {
var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
draining = false;
if (currentQueue.length) {
queue = currentQueue.concat(queue);
} else {
queueIndex = -1;
}
if (queue.length) {
drainQueue();
}
}
function drainQueue() {
if (draining) {
return;
}
var timeout = setTimeout(cleanUpNextTick);
draining = true;
var len = queue.length;
while (len) {
currentQueue = queue;
queue = [];
while (++queueIndex < len) {
if (currentQueue) {
currentQueue[queueIndex].run();
}
}
queueIndex = -1;
len = queue.length;
}
currentQueue = null;
draining = false;
clearTimeout(timeout);
}
process.nextTick = function(fun) {
var args = new Array(arguments.length - 1);
if (arguments.length > 1) {
for (var i = 1; i < arguments.length; i++) {
args[i - 1] = arguments[i];
}
}
queue.push(new Item(fun, args));
if (queue.length === 1 && !draining) {
setTimeout(drainQueue, 0);
}
};
function Item(fun, array) {
this.fun = fun;
this.array = array;
}
Item.prototype.run = function() {
this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = "";
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.binding = function(name) {
throw new Error("process.binding is not supported");
};
process.cwd = function() {
return "/";
};
process.chdir = function(dir) {
throw new Error("process.chdir is not supported");
};
process.umask = function() {
return 0;
};
}, function(module, exports, __webpack_require__) {
(function(Buffer) {
var rng = __webpack_require__(11);
function error() {
var m = [].slice.call(arguments).join(" ");
throw new Error([ m, "we accept pull requests", "http://github.com/dominictarr/crypto-browserify" ].join("\n"));
}
exports.createHash = __webpack_require__(13);
exports.createHmac = __webpack_require__(25);
exports.randomBytes = function(size, callback) {
if (callback && callback.call) {
try {
callback.call(this, undefined, new Buffer(rng(size)));
} catch (err) {
callback(err);
}
} else {
return new Buffer(rng(size));
}
};
function each(a, f) {
for (var i in a) f(a[i], i);
}
exports.getHashes = function() {
return [ "sha1", "sha256", "sha512", "md5", "rmd160" ];
};
var p = __webpack_require__(26)(exports);
exports.pbkdf2 = p.pbkdf2;
exports.pbkdf2Sync = p.pbkdf2Sync;
each([ "createCredentials", "createCipher", "createCipheriv", "createDecipher", "createDecipheriv", "createSign", "createVerify", "createDiffieHellman" ], function(name) {
exports[name] = function() {
error("sorry,", name, "is not implemented yet");
};
});
}).call(exports, __webpack_require__(7).Buffer);
}, function(module, exports, __webpack_require__) {
(function(Buffer, global) {
"use strict";
var base64 = __webpack_require__(8);
var ieee754 = __webpack_require__(9);
var isArray = __webpack_require__(10);
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
Buffer.poolSize = 8192;
var rootParent = {};
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
function typedArraySupport() {
function Bar() {}
try {
var arr = new Uint8Array(1);
arr.foo = function() {
return 42;
};
arr.constructor = Bar;
return arr.foo() === 42 && arr.constructor === Bar && typeof arr.subarray === "function" && arr.subarray(1, 1).byteLength === 0;
} catch (e) {
return false;
}
}
function kMaxLength() {
return Buffer.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
}
function Buffer(arg) {
if (!(this instanceof Buffer)) {
if (arguments.length > 1) return new Buffer(arg, arguments[1]);
return new Buffer(arg);
}
if (!Buffer.TYPED_ARRAY_SUPPORT) {
this.length = 0;
this.parent = undefined;
}
if (typeof arg === "number") {
return fromNumber(this, arg);
}
if (typeof arg === "string") {
return fromString(this, arg, arguments.length > 1 ? arguments[1] : "utf8");
}
return fromObject(this, arg);
}
function fromNumber(that, length) {
that = allocate(that, length < 0 ? 0 : checked(length) | 0);
if (!Buffer.TYPED_ARRAY_SUPPORT) {
for (var i = 0; i < length; i++) {
that[i] = 0;
}
}
return that;
}
function fromString(that, string, encoding) {
if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
var length = byteLength(string, encoding) | 0;
that = allocate(that, length);
that.write(string, encoding);
return that;
}
function fromObject(that, object) {
if (Buffer.isBuffer(object)) return fromBuffer(that, object);
if (isArray(object)) return fromArray(that, object);
if (object == null) {
throw new TypeError("must start with number, buffer, array or string");
}
if (typeof ArrayBuffer !== "undefined") {
if (object.buffer instanceof ArrayBuffer) {
return fromTypedArray(that, object);
}
if (object instanceof ArrayBuffer) {
return fromArrayBuffer(that, object);
}
}
if (object.length) return fromArrayLike(that, object);
return fromJsonObject(that, object);
}
function fromBuffer(that, buffer) {
var length = checked(buffer.length) | 0;
that = allocate(that, length);
buffer.copy(that, 0, 0, length);
return that;
}
function fromArray(that, array) {
var length = checked(array.length) | 0;
that = allocate(that, length);
for (var i = 0; i < length; i += 1) {
that[i] = array[i] & 255;
}
return that;
}
function fromTypedArray(that, array) {
var length = checked(array.length) | 0;
that = allocate(that, length);
for (var i = 0; i < length; i += 1) {
that[i] = array[i] & 255;
}
return that;
}
function fromArrayBuffer(that, array) {
if (Buffer.TYPED_ARRAY_SUPPORT) {
array.byteLength;
that = Buffer._augment(new Uint8Array(array));
} else {
that = fromTypedArray(that, new Uint8Array(array));
}
return that;
}
function fromArrayLike(that, array) {
var length = checked(array.length) | 0;
that = allocate(that, length);
for (var i = 0; i < length; i += 1) {
that[i] = array[i] & 255;
}
return that;
}
function fromJsonObject(that, object) {
var array;
var length = 0;
if (object.type === "Buffer" && isArray(object.data)) {
array = object.data;
length = checked(array.length) | 0;
}
that = allocate(that, length);
for (var i = 0; i < length; i += 1) {
that[i] = array[i] & 255;
}
return that;
}
if (Buffer.TYPED_ARRAY_SUPPORT) {
Buffer.prototype.__proto__ = Uint8Array.prototype;
Buffer.__proto__ = Uint8Array;
} else {
Buffer.prototype.length = undefined;
Buffer.prototype.parent = undefined;
}
function allocate(that, length) {
if (Buffer.TYPED_ARRAY_SUPPORT) {
that = Buffer._augment(new Uint8Array(length));
that.__proto__ = Buffer.prototype;
} else {
that.length = length;
that._isBuffer = true;
}
var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1;
if (fromPool) that.parent = rootParent;
return that;
}
function checked(length) {
if (length >= kMaxLength()) {
throw new RangeError("Attempt to allocate Buffer larger than maximum " + "size: 0x" + kMaxLength().toString(16) + " bytes");
}
return length | 0;
}
function SlowBuffer(subject, encoding) {
if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding);
var buf = new Buffer(subject, encoding);
delete buf.parent;
return buf;
}
Buffer.isBuffer = function isBuffer(b) {
return !!(b != null && b._isBuffer);
};
Buffer.compare = function compare(a, b) {
if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
throw new TypeError("Arguments must be Buffers");
}
if (a === b) return 0;
var x = a.length;
var y = b.length;
var i = 0;
var len = Math.min(x, y);
while (i < len) {
if (a[i] !== b[i]) break;
++i;
}
if (i !== len) {
x = a[i];
y = b[i];
}
if (x < y) return -1;
if (y < x) return 1;
return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
switch (String(encoding).toLowerCase()) {
case "hex":
case "utf8":
case "utf-8":
case "ascii":
case "binary":
case "base64":
case "raw":
case "ucs2":
case "ucs-2":
case "utf16le":
case "utf-16le":
return true;

default:
return false;
}
};
Buffer.concat = function concat(list, length) {
if (!isArray(list)) throw new TypeError("list argument must be an Array of Buffers.");
if (list.length === 0) {
return new Buffer(0);
}
var i;
if (length === undefined) {
length = 0;
for (i = 0; i < list.length; i++) {
length += list[i].length;
}
}
var buf = new Buffer(length);
var pos = 0;
for (i = 0; i < list.length; i++) {
var item = list[i];
item.copy(buf, pos);
pos += item.length;
}
return buf;
};
function byteLength(string, encoding) {
if (typeof string !== "string") string = "" + string;
var len = string.length;
if (len === 0) return 0;
var loweredCase = false;
for (;;) {
switch (encoding) {
case "ascii":
case "binary":
case "raw":
case "raws":
return len;

case "utf8":
case "utf-8":
return utf8ToBytes(string).length;

case "ucs2":
case "ucs-2":
case "utf16le":
case "utf-16le":
return len * 2;

case "hex":
return len >>> 1;

case "base64":
return base64ToBytes(string).length;

default:
if (loweredCase) return utf8ToBytes(string).length;
encoding = ("" + encoding).toLowerCase();
loweredCase = true;
}
}
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
var loweredCase = false;
start = start | 0;
end = end === undefined || end === Infinity ? this.length : end | 0;
if (!encoding) encoding = "utf8";
if (start < 0) start = 0;
if (end > this.length) end = this.length;
if (end <= start) return "";
while (true) {
switch (encoding) {
case "hex":
return hexSlice(this, start, end);

case "utf8":
case "utf-8":
return utf8Slice(this, start, end);

case "ascii":
return asciiSlice(this, start, end);

case "binary":
return binarySlice(this, start, end);

case "base64":
return base64Slice(this, start, end);

case "ucs2":
case "ucs-2":
case "utf16le":
case "utf-16le":
return utf16leSlice(this, start, end);

default:
if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
encoding = (encoding + "").toLowerCase();
loweredCase = true;
}
}
}
Buffer.prototype.toString = function toString() {
var length = this.length | 0;
if (length === 0) return "";
if (arguments.length === 0) return utf8Slice(this, 0, length);
return slowToString.apply(this, arguments);
};
Buffer.prototype.equals = function equals(b) {
if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
if (this === b) return true;
return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
var str = "";
var max = exports.INSPECT_MAX_BYTES;
if (this.length > 0) {
str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
if (this.length > max) str += " ... ";
}
return "<Buffer " + str + ">";
};
Buffer.prototype.compare = function compare(b) {
if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
if (this === b) return 0;
return Buffer.compare(this, b);
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset) {
if (byteOffset > 2147483647) byteOffset = 2147483647; else if (byteOffset < -2147483648) byteOffset = -2147483648;
byteOffset >>= 0;
if (this.length === 0) return -1;
if (byteOffset >= this.length) return -1;
if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0);
if (typeof val === "string") {
if (val.length === 0) return -1;
return String.prototype.indexOf.call(this, val, byteOffset);
}
if (Buffer.isBuffer(val)) {
return arrayIndexOf(this, val, byteOffset);
}
if (typeof val === "number") {
if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === "function") {
return Uint8Array.prototype.indexOf.call(this, val, byteOffset);
}
return arrayIndexOf(this, [ val ], byteOffset);
}
function arrayIndexOf(arr, val, byteOffset) {
var foundIndex = -1;
for (var i = 0; byteOffset + i < arr.length; i++) {
if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
if (foundIndex === -1) foundIndex = i;
if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex;
} else {
foundIndex = -1;
}
}
return -1;
}
throw new TypeError("val must be string, number or Buffer");
};
Buffer.prototype.get = function get(offset) {
console.log(".get() is deprecated. Access using array indexes instead.");
return this.readUInt8(offset);
};
Buffer.prototype.set = function set(v, offset) {
console.log(".set() is deprecated. Access using array indexes instead.");
return this.writeUInt8(v, offset);
};
function hexWrite(buf, string, offset, length) {
offset = Number(offset) || 0;
var remaining = buf.length - offset;
if (!length) {
length = remaining;
} else {
length = Number(length);
if (length > remaining) {
length = remaining;
}
}
var strLen = string.length;
if (strLen % 2 !== 0) throw new Error("Invalid hex string");
if (length > strLen / 2) {
length = strLen / 2;
}
for (var i = 0; i < length; i++) {
var parsed = parseInt(string.substr(i * 2, 2), 16);
if (isNaN(parsed)) throw new Error("Invalid hex string");
buf[offset + i] = parsed;
}
return i;
}
function utf8Write(buf, string, offset, length) {
return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function binaryWrite(buf, string, offset, length) {
return asciiWrite(buf, string, offset, length);
}
function base64Write(buf, string, offset, length) {
return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
if (offset === undefined) {
encoding = "utf8";
length = this.length;
offset = 0;
} else if (length === undefined && typeof offset === "string") {
encoding = offset;
length = this.length;
offset = 0;
} else if (isFinite(offset)) {
offset = offset | 0;
if (isFinite(length)) {
length = length | 0;
if (encoding === undefined) encoding = "utf8";
} else {
encoding = length;
length = undefined;
}
} else {
var swap = encoding;
encoding = offset;
offset = length | 0;
length = swap;
}
var remaining = this.length - offset;
if (length === undefined || length > remaining) length = remaining;
if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
throw new RangeError("attempt to write outside buffer bounds");
}
if (!encoding) encoding = "utf8";
var loweredCase = false;
for (;;) {
switch (encoding) {
case "hex":
return hexWrite(this, string, offset, length);

case "utf8":
case "utf-8":
return utf8Write(this, string, offset, length);

case "ascii":
return asciiWrite(this, string, offset, length);

case "binary":
return binaryWrite(this, string, offset, length);

case "base64":
return base64Write(this, string, offset, length);

case "ucs2":
case "ucs-2":
case "utf16le":
case "utf-16le":
return ucs2Write(this, string, offset, length);

default:
if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
encoding = ("" + encoding).toLowerCase();
loweredCase = true;
}
}
};
Buffer.prototype.toJSON = function toJSON() {
return {
type: "Buffer",
data: Array.prototype.slice.call(this._arr || this, 0)
};
};
function base64Slice(buf, start, end) {
if (start === 0 && end === buf.length) {
return base64.fromByteArray(buf);
} else {
return base64.fromByteArray(buf.slice(start, end));
}
}
function utf8Slice(buf, start, end) {
end = Math.min(buf.length, end);
var res = [];
var i = start;
while (i < end) {
var firstByte = buf[i];
var codePoint = null;
var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
if (i + bytesPerSequence <= end) {
var secondByte, thirdByte, fourthByte, tempCodePoint;
switch (bytesPerSequence) {
case 1:
if (firstByte < 128) {
codePoint = firstByte;
}
break;

case 2:
secondByte = buf[i + 1];
if ((secondByte & 192) === 128) {
tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
if (tempCodePoint > 127) {
codePoint = tempCodePoint;
}
}
break;

case 3:
secondByte = buf[i + 1];
thirdByte = buf[i + 2];
if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
codePoint = tempCodePoint;
}
}
break;

case 4:
secondByte = buf[i + 1];
thirdByte = buf[i + 2];
fourthByte = buf[i + 3];
if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
codePoint = tempCodePoint;
}
}
}
}
if (codePoint === null) {
codePoint = 65533;
bytesPerSequence = 1;
} else if (codePoint > 65535) {
codePoint -= 65536;
res.push(codePoint >>> 10 & 1023 | 55296);
codePoint = 56320 | codePoint & 1023;
}
res.push(codePoint);
i += bytesPerSequence;
}
return decodeCodePointsArray(res);
}
var MAX_ARGUMENTS_LENGTH = 4096;
function decodeCodePointsArray(codePoints) {
var len = codePoints.length;
if (len <= MAX_ARGUMENTS_LENGTH) {
return String.fromCharCode.apply(String, codePoints);
}
var res = "";
var i = 0;
while (i < len) {
res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
}
return res;
}
function asciiSlice(buf, start, end) {
var ret = "";
end = Math.min(buf.length, end);
for (var i = start; i < end; i++) {
ret += String.fromCharCode(buf[i] & 127);
}
return ret;
}
function binarySlice(buf, start, end) {
var ret = "";
end = Math.min(buf.length, end);
for (var i = start; i < end; i++) {
ret += String.fromCharCode(buf[i]);
}
return ret;
}
function hexSlice(buf, start, end) {
var len = buf.length;
if (!start || start < 0) start = 0;
if (!end || end < 0 || end > len) end = len;
var out = "";
for (var i = start; i < end; i++) {
out += toHex(buf[i]);
}
return out;
}
function utf16leSlice(buf, start, end) {
var bytes = buf.slice(start, end);
var res = "";
for (var i = 0; i < bytes.length; i += 2) {
res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
}
return res;
}
Buffer.prototype.slice = function slice(start, end) {
var len = this.length;
start = ~~start;
end = end === undefined ? len : ~~end;
if (start < 0) {
start += len;
if (start < 0) start = 0;
} else if (start > len) {
start = len;
}
if (end < 0) {
end += len;
if (end < 0) end = 0;
} else if (end > len) {
end = len;
}
if (end < start) end = start;
var newBuf;
if (Buffer.TYPED_ARRAY_SUPPORT) {
newBuf = Buffer._augment(this.subarray(start, end));
} else {
var sliceLen = end - start;
newBuf = new Buffer(sliceLen, undefined);
for (var i = 0; i < sliceLen; i++) {
newBuf[i] = this[i + start];
}
}
if (newBuf.length) newBuf.parent = this.parent || this;
return newBuf;
};
function checkOffset(offset, ext, length) {
if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
offset = offset | 0;
byteLength = byteLength | 0;
if (!noAssert) checkOffset(offset, byteLength, this.length);
var val = this[offset];
var mul = 1;
var i = 0;
while (++i < byteLength && (mul *= 256)) {
val += this[offset + i] * mul;
}
return val;
};
Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
offset = offset | 0;
byteLength = byteLength | 0;
if (!noAssert) {
checkOffset(offset, byteLength, this.length);
}
var val = this[offset + --byteLength];
var mul = 1;
while (byteLength > 0 && (mul *= 256)) {
val += this[offset + --byteLength] * mul;
}
return val;
};
Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
if (!noAssert) checkOffset(offset, 1, this.length);
return this[offset];
};
Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 2, this.length);
return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 2, this.length);
return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 4, this.length);
return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
};
Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 4, this.length);
return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
offset = offset | 0;
byteLength = byteLength | 0;
if (!noAssert) checkOffset(offset, byteLength, this.length);
var val = this[offset];
var mul = 1;
var i = 0;
while (++i < byteLength && (mul *= 256)) {
val += this[offset + i] * mul;
}
mul *= 128;
if (val >= mul) val -= Math.pow(2, 8 * byteLength);
return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
offset = offset | 0;
byteLength = byteLength | 0;
if (!noAssert) checkOffset(offset, byteLength, this.length);
var i = byteLength;
var mul = 1;
var val = this[offset + --i];
while (i > 0 && (mul *= 256)) {
val += this[offset + --i] * mul;
}
mul *= 128;
if (val >= mul) val -= Math.pow(2, 8 * byteLength);
return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
if (!noAssert) checkOffset(offset, 1, this.length);
if (!(this[offset] & 128)) return this[offset];
return (255 - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 2, this.length);
var val = this[offset] | this[offset + 1] << 8;
return val & 32768 ? val | 4294901760 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 2, this.length);
var val = this[offset + 1] | this[offset] << 8;
return val & 32768 ? val | 4294901760 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 4, this.length);
return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 4, this.length);
return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 4, this.length);
return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 4, this.length);
return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 8, this.length);
return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
if (!noAssert) checkOffset(offset, 8, this.length);
return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
if (!Buffer.isBuffer(buf)) throw new TypeError("buffer must be a Buffer instance");
if (value > max || value < min) throw new RangeError("value is out of bounds");
if (offset + ext > buf.length) throw new RangeError("index out of range");
}
Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
value = +value;
offset = offset | 0;
byteLength = byteLength | 0;
if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0);
var mul = 1;
var i = 0;
this[offset] = value & 255;
while (++i < byteLength && (mul *= 256)) {
this[offset + i] = value / mul & 255;
}
return offset + byteLength;
};
Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
value = +value;
offset = offset | 0;
byteLength = byteLength | 0;
if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0);
var i = byteLength - 1;
var mul = 1;
this[offset + i] = value & 255;
while (--i >= 0 && (mul *= 256)) {
this[offset + i] = value / mul & 255;
}
return offset + byteLength;
};
Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
this[offset] = value & 255;
return offset + 1;
};
function objectWriteUInt16(buf, value, offset, littleEndian) {
if (value < 0) value = 65535 + value + 1;
for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
}
}
Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
if (Buffer.TYPED_ARRAY_SUPPORT) {
this[offset] = value & 255;
this[offset + 1] = value >>> 8;
} else {
objectWriteUInt16(this, value, offset, true);
}
return offset + 2;
};
Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
if (Buffer.TYPED_ARRAY_SUPPORT) {
this[offset] = value >>> 8;
this[offset + 1] = value & 255;
} else {
objectWriteUInt16(this, value, offset, false);
}
return offset + 2;
};
function objectWriteUInt32(buf, value, offset, littleEndian) {
if (value < 0) value = 4294967295 + value + 1;
for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 255;
}
}
Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
if (Buffer.TYPED_ARRAY_SUPPORT) {
this[offset + 3] = value >>> 24;
this[offset + 2] = value >>> 16;
this[offset + 1] = value >>> 8;
this[offset] = value & 255;
} else {
objectWriteUInt32(this, value, offset, true);
}
return offset + 4;
};
Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
if (Buffer.TYPED_ARRAY_SUPPORT) {
this[offset] = value >>> 24;
this[offset + 1] = value >>> 16;
this[offset + 2] = value >>> 8;
this[offset + 3] = value & 255;
} else {
objectWriteUInt32(this, value, offset, false);
}
return offset + 4;
};
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) {
var limit = Math.pow(2, 8 * byteLength - 1);
checkInt(this, value, offset, byteLength, limit - 1, -limit);
}
var i = 0;
var mul = 1;
var sub = value < 0 ? 1 : 0;
this[offset] = value & 255;
while (++i < byteLength && (mul *= 256)) {
this[offset + i] = (value / mul >> 0) - sub & 255;
}
return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) {
var limit = Math.pow(2, 8 * byteLength - 1);
checkInt(this, value, offset, byteLength, limit - 1, -limit);
}
var i = byteLength - 1;
var mul = 1;
var sub = value < 0 ? 1 : 0;
this[offset + i] = value & 255;
while (--i >= 0 && (mul *= 256)) {
this[offset + i] = (value / mul >> 0) - sub & 255;
}
return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
if (value < 0) value = 255 + value + 1;
this[offset] = value & 255;
return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
if (Buffer.TYPED_ARRAY_SUPPORT) {
this[offset] = value & 255;
this[offset + 1] = value >>> 8;
} else {
objectWriteUInt16(this, value, offset, true);
}
return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
if (Buffer.TYPED_ARRAY_SUPPORT) {
this[offset] = value >>> 8;
this[offset + 1] = value & 255;
} else {
objectWriteUInt16(this, value, offset, false);
}
return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
if (Buffer.TYPED_ARRAY_SUPPORT) {
this[offset] = value & 255;
this[offset + 1] = value >>> 8;
this[offset + 2] = value >>> 16;
this[offset + 3] = value >>> 24;
} else {
objectWriteUInt32(this, value, offset, true);
}
return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
value = +value;
offset = offset | 0;
if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
if (value < 0) value = 4294967295 + value + 1;
if (Buffer.TYPED_ARRAY_SUPPORT) {
this[offset] = value >>> 24;
this[offset + 1] = value >>> 16;
this[offset + 2] = value >>> 8;
this[offset + 3] = value & 255;
} else {
objectWriteUInt32(this, value, offset, false);
}
return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
if (value > max || value < min) throw new RangeError("value is out of bounds");
if (offset + ext > buf.length) throw new RangeError("index out of range");
if (offset < 0) throw new RangeError("index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
if (!noAssert) {
checkIEEE754(buf, value, offset, 4, 3.4028234663852886e38, -3.4028234663852886e38);
}
ieee754.write(buf, value, offset, littleEndian, 23, 4);
return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
if (!noAssert) {
checkIEEE754(buf, value, offset, 8, 1.7976931348623157e308, -1.7976931348623157e308);
}
ieee754.write(buf, value, offset, littleEndian, 52, 8);
return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
return writeDouble(this, value, offset, false, noAssert);
};
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
if (!start) start = 0;
if (!end && end !== 0) end = this.length;
if (targetStart >= target.length) targetStart = target.length;
if (!targetStart) targetStart = 0;
if (end > 0 && end < start) end = start;
if (end === start) return 0;
if (target.length === 0 || this.length === 0) return 0;
if (targetStart < 0) {
throw new RangeError("targetStart out of bounds");
}
if (start < 0 || start >= this.length) throw new RangeError("sourceStart out of bounds");
if (end < 0) throw new RangeError("sourceEnd out of bounds");
if (end > this.length) end = this.length;
if (target.length - targetStart < end - start) {
end = target.length - targetStart + start;
}
var len = end - start;
var i;
if (this === target && start < targetStart && targetStart < end) {
for (i = len - 1; i >= 0; i--) {
target[i + targetStart] = this[i + start];
}
} else if (len < 1e3 || !Buffer.TYPED_ARRAY_SUPPORT) {
for (i = 0; i < len; i++) {
target[i + targetStart] = this[i + start];
}
} else {
target._set(this.subarray(start, start + len), targetStart);
}
return len;
};
Buffer.prototype.fill = function fill(value, start, end) {
if (!value) value = 0;
if (!start) start = 0;
if (!end) end = this.length;
if (end < start) throw new RangeError("end < start");
if (end === start) return;
if (this.length === 0) return;
if (start < 0 || start >= this.length) throw new RangeError("start out of bounds");
if (end < 0 || end > this.length) throw new RangeError("end out of bounds");
var i;
if (typeof value === "number") {
for (i = start; i < end; i++) {
this[i] = value;
}
} else {
var bytes = utf8ToBytes(value.toString());
var len = bytes.length;
for (i = start; i < end; i++) {
this[i] = bytes[i % len];
}
}
return this;
};
Buffer.prototype.toArrayBuffer = function toArrayBuffer() {
if (typeof Uint8Array !== "undefined") {
if (Buffer.TYPED_ARRAY_SUPPORT) {
return new Buffer(this).buffer;
} else {
var buf = new Uint8Array(this.length);
for (var i = 0, len = buf.length; i < len; i += 1) {
buf[i] = this[i];
}
return buf.buffer;
}
} else {
throw new TypeError("Buffer.toArrayBuffer not supported in this browser");
}
};
var BP = Buffer.prototype;
Buffer._augment = function _augment(arr) {
arr.constructor = Buffer;
arr._isBuffer = true;
arr._set = arr.set;
arr.get = BP.get;
arr.set = BP.set;
arr.write = BP.write;
arr.toString = BP.toString;
arr.toLocaleString = BP.toString;
arr.toJSON = BP.toJSON;
arr.equals = BP.equals;
arr.compare = BP.compare;
arr.indexOf = BP.indexOf;
arr.copy = BP.copy;
arr.slice = BP.slice;
arr.readUIntLE = BP.readUIntLE;
arr.readUIntBE = BP.readUIntBE;
arr.readUInt8 = BP.readUInt8;
arr.readUInt16LE = BP.readUInt16LE;
arr.readUInt16BE = BP.readUInt16BE;
arr.readUInt32LE = BP.readUInt32LE;
arr.readUInt32BE = BP.readUInt32BE;
arr.readIntLE = BP.readIntLE;
arr.readIntBE = BP.readIntBE;
arr.readInt8 = BP.readInt8;
arr.readInt16LE = BP.readInt16LE;
arr.readInt16BE = BP.readInt16BE;
arr.readInt32LE = BP.readInt32LE;
arr.readInt32BE = BP.readInt32BE;
arr.readFloatLE = BP.readFloatLE;
arr.readFloatBE = BP.readFloatBE;
arr.readDoubleLE = BP.readDoubleLE;
arr.readDoubleBE = BP.readDoubleBE;
arr.writeUInt8 = BP.writeUInt8;
arr.writeUIntLE = BP.writeUIntLE;
arr.writeUIntBE = BP.writeUIntBE;
arr.writeUInt16LE = BP.writeUInt16LE;
arr.writeUInt16BE = BP.writeUInt16BE;
arr.writeUInt32LE = BP.writeUInt32LE;
arr.writeUInt32BE = BP.writeUInt32BE;
arr.writeIntLE = BP.writeIntLE;
arr.writeIntBE = BP.writeIntBE;
arr.writeInt8 = BP.writeInt8;
arr.writeInt16LE = BP.writeInt16LE;
arr.writeInt16BE = BP.writeInt16BE;
arr.writeInt32LE = BP.writeInt32LE;
arr.writeInt32BE = BP.writeInt32BE;
arr.writeFloatLE = BP.writeFloatLE;
arr.writeFloatBE = BP.writeFloatBE;
arr.writeDoubleLE = BP.writeDoubleLE;
arr.writeDoubleBE = BP.writeDoubleBE;
arr.fill = BP.fill;
arr.inspect = BP.inspect;
arr.toArrayBuffer = BP.toArrayBuffer;
return arr;
};
var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
function base64clean(str) {
str = stringtrim(str).replace(INVALID_BASE64_RE, "");
if (str.length < 2) return "";
while (str.length % 4 !== 0) {
str = str + "=";
}
return str;
}
function stringtrim(str) {
if (str.trim) return str.trim();
return str.replace(/^\s+|\s+$/g, "");
}
function toHex(n) {
if (n < 16) return "0" + n.toString(16);
return n.toString(16);
}
function utf8ToBytes(string, units) {
units = units || Infinity;
var codePoint;
var length = string.length;
var leadSurrogate = null;
var bytes = [];
for (var i = 0; i < length; i++) {
codePoint = string.charCodeAt(i);
if (codePoint > 55295 && codePoint < 57344) {
if (!leadSurrogate) {
if (codePoint > 56319) {
if ((units -= 3) > -1) bytes.push(239, 191, 189);
continue;
} else if (i + 1 === length) {
if ((units -= 3) > -1) bytes.push(239, 191, 189);
continue;
}
leadSurrogate = codePoint;
continue;
}
if (codePoint < 56320) {
if ((units -= 3) > -1) bytes.push(239, 191, 189);
leadSurrogate = codePoint;
continue;
}
codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
} else if (leadSurrogate) {
if ((units -= 3) > -1) bytes.push(239, 191, 189);
}
leadSurrogate = null;
if (codePoint < 128) {
if ((units -= 1) < 0) break;
bytes.push(codePoint);
} else if (codePoint < 2048) {
if ((units -= 2) < 0) break;
bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
} else if (codePoint < 65536) {
if ((units -= 3) < 0) break;
bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
} else if (codePoint < 1114112) {
if ((units -= 4) < 0) break;
bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
} else {
throw new Error("Invalid code point");
}
}
return bytes;
}
function asciiToBytes(str) {
var byteArray = [];
for (var i = 0; i < str.length; i++) {
byteArray.push(str.charCodeAt(i) & 255);
}
return byteArray;
}
function utf16leToBytes(str, units) {
var c, hi, lo;
var byteArray = [];
for (var i = 0; i < str.length; i++) {
if ((units -= 2) < 0) break;
c = str.charCodeAt(i);
hi = c >> 8;
lo = c % 256;
byteArray.push(lo);
byteArray.push(hi);
}
return byteArray;
}
function base64ToBytes(str) {
return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
for (var i = 0; i < length; i++) {
if (i + offset >= dst.length || i >= src.length) break;
dst[i + offset] = src[i];
}
return i;
}
}).call(exports, __webpack_require__(7).Buffer, function() {
return this;
}());
}, function(module, exports, __webpack_require__) {
var lookup = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
(function(exports) {
"use strict";
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var PLUS = "+".charCodeAt(0);
var SLASH = "/".charCodeAt(0);
var NUMBER = "0".charCodeAt(0);
var LOWER = "a".charCodeAt(0);
var UPPER = "A".charCodeAt(0);
var PLUS_URL_SAFE = "-".charCodeAt(0);
var SLASH_URL_SAFE = "_".charCodeAt(0);
function decode(elt) {
var code = elt.charCodeAt(0);
if (code === PLUS || code === PLUS_URL_SAFE) return 62;
if (code === SLASH || code === SLASH_URL_SAFE) return 63;
if (code < NUMBER) return -1;
if (code < NUMBER + 10) return code - NUMBER + 26 + 26;
if (code < UPPER + 26) return code - UPPER;
if (code < LOWER + 26) return code - LOWER + 26;
}
function b64ToByteArray(b64) {
var i, j, l, tmp, placeHolders, arr;
if (b64.length % 4 > 0) {
throw new Error("Invalid string. Length must be a multiple of 4");
}
var len = b64.length;
placeHolders = "=" === b64.charAt(len - 2) ? 2 : "=" === b64.charAt(len - 1) ? 1 : 0;
arr = new Arr(b64.length * 3 / 4 - placeHolders);
l = placeHolders > 0 ? b64.length - 4 : b64.length;
var L = 0;
function push(v) {
arr[L++] = v;
}
for (i = 0, j = 0; i < l; i += 4, j += 3) {
tmp = decode(b64.charAt(i)) << 18 | decode(b64.charAt(i + 1)) << 12 | decode(b64.charAt(i + 2)) << 6 | decode(b64.charAt(i + 3));
push((tmp & 16711680) >> 16);
push((tmp & 65280) >> 8);
push(tmp & 255);
}
if (placeHolders === 2) {
tmp = decode(b64.charAt(i)) << 2 | decode(b64.charAt(i + 1)) >> 4;
push(tmp & 255);
} else if (placeHolders === 1) {
tmp = decode(b64.charAt(i)) << 10 | decode(b64.charAt(i + 1)) << 4 | decode(b64.charAt(i + 2)) >> 2;
push(tmp >> 8 & 255);
push(tmp & 255);
}
return arr;
}
function uint8ToBase64(uint8) {
var i, extraBytes = uint8.length % 3, output = "", temp, length;
function encode(num) {
return lookup.charAt(num);
}
function tripletToBase64(num) {
return encode(num >> 18 & 63) + encode(num >> 12 & 63) + encode(num >> 6 & 63) + encode(num & 63);
}
for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
output += tripletToBase64(temp);
}
switch (extraBytes) {
case 1:
temp = uint8[uint8.length - 1];
output += encode(temp >> 2);
output += encode(temp << 4 & 63);
output += "==";
break;

case 2:
temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];
output += encode(temp >> 10);
output += encode(temp >> 4 & 63);
output += encode(temp << 2 & 63);
output += "=";
break;
}
return output;
}
exports.toByteArray = b64ToByteArray;
exports.fromByteArray = uint8ToBase64;
})(false ? this.base64js = {} : exports);
}, function(module, exports) {
exports.read = function(buffer, offset, isLE, mLen, nBytes) {
var e, m;
var eLen = nBytes * 8 - mLen - 1;
var eMax = (1 << eLen) - 1;
var eBias = eMax >> 1;
var nBits = -7;
var i = isLE ? nBytes - 1 : 0;
var d = isLE ? -1 : 1;
var s = buffer[offset + i];
i += d;
e = s & (1 << -nBits) - 1;
s >>= -nBits;
nBits += eLen;
for (;nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
m = e & (1 << -nBits) - 1;
e >>= -nBits;
nBits += mLen;
for (;nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
if (e === 0) {
e = 1 - eBias;
} else if (e === eMax) {
return m ? NaN : (s ? -1 : 1) * Infinity;
} else {
m = m + Math.pow(2, mLen);
e = e - eBias;
}
return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
var e, m, c;
var eLen = nBytes * 8 - mLen - 1;
var eMax = (1 << eLen) - 1;
var eBias = eMax >> 1;
var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
var i = isLE ? 0 : nBytes - 1;
var d = isLE ? 1 : -1;
var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
value = Math.abs(value);
if (isNaN(value) || value === Infinity) {
m = isNaN(value) ? 1 : 0;
e = eMax;
} else {
e = Math.floor(Math.log(value) / Math.LN2);
if (value * (c = Math.pow(2, -e)) < 1) {
e--;
c *= 2;
}
if (e + eBias >= 1) {
value += rt / c;
} else {
value += rt * Math.pow(2, 1 - eBias);
}
if (value * c >= 2) {
e++;
c /= 2;
}
if (e + eBias >= eMax) {
m = 0;
e = eMax;
} else if (e + eBias >= 1) {
m = (value * c - 1) * Math.pow(2, mLen);
e = e + eBias;
} else {
m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
e = 0;
}
}
for (;mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {}
e = e << mLen | m;
eLen += mLen;
for (;eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {}
buffer[offset + i - d] |= s * 128;
};
}, function(module, exports) {
var toString = {}.toString;
module.exports = Array.isArray || function(arr) {
return toString.call(arr) == "[object Array]";
};
}, function(module, exports, __webpack_require__) {
(function(global, Buffer) {
(function() {
var g = ("undefined" === typeof window ? global : window) || {};
_crypto = g.crypto || g.msCrypto || __webpack_require__(12);
module.exports = function(size) {
if (_crypto.getRandomValues) {
var bytes = new Buffer(size);
_crypto.getRandomValues(bytes);
return bytes;
} else if (_crypto.randomBytes) {
return _crypto.randomBytes(size);
} else throw new Error("secure random number generation not supported by this browser\n" + "use chrome, FireFox or Internet Explorer 11");
};
})();
}).call(exports, function() {
return this;
}(), __webpack_require__(7).Buffer);
}, function(module, exports) {}, function(module, exports, __webpack_require__) {
(function(Buffer) {
var createHash = __webpack_require__(14);
var md5 = toConstructor(__webpack_require__(22));
var rmd160 = toConstructor(__webpack_require__(24));
function toConstructor(fn) {
return function() {
var buffers = [];
var m = {
update: function(data, enc) {
if (!Buffer.isBuffer(data)) data = new Buffer(data, enc);
buffers.push(data);
return this;
},
digest: function(enc) {
var buf = Buffer.concat(buffers);
var r = fn(buf);
buffers = null;
return enc ? r.toString(enc) : r;
}
};
return m;
};
}
module.exports = function(alg) {
if ("md5" === alg) return new md5();
if ("rmd160" === alg) return new rmd160();
return createHash(alg);
};
}).call(exports, __webpack_require__(7).Buffer);
}, function(module, exports, __webpack_require__) {
var exports = module.exports = function(alg) {
var Alg = exports[alg];
if (!Alg) throw new Error(alg + " is not supported (we accept pull requests)");
return new Alg();
};
var Buffer = __webpack_require__(7).Buffer;
var Hash = __webpack_require__(15)(Buffer);
exports.sha1 = __webpack_require__(16)(Buffer, Hash);
exports.sha256 = __webpack_require__(20)(Buffer, Hash);
exports.sha512 = __webpack_require__(21)(Buffer, Hash);
}, function(module, exports) {
module.exports = function(Buffer) {
function Hash(blockSize, finalSize) {
this._block = new Buffer(blockSize);
this._finalSize = finalSize;
this._blockSize = blockSize;
this._len = 0;
this._s = 0;
}
Hash.prototype.init = function() {
this._s = 0;
this._len = 0;
};
Hash.prototype.update = function(data, enc) {
if ("string" === typeof data) {
enc = enc || "utf8";
data = new Buffer(data, enc);
}
var l = this._len += data.length;
var s = this._s = this._s || 0;
var f = 0;
var buffer = this._block;
while (s < l) {
var t = Math.min(data.length, f + this._blockSize - s % this._blockSize);
var ch = t - f;
for (var i = 0; i < ch; i++) {
buffer[s % this._blockSize + i] = data[i + f];
}
s += ch;
f += ch;
if (s % this._blockSize === 0) {
this._update(buffer);
}
}
this._s = s;
return this;
};
Hash.prototype.digest = function(enc) {
var l = this._len * 8;
this._block[this._len % this._blockSize] = 128;
this._block.fill(0, this._len % this._blockSize + 1);
if (l % (this._blockSize * 8) >= this._finalSize * 8) {
this._update(this._block);
this._block.fill(0);
}
this._block.writeInt32BE(l, this._blockSize - 4);
var hash = this._update(this._block) || this._hash();
return enc ? hash.toString(enc) : hash;
};
Hash.prototype._update = function() {
throw new Error("_update must be implemented by subclass");
};
return Hash;
};
}, function(module, exports, __webpack_require__) {
var inherits = __webpack_require__(17).inherits;
module.exports = function(Buffer, Hash) {
var A = 0 | 0;
var B = 4 | 0;
var C = 8 | 0;
var D = 12 | 0;
var E = 16 | 0;
var W = new (typeof Int32Array === "undefined" ? Array : Int32Array)(80);
var POOL = [];
function Sha1() {
if (POOL.length) return POOL.pop().init();
if (!(this instanceof Sha1)) return new Sha1();
this._w = W;
Hash.call(this, 16 * 4, 14 * 4);
this._h = null;
this.init();
}
inherits(Sha1, Hash);
Sha1.prototype.init = function() {
this._a = 1732584193;
this._b = 4023233417;
this._c = 2562383102;
this._d = 271733878;
this._e = 3285377520;
Hash.prototype.init.call(this);
return this;
};
Sha1.prototype._POOL = POOL;
Sha1.prototype._update = function(X) {
var a, b, c, d, e, _a, _b, _c, _d, _e;
a = _a = this._a;
b = _b = this._b;
c = _c = this._c;
d = _d = this._d;
e = _e = this._e;
var w = this._w;
for (var j = 0; j < 80; j++) {
var W = w[j] = j < 16 ? X.readInt32BE(j * 4) : rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
var t = add(add(rol(a, 5), sha1_ft(j, b, c, d)), add(add(e, W), sha1_kt(j)));
e = d;
d = c;
c = rol(b, 30);
b = a;
a = t;
}
this._a = add(a, _a);
this._b = add(b, _b);
this._c = add(c, _c);
this._d = add(d, _d);
this._e = add(e, _e);
};
Sha1.prototype._hash = function() {
if (POOL.length < 100) POOL.push(this);
var H = new Buffer(20);
H.writeInt32BE(this._a | 0, A);
H.writeInt32BE(this._b | 0, B);
H.writeInt32BE(this._c | 0, C);
H.writeInt32BE(this._d | 0, D);
H.writeInt32BE(this._e | 0, E);
return H;
};
function sha1_ft(t, b, c, d) {
if (t < 20) return b & c | ~b & d;
if (t < 40) return b ^ c ^ d;
if (t < 60) return b & c | b & d | c & d;
return b ^ c ^ d;
}
function sha1_kt(t) {
return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;
}
function add(x, y) {
return x + y | 0;
}
function rol(num, cnt) {
return num << cnt | num >>> 32 - cnt;
}
return Sha1;
};
}, function(module, exports, __webpack_require__) {
(function(global) {
var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
if (!isString(f)) {
var objects = [];
for (var i = 0; i < arguments.length; i++) {
objects.push(inspect(arguments[i]));
}
return objects.join(" ");
}
var i = 1;
var args = arguments;
var len = args.length;
var str = String(f).replace(formatRegExp, function(x) {
if (x === "%%") return "%";
if (i >= len) return x;
switch (x) {
case "%s":
return String(args[i++]);

case "%d":
return Number(args[i++]);

case "%j":
try {
return JSON.stringify(args[i++]);
} catch (_) {
return "[Circular]";
}

default:
return x;
}
});
for (var x = args[i]; i < len; x = args[++i]) {
if (isNull(x) || !isObject(x)) {
str += " " + x;
} else {
str += " " + inspect(x);
}
}
return str;
};
exports.deprecate = function(fn, msg) {
if (isUndefined(global.process)) {
return function() {
return exports.deprecate(fn, msg).apply(this, arguments);
};
}
if (process.noDeprecation === true) {
return fn;
}
var warned = false;
function deprecated() {
if (!warned) {
if (process.throwDeprecation) {
throw new Error(msg);
} else if (process.traceDeprecation) {
console.trace(msg);
} else {
console.error(msg);
}
warned = true;
}
return fn.apply(this, arguments);
}
return deprecated;
};
var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || "";
set = set.toUpperCase();
if (!debugs[set]) {
if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
var pid = process.pid;
debugs[set] = function() {
var msg = exports.format.apply(exports, arguments);
console.error("%s %d: %s", set, pid, msg);
};
} else {
debugs[set] = function() {};
}
}
return debugs[set];
};
function inspect(obj, opts) {
var ctx = {
seen: [],
stylize: stylizeNoColor
};
if (arguments.length >= 3) ctx.depth = arguments[2];
if (arguments.length >= 4) ctx.colors = arguments[3];
if (isBoolean(opts)) {
ctx.showHidden = opts;
} else if (opts) {
exports._extend(ctx, opts);
}
if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
if (isUndefined(ctx.depth)) ctx.depth = 2;
if (isUndefined(ctx.colors)) ctx.colors = false;
if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
if (ctx.colors) ctx.stylize = stylizeWithColor;
return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;
inspect.colors = {
bold: [ 1, 22 ],
italic: [ 3, 23 ],
underline: [ 4, 24 ],
inverse: [ 7, 27 ],
white: [ 37, 39 ],
grey: [ 90, 39 ],
black: [ 30, 39 ],
blue: [ 34, 39 ],
cyan: [ 36, 39 ],
green: [ 32, 39 ],
magenta: [ 35, 39 ],
red: [ 31, 39 ],
yellow: [ 33, 39 ]
};
inspect.styles = {
special: "cyan",
number: "yellow",
"boolean": "yellow",
undefined: "grey",
"null": "bold",
string: "green",
date: "magenta",
regexp: "red"
};
function stylizeWithColor(str, styleType) {
var style = inspect.styles[styleType];
if (style) {
return "[" + inspect.colors[style][0] + "m" + str + "[" + inspect.colors[style][1] + "m";
} else {
return str;
}
}
function stylizeNoColor(str, styleType) {
return str;
}
function arrayToHash(array) {
var hash = {};
array.forEach(function(val, idx) {
hash[val] = true;
});
return hash;
}
function formatValue(ctx, value, recurseTimes) {
if (ctx.customInspect && value && isFunction(value.inspect) && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
var ret = value.inspect(recurseTimes, ctx);
if (!isString(ret)) {
ret = formatValue(ctx, ret, recurseTimes);
}
return ret;
}
var primitive = formatPrimitive(ctx, value);
if (primitive) {
return primitive;
}
var keys = Object.keys(value);
var visibleKeys = arrayToHash(keys);
if (ctx.showHidden) {
keys = Object.getOwnPropertyNames(value);
}
if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
return formatError(value);
}
if (keys.length === 0) {
if (isFunction(value)) {
var name = value.name ? ": " + value.name : "";
return ctx.stylize("[Function" + name + "]", "special");
}
if (isRegExp(value)) {
return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
}
if (isDate(value)) {
return ctx.stylize(Date.prototype.toString.call(value), "date");
}
if (isError(value)) {
return formatError(value);
}
}
var base = "", array = false, braces = [ "{", "}" ];
if (isArray(value)) {
array = true;
braces = [ "[", "]" ];
}
if (isFunction(value)) {
var n = value.name ? ": " + value.name : "";
base = " [Function" + n + "]";
}
if (isRegExp(value)) {
base = " " + RegExp.prototype.toString.call(value);
}
if (isDate(value)) {
base = " " + Date.prototype.toUTCString.call(value);
}
if (isError(value)) {
base = " " + formatError(value);
}
if (keys.length === 0 && (!array || value.length == 0)) {
return braces[0] + base + braces[1];
}
if (recurseTimes < 0) {
if (isRegExp(value)) {
return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
} else {
return ctx.stylize("[Object]", "special");
}
}
ctx.seen.push(value);
var output;
if (array) {
output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
} else {
output = keys.map(function(key) {
return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
});
}
ctx.seen.pop();
return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
if (isUndefined(value)) return ctx.stylize("undefined", "undefined");
if (isString(value)) {
var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
return ctx.stylize(simple, "string");
}
if (isNumber(value)) return ctx.stylize("" + value, "number");
if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
if (isNull(value)) return ctx.stylize("null", "null");
}
function formatError(value) {
return "[" + Error.prototype.toString.call(value) + "]";
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
var output = [];
for (var i = 0, l = value.length; i < l; ++i) {
if (hasOwnProperty(value, String(i))) {
output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
} else {
output.push("");
}
}
keys.forEach(function(key) {
if (!key.match(/^\d+$/)) {
output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
}
});
return output;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
var name, str, desc;
desc = Object.getOwnPropertyDescriptor(value, key) || {
value: value[key]
};
if (desc.get) {
if (desc.set) {
str = ctx.stylize("[Getter/Setter]", "special");
} else {
str = ctx.stylize("[Getter]", "special");
}
} else {
if (desc.set) {
str = ctx.stylize("[Setter]", "special");
}
}
if (!hasOwnProperty(visibleKeys, key)) {
name = "[" + key + "]";
}
if (!str) {
if (ctx.seen.indexOf(desc.value) < 0) {
if (isNull(recurseTimes)) {
str = formatValue(ctx, desc.value, null);
} else {
str = formatValue(ctx, desc.value, recurseTimes - 1);
}
if (str.indexOf("\n") > -1) {
if (array) {
str = str.split("\n").map(function(line) {
return "  " + line;
}).join("\n").substr(2);
} else {
str = "\n" + str.split("\n").map(function(line) {
return "   " + line;
}).join("\n");
}
}
} else {
str = ctx.stylize("[Circular]", "special");
}
}
if (isUndefined(name)) {
if (array && key.match(/^\d+$/)) {
return str;
}
name = JSON.stringify("" + key);
if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
name = name.substr(1, name.length - 2);
name = ctx.stylize(name, "name");
} else {
name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
name = ctx.stylize(name, "string");
}
}
return name + ": " + str;
}
function reduceToSingleString(output, base, braces) {
var numLinesEst = 0;
var length = output.reduce(function(prev, cur) {
numLinesEst++;
if (cur.indexOf("\n") >= 0) numLinesEst++;
return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
}, 0);
if (length > 60) {
return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
}
return braces[0] + base + " " + output.join(", ") + " " + braces[1];
}
function isArray(ar) {
return Array.isArray(ar);
}
exports.isArray = isArray;
function isBoolean(arg) {
return typeof arg === "boolean";
}
exports.isBoolean = isBoolean;
function isNull(arg) {
return arg === null;
}
exports.isNull = isNull;
function isNullOrUndefined(arg) {
return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function isNumber(arg) {
return typeof arg === "number";
}
exports.isNumber = isNumber;
function isString(arg) {
return typeof arg === "string";
}
exports.isString = isString;
function isSymbol(arg) {
return typeof arg === "symbol";
}
exports.isSymbol = isSymbol;
function isUndefined(arg) {
return arg === void 0;
}
exports.isUndefined = isUndefined;
function isRegExp(re) {
return isObject(re) && objectToString(re) === "[object RegExp]";
}
exports.isRegExp = isRegExp;
function isObject(arg) {
return typeof arg === "object" && arg !== null;
}
exports.isObject = isObject;
function isDate(d) {
return isObject(d) && objectToString(d) === "[object Date]";
}
exports.isDate = isDate;
function isError(e) {
return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
}
exports.isError = isError;
function isFunction(arg) {
return typeof arg === "function";
}
exports.isFunction = isFunction;
function isPrimitive(arg) {
return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || typeof arg === "undefined";
}
exports.isPrimitive = isPrimitive;
exports.isBuffer = __webpack_require__(18);
function objectToString(o) {
return Object.prototype.toString.call(o);
}
function pad(n) {
return n < 10 ? "0" + n.toString(10) : n.toString(10);
}
var months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
function timestamp() {
var d = new Date();
var time = [ pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds()) ].join(":");
return [ d.getDate(), months[d.getMonth()], time ].join(" ");
}
exports.log = function() {
console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
};
exports.inherits = __webpack_require__(19);
exports._extend = function(origin, add) {
if (!add || !isObject(add)) return origin;
var keys = Object.keys(add);
var i = keys.length;
while (i--) {
origin[keys[i]] = add[keys[i]];
}
return origin;
};
function hasOwnProperty(obj, prop) {
return Object.prototype.hasOwnProperty.call(obj, prop);
}
}).call(exports, function() {
return this;
}());
}, function(module, exports) {
module.exports = function isBuffer(arg) {
return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
};
}, function(module, exports) {
if (typeof Object.create === "function") {
module.exports = function inherits(ctor, superCtor) {
ctor.super_ = superCtor;
ctor.prototype = Object.create(superCtor.prototype, {
constructor: {
value: ctor,
enumerable: false,
writable: true,
configurable: true
}
});
};
} else {
module.exports = function inherits(ctor, superCtor) {
ctor.super_ = superCtor;
var TempCtor = function() {};
TempCtor.prototype = superCtor.prototype;
ctor.prototype = new TempCtor();
ctor.prototype.constructor = ctor;
};
}
}, function(module, exports, __webpack_require__) {
var inherits = __webpack_require__(17).inherits;
module.exports = function(Buffer, Hash) {
var K = [ 1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298 ];
var W = new Array(64);
function Sha256() {
this.init();
this._w = W;
Hash.call(this, 16 * 4, 14 * 4);
}
inherits(Sha256, Hash);
Sha256.prototype.init = function() {
this._a = 1779033703 | 0;
this._b = 3144134277 | 0;
this._c = 1013904242 | 0;
this._d = 2773480762 | 0;
this._e = 1359893119 | 0;
this._f = 2600822924 | 0;
this._g = 528734635 | 0;
this._h = 1541459225 | 0;
this._len = this._s = 0;
return this;
};
function S(X, n) {
return X >>> n | X << 32 - n;
}
function R(X, n) {
return X >>> n;
}
function Ch(x, y, z) {
return x & y ^ ~x & z;
}
function Maj(x, y, z) {
return x & y ^ x & z ^ y & z;
}
function Sigma0256(x) {
return S(x, 2) ^ S(x, 13) ^ S(x, 22);
}
function Sigma1256(x) {
return S(x, 6) ^ S(x, 11) ^ S(x, 25);
}
function Gamma0256(x) {
return S(x, 7) ^ S(x, 18) ^ R(x, 3);
}
function Gamma1256(x) {
return S(x, 17) ^ S(x, 19) ^ R(x, 10);
}
Sha256.prototype._update = function(M) {
var W = this._w;
var a, b, c, d, e, f, g, h;
var T1, T2;
a = this._a | 0;
b = this._b | 0;
c = this._c | 0;
d = this._d | 0;
e = this._e | 0;
f = this._f | 0;
g = this._g | 0;
h = this._h | 0;
for (var j = 0; j < 64; j++) {
var w = W[j] = j < 16 ? M.readInt32BE(j * 4) : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16];
T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w;
T2 = Sigma0256(a) + Maj(a, b, c);
h = g;
g = f;
f = e;
e = d + T1;
d = c;
c = b;
b = a;
a = T1 + T2;
}
this._a = a + this._a | 0;
this._b = b + this._b | 0;
this._c = c + this._c | 0;
this._d = d + this._d | 0;
this._e = e + this._e | 0;
this._f = f + this._f | 0;
this._g = g + this._g | 0;
this._h = h + this._h | 0;
};
Sha256.prototype._hash = function() {
var H = new Buffer(32);
H.writeInt32BE(this._a, 0);
H.writeInt32BE(this._b, 4);
H.writeInt32BE(this._c, 8);
H.writeInt32BE(this._d, 12);
H.writeInt32BE(this._e, 16);
H.writeInt32BE(this._f, 20);
H.writeInt32BE(this._g, 24);
H.writeInt32BE(this._h, 28);
return H;
};
return Sha256;
};
}, function(module, exports, __webpack_require__) {
var inherits = __webpack_require__(17).inherits;
module.exports = function(Buffer, Hash) {
var K = [ 1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591 ];
var W = new Array(160);
function Sha512() {
this.init();
this._w = W;
Hash.call(this, 128, 112);
}
inherits(Sha512, Hash);
Sha512.prototype.init = function() {
this._a = 1779033703 | 0;
this._b = 3144134277 | 0;
this._c = 1013904242 | 0;
this._d = 2773480762 | 0;
this._e = 1359893119 | 0;
this._f = 2600822924 | 0;
this._g = 528734635 | 0;
this._h = 1541459225 | 0;
this._al = 4089235720 | 0;
this._bl = 2227873595 | 0;
this._cl = 4271175723 | 0;
this._dl = 1595750129 | 0;
this._el = 2917565137 | 0;
this._fl = 725511199 | 0;
this._gl = 4215389547 | 0;
this._hl = 327033209 | 0;
this._len = this._s = 0;
return this;
};
function S(X, Xl, n) {
return X >>> n | Xl << 32 - n;
}
function Ch(x, y, z) {
return x & y ^ ~x & z;
}
function Maj(x, y, z) {
return x & y ^ x & z ^ y & z;
}
Sha512.prototype._update = function(M) {
var W = this._w;
var a, b, c, d, e, f, g, h;
var al, bl, cl, dl, el, fl, gl, hl;
a = this._a | 0;
b = this._b | 0;
c = this._c | 0;
d = this._d | 0;
e = this._e | 0;
f = this._f | 0;
g = this._g | 0;
h = this._h | 0;
al = this._al | 0;
bl = this._bl | 0;
cl = this._cl | 0;
dl = this._dl | 0;
el = this._el | 0;
fl = this._fl | 0;
gl = this._gl | 0;
hl = this._hl | 0;
for (var i = 0; i < 80; i++) {
var j = i * 2;
var Wi, Wil;
if (i < 16) {
Wi = W[j] = M.readInt32BE(j * 4);
Wil = W[j + 1] = M.readInt32BE(j * 4 + 4);
} else {
var x = W[j - 15 * 2];
var xl = W[j - 15 * 2 + 1];
var gamma0 = S(x, xl, 1) ^ S(x, xl, 8) ^ x >>> 7;
var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7);
x = W[j - 2 * 2];
xl = W[j - 2 * 2 + 1];
var gamma1 = S(x, xl, 19) ^ S(xl, x, 29) ^ x >>> 6;
var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6);
var Wi7 = W[j - 7 * 2];
var Wi7l = W[j - 7 * 2 + 1];
var Wi16 = W[j - 16 * 2];
var Wi16l = W[j - 16 * 2 + 1];
Wil = gamma0l + Wi7l;
Wi = gamma0 + Wi7 + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
Wil = Wil + gamma1l;
Wi = Wi + gamma1 + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
Wil = Wil + Wi16l;
Wi = Wi + Wi16 + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
W[j] = Wi;
W[j + 1] = Wil;
}
var maj = Maj(a, b, c);
var majl = Maj(al, bl, cl);
var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7);
var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7);
var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9);
var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9);
var Ki = K[j];
var Kil = K[j + 1];
var ch = Ch(e, f, g);
var chl = Ch(el, fl, gl);
var t1l = hl + sigma1l;
var t1 = h + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
t1l = t1l + chl;
t1 = t1 + ch + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
t1l = t1l + Kil;
t1 = t1 + Ki + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
t1l = t1l + Wil;
t1 = t1 + Wi + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
var t2l = sigma0l + majl;
var t2 = sigma0h + maj + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
h = g;
hl = gl;
g = f;
gl = fl;
f = e;
fl = el;
el = dl + t1l | 0;
e = d + t1 + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
d = c;
dl = cl;
c = b;
cl = bl;
b = a;
bl = al;
al = t1l + t2l | 0;
a = t1 + t2 + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
}
this._al = this._al + al | 0;
this._bl = this._bl + bl | 0;
this._cl = this._cl + cl | 0;
this._dl = this._dl + dl | 0;
this._el = this._el + el | 0;
this._fl = this._fl + fl | 0;
this._gl = this._gl + gl | 0;
this._hl = this._hl + hl | 0;
this._a = this._a + a + (this._al >>> 0 < al >>> 0 ? 1 : 0) | 0;
this._b = this._b + b + (this._bl >>> 0 < bl >>> 0 ? 1 : 0) | 0;
this._c = this._c + c + (this._cl >>> 0 < cl >>> 0 ? 1 : 0) | 0;
this._d = this._d + d + (this._dl >>> 0 < dl >>> 0 ? 1 : 0) | 0;
this._e = this._e + e + (this._el >>> 0 < el >>> 0 ? 1 : 0) | 0;
this._f = this._f + f + (this._fl >>> 0 < fl >>> 0 ? 1 : 0) | 0;
this._g = this._g + g + (this._gl >>> 0 < gl >>> 0 ? 1 : 0) | 0;
this._h = this._h + h + (this._hl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
};
Sha512.prototype._hash = function() {
var H = new Buffer(64);
function writeInt64BE(h, l, offset) {
H.writeInt32BE(h, offset);
H.writeInt32BE(l, offset + 4);
}
writeInt64BE(this._a, this._al, 0);
writeInt64BE(this._b, this._bl, 8);
writeInt64BE(this._c, this._cl, 16);
writeInt64BE(this._d, this._dl, 24);
writeInt64BE(this._e, this._el, 32);
writeInt64BE(this._f, this._fl, 40);
writeInt64BE(this._g, this._gl, 48);
writeInt64BE(this._h, this._hl, 56);
return H;
};
return Sha512;
};
}, function(module, exports, __webpack_require__) {
var helpers = __webpack_require__(23);
function core_md5(x, len) {
x[len >> 5] |= 128 << len % 32;
x[(len + 64 >>> 9 << 4) + 14] = len;
var a = 1732584193;
var b = -271733879;
var c = -1732584194;
var d = 271733878;
for (var i = 0; i < x.length; i += 16) {
var olda = a;
var oldb = b;
var oldc = c;
var oldd = d;
a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
a = safe_add(a, olda);
b = safe_add(b, oldb);
c = safe_add(c, oldc);
d = safe_add(d, oldd);
}
return Array(a, b, c, d);
}
function md5_cmn(q, a, b, x, s, t) {
return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
}
function md5_ff(a, b, c, d, x, s, t) {
return md5_cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t) {
return md5_cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t) {
return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t) {
return md5_cmn(c ^ (b | ~d), a, b, x, s, t);
}
function safe_add(x, y) {
var lsw = (x & 65535) + (y & 65535);
var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
return msw << 16 | lsw & 65535;
}
function bit_rol(num, cnt) {
return num << cnt | num >>> 32 - cnt;
}
module.exports = function md5(buf) {
return helpers.hash(buf, core_md5, 16);
};
}, function(module, exports, __webpack_require__) {
(function(Buffer) {
var intSize = 4;
var zeroBuffer = new Buffer(intSize);
zeroBuffer.fill(0);
var chrsz = 8;
function toArray(buf, bigEndian) {
if (buf.length % intSize !== 0) {
var len = buf.length + (intSize - buf.length % intSize);
buf = Buffer.concat([ buf, zeroBuffer ], len);
}
var arr = [];
var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
for (var i = 0; i < buf.length; i += intSize) {
arr.push(fn.call(buf, i));
}
return arr;
}
function toBuffer(arr, size, bigEndian) {
var buf = new Buffer(size);
var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
for (var i = 0; i < arr.length; i++) {
fn.call(buf, arr[i], i * 4, true);
}
return buf;
}
function hash(buf, fn, hashSize, bigEndian) {
if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
return toBuffer(arr, hashSize, bigEndian);
}
module.exports = {
hash: hash
};
}).call(exports, __webpack_require__(7).Buffer);
}, function(module, exports, __webpack_require__) {
(function(Buffer) {
module.exports = ripemd160;
var zl = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13 ];
var zr = [ 5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11 ];
var sl = [ 11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6 ];
var sr = [ 8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11 ];
var hl = [ 0, 1518500249, 1859775393, 2400959708, 2840853838 ];
var hr = [ 1352829926, 1548603684, 1836072691, 2053994217, 0 ];
var bytesToWords = function(bytes) {
var words = [];
for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
words[b >>> 5] |= bytes[i] << 24 - b % 32;
}
return words;
};
var wordsToBytes = function(words) {
var bytes = [];
for (var b = 0; b < words.length * 32; b += 8) {
bytes.push(words[b >>> 5] >>> 24 - b % 32 & 255);
}
return bytes;
};
var processBlock = function(H, M, offset) {
for (var i = 0; i < 16; i++) {
var offset_i = offset + i;
var M_offset_i = M[offset_i];
M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
}
var al, bl, cl, dl, el;
var ar, br, cr, dr, er;
ar = al = H[0];
br = bl = H[1];
cr = cl = H[2];
dr = dl = H[3];
er = el = H[4];
var t;
for (var i = 0; i < 80; i += 1) {
t = al + M[offset + zl[i]] | 0;
if (i < 16) {
t += f1(bl, cl, dl) + hl[0];
} else if (i < 32) {
t += f2(bl, cl, dl) + hl[1];
} else if (i < 48) {
t += f3(bl, cl, dl) + hl[2];
} else if (i < 64) {
t += f4(bl, cl, dl) + hl[3];
} else {
t += f5(bl, cl, dl) + hl[4];
}
t = t | 0;
t = rotl(t, sl[i]);
t = t + el | 0;
al = el;
el = dl;
dl = rotl(cl, 10);
cl = bl;
bl = t;
t = ar + M[offset + zr[i]] | 0;
if (i < 16) {
t += f5(br, cr, dr) + hr[0];
} else if (i < 32) {
t += f4(br, cr, dr) + hr[1];
} else if (i < 48) {
t += f3(br, cr, dr) + hr[2];
} else if (i < 64) {
t += f2(br, cr, dr) + hr[3];
} else {
t += f1(br, cr, dr) + hr[4];
}
t = t | 0;
t = rotl(t, sr[i]);
t = t + er | 0;
ar = er;
er = dr;
dr = rotl(cr, 10);
cr = br;
br = t;
}
t = H[1] + cl + dr | 0;
H[1] = H[2] + dl + er | 0;
H[2] = H[3] + el + ar | 0;
H[3] = H[4] + al + br | 0;
H[4] = H[0] + bl + cr | 0;
H[0] = t;
};
function f1(x, y, z) {
return x ^ y ^ z;
}
function f2(x, y, z) {
return x & y | ~x & z;
}
function f3(x, y, z) {
return (x | ~y) ^ z;
}
function f4(x, y, z) {
return x & z | y & ~z;
}
function f5(x, y, z) {
return x ^ (y | ~z);
}
function rotl(x, n) {
return x << n | x >>> 32 - n;
}
function ripemd160(message) {
var H = [ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ];
if (typeof message == "string") message = new Buffer(message, "utf8");
var m = bytesToWords(message);
var nBitsLeft = message.length * 8;
var nBitsTotal = message.length * 8;
m[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
m[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
for (var i = 0; i < m.length; i += 16) {
processBlock(H, m, i);
}
for (var i = 0; i < 5; i++) {
var H_i = H[i];
H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
}
var digestbytes = wordsToBytes(H);
return new Buffer(digestbytes);
}
}).call(exports, __webpack_require__(7).Buffer);
}, function(module, exports, __webpack_require__) {
(function(Buffer) {
var createHash = __webpack_require__(13);
var zeroBuffer = new Buffer(128);
zeroBuffer.fill(0);
module.exports = Hmac;
function Hmac(alg, key) {
if (!(this instanceof Hmac)) return new Hmac(alg, key);
this._opad = opad;
this._alg = alg;
var blocksize = alg === "sha512" ? 128 : 64;
key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key;
if (key.length > blocksize) {
key = createHash(alg).update(key).digest();
} else if (key.length < blocksize) {
key = Buffer.concat([ key, zeroBuffer ], blocksize);
}
var ipad = this._ipad = new Buffer(blocksize);
var opad = this._opad = new Buffer(blocksize);
for (var i = 0; i < blocksize; i++) {
ipad[i] = key[i] ^ 54;
opad[i] = key[i] ^ 92;
}
this._hash = createHash(alg).update(ipad);
}
Hmac.prototype.update = function(data, enc) {
this._hash.update(data, enc);
return this;
};
Hmac.prototype.digest = function(enc) {
var h = this._hash.digest();
return createHash(this._alg).update(this._opad).update(h).digest(enc);
};
}).call(exports, __webpack_require__(7).Buffer);
}, function(module, exports, __webpack_require__) {
var pbkdf2Export = __webpack_require__(27);
module.exports = function(crypto, exports) {
exports = exports || {};
var exported = pbkdf2Export(crypto);
exports.pbkdf2 = exported.pbkdf2;
exports.pbkdf2Sync = exported.pbkdf2Sync;
return exports;
};
}, function(module, exports, __webpack_require__) {
(function(Buffer) {
module.exports = function(crypto) {
function pbkdf2(password, salt, iterations, keylen, digest, callback) {
if ("function" === typeof digest) {
callback = digest;
digest = undefined;
}
if ("function" !== typeof callback) throw new Error("No callback provided to pbkdf2");
setTimeout(function() {
var result;
try {
result = pbkdf2Sync(password, salt, iterations, keylen, digest);
} catch (e) {
return callback(e);
}
callback(undefined, result);
});
}
function pbkdf2Sync(password, salt, iterations, keylen, digest) {
if ("number" !== typeof iterations) throw new TypeError("Iterations not a number");
if (iterations < 0) throw new TypeError("Bad iterations");
if ("number" !== typeof keylen) throw new TypeError("Key length not a number");
if (keylen < 0) throw new TypeError("Bad key length");
digest = digest || "sha1";
if (!Buffer.isBuffer(password)) password = new Buffer(password);
if (!Buffer.isBuffer(salt)) salt = new Buffer(salt);
var hLen, l = 1, r, T;
var DK = new Buffer(keylen);
var block1 = new Buffer(salt.length + 4);
salt.copy(block1, 0, 0, salt.length);
for (var i = 1; i <= l; i++) {
block1.writeUInt32BE(i, salt.length);
var U = crypto.createHmac(digest, password).update(block1).digest();
if (!hLen) {
hLen = U.length;
T = new Buffer(hLen);
l = Math.ceil(keylen / hLen);
r = keylen - (l - 1) * hLen;
if (keylen > (Math.pow(2, 32) - 1) * hLen) throw new TypeError("keylen exceeds maximum length");
}
U.copy(T, 0, 0, hLen);
for (var j = 1; j < iterations; j++) {
U = crypto.createHmac(digest, password).update(U).digest();
for (var k = 0; k < hLen; k++) {
T[k] ^= U[k];
}
}
var destPos = (i - 1) * hLen;
var len = i == l ? r : hLen;
T.copy(DK, destPos, 0, len);
}
return DK;
}
return {
pbkdf2: pbkdf2,
pbkdf2Sync: pbkdf2Sync
};
};
}).call(exports, __webpack_require__(7).Buffer);
} ]);
}, function(module, exports, __webpack_require__) {
var Reflect;
(function(Reflect) {
"use strict";
var functionPrototype = Object.getPrototypeOf(Function);
var _Map = typeof Map === "function" ? Map : CreateMapPolyfill();
var _Set = typeof Set === "function" ? Set : CreateSetPolyfill();
var _WeakMap = typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
var __Metadata__ = new _WeakMap();
function decorate(decorators, target, targetKey, targetDescriptor) {
if (!IsUndefined(targetDescriptor)) {
if (!IsArray(decorators)) {
throw new TypeError();
} else if (!IsObject(target)) {
throw new TypeError();
} else if (IsUndefined(targetKey)) {
throw new TypeError();
} else if (!IsObject(targetDescriptor)) {
throw new TypeError();
}
targetKey = ToPropertyKey(targetKey);
return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);
} else if (!IsUndefined(targetKey)) {
if (!IsArray(decorators)) {
throw new TypeError();
} else if (!IsObject(target)) {
throw new TypeError();
}
targetKey = ToPropertyKey(targetKey);
return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);
} else {
if (!IsArray(decorators)) {
throw new TypeError();
} else if (!IsConstructor(target)) {
throw new TypeError();
}
return DecorateConstructor(decorators, target);
}
}
Reflect.decorate = decorate;
function metadata(metadataKey, metadataValue) {
function decorator(target, targetKey) {
if (!IsUndefined(targetKey)) {
if (!IsObject(target)) {
throw new TypeError();
}
targetKey = ToPropertyKey(targetKey);
OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
} else {
if (!IsConstructor(target)) {
throw new TypeError();
}
OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, undefined);
}
}
return decorator;
}
Reflect.metadata = metadata;
function defineMetadata(metadataKey, metadataValue, target, targetKey) {
if (!IsObject(target)) {
throw new TypeError();
} else if (!IsUndefined(targetKey)) {
targetKey = ToPropertyKey(targetKey);
}
return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
}
Reflect.defineMetadata = defineMetadata;
function hasMetadata(metadataKey, target, targetKey) {
if (!IsObject(target)) {
throw new TypeError();
} else if (!IsUndefined(targetKey)) {
targetKey = ToPropertyKey(targetKey);
}
return OrdinaryHasMetadata(metadataKey, target, targetKey);
}
Reflect.hasMetadata = hasMetadata;
function hasOwnMetadata(metadataKey, target, targetKey) {
if (!IsObject(target)) {
throw new TypeError();
} else if (!IsUndefined(targetKey)) {
targetKey = ToPropertyKey(targetKey);
}
return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);
}
Reflect.hasOwnMetadata = hasOwnMetadata;
function getMetadata(metadataKey, target, targetKey) {
if (!IsObject(target)) {
throw new TypeError();
} else if (!IsUndefined(targetKey)) {
targetKey = ToPropertyKey(targetKey);
}
return OrdinaryGetMetadata(metadataKey, target, targetKey);
}
Reflect.getMetadata = getMetadata;
function getOwnMetadata(metadataKey, target, targetKey) {
if (!IsObject(target)) {
throw new TypeError();
} else if (!IsUndefined(targetKey)) {
targetKey = ToPropertyKey(targetKey);
}
return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);
}
Reflect.getOwnMetadata = getOwnMetadata;
function getMetadataKeys(target, targetKey) {
if (!IsObject(target)) {
throw new TypeError();
} else if (!IsUndefined(targetKey)) {
targetKey = ToPropertyKey(targetKey);
}
return OrdinaryMetadataKeys(target, targetKey);
}
Reflect.getMetadataKeys = getMetadataKeys;
function getOwnMetadataKeys(target, targetKey) {
if (!IsObject(target)) {
throw new TypeError();
} else if (!IsUndefined(targetKey)) {
targetKey = ToPropertyKey(targetKey);
}
return OrdinaryOwnMetadataKeys(target, targetKey);
}
Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
function deleteMetadata(metadataKey, target, targetKey) {
if (!IsObject(target)) {
throw new TypeError();
} else if (!IsUndefined(targetKey)) {
targetKey = ToPropertyKey(targetKey);
}
var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
if (IsUndefined(metadataMap)) {
return false;
}
if (!metadataMap.delete(metadataKey)) {
return false;
}
if (metadataMap.size > 0) {
return true;
}
var targetMetadata = __Metadata__.get(target);
targetMetadata.delete(targetKey);
if (targetMetadata.size > 0) {
return true;
}
__Metadata__.delete(target);
return true;
}
Reflect.deleteMetadata = deleteMetadata;
function DecorateConstructor(decorators, target) {
for (var i = decorators.length - 1; i >= 0; --i) {
var decorator = decorators[i];
var decorated = decorator(target);
if (!IsUndefined(decorated)) {
if (!IsConstructor(decorated)) {
throw new TypeError();
}
target = decorated;
}
}
return target;
}
function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {
for (var i = decorators.length - 1; i >= 0; --i) {
var decorator = decorators[i];
var decorated = decorator(target, propertyKey, descriptor);
if (!IsUndefined(decorated)) {
if (!IsObject(decorated)) {
throw new TypeError();
}
descriptor = decorated;
}
}
return descriptor;
}
function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {
for (var i = decorators.length - 1; i >= 0; --i) {
var decorator = decorators[i];
decorator(target, propertyKey);
}
}
function GetOrCreateMetadataMap(target, targetKey, create) {
var targetMetadata = __Metadata__.get(target);
if (!targetMetadata) {
if (!create) {
return undefined;
}
targetMetadata = new _Map();
__Metadata__.set(target, targetMetadata);
}
var keyMetadata = targetMetadata.get(targetKey);
if (!keyMetadata) {
if (!create) {
return undefined;
}
keyMetadata = new _Map();
targetMetadata.set(targetKey, keyMetadata);
}
return keyMetadata;
}
function OrdinaryHasMetadata(MetadataKey, O, P) {
var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
if (hasOwn) {
return true;
}
var parent = GetPrototypeOf(O);
if (parent !== null) {
return OrdinaryHasMetadata(MetadataKey, parent, P);
}
return false;
}
function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
var metadataMap = GetOrCreateMetadataMap(O, P, false);
if (metadataMap === undefined) {
return false;
}
return Boolean(metadataMap.has(MetadataKey));
}
function OrdinaryGetMetadata(MetadataKey, O, P) {
var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
if (hasOwn) {
return OrdinaryGetOwnMetadata(MetadataKey, O, P);
}
var parent = GetPrototypeOf(O);
if (parent !== null) {
return OrdinaryGetMetadata(MetadataKey, parent, P);
}
return undefined;
}
function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
var metadataMap = GetOrCreateMetadataMap(O, P, false);
if (metadataMap === undefined) {
return undefined;
}
return metadataMap.get(MetadataKey);
}
function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
var metadataMap = GetOrCreateMetadataMap(O, P, true);
metadataMap.set(MetadataKey, MetadataValue);
}
function OrdinaryMetadataKeys(O, P) {
var ownKeys = OrdinaryOwnMetadataKeys(O, P);
var parent = GetPrototypeOf(O);
if (parent === null) {
return ownKeys;
}
var parentKeys = OrdinaryMetadataKeys(parent, P);
if (parentKeys.length <= 0) {
return ownKeys;
}
if (ownKeys.length <= 0) {
return parentKeys;
}
var set = new _Set();
var keys = [];
for (var _i = 0; _i < ownKeys.length; _i++) {
var key = ownKeys[_i];
var hasKey = set.has(key);
if (!hasKey) {
set.add(key);
keys.push(key);
}
}
for (var _a = 0; _a < parentKeys.length; _a++) {
var key = parentKeys[_a];
var hasKey = set.has(key);
if (!hasKey) {
set.add(key);
keys.push(key);
}
}
return keys;
}
function OrdinaryOwnMetadataKeys(target, targetKey) {
var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
var keys = [];
if (metadataMap) {
metadataMap.forEach(function(_, key) {
return keys.push(key);
});
}
return keys;
}
function IsUndefined(x) {
return x === undefined;
}
function IsArray(x) {
return Array.isArray(x);
}
function IsObject(x) {
return typeof x === "object" ? x !== null : typeof x === "function";
}
function IsConstructor(x) {
return typeof x === "function";
}
function IsSymbol(x) {
return typeof x === "symbol";
}
function ToPropertyKey(value) {
if (IsSymbol(value)) {
return value;
}
return String(value);
}
function GetPrototypeOf(O) {
var proto = Object.getPrototypeOf(O);
if (typeof O !== "function" || O === functionPrototype) {
return proto;
}
if (proto !== functionPrototype) {
return proto;
}
var prototype = O.prototype;
var prototypeProto = Object.getPrototypeOf(prototype);
if (prototypeProto == null || prototypeProto === Object.prototype) {
return proto;
}
var constructor = prototypeProto.constructor;
if (typeof constructor !== "function") {
return proto;
}
if (constructor === O) {
return proto;
}
return constructor;
}
function CreateMapPolyfill() {
var cacheSentinel = {};
function Map() {
this._keys = [];
this._values = [];
this._cache = cacheSentinel;
}
Map.prototype = {
get size() {
return this._keys.length;
},
has: function(key) {
if (key === this._cache) {
return true;
}
if (this._find(key) >= 0) {
this._cache = key;
return true;
}
return false;
},
get: function(key) {
var index = this._find(key);
if (index >= 0) {
this._cache = key;
return this._values[index];
}
return undefined;
},
set: function(key, value) {
this.delete(key);
this._keys.push(key);
this._values.push(value);
this._cache = key;
return this;
},
"delete": function(key) {
var index = this._find(key);
if (index >= 0) {
this._keys.splice(index, 1);
this._values.splice(index, 1);
this._cache = cacheSentinel;
return true;
}
return false;
},
clear: function() {
this._keys.length = 0;
this._values.length = 0;
this._cache = cacheSentinel;
},
forEach: function(callback, thisArg) {
var size = this.size;
for (var i = 0; i < size; ++i) {
var key = this._keys[i];
var value = this._values[i];
this._cache = key;
callback.call(this, value, key, this);
}
},
_find: function(key) {
var keys = this._keys;
var size = keys.length;
for (var i = 0; i < size; ++i) {
if (keys[i] === key) {
return i;
}
}
return -1;
}
};
return Map;
}
function CreateSetPolyfill() {
var cacheSentinel = {};
function Set() {
this._map = new _Map();
}
Set.prototype = {
get size() {
return this._map.length;
},
has: function(value) {
return this._map.has(value);
},
add: function(value) {
this._map.set(value, value);
return this;
},
"delete": function(value) {
return this._map.delete(value);
},
clear: function() {
this._map.clear();
},
forEach: function(callback, thisArg) {
this._map.forEach(callback, thisArg);
}
};
return Set;
}
function CreateWeakMapPolyfill() {
var UUID_SIZE = 16;
var isNode = typeof global !== "undefined" && Object.prototype.toString.call(global.process) === "[object process]";
var nodeCrypto = isNode && __webpack_require__(107);
var hasOwn = Object.prototype.hasOwnProperty;
var keys = {};
var rootKey = CreateUniqueKey();
function WeakMap() {
this._key = CreateUniqueKey();
}
WeakMap.prototype = {
has: function(target) {
var table = GetOrCreateWeakMapTable(target, false);
if (table) {
return this._key in table;
}
return false;
},
get: function(target) {
var table = GetOrCreateWeakMapTable(target, false);
if (table) {
return table[this._key];
}
return undefined;
},
set: function(target, value) {
var table = GetOrCreateWeakMapTable(target, true);
table[this._key] = value;
return this;
},
"delete": function(target) {
var table = GetOrCreateWeakMapTable(target, false);
if (table && this._key in table) {
return delete table[this._key];
}
return false;
},
clear: function() {
this._key = CreateUniqueKey();
}
};
function FillRandomBytes(buffer, size) {
for (var i = 0; i < size; ++i) {
buffer[i] = Math.random() * 255 | 0;
}
}
function GenRandomBytes(size) {
if (nodeCrypto) {
var data = nodeCrypto.randomBytes(size);
return data;
} else if (typeof Uint8Array === "function") {
var data = new Uint8Array(size);
if (typeof crypto !== "undefined") {
crypto.getRandomValues(data);
} else if (typeof msCrypto !== "undefined") {
msCrypto.getRandomValues(data);
} else {
FillRandomBytes(data, size);
}
return data;
} else {
var data = new Array(size);
FillRandomBytes(data, size);
return data;
}
}
function CreateUUID() {
var data = GenRandomBytes(UUID_SIZE);
data[6] = data[6] & 79 | 64;
data[8] = data[8] & 191 | 128;
var result = "";
for (var offset = 0; offset < UUID_SIZE; ++offset) {
var byte = data[offset];
if (offset === 4 || offset === 6 || offset === 8) {
result += "-";
}
if (byte < 16) {
result += "0";
}
result += byte.toString(16).toLowerCase();
}
return result;
}
function CreateUniqueKey() {
var key;
do {
key = "@@WeakMap@@" + CreateUUID();
} while (hasOwn.call(keys, key));
keys[key] = true;
return key;
}
function GetOrCreateWeakMapTable(target, create) {
if (!hasOwn.call(target, rootKey)) {
if (!create) {
return undefined;
}
Object.defineProperty(target, rootKey, {
value: Object.create(null)
});
}
return target[rootKey];
}
return WeakMap;
}
(function(__global) {
if (typeof __global.Reflect !== "undefined") {
if (__global.Reflect !== Reflect) {
for (var p in Reflect) {
__global.Reflect[p] = Reflect[p];
}
}
} else {
__global.Reflect = Reflect;
}
})(typeof window !== "undefined" ? window : typeof WorkerGlobalScope !== "undefined" ? self : typeof global !== "undefined" ? global : Function("return this;")());
})(Reflect || (Reflect = {}));
}, function(module, exports, __webpack_require__) {
var rng = __webpack_require__(108);
function error() {
var m = [].slice.call(arguments).join(" ");
throw new Error([ m, "we accept pull requests", "http://github.com/dominictarr/crypto-browserify" ].join("\n"));
}
exports.createHash = __webpack_require__(110);
exports.createHmac = __webpack_require__(113);
exports.randomBytes = function(size, callback) {
if (callback && callback.call) {
try {
callback.call(this, undefined, new Buffer(rng(size)));
} catch (err) {
callback(err);
}
} else {
return new Buffer(rng(size));
}
};
function each(a, f) {
for (var i in a) f(a[i], i);
}
exports.getHashes = function() {
return [ "sha1", "sha256", "sha512", "md5", "rmd160" ];
};
var p = __webpack_require__(114)(exports);
exports.pbkdf2 = p.pbkdf2;
exports.pbkdf2Sync = p.pbkdf2Sync;
each([ "createCredentials", "createCipher", "createCipheriv", "createDecipher", "createDecipheriv", "createSign", "createVerify", "createDiffieHellman" ], function(name) {
exports[name] = function() {
error("sorry,", name, "is not implemented yet");
};
});
}, function(module, exports, __webpack_require__) {
(function() {
var g = ("undefined" === typeof window ? global : window) || {};
_crypto = g.crypto || g.msCrypto || __webpack_require__(109);
module.exports = function(size) {
if (_crypto.getRandomValues) {
var bytes = new Buffer(size);
_crypto.getRandomValues(bytes);
return bytes;
} else if (_crypto.randomBytes) {
return _crypto.randomBytes(size);
} else throw new Error("secure random number generation not supported by this browser\n" + "use chrome, FireFox or Internet Explorer 11");
};
})();
}, function(module, exports) {}, function(module, exports, __webpack_require__) {
var createHash = __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "sha.js"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
var md5 = toConstructor(__webpack_require__(111));
var rmd160 = toConstructor(__webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "ripemd160"');
e.code = "MODULE_NOT_FOUND";
throw e;
}()));
function toConstructor(fn) {
return function() {
var buffers = [];
var m = {
update: function(data, enc) {
if (!Buffer.isBuffer(data)) data = new Buffer(data, enc);
buffers.push(data);
return this;
},
digest: function(enc) {
var buf = Buffer.concat(buffers);
var r = fn(buf);
buffers = null;
return enc ? r.toString(enc) : r;
}
};
return m;
};
}
module.exports = function(alg) {
if ("md5" === alg) return new md5();
if ("rmd160" === alg) return new rmd160();
return createHash(alg);
};
}, function(module, exports, __webpack_require__) {
var helpers = __webpack_require__(112);
function core_md5(x, len) {
x[len >> 5] |= 128 << len % 32;
x[(len + 64 >>> 9 << 4) + 14] = len;
var a = 1732584193;
var b = -271733879;
var c = -1732584194;
var d = 271733878;
for (var i = 0; i < x.length; i += 16) {
var olda = a;
var oldb = b;
var oldc = c;
var oldd = d;
a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
a = safe_add(a, olda);
b = safe_add(b, oldb);
c = safe_add(c, oldc);
d = safe_add(d, oldd);
}
return Array(a, b, c, d);
}
function md5_cmn(q, a, b, x, s, t) {
return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
}
function md5_ff(a, b, c, d, x, s, t) {
return md5_cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t) {
return md5_cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t) {
return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t) {
return md5_cmn(c ^ (b | ~d), a, b, x, s, t);
}
function safe_add(x, y) {
var lsw = (x & 65535) + (y & 65535);
var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
return msw << 16 | lsw & 65535;
}
function bit_rol(num, cnt) {
return num << cnt | num >>> 32 - cnt;
}
module.exports = function md5(buf) {
return helpers.hash(buf, core_md5, 16);
};
}, function(module, exports) {
var intSize = 4;
var zeroBuffer = new Buffer(intSize);
zeroBuffer.fill(0);
var chrsz = 8;
function toArray(buf, bigEndian) {
if (buf.length % intSize !== 0) {
var len = buf.length + (intSize - buf.length % intSize);
buf = Buffer.concat([ buf, zeroBuffer ], len);
}
var arr = [];
var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
for (var i = 0; i < buf.length; i += intSize) {
arr.push(fn.call(buf, i));
}
return arr;
}
function toBuffer(arr, size, bigEndian) {
var buf = new Buffer(size);
var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
for (var i = 0; i < arr.length; i++) {
fn.call(buf, arr[i], i * 4, true);
}
return buf;
}
function hash(buf, fn, hashSize, bigEndian) {
if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
return toBuffer(arr, hashSize, bigEndian);
}
module.exports = {
hash: hash
};
}, function(module, exports, __webpack_require__) {
var createHash = __webpack_require__(110);
var zeroBuffer = new Buffer(128);
zeroBuffer.fill(0);
module.exports = Hmac;
function Hmac(alg, key) {
if (!(this instanceof Hmac)) return new Hmac(alg, key);
this._opad = opad;
this._alg = alg;
var blocksize = alg === "sha512" ? 128 : 64;
key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key;
if (key.length > blocksize) {
key = createHash(alg).update(key).digest();
} else if (key.length < blocksize) {
key = Buffer.concat([ key, zeroBuffer ], blocksize);
}
var ipad = this._ipad = new Buffer(blocksize);
var opad = this._opad = new Buffer(blocksize);
for (var i = 0; i < blocksize; i++) {
ipad[i] = key[i] ^ 54;
opad[i] = key[i] ^ 92;
}
this._hash = createHash(alg).update(ipad);
}
Hmac.prototype.update = function(data, enc) {
this._hash.update(data, enc);
return this;
};
Hmac.prototype.digest = function(enc) {
var h = this._hash.digest();
return createHash(this._alg).update(this._opad).update(h).digest(enc);
};
}, function(module, exports, __webpack_require__) {
var pbkdf2Export = __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "pbkdf2-compat/pbkdf2"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
module.exports = function(crypto, exports) {
exports = exports || {};
var exported = pbkdf2Export(crypto);
exports.pbkdf2 = exported.pbkdf2;
exports.pbkdf2Sync = exported.pbkdf2Sync;
return exports;
};
}, function(module, exports) {
if (!Array.prototype.fill) {
Array.prototype.fill = function(value) {
var O = Object(this);
var len = parseInt(O.length, 10);
var start = arguments[1];
var relativeStart = parseInt(start, 10) || 0;
var k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);
var end = arguments[2];
var relativeEnd = end === undefined ? len : parseInt(end) || 0;
var final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);
for (;k < final; k++) {
O[k] = value;
}
return O;
};
}
if (!Array.from) {
Array.from = function(iterable, mapFn, thisArg) {
var results = [];
if (iterable.next) {
var step = null;
while (step = iterable.next()) {
if (step.done) break; else results.push(step.value);
}
} else {
results = [].slice.call(iterable);
}
if (mapFn) {
results = results.forEach(mapFn, thisArg);
}
return results;
};
}
}, function(module, exports) {
"use strict";
(function(SecurityContext) {
SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
SecurityContext[SecurityContext["URL"] = 4] = "URL";
SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
})(exports.SecurityContext || (exports.SecurityContext = {}));
var SecurityContext = exports.SecurityContext;
var SanitizationService = function() {
function SanitizationService() {}
return SanitizationService;
}();
exports.SanitizationService = SanitizationService;
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var globalScope;
if (typeof window === "undefined") {
if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) {
globalScope = self;
} else {
globalScope = global;
}
} else {
globalScope = window;
}
function scheduleMicroTask(fn) {
Zone.current.scheduleMicroTask("scheduleMicrotask", fn);
}
exports.scheduleMicroTask = scheduleMicroTask;
exports.IS_DART = false;
var _global = globalScope;
exports.global = _global;
exports.Type = Function;
function getTypeNameForDebugging(type) {
if (type["name"]) {
return type["name"];
}
return typeof type;
}
exports.getTypeNameForDebugging = getTypeNameForDebugging;
exports.Math = _global.Math;
exports.Date = _global.Date;
var _devMode = true;
var _modeLocked = false;
function lockMode() {
_modeLocked = true;
}
exports.lockMode = lockMode;
function enableProdMode() {
if (_modeLocked) {
throw "Cannot enable prod mode after platform setup.";
}
_devMode = false;
}
exports.enableProdMode = enableProdMode;
function assertionsEnabled() {
return _devMode;
}
exports.assertionsEnabled = assertionsEnabled;
_global.assert = function assert(condition) {};
function isPresent(obj) {
return obj !== undefined && obj !== null;
}
exports.isPresent = isPresent;
function isBlank(obj) {
return obj === undefined || obj === null;
}
exports.isBlank = isBlank;
function isBoolean(obj) {
return typeof obj === "boolean";
}
exports.isBoolean = isBoolean;
function isNumber(obj) {
return typeof obj === "number";
}
exports.isNumber = isNumber;
function isString(obj) {
return typeof obj === "string";
}
exports.isString = isString;
function isFunction(obj) {
return typeof obj === "function";
}
exports.isFunction = isFunction;
function isType(obj) {
return isFunction(obj);
}
exports.isType = isType;
function isStringMap(obj) {
return typeof obj === "object" && obj !== null;
}
exports.isStringMap = isStringMap;
var STRING_MAP_PROTO = Object.getPrototypeOf({});
function isStrictStringMap(obj) {
return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
}
exports.isStrictStringMap = isStrictStringMap;
function isPromise(obj) {
return obj instanceof _global.Promise;
}
exports.isPromise = isPromise;
function isArray(obj) {
return Array.isArray(obj);
}
exports.isArray = isArray;
function isDate(obj) {
return obj instanceof exports.Date && !isNaN(obj.valueOf());
}
exports.isDate = isDate;
function noop() {}
exports.noop = noop;
function stringify(token) {
if (typeof token === "string") {
return token;
}
if (token === undefined || token === null) {
return "" + token;
}
if (token.name) {
return token.name;
}
if (token.overriddenName) {
return token.overriddenName;
}
var res = token.toString();
var newLineIndex = res.indexOf("\n");
return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
exports.stringify = stringify;
function serializeEnum(val) {
return val;
}
exports.serializeEnum = serializeEnum;
function deserializeEnum(val, values) {
return val;
}
exports.deserializeEnum = deserializeEnum;
function resolveEnumToken(enumValue, val) {
return enumValue[val];
}
exports.resolveEnumToken = resolveEnumToken;
var StringWrapper = function() {
function StringWrapper() {}
StringWrapper.fromCharCode = function(code) {
return String.fromCharCode(code);
};
StringWrapper.charCodeAt = function(s, index) {
return s.charCodeAt(index);
};
StringWrapper.split = function(s, regExp) {
return s.split(regExp);
};
StringWrapper.equals = function(s, s2) {
return s === s2;
};
StringWrapper.stripLeft = function(s, charVal) {
if (s && s.length) {
var pos = 0;
for (var i = 0; i < s.length; i++) {
if (s[i] != charVal) break;
pos++;
}
s = s.substring(pos);
}
return s;
};
StringWrapper.stripRight = function(s, charVal) {
if (s && s.length) {
var pos = s.length;
for (var i = s.length - 1; i >= 0; i--) {
if (s[i] != charVal) break;
pos--;
}
s = s.substring(0, pos);
}
return s;
};
StringWrapper.replace = function(s, from, replace) {
return s.replace(from, replace);
};
StringWrapper.replaceAll = function(s, from, replace) {
return s.replace(from, replace);
};
StringWrapper.slice = function(s, from, to) {
if (from === void 0) {
from = 0;
}
if (to === void 0) {
to = null;
}
return s.slice(from, to === null ? undefined : to);
};
StringWrapper.replaceAllMapped = function(s, from, cb) {
return s.replace(from, function() {
var matches = [];
for (var _i = 0; _i < arguments.length; _i++) {
matches[_i - 0] = arguments[_i];
}
matches.splice(-2, 2);
return cb(matches);
});
};
StringWrapper.contains = function(s, substr) {
return s.indexOf(substr) != -1;
};
StringWrapper.compare = function(a, b) {
if (a < b) {
return -1;
} else if (a > b) {
return 1;
} else {
return 0;
}
};
return StringWrapper;
}();
exports.StringWrapper = StringWrapper;
var StringJoiner = function() {
function StringJoiner(parts) {
if (parts === void 0) {
parts = [];
}
this.parts = parts;
}
StringJoiner.prototype.add = function(part) {
this.parts.push(part);
};
StringJoiner.prototype.toString = function() {
return this.parts.join("");
};
return StringJoiner;
}();
exports.StringJoiner = StringJoiner;
var NumberParseError = function(_super) {
__extends(NumberParseError, _super);
function NumberParseError(message) {
_super.call(this);
this.message = message;
}
NumberParseError.prototype.toString = function() {
return this.message;
};
return NumberParseError;
}(Error);
exports.NumberParseError = NumberParseError;
var NumberWrapper = function() {
function NumberWrapper() {}
NumberWrapper.toFixed = function(n, fractionDigits) {
return n.toFixed(fractionDigits);
};
NumberWrapper.equal = function(a, b) {
return a === b;
};
NumberWrapper.parseIntAutoRadix = function(text) {
var result = parseInt(text);
if (isNaN(result)) {
throw new NumberParseError("Invalid integer literal when parsing " + text);
}
return result;
};
NumberWrapper.parseInt = function(text, radix) {
if (radix == 10) {
if (/^(\-|\+)?[0-9]+$/.test(text)) {
return parseInt(text, radix);
}
} else if (radix == 16) {
if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
return parseInt(text, radix);
}
} else {
var result = parseInt(text, radix);
if (!isNaN(result)) {
return result;
}
}
throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " + radix);
};
NumberWrapper.parseFloat = function(text) {
return parseFloat(text);
};
Object.defineProperty(NumberWrapper, "NaN", {
get: function() {
return NaN;
},
enumerable: true,
configurable: true
});
NumberWrapper.isNaN = function(value) {
return isNaN(value);
};
NumberWrapper.isInteger = function(value) {
return Number.isInteger(value);
};
return NumberWrapper;
}();
exports.NumberWrapper = NumberWrapper;
exports.RegExp = _global.RegExp;
var RegExpWrapper = function() {
function RegExpWrapper() {}
RegExpWrapper.create = function(regExpStr, flags) {
if (flags === void 0) {
flags = "";
}
flags = flags.replace(/g/g, "");
return new _global.RegExp(regExpStr, flags + "g");
};
RegExpWrapper.firstMatch = function(regExp, input) {
regExp.lastIndex = 0;
return regExp.exec(input);
};
RegExpWrapper.test = function(regExp, input) {
regExp.lastIndex = 0;
return regExp.test(input);
};
RegExpWrapper.matcher = function(regExp, input) {
regExp.lastIndex = 0;
return {
re: regExp,
input: input
};
};
RegExpWrapper.replaceAll = function(regExp, input, replace) {
var c = regExp.exec(input);
var res = "";
regExp.lastIndex = 0;
var prev = 0;
while (c) {
res += input.substring(prev, c.index);
res += replace(c);
prev = c.index + c[0].length;
regExp.lastIndex = prev;
c = regExp.exec(input);
}
res += input.substring(prev);
return res;
};
return RegExpWrapper;
}();
exports.RegExpWrapper = RegExpWrapper;
var RegExpMatcherWrapper = function() {
function RegExpMatcherWrapper() {}
RegExpMatcherWrapper.next = function(matcher) {
return matcher.re.exec(matcher.input);
};
return RegExpMatcherWrapper;
}();
exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
var FunctionWrapper = function() {
function FunctionWrapper() {}
FunctionWrapper.apply = function(fn, posArgs) {
return fn.apply(null, posArgs);
};
return FunctionWrapper;
}();
exports.FunctionWrapper = FunctionWrapper;
function looseIdentical(a, b) {
return a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
}
exports.looseIdentical = looseIdentical;
function getMapKey(value) {
return value;
}
exports.getMapKey = getMapKey;
function normalizeBlank(obj) {
return isBlank(obj) ? null : obj;
}
exports.normalizeBlank = normalizeBlank;
function normalizeBool(obj) {
return isBlank(obj) ? false : obj;
}
exports.normalizeBool = normalizeBool;
function isJsObject(o) {
return o !== null && (typeof o === "function" || typeof o === "object");
}
exports.isJsObject = isJsObject;
function print(obj) {
console.log(obj);
}
exports.print = print;
function warn(obj) {
console.warn(obj);
}
exports.warn = warn;
var Json = function() {
function Json() {}
Json.parse = function(s) {
return _global.JSON.parse(s);
};
Json.stringify = function(data) {
return _global.JSON.stringify(data, null, 2);
};
return Json;
}();
exports.Json = Json;
var DateWrapper = function() {
function DateWrapper() {}
DateWrapper.create = function(year, month, day, hour, minutes, seconds, milliseconds) {
if (month === void 0) {
month = 1;
}
if (day === void 0) {
day = 1;
}
if (hour === void 0) {
hour = 0;
}
if (minutes === void 0) {
minutes = 0;
}
if (seconds === void 0) {
seconds = 0;
}
if (milliseconds === void 0) {
milliseconds = 0;
}
return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
};
DateWrapper.fromISOString = function(str) {
return new exports.Date(str);
};
DateWrapper.fromMillis = function(ms) {
return new exports.Date(ms);
};
DateWrapper.toMillis = function(date) {
return date.getTime();
};
DateWrapper.now = function() {
return new exports.Date();
};
DateWrapper.toJson = function(date) {
return date.toJSON();
};
return DateWrapper;
}();
exports.DateWrapper = DateWrapper;
function setValueOnPath(global, path, value) {
var parts = path.split(".");
var obj = global;
while (parts.length > 1) {
var name = parts.shift();
if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
obj = obj[name];
} else {
obj = obj[name] = {};
}
}
if (obj === undefined || obj === null) {
obj = {};
}
obj[parts.shift()] = value;
}
exports.setValueOnPath = setValueOnPath;
var _symbolIterator = null;
function getSymbolIterator() {
if (isBlank(_symbolIterator)) {
if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
_symbolIterator = Symbol.iterator;
} else {
var keys = Object.getOwnPropertyNames(Map.prototype);
for (var i = 0; i < keys.length; ++i) {
var key = keys[i];
if (key !== "entries" && key !== "size" && Map.prototype[key] === Map.prototype["entries"]) {
_symbolIterator = key;
}
}
}
}
return _symbolIterator;
}
exports.getSymbolIterator = getSymbolIterator;
function evalExpression(sourceUrl, expr, declarations, vars) {
var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
var fnArgNames = [];
var fnArgValues = [];
for (var argName in vars) {
fnArgNames.push(argName);
fnArgValues.push(vars[argName]);
}
return new (Function.bind.apply(Function, [ void 0 ].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
}
exports.evalExpression = evalExpression;
function isPrimitive(obj) {
return !isJsObject(obj);
}
exports.isPrimitive = isPrimitive;
function hasConstructor(value, type) {
return value.constructor === type;
}
exports.hasConstructor = hasConstructor;
function bitWiseOr(values) {
return values.reduce(function(a, b) {
return a | b;
});
}
exports.bitWiseOr = bitWiseOr;
function bitWiseAnd(values) {
return values.reduce(function(a, b) {
return a & b;
});
}
exports.bitWiseAnd = bitWiseAnd;
function escape(s) {
return _global.encodeURI(s);
}
exports.escape = escape;
}, function(module, exports, __webpack_require__) {
"use strict";
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
__export(__webpack_require__(119));
__export(__webpack_require__(127));
__export(__webpack_require__(128));
var application_ref_1 = __webpack_require__(146);
exports.createPlatform = application_ref_1.createPlatform;
exports.assertPlatform = application_ref_1.assertPlatform;
exports.disposePlatform = application_ref_1.disposePlatform;
exports.getPlatform = application_ref_1.getPlatform;
exports.coreBootstrap = application_ref_1.coreBootstrap;
exports.coreLoadAndBootstrap = application_ref_1.coreLoadAndBootstrap;
exports.createNgZone = application_ref_1.createNgZone;
exports.PlatformRef = application_ref_1.PlatformRef;
exports.ApplicationRef = application_ref_1.ApplicationRef;
var application_tokens_1 = __webpack_require__(172);
exports.APP_ID = application_tokens_1.APP_ID;
exports.APP_INITIALIZER = application_tokens_1.APP_INITIALIZER;
exports.PACKAGE_ROOT_URL = application_tokens_1.PACKAGE_ROOT_URL;
exports.PLATFORM_INITIALIZER = application_tokens_1.PLATFORM_INITIALIZER;
__export(__webpack_require__(193));
__export(__webpack_require__(194));
__export(__webpack_require__(195));
var debug_node_1 = __webpack_require__(200);
exports.DebugElement = debug_node_1.DebugElement;
exports.DebugNode = debug_node_1.DebugNode;
exports.asNativeElements = debug_node_1.asNativeElements;
exports.getDebugNode = debug_node_1.getDebugNode;
__export(__webpack_require__(173));
__export(__webpack_require__(201));
__export(__webpack_require__(202));
__export(__webpack_require__(203));
__export(__webpack_require__(204));
__export(__webpack_require__(137));
var profile_1 = __webpack_require__(181);
exports.wtfCreateScope = profile_1.wtfCreateScope;
exports.wtfLeave = profile_1.wtfLeave;
exports.wtfStartTimeRange = profile_1.wtfStartTimeRange;
exports.wtfEndTimeRange = profile_1.wtfEndTimeRange;
var lang_1 = __webpack_require__(117);
exports.Type = lang_1.Type;
exports.enableProdMode = lang_1.enableProdMode;
var async_1 = __webpack_require__(148);
exports.EventEmitter = async_1.EventEmitter;
var exceptions_1 = __webpack_require__(131);
exports.ExceptionHandler = exceptions_1.ExceptionHandler;
exports.WrappedException = exceptions_1.WrappedException;
exports.BaseException = exceptions_1.BaseException;
__export(__webpack_require__(205));
}, function(module, exports, __webpack_require__) {
"use strict";
var di_1 = __webpack_require__(120);
exports.QueryMetadata = di_1.QueryMetadata;
exports.ContentChildrenMetadata = di_1.ContentChildrenMetadata;
exports.ContentChildMetadata = di_1.ContentChildMetadata;
exports.ViewChildrenMetadata = di_1.ViewChildrenMetadata;
exports.ViewQueryMetadata = di_1.ViewQueryMetadata;
exports.ViewChildMetadata = di_1.ViewChildMetadata;
exports.AttributeMetadata = di_1.AttributeMetadata;
var directives_1 = __webpack_require__(123);
exports.ComponentMetadata = directives_1.ComponentMetadata;
exports.DirectiveMetadata = directives_1.DirectiveMetadata;
exports.PipeMetadata = directives_1.PipeMetadata;
exports.InputMetadata = directives_1.InputMetadata;
exports.OutputMetadata = directives_1.OutputMetadata;
exports.HostBindingMetadata = directives_1.HostBindingMetadata;
exports.HostListenerMetadata = directives_1.HostListenerMetadata;
var view_1 = __webpack_require__(125);
exports.ViewMetadata = view_1.ViewMetadata;
exports.ViewEncapsulation = view_1.ViewEncapsulation;
var di_2 = __webpack_require__(120);
var directives_2 = __webpack_require__(123);
var view_2 = __webpack_require__(125);
var decorators_1 = __webpack_require__(126);
exports.Component = decorators_1.makeDecorator(directives_2.ComponentMetadata, function(fn) {
return fn.View = View;
});
exports.Directive = decorators_1.makeDecorator(directives_2.DirectiveMetadata);
var View = decorators_1.makeDecorator(view_2.ViewMetadata, function(fn) {
return fn.View = View;
});
exports.Attribute = decorators_1.makeParamDecorator(di_2.AttributeMetadata);
exports.Query = decorators_1.makeParamDecorator(di_2.QueryMetadata);
exports.ContentChildren = decorators_1.makePropDecorator(di_2.ContentChildrenMetadata);
exports.ContentChild = decorators_1.makePropDecorator(di_2.ContentChildMetadata);
exports.ViewChildren = decorators_1.makePropDecorator(di_2.ViewChildrenMetadata);
exports.ViewChild = decorators_1.makePropDecorator(di_2.ViewChildMetadata);
exports.ViewQuery = decorators_1.makeParamDecorator(di_2.ViewQueryMetadata);
exports.Pipe = decorators_1.makeDecorator(directives_2.PipeMetadata);
exports.Input = decorators_1.makePropDecorator(directives_2.InputMetadata);
exports.Output = decorators_1.makePropDecorator(directives_2.OutputMetadata);
exports.HostBinding = decorators_1.makePropDecorator(directives_2.HostBindingMetadata);
exports.HostListener = decorators_1.makePropDecorator(directives_2.HostListenerMetadata);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(117);
var metadata_1 = __webpack_require__(121);
var forward_ref_1 = __webpack_require__(122);
var AttributeMetadata = function(_super) {
__extends(AttributeMetadata, _super);
function AttributeMetadata(attributeName) {
_super.call(this);
this.attributeName = attributeName;
}
Object.defineProperty(AttributeMetadata.prototype, "token", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
AttributeMetadata.prototype.toString = function() {
return "@Attribute(" + lang_1.stringify(this.attributeName) + ")";
};
return AttributeMetadata;
}(metadata_1.DependencyMetadata);
exports.AttributeMetadata = AttributeMetadata;
var QueryMetadata = function(_super) {
__extends(QueryMetadata, _super);
function QueryMetadata(_selector, _a) {
var _b = _a === void 0 ? {} : _a, _c = _b.descendants, descendants = _c === void 0 ? false : _c, _d = _b.first, first = _d === void 0 ? false : _d, _e = _b.read, read = _e === void 0 ? null : _e;
_super.call(this);
this._selector = _selector;
this.descendants = descendants;
this.first = first;
this.read = read;
}
Object.defineProperty(QueryMetadata.prototype, "isViewQuery", {
get: function() {
return false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(QueryMetadata.prototype, "selector", {
get: function() {
return forward_ref_1.resolveForwardRef(this._selector);
},
enumerable: true,
configurable: true
});
Object.defineProperty(QueryMetadata.prototype, "isVarBindingQuery", {
get: function() {
return lang_1.isString(this.selector);
},
enumerable: true,
configurable: true
});
Object.defineProperty(QueryMetadata.prototype, "varBindings", {
get: function() {
return this.selector.split(",");
},
enumerable: true,
configurable: true
});
QueryMetadata.prototype.toString = function() {
return "@Query(" + lang_1.stringify(this.selector) + ")";
};
return QueryMetadata;
}(metadata_1.DependencyMetadata);
exports.QueryMetadata = QueryMetadata;
var ContentChildrenMetadata = function(_super) {
__extends(ContentChildrenMetadata, _super);
function ContentChildrenMetadata(_selector, _a) {
var _b = _a === void 0 ? {} : _a, _c = _b.descendants, descendants = _c === void 0 ? false : _c, _d = _b.read, read = _d === void 0 ? null : _d;
_super.call(this, _selector, {
descendants: descendants,
read: read
});
}
return ContentChildrenMetadata;
}(QueryMetadata);
exports.ContentChildrenMetadata = ContentChildrenMetadata;
var ContentChildMetadata = function(_super) {
__extends(ContentChildMetadata, _super);
function ContentChildMetadata(_selector, _a) {
var _b = (_a === void 0 ? {} : _a).read, read = _b === void 0 ? null : _b;
_super.call(this, _selector, {
descendants: true,
first: true,
read: read
});
}
return ContentChildMetadata;
}(QueryMetadata);
exports.ContentChildMetadata = ContentChildMetadata;
var ViewQueryMetadata = function(_super) {
__extends(ViewQueryMetadata, _super);
function ViewQueryMetadata(_selector, _a) {
var _b = _a === void 0 ? {} : _a, _c = _b.descendants, descendants = _c === void 0 ? false : _c, _d = _b.first, first = _d === void 0 ? false : _d, _e = _b.read, read = _e === void 0 ? null : _e;
_super.call(this, _selector, {
descendants: descendants,
first: first,
read: read
});
}
Object.defineProperty(ViewQueryMetadata.prototype, "isViewQuery", {
get: function() {
return true;
},
enumerable: true,
configurable: true
});
ViewQueryMetadata.prototype.toString = function() {
return "@ViewQuery(" + lang_1.stringify(this.selector) + ")";
};
return ViewQueryMetadata;
}(QueryMetadata);
exports.ViewQueryMetadata = ViewQueryMetadata;
var ViewChildrenMetadata = function(_super) {
__extends(ViewChildrenMetadata, _super);
function ViewChildrenMetadata(_selector, _a) {
var _b = (_a === void 0 ? {} : _a).read, read = _b === void 0 ? null : _b;
_super.call(this, _selector, {
descendants: true,
read: read
});
}
return ViewChildrenMetadata;
}(ViewQueryMetadata);
exports.ViewChildrenMetadata = ViewChildrenMetadata;
var ViewChildMetadata = function(_super) {
__extends(ViewChildMetadata, _super);
function ViewChildMetadata(_selector, _a) {
var _b = (_a === void 0 ? {} : _a).read, read = _b === void 0 ? null : _b;
_super.call(this, _selector, {
descendants: true,
first: true,
read: read
});
}
return ViewChildMetadata;
}(ViewQueryMetadata);
exports.ViewChildMetadata = ViewChildMetadata;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(117);
var InjectMetadata = function() {
function InjectMetadata(token) {
this.token = token;
}
InjectMetadata.prototype.toString = function() {
return "@Inject(" + lang_1.stringify(this.token) + ")";
};
return InjectMetadata;
}();
exports.InjectMetadata = InjectMetadata;
var OptionalMetadata = function() {
function OptionalMetadata() {}
OptionalMetadata.prototype.toString = function() {
return "@Optional()";
};
return OptionalMetadata;
}();
exports.OptionalMetadata = OptionalMetadata;
var DependencyMetadata = function() {
function DependencyMetadata() {}
Object.defineProperty(DependencyMetadata.prototype, "token", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
return DependencyMetadata;
}();
exports.DependencyMetadata = DependencyMetadata;
var InjectableMetadata = function() {
function InjectableMetadata() {}
return InjectableMetadata;
}();
exports.InjectableMetadata = InjectableMetadata;
var SelfMetadata = function() {
function SelfMetadata() {}
SelfMetadata.prototype.toString = function() {
return "@Self()";
};
return SelfMetadata;
}();
exports.SelfMetadata = SelfMetadata;
var SkipSelfMetadata = function() {
function SkipSelfMetadata() {}
SkipSelfMetadata.prototype.toString = function() {
return "@SkipSelf()";
};
return SkipSelfMetadata;
}();
exports.SkipSelfMetadata = SkipSelfMetadata;
var HostMetadata = function() {
function HostMetadata() {}
HostMetadata.prototype.toString = function() {
return "@Host()";
};
return HostMetadata;
}();
exports.HostMetadata = HostMetadata;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(117);
function forwardRef(forwardRefFn) {
forwardRefFn.__forward_ref__ = forwardRef;
forwardRefFn.toString = function() {
return lang_1.stringify(this());
};
return forwardRefFn;
}
exports.forwardRef = forwardRef;
function resolveForwardRef(type) {
if (lang_1.isFunction(type) && type.hasOwnProperty("__forward_ref__") && type.__forward_ref__ === forwardRef) {
return type();
} else {
return type;
}
}
exports.resolveForwardRef = resolveForwardRef;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(117);
var metadata_1 = __webpack_require__(121);
var constants_1 = __webpack_require__(124);
var DirectiveMetadata = function(_super) {
__extends(DirectiveMetadata, _super);
function DirectiveMetadata(_a) {
var _b = _a === void 0 ? {} : _a, selector = _b.selector, inputs = _b.inputs, outputs = _b.outputs, properties = _b.properties, events = _b.events, host = _b.host, bindings = _b.bindings, providers = _b.providers, exportAs = _b.exportAs, queries = _b.queries;
_super.call(this);
this.selector = selector;
this._inputs = inputs;
this._properties = properties;
this._outputs = outputs;
this._events = events;
this.host = host;
this.exportAs = exportAs;
this.queries = queries;
this._providers = providers;
this._bindings = bindings;
}
Object.defineProperty(DirectiveMetadata.prototype, "inputs", {
get: function() {
return lang_1.isPresent(this._properties) && this._properties.length > 0 ? this._properties : this._inputs;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DirectiveMetadata.prototype, "properties", {
get: function() {
return this.inputs;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DirectiveMetadata.prototype, "outputs", {
get: function() {
return lang_1.isPresent(this._events) && this._events.length > 0 ? this._events : this._outputs;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DirectiveMetadata.prototype, "events", {
get: function() {
return this.outputs;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DirectiveMetadata.prototype, "providers", {
get: function() {
return lang_1.isPresent(this._bindings) && this._bindings.length > 0 ? this._bindings : this._providers;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DirectiveMetadata.prototype, "bindings", {
get: function() {
return this.providers;
},
enumerable: true,
configurable: true
});
return DirectiveMetadata;
}(metadata_1.InjectableMetadata);
exports.DirectiveMetadata = DirectiveMetadata;
var ComponentMetadata = function(_super) {
__extends(ComponentMetadata, _super);
function ComponentMetadata(_a) {
var _b = _a === void 0 ? {} : _a, selector = _b.selector, inputs = _b.inputs, outputs = _b.outputs, properties = _b.properties, events = _b.events, host = _b.host, exportAs = _b.exportAs, moduleId = _b.moduleId, bindings = _b.bindings, providers = _b.providers, viewBindings = _b.viewBindings, viewProviders = _b.viewProviders, _c = _b.changeDetection, changeDetection = _c === void 0 ? constants_1.ChangeDetectionStrategy.Default : _c, queries = _b.queries, templateUrl = _b.templateUrl, template = _b.template, styleUrls = _b.styleUrls, styles = _b.styles, directives = _b.directives, pipes = _b.pipes, encapsulation = _b.encapsulation;
_super.call(this, {
selector: selector,
inputs: inputs,
outputs: outputs,
properties: properties,
events: events,
host: host,
exportAs: exportAs,
bindings: bindings,
providers: providers,
queries: queries
});
this.changeDetection = changeDetection;
this._viewProviders = viewProviders;
this._viewBindings = viewBindings;
this.templateUrl = templateUrl;
this.template = template;
this.styleUrls = styleUrls;
this.styles = styles;
this.directives = directives;
this.pipes = pipes;
this.encapsulation = encapsulation;
this.moduleId = moduleId;
}
Object.defineProperty(ComponentMetadata.prototype, "viewProviders", {
get: function() {
return lang_1.isPresent(this._viewBindings) && this._viewBindings.length > 0 ? this._viewBindings : this._viewProviders;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentMetadata.prototype, "viewBindings", {
get: function() {
return this.viewProviders;
},
enumerable: true,
configurable: true
});
return ComponentMetadata;
}(DirectiveMetadata);
exports.ComponentMetadata = ComponentMetadata;
var PipeMetadata = function(_super) {
__extends(PipeMetadata, _super);
function PipeMetadata(_a) {
var name = _a.name, pure = _a.pure;
_super.call(this);
this.name = name;
this._pure = pure;
}
Object.defineProperty(PipeMetadata.prototype, "pure", {
get: function() {
return lang_1.isPresent(this._pure) ? this._pure : true;
},
enumerable: true,
configurable: true
});
return PipeMetadata;
}(metadata_1.InjectableMetadata);
exports.PipeMetadata = PipeMetadata;
var InputMetadata = function() {
function InputMetadata(bindingPropertyName) {
this.bindingPropertyName = bindingPropertyName;
}
return InputMetadata;
}();
exports.InputMetadata = InputMetadata;
var OutputMetadata = function() {
function OutputMetadata(bindingPropertyName) {
this.bindingPropertyName = bindingPropertyName;
}
return OutputMetadata;
}();
exports.OutputMetadata = OutputMetadata;
var HostBindingMetadata = function() {
function HostBindingMetadata(hostPropertyName) {
this.hostPropertyName = hostPropertyName;
}
return HostBindingMetadata;
}();
exports.HostBindingMetadata = HostBindingMetadata;
var HostListenerMetadata = function() {
function HostListenerMetadata(eventName, args) {
this.eventName = eventName;
this.args = args;
}
return HostListenerMetadata;
}();
exports.HostListenerMetadata = HostListenerMetadata;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(117);
(function(ChangeDetectorState) {
ChangeDetectorState[ChangeDetectorState["NeverChecked"] = 0] = "NeverChecked";
ChangeDetectorState[ChangeDetectorState["CheckedBefore"] = 1] = "CheckedBefore";
ChangeDetectorState[ChangeDetectorState["Errored"] = 2] = "Errored";
})(exports.ChangeDetectorState || (exports.ChangeDetectorState = {}));
var ChangeDetectorState = exports.ChangeDetectorState;
(function(ChangeDetectionStrategy) {
ChangeDetectionStrategy[ChangeDetectionStrategy["CheckOnce"] = 0] = "CheckOnce";
ChangeDetectionStrategy[ChangeDetectionStrategy["Checked"] = 1] = "Checked";
ChangeDetectionStrategy[ChangeDetectionStrategy["CheckAlways"] = 2] = "CheckAlways";
ChangeDetectionStrategy[ChangeDetectionStrategy["Detached"] = 3] = "Detached";
ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 4] = "OnPush";
ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 5] = "Default";
})(exports.ChangeDetectionStrategy || (exports.ChangeDetectionStrategy = {}));
var ChangeDetectionStrategy = exports.ChangeDetectionStrategy;
exports.CHANGE_DETECTION_STRATEGY_VALUES = [ ChangeDetectionStrategy.CheckOnce, ChangeDetectionStrategy.Checked, ChangeDetectionStrategy.CheckAlways, ChangeDetectionStrategy.Detached, ChangeDetectionStrategy.OnPush, ChangeDetectionStrategy.Default ];
exports.CHANGE_DETECTOR_STATE_VALUES = [ ChangeDetectorState.NeverChecked, ChangeDetectorState.CheckedBefore, ChangeDetectorState.Errored ];
function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
return lang_1.isBlank(changeDetectionStrategy) || changeDetectionStrategy === ChangeDetectionStrategy.Default;
}
exports.isDefaultChangeDetectionStrategy = isDefaultChangeDetectionStrategy;
}, function(module, exports) {
"use strict";
(function(ViewEncapsulation) {
ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
})(exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));
var ViewEncapsulation = exports.ViewEncapsulation;
exports.VIEW_ENCAPSULATION_VALUES = [ ViewEncapsulation.Emulated, ViewEncapsulation.Native, ViewEncapsulation.None ];
var ViewMetadata = function() {
function ViewMetadata(_a) {
var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, directives = _b.directives, pipes = _b.pipes, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls;
this.templateUrl = templateUrl;
this.template = template;
this.styleUrls = styleUrls;
this.styles = styles;
this.directives = directives;
this.pipes = pipes;
this.encapsulation = encapsulation;
}
return ViewMetadata;
}();
exports.ViewMetadata = ViewMetadata;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(117);
var _nextClassId = 0;
function extractAnnotation(annotation) {
if (lang_1.isFunction(annotation) && annotation.hasOwnProperty("annotation")) {
annotation = annotation.annotation;
}
return annotation;
}
function applyParams(fnOrArray, key) {
if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function || fnOrArray === Number || fnOrArray === Array) {
throw new Error("Can not use native " + lang_1.stringify(fnOrArray) + " as constructor");
}
if (lang_1.isFunction(fnOrArray)) {
return fnOrArray;
} else if (fnOrArray instanceof Array) {
var annotations = fnOrArray;
var fn = fnOrArray[fnOrArray.length - 1];
if (!lang_1.isFunction(fn)) {
throw new Error("Last position of Class method array must be Function in key " + key + " was '" + lang_1.stringify(fn) + "'");
}
var annoLength = annotations.length - 1;
if (annoLength != fn.length) {
throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + lang_1.stringify(fn));
}
var paramsAnnotations = [];
for (var i = 0, ii = annotations.length - 1; i < ii; i++) {
var paramAnnotations = [];
paramsAnnotations.push(paramAnnotations);
var annotation = annotations[i];
if (annotation instanceof Array) {
for (var j = 0; j < annotation.length; j++) {
paramAnnotations.push(extractAnnotation(annotation[j]));
}
} else if (lang_1.isFunction(annotation)) {
paramAnnotations.push(extractAnnotation(annotation));
} else {
paramAnnotations.push(annotation);
}
}
Reflect.defineMetadata("parameters", paramsAnnotations, fn);
return fn;
} else {
throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + lang_1.stringify(fnOrArray) + "'");
}
}
function Class(clsDef) {
var constructor = applyParams(clsDef.hasOwnProperty("constructor") ? clsDef.constructor : undefined, "constructor");
var proto = constructor.prototype;
if (clsDef.hasOwnProperty("extends")) {
if (lang_1.isFunction(clsDef.extends)) {
constructor.prototype = proto = Object.create(clsDef.extends.prototype);
} else {
throw new Error("Class definition 'extends' property must be a constructor function was: " + lang_1.stringify(clsDef.extends));
}
}
for (var key in clsDef) {
if (key != "extends" && key != "prototype" && clsDef.hasOwnProperty(key)) {
proto[key] = applyParams(clsDef[key], key);
}
}
if (this && this.annotations instanceof Array) {
Reflect.defineMetadata("annotations", this.annotations, constructor);
}
if (!constructor["name"]) {
constructor["overriddenName"] = "class" + _nextClassId++;
}
return constructor;
}
exports.Class = Class;
var Reflect = lang_1.global.Reflect;
(function checkReflect() {
if (!(Reflect && Reflect.getMetadata)) {
throw "reflect-metadata shim is required when using class decorators";
}
})();
function makeDecorator(annotationCls, chainFn) {
if (chainFn === void 0) {
chainFn = null;
}
function DecoratorFactory(objOrType) {
var annotationInstance = new annotationCls(objOrType);
if (this instanceof annotationCls) {
return annotationInstance;
} else {
var chainAnnotation = lang_1.isFunction(this) && this.annotations instanceof Array ? this.annotations : [];
chainAnnotation.push(annotationInstance);
var TypeDecorator = function TypeDecorator(cls) {
var annotations = Reflect.getOwnMetadata("annotations", cls);
annotations = annotations || [];
annotations.push(annotationInstance);
Reflect.defineMetadata("annotations", annotations, cls);
return cls;
};
TypeDecorator.annotations = chainAnnotation;
TypeDecorator.Class = Class;
if (chainFn) chainFn(TypeDecorator);
return TypeDecorator;
}
}
DecoratorFactory.prototype = Object.create(annotationCls.prototype);
DecoratorFactory.annotationCls = annotationCls;
return DecoratorFactory;
}
exports.makeDecorator = makeDecorator;
function makeParamDecorator(annotationCls) {
function ParamDecoratorFactory() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
var annotationInstance = Object.create(annotationCls.prototype);
annotationCls.apply(annotationInstance, args);
if (this instanceof annotationCls) {
return annotationInstance;
} else {
ParamDecorator.annotation = annotationInstance;
return ParamDecorator;
}
function ParamDecorator(cls, unusedKey, index) {
var parameters = Reflect.getMetadata("parameters", cls);
parameters = parameters || [];
while (parameters.length <= index) {
parameters.push(null);
}
parameters[index] = parameters[index] || [];
var annotationsForParam = parameters[index];
annotationsForParam.push(annotationInstance);
Reflect.defineMetadata("parameters", parameters, cls);
return cls;
}
}
ParamDecoratorFactory.prototype = Object.create(annotationCls.prototype);
ParamDecoratorFactory.annotationCls = annotationCls;
return ParamDecoratorFactory;
}
exports.makeParamDecorator = makeParamDecorator;
function makePropDecorator(annotationCls) {
function PropDecoratorFactory() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
var decoratorInstance = Object.create(annotationCls.prototype);
annotationCls.apply(decoratorInstance, args);
if (this instanceof annotationCls) {
return decoratorInstance;
} else {
return function PropDecorator(target, name) {
var meta = Reflect.getOwnMetadata("propMetadata", target.constructor);
meta = meta || {};
meta[name] = meta[name] || [];
meta[name].unshift(decoratorInstance);
Reflect.defineMetadata("propMetadata", meta, target.constructor);
};
}
}
PropDecoratorFactory.prototype = Object.create(annotationCls.prototype);
PropDecoratorFactory.annotationCls = annotationCls;
return PropDecoratorFactory;
}
exports.makePropDecorator = makePropDecorator;
}, function(module, exports, __webpack_require__) {
"use strict";
var decorators_1 = __webpack_require__(126);
exports.Class = decorators_1.Class;
}, function(module, exports, __webpack_require__) {
"use strict";
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var metadata_1 = __webpack_require__(121);
exports.InjectMetadata = metadata_1.InjectMetadata;
exports.OptionalMetadata = metadata_1.OptionalMetadata;
exports.InjectableMetadata = metadata_1.InjectableMetadata;
exports.SelfMetadata = metadata_1.SelfMetadata;
exports.HostMetadata = metadata_1.HostMetadata;
exports.SkipSelfMetadata = metadata_1.SkipSelfMetadata;
exports.DependencyMetadata = metadata_1.DependencyMetadata;
__export(__webpack_require__(129));
var forward_ref_1 = __webpack_require__(122);
exports.forwardRef = forward_ref_1.forwardRef;
exports.resolveForwardRef = forward_ref_1.resolveForwardRef;
var injector_1 = __webpack_require__(130);
exports.Injector = injector_1.Injector;
var reflective_injector_1 = __webpack_require__(135);
exports.ReflectiveInjector = reflective_injector_1.ReflectiveInjector;
var provider_1 = __webpack_require__(143);
exports.Binding = provider_1.Binding;
exports.ProviderBuilder = provider_1.ProviderBuilder;
exports.bind = provider_1.bind;
exports.Provider = provider_1.Provider;
exports.provide = provider_1.provide;
var reflective_provider_1 = __webpack_require__(136);
exports.ResolvedReflectiveFactory = reflective_provider_1.ResolvedReflectiveFactory;
exports.ReflectiveDependency = reflective_provider_1.ReflectiveDependency;
var reflective_key_1 = __webpack_require__(141);
exports.ReflectiveKey = reflective_key_1.ReflectiveKey;
var reflective_exceptions_1 = __webpack_require__(142);
exports.NoProviderError = reflective_exceptions_1.NoProviderError;
exports.AbstractProviderError = reflective_exceptions_1.AbstractProviderError;
exports.CyclicDependencyError = reflective_exceptions_1.CyclicDependencyError;
exports.InstantiationError = reflective_exceptions_1.InstantiationError;
exports.InvalidProviderError = reflective_exceptions_1.InvalidProviderError;
exports.NoAnnotationError = reflective_exceptions_1.NoAnnotationError;
exports.OutOfBoundsError = reflective_exceptions_1.OutOfBoundsError;
var opaque_token_1 = __webpack_require__(145);
exports.OpaqueToken = opaque_token_1.OpaqueToken;
}, function(module, exports, __webpack_require__) {
"use strict";
var metadata_1 = __webpack_require__(121);
var decorators_1 = __webpack_require__(126);
exports.Inject = decorators_1.makeParamDecorator(metadata_1.InjectMetadata);
exports.Optional = decorators_1.makeParamDecorator(metadata_1.OptionalMetadata);
exports.Injectable = decorators_1.makeDecorator(metadata_1.InjectableMetadata);
exports.Self = decorators_1.makeParamDecorator(metadata_1.SelfMetadata);
exports.Host = decorators_1.makeParamDecorator(metadata_1.HostMetadata);
exports.SkipSelf = decorators_1.makeParamDecorator(metadata_1.SkipSelfMetadata);
}, function(module, exports, __webpack_require__) {
"use strict";
var exceptions_1 = __webpack_require__(131);
var _THROW_IF_NOT_FOUND = new Object();
exports.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
var Injector = function() {
function Injector() {}
Injector.prototype.get = function(token, notFoundValue) {
return exceptions_1.unimplemented();
};
Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
return Injector;
}();
exports.Injector = Injector;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var base_wrapped_exception_1 = __webpack_require__(132);
var exception_handler_1 = __webpack_require__(133);
var exception_handler_2 = __webpack_require__(133);
exports.ExceptionHandler = exception_handler_2.ExceptionHandler;
var BaseException = function(_super) {
__extends(BaseException, _super);
function BaseException(message) {
if (message === void 0) {
message = "--";
}
_super.call(this, message);
this.message = message;
this.stack = new Error(message).stack;
}
BaseException.prototype.toString = function() {
return this.message;
};
return BaseException;
}(Error);
exports.BaseException = BaseException;
var WrappedException = function(_super) {
__extends(WrappedException, _super);
function WrappedException(_wrapperMessage, _originalException, _originalStack, _context) {
_super.call(this, _wrapperMessage);
this._wrapperMessage = _wrapperMessage;
this._originalException = _originalException;
this._originalStack = _originalStack;
this._context = _context;
this._wrapperStack = new Error(_wrapperMessage).stack;
}
Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
get: function() {
return this._wrapperMessage;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "wrapperStack", {
get: function() {
return this._wrapperStack;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "originalException", {
get: function() {
return this._originalException;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "originalStack", {
get: function() {
return this._originalStack;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "context", {
get: function() {
return this._context;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "message", {
get: function() {
return exception_handler_1.ExceptionHandler.exceptionToString(this);
},
enumerable: true,
configurable: true
});
WrappedException.prototype.toString = function() {
return this.message;
};
return WrappedException;
}(base_wrapped_exception_1.BaseWrappedException);
exports.WrappedException = WrappedException;
function makeTypeError(message) {
return new TypeError(message);
}
exports.makeTypeError = makeTypeError;
function unimplemented() {
throw new BaseException("unimplemented");
}
exports.unimplemented = unimplemented;
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BaseWrappedException = function(_super) {
__extends(BaseWrappedException, _super);
function BaseWrappedException(message) {
_super.call(this, message);
}
Object.defineProperty(BaseWrappedException.prototype, "wrapperMessage", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "wrapperStack", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "originalException", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "originalStack", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "context", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "message", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
return BaseWrappedException;
}(Error);
exports.BaseWrappedException = BaseWrappedException;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(117);
var base_wrapped_exception_1 = __webpack_require__(132);
var collection_1 = __webpack_require__(134);
var _ArrayLogger = function() {
function _ArrayLogger() {
this.res = [];
}
_ArrayLogger.prototype.log = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logError = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logGroup = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logGroupEnd = function() {};
return _ArrayLogger;
}();
var ExceptionHandler = function() {
function ExceptionHandler(_logger, _rethrowException) {
if (_rethrowException === void 0) {
_rethrowException = true;
}
this._logger = _logger;
this._rethrowException = _rethrowException;
}
ExceptionHandler.exceptionToString = function(exception, stackTrace, reason) {
if (stackTrace === void 0) {
stackTrace = null;
}
if (reason === void 0) {
reason = null;
}
var l = new _ArrayLogger();
var e = new ExceptionHandler(l, false);
e.call(exception, stackTrace, reason);
return l.res.join("\n");
};
ExceptionHandler.prototype.call = function(exception, stackTrace, reason) {
if (stackTrace === void 0) {
stackTrace = null;
}
if (reason === void 0) {
reason = null;
}
var originalException = this._findOriginalException(exception);
var originalStack = this._findOriginalStack(exception);
var context = this._findContext(exception);
this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
this._logger.logError("STACKTRACE:");
this._logger.logError(this._longStackTrace(stackTrace));
}
if (lang_1.isPresent(reason)) {
this._logger.logError("REASON: " + reason);
}
if (lang_1.isPresent(originalException)) {
this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
}
if (lang_1.isPresent(originalStack)) {
this._logger.logError("ORIGINAL STACKTRACE:");
this._logger.logError(this._longStackTrace(originalStack));
}
if (lang_1.isPresent(context)) {
this._logger.logError("ERROR CONTEXT:");
this._logger.logError(context);
}
this._logger.logGroupEnd();
if (this._rethrowException) throw exception;
};
ExceptionHandler.prototype._extractMessage = function(exception) {
return exception instanceof base_wrapped_exception_1.BaseWrappedException ? exception.wrapperMessage : exception.toString();
};
ExceptionHandler.prototype._longStackTrace = function(stackTrace) {
return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join("\n\n-----async gap-----\n") : stackTrace.toString();
};
ExceptionHandler.prototype._findContext = function(exception) {
try {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
return lang_1.isPresent(exception.context) ? exception.context : this._findContext(exception.originalException);
} catch (e) {
return null;
}
};
ExceptionHandler.prototype._findOriginalException = function(exception) {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
var e = exception.originalException;
while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
e = e.originalException;
}
return e;
};
ExceptionHandler.prototype._findOriginalStack = function(exception) {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
var e = exception;
var stack = exception.originalStack;
while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
e = e.originalException;
if (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
stack = e.originalStack;
}
}
return stack;
};
return ExceptionHandler;
}();
exports.ExceptionHandler = ExceptionHandler;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(117);
exports.Map = lang_1.global.Map;
exports.Set = lang_1.global.Set;
var createMapFromPairs = function() {
try {
if (new exports.Map([ [ 1, 2 ] ]).size === 1) {
return function createMapFromPairs(pairs) {
return new exports.Map(pairs);
};
}
} catch (e) {}
return function createMapAndPopulateFromPairs(pairs) {
var map = new exports.Map();
for (var i = 0; i < pairs.length; i++) {
var pair = pairs[i];
map.set(pair[0], pair[1]);
}
return map;
};
}();
var createMapFromMap = function() {
try {
if (new exports.Map(new exports.Map())) {
return function createMapFromMap(m) {
return new exports.Map(m);
};
}
} catch (e) {}
return function createMapAndPopulateFromMap(m) {
var map = new exports.Map();
m.forEach(function(v, k) {
map.set(k, v);
});
return map;
};
}();
var _clearValues = function() {
if (new exports.Map().keys().next) {
return function _clearValues(m) {
var keyIterator = m.keys();
var k;
while (!(k = keyIterator.next()).done) {
m.set(k.value, null);
}
};
} else {
return function _clearValuesWithForeEach(m) {
m.forEach(function(v, k) {
m.set(k, null);
});
};
}
}();
var _arrayFromMap = function() {
try {
if (new exports.Map().values().next) {
return function createArrayFromMap(m, getValues) {
return getValues ? Array.from(m.values()) : Array.from(m.keys());
};
}
} catch (e) {}
return function createArrayFromMapWithForeach(m, getValues) {
var res = ListWrapper.createFixedSize(m.size), i = 0;
m.forEach(function(v, k) {
res[i] = getValues ? v : k;
i++;
});
return res;
};
}();
var MapWrapper = function() {
function MapWrapper() {}
MapWrapper.clone = function(m) {
return createMapFromMap(m);
};
MapWrapper.createFromStringMap = function(stringMap) {
var result = new exports.Map();
for (var prop in stringMap) {
result.set(prop, stringMap[prop]);
}
return result;
};
MapWrapper.toStringMap = function(m) {
var r = {};
m.forEach(function(v, k) {
return r[k] = v;
});
return r;
};
MapWrapper.createFromPairs = function(pairs) {
return createMapFromPairs(pairs);
};
MapWrapper.clearValues = function(m) {
_clearValues(m);
};
MapWrapper.iterable = function(m) {
return m;
};
MapWrapper.keys = function(m) {
return _arrayFromMap(m, false);
};
MapWrapper.values = function(m) {
return _arrayFromMap(m, true);
};
return MapWrapper;
}();
exports.MapWrapper = MapWrapper;
var StringMapWrapper = function() {
function StringMapWrapper() {}
StringMapWrapper.create = function() {
return {};
};
StringMapWrapper.contains = function(map, key) {
return map.hasOwnProperty(key);
};
StringMapWrapper.get = function(map, key) {
return map.hasOwnProperty(key) ? map[key] : undefined;
};
StringMapWrapper.set = function(map, key, value) {
map[key] = value;
};
StringMapWrapper.keys = function(map) {
return Object.keys(map);
};
StringMapWrapper.values = function(map) {
return Object.keys(map).reduce(function(r, a) {
r.push(map[a]);
return r;
}, []);
};
StringMapWrapper.isEmpty = function(map) {
for (var prop in map) {
return false;
}
return true;
};
StringMapWrapper.delete = function(map, key) {
delete map[key];
};
StringMapWrapper.forEach = function(map, callback) {
for (var prop in map) {
if (map.hasOwnProperty(prop)) {
callback(map[prop], prop);
}
}
};
StringMapWrapper.merge = function(m1, m2) {
var m = {};
for (var attr in m1) {
if (m1.hasOwnProperty(attr)) {
m[attr] = m1[attr];
}
}
for (var attr in m2) {
if (m2.hasOwnProperty(attr)) {
m[attr] = m2[attr];
}
}
return m;
};
StringMapWrapper.equals = function(m1, m2) {
var k1 = Object.keys(m1);
var k2 = Object.keys(m2);
if (k1.length != k2.length) {
return false;
}
var key;
for (var i = 0; i < k1.length; i++) {
key = k1[i];
if (m1[key] !== m2[key]) {
return false;
}
}
return true;
};
return StringMapWrapper;
}();
exports.StringMapWrapper = StringMapWrapper;
var ListWrapper = function() {
function ListWrapper() {}
ListWrapper.createFixedSize = function(size) {
return new Array(size);
};
ListWrapper.createGrowableSize = function(size) {
return new Array(size);
};
ListWrapper.clone = function(array) {
return array.slice(0);
};
ListWrapper.forEachWithIndex = function(array, fn) {
for (var i = 0; i < array.length; i++) {
fn(array[i], i);
}
};
ListWrapper.first = function(array) {
if (!array) return null;
return array[0];
};
ListWrapper.last = function(array) {
if (!array || array.length == 0) return null;
return array[array.length - 1];
};
ListWrapper.indexOf = function(array, value, startIndex) {
if (startIndex === void 0) {
startIndex = 0;
}
return array.indexOf(value, startIndex);
};
ListWrapper.contains = function(list, el) {
return list.indexOf(el) !== -1;
};
ListWrapper.reversed = function(array) {
var a = ListWrapper.clone(array);
return a.reverse();
};
ListWrapper.concat = function(a, b) {
return a.concat(b);
};
ListWrapper.insert = function(list, index, value) {
list.splice(index, 0, value);
};
ListWrapper.removeAt = function(list, index) {
var res = list[index];
list.splice(index, 1);
return res;
};
ListWrapper.removeAll = function(list, items) {
for (var i = 0; i < items.length; ++i) {
var index = list.indexOf(items[i]);
list.splice(index, 1);
}
};
ListWrapper.remove = function(list, el) {
var index = list.indexOf(el);
if (index > -1) {
list.splice(index, 1);
return true;
}
return false;
};
ListWrapper.clear = function(list) {
list.length = 0;
};
ListWrapper.isEmpty = function(list) {
return list.length == 0;
};
ListWrapper.fill = function(list, value, start, end) {
if (start === void 0) {
start = 0;
}
if (end === void 0) {
end = null;
}
list.fill(value, start, end === null ? list.length : end);
};
ListWrapper.equals = function(a, b) {
if (a.length != b.length) return false;
for (var i = 0; i < a.length; ++i) {
if (a[i] !== b[i]) return false;
}
return true;
};
ListWrapper.slice = function(l, from, to) {
if (from === void 0) {
from = 0;
}
if (to === void 0) {
to = null;
}
return l.slice(from, to === null ? undefined : to);
};
ListWrapper.splice = function(l, from, length) {
return l.splice(from, length);
};
ListWrapper.sort = function(l, compareFn) {
if (lang_1.isPresent(compareFn)) {
l.sort(compareFn);
} else {
l.sort();
}
};
ListWrapper.toString = function(l) {
return l.toString();
};
ListWrapper.toJSON = function(l) {
return JSON.stringify(l);
};
ListWrapper.maximum = function(list, predicate) {
if (list.length == 0) {
return null;
}
var solution = null;
var maxValue = -Infinity;
for (var index = 0; index < list.length; index++) {
var candidate = list[index];
if (lang_1.isBlank(candidate)) {
continue;
}
var candidateValue = predicate(candidate);
if (candidateValue > maxValue) {
solution = candidate;
maxValue = candidateValue;
}
}
return solution;
};
ListWrapper.flatten = function(list) {
var target = [];
_flattenArray(list, target);
return target;
};
ListWrapper.addAll = function(list, source) {
for (var i = 0; i < source.length; i++) {
list.push(source[i]);
}
};
return ListWrapper;
}();
exports.ListWrapper = ListWrapper;
function _flattenArray(source, target) {
if (lang_1.isPresent(source)) {
for (var i = 0; i < source.length; i++) {
var item = source[i];
if (lang_1.isArray(item)) {
_flattenArray(item, target);
} else {
target.push(item);
}
}
}
return target;
}
function isListLikeIterable(obj) {
if (!lang_1.isJsObject(obj)) return false;
return lang_1.isArray(obj) || !(obj instanceof exports.Map) && lang_1.getSymbolIterator() in obj;
}
exports.isListLikeIterable = isListLikeIterable;
function areIterablesEqual(a, b, comparator) {
var iterator1 = a[lang_1.getSymbolIterator()]();
var iterator2 = b[lang_1.getSymbolIterator()]();
while (true) {
var item1 = iterator1.next();
var item2 = iterator2.next();
if (item1.done && item2.done) return true;
if (item1.done || item2.done) return false;
if (!comparator(item1.value, item2.value)) return false;
}
}
exports.areIterablesEqual = areIterablesEqual;
function iterateListLike(obj, fn) {
if (lang_1.isArray(obj)) {
for (var i = 0; i < obj.length; i++) {
fn(obj[i]);
}
} else {
var iterator = obj[lang_1.getSymbolIterator()]();
var item;
while (!(item = iterator.next()).done) {
fn(item.value);
}
}
}
exports.iterateListLike = iterateListLike;
var createSetFromList = function() {
var test = new exports.Set([ 1, 2, 3 ]);
if (test.size === 3) {
return function createSetFromList(lst) {
return new exports.Set(lst);
};
} else {
return function createSetAndPopulateFromList(lst) {
var res = new exports.Set(lst);
if (res.size !== lst.length) {
for (var i = 0; i < lst.length; i++) {
res.add(lst[i]);
}
}
return res;
};
}
}();
var SetWrapper = function() {
function SetWrapper() {}
SetWrapper.createFromList = function(lst) {
return createSetFromList(lst);
};
SetWrapper.has = function(s, key) {
return s.has(key);
};
SetWrapper.delete = function(m, k) {
m.delete(k);
};
return SetWrapper;
}();
exports.SetWrapper = SetWrapper;
}, function(module, exports, __webpack_require__) {
"use strict";
var collection_1 = __webpack_require__(134);
var reflective_provider_1 = __webpack_require__(136);
var reflective_exceptions_1 = __webpack_require__(142);
var exceptions_1 = __webpack_require__(131);
var reflective_key_1 = __webpack_require__(141);
var metadata_1 = __webpack_require__(121);
var injector_1 = __webpack_require__(130);
var __unused;
var _MAX_CONSTRUCTION_COUNTER = 10;
var UNDEFINED = new Object();
var ReflectiveProtoInjectorInlineStrategy = function() {
function ReflectiveProtoInjectorInlineStrategy(protoEI, providers) {
this.provider0 = null;
this.provider1 = null;
this.provider2 = null;
this.provider3 = null;
this.provider4 = null;
this.provider5 = null;
this.provider6 = null;
this.provider7 = null;
this.provider8 = null;
this.provider9 = null;
this.keyId0 = null;
this.keyId1 = null;
this.keyId2 = null;
this.keyId3 = null;
this.keyId4 = null;
this.keyId5 = null;
this.keyId6 = null;
this.keyId7 = null;
this.keyId8 = null;
this.keyId9 = null;
var length = providers.length;
if (length > 0) {
this.provider0 = providers[0];
this.keyId0 = providers[0].key.id;
}
if (length > 1) {
this.provider1 = providers[1];
this.keyId1 = providers[1].key.id;
}
if (length > 2) {
this.provider2 = providers[2];
this.keyId2 = providers[2].key.id;
}
if (length > 3) {
this.provider3 = providers[3];
this.keyId3 = providers[3].key.id;
}
if (length > 4) {
this.provider4 = providers[4];
this.keyId4 = providers[4].key.id;
}
if (length > 5) {
this.provider5 = providers[5];
this.keyId5 = providers[5].key.id;
}
if (length > 6) {
this.provider6 = providers[6];
this.keyId6 = providers[6].key.id;
}
if (length > 7) {
this.provider7 = providers[7];
this.keyId7 = providers[7].key.id;
}
if (length > 8) {
this.provider8 = providers[8];
this.keyId8 = providers[8].key.id;
}
if (length > 9) {
this.provider9 = providers[9];
this.keyId9 = providers[9].key.id;
}
}
ReflectiveProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function(index) {
if (index == 0) return this.provider0;
if (index == 1) return this.provider1;
if (index == 2) return this.provider2;
if (index == 3) return this.provider3;
if (index == 4) return this.provider4;
if (index == 5) return this.provider5;
if (index == 6) return this.provider6;
if (index == 7) return this.provider7;
if (index == 8) return this.provider8;
if (index == 9) return this.provider9;
throw new reflective_exceptions_1.OutOfBoundsError(index);
};
ReflectiveProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function(injector) {
return new ReflectiveInjectorInlineStrategy(injector, this);
};
return ReflectiveProtoInjectorInlineStrategy;
}();
exports.ReflectiveProtoInjectorInlineStrategy = ReflectiveProtoInjectorInlineStrategy;
var ReflectiveProtoInjectorDynamicStrategy = function() {
function ReflectiveProtoInjectorDynamicStrategy(protoInj, providers) {
this.providers = providers;
var len = providers.length;
this.keyIds = collection_1.ListWrapper.createFixedSize(len);
for (var i = 0; i < len; i++) {
this.keyIds[i] = providers[i].key.id;
}
}
ReflectiveProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function(index) {
if (index < 0 || index >= this.providers.length) {
throw new reflective_exceptions_1.OutOfBoundsError(index);
}
return this.providers[index];
};
ReflectiveProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function(ei) {
return new ReflectiveInjectorDynamicStrategy(this, ei);
};
return ReflectiveProtoInjectorDynamicStrategy;
}();
exports.ReflectiveProtoInjectorDynamicStrategy = ReflectiveProtoInjectorDynamicStrategy;
var ReflectiveProtoInjector = function() {
function ReflectiveProtoInjector(providers) {
this.numberOfProviders = providers.length;
this._strategy = providers.length > _MAX_CONSTRUCTION_COUNTER ? new ReflectiveProtoInjectorDynamicStrategy(this, providers) : new ReflectiveProtoInjectorInlineStrategy(this, providers);
}
ReflectiveProtoInjector.fromResolvedProviders = function(providers) {
return new ReflectiveProtoInjector(providers);
};
ReflectiveProtoInjector.prototype.getProviderAtIndex = function(index) {
return this._strategy.getProviderAtIndex(index);
};
return ReflectiveProtoInjector;
}();
exports.ReflectiveProtoInjector = ReflectiveProtoInjector;
var ReflectiveInjectorInlineStrategy = function() {
function ReflectiveInjectorInlineStrategy(injector, protoStrategy) {
this.injector = injector;
this.protoStrategy = protoStrategy;
this.obj0 = UNDEFINED;
this.obj1 = UNDEFINED;
this.obj2 = UNDEFINED;
this.obj3 = UNDEFINED;
this.obj4 = UNDEFINED;
this.obj5 = UNDEFINED;
this.obj6 = UNDEFINED;
this.obj7 = UNDEFINED;
this.obj8 = UNDEFINED;
this.obj9 = UNDEFINED;
}
ReflectiveInjectorInlineStrategy.prototype.resetConstructionCounter = function() {
this.injector._constructionCounter = 0;
};
ReflectiveInjectorInlineStrategy.prototype.instantiateProvider = function(provider) {
return this.injector._new(provider);
};
ReflectiveInjectorInlineStrategy.prototype.getObjByKeyId = function(keyId) {
var p = this.protoStrategy;
var inj = this.injector;
if (p.keyId0 === keyId) {
if (this.obj0 === UNDEFINED) {
this.obj0 = inj._new(p.provider0);
}
return this.obj0;
}
if (p.keyId1 === keyId) {
if (this.obj1 === UNDEFINED) {
this.obj1 = inj._new(p.provider1);
}
return this.obj1;
}
if (p.keyId2 === keyId) {
if (this.obj2 === UNDEFINED) {
this.obj2 = inj._new(p.provider2);
}
return this.obj2;
}
if (p.keyId3 === keyId) {
if (this.obj3 === UNDEFINED) {
this.obj3 = inj._new(p.provider3);
}
return this.obj3;
}
if (p.keyId4 === keyId) {
if (this.obj4 === UNDEFINED) {
this.obj4 = inj._new(p.provider4);
}
return this.obj4;
}
if (p.keyId5 === keyId) {
if (this.obj5 === UNDEFINED) {
this.obj5 = inj._new(p.provider5);
}
return this.obj5;
}
if (p.keyId6 === keyId) {
if (this.obj6 === UNDEFINED) {
this.obj6 = inj._new(p.provider6);
}
return this.obj6;
}
if (p.keyId7 === keyId) {
if (this.obj7 === UNDEFINED) {
this.obj7 = inj._new(p.provider7);
}
return this.obj7;
}
if (p.keyId8 === keyId) {
if (this.obj8 === UNDEFINED) {
this.obj8 = inj._new(p.provider8);
}
return this.obj8;
}
if (p.keyId9 === keyId) {
if (this.obj9 === UNDEFINED) {
this.obj9 = inj._new(p.provider9);
}
return this.obj9;
}
return UNDEFINED;
};
ReflectiveInjectorInlineStrategy.prototype.getObjAtIndex = function(index) {
if (index == 0) return this.obj0;
if (index == 1) return this.obj1;
if (index == 2) return this.obj2;
if (index == 3) return this.obj3;
if (index == 4) return this.obj4;
if (index == 5) return this.obj5;
if (index == 6) return this.obj6;
if (index == 7) return this.obj7;
if (index == 8) return this.obj8;
if (index == 9) return this.obj9;
throw new reflective_exceptions_1.OutOfBoundsError(index);
};
ReflectiveInjectorInlineStrategy.prototype.getMaxNumberOfObjects = function() {
return _MAX_CONSTRUCTION_COUNTER;
};
return ReflectiveInjectorInlineStrategy;
}();
exports.ReflectiveInjectorInlineStrategy = ReflectiveInjectorInlineStrategy;
var ReflectiveInjectorDynamicStrategy = function() {
function ReflectiveInjectorDynamicStrategy(protoStrategy, injector) {
this.protoStrategy = protoStrategy;
this.injector = injector;
this.objs = collection_1.ListWrapper.createFixedSize(protoStrategy.providers.length);
collection_1.ListWrapper.fill(this.objs, UNDEFINED);
}
ReflectiveInjectorDynamicStrategy.prototype.resetConstructionCounter = function() {
this.injector._constructionCounter = 0;
};
ReflectiveInjectorDynamicStrategy.prototype.instantiateProvider = function(provider) {
return this.injector._new(provider);
};
ReflectiveInjectorDynamicStrategy.prototype.getObjByKeyId = function(keyId) {
var p = this.protoStrategy;
for (var i = 0; i < p.keyIds.length; i++) {
if (p.keyIds[i] === keyId) {
if (this.objs[i] === UNDEFINED) {
this.objs[i] = this.injector._new(p.providers[i]);
}
return this.objs[i];
}
}
return UNDEFINED;
};
ReflectiveInjectorDynamicStrategy.prototype.getObjAtIndex = function(index) {
if (index < 0 || index >= this.objs.length) {
throw new reflective_exceptions_1.OutOfBoundsError(index);
}
return this.objs[index];
};
ReflectiveInjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function() {
return this.objs.length;
};
return ReflectiveInjectorDynamicStrategy;
}();
exports.ReflectiveInjectorDynamicStrategy = ReflectiveInjectorDynamicStrategy;
var ReflectiveInjector = function() {
function ReflectiveInjector() {}
ReflectiveInjector.resolve = function(providers) {
return reflective_provider_1.resolveReflectiveProviders(providers);
};
ReflectiveInjector.resolveAndCreate = function(providers, parent) {
if (parent === void 0) {
parent = null;
}
var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
};
ReflectiveInjector.fromResolvedProviders = function(providers, parent) {
if (parent === void 0) {
parent = null;
}
return new ReflectiveInjector_(ReflectiveProtoInjector.fromResolvedProviders(providers), parent);
};
ReflectiveInjector.fromResolvedBindings = function(providers) {
return ReflectiveInjector.fromResolvedProviders(providers);
};
Object.defineProperty(ReflectiveInjector.prototype, "parent", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
ReflectiveInjector.prototype.debugContext = function() {
return null;
};
ReflectiveInjector.prototype.resolveAndCreateChild = function(providers) {
return exceptions_1.unimplemented();
};
ReflectiveInjector.prototype.createChildFromResolved = function(providers) {
return exceptions_1.unimplemented();
};
ReflectiveInjector.prototype.resolveAndInstantiate = function(provider) {
return exceptions_1.unimplemented();
};
ReflectiveInjector.prototype.instantiateResolved = function(provider) {
return exceptions_1.unimplemented();
};
return ReflectiveInjector;
}();
exports.ReflectiveInjector = ReflectiveInjector;
var ReflectiveInjector_ = function() {
function ReflectiveInjector_(_proto, _parent, _debugContext) {
if (_parent === void 0) {
_parent = null;
}
if (_debugContext === void 0) {
_debugContext = null;
}
this._debugContext = _debugContext;
this._constructionCounter = 0;
this._proto = _proto;
this._parent = _parent;
this._strategy = _proto._strategy.createInjectorStrategy(this);
}
ReflectiveInjector_.prototype.debugContext = function() {
return this._debugContext();
};
ReflectiveInjector_.prototype.get = function(token, notFoundValue) {
if (notFoundValue === void 0) {
notFoundValue = injector_1.THROW_IF_NOT_FOUND;
}
return this._getByKey(reflective_key_1.ReflectiveKey.get(token), null, null, notFoundValue);
};
ReflectiveInjector_.prototype.getAt = function(index) {
return this._strategy.getObjAtIndex(index);
};
Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
get: function() {
return this._parent;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ReflectiveInjector_.prototype, "internalStrategy", {
get: function() {
return this._strategy;
},
enumerable: true,
configurable: true
});
ReflectiveInjector_.prototype.resolveAndCreateChild = function(providers) {
var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
return this.createChildFromResolved(ResolvedReflectiveProviders);
};
ReflectiveInjector_.prototype.createChildFromResolved = function(providers) {
var proto = new ReflectiveProtoInjector(providers);
var inj = new ReflectiveInjector_(proto);
inj._parent = this;
return inj;
};
ReflectiveInjector_.prototype.resolveAndInstantiate = function(provider) {
return this.instantiateResolved(ReflectiveInjector.resolve([ provider ])[0]);
};
ReflectiveInjector_.prototype.instantiateResolved = function(provider) {
return this._instantiateProvider(provider);
};
ReflectiveInjector_.prototype._new = function(provider) {
if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
throw new reflective_exceptions_1.CyclicDependencyError(this, provider.key);
}
return this._instantiateProvider(provider);
};
ReflectiveInjector_.prototype._instantiateProvider = function(provider) {
if (provider.multiProvider) {
var res = collection_1.ListWrapper.createFixedSize(provider.resolvedFactories.length);
for (var i = 0; i < provider.resolvedFactories.length; ++i) {
res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
}
return res;
} else {
return this._instantiate(provider, provider.resolvedFactories[0]);
}
};
ReflectiveInjector_.prototype._instantiate = function(provider, ResolvedReflectiveFactory) {
var factory = ResolvedReflectiveFactory.factory;
var deps = ResolvedReflectiveFactory.dependencies;
var length = deps.length;
var d0;
var d1;
var d2;
var d3;
var d4;
var d5;
var d6;
var d7;
var d8;
var d9;
var d10;
var d11;
var d12;
var d13;
var d14;
var d15;
var d16;
var d17;
var d18;
var d19;
try {
d0 = length > 0 ? this._getByReflectiveDependency(provider, deps[0]) : null;
d1 = length > 1 ? this._getByReflectiveDependency(provider, deps[1]) : null;
d2 = length > 2 ? this._getByReflectiveDependency(provider, deps[2]) : null;
d3 = length > 3 ? this._getByReflectiveDependency(provider, deps[3]) : null;
d4 = length > 4 ? this._getByReflectiveDependency(provider, deps[4]) : null;
d5 = length > 5 ? this._getByReflectiveDependency(provider, deps[5]) : null;
d6 = length > 6 ? this._getByReflectiveDependency(provider, deps[6]) : null;
d7 = length > 7 ? this._getByReflectiveDependency(provider, deps[7]) : null;
d8 = length > 8 ? this._getByReflectiveDependency(provider, deps[8]) : null;
d9 = length > 9 ? this._getByReflectiveDependency(provider, deps[9]) : null;
d10 = length > 10 ? this._getByReflectiveDependency(provider, deps[10]) : null;
d11 = length > 11 ? this._getByReflectiveDependency(provider, deps[11]) : null;
d12 = length > 12 ? this._getByReflectiveDependency(provider, deps[12]) : null;
d13 = length > 13 ? this._getByReflectiveDependency(provider, deps[13]) : null;
d14 = length > 14 ? this._getByReflectiveDependency(provider, deps[14]) : null;
d15 = length > 15 ? this._getByReflectiveDependency(provider, deps[15]) : null;
d16 = length > 16 ? this._getByReflectiveDependency(provider, deps[16]) : null;
d17 = length > 17 ? this._getByReflectiveDependency(provider, deps[17]) : null;
d18 = length > 18 ? this._getByReflectiveDependency(provider, deps[18]) : null;
d19 = length > 19 ? this._getByReflectiveDependency(provider, deps[19]) : null;
} catch (e) {
if (e instanceof reflective_exceptions_1.AbstractProviderError || e instanceof reflective_exceptions_1.InstantiationError) {
e.addKey(this, provider.key);
}
throw e;
}
var obj;
try {
switch (length) {
case 0:
obj = factory();
break;

case 1:
obj = factory(d0);
break;

case 2:
obj = factory(d0, d1);
break;

case 3:
obj = factory(d0, d1, d2);
break;

case 4:
obj = factory(d0, d1, d2, d3);
break;

case 5:
obj = factory(d0, d1, d2, d3, d4);
break;

case 6:
obj = factory(d0, d1, d2, d3, d4, d5);
break;

case 7:
obj = factory(d0, d1, d2, d3, d4, d5, d6);
break;

case 8:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
break;

case 9:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
break;

case 10:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
break;

case 11:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
break;

case 12:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
break;

case 13:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
break;

case 14:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
break;

case 15:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
break;

case 16:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
break;

case 17:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
break;

case 18:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
break;

case 19:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
break;

case 20:
obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
break;

default:
throw new exceptions_1.BaseException("Cannot instantiate '" + provider.key.displayName + "' because it has more than 20 dependencies");
}
} catch (e) {
throw new reflective_exceptions_1.InstantiationError(this, e, e.stack, provider.key);
}
return obj;
};
ReflectiveInjector_.prototype._getByReflectiveDependency = function(provider, dep) {
return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional ? null : injector_1.THROW_IF_NOT_FOUND);
};
ReflectiveInjector_.prototype._getByKey = function(key, lowerBoundVisibility, upperBoundVisibility, notFoundValue) {
if (key === INJECTOR_KEY) {
return this;
}
if (upperBoundVisibility instanceof metadata_1.SelfMetadata) {
return this._getByKeySelf(key, notFoundValue);
} else {
return this._getByKeyDefault(key, notFoundValue, lowerBoundVisibility);
}
};
ReflectiveInjector_.prototype._throwOrNull = function(key, notFoundValue) {
if (notFoundValue !== injector_1.THROW_IF_NOT_FOUND) {
return notFoundValue;
} else {
throw new reflective_exceptions_1.NoProviderError(this, key);
}
};
ReflectiveInjector_.prototype._getByKeySelf = function(key, notFoundValue) {
var obj = this._strategy.getObjByKeyId(key.id);
return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue);
};
ReflectiveInjector_.prototype._getByKeyDefault = function(key, notFoundValue, lowerBoundVisibility) {
var inj;
if (lowerBoundVisibility instanceof metadata_1.SkipSelfMetadata) {
inj = this._parent;
} else {
inj = this;
}
while (inj instanceof ReflectiveInjector_) {
var inj_ = inj;
var obj = inj_._strategy.getObjByKeyId(key.id);
if (obj !== UNDEFINED) return obj;
inj = inj_._parent;
}
if (inj !== null) {
return inj.get(key.token, notFoundValue);
} else {
return this._throwOrNull(key, notFoundValue);
}
};
Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
get: function() {
return "ReflectiveInjector(providers: [" + _mapProviders(this, function(b) {
return ' "' + b.key.displayName + '" ';
}).join(", ") + "])";
},
enumerable: true,
configurable: true
});
ReflectiveInjector_.prototype.toString = function() {
return this.displayName;
};
return ReflectiveInjector_;
}();
exports.ReflectiveInjector_ = ReflectiveInjector_;
var INJECTOR_KEY = reflective_key_1.ReflectiveKey.get(injector_1.Injector);
function _mapProviders(injector, fn) {
var res = [];
for (var i = 0; i < injector._proto.numberOfProviders; ++i) {
res.push(fn(injector._proto.getProviderAtIndex(i)));
}
return res;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(134);
var reflection_1 = __webpack_require__(137);
var reflective_key_1 = __webpack_require__(141);
var metadata_1 = __webpack_require__(121);
var reflective_exceptions_1 = __webpack_require__(142);
var forward_ref_1 = __webpack_require__(122);
var provider_1 = __webpack_require__(143);
var provider_util_1 = __webpack_require__(144);
var ReflectiveDependency = function() {
function ReflectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
this.key = key;
this.optional = optional;
this.lowerBoundVisibility = lowerBoundVisibility;
this.upperBoundVisibility = upperBoundVisibility;
this.properties = properties;
}
ReflectiveDependency.fromKey = function(key) {
return new ReflectiveDependency(key, false, null, null, []);
};
return ReflectiveDependency;
}();
exports.ReflectiveDependency = ReflectiveDependency;
var _EMPTY_LIST = [];
var ResolvedReflectiveProvider_ = function() {
function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
this.key = key;
this.resolvedFactories = resolvedFactories;
this.multiProvider = multiProvider;
}
Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
get: function() {
return this.resolvedFactories[0];
},
enumerable: true,
configurable: true
});
return ResolvedReflectiveProvider_;
}();
exports.ResolvedReflectiveProvider_ = ResolvedReflectiveProvider_;
var ResolvedReflectiveFactory = function() {
function ResolvedReflectiveFactory(factory, dependencies) {
this.factory = factory;
this.dependencies = dependencies;
}
return ResolvedReflectiveFactory;
}();
exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;
function resolveReflectiveFactory(provider) {
var factoryFn;
var resolvedDeps;
if (lang_1.isPresent(provider.useClass)) {
var useClass = forward_ref_1.resolveForwardRef(provider.useClass);
factoryFn = reflection_1.reflector.factory(useClass);
resolvedDeps = _dependenciesFor(useClass);
} else if (lang_1.isPresent(provider.useExisting)) {
factoryFn = function(aliasInstance) {
return aliasInstance;
};
resolvedDeps = [ ReflectiveDependency.fromKey(reflective_key_1.ReflectiveKey.get(provider.useExisting)) ];
} else if (lang_1.isPresent(provider.useFactory)) {
factoryFn = provider.useFactory;
resolvedDeps = constructDependencies(provider.useFactory, provider.dependencies);
} else {
factoryFn = function() {
return provider.useValue;
};
resolvedDeps = _EMPTY_LIST;
}
return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
}
exports.resolveReflectiveFactory = resolveReflectiveFactory;
function resolveReflectiveProvider(provider) {
return new ResolvedReflectiveProvider_(reflective_key_1.ReflectiveKey.get(provider.token), [ resolveReflectiveFactory(provider) ], provider.multi);
}
exports.resolveReflectiveProvider = resolveReflectiveProvider;
function resolveReflectiveProviders(providers) {
var normalized = _normalizeProviders(providers, []);
var resolved = normalized.map(resolveReflectiveProvider);
return collection_1.MapWrapper.values(mergeResolvedReflectiveProviders(resolved, new Map()));
}
exports.resolveReflectiveProviders = resolveReflectiveProviders;
function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
for (var i = 0; i < providers.length; i++) {
var provider = providers[i];
var existing = normalizedProvidersMap.get(provider.key.id);
if (lang_1.isPresent(existing)) {
if (provider.multiProvider !== existing.multiProvider) {
throw new reflective_exceptions_1.MixingMultiProvidersWithRegularProvidersError(existing, provider);
}
if (provider.multiProvider) {
for (var j = 0; j < provider.resolvedFactories.length; j++) {
existing.resolvedFactories.push(provider.resolvedFactories[j]);
}
} else {
normalizedProvidersMap.set(provider.key.id, provider);
}
} else {
var resolvedProvider;
if (provider.multiProvider) {
resolvedProvider = new ResolvedReflectiveProvider_(provider.key, collection_1.ListWrapper.clone(provider.resolvedFactories), provider.multiProvider);
} else {
resolvedProvider = provider;
}
normalizedProvidersMap.set(provider.key.id, resolvedProvider);
}
}
return normalizedProvidersMap;
}
exports.mergeResolvedReflectiveProviders = mergeResolvedReflectiveProviders;
function _normalizeProviders(providers, res) {
providers.forEach(function(b) {
if (b instanceof lang_1.Type) {
res.push(provider_1.provide(b, {
useClass: b
}));
} else if (b instanceof provider_1.Provider) {
res.push(b);
} else if (provider_util_1.isProviderLiteral(b)) {
res.push(provider_util_1.createProvider(b));
} else if (b instanceof Array) {
_normalizeProviders(b, res);
} else if (b instanceof provider_1.ProviderBuilder) {
throw new reflective_exceptions_1.InvalidProviderError(b.token);
} else {
throw new reflective_exceptions_1.InvalidProviderError(b);
}
});
return res;
}
function constructDependencies(typeOrFunc, dependencies) {
if (lang_1.isBlank(dependencies)) {
return _dependenciesFor(typeOrFunc);
} else {
var params = dependencies.map(function(t) {
return [ t ];
});
return dependencies.map(function(t) {
return _extractToken(typeOrFunc, t, params);
});
}
}
exports.constructDependencies = constructDependencies;
function _dependenciesFor(typeOrFunc) {
var params = reflection_1.reflector.parameters(typeOrFunc);
if (lang_1.isBlank(params)) return [];
if (params.some(lang_1.isBlank)) {
throw new reflective_exceptions_1.NoAnnotationError(typeOrFunc, params);
}
return params.map(function(p) {
return _extractToken(typeOrFunc, p, params);
});
}
function _extractToken(typeOrFunc, metadata, params) {
var depProps = [];
var token = null;
var optional = false;
if (!lang_1.isArray(metadata)) {
if (metadata instanceof metadata_1.InjectMetadata) {
return _createDependency(metadata.token, optional, null, null, depProps);
} else {
return _createDependency(metadata, optional, null, null, depProps);
}
}
var lowerBoundVisibility = null;
var upperBoundVisibility = null;
for (var i = 0; i < metadata.length; ++i) {
var paramMetadata = metadata[i];
if (paramMetadata instanceof lang_1.Type) {
token = paramMetadata;
} else if (paramMetadata instanceof metadata_1.InjectMetadata) {
token = paramMetadata.token;
} else if (paramMetadata instanceof metadata_1.OptionalMetadata) {
optional = true;
} else if (paramMetadata instanceof metadata_1.SelfMetadata) {
upperBoundVisibility = paramMetadata;
} else if (paramMetadata instanceof metadata_1.HostMetadata) {
upperBoundVisibility = paramMetadata;
} else if (paramMetadata instanceof metadata_1.SkipSelfMetadata) {
lowerBoundVisibility = paramMetadata;
} else if (paramMetadata instanceof metadata_1.DependencyMetadata) {
if (lang_1.isPresent(paramMetadata.token)) {
token = paramMetadata.token;
}
depProps.push(paramMetadata);
}
}
token = forward_ref_1.resolveForwardRef(token);
if (lang_1.isPresent(token)) {
return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
} else {
throw new reflective_exceptions_1.NoAnnotationError(typeOrFunc, params);
}
}
function _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps) {
return new ReflectiveDependency(reflective_key_1.ReflectiveKey.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
}
}, function(module, exports, __webpack_require__) {
"use strict";
var reflector_1 = __webpack_require__(138);
var reflector_2 = __webpack_require__(138);
exports.Reflector = reflector_2.Reflector;
exports.ReflectionInfo = reflector_2.ReflectionInfo;
var reflection_capabilities_1 = __webpack_require__(140);
exports.reflector = new reflector_1.Reflector(new reflection_capabilities_1.ReflectionCapabilities());
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(117);
var exceptions_1 = __webpack_require__(131);
var collection_1 = __webpack_require__(134);
var reflector_reader_1 = __webpack_require__(139);
var ReflectionInfo = function() {
function ReflectionInfo(annotations, parameters, factory, interfaces, propMetadata) {
this.annotations = annotations;
this.parameters = parameters;
this.factory = factory;
this.interfaces = interfaces;
this.propMetadata = propMetadata;
}
return ReflectionInfo;
}();
exports.ReflectionInfo = ReflectionInfo;
var Reflector = function(_super) {
__extends(Reflector, _super);
function Reflector(reflectionCapabilities) {
_super.call(this);
this._injectableInfo = new collection_1.Map();
this._getters = new collection_1.Map();
this._setters = new collection_1.Map();
this._methods = new collection_1.Map();
this._usedKeys = null;
this.reflectionCapabilities = reflectionCapabilities;
}
Reflector.prototype.isReflectionEnabled = function() {
return this.reflectionCapabilities.isReflectionEnabled();
};
Reflector.prototype.trackUsage = function() {
this._usedKeys = new collection_1.Set();
};
Reflector.prototype.listUnusedKeys = function() {
var _this = this;
if (this._usedKeys == null) {
throw new exceptions_1.BaseException("Usage tracking is disabled");
}
var allTypes = collection_1.MapWrapper.keys(this._injectableInfo);
return allTypes.filter(function(key) {
return !collection_1.SetWrapper.has(_this._usedKeys, key);
});
};
Reflector.prototype.registerFunction = function(func, funcInfo) {
this._injectableInfo.set(func, funcInfo);
};
Reflector.prototype.registerType = function(type, typeInfo) {
this._injectableInfo.set(type, typeInfo);
};
Reflector.prototype.registerGetters = function(getters) {
_mergeMaps(this._getters, getters);
};
Reflector.prototype.registerSetters = function(setters) {
_mergeMaps(this._setters, setters);
};
Reflector.prototype.registerMethods = function(methods) {
_mergeMaps(this._methods, methods);
};
Reflector.prototype.factory = function(type) {
if (this._containsReflectionInfo(type)) {
var res = this._getReflectionInfo(type).factory;
return lang_1.isPresent(res) ? res : null;
} else {
return this.reflectionCapabilities.factory(type);
}
};
Reflector.prototype.parameters = function(typeOrFunc) {
if (this._injectableInfo.has(typeOrFunc)) {
var res = this._getReflectionInfo(typeOrFunc).parameters;
return lang_1.isPresent(res) ? res : [];
} else {
return this.reflectionCapabilities.parameters(typeOrFunc);
}
};
Reflector.prototype.annotations = function(typeOrFunc) {
if (this._injectableInfo.has(typeOrFunc)) {
var res = this._getReflectionInfo(typeOrFunc).annotations;
return lang_1.isPresent(res) ? res : [];
} else {
return this.reflectionCapabilities.annotations(typeOrFunc);
}
};
Reflector.prototype.propMetadata = function(typeOrFunc) {
if (this._injectableInfo.has(typeOrFunc)) {
var res = this._getReflectionInfo(typeOrFunc).propMetadata;
return lang_1.isPresent(res) ? res : {};
} else {
return this.reflectionCapabilities.propMetadata(typeOrFunc);
}
};
Reflector.prototype.interfaces = function(type) {
if (this._injectableInfo.has(type)) {
var res = this._getReflectionInfo(type).interfaces;
return lang_1.isPresent(res) ? res : [];
} else {
return this.reflectionCapabilities.interfaces(type);
}
};
Reflector.prototype.getter = function(name) {
if (this._getters.has(name)) {
return this._getters.get(name);
} else {
return this.reflectionCapabilities.getter(name);
}
};
Reflector.prototype.setter = function(name) {
if (this._setters.has(name)) {
return this._setters.get(name);
} else {
return this.reflectionCapabilities.setter(name);
}
};
Reflector.prototype.method = function(name) {
if (this._methods.has(name)) {
return this._methods.get(name);
} else {
return this.reflectionCapabilities.method(name);
}
};
Reflector.prototype._getReflectionInfo = function(typeOrFunc) {
if (lang_1.isPresent(this._usedKeys)) {
this._usedKeys.add(typeOrFunc);
}
return this._injectableInfo.get(typeOrFunc);
};
Reflector.prototype._containsReflectionInfo = function(typeOrFunc) {
return this._injectableInfo.has(typeOrFunc);
};
Reflector.prototype.importUri = function(type) {
return this.reflectionCapabilities.importUri(type);
};
return Reflector;
}(reflector_reader_1.ReflectorReader);
exports.Reflector = Reflector;
function _mergeMaps(target, config) {
collection_1.StringMapWrapper.forEach(config, function(v, k) {
return target.set(k, v);
});
}
}, function(module, exports) {
"use strict";
var ReflectorReader = function() {
function ReflectorReader() {}
return ReflectorReader;
}();
exports.ReflectorReader = ReflectorReader;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(117);
var exceptions_1 = __webpack_require__(131);
var ReflectionCapabilities = function() {
function ReflectionCapabilities(reflect) {
this._reflect = lang_1.isPresent(reflect) ? reflect : lang_1.global.Reflect;
}
ReflectionCapabilities.prototype.isReflectionEnabled = function() {
return true;
};
ReflectionCapabilities.prototype.factory = function(t) {
switch (t.length) {
case 0:
return function() {
return new t();
};

case 1:
return function(a1) {
return new t(a1);
};

case 2:
return function(a1, a2) {
return new t(a1, a2);
};

case 3:
return function(a1, a2, a3) {
return new t(a1, a2, a3);
};

case 4:
return function(a1, a2, a3, a4) {
return new t(a1, a2, a3, a4);
};

case 5:
return function(a1, a2, a3, a4, a5) {
return new t(a1, a2, a3, a4, a5);
};

case 6:
return function(a1, a2, a3, a4, a5, a6) {
return new t(a1, a2, a3, a4, a5, a6);
};

case 7:
return function(a1, a2, a3, a4, a5, a6, a7) {
return new t(a1, a2, a3, a4, a5, a6, a7);
};

case 8:
return function(a1, a2, a3, a4, a5, a6, a7, a8) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8);
};

case 9:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9);
};

case 10:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
};

case 11:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
};

case 12:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
};

case 13:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
};

case 14:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
};

case 15:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
};

case 16:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
};

case 17:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
};

case 18:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
};

case 19:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
};

case 20:
return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20) {
return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
};
}
throw new Error("Cannot create a factory for '" + lang_1.stringify(t) + "' because its constructor has more than 20 arguments");
};
ReflectionCapabilities.prototype._zipTypesAndAnnotations = function(paramTypes, paramAnnotations) {
var result;
if (typeof paramTypes === "undefined") {
result = new Array(paramAnnotations.length);
} else {
result = new Array(paramTypes.length);
}
for (var i = 0; i < result.length; i++) {
if (typeof paramTypes === "undefined") {
result[i] = [];
} else if (paramTypes[i] != Object) {
result[i] = [ paramTypes[i] ];
} else {
result[i] = [];
}
if (lang_1.isPresent(paramAnnotations) && lang_1.isPresent(paramAnnotations[i])) {
result[i] = result[i].concat(paramAnnotations[i]);
}
}
return result;
};
ReflectionCapabilities.prototype.parameters = function(typeOrFunc) {
if (lang_1.isPresent(typeOrFunc.parameters)) {
return typeOrFunc.parameters;
}
if (lang_1.isPresent(typeOrFunc.ctorParameters)) {
var ctorParameters = typeOrFunc.ctorParameters;
var paramTypes_1 = ctorParameters.map(function(ctorParam) {
return ctorParam && ctorParam.type;
});
var paramAnnotations_1 = ctorParameters.map(function(ctorParam) {
return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
});
return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);
}
if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
var paramAnnotations = this._reflect.getMetadata("parameters", typeOrFunc);
var paramTypes = this._reflect.getMetadata("design:paramtypes", typeOrFunc);
if (lang_1.isPresent(paramTypes) || lang_1.isPresent(paramAnnotations)) {
return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
}
}
var parameters = new Array(typeOrFunc.length);
parameters.fill(undefined);
return parameters;
};
ReflectionCapabilities.prototype.annotations = function(typeOrFunc) {
if (lang_1.isPresent(typeOrFunc.annotations)) {
var annotations = typeOrFunc.annotations;
if (lang_1.isFunction(annotations) && annotations.annotations) {
annotations = annotations.annotations;
}
return annotations;
}
if (lang_1.isPresent(typeOrFunc.decorators)) {
return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
}
if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
var annotations = this._reflect.getMetadata("annotations", typeOrFunc);
if (lang_1.isPresent(annotations)) return annotations;
}
return [];
};
ReflectionCapabilities.prototype.propMetadata = function(typeOrFunc) {
if (lang_1.isPresent(typeOrFunc.propMetadata)) {
var propMetadata = typeOrFunc.propMetadata;
if (lang_1.isFunction(propMetadata) && propMetadata.propMetadata) {
propMetadata = propMetadata.propMetadata;
}
return propMetadata;
}
if (lang_1.isPresent(typeOrFunc.propDecorators)) {
var propDecorators_1 = typeOrFunc.propDecorators;
var propMetadata_1 = {};
Object.keys(propDecorators_1).forEach(function(prop) {
propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
});
return propMetadata_1;
}
if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
var propMetadata = this._reflect.getMetadata("propMetadata", typeOrFunc);
if (lang_1.isPresent(propMetadata)) return propMetadata;
}
return {};
};
ReflectionCapabilities.prototype.interfaces = function(type) {
throw new exceptions_1.BaseException("JavaScript does not support interfaces");
};
ReflectionCapabilities.prototype.getter = function(name) {
return new Function("o", "return o." + name + ";");
};
ReflectionCapabilities.prototype.setter = function(name) {
return new Function("o", "v", "return o." + name + " = v;");
};
ReflectionCapabilities.prototype.method = function(name) {
var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
return new Function("o", "args", functionBody);
};
ReflectionCapabilities.prototype.importUri = function(type) {
return "./" + lang_1.stringify(type);
};
return ReflectionCapabilities;
}();
exports.ReflectionCapabilities = ReflectionCapabilities;
function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
if (!decoratorInvocations) {
return [];
}
return decoratorInvocations.map(function(decoratorInvocation) {
var decoratorType = decoratorInvocation.type;
var annotationCls = decoratorType.annotationCls;
var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
var annotation = Object.create(annotationCls.prototype);
annotationCls.apply(annotation, annotationArgs);
return annotation;
});
}
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(117);
var exceptions_1 = __webpack_require__(131);
var forward_ref_1 = __webpack_require__(122);
var ReflectiveKey = function() {
function ReflectiveKey(token, id) {
this.token = token;
this.id = id;
if (lang_1.isBlank(token)) {
throw new exceptions_1.BaseException("Token must be defined!");
}
}
Object.defineProperty(ReflectiveKey.prototype, "displayName", {
get: function() {
return lang_1.stringify(this.token);
},
enumerable: true,
configurable: true
});
ReflectiveKey.get = function(token) {
return _globalKeyRegistry.get(forward_ref_1.resolveForwardRef(token));
};
Object.defineProperty(ReflectiveKey, "numberOfKeys", {
get: function() {
return _globalKeyRegistry.numberOfKeys;
},
enumerable: true,
configurable: true
});
return ReflectiveKey;
}();
exports.ReflectiveKey = ReflectiveKey;
var KeyRegistry = function() {
function KeyRegistry() {
this._allKeys = new Map();
}
KeyRegistry.prototype.get = function(token) {
if (token instanceof ReflectiveKey) return token;
if (this._allKeys.has(token)) {
return this._allKeys.get(token);
}
var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
this._allKeys.set(token, newKey);
return newKey;
};
Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
get: function() {
return this._allKeys.size;
},
enumerable: true,
configurable: true
});
return KeyRegistry;
}();
exports.KeyRegistry = KeyRegistry;
var _globalKeyRegistry = new KeyRegistry();
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var collection_1 = __webpack_require__(134);
var lang_1 = __webpack_require__(117);
var exceptions_1 = __webpack_require__(131);
function findFirstClosedCycle(keys) {
var res = [];
for (var i = 0; i < keys.length; ++i) {
if (collection_1.ListWrapper.contains(res, keys[i])) {
res.push(keys[i]);
return res;
} else {
res.push(keys[i]);
}
}
return res;
}
function constructResolvingPath(keys) {
if (keys.length > 1) {
var reversed = findFirstClosedCycle(collection_1.ListWrapper.reversed(keys));
var tokenStrs = reversed.map(function(k) {
return lang_1.stringify(k.token);
});
return " (" + tokenStrs.join(" -> ") + ")";
} else {
return "";
}
}
var AbstractProviderError = function(_super) {
__extends(AbstractProviderError, _super);
function AbstractProviderError(injector, key, constructResolvingMessage) {
_super.call(this, "DI Exception");
this.keys = [ key ];
this.injectors = [ injector ];
this.constructResolvingMessage = constructResolvingMessage;
this.message = this.constructResolvingMessage(this.keys);
}
AbstractProviderError.prototype.addKey = function(injector, key) {
this.injectors.push(injector);
this.keys.push(key);
this.message = this.constructResolvingMessage(this.keys);
};
Object.defineProperty(AbstractProviderError.prototype, "context", {
get: function() {
return this.injectors[this.injectors.length - 1].debugContext();
},
enumerable: true,
configurable: true
});
return AbstractProviderError;
}(exceptions_1.BaseException);
exports.AbstractProviderError = AbstractProviderError;
var NoProviderError = function(_super) {
__extends(NoProviderError, _super);
function NoProviderError(injector, key) {
_super.call(this, injector, key, function(keys) {
var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
return "No provider for " + first + "!" + constructResolvingPath(keys);
});
}
return NoProviderError;
}(AbstractProviderError);
exports.NoProviderError = NoProviderError;
var CyclicDependencyError = function(_super) {
__extends(CyclicDependencyError, _super);
function CyclicDependencyError(injector, key) {
_super.call(this, injector, key, function(keys) {
return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
});
}
return CyclicDependencyError;
}(AbstractProviderError);
exports.CyclicDependencyError = CyclicDependencyError;
var InstantiationError = function(_super) {
__extends(InstantiationError, _super);
function InstantiationError(injector, originalException, originalStack, key) {
_super.call(this, "DI Exception", originalException, originalStack, null);
this.keys = [ key ];
this.injectors = [ injector ];
}
InstantiationError.prototype.addKey = function(injector, key) {
this.injectors.push(injector);
this.keys.push(key);
};
Object.defineProperty(InstantiationError.prototype, "wrapperMessage", {
get: function() {
var first = lang_1.stringify(collection_1.ListWrapper.first(this.keys).token);
return "Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
},
enumerable: true,
configurable: true
});
Object.defineProperty(InstantiationError.prototype, "causeKey", {
get: function() {
return this.keys[0];
},
enumerable: true,
configurable: true
});
Object.defineProperty(InstantiationError.prototype, "context", {
get: function() {
return this.injectors[this.injectors.length - 1].debugContext();
},
enumerable: true,
configurable: true
});
return InstantiationError;
}(exceptions_1.WrappedException);
exports.InstantiationError = InstantiationError;
var InvalidProviderError = function(_super) {
__extends(InvalidProviderError, _super);
function InvalidProviderError(provider) {
_super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " + provider.toString());
}
return InvalidProviderError;
}(exceptions_1.BaseException);
exports.InvalidProviderError = InvalidProviderError;
var NoAnnotationError = function(_super) {
__extends(NoAnnotationError, _super);
function NoAnnotationError(typeOrFunc, params) {
_super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
}
NoAnnotationError._genMessage = function(typeOrFunc, params) {
var signature = [];
for (var i = 0, ii = params.length; i < ii; i++) {
var parameter = params[i];
if (lang_1.isBlank(parameter) || parameter.length == 0) {
signature.push("?");
} else {
signature.push(parameter.map(lang_1.stringify).join(" "));
}
}
return "Cannot resolve all parameters for '" + lang_1.stringify(typeOrFunc) + "'(" + signature.join(", ") + "). " + "Make sure that all the parameters are decorated with Inject or have valid type annotations and that '" + lang_1.stringify(typeOrFunc) + "' is decorated with Injectable.";
};
return NoAnnotationError;
}(exceptions_1.BaseException);
exports.NoAnnotationError = NoAnnotationError;
var OutOfBoundsError = function(_super) {
__extends(OutOfBoundsError, _super);
function OutOfBoundsError(index) {
_super.call(this, "Index " + index + " is out-of-bounds.");
}
return OutOfBoundsError;
}(exceptions_1.BaseException);
exports.OutOfBoundsError = OutOfBoundsError;
var MixingMultiProvidersWithRegularProvidersError = function(_super) {
__extends(MixingMultiProvidersWithRegularProvidersError, _super);
function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
_super.call(this, "Cannot mix multi providers and regular providers, got: " + provider1.toString() + " " + provider2.toString());
}
return MixingMultiProvidersWithRegularProvidersError;
}(exceptions_1.BaseException);
exports.MixingMultiProvidersWithRegularProvidersError = MixingMultiProvidersWithRegularProvidersError;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(117);
var exceptions_1 = __webpack_require__(131);
var Provider = function() {
function Provider(token, _a) {
var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
this.token = token;
this.useClass = useClass;
this.useValue = useValue;
this.useExisting = useExisting;
this.useFactory = useFactory;
this.dependencies = deps;
this._multi = multi;
}
Object.defineProperty(Provider.prototype, "multi", {
get: function() {
return lang_1.normalizeBool(this._multi);
},
enumerable: true,
configurable: true
});
return Provider;
}();
exports.Provider = Provider;
var Binding = function(_super) {
__extends(Binding, _super);
function Binding(token, _a) {
var toClass = _a.toClass, toValue = _a.toValue, toAlias = _a.toAlias, toFactory = _a.toFactory, deps = _a.deps, multi = _a.multi;
_super.call(this, token, {
useClass: toClass,
useValue: toValue,
useExisting: toAlias,
useFactory: toFactory,
deps: deps,
multi: multi
});
}
Object.defineProperty(Binding.prototype, "toClass", {
get: function() {
return this.useClass;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Binding.prototype, "toAlias", {
get: function() {
return this.useExisting;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Binding.prototype, "toFactory", {
get: function() {
return this.useFactory;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Binding.prototype, "toValue", {
get: function() {
return this.useValue;
},
enumerable: true,
configurable: true
});
return Binding;
}(Provider);
exports.Binding = Binding;
function bind(token) {
return new ProviderBuilder(token);
}
exports.bind = bind;
var ProviderBuilder = function() {
function ProviderBuilder(token) {
this.token = token;
}
ProviderBuilder.prototype.toClass = function(type) {
if (!lang_1.isType(type)) {
throw new exceptions_1.BaseException('Trying to create a class provider but "' + lang_1.stringify(type) + '" is not a class!');
}
return new Provider(this.token, {
useClass: type
});
};
ProviderBuilder.prototype.toValue = function(value) {
return new Provider(this.token, {
useValue: value
});
};
ProviderBuilder.prototype.toAlias = function(aliasToken) {
if (lang_1.isBlank(aliasToken)) {
throw new exceptions_1.BaseException("Can not alias " + lang_1.stringify(this.token) + " to a blank value!");
}
return new Provider(this.token, {
useExisting: aliasToken
});
};
ProviderBuilder.prototype.toFactory = function(factory, dependencies) {
if (!lang_1.isFunction(factory)) {
throw new exceptions_1.BaseException('Trying to create a factory provider but "' + lang_1.stringify(factory) + '" is not a function!');
}
return new Provider(this.token, {
useFactory: factory,
deps: dependencies
});
};
return ProviderBuilder;
}();
exports.ProviderBuilder = ProviderBuilder;
function provide(token, _a) {
var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
return new Provider(token, {
useClass: useClass,
useValue: useValue,
useExisting: useExisting,
useFactory: useFactory,
deps: deps,
multi: multi
});
}
exports.provide = provide;
}, function(module, exports, __webpack_require__) {
"use strict";
var provider_1 = __webpack_require__(143);
function isProviderLiteral(obj) {
return obj && typeof obj == "object" && obj.provide;
}
exports.isProviderLiteral = isProviderLiteral;
function createProvider(obj) {
return new provider_1.Provider(obj.provide, obj);
}
exports.createProvider = createProvider;
}, function(module, exports) {
"use strict";
var OpaqueToken = function() {
function OpaqueToken(_desc) {
this._desc = _desc;
}
OpaqueToken.prototype.toString = function() {
return "Token " + this._desc;
};
return OpaqueToken;
}();
exports.OpaqueToken = OpaqueToken;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ng_zone_1 = __webpack_require__(147);
var lang_1 = __webpack_require__(117);
var di_1 = __webpack_require__(128);
var application_tokens_1 = __webpack_require__(172);
var async_1 = __webpack_require__(148);
var collection_1 = __webpack_require__(134);
var testability_1 = __webpack_require__(173);
var component_resolver_1 = __webpack_require__(174);
var exceptions_1 = __webpack_require__(131);
var console_1 = __webpack_require__(192);
var profile_1 = __webpack_require__(181);
function createNgZone() {
return new ng_zone_1.NgZone({
enableLongStackTrace: lang_1.assertionsEnabled()
});
}
exports.createNgZone = createNgZone;
var _platform;
var _inPlatformCreate = false;
function createPlatform(injector) {
if (_inPlatformCreate) {
throw new exceptions_1.BaseException("Already creating a platform...");
}
if (lang_1.isPresent(_platform) && !_platform.disposed) {
throw new exceptions_1.BaseException("There can be only one platform. Destroy the previous one to create a new one.");
}
lang_1.lockMode();
_inPlatformCreate = true;
try {
_platform = injector.get(PlatformRef);
} finally {
_inPlatformCreate = false;
}
return _platform;
}
exports.createPlatform = createPlatform;
function assertPlatform(requiredToken) {
var platform = getPlatform();
if (lang_1.isBlank(platform)) {
throw new exceptions_1.BaseException("Not platform exists!");
}
if (lang_1.isPresent(platform) && lang_1.isBlank(platform.injector.get(requiredToken, null))) {
throw new exceptions_1.BaseException("A platform with a different configuration has been created. Please destroy it first.");
}
return platform;
}
exports.assertPlatform = assertPlatform;
function disposePlatform() {
if (lang_1.isPresent(_platform) && !_platform.disposed) {
_platform.dispose();
}
}
exports.disposePlatform = disposePlatform;
function getPlatform() {
return lang_1.isPresent(_platform) && !_platform.disposed ? _platform : null;
}
exports.getPlatform = getPlatform;
function coreBootstrap(injector, componentFactory) {
var appRef = injector.get(ApplicationRef);
return appRef.bootstrap(componentFactory);
}
exports.coreBootstrap = coreBootstrap;
function coreLoadAndBootstrap(injector, componentType) {
var appRef = injector.get(ApplicationRef);
return appRef.run(function() {
var componentResolver = injector.get(component_resolver_1.ComponentResolver);
return async_1.PromiseWrapper.all([ componentResolver.resolveComponent(componentType), appRef.waitForAsyncInitializers() ]).then(function(arr) {
return appRef.bootstrap(arr[0]);
});
});
}
exports.coreLoadAndBootstrap = coreLoadAndBootstrap;
var PlatformRef = function() {
function PlatformRef() {}
Object.defineProperty(PlatformRef.prototype, "injector", {
get: function() {
throw exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(PlatformRef.prototype, "disposed", {
get: function() {
throw exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return PlatformRef;
}();
exports.PlatformRef = PlatformRef;
var PlatformRef_ = function(_super) {
__extends(PlatformRef_, _super);
function PlatformRef_(_injector) {
_super.call(this);
this._injector = _injector;
this._applications = [];
this._disposeListeners = [];
this._disposed = false;
if (!_inPlatformCreate) {
throw new exceptions_1.BaseException("Platforms have to be created via `createPlatform`!");
}
var inits = _injector.get(application_tokens_1.PLATFORM_INITIALIZER, null);
if (lang_1.isPresent(inits)) inits.forEach(function(init) {
return init();
});
}
PlatformRef_.prototype.registerDisposeListener = function(dispose) {
this._disposeListeners.push(dispose);
};
Object.defineProperty(PlatformRef_.prototype, "injector", {
get: function() {
return this._injector;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PlatformRef_.prototype, "disposed", {
get: function() {
return this._disposed;
},
enumerable: true,
configurable: true
});
PlatformRef_.prototype.addApplication = function(appRef) {
this._applications.push(appRef);
};
PlatformRef_.prototype.dispose = function() {
collection_1.ListWrapper.clone(this._applications).forEach(function(app) {
return app.dispose();
});
this._disposeListeners.forEach(function(dispose) {
return dispose();
});
this._disposed = true;
};
PlatformRef_.prototype._applicationDisposed = function(app) {
collection_1.ListWrapper.remove(this._applications, app);
};
PlatformRef_.decorators = [ {
type: di_1.Injectable
} ];
PlatformRef_.ctorParameters = [ {
type: di_1.Injector
} ];
return PlatformRef_;
}(PlatformRef);
exports.PlatformRef_ = PlatformRef_;
var ApplicationRef = function() {
function ApplicationRef() {}
Object.defineProperty(ApplicationRef.prototype, "injector", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ApplicationRef.prototype, "zone", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return ApplicationRef;
}();
exports.ApplicationRef = ApplicationRef;
var ApplicationRef_ = function(_super) {
__extends(ApplicationRef_, _super);
function ApplicationRef_(_platform, _zone, _injector) {
var _this = this;
_super.call(this);
this._platform = _platform;
this._zone = _zone;
this._injector = _injector;
this._bootstrapListeners = [];
this._disposeListeners = [];
this._rootComponents = [];
this._rootComponentTypes = [];
this._changeDetectorRefs = [];
this._runningTick = false;
this._enforceNoNewChanges = false;
var zone = _injector.get(ng_zone_1.NgZone);
this._enforceNoNewChanges = lang_1.assertionsEnabled();
zone.run(function() {
_this._exceptionHandler = _injector.get(exceptions_1.ExceptionHandler);
});
this._asyncInitDonePromise = this.run(function() {
var inits = _injector.get(application_tokens_1.APP_INITIALIZER, null);
var asyncInitResults = [];
var asyncInitDonePromise;
if (lang_1.isPresent(inits)) {
for (var i = 0; i < inits.length; i++) {
var initResult = inits[i]();
if (lang_1.isPromise(initResult)) {
asyncInitResults.push(initResult);
}
}
}
if (asyncInitResults.length > 0) {
asyncInitDonePromise = async_1.PromiseWrapper.all(asyncInitResults).then(function(_) {
return _this._asyncInitDone = true;
});
_this._asyncInitDone = false;
} else {
_this._asyncInitDone = true;
asyncInitDonePromise = async_1.PromiseWrapper.resolve(true);
}
return asyncInitDonePromise;
});
async_1.ObservableWrapper.subscribe(zone.onError, function(error) {
_this._exceptionHandler.call(error.error, error.stackTrace);
});
async_1.ObservableWrapper.subscribe(this._zone.onMicrotaskEmpty, function(_) {
_this._zone.run(function() {
_this.tick();
});
});
}
ApplicationRef_.prototype.registerBootstrapListener = function(listener) {
this._bootstrapListeners.push(listener);
};
ApplicationRef_.prototype.registerDisposeListener = function(dispose) {
this._disposeListeners.push(dispose);
};
ApplicationRef_.prototype.registerChangeDetector = function(changeDetector) {
this._changeDetectorRefs.push(changeDetector);
};
ApplicationRef_.prototype.unregisterChangeDetector = function(changeDetector) {
collection_1.ListWrapper.remove(this._changeDetectorRefs, changeDetector);
};
ApplicationRef_.prototype.waitForAsyncInitializers = function() {
return this._asyncInitDonePromise;
};
ApplicationRef_.prototype.run = function(callback) {
var _this = this;
var zone = this.injector.get(ng_zone_1.NgZone);
var result;
var completer = async_1.PromiseWrapper.completer();
zone.run(function() {
try {
result = callback();
if (lang_1.isPromise(result)) {
async_1.PromiseWrapper.then(result, function(ref) {
completer.resolve(ref);
}, function(err, stackTrace) {
completer.reject(err, stackTrace);
_this._exceptionHandler.call(err, stackTrace);
});
}
} catch (e) {
_this._exceptionHandler.call(e, e.stack);
throw e;
}
});
return lang_1.isPromise(result) ? completer.promise : result;
};
ApplicationRef_.prototype.bootstrap = function(componentFactory) {
var _this = this;
if (!this._asyncInitDone) {
throw new exceptions_1.BaseException("Cannot bootstrap as there are still asynchronous initializers running. Wait for them using waitForAsyncInitializers().");
}
return this.run(function() {
_this._rootComponentTypes.push(componentFactory.componentType);
var compRef = componentFactory.create(_this._injector, [], componentFactory.selector);
compRef.onDestroy(function() {
_this._unloadComponent(compRef);
});
var testability = compRef.injector.get(testability_1.Testability, null);
if (lang_1.isPresent(testability)) {
compRef.injector.get(testability_1.TestabilityRegistry).registerApplication(compRef.location.nativeElement, testability);
}
_this._loadComponent(compRef);
var c = _this._injector.get(console_1.Console);
if (lang_1.assertionsEnabled()) {
c.log("Angular 2 is running in the development mode. Call enableProdMode() to enable the production mode.");
}
return compRef;
});
};
ApplicationRef_.prototype._loadComponent = function(componentRef) {
this._changeDetectorRefs.push(componentRef.changeDetectorRef);
this.tick();
this._rootComponents.push(componentRef);
this._bootstrapListeners.forEach(function(listener) {
return listener(componentRef);
});
};
ApplicationRef_.prototype._unloadComponent = function(componentRef) {
if (!collection_1.ListWrapper.contains(this._rootComponents, componentRef)) {
return;
}
this.unregisterChangeDetector(componentRef.changeDetectorRef);
collection_1.ListWrapper.remove(this._rootComponents, componentRef);
};
Object.defineProperty(ApplicationRef_.prototype, "injector", {
get: function() {
return this._injector;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ApplicationRef_.prototype, "zone", {
get: function() {
return this._zone;
},
enumerable: true,
configurable: true
});
ApplicationRef_.prototype.tick = function() {
if (this._runningTick) {
throw new exceptions_1.BaseException("ApplicationRef.tick is called recursively");
}
var s = ApplicationRef_._tickScope();
try {
this._runningTick = true;
this._changeDetectorRefs.forEach(function(detector) {
return detector.detectChanges();
});
if (this._enforceNoNewChanges) {
this._changeDetectorRefs.forEach(function(detector) {
return detector.checkNoChanges();
});
}
} finally {
this._runningTick = false;
profile_1.wtfLeave(s);
}
};
ApplicationRef_.prototype.dispose = function() {
collection_1.ListWrapper.clone(this._rootComponents).forEach(function(ref) {
return ref.destroy();
});
this._disposeListeners.forEach(function(dispose) {
return dispose();
});
this._platform._applicationDisposed(this);
};
Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
get: function() {
return this._rootComponentTypes;
},
enumerable: true,
configurable: true
});
ApplicationRef_._tickScope = profile_1.wtfCreateScope("ApplicationRef#tick()");
ApplicationRef_.decorators = [ {
type: di_1.Injectable
} ];
ApplicationRef_.ctorParameters = [ {
type: PlatformRef_
}, {
type: ng_zone_1.NgZone
}, {
type: di_1.Injector
} ];
return ApplicationRef_;
}(ApplicationRef);
exports.ApplicationRef_ = ApplicationRef_;
exports.PLATFORM_CORE_PROVIDERS = [ PlatformRef_, {
provide: PlatformRef,
useExisting: PlatformRef_
} ];
exports.APPLICATION_CORE_PROVIDERS = [ {
provide: ng_zone_1.NgZone,
useFactory: createNgZone,
deps: []
}, ApplicationRef_, {
provide: ApplicationRef,
useExisting: ApplicationRef_
} ];
}, function(module, exports, __webpack_require__) {
"use strict";
var async_1 = __webpack_require__(148);
var ng_zone_impl_1 = __webpack_require__(171);
var exceptions_1 = __webpack_require__(131);
var ng_zone_impl_2 = __webpack_require__(171);
exports.NgZoneError = ng_zone_impl_2.NgZoneError;
var NgZone = function() {
function NgZone(_a) {
var _this = this;
var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;
this._hasPendingMicrotasks = false;
this._hasPendingMacrotasks = false;
this._isStable = true;
this._nesting = 0;
this._onUnstable = new async_1.EventEmitter(false);
this._onMicrotaskEmpty = new async_1.EventEmitter(false);
this._onStable = new async_1.EventEmitter(false);
this._onErrorEvents = new async_1.EventEmitter(false);
this._zoneImpl = new ng_zone_impl_1.NgZoneImpl({
trace: enableLongStackTrace,
onEnter: function() {
_this._nesting++;
if (_this._isStable) {
_this._isStable = false;
_this._onUnstable.emit(null);
}
},
onLeave: function() {
_this._nesting--;
_this._checkStable();
},
setMicrotask: function(hasMicrotasks) {
_this._hasPendingMicrotasks = hasMicrotasks;
_this._checkStable();
},
setMacrotask: function(hasMacrotasks) {
_this._hasPendingMacrotasks = hasMacrotasks;
},
onError: function(error) {
return _this._onErrorEvents.emit(error);
}
});
}
NgZone.isInAngularZone = function() {
return ng_zone_impl_1.NgZoneImpl.isInAngularZone();
};
NgZone.assertInAngularZone = function() {
if (!ng_zone_impl_1.NgZoneImpl.isInAngularZone()) {
throw new exceptions_1.BaseException("Expected to be in Angular Zone, but it is not!");
}
};
NgZone.assertNotInAngularZone = function() {
if (ng_zone_impl_1.NgZoneImpl.isInAngularZone()) {
throw new exceptions_1.BaseException("Expected to not be in Angular Zone, but it is!");
}
};
NgZone.prototype._checkStable = function() {
var _this = this;
if (this._nesting == 0) {
if (!this._hasPendingMicrotasks && !this._isStable) {
try {
this._nesting++;
this._onMicrotaskEmpty.emit(null);
} finally {
this._nesting--;
if (!this._hasPendingMicrotasks) {
try {
this.runOutsideAngular(function() {
return _this._onStable.emit(null);
});
} finally {
this._isStable = true;
}
}
}
}
}
};
Object.defineProperty(NgZone.prototype, "onUnstable", {
get: function() {
return this._onUnstable;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
get: function() {
return this._onMicrotaskEmpty;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgZone.prototype, "onStable", {
get: function() {
return this._onStable;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgZone.prototype, "onError", {
get: function() {
return this._onErrorEvents;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
get: function() {
return this._hasPendingMicrotasks;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
get: function() {
return this._hasPendingMacrotasks;
},
enumerable: true,
configurable: true
});
NgZone.prototype.run = function(fn) {
return this._zoneImpl.runInner(fn);
};
NgZone.prototype.runGuarded = function(fn) {
return this._zoneImpl.runInnerGuarded(fn);
};
NgZone.prototype.runOutsideAngular = function(fn) {
return this._zoneImpl.runOuter(fn);
};
return NgZone;
}();
exports.NgZone = NgZone;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(117);
var promise_1 = __webpack_require__(149);
exports.PromiseWrapper = promise_1.PromiseWrapper;
exports.PromiseCompleter = promise_1.PromiseCompleter;
var Subject_1 = __webpack_require__(150);
var PromiseObservable_1 = __webpack_require__(169);
var toPromise_1 = __webpack_require__(170);
var Observable_1 = __webpack_require__(151);
exports.Observable = Observable_1.Observable;
var Subject_2 = __webpack_require__(150);
exports.Subject = Subject_2.Subject;
var TimerWrapper = function() {
function TimerWrapper() {}
TimerWrapper.setTimeout = function(fn, millis) {
return lang_1.global.setTimeout(fn, millis);
};
TimerWrapper.clearTimeout = function(id) {
lang_1.global.clearTimeout(id);
};
TimerWrapper.setInterval = function(fn, millis) {
return lang_1.global.setInterval(fn, millis);
};
TimerWrapper.clearInterval = function(id) {
lang_1.global.clearInterval(id);
};
return TimerWrapper;
}();
exports.TimerWrapper = TimerWrapper;
var ObservableWrapper = function() {
function ObservableWrapper() {}
ObservableWrapper.subscribe = function(emitter, onNext, onError, onComplete) {
if (onComplete === void 0) {
onComplete = function() {};
}
onError = typeof onError === "function" && onError || lang_1.noop;
onComplete = typeof onComplete === "function" && onComplete || lang_1.noop;
return emitter.subscribe({
next: onNext,
error: onError,
complete: onComplete
});
};
ObservableWrapper.isObservable = function(obs) {
return !!obs.subscribe;
};
ObservableWrapper.hasSubscribers = function(obs) {
return obs.observers.length > 0;
};
ObservableWrapper.dispose = function(subscription) {
subscription.unsubscribe();
};
ObservableWrapper.callNext = function(emitter, value) {
emitter.next(value);
};
ObservableWrapper.callEmit = function(emitter, value) {
emitter.emit(value);
};
ObservableWrapper.callError = function(emitter, error) {
emitter.error(error);
};
ObservableWrapper.callComplete = function(emitter) {
emitter.complete();
};
ObservableWrapper.fromPromise = function(promise) {
return PromiseObservable_1.PromiseObservable.create(promise);
};
ObservableWrapper.toPromise = function(obj) {
return toPromise_1.toPromise.call(obj);
};
return ObservableWrapper;
}();
exports.ObservableWrapper = ObservableWrapper;
var EventEmitter = function(_super) {
__extends(EventEmitter, _super);
function EventEmitter(isAsync) {
if (isAsync === void 0) {
isAsync = true;
}
_super.call(this);
this._isAsync = isAsync;
}
EventEmitter.prototype.emit = function(value) {
_super.prototype.next.call(this, value);
};
EventEmitter.prototype.next = function(value) {
_super.prototype.next.call(this, value);
};
EventEmitter.prototype.subscribe = function(generatorOrNext, error, complete) {
var schedulerFn;
var errorFn = function(err) {
return null;
};
var completeFn = function() {
return null;
};
if (generatorOrNext && typeof generatorOrNext === "object") {
schedulerFn = this._isAsync ? function(value) {
setTimeout(function() {
return generatorOrNext.next(value);
});
} : function(value) {
generatorOrNext.next(value);
};
if (generatorOrNext.error) {
errorFn = this._isAsync ? function(err) {
setTimeout(function() {
return generatorOrNext.error(err);
});
} : function(err) {
generatorOrNext.error(err);
};
}
if (generatorOrNext.complete) {
completeFn = this._isAsync ? function() {
setTimeout(function() {
return generatorOrNext.complete();
});
} : function() {
generatorOrNext.complete();
};
}
} else {
schedulerFn = this._isAsync ? function(value) {
setTimeout(function() {
return generatorOrNext(value);
});
} : function(value) {
generatorOrNext(value);
};
if (error) {
errorFn = this._isAsync ? function(err) {
setTimeout(function() {
return error(err);
});
} : function(err) {
error(err);
};
}
if (complete) {
completeFn = this._isAsync ? function() {
setTimeout(function() {
return complete();
});
} : function() {
complete();
};
}
}
return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
};
return EventEmitter;
}(Subject_1.Subject);
exports.EventEmitter = EventEmitter;
}, function(module, exports) {
"use strict";
var PromiseCompleter = function() {
function PromiseCompleter() {
var _this = this;
this.promise = new Promise(function(res, rej) {
_this.resolve = res;
_this.reject = rej;
});
}
return PromiseCompleter;
}();
exports.PromiseCompleter = PromiseCompleter;
var PromiseWrapper = function() {
function PromiseWrapper() {}
PromiseWrapper.resolve = function(obj) {
return Promise.resolve(obj);
};
PromiseWrapper.reject = function(obj, _) {
return Promise.reject(obj);
};
PromiseWrapper.catchError = function(promise, onError) {
return promise.catch(onError);
};
PromiseWrapper.all = function(promises) {
if (promises.length == 0) return Promise.resolve([]);
return Promise.all(promises);
};
PromiseWrapper.then = function(promise, success, rejection) {
return promise.then(success, rejection);
};
PromiseWrapper.wrap = function(computation) {
return new Promise(function(res, rej) {
try {
res(computation());
} catch (e) {
rej(e);
}
});
};
PromiseWrapper.scheduleMicrotask = function(computation) {
PromiseWrapper.then(PromiseWrapper.resolve(null), computation, function(_) {});
};
PromiseWrapper.isPromise = function(obj) {
return obj instanceof Promise;
};
PromiseWrapper.completer = function() {
return new PromiseCompleter();
};
return PromiseWrapper;
}();
exports.PromiseWrapper = PromiseWrapper;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Observable_1 = __webpack_require__(151);
var Subscriber_1 = __webpack_require__(156);
var Subscription_1 = __webpack_require__(158);
var SubjectSubscription_1 = __webpack_require__(166);
var rxSubscriber_1 = __webpack_require__(164);
var throwError_1 = __webpack_require__(167);
var ObjectUnsubscribedError_1 = __webpack_require__(168);
var Subject = function(_super) {
__extends(Subject, _super);
function Subject(destination, source) {
_super.call(this);
this.destination = destination;
this.source = source;
this.observers = [];
this.isUnsubscribed = false;
this.isStopped = false;
this.hasErrored = false;
this.dispatching = false;
this.hasCompleted = false;
this.source = source;
}
Subject.prototype.lift = function(operator) {
var subject = new Subject(this.destination || this, this);
subject.operator = operator;
return subject;
};
Subject.prototype.add = function(subscription) {
return Subscription_1.Subscription.prototype.add.call(this, subscription);
};
Subject.prototype.remove = function(subscription) {
Subscription_1.Subscription.prototype.remove.call(this, subscription);
};
Subject.prototype.unsubscribe = function() {
Subscription_1.Subscription.prototype.unsubscribe.call(this);
};
Subject.prototype._subscribe = function(subscriber) {
if (this.source) {
return this.source.subscribe(subscriber);
} else {
if (subscriber.isUnsubscribed) {
return;
} else if (this.hasErrored) {
return subscriber.error(this.errorValue);
} else if (this.hasCompleted) {
return subscriber.complete();
}
this.throwIfUnsubscribed();
var subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
this.observers.push(subscriber);
return subscription;
}
};
Subject.prototype._unsubscribe = function() {
this.source = null;
this.isStopped = true;
this.observers = null;
this.destination = null;
};
Subject.prototype.next = function(value) {
this.throwIfUnsubscribed();
if (this.isStopped) {
return;
}
this.dispatching = true;
this._next(value);
this.dispatching = false;
if (this.hasErrored) {
this._error(this.errorValue);
} else if (this.hasCompleted) {
this._complete();
}
};
Subject.prototype.error = function(err) {
this.throwIfUnsubscribed();
if (this.isStopped) {
return;
}
this.isStopped = true;
this.hasErrored = true;
this.errorValue = err;
if (this.dispatching) {
return;
}
this._error(err);
};
Subject.prototype.complete = function() {
this.throwIfUnsubscribed();
if (this.isStopped) {
return;
}
this.isStopped = true;
this.hasCompleted = true;
if (this.dispatching) {
return;
}
this._complete();
};
Subject.prototype.asObservable = function() {
var observable = new SubjectObservable(this);
return observable;
};
Subject.prototype._next = function(value) {
if (this.destination) {
this.destination.next(value);
} else {
this._finalNext(value);
}
};
Subject.prototype._finalNext = function(value) {
var index = -1;
var observers = this.observers.slice(0);
var len = observers.length;
while (++index < len) {
observers[index].next(value);
}
};
Subject.prototype._error = function(err) {
if (this.destination) {
this.destination.error(err);
} else {
this._finalError(err);
}
};
Subject.prototype._finalError = function(err) {
var index = -1;
var observers = this.observers;
this.observers = null;
this.isUnsubscribed = true;
if (observers) {
var len = observers.length;
while (++index < len) {
observers[index].error(err);
}
}
this.isUnsubscribed = false;
this.unsubscribe();
};
Subject.prototype._complete = function() {
if (this.destination) {
this.destination.complete();
} else {
this._finalComplete();
}
};
Subject.prototype._finalComplete = function() {
var index = -1;
var observers = this.observers;
this.observers = null;
this.isUnsubscribed = true;
if (observers) {
var len = observers.length;
while (++index < len) {
observers[index].complete();
}
}
this.isUnsubscribed = false;
this.unsubscribe();
};
Subject.prototype.throwIfUnsubscribed = function() {
if (this.isUnsubscribed) {
throwError_1.throwError(new ObjectUnsubscribedError_1.ObjectUnsubscribedError());
}
};
Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function() {
return new Subscriber_1.Subscriber(this);
};
Subject.create = function(destination, source) {
return new Subject(destination, source);
};
return Subject;
}(Observable_1.Observable);
exports.Subject = Subject;
var SubjectObservable = function(_super) {
__extends(SubjectObservable, _super);
function SubjectObservable(source) {
_super.call(this);
this.source = source;
}
return SubjectObservable;
}(Observable_1.Observable);
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(152);
var observable_1 = __webpack_require__(154);
var toSubscriber_1 = __webpack_require__(155);
var Observable = function() {
function Observable(subscribe) {
this._isScalar = false;
if (subscribe) {
this._subscribe = subscribe;
}
}
Observable.prototype.lift = function(operator) {
var observable = new Observable();
observable.source = this;
observable.operator = operator;
return observable;
};
Observable.prototype.subscribe = function(observerOrNext, error, complete) {
var operator = this.operator;
var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
sink.add(operator ? operator.call(sink, this) : this._subscribe(sink));
if (sink.syncErrorThrowable) {
sink.syncErrorThrowable = false;
if (sink.syncErrorThrown) {
throw sink.syncErrorValue;
}
}
return sink;
};
Observable.prototype.forEach = function(next, PromiseCtor) {
var _this = this;
if (!PromiseCtor) {
if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
PromiseCtor = root_1.root.Rx.config.Promise;
} else if (root_1.root.Promise) {
PromiseCtor = root_1.root.Promise;
}
}
if (!PromiseCtor) {
throw new Error("no Promise impl found");
}
return new PromiseCtor(function(resolve, reject) {
var subscription = _this.subscribe(function(value) {
if (subscription) {
try {
next(value);
} catch (err) {
reject(err);
subscription.unsubscribe();
}
} else {
next(value);
}
}, reject, resolve);
});
};
Observable.prototype._subscribe = function(subscriber) {
return this.source.subscribe(subscriber);
};
Observable.prototype[observable_1.$$observable] = function() {
return this;
};
Observable.create = function(subscribe) {
return new Observable(subscribe);
};
return Observable;
}();
exports.Observable = Observable;
}, function(module, exports, __webpack_require__) {
(function(module) {
"use strict";
var objectTypes = {
"boolean": false,
"function": true,
object: true,
number: false,
string: false,
undefined: false
};
exports.root = objectTypes[typeof self] && self || objectTypes[typeof window] && window;
var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
var freeGlobal = objectTypes[typeof global] && global;
if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
exports.root = freeGlobal;
}
}).call(exports, __webpack_require__(153)(module));
}, function(module, exports) {
module.exports = function(module) {
if (!module.webpackPolyfill) {
module.deprecate = function() {};
module.paths = [];
module.children = [];
module.webpackPolyfill = 1;
}
return module;
};
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(152);
var Symbol = root_1.root.Symbol;
if (typeof Symbol === "function") {
if (Symbol.observable) {
exports.$$observable = Symbol.observable;
} else {
if (typeof Symbol.for === "function") {
exports.$$observable = Symbol.for("observable");
} else {
exports.$$observable = Symbol("observable");
}
Symbol.observable = exports.$$observable;
}
} else {
exports.$$observable = "@@observable";
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Subscriber_1 = __webpack_require__(156);
var rxSubscriber_1 = __webpack_require__(164);
function toSubscriber(nextOrObserver, error, complete) {
if (nextOrObserver && typeof nextOrObserver === "object") {
if (nextOrObserver instanceof Subscriber_1.Subscriber) {
return nextOrObserver;
} else if (typeof nextOrObserver[rxSubscriber_1.$$rxSubscriber] === "function") {
return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
}
}
return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
}
exports.toSubscriber = toSubscriber;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var isFunction_1 = __webpack_require__(157);
var Subscription_1 = __webpack_require__(158);
var rxSubscriber_1 = __webpack_require__(164);
var Observer_1 = __webpack_require__(165);
var Subscriber = function(_super) {
__extends(Subscriber, _super);
function Subscriber(destinationOrNext, error, complete) {
_super.call(this);
this.syncErrorValue = null;
this.syncErrorThrown = false;
this.syncErrorThrowable = false;
this.isStopped = false;
switch (arguments.length) {
case 0:
this.destination = Observer_1.empty;
break;

case 1:
if (!destinationOrNext) {
this.destination = Observer_1.empty;
break;
}
if (typeof destinationOrNext === "object") {
if (destinationOrNext instanceof Subscriber) {
this.destination = destinationOrNext;
this.destination.add(this);
} else {
this.syncErrorThrowable = true;
this.destination = new SafeSubscriber(this, destinationOrNext);
}
break;
}

default:
this.syncErrorThrowable = true;
this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
break;
}
}
Subscriber.create = function(next, error, complete) {
var subscriber = new Subscriber(next, error, complete);
subscriber.syncErrorThrowable = false;
return subscriber;
};
Subscriber.prototype.next = function(value) {
if (!this.isStopped) {
this._next(value);
}
};
Subscriber.prototype.error = function(err) {
if (!this.isStopped) {
this.isStopped = true;
this._error(err);
}
};
Subscriber.prototype.complete = function() {
if (!this.isStopped) {
this.isStopped = true;
this._complete();
}
};
Subscriber.prototype.unsubscribe = function() {
if (this.isUnsubscribed) {
return;
}
this.isStopped = true;
_super.prototype.unsubscribe.call(this);
};
Subscriber.prototype._next = function(value) {
this.destination.next(value);
};
Subscriber.prototype._error = function(err) {
this.destination.error(err);
this.unsubscribe();
};
Subscriber.prototype._complete = function() {
this.destination.complete();
this.unsubscribe();
};
Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function() {
return this;
};
return Subscriber;
}(Subscription_1.Subscription);
exports.Subscriber = Subscriber;
var SafeSubscriber = function(_super) {
__extends(SafeSubscriber, _super);
function SafeSubscriber(_parent, observerOrNext, error, complete) {
_super.call(this);
this._parent = _parent;
var next;
var context = this;
if (isFunction_1.isFunction(observerOrNext)) {
next = observerOrNext;
} else if (observerOrNext) {
context = observerOrNext;
next = observerOrNext.next;
error = observerOrNext.error;
complete = observerOrNext.complete;
if (isFunction_1.isFunction(context.unsubscribe)) {
this.add(context.unsubscribe.bind(context));
}
context.unsubscribe = this.unsubscribe.bind(this);
}
this._context = context;
this._next = next;
this._error = error;
this._complete = complete;
}
SafeSubscriber.prototype.next = function(value) {
if (!this.isStopped && this._next) {
var _parent = this._parent;
if (!_parent.syncErrorThrowable) {
this.__tryOrUnsub(this._next, value);
} else if (this.__tryOrSetError(_parent, this._next, value)) {
this.unsubscribe();
}
}
};
SafeSubscriber.prototype.error = function(err) {
if (!this.isStopped) {
var _parent = this._parent;
if (this._error) {
if (!_parent.syncErrorThrowable) {
this.__tryOrUnsub(this._error, err);
this.unsubscribe();
} else {
this.__tryOrSetError(_parent, this._error, err);
this.unsubscribe();
}
} else if (!_parent.syncErrorThrowable) {
this.unsubscribe();
throw err;
} else {
_parent.syncErrorValue = err;
_parent.syncErrorThrown = true;
this.unsubscribe();
}
}
};
SafeSubscriber.prototype.complete = function() {
if (!this.isStopped) {
var _parent = this._parent;
if (this._complete) {
if (!_parent.syncErrorThrowable) {
this.__tryOrUnsub(this._complete);
this.unsubscribe();
} else {
this.__tryOrSetError(_parent, this._complete);
this.unsubscribe();
}
} else {
this.unsubscribe();
}
}
};
SafeSubscriber.prototype.__tryOrUnsub = function(fn, value) {
try {
fn.call(this._context, value);
} catch (err) {
this.unsubscribe();
throw err;
}
};
SafeSubscriber.prototype.__tryOrSetError = function(parent, fn, value) {
try {
fn.call(this._context, value);
} catch (err) {
parent.syncErrorValue = err;
parent.syncErrorThrown = true;
return true;
}
return false;
};
SafeSubscriber.prototype._unsubscribe = function() {
var _parent = this._parent;
this._context = null;
this._parent = null;
_parent.unsubscribe();
};
return SafeSubscriber;
}(Subscriber);
}, function(module, exports) {
"use strict";
function isFunction(x) {
return typeof x === "function";
}
exports.isFunction = isFunction;
}, function(module, exports, __webpack_require__) {
"use strict";
var isArray_1 = __webpack_require__(159);
var isObject_1 = __webpack_require__(160);
var isFunction_1 = __webpack_require__(157);
var tryCatch_1 = __webpack_require__(161);
var errorObject_1 = __webpack_require__(162);
var UnsubscriptionError_1 = __webpack_require__(163);
var Subscription = function() {
function Subscription(unsubscribe) {
this.isUnsubscribed = false;
if (unsubscribe) {
this._unsubscribe = unsubscribe;
}
}
Subscription.prototype.unsubscribe = function() {
var hasErrors = false;
var errors;
if (this.isUnsubscribed) {
return;
}
this.isUnsubscribed = true;
var _a = this, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
this._subscriptions = null;
if (isFunction_1.isFunction(_unsubscribe)) {
var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
if (trial === errorObject_1.errorObject) {
hasErrors = true;
(errors = errors || []).push(errorObject_1.errorObject.e);
}
}
if (isArray_1.isArray(_subscriptions)) {
var index = -1;
var len = _subscriptions.length;
while (++index < len) {
var sub = _subscriptions[index];
if (isObject_1.isObject(sub)) {
var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
if (trial === errorObject_1.errorObject) {
hasErrors = true;
errors = errors || [];
var err = errorObject_1.errorObject.e;
if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
errors = errors.concat(err.errors);
} else {
errors.push(err);
}
}
}
}
}
if (hasErrors) {
throw new UnsubscriptionError_1.UnsubscriptionError(errors);
}
};
Subscription.prototype.add = function(teardown) {
if (!teardown || teardown === this || teardown === Subscription.EMPTY) {
return;
}
var sub = teardown;
switch (typeof teardown) {
case "function":
sub = new Subscription(teardown);

case "object":
if (sub.isUnsubscribed || typeof sub.unsubscribe !== "function") {
break;
} else if (this.isUnsubscribed) {
sub.unsubscribe();
} else {
(this._subscriptions || (this._subscriptions = [])).push(sub);
}
break;

default:
throw new Error("Unrecognized teardown " + teardown + " added to Subscription.");
}
return sub;
};
Subscription.prototype.remove = function(subscription) {
if (subscription == null || subscription === this || subscription === Subscription.EMPTY) {
return;
}
var subscriptions = this._subscriptions;
if (subscriptions) {
var subscriptionIndex = subscriptions.indexOf(subscription);
if (subscriptionIndex !== -1) {
subscriptions.splice(subscriptionIndex, 1);
}
}
};
Subscription.EMPTY = function(empty) {
empty.isUnsubscribed = true;
return empty;
}(new Subscription());
return Subscription;
}();
exports.Subscription = Subscription;
}, function(module, exports) {
"use strict";
exports.isArray = Array.isArray || function(x) {
return x && typeof x.length === "number";
};
}, function(module, exports) {
"use strict";
function isObject(x) {
return x != null && typeof x === "object";
}
exports.isObject = isObject;
}, function(module, exports, __webpack_require__) {
"use strict";
var errorObject_1 = __webpack_require__(162);
var tryCatchTarget;
function tryCatcher() {
try {
return tryCatchTarget.apply(this, arguments);
} catch (e) {
errorObject_1.errorObject.e = e;
return errorObject_1.errorObject;
}
}
function tryCatch(fn) {
tryCatchTarget = fn;
return tryCatcher;
}
exports.tryCatch = tryCatch;
}, function(module, exports) {
"use strict";
exports.errorObject = {
e: {}
};
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var UnsubscriptionError = function(_super) {
__extends(UnsubscriptionError, _super);
function UnsubscriptionError(errors) {
_super.call(this);
this.errors = errors;
this.name = "UnsubscriptionError";
this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
return i + 1 + ") " + err.toString();
}).join("\n") : "";
}
return UnsubscriptionError;
}(Error);
exports.UnsubscriptionError = UnsubscriptionError;
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(152);
var Symbol = root_1.root.Symbol;
exports.$$rxSubscriber = typeof Symbol === "function" && typeof Symbol.for === "function" ? Symbol.for("rxSubscriber") : "@@rxSubscriber";
}, function(module, exports) {
"use strict";
exports.empty = {
isUnsubscribed: true,
next: function(value) {},
error: function(err) {
throw err;
},
complete: function() {}
};
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Subscription_1 = __webpack_require__(158);
var SubjectSubscription = function(_super) {
__extends(SubjectSubscription, _super);
function SubjectSubscription(subject, observer) {
_super.call(this);
this.subject = subject;
this.observer = observer;
this.isUnsubscribed = false;
}
SubjectSubscription.prototype.unsubscribe = function() {
if (this.isUnsubscribed) {
return;
}
this.isUnsubscribed = true;
var subject = this.subject;
var observers = subject.observers;
this.subject = null;
if (!observers || observers.length === 0 || subject.isUnsubscribed) {
return;
}
var subscriberIndex = observers.indexOf(this.observer);
if (subscriberIndex !== -1) {
observers.splice(subscriberIndex, 1);
}
};
return SubjectSubscription;
}(Subscription_1.Subscription);
exports.SubjectSubscription = SubjectSubscription;
}, function(module, exports) {
"use strict";
function throwError(e) {
throw e;
}
exports.throwError = throwError;
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ObjectUnsubscribedError = function(_super) {
__extends(ObjectUnsubscribedError, _super);
function ObjectUnsubscribedError() {
_super.call(this, "object unsubscribed");
this.name = "ObjectUnsubscribedError";
}
return ObjectUnsubscribedError;
}(Error);
exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var root_1 = __webpack_require__(152);
var Observable_1 = __webpack_require__(151);
var PromiseObservable = function(_super) {
__extends(PromiseObservable, _super);
function PromiseObservable(promise, scheduler) {
if (scheduler === void 0) {
scheduler = null;
}
_super.call(this);
this.promise = promise;
this.scheduler = scheduler;
}
PromiseObservable.create = function(promise, scheduler) {
if (scheduler === void 0) {
scheduler = null;
}
return new PromiseObservable(promise, scheduler);
};
PromiseObservable.prototype._subscribe = function(subscriber) {
var _this = this;
var promise = this.promise;
var scheduler = this.scheduler;
if (scheduler == null) {
if (this._isScalar) {
if (!subscriber.isUnsubscribed) {
subscriber.next(this.value);
subscriber.complete();
}
} else {
promise.then(function(value) {
_this.value = value;
_this._isScalar = true;
if (!subscriber.isUnsubscribed) {
subscriber.next(value);
subscriber.complete();
}
}, function(err) {
if (!subscriber.isUnsubscribed) {
subscriber.error(err);
}
}).then(null, function(err) {
root_1.root.setTimeout(function() {
throw err;
});
});
}
} else {
if (this._isScalar) {
if (!subscriber.isUnsubscribed) {
return scheduler.schedule(dispatchNext, 0, {
value: this.value,
subscriber: subscriber
});
}
} else {
promise.then(function(value) {
_this.value = value;
_this._isScalar = true;
if (!subscriber.isUnsubscribed) {
subscriber.add(scheduler.schedule(dispatchNext, 0, {
value: value,
subscriber: subscriber
}));
}
}, function(err) {
if (!subscriber.isUnsubscribed) {
subscriber.add(scheduler.schedule(dispatchError, 0, {
err: err,
subscriber: subscriber
}));
}
}).then(null, function(err) {
root_1.root.setTimeout(function() {
throw err;
});
});
}
}
};
return PromiseObservable;
}(Observable_1.Observable);
exports.PromiseObservable = PromiseObservable;
function dispatchNext(arg) {
var value = arg.value, subscriber = arg.subscriber;
if (!subscriber.isUnsubscribed) {
subscriber.next(value);
subscriber.complete();
}
}
function dispatchError(arg) {
var err = arg.err, subscriber = arg.subscriber;
if (!subscriber.isUnsubscribed) {
subscriber.error(err);
}
}
}, function(module, exports, __webpack_require__) {
"use strict";
var root_1 = __webpack_require__(152);
function toPromise(PromiseCtor) {
var _this = this;
if (!PromiseCtor) {
if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
PromiseCtor = root_1.root.Rx.config.Promise;
} else if (root_1.root.Promise) {
PromiseCtor = root_1.root.Promise;
}
}
if (!PromiseCtor) {
throw new Error("no Promise impl found");
}
return new PromiseCtor(function(resolve, reject) {
var value;
_this.subscribe(function(x) {
return value = x;
}, function(err) {
return reject(err);
}, function() {
return resolve(value);
});
});
}
exports.toPromise = toPromise;
}, function(module, exports) {
"use strict";
var NgZoneError = function() {
function NgZoneError(error, stackTrace) {
this.error = error;
this.stackTrace = stackTrace;
}
return NgZoneError;
}();
exports.NgZoneError = NgZoneError;
var NgZoneImpl = function() {
function NgZoneImpl(_a) {
var _this = this;
var trace = _a.trace, onEnter = _a.onEnter, onLeave = _a.onLeave, setMicrotask = _a.setMicrotask, setMacrotask = _a.setMacrotask, onError = _a.onError;
this.onEnter = onEnter;
this.onLeave = onLeave;
this.setMicrotask = setMicrotask;
this.setMacrotask = setMacrotask;
this.onError = onError;
if (Zone) {
this.outer = this.inner = Zone.current;
if (Zone["wtfZoneSpec"]) {
this.inner = this.inner.fork(Zone["wtfZoneSpec"]);
}
if (trace && Zone["longStackTraceZoneSpec"]) {
this.inner = this.inner.fork(Zone["longStackTraceZoneSpec"]);
}
this.inner = this.inner.fork({
name: "angular",
properties: {
isAngularZone: true
},
onInvokeTask: function(delegate, current, target, task, applyThis, applyArgs) {
try {
_this.onEnter();
return delegate.invokeTask(target, task, applyThis, applyArgs);
} finally {
_this.onLeave();
}
},
onInvoke: function(delegate, current, target, callback, applyThis, applyArgs, source) {
try {
_this.onEnter();
return delegate.invoke(target, callback, applyThis, applyArgs, source);
} finally {
_this.onLeave();
}
},
onHasTask: function(delegate, current, target, hasTaskState) {
delegate.hasTask(target, hasTaskState);
if (current == target) {
if (hasTaskState.change == "microTask") {
_this.setMicrotask(hasTaskState.microTask);
} else if (hasTaskState.change == "macroTask") {
_this.setMacrotask(hasTaskState.macroTask);
}
}
},
onHandleError: function(delegate, current, target, error) {
delegate.handleError(target, error);
_this.onError(new NgZoneError(error, error.stack));
return false;
}
});
} else {
throw new Error("Angular requires Zone.js polyfill.");
}
}
NgZoneImpl.isInAngularZone = function() {
return Zone.current.get("isAngularZone") === true;
};
NgZoneImpl.prototype.runInner = function(fn) {
return this.inner.run(fn);
};
NgZoneImpl.prototype.runInnerGuarded = function(fn) {
return this.inner.runGuarded(fn);
};
NgZoneImpl.prototype.runOuter = function(fn) {
return this.outer.run(fn);
};
return NgZoneImpl;
}();
exports.NgZoneImpl = NgZoneImpl;
}, function(module, exports, __webpack_require__) {
"use strict";
var di_1 = __webpack_require__(128);
var lang_1 = __webpack_require__(117);
exports.APP_ID = new di_1.OpaqueToken("AppId");
function _appIdRandomProviderFactory() {
return "" + _randomChar() + _randomChar() + _randomChar();
}
exports.APP_ID_RANDOM_PROVIDER = {
provide: exports.APP_ID,
useFactory: _appIdRandomProviderFactory,
deps: []
};
function _randomChar() {
return lang_1.StringWrapper.fromCharCode(97 + lang_1.Math.floor(lang_1.Math.random() * 25));
}
exports.PLATFORM_INITIALIZER = new di_1.OpaqueToken("Platform Initializer");
exports.APP_INITIALIZER = new di_1.OpaqueToken("Application Initializer");
exports.PACKAGE_ROOT_URL = new di_1.OpaqueToken("Application Packages Root URL");
}, function(module, exports, __webpack_require__) {
"use strict";
var collection_1 = __webpack_require__(134);
var lang_1 = __webpack_require__(117);
var exceptions_1 = __webpack_require__(131);
var ng_zone_1 = __webpack_require__(147);
var async_1 = __webpack_require__(148);
var decorators_1 = __webpack_require__(129);
var Testability = function() {
function Testability(_ngZone) {
this._ngZone = _ngZone;
this._pendingCount = 0;
this._isZoneStable = true;
this._didWork = false;
this._callbacks = [];
this._watchAngularEvents();
}
Testability.prototype._watchAngularEvents = function() {
var _this = this;
async_1.ObservableWrapper.subscribe(this._ngZone.onUnstable, function(_) {
_this._didWork = true;
_this._isZoneStable = false;
});
this._ngZone.runOutsideAngular(function() {
async_1.ObservableWrapper.subscribe(_this._ngZone.onStable, function(_) {
ng_zone_1.NgZone.assertNotInAngularZone();
lang_1.scheduleMicroTask(function() {
_this._isZoneStable = true;
_this._runCallbacksIfReady();
});
});
});
};
Testability.prototype.increasePendingRequestCount = function() {
this._pendingCount += 1;
this._didWork = true;
return this._pendingCount;
};
Testability.prototype.decreasePendingRequestCount = function() {
this._pendingCount -= 1;
if (this._pendingCount < 0) {
throw new exceptions_1.BaseException("pending async requests below zero");
}
this._runCallbacksIfReady();
return this._pendingCount;
};
Testability.prototype.isStable = function() {
return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
};
Testability.prototype._runCallbacksIfReady = function() {
var _this = this;
if (this.isStable()) {
lang_1.scheduleMicroTask(function() {
while (_this._callbacks.length !== 0) {
_this._callbacks.pop()(_this._didWork);
}
_this._didWork = false;
});
} else {
this._didWork = true;
}
};
Testability.prototype.whenStable = function(callback) {
this._callbacks.push(callback);
this._runCallbacksIfReady();
};
Testability.prototype.getPendingRequestCount = function() {
return this._pendingCount;
};
Testability.prototype.findBindings = function(using, provider, exactMatch) {
return [];
};
Testability.prototype.findProviders = function(using, provider, exactMatch) {
return [];
};
Testability.decorators = [ {
type: decorators_1.Injectable
} ];
Testability.ctorParameters = [ {
type: ng_zone_1.NgZone
} ];
return Testability;
}();
exports.Testability = Testability;
var TestabilityRegistry = function() {
function TestabilityRegistry() {
this._applications = new collection_1.Map();
_testabilityGetter.addToWindow(this);
}
TestabilityRegistry.prototype.registerApplication = function(token, testability) {
this._applications.set(token, testability);
};
TestabilityRegistry.prototype.getTestability = function(elem) {
return this._applications.get(elem);
};
TestabilityRegistry.prototype.getAllTestabilities = function() {
return collection_1.MapWrapper.values(this._applications);
};
TestabilityRegistry.prototype.getAllRootElements = function() {
return collection_1.MapWrapper.keys(this._applications);
};
TestabilityRegistry.prototype.findTestabilityInTree = function(elem, findInAncestors) {
if (findInAncestors === void 0) {
findInAncestors = true;
}
return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
};
TestabilityRegistry.decorators = [ {
type: decorators_1.Injectable
} ];
TestabilityRegistry.ctorParameters = [];
return TestabilityRegistry;
}();
exports.TestabilityRegistry = TestabilityRegistry;
var _NoopGetTestability = function() {
function _NoopGetTestability() {}
_NoopGetTestability.prototype.addToWindow = function(registry) {};
_NoopGetTestability.prototype.findTestabilityInTree = function(registry, elem, findInAncestors) {
return null;
};
return _NoopGetTestability;
}();
function setTestabilityGetter(getter) {
_testabilityGetter = getter;
}
exports.setTestabilityGetter = setTestabilityGetter;
var _testabilityGetter = new _NoopGetTestability();
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(117);
var exceptions_1 = __webpack_require__(131);
var async_1 = __webpack_require__(148);
var reflection_1 = __webpack_require__(137);
var component_factory_1 = __webpack_require__(175);
var decorators_1 = __webpack_require__(129);
var ComponentResolver = function() {
function ComponentResolver() {}
return ComponentResolver;
}();
exports.ComponentResolver = ComponentResolver;
function _isComponentFactory(type) {
return type instanceof component_factory_1.ComponentFactory;
}
var ReflectorComponentResolver = function(_super) {
__extends(ReflectorComponentResolver, _super);
function ReflectorComponentResolver() {
_super.apply(this, arguments);
}
ReflectorComponentResolver.prototype.resolveComponent = function(componentType) {
var metadatas = reflection_1.reflector.annotations(componentType);
var componentFactory = metadatas.find(_isComponentFactory);
if (lang_1.isBlank(componentFactory)) {
throw new exceptions_1.BaseException("No precompiled component " + lang_1.stringify(componentType) + " found");
}
return async_1.PromiseWrapper.resolve(componentFactory);
};
ReflectorComponentResolver.prototype.clearCache = function() {};
ReflectorComponentResolver.decorators = [ {
type: decorators_1.Injectable
} ];
return ReflectorComponentResolver;
}(ComponentResolver);
exports.ReflectorComponentResolver = ReflectorComponentResolver;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(117);
var exceptions_1 = __webpack_require__(131);
var view_utils_1 = __webpack_require__(176);
var ComponentRef = function() {
function ComponentRef() {}
Object.defineProperty(ComponentRef.prototype, "location", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef.prototype, "injector", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef.prototype, "instance", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef.prototype, "hostView", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef.prototype, "changeDetectorRef", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef.prototype, "componentType", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return ComponentRef;
}();
exports.ComponentRef = ComponentRef;
var ComponentRef_ = function(_super) {
__extends(ComponentRef_, _super);
function ComponentRef_(_hostElement, _componentType) {
_super.call(this);
this._hostElement = _hostElement;
this._componentType = _componentType;
}
Object.defineProperty(ComponentRef_.prototype, "location", {
get: function() {
return this._hostElement.elementRef;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef_.prototype, "injector", {
get: function() {
return this._hostElement.injector;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef_.prototype, "instance", {
get: function() {
return this._hostElement.component;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef_.prototype, "hostView", {
get: function() {
return this._hostElement.parentView.ref;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
get: function() {
return this._hostElement.parentView.ref;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ComponentRef_.prototype, "componentType", {
get: function() {
return this._componentType;
},
enumerable: true,
configurable: true
});
ComponentRef_.prototype.destroy = function() {
this._hostElement.parentView.destroy();
};
ComponentRef_.prototype.onDestroy = function(callback) {
this.hostView.onDestroy(callback);
};
return ComponentRef_;
}(ComponentRef);
exports.ComponentRef_ = ComponentRef_;
var EMPTY_CONTEXT = new Object();
var ComponentFactory = function() {
function ComponentFactory(selector, _viewFactory, _componentType) {
this.selector = selector;
this._viewFactory = _viewFactory;
this._componentType = _componentType;
}
Object.defineProperty(ComponentFactory.prototype, "componentType", {
get: function() {
return this._componentType;
},
enumerable: true,
configurable: true
});
ComponentFactory.prototype.create = function(injector, projectableNodes, rootSelectorOrNode) {
if (projectableNodes === void 0) {
projectableNodes = null;
}
if (rootSelectorOrNode === void 0) {
rootSelectorOrNode = null;
}
var vu = injector.get(view_utils_1.ViewUtils);
if (lang_1.isBlank(projectableNodes)) {
projectableNodes = [];
}
var hostView = this._viewFactory(vu, injector, null);
var hostElement = hostView.create(EMPTY_CONTEXT, projectableNodes, rootSelectorOrNode);
return new ComponentRef_(hostElement, this._componentType);
};
return ComponentFactory;
}();
exports.ComponentFactory = ComponentFactory;
}, function(module, exports, __webpack_require__) {
"use strict";
var security_1 = __webpack_require__(116);
var lang_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(134);
var exceptions_1 = __webpack_require__(131);
var element_1 = __webpack_require__(177);
var exceptions_2 = __webpack_require__(183);
var change_detection_1 = __webpack_require__(184);
var api_1 = __webpack_require__(191);
var application_tokens_1 = __webpack_require__(172);
var decorators_1 = __webpack_require__(129);
var change_detection_util_1 = __webpack_require__(190);
var ViewUtils = function() {
function ViewUtils(_renderer, _appId, sanitizer) {
this._renderer = _renderer;
this._appId = _appId;
this._nextCompTypeId = 0;
this.sanitizer = sanitizer;
}
ViewUtils.prototype.createRenderComponentType = function(templateUrl, slotCount, encapsulation, styles) {
return new api_1.RenderComponentType(this._appId + "-" + this._nextCompTypeId++, templateUrl, slotCount, encapsulation, styles);
};
ViewUtils.prototype.renderComponent = function(renderComponentType) {
return this._renderer.renderComponent(renderComponentType);
};
ViewUtils.decorators = [ {
type: decorators_1.Injectable
} ];
ViewUtils.ctorParameters = [ {
type: api_1.RootRenderer
}, {
type: undefined,
decorators: [ {
type: decorators_1.Inject,
args: [ application_tokens_1.APP_ID ]
} ]
}, {
type: security_1.SanitizationService
} ];
return ViewUtils;
}();
exports.ViewUtils = ViewUtils;
function flattenNestedViewRenderNodes(nodes) {
return _flattenNestedViewRenderNodes(nodes, []);
}
exports.flattenNestedViewRenderNodes = flattenNestedViewRenderNodes;
function _flattenNestedViewRenderNodes(nodes, renderNodes) {
for (var i = 0; i < nodes.length; i++) {
var node = nodes[i];
if (node instanceof element_1.AppElement) {
var appEl = node;
renderNodes.push(appEl.nativeElement);
if (lang_1.isPresent(appEl.nestedViews)) {
for (var k = 0; k < appEl.nestedViews.length; k++) {
_flattenNestedViewRenderNodes(appEl.nestedViews[k].rootNodesOrAppElements, renderNodes);
}
}
} else {
renderNodes.push(node);
}
}
return renderNodes;
}
var EMPTY_ARR = [];
function ensureSlotCount(projectableNodes, expectedSlotCount) {
var res;
if (lang_1.isBlank(projectableNodes)) {
res = EMPTY_ARR;
} else if (projectableNodes.length < expectedSlotCount) {
var givenSlotCount = projectableNodes.length;
res = collection_1.ListWrapper.createFixedSize(expectedSlotCount);
for (var i = 0; i < expectedSlotCount; i++) {
res[i] = i < givenSlotCount ? projectableNodes[i] : EMPTY_ARR;
}
} else {
res = projectableNodes;
}
return res;
}
exports.ensureSlotCount = ensureSlotCount;
exports.MAX_INTERPOLATION_VALUES = 9;
function interpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
switch (valueCount) {
case 1:
return c0 + _toStringWithNull(a1) + c1;

case 2:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;

case 3:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3;

case 4:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4;

case 5:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;

case 6:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;

case 7:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7;

case 8:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;

case 9:
return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;

default:
throw new exceptions_1.BaseException("Does not support more than 9 expressions");
}
}
exports.interpolate = interpolate;
function _toStringWithNull(v) {
return v != null ? v.toString() : "";
}
function checkBinding(throwOnChange, oldValue, newValue) {
if (throwOnChange) {
if (!change_detection_1.devModeEqual(oldValue, newValue)) {
throw new exceptions_2.ExpressionChangedAfterItHasBeenCheckedException(oldValue, newValue, null);
}
return false;
} else {
return !lang_1.looseIdentical(oldValue, newValue);
}
}
exports.checkBinding = checkBinding;
function arrayLooseIdentical(a, b) {
if (a.length != b.length) return false;
for (var i = 0; i < a.length; ++i) {
if (!lang_1.looseIdentical(a[i], b[i])) return false;
}
return true;
}
exports.arrayLooseIdentical = arrayLooseIdentical;
function mapLooseIdentical(m1, m2) {
var k1 = collection_1.StringMapWrapper.keys(m1);
var k2 = collection_1.StringMapWrapper.keys(m2);
if (k1.length != k2.length) {
return false;
}
var key;
for (var i = 0; i < k1.length; i++) {
key = k1[i];
if (!lang_1.looseIdentical(m1[key], m2[key])) {
return false;
}
}
return true;
}
exports.mapLooseIdentical = mapLooseIdentical;
function castByValue(input, value) {
return input;
}
exports.castByValue = castByValue;
exports.EMPTY_ARRAY = [];
exports.EMPTY_MAP = {};
function pureProxy1(fn) {
var result;
var v0;
v0 = change_detection_util_1.uninitialized;
return function(p0) {
if (!lang_1.looseIdentical(v0, p0)) {
v0 = p0;
result = fn(p0);
}
return result;
};
}
exports.pureProxy1 = pureProxy1;
function pureProxy2(fn) {
var result;
var v0, v1;
v0 = v1 = change_detection_util_1.uninitialized;
return function(p0, p1) {
if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1)) {
v0 = p0;
v1 = p1;
result = fn(p0, p1);
}
return result;
};
}
exports.pureProxy2 = pureProxy2;
function pureProxy3(fn) {
var result;
var v0, v1, v2;
v0 = v1 = v2 = change_detection_util_1.uninitialized;
return function(p0, p1, p2) {
if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2)) {
v0 = p0;
v1 = p1;
v2 = p2;
result = fn(p0, p1, p2);
}
return result;
};
}
exports.pureProxy3 = pureProxy3;
function pureProxy4(fn) {
var result;
var v0, v1, v2, v3;
v0 = v1 = v2 = v3 = change_detection_util_1.uninitialized;
return function(p0, p1, p2, p3) {
if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3)) {
v0 = p0;
v1 = p1;
v2 = p2;
v3 = p3;
result = fn(p0, p1, p2, p3);
}
return result;
};
}
exports.pureProxy4 = pureProxy4;
function pureProxy5(fn) {
var result;
var v0, v1, v2, v3, v4;
v0 = v1 = v2 = v3 = v4 = change_detection_util_1.uninitialized;
return function(p0, p1, p2, p3, p4) {
if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3) || !lang_1.looseIdentical(v4, p4)) {
v0 = p0;
v1 = p1;
v2 = p2;
v3 = p3;
v4 = p4;
result = fn(p0, p1, p2, p3, p4);
}
return result;
};
}
exports.pureProxy5 = pureProxy5;
function pureProxy6(fn) {
var result;
var v0, v1, v2, v3, v4, v5;
v0 = v1 = v2 = v3 = v4 = v5 = change_detection_util_1.uninitialized;
return function(p0, p1, p2, p3, p4, p5) {
if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3) || !lang_1.looseIdentical(v4, p4) || !lang_1.looseIdentical(v5, p5)) {
v0 = p0;
v1 = p1;
v2 = p2;
v3 = p3;
v4 = p4;
v5 = p5;
result = fn(p0, p1, p2, p3, p4, p5);
}
return result;
};
}
exports.pureProxy6 = pureProxy6;
function pureProxy7(fn) {
var result;
var v0, v1, v2, v3, v4, v5, v6;
v0 = v1 = v2 = v3 = v4 = v5 = v6 = change_detection_util_1.uninitialized;
return function(p0, p1, p2, p3, p4, p5, p6) {
if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3) || !lang_1.looseIdentical(v4, p4) || !lang_1.looseIdentical(v5, p5) || !lang_1.looseIdentical(v6, p6)) {
v0 = p0;
v1 = p1;
v2 = p2;
v3 = p3;
v4 = p4;
v5 = p5;
v6 = p6;
result = fn(p0, p1, p2, p3, p4, p5, p6);
}
return result;
};
}
exports.pureProxy7 = pureProxy7;
function pureProxy8(fn) {
var result;
var v0, v1, v2, v3, v4, v5, v6, v7;
v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = change_detection_util_1.uninitialized;
return function(p0, p1, p2, p3, p4, p5, p6, p7) {
if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3) || !lang_1.looseIdentical(v4, p4) || !lang_1.looseIdentical(v5, p5) || !lang_1.looseIdentical(v6, p6) || !lang_1.looseIdentical(v7, p7)) {
v0 = p0;
v1 = p1;
v2 = p2;
v3 = p3;
v4 = p4;
v5 = p5;
v6 = p6;
v7 = p7;
result = fn(p0, p1, p2, p3, p4, p5, p6, p7);
}
return result;
};
}
exports.pureProxy8 = pureProxy8;
function pureProxy9(fn) {
var result;
var v0, v1, v2, v3, v4, v5, v6, v7, v8;
v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = change_detection_util_1.uninitialized;
return function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3) || !lang_1.looseIdentical(v4, p4) || !lang_1.looseIdentical(v5, p5) || !lang_1.looseIdentical(v6, p6) || !lang_1.looseIdentical(v7, p7) || !lang_1.looseIdentical(v8, p8)) {
v0 = p0;
v1 = p1;
v2 = p2;
v3 = p3;
v4 = p4;
v5 = p5;
v6 = p6;
v7 = p7;
v8 = p8;
result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);
}
return result;
};
}
exports.pureProxy9 = pureProxy9;
function pureProxy10(fn) {
var result;
var v0, v1, v2, v3, v4, v5, v6, v7, v8, v9;
v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = change_detection_util_1.uninitialized;
return function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
if (!lang_1.looseIdentical(v0, p0) || !lang_1.looseIdentical(v1, p1) || !lang_1.looseIdentical(v2, p2) || !lang_1.looseIdentical(v3, p3) || !lang_1.looseIdentical(v4, p4) || !lang_1.looseIdentical(v5, p5) || !lang_1.looseIdentical(v6, p6) || !lang_1.looseIdentical(v7, p7) || !lang_1.looseIdentical(v8, p8) || !lang_1.looseIdentical(v9, p9)) {
v0 = p0;
v1 = p1;
v2 = p2;
v3 = p3;
v4 = p4;
v5 = p5;
v6 = p6;
v7 = p7;
v8 = p8;
v9 = p9;
result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
}
return result;
};
}
exports.pureProxy10 = pureProxy10;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(134);
var exceptions_1 = __webpack_require__(131);
var view_type_1 = __webpack_require__(178);
var element_ref_1 = __webpack_require__(179);
var view_container_ref_1 = __webpack_require__(180);
var AppElement = function() {
function AppElement(index, parentIndex, parentView, nativeElement) {
this.index = index;
this.parentIndex = parentIndex;
this.parentView = parentView;
this.nativeElement = nativeElement;
this.nestedViews = null;
this.componentView = null;
}
Object.defineProperty(AppElement.prototype, "elementRef", {
get: function() {
return new element_ref_1.ElementRef(this.nativeElement);
},
enumerable: true,
configurable: true
});
Object.defineProperty(AppElement.prototype, "vcRef", {
get: function() {
return new view_container_ref_1.ViewContainerRef_(this);
},
enumerable: true,
configurable: true
});
AppElement.prototype.initComponent = function(component, componentConstructorViewQueries, view) {
this.component = component;
this.componentConstructorViewQueries = componentConstructorViewQueries;
this.componentView = view;
};
Object.defineProperty(AppElement.prototype, "parentInjector", {
get: function() {
return this.parentView.injector(this.parentIndex);
},
enumerable: true,
configurable: true
});
Object.defineProperty(AppElement.prototype, "injector", {
get: function() {
return this.parentView.injector(this.index);
},
enumerable: true,
configurable: true
});
AppElement.prototype.mapNestedViews = function(nestedViewClass, callback) {
var result = [];
if (lang_1.isPresent(this.nestedViews)) {
this.nestedViews.forEach(function(nestedView) {
if (nestedView.clazz === nestedViewClass) {
result.push(callback(nestedView));
}
});
}
return result;
};
AppElement.prototype.attachView = function(view, viewIndex) {
if (view.type === view_type_1.ViewType.COMPONENT) {
throw new exceptions_1.BaseException("Component views can't be moved!");
}
var nestedViews = this.nestedViews;
if (nestedViews == null) {
nestedViews = [];
this.nestedViews = nestedViews;
}
collection_1.ListWrapper.insert(nestedViews, viewIndex, view);
var refRenderNode;
if (viewIndex > 0) {
var prevView = nestedViews[viewIndex - 1];
refRenderNode = prevView.lastRootNode;
} else {
refRenderNode = this.nativeElement;
}
if (lang_1.isPresent(refRenderNode)) {
view.renderer.attachViewAfter(refRenderNode, view.flatRootNodes);
}
view.addToContentChildren(this);
};
AppElement.prototype.detachView = function(viewIndex) {
var view = collection_1.ListWrapper.removeAt(this.nestedViews, viewIndex);
if (view.type === view_type_1.ViewType.COMPONENT) {
throw new exceptions_1.BaseException("Component views can't be moved!");
}
view.renderer.detachView(view.flatRootNodes);
view.removeFromContentChildren(this);
return view;
};
return AppElement;
}();
exports.AppElement = AppElement;
}, function(module, exports) {
"use strict";
(function(ViewType) {
ViewType[ViewType["HOST"] = 0] = "HOST";
ViewType[ViewType["COMPONENT"] = 1] = "COMPONENT";
ViewType[ViewType["EMBEDDED"] = 2] = "EMBEDDED";
})(exports.ViewType || (exports.ViewType = {}));
var ViewType = exports.ViewType;
}, function(module, exports) {
"use strict";
var ElementRef = function() {
function ElementRef(nativeElement) {
this.nativeElement = nativeElement;
}
return ElementRef;
}();
exports.ElementRef = ElementRef;
}, function(module, exports, __webpack_require__) {
"use strict";
var collection_1 = __webpack_require__(134);
var exceptions_1 = __webpack_require__(131);
var lang_1 = __webpack_require__(117);
var profile_1 = __webpack_require__(181);
var ViewContainerRef = function() {
function ViewContainerRef() {}
Object.defineProperty(ViewContainerRef.prototype, "element", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewContainerRef.prototype, "injector", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewContainerRef.prototype, "parentInjector", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewContainerRef.prototype, "length", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return ViewContainerRef;
}();
exports.ViewContainerRef = ViewContainerRef;
var ViewContainerRef_ = function() {
function ViewContainerRef_(_element) {
this._element = _element;
this._createComponentInContainerScope = profile_1.wtfCreateScope("ViewContainerRef#createComponent()");
this._insertScope = profile_1.wtfCreateScope("ViewContainerRef#insert()");
this._removeScope = profile_1.wtfCreateScope("ViewContainerRef#remove()");
this._detachScope = profile_1.wtfCreateScope("ViewContainerRef#detach()");
}
ViewContainerRef_.prototype.get = function(index) {
return this._element.nestedViews[index].ref;
};
Object.defineProperty(ViewContainerRef_.prototype, "length", {
get: function() {
var views = this._element.nestedViews;
return lang_1.isPresent(views) ? views.length : 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewContainerRef_.prototype, "element", {
get: function() {
return this._element.elementRef;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewContainerRef_.prototype, "injector", {
get: function() {
return this._element.injector;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
get: function() {
return this._element.parentInjector;
},
enumerable: true,
configurable: true
});
ViewContainerRef_.prototype.createEmbeddedView = function(templateRef, context, index) {
if (context === void 0) {
context = null;
}
if (index === void 0) {
index = -1;
}
var viewRef = templateRef.createEmbeddedView(context);
this.insert(viewRef, index);
return viewRef;
};
ViewContainerRef_.prototype.createComponent = function(componentFactory, index, injector, projectableNodes) {
if (index === void 0) {
index = -1;
}
if (injector === void 0) {
injector = null;
}
if (projectableNodes === void 0) {
projectableNodes = null;
}
var s = this._createComponentInContainerScope();
var contextInjector = lang_1.isPresent(injector) ? injector : this._element.parentInjector;
var componentRef = componentFactory.create(contextInjector, projectableNodes);
this.insert(componentRef.hostView, index);
return profile_1.wtfLeave(s, componentRef);
};
ViewContainerRef_.prototype.insert = function(viewRef, index) {
if (index === void 0) {
index = -1;
}
var s = this._insertScope();
if (index == -1) index = this.length;
var viewRef_ = viewRef;
this._element.attachView(viewRef_.internalView, index);
return profile_1.wtfLeave(s, viewRef_);
};
ViewContainerRef_.prototype.indexOf = function(viewRef) {
return collection_1.ListWrapper.indexOf(this._element.nestedViews, viewRef.internalView);
};
ViewContainerRef_.prototype.remove = function(index) {
if (index === void 0) {
index = -1;
}
var s = this._removeScope();
if (index == -1) index = this.length - 1;
var view = this._element.detachView(index);
view.destroy();
profile_1.wtfLeave(s);
};
ViewContainerRef_.prototype.detach = function(index) {
if (index === void 0) {
index = -1;
}
var s = this._detachScope();
if (index == -1) index = this.length - 1;
var view = this._element.detachView(index);
return profile_1.wtfLeave(s, view.ref);
};
ViewContainerRef_.prototype.clear = function() {
for (var i = this.length - 1; i >= 0; i--) {
this.remove(i);
}
};
return ViewContainerRef_;
}();
exports.ViewContainerRef_ = ViewContainerRef_;
}, function(module, exports, __webpack_require__) {
"use strict";
var impl = __webpack_require__(182);
exports.wtfEnabled = impl.detectWTF();
function noopScope(arg0, arg1) {
return null;
}
exports.wtfCreateScope = exports.wtfEnabled ? impl.createScope : function(signature, flags) {
return noopScope;
};
exports.wtfLeave = exports.wtfEnabled ? impl.leave : function(s, r) {
return r;
};
exports.wtfStartTimeRange = exports.wtfEnabled ? impl.startTimeRange : function(rangeType, action) {
return null;
};
exports.wtfEndTimeRange = exports.wtfEnabled ? impl.endTimeRange : function(r) {
return null;
};
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(117);
var trace;
var events;
function detectWTF() {
var wtf = lang_1.global["wtf"];
if (wtf) {
trace = wtf["trace"];
if (trace) {
events = trace["events"];
return true;
}
}
return false;
}
exports.detectWTF = detectWTF;
function createScope(signature, flags) {
if (flags === void 0) {
flags = null;
}
return events.createScope(signature, flags);
}
exports.createScope = createScope;
function leave(scope, returnValue) {
trace.leaveScope(scope, returnValue);
return returnValue;
}
exports.leave = leave;
function startTimeRange(rangeType, action) {
return trace.beginTimeRange(rangeType, action);
}
exports.startTimeRange = startTimeRange;
function endTimeRange(range) {
trace.endTimeRange(range);
}
exports.endTimeRange = endTimeRange;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var exceptions_1 = __webpack_require__(131);
var ExpressionChangedAfterItHasBeenCheckedException = function(_super) {
__extends(ExpressionChangedAfterItHasBeenCheckedException, _super);
function ExpressionChangedAfterItHasBeenCheckedException(oldValue, currValue, context) {
_super.call(this, "Expression has changed after it was checked. " + ("Previous value: '" + oldValue + "'. Current value: '" + currValue + "'"));
}
return ExpressionChangedAfterItHasBeenCheckedException;
}(exceptions_1.BaseException);
exports.ExpressionChangedAfterItHasBeenCheckedException = ExpressionChangedAfterItHasBeenCheckedException;
var ViewWrappedException = function(_super) {
__extends(ViewWrappedException, _super);
function ViewWrappedException(originalException, originalStack, context) {
_super.call(this, "Error in " + context.source, originalException, originalStack, context);
}
return ViewWrappedException;
}(exceptions_1.WrappedException);
exports.ViewWrappedException = ViewWrappedException;
var ViewDestroyedException = function(_super) {
__extends(ViewDestroyedException, _super);
function ViewDestroyedException(details) {
_super.call(this, "Attempt to use a destroyed view: " + details);
}
return ViewDestroyedException;
}(exceptions_1.BaseException);
exports.ViewDestroyedException = ViewDestroyedException;
}, function(module, exports, __webpack_require__) {
"use strict";
var iterable_differs_1 = __webpack_require__(185);
var default_iterable_differ_1 = __webpack_require__(186);
var keyvalue_differs_1 = __webpack_require__(187);
var default_keyvalue_differ_1 = __webpack_require__(188);
var default_keyvalue_differ_2 = __webpack_require__(188);
exports.DefaultKeyValueDifferFactory = default_keyvalue_differ_2.DefaultKeyValueDifferFactory;
exports.KeyValueChangeRecord = default_keyvalue_differ_2.KeyValueChangeRecord;
var default_iterable_differ_2 = __webpack_require__(186);
exports.DefaultIterableDifferFactory = default_iterable_differ_2.DefaultIterableDifferFactory;
exports.CollectionChangeRecord = default_iterable_differ_2.CollectionChangeRecord;
var constants_1 = __webpack_require__(124);
exports.ChangeDetectionStrategy = constants_1.ChangeDetectionStrategy;
exports.CHANGE_DETECTION_STRATEGY_VALUES = constants_1.CHANGE_DETECTION_STRATEGY_VALUES;
exports.ChangeDetectorState = constants_1.ChangeDetectorState;
exports.CHANGE_DETECTOR_STATE_VALUES = constants_1.CHANGE_DETECTOR_STATE_VALUES;
exports.isDefaultChangeDetectionStrategy = constants_1.isDefaultChangeDetectionStrategy;
var change_detector_ref_1 = __webpack_require__(189);
exports.ChangeDetectorRef = change_detector_ref_1.ChangeDetectorRef;
var iterable_differs_2 = __webpack_require__(185);
exports.IterableDiffers = iterable_differs_2.IterableDiffers;
var keyvalue_differs_2 = __webpack_require__(187);
exports.KeyValueDiffers = keyvalue_differs_2.KeyValueDiffers;
var default_iterable_differ_3 = __webpack_require__(186);
exports.DefaultIterableDiffer = default_iterable_differ_3.DefaultIterableDiffer;
var change_detection_util_1 = __webpack_require__(190);
exports.WrappedValue = change_detection_util_1.WrappedValue;
exports.ValueUnwrapper = change_detection_util_1.ValueUnwrapper;
exports.SimpleChange = change_detection_util_1.SimpleChange;
exports.devModeEqual = change_detection_util_1.devModeEqual;
exports.looseIdentical = change_detection_util_1.looseIdentical;
exports.uninitialized = change_detection_util_1.uninitialized;
exports.keyValDiff = [ new default_keyvalue_differ_1.DefaultKeyValueDifferFactory() ];
exports.iterableDiff = [ new default_iterable_differ_1.DefaultIterableDifferFactory() ];
exports.defaultIterableDiffers = new iterable_differs_1.IterableDiffers(exports.iterableDiff);
exports.defaultKeyValueDiffers = new keyvalue_differs_1.KeyValueDiffers(exports.keyValDiff);
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(117);
var exceptions_1 = __webpack_require__(131);
var collection_1 = __webpack_require__(134);
var di_1 = __webpack_require__(128);
var IterableDiffers = function() {
function IterableDiffers(factories) {
this.factories = factories;
}
IterableDiffers.create = function(factories, parent) {
if (lang_1.isPresent(parent)) {
var copied = collection_1.ListWrapper.clone(parent.factories);
factories = factories.concat(copied);
return new IterableDiffers(factories);
} else {
return new IterableDiffers(factories);
}
};
IterableDiffers.extend = function(factories) {
return new di_1.Provider(IterableDiffers, {
useFactory: function(parent) {
if (lang_1.isBlank(parent)) {
throw new exceptions_1.BaseException("Cannot extend IterableDiffers without a parent injector");
}
return IterableDiffers.create(factories, parent);
},
deps: [ [ IterableDiffers, new di_1.SkipSelfMetadata(), new di_1.OptionalMetadata() ] ]
});
};
IterableDiffers.prototype.find = function(iterable) {
var factory = this.factories.find(function(f) {
return f.supports(iterable);
});
if (lang_1.isPresent(factory)) {
return factory;
} else {
throw new exceptions_1.BaseException("Cannot find a differ supporting object '" + iterable + "' of type '" + lang_1.getTypeNameForDebugging(iterable) + "'");
}
};
return IterableDiffers;
}();
exports.IterableDiffers = IterableDiffers;
}, function(module, exports, __webpack_require__) {
"use strict";
var exceptions_1 = __webpack_require__(131);
var collection_1 = __webpack_require__(134);
var lang_1 = __webpack_require__(117);
var DefaultIterableDifferFactory = function() {
function DefaultIterableDifferFactory() {}
DefaultIterableDifferFactory.prototype.supports = function(obj) {
return collection_1.isListLikeIterable(obj);
};
DefaultIterableDifferFactory.prototype.create = function(cdRef, trackByFn) {
return new DefaultIterableDiffer(trackByFn);
};
return DefaultIterableDifferFactory;
}();
exports.DefaultIterableDifferFactory = DefaultIterableDifferFactory;
var trackByIdentity = function(index, item) {
return item;
};
var DefaultIterableDiffer = function() {
function DefaultIterableDiffer(_trackByFn) {
this._trackByFn = _trackByFn;
this._length = null;
this._collection = null;
this._linkedRecords = null;
this._unlinkedRecords = null;
this._previousItHead = null;
this._itHead = null;
this._itTail = null;
this._additionsHead = null;
this._additionsTail = null;
this._movesHead = null;
this._movesTail = null;
this._removalsHead = null;
this._removalsTail = null;
this._identityChangesHead = null;
this._identityChangesTail = null;
this._trackByFn = lang_1.isPresent(this._trackByFn) ? this._trackByFn : trackByIdentity;
}
Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
get: function() {
return this._collection;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
get: function() {
return this._length;
},
enumerable: true,
configurable: true
});
DefaultIterableDiffer.prototype.forEachItem = function(fn) {
var record;
for (record = this._itHead; record !== null; record = record._next) {
fn(record);
}
};
DefaultIterableDiffer.prototype.forEachPreviousItem = function(fn) {
var record;
for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
fn(record);
}
};
DefaultIterableDiffer.prototype.forEachAddedItem = function(fn) {
var record;
for (record = this._additionsHead; record !== null; record = record._nextAdded) {
fn(record);
}
};
DefaultIterableDiffer.prototype.forEachMovedItem = function(fn) {
var record;
for (record = this._movesHead; record !== null; record = record._nextMoved) {
fn(record);
}
};
DefaultIterableDiffer.prototype.forEachRemovedItem = function(fn) {
var record;
for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
fn(record);
}
};
DefaultIterableDiffer.prototype.forEachIdentityChange = function(fn) {
var record;
for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
fn(record);
}
};
DefaultIterableDiffer.prototype.diff = function(collection) {
if (lang_1.isBlank(collection)) collection = [];
if (!collection_1.isListLikeIterable(collection)) {
throw new exceptions_1.BaseException("Error trying to diff '" + collection + "'");
}
if (this.check(collection)) {
return this;
} else {
return null;
}
};
DefaultIterableDiffer.prototype.onDestroy = function() {};
DefaultIterableDiffer.prototype.check = function(collection) {
var _this = this;
this._reset();
var record = this._itHead;
var mayBeDirty = false;
var index;
var item;
var itemTrackBy;
if (lang_1.isArray(collection)) {
var list = collection;
this._length = collection.length;
for (index = 0; index < this._length; index++) {
item = list[index];
itemTrackBy = this._trackByFn(index, item);
if (record === null || !lang_1.looseIdentical(record.trackById, itemTrackBy)) {
record = this._mismatch(record, item, itemTrackBy, index);
mayBeDirty = true;
} else {
if (mayBeDirty) {
record = this._verifyReinsertion(record, item, itemTrackBy, index);
}
if (!lang_1.looseIdentical(record.item, item)) this._addIdentityChange(record, item);
}
record = record._next;
}
} else {
index = 0;
collection_1.iterateListLike(collection, function(item) {
itemTrackBy = _this._trackByFn(index, item);
if (record === null || !lang_1.looseIdentical(record.trackById, itemTrackBy)) {
record = _this._mismatch(record, item, itemTrackBy, index);
mayBeDirty = true;
} else {
if (mayBeDirty) {
record = _this._verifyReinsertion(record, item, itemTrackBy, index);
}
if (!lang_1.looseIdentical(record.item, item)) _this._addIdentityChange(record, item);
}
record = record._next;
index++;
});
this._length = index;
}
this._truncate(record);
this._collection = collection;
return this.isDirty;
};
Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
get: function() {
return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
},
enumerable: true,
configurable: true
});
DefaultIterableDiffer.prototype._reset = function() {
if (this.isDirty) {
var record;
var nextRecord;
for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
record._nextPrevious = record._next;
}
for (record = this._additionsHead; record !== null; record = record._nextAdded) {
record.previousIndex = record.currentIndex;
}
this._additionsHead = this._additionsTail = null;
for (record = this._movesHead; record !== null; record = nextRecord) {
record.previousIndex = record.currentIndex;
nextRecord = record._nextMoved;
}
this._movesHead = this._movesTail = null;
this._removalsHead = this._removalsTail = null;
this._identityChangesHead = this._identityChangesTail = null;
}
};
DefaultIterableDiffer.prototype._mismatch = function(record, item, itemTrackBy, index) {
var previousRecord;
if (record === null) {
previousRecord = this._itTail;
} else {
previousRecord = record._prev;
this._remove(record);
}
record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
if (record !== null) {
if (!lang_1.looseIdentical(record.item, item)) this._addIdentityChange(record, item);
this._moveAfter(record, previousRecord, index);
} else {
record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
if (record !== null) {
if (!lang_1.looseIdentical(record.item, item)) this._addIdentityChange(record, item);
this._reinsertAfter(record, previousRecord, index);
} else {
record = this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);
}
}
return record;
};
DefaultIterableDiffer.prototype._verifyReinsertion = function(record, item, itemTrackBy, index) {
var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
if (reinsertRecord !== null) {
record = this._reinsertAfter(reinsertRecord, record._prev, index);
} else if (record.currentIndex != index) {
record.currentIndex = index;
this._addToMoves(record, index);
}
return record;
};
DefaultIterableDiffer.prototype._truncate = function(record) {
while (record !== null) {
var nextRecord = record._next;
this._addToRemovals(this._unlink(record));
record = nextRecord;
}
if (this._unlinkedRecords !== null) {
this._unlinkedRecords.clear();
}
if (this._additionsTail !== null) {
this._additionsTail._nextAdded = null;
}
if (this._movesTail !== null) {
this._movesTail._nextMoved = null;
}
if (this._itTail !== null) {
this._itTail._next = null;
}
if (this._removalsTail !== null) {
this._removalsTail._nextRemoved = null;
}
if (this._identityChangesTail !== null) {
this._identityChangesTail._nextIdentityChange = null;
}
};
DefaultIterableDiffer.prototype._reinsertAfter = function(record, prevRecord, index) {
if (this._unlinkedRecords !== null) {
this._unlinkedRecords.remove(record);
}
var prev = record._prevRemoved;
var next = record._nextRemoved;
if (prev === null) {
this._removalsHead = next;
} else {
prev._nextRemoved = next;
}
if (next === null) {
this._removalsTail = prev;
} else {
next._prevRemoved = prev;
}
this._insertAfter(record, prevRecord, index);
this._addToMoves(record, index);
return record;
};
DefaultIterableDiffer.prototype._moveAfter = function(record, prevRecord, index) {
this._unlink(record);
this._insertAfter(record, prevRecord, index);
this._addToMoves(record, index);
return record;
};
DefaultIterableDiffer.prototype._addAfter = function(record, prevRecord, index) {
this._insertAfter(record, prevRecord, index);
if (this._additionsTail === null) {
this._additionsTail = this._additionsHead = record;
} else {
this._additionsTail = this._additionsTail._nextAdded = record;
}
return record;
};
DefaultIterableDiffer.prototype._insertAfter = function(record, prevRecord, index) {
var next = prevRecord === null ? this._itHead : prevRecord._next;
record._next = next;
record._prev = prevRecord;
if (next === null) {
this._itTail = record;
} else {
next._prev = record;
}
if (prevRecord === null) {
this._itHead = record;
} else {
prevRecord._next = record;
}
if (this._linkedRecords === null) {
this._linkedRecords = new _DuplicateMap();
}
this._linkedRecords.put(record);
record.currentIndex = index;
return record;
};
DefaultIterableDiffer.prototype._remove = function(record) {
return this._addToRemovals(this._unlink(record));
};
DefaultIterableDiffer.prototype._unlink = function(record) {
if (this._linkedRecords !== null) {
this._linkedRecords.remove(record);
}
var prev = record._prev;
var next = record._next;
if (prev === null) {
this._itHead = next;
} else {
prev._next = next;
}
if (next === null) {
this._itTail = prev;
} else {
next._prev = prev;
}
return record;
};
DefaultIterableDiffer.prototype._addToMoves = function(record, toIndex) {
if (record.previousIndex === toIndex) {
return record;
}
if (this._movesTail === null) {
this._movesTail = this._movesHead = record;
} else {
this._movesTail = this._movesTail._nextMoved = record;
}
return record;
};
DefaultIterableDiffer.prototype._addToRemovals = function(record) {
if (this._unlinkedRecords === null) {
this._unlinkedRecords = new _DuplicateMap();
}
this._unlinkedRecords.put(record);
record.currentIndex = null;
record._nextRemoved = null;
if (this._removalsTail === null) {
this._removalsTail = this._removalsHead = record;
record._prevRemoved = null;
} else {
record._prevRemoved = this._removalsTail;
this._removalsTail = this._removalsTail._nextRemoved = record;
}
return record;
};
DefaultIterableDiffer.prototype._addIdentityChange = function(record, item) {
record.item = item;
if (this._identityChangesTail === null) {
this._identityChangesTail = this._identityChangesHead = record;
} else {
this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
}
return record;
};
DefaultIterableDiffer.prototype.toString = function() {
var list = [];
this.forEachItem(function(record) {
return list.push(record);
});
var previous = [];
this.forEachPreviousItem(function(record) {
return previous.push(record);
});
var additions = [];
this.forEachAddedItem(function(record) {
return additions.push(record);
});
var moves = [];
this.forEachMovedItem(function(record) {
return moves.push(record);
});
var removals = [];
this.forEachRemovedItem(function(record) {
return removals.push(record);
});
var identityChanges = [];
this.forEachIdentityChange(function(record) {
return identityChanges.push(record);
});
return "collection: " + list.join(", ") + "\n" + "previous: " + previous.join(", ") + "\n" + "additions: " + additions.join(", ") + "\n" + "moves: " + moves.join(", ") + "\n" + "removals: " + removals.join(", ") + "\n" + "identityChanges: " + identityChanges.join(", ") + "\n";
};
return DefaultIterableDiffer;
}();
exports.DefaultIterableDiffer = DefaultIterableDiffer;
var CollectionChangeRecord = function() {
function CollectionChangeRecord(item, trackById) {
this.item = item;
this.trackById = trackById;
this.currentIndex = null;
this.previousIndex = null;
this._nextPrevious = null;
this._prev = null;
this._next = null;
this._prevDup = null;
this._nextDup = null;
this._prevRemoved = null;
this._nextRemoved = null;
this._nextAdded = null;
this._nextMoved = null;
this._nextIdentityChange = null;
}
CollectionChangeRecord.prototype.toString = function() {
return this.previousIndex === this.currentIndex ? lang_1.stringify(this.item) : lang_1.stringify(this.item) + "[" + lang_1.stringify(this.previousIndex) + "->" + lang_1.stringify(this.currentIndex) + "]";
};
return CollectionChangeRecord;
}();
exports.CollectionChangeRecord = CollectionChangeRecord;
var _DuplicateItemRecordList = function() {
function _DuplicateItemRecordList() {
this._head = null;
this._tail = null;
}
_DuplicateItemRecordList.prototype.add = function(record) {
if (this._head === null) {
this._head = this._tail = record;
record._nextDup = null;
record._prevDup = null;
} else {
this._tail._nextDup = record;
record._prevDup = this._tail;
record._nextDup = null;
this._tail = record;
}
};
_DuplicateItemRecordList.prototype.get = function(trackById, afterIndex) {
var record;
for (record = this._head; record !== null; record = record._nextDup) {
if ((afterIndex === null || afterIndex < record.currentIndex) && lang_1.looseIdentical(record.trackById, trackById)) {
return record;
}
}
return null;
};
_DuplicateItemRecordList.prototype.remove = function(record) {
var prev = record._prevDup;
var next = record._nextDup;
if (prev === null) {
this._head = next;
} else {
prev._nextDup = next;
}
if (next === null) {
this._tail = prev;
} else {
next._prevDup = prev;
}
return this._head === null;
};
return _DuplicateItemRecordList;
}();
var _DuplicateMap = function() {
function _DuplicateMap() {
this.map = new Map();
}
_DuplicateMap.prototype.put = function(record) {
var key = lang_1.getMapKey(record.trackById);
var duplicates = this.map.get(key);
if (!lang_1.isPresent(duplicates)) {
duplicates = new _DuplicateItemRecordList();
this.map.set(key, duplicates);
}
duplicates.add(record);
};
_DuplicateMap.prototype.get = function(trackById, afterIndex) {
if (afterIndex === void 0) {
afterIndex = null;
}
var key = lang_1.getMapKey(trackById);
var recordList = this.map.get(key);
return lang_1.isBlank(recordList) ? null : recordList.get(trackById, afterIndex);
};
_DuplicateMap.prototype.remove = function(record) {
var key = lang_1.getMapKey(record.trackById);
var recordList = this.map.get(key);
if (recordList.remove(record)) {
this.map.delete(key);
}
return record;
};
Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
get: function() {
return this.map.size === 0;
},
enumerable: true,
configurable: true
});
_DuplicateMap.prototype.clear = function() {
this.map.clear();
};
_DuplicateMap.prototype.toString = function() {
return "_DuplicateMap(" + lang_1.stringify(this.map) + ")";
};
return _DuplicateMap;
}();
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(117);
var exceptions_1 = __webpack_require__(131);
var collection_1 = __webpack_require__(134);
var di_1 = __webpack_require__(128);
var KeyValueDiffers = function() {
function KeyValueDiffers(factories) {
this.factories = factories;
}
KeyValueDiffers.create = function(factories, parent) {
if (lang_1.isPresent(parent)) {
var copied = collection_1.ListWrapper.clone(parent.factories);
factories = factories.concat(copied);
return new KeyValueDiffers(factories);
} else {
return new KeyValueDiffers(factories);
}
};
KeyValueDiffers.extend = function(factories) {
return new di_1.Provider(KeyValueDiffers, {
useFactory: function(parent) {
if (lang_1.isBlank(parent)) {
throw new exceptions_1.BaseException("Cannot extend KeyValueDiffers without a parent injector");
}
return KeyValueDiffers.create(factories, parent);
},
deps: [ [ KeyValueDiffers, new di_1.SkipSelfMetadata(), new di_1.OptionalMetadata() ] ]
});
};
KeyValueDiffers.prototype.find = function(kv) {
var factory = this.factories.find(function(f) {
return f.supports(kv);
});
if (lang_1.isPresent(factory)) {
return factory;
} else {
throw new exceptions_1.BaseException("Cannot find a differ supporting object '" + kv + "'");
}
};
return KeyValueDiffers;
}();
exports.KeyValueDiffers = KeyValueDiffers;
}, function(module, exports, __webpack_require__) {
"use strict";
var collection_1 = __webpack_require__(134);
var lang_1 = __webpack_require__(117);
var exceptions_1 = __webpack_require__(131);
var DefaultKeyValueDifferFactory = function() {
function DefaultKeyValueDifferFactory() {}
DefaultKeyValueDifferFactory.prototype.supports = function(obj) {
return obj instanceof Map || lang_1.isJsObject(obj);
};
DefaultKeyValueDifferFactory.prototype.create = function(cdRef) {
return new DefaultKeyValueDiffer();
};
return DefaultKeyValueDifferFactory;
}();
exports.DefaultKeyValueDifferFactory = DefaultKeyValueDifferFactory;
var DefaultKeyValueDiffer = function() {
function DefaultKeyValueDiffer() {
this._records = new Map();
this._mapHead = null;
this._previousMapHead = null;
this._changesHead = null;
this._changesTail = null;
this._additionsHead = null;
this._additionsTail = null;
this._removalsHead = null;
this._removalsTail = null;
}
Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
get: function() {
return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
},
enumerable: true,
configurable: true
});
DefaultKeyValueDiffer.prototype.forEachItem = function(fn) {
var record;
for (record = this._mapHead; record !== null; record = record._next) {
fn(record);
}
};
DefaultKeyValueDiffer.prototype.forEachPreviousItem = function(fn) {
var record;
for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
fn(record);
}
};
DefaultKeyValueDiffer.prototype.forEachChangedItem = function(fn) {
var record;
for (record = this._changesHead; record !== null; record = record._nextChanged) {
fn(record);
}
};
DefaultKeyValueDiffer.prototype.forEachAddedItem = function(fn) {
var record;
for (record = this._additionsHead; record !== null; record = record._nextAdded) {
fn(record);
}
};
DefaultKeyValueDiffer.prototype.forEachRemovedItem = function(fn) {
var record;
for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
fn(record);
}
};
DefaultKeyValueDiffer.prototype.diff = function(map) {
if (lang_1.isBlank(map)) map = collection_1.MapWrapper.createFromPairs([]);
if (!(map instanceof Map || lang_1.isJsObject(map))) {
throw new exceptions_1.BaseException("Error trying to diff '" + map + "'");
}
if (this.check(map)) {
return this;
} else {
return null;
}
};
DefaultKeyValueDiffer.prototype.onDestroy = function() {};
DefaultKeyValueDiffer.prototype.check = function(map) {
var _this = this;
this._reset();
var records = this._records;
var oldSeqRecord = this._mapHead;
var lastOldSeqRecord = null;
var lastNewSeqRecord = null;
var seqChanged = false;
this._forEach(map, function(value, key) {
var newSeqRecord;
if (oldSeqRecord !== null && key === oldSeqRecord.key) {
newSeqRecord = oldSeqRecord;
if (!lang_1.looseIdentical(value, oldSeqRecord.currentValue)) {
oldSeqRecord.previousValue = oldSeqRecord.currentValue;
oldSeqRecord.currentValue = value;
_this._addToChanges(oldSeqRecord);
}
} else {
seqChanged = true;
if (oldSeqRecord !== null) {
oldSeqRecord._next = null;
_this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
_this._addToRemovals(oldSeqRecord);
}
if (records.has(key)) {
newSeqRecord = records.get(key);
} else {
newSeqRecord = new KeyValueChangeRecord(key);
records.set(key, newSeqRecord);
newSeqRecord.currentValue = value;
_this._addToAdditions(newSeqRecord);
}
}
if (seqChanged) {
if (_this._isInRemovals(newSeqRecord)) {
_this._removeFromRemovals(newSeqRecord);
}
if (lastNewSeqRecord == null) {
_this._mapHead = newSeqRecord;
} else {
lastNewSeqRecord._next = newSeqRecord;
}
}
lastOldSeqRecord = oldSeqRecord;
lastNewSeqRecord = newSeqRecord;
oldSeqRecord = oldSeqRecord === null ? null : oldSeqRecord._next;
});
this._truncate(lastOldSeqRecord, oldSeqRecord);
return this.isDirty;
};
DefaultKeyValueDiffer.prototype._reset = function() {
if (this.isDirty) {
var record;
for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
record._nextPrevious = record._next;
}
for (record = this._changesHead; record !== null; record = record._nextChanged) {
record.previousValue = record.currentValue;
}
for (record = this._additionsHead; record != null; record = record._nextAdded) {
record.previousValue = record.currentValue;
}
this._changesHead = this._changesTail = null;
this._additionsHead = this._additionsTail = null;
this._removalsHead = this._removalsTail = null;
}
};
DefaultKeyValueDiffer.prototype._truncate = function(lastRecord, record) {
while (record !== null) {
if (lastRecord === null) {
this._mapHead = null;
} else {
lastRecord._next = null;
}
var nextRecord = record._next;
this._addToRemovals(record);
lastRecord = record;
record = nextRecord;
}
for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
rec.previousValue = rec.currentValue;
rec.currentValue = null;
this._records.delete(rec.key);
}
};
DefaultKeyValueDiffer.prototype._isInRemovals = function(record) {
return record === this._removalsHead || record._nextRemoved !== null || record._prevRemoved !== null;
};
DefaultKeyValueDiffer.prototype._addToRemovals = function(record) {
if (this._removalsHead === null) {
this._removalsHead = this._removalsTail = record;
} else {
this._removalsTail._nextRemoved = record;
record._prevRemoved = this._removalsTail;
this._removalsTail = record;
}
};
DefaultKeyValueDiffer.prototype._removeFromSeq = function(prev, record) {
var next = record._next;
if (prev === null) {
this._mapHead = next;
} else {
prev._next = next;
}
};
DefaultKeyValueDiffer.prototype._removeFromRemovals = function(record) {
var prev = record._prevRemoved;
var next = record._nextRemoved;
if (prev === null) {
this._removalsHead = next;
} else {
prev._nextRemoved = next;
}
if (next === null) {
this._removalsTail = prev;
} else {
next._prevRemoved = prev;
}
record._prevRemoved = record._nextRemoved = null;
};
DefaultKeyValueDiffer.prototype._addToAdditions = function(record) {
if (this._additionsHead === null) {
this._additionsHead = this._additionsTail = record;
} else {
this._additionsTail._nextAdded = record;
this._additionsTail = record;
}
};
DefaultKeyValueDiffer.prototype._addToChanges = function(record) {
if (this._changesHead === null) {
this._changesHead = this._changesTail = record;
} else {
this._changesTail._nextChanged = record;
this._changesTail = record;
}
};
DefaultKeyValueDiffer.prototype.toString = function() {
var items = [];
var previous = [];
var changes = [];
var additions = [];
var removals = [];
var record;
for (record = this._mapHead; record !== null; record = record._next) {
items.push(lang_1.stringify(record));
}
for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
previous.push(lang_1.stringify(record));
}
for (record = this._changesHead; record !== null; record = record._nextChanged) {
changes.push(lang_1.stringify(record));
}
for (record = this._additionsHead; record !== null; record = record._nextAdded) {
additions.push(lang_1.stringify(record));
}
for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
removals.push(lang_1.stringify(record));
}
return "map: " + items.join(", ") + "\n" + "previous: " + previous.join(", ") + "\n" + "additions: " + additions.join(", ") + "\n" + "changes: " + changes.join(", ") + "\n" + "removals: " + removals.join(", ") + "\n";
};
DefaultKeyValueDiffer.prototype._forEach = function(obj, fn) {
if (obj instanceof Map) {
obj.forEach(fn);
} else {
collection_1.StringMapWrapper.forEach(obj, fn);
}
};
return DefaultKeyValueDiffer;
}();
exports.DefaultKeyValueDiffer = DefaultKeyValueDiffer;
var KeyValueChangeRecord = function() {
function KeyValueChangeRecord(key) {
this.key = key;
this.previousValue = null;
this.currentValue = null;
this._nextPrevious = null;
this._next = null;
this._nextAdded = null;
this._nextRemoved = null;
this._prevRemoved = null;
this._nextChanged = null;
}
KeyValueChangeRecord.prototype.toString = function() {
return lang_1.looseIdentical(this.previousValue, this.currentValue) ? lang_1.stringify(this.key) : lang_1.stringify(this.key) + "[" + lang_1.stringify(this.previousValue) + "->" + lang_1.stringify(this.currentValue) + "]";
};
return KeyValueChangeRecord;
}();
exports.KeyValueChangeRecord = KeyValueChangeRecord;
}, function(module, exports) {
"use strict";
var ChangeDetectorRef = function() {
function ChangeDetectorRef() {}
return ChangeDetectorRef;
}();
exports.ChangeDetectorRef = ChangeDetectorRef;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(134);
var lang_2 = __webpack_require__(117);
exports.looseIdentical = lang_2.looseIdentical;
exports.uninitialized = new Object();
function devModeEqual(a, b) {
if (collection_1.isListLikeIterable(a) && collection_1.isListLikeIterable(b)) {
return collection_1.areIterablesEqual(a, b, devModeEqual);
} else if (!collection_1.isListLikeIterable(a) && !lang_1.isPrimitive(a) && !collection_1.isListLikeIterable(b) && !lang_1.isPrimitive(b)) {
return true;
} else {
return lang_1.looseIdentical(a, b);
}
}
exports.devModeEqual = devModeEqual;
var WrappedValue = function() {
function WrappedValue(wrapped) {
this.wrapped = wrapped;
}
WrappedValue.wrap = function(value) {
return new WrappedValue(value);
};
return WrappedValue;
}();
exports.WrappedValue = WrappedValue;
var ValueUnwrapper = function() {
function ValueUnwrapper() {
this.hasWrappedValue = false;
}
ValueUnwrapper.prototype.unwrap = function(value) {
if (value instanceof WrappedValue) {
this.hasWrappedValue = true;
return value.wrapped;
}
return value;
};
ValueUnwrapper.prototype.reset = function() {
this.hasWrappedValue = false;
};
return ValueUnwrapper;
}();
exports.ValueUnwrapper = ValueUnwrapper;
var SimpleChange = function() {
function SimpleChange(previousValue, currentValue) {
this.previousValue = previousValue;
this.currentValue = currentValue;
}
SimpleChange.prototype.isFirstChange = function() {
return this.previousValue === exports.uninitialized;
};
return SimpleChange;
}();
exports.SimpleChange = SimpleChange;
}, function(module, exports, __webpack_require__) {
"use strict";
var exceptions_1 = __webpack_require__(131);
var RenderComponentType = function() {
function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles) {
this.id = id;
this.templateUrl = templateUrl;
this.slotCount = slotCount;
this.encapsulation = encapsulation;
this.styles = styles;
}
return RenderComponentType;
}();
exports.RenderComponentType = RenderComponentType;
var RenderDebugInfo = function() {
function RenderDebugInfo() {}
Object.defineProperty(RenderDebugInfo.prototype, "injector", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(RenderDebugInfo.prototype, "component", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(RenderDebugInfo.prototype, "providerTokens", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(RenderDebugInfo.prototype, "references", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(RenderDebugInfo.prototype, "context", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(RenderDebugInfo.prototype, "source", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return RenderDebugInfo;
}();
exports.RenderDebugInfo = RenderDebugInfo;
var Renderer = function() {
function Renderer() {}
return Renderer;
}();
exports.Renderer = Renderer;
var RootRenderer = function() {
function RootRenderer() {}
return RootRenderer;
}();
exports.RootRenderer = RootRenderer;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(117);
var decorators_1 = __webpack_require__(129);
var _warnImpl = lang_1.warn;
var Console = function() {
function Console() {}
Console.prototype.log = function(message) {
lang_1.print(message);
};
Console.prototype.warn = function(message) {
_warnImpl(message);
};
Console.decorators = [ {
type: decorators_1.Injectable
} ];
return Console;
}();
exports.Console = Console;
}, function(module, exports, __webpack_require__) {
"use strict";
var ng_zone_1 = __webpack_require__(147);
exports.NgZone = ng_zone_1.NgZone;
exports.NgZoneError = ng_zone_1.NgZoneError;
}, function(module, exports, __webpack_require__) {
"use strict";
var api_1 = __webpack_require__(191);
exports.RootRenderer = api_1.RootRenderer;
exports.Renderer = api_1.Renderer;
exports.RenderComponentType = api_1.RenderComponentType;
}, function(module, exports, __webpack_require__) {
"use strict";
var component_resolver_1 = __webpack_require__(174);
exports.ComponentResolver = component_resolver_1.ComponentResolver;
var query_list_1 = __webpack_require__(196);
exports.QueryList = query_list_1.QueryList;
var dynamic_component_loader_1 = __webpack_require__(197);
exports.DynamicComponentLoader = dynamic_component_loader_1.DynamicComponentLoader;
var element_ref_1 = __webpack_require__(179);
exports.ElementRef = element_ref_1.ElementRef;
var template_ref_1 = __webpack_require__(198);
exports.TemplateRef = template_ref_1.TemplateRef;
var view_ref_1 = __webpack_require__(199);
exports.EmbeddedViewRef = view_ref_1.EmbeddedViewRef;
exports.ViewRef = view_ref_1.ViewRef;
var view_container_ref_1 = __webpack_require__(180);
exports.ViewContainerRef = view_container_ref_1.ViewContainerRef;
var component_factory_1 = __webpack_require__(175);
exports.ComponentRef = component_factory_1.ComponentRef;
exports.ComponentFactory = component_factory_1.ComponentFactory;
var exceptions_1 = __webpack_require__(183);
exports.ExpressionChangedAfterItHasBeenCheckedException = exceptions_1.ExpressionChangedAfterItHasBeenCheckedException;
}, function(module, exports, __webpack_require__) {
"use strict";
var collection_1 = __webpack_require__(134);
var lang_1 = __webpack_require__(117);
var async_1 = __webpack_require__(148);
var QueryList = function() {
function QueryList() {
this._dirty = true;
this._results = [];
this._emitter = new async_1.EventEmitter();
}
Object.defineProperty(QueryList.prototype, "changes", {
get: function() {
return this._emitter;
},
enumerable: true,
configurable: true
});
Object.defineProperty(QueryList.prototype, "length", {
get: function() {
return this._results.length;
},
enumerable: true,
configurable: true
});
Object.defineProperty(QueryList.prototype, "first", {
get: function() {
return collection_1.ListWrapper.first(this._results);
},
enumerable: true,
configurable: true
});
Object.defineProperty(QueryList.prototype, "last", {
get: function() {
return collection_1.ListWrapper.last(this._results);
},
enumerable: true,
configurable: true
});
QueryList.prototype.map = function(fn) {
return this._results.map(fn);
};
QueryList.prototype.filter = function(fn) {
return this._results.filter(fn);
};
QueryList.prototype.reduce = function(fn, init) {
return this._results.reduce(fn, init);
};
QueryList.prototype.forEach = function(fn) {
this._results.forEach(fn);
};
QueryList.prototype.toArray = function() {
return collection_1.ListWrapper.clone(this._results);
};
QueryList.prototype[lang_1.getSymbolIterator()] = function() {
return this._results[lang_1.getSymbolIterator()]();
};
QueryList.prototype.toString = function() {
return this._results.toString();
};
QueryList.prototype.reset = function(res) {
this._results = collection_1.ListWrapper.flatten(res);
this._dirty = false;
};
QueryList.prototype.notifyOnChanges = function() {
this._emitter.emit(this);
};
QueryList.prototype.setDirty = function() {
this._dirty = true;
};
Object.defineProperty(QueryList.prototype, "dirty", {
get: function() {
return this._dirty;
},
enumerable: true,
configurable: true
});
return QueryList;
}();
exports.QueryList = QueryList;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var component_resolver_1 = __webpack_require__(174);
var lang_1 = __webpack_require__(117);
var reflective_injector_1 = __webpack_require__(135);
var decorators_1 = __webpack_require__(129);
var DynamicComponentLoader = function() {
function DynamicComponentLoader() {}
return DynamicComponentLoader;
}();
exports.DynamicComponentLoader = DynamicComponentLoader;
var DynamicComponentLoader_ = function(_super) {
__extends(DynamicComponentLoader_, _super);
function DynamicComponentLoader_(_compiler) {
_super.call(this);
this._compiler = _compiler;
}
DynamicComponentLoader_.prototype.loadAsRoot = function(type, overrideSelectorOrNode, injector, onDispose, projectableNodes) {
return this._compiler.resolveComponent(type).then(function(componentFactory) {
var componentRef = componentFactory.create(injector, projectableNodes, lang_1.isPresent(overrideSelectorOrNode) ? overrideSelectorOrNode : componentFactory.selector);
if (lang_1.isPresent(onDispose)) {
componentRef.onDestroy(onDispose);
}
return componentRef;
});
};
DynamicComponentLoader_.prototype.loadNextToLocation = function(type, location, providers, projectableNodes) {
if (providers === void 0) {
providers = null;
}
if (projectableNodes === void 0) {
projectableNodes = null;
}
return this._compiler.resolveComponent(type).then(function(componentFactory) {
var contextInjector = location.parentInjector;
var childInjector = lang_1.isPresent(providers) && providers.length > 0 ? reflective_injector_1.ReflectiveInjector.fromResolvedProviders(providers, contextInjector) : contextInjector;
return location.createComponent(componentFactory, location.length, childInjector, projectableNodes);
});
};
DynamicComponentLoader_.decorators = [ {
type: decorators_1.Injectable
} ];
DynamicComponentLoader_.ctorParameters = [ {
type: component_resolver_1.ComponentResolver
} ];
return DynamicComponentLoader_;
}(DynamicComponentLoader);
exports.DynamicComponentLoader_ = DynamicComponentLoader_;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(117);
var EMPTY_CONTEXT = new Object();
var TemplateRef = function() {
function TemplateRef() {}
Object.defineProperty(TemplateRef.prototype, "elementRef", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
return TemplateRef;
}();
exports.TemplateRef = TemplateRef;
var TemplateRef_ = function(_super) {
__extends(TemplateRef_, _super);
function TemplateRef_(_appElement, _viewFactory) {
_super.call(this);
this._appElement = _appElement;
this._viewFactory = _viewFactory;
}
TemplateRef_.prototype.createEmbeddedView = function(context) {
var view = this._viewFactory(this._appElement.parentView.viewUtils, this._appElement.parentInjector, this._appElement);
if (lang_1.isBlank(context)) {
context = EMPTY_CONTEXT;
}
view.create(context, null, null);
return view.ref;
};
Object.defineProperty(TemplateRef_.prototype, "elementRef", {
get: function() {
return this._appElement.elementRef;
},
enumerable: true,
configurable: true
});
return TemplateRef_;
}(TemplateRef);
exports.TemplateRef_ = TemplateRef_;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var exceptions_1 = __webpack_require__(131);
var constants_1 = __webpack_require__(124);
var ViewRef = function() {
function ViewRef() {}
Object.defineProperty(ViewRef.prototype, "destroyed", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return ViewRef;
}();
exports.ViewRef = ViewRef;
var EmbeddedViewRef = function(_super) {
__extends(EmbeddedViewRef, _super);
function EmbeddedViewRef() {
_super.apply(this, arguments);
}
Object.defineProperty(EmbeddedViewRef.prototype, "context", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return EmbeddedViewRef;
}(ViewRef);
exports.EmbeddedViewRef = EmbeddedViewRef;
var ViewRef_ = function() {
function ViewRef_(_view) {
this._view = _view;
this._view = _view;
}
Object.defineProperty(ViewRef_.prototype, "internalView", {
get: function() {
return this._view;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewRef_.prototype, "rootNodes", {
get: function() {
return this._view.flatRootNodes;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewRef_.prototype, "context", {
get: function() {
return this._view.context;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ViewRef_.prototype, "destroyed", {
get: function() {
return this._view.destroyed;
},
enumerable: true,
configurable: true
});
ViewRef_.prototype.markForCheck = function() {
this._view.markPathToRootAsCheckOnce();
};
ViewRef_.prototype.detach = function() {
this._view.cdMode = constants_1.ChangeDetectionStrategy.Detached;
};
ViewRef_.prototype.detectChanges = function() {
this._view.detectChanges(false);
};
ViewRef_.prototype.checkNoChanges = function() {
this._view.detectChanges(true);
};
ViewRef_.prototype.reattach = function() {
this._view.cdMode = constants_1.ChangeDetectionStrategy.CheckAlways;
this.markForCheck();
};
ViewRef_.prototype.onDestroy = function(callback) {
this._view.disposables.push(callback);
};
ViewRef_.prototype.destroy = function() {
this._view.destroy();
};
return ViewRef_;
}();
exports.ViewRef_ = ViewRef_;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(134);
var EventListener = function() {
function EventListener(name, callback) {
this.name = name;
this.callback = callback;
}
return EventListener;
}();
exports.EventListener = EventListener;
var DebugNode = function() {
function DebugNode(nativeNode, parent, _debugInfo) {
this._debugInfo = _debugInfo;
this.nativeNode = nativeNode;
if (lang_1.isPresent(parent) && parent instanceof DebugElement) {
parent.addChild(this);
} else {
this.parent = null;
}
this.listeners = [];
}
Object.defineProperty(DebugNode.prototype, "injector", {
get: function() {
return lang_1.isPresent(this._debugInfo) ? this._debugInfo.injector : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugNode.prototype, "componentInstance", {
get: function() {
return lang_1.isPresent(this._debugInfo) ? this._debugInfo.component : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugNode.prototype, "context", {
get: function() {
return lang_1.isPresent(this._debugInfo) ? this._debugInfo.context : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugNode.prototype, "references", {
get: function() {
return lang_1.isPresent(this._debugInfo) ? this._debugInfo.references : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugNode.prototype, "providerTokens", {
get: function() {
return lang_1.isPresent(this._debugInfo) ? this._debugInfo.providerTokens : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugNode.prototype, "source", {
get: function() {
return lang_1.isPresent(this._debugInfo) ? this._debugInfo.source : null;
},
enumerable: true,
configurable: true
});
DebugNode.prototype.inject = function(token) {
return this.injector.get(token);
};
return DebugNode;
}();
exports.DebugNode = DebugNode;
var DebugElement = function(_super) {
__extends(DebugElement, _super);
function DebugElement(nativeNode, parent, _debugInfo) {
_super.call(this, nativeNode, parent, _debugInfo);
this.properties = {};
this.attributes = {};
this.childNodes = [];
this.nativeElement = nativeNode;
}
DebugElement.prototype.addChild = function(child) {
if (lang_1.isPresent(child)) {
this.childNodes.push(child);
child.parent = this;
}
};
DebugElement.prototype.removeChild = function(child) {
var childIndex = this.childNodes.indexOf(child);
if (childIndex !== -1) {
child.parent = null;
this.childNodes.splice(childIndex, 1);
}
};
DebugElement.prototype.insertChildrenAfter = function(child, newChildren) {
var siblingIndex = this.childNodes.indexOf(child);
if (siblingIndex !== -1) {
var previousChildren = this.childNodes.slice(0, siblingIndex + 1);
var nextChildren = this.childNodes.slice(siblingIndex + 1);
this.childNodes = collection_1.ListWrapper.concat(collection_1.ListWrapper.concat(previousChildren, newChildren), nextChildren);
for (var i = 0; i < newChildren.length; ++i) {
var newChild = newChildren[i];
if (lang_1.isPresent(newChild.parent)) {
newChild.parent.removeChild(newChild);
}
newChild.parent = this;
}
}
};
DebugElement.prototype.query = function(predicate) {
var results = this.queryAll(predicate);
return results.length > 0 ? results[0] : null;
};
DebugElement.prototype.queryAll = function(predicate) {
var matches = [];
_queryElementChildren(this, predicate, matches);
return matches;
};
DebugElement.prototype.queryAllNodes = function(predicate) {
var matches = [];
_queryNodeChildren(this, predicate, matches);
return matches;
};
Object.defineProperty(DebugElement.prototype, "children", {
get: function() {
var children = [];
this.childNodes.forEach(function(node) {
if (node instanceof DebugElement) {
children.push(node);
}
});
return children;
},
enumerable: true,
configurable: true
});
DebugElement.prototype.triggerEventHandler = function(eventName, eventObj) {
this.listeners.forEach(function(listener) {
if (listener.name == eventName) {
listener.callback(eventObj);
}
});
};
return DebugElement;
}(DebugNode);
exports.DebugElement = DebugElement;
function asNativeElements(debugEls) {
return debugEls.map(function(el) {
return el.nativeElement;
});
}
exports.asNativeElements = asNativeElements;
function _queryElementChildren(element, predicate, matches) {
element.childNodes.forEach(function(node) {
if (node instanceof DebugElement) {
if (predicate(node)) {
matches.push(node);
}
_queryElementChildren(node, predicate, matches);
}
});
}
function _queryNodeChildren(parentNode, predicate, matches) {
if (parentNode instanceof DebugElement) {
parentNode.childNodes.forEach(function(node) {
if (predicate(node)) {
matches.push(node);
}
if (node instanceof DebugElement) {
_queryNodeChildren(node, predicate, matches);
}
});
}
}
var _nativeNodeToDebugNode = new Map();
function getDebugNode(nativeNode) {
return _nativeNodeToDebugNode.get(nativeNode);
}
exports.getDebugNode = getDebugNode;
function getAllDebugNodes() {
return collection_1.MapWrapper.values(_nativeNodeToDebugNode);
}
exports.getAllDebugNodes = getAllDebugNodes;
function indexDebugNode(node) {
_nativeNodeToDebugNode.set(node.nativeNode, node);
}
exports.indexDebugNode = indexDebugNode;
function removeDebugNodeFromIndex(node) {
_nativeNodeToDebugNode.delete(node.nativeNode);
}
exports.removeDebugNodeFromIndex = removeDebugNodeFromIndex;
}, function(module, exports, __webpack_require__) {
"use strict";
var change_detection_1 = __webpack_require__(184);
exports.ChangeDetectionStrategy = change_detection_1.ChangeDetectionStrategy;
exports.ChangeDetectorRef = change_detection_1.ChangeDetectorRef;
exports.WrappedValue = change_detection_1.WrappedValue;
exports.SimpleChange = change_detection_1.SimpleChange;
exports.DefaultIterableDiffer = change_detection_1.DefaultIterableDiffer;
exports.IterableDiffers = change_detection_1.IterableDiffers;
exports.KeyValueDiffers = change_detection_1.KeyValueDiffers;
exports.CollectionChangeRecord = change_detection_1.CollectionChangeRecord;
exports.KeyValueChangeRecord = change_detection_1.KeyValueChangeRecord;
}, function(module, exports, __webpack_require__) {
"use strict";
var di_1 = __webpack_require__(128);
exports.PLATFORM_DIRECTIVES = new di_1.OpaqueToken("Platform Directives");
exports.PLATFORM_PIPES = new di_1.OpaqueToken("Platform Pipes");
}, function(module, exports, __webpack_require__) {
"use strict";
var console_1 = __webpack_require__(192);
var reflection_1 = __webpack_require__(137);
var reflector_reader_1 = __webpack_require__(139);
var testability_1 = __webpack_require__(173);
var application_ref_1 = __webpack_require__(146);
function _reflector() {
return reflection_1.reflector;
}
var __unused;
exports.PLATFORM_COMMON_PROVIDERS = [ application_ref_1.PLATFORM_CORE_PROVIDERS, {
provide: reflection_1.Reflector,
useFactory: _reflector,
deps: []
}, {
provide: reflector_reader_1.ReflectorReader,
useExisting: reflection_1.Reflector
}, testability_1.TestabilityRegistry, console_1.Console ];
}, function(module, exports, __webpack_require__) {
"use strict";
var application_tokens_1 = __webpack_require__(172);
var application_ref_1 = __webpack_require__(146);
var change_detection_1 = __webpack_require__(184);
var view_utils_1 = __webpack_require__(176);
var component_resolver_1 = __webpack_require__(174);
var dynamic_component_loader_1 = __webpack_require__(197);
var __unused;
exports.APPLICATION_COMMON_PROVIDERS = [ application_ref_1.APPLICATION_CORE_PROVIDERS, {
provide: component_resolver_1.ComponentResolver,
useClass: component_resolver_1.ReflectorComponentResolver
}, application_tokens_1.APP_ID_RANDOM_PROVIDER, view_utils_1.ViewUtils, {
provide: change_detection_1.IterableDiffers,
useValue: change_detection_1.defaultIterableDiffers
}, {
provide: change_detection_1.KeyValueDiffers,
useValue: change_detection_1.defaultKeyValueDiffers
}, {
provide: dynamic_component_loader_1.DynamicComponentLoader,
useClass: dynamic_component_loader_1.DynamicComponentLoader_
} ];
}, function(module, exports, __webpack_require__) {
"use strict";
var constants = __webpack_require__(124);
var security = __webpack_require__(116);
var reflective_provider = __webpack_require__(136);
var lifecycle_hooks = __webpack_require__(206);
var reflector_reader = __webpack_require__(139);
var component_resolver = __webpack_require__(174);
var element = __webpack_require__(177);
var view = __webpack_require__(207);
var view_type = __webpack_require__(178);
var view_utils = __webpack_require__(176);
var metadata_view = __webpack_require__(125);
var debug_context = __webpack_require__(208);
var change_detection_util = __webpack_require__(190);
var api = __webpack_require__(191);
var template_ref = __webpack_require__(198);
var wtf_init = __webpack_require__(210);
var reflection_capabilities = __webpack_require__(140);
var decorators = __webpack_require__(126);
var debug = __webpack_require__(211);
var provider_util = __webpack_require__(144);
var console = __webpack_require__(192);
exports.__core_private__ = {
isDefaultChangeDetectionStrategy: constants.isDefaultChangeDetectionStrategy,
ChangeDetectorState: constants.ChangeDetectorState,
CHANGE_DETECTION_STRATEGY_VALUES: constants.CHANGE_DETECTION_STRATEGY_VALUES,
constructDependencies: reflective_provider.constructDependencies,
LifecycleHooks: lifecycle_hooks.LifecycleHooks,
LIFECYCLE_HOOKS_VALUES: lifecycle_hooks.LIFECYCLE_HOOKS_VALUES,
ReflectorReader: reflector_reader.ReflectorReader,
ReflectorComponentResolver: component_resolver.ReflectorComponentResolver,
AppElement: element.AppElement,
AppView: view.AppView,
DebugAppView: view.DebugAppView,
ViewType: view_type.ViewType,
MAX_INTERPOLATION_VALUES: view_utils.MAX_INTERPOLATION_VALUES,
checkBinding: view_utils.checkBinding,
flattenNestedViewRenderNodes: view_utils.flattenNestedViewRenderNodes,
interpolate: view_utils.interpolate,
ViewUtils: view_utils.ViewUtils,
VIEW_ENCAPSULATION_VALUES: metadata_view.VIEW_ENCAPSULATION_VALUES,
DebugContext: debug_context.DebugContext,
StaticNodeDebugInfo: debug_context.StaticNodeDebugInfo,
devModeEqual: change_detection_util.devModeEqual,
uninitialized: change_detection_util.uninitialized,
ValueUnwrapper: change_detection_util.ValueUnwrapper,
RenderDebugInfo: api.RenderDebugInfo,
SecurityContext: security.SecurityContext,
SanitizationService: security.SanitizationService,
TemplateRef_: template_ref.TemplateRef_,
wtfInit: wtf_init.wtfInit,
ReflectionCapabilities: reflection_capabilities.ReflectionCapabilities,
makeDecorator: decorators.makeDecorator,
DebugDomRootRenderer: debug.DebugDomRootRenderer,
createProvider: provider_util.createProvider,
isProviderLiteral: provider_util.isProviderLiteral,
EMPTY_ARRAY: view_utils.EMPTY_ARRAY,
EMPTY_MAP: view_utils.EMPTY_MAP,
pureProxy1: view_utils.pureProxy1,
pureProxy2: view_utils.pureProxy2,
pureProxy3: view_utils.pureProxy3,
pureProxy4: view_utils.pureProxy4,
pureProxy5: view_utils.pureProxy5,
pureProxy6: view_utils.pureProxy6,
pureProxy7: view_utils.pureProxy7,
pureProxy8: view_utils.pureProxy8,
pureProxy9: view_utils.pureProxy9,
pureProxy10: view_utils.pureProxy10,
castByValue: view_utils.castByValue,
Console: console.Console
};
}, function(module, exports) {
"use strict";
(function(LifecycleHooks) {
LifecycleHooks[LifecycleHooks["OnInit"] = 0] = "OnInit";
LifecycleHooks[LifecycleHooks["OnDestroy"] = 1] = "OnDestroy";
LifecycleHooks[LifecycleHooks["DoCheck"] = 2] = "DoCheck";
LifecycleHooks[LifecycleHooks["OnChanges"] = 3] = "OnChanges";
LifecycleHooks[LifecycleHooks["AfterContentInit"] = 4] = "AfterContentInit";
LifecycleHooks[LifecycleHooks["AfterContentChecked"] = 5] = "AfterContentChecked";
LifecycleHooks[LifecycleHooks["AfterViewInit"] = 6] = "AfterViewInit";
LifecycleHooks[LifecycleHooks["AfterViewChecked"] = 7] = "AfterViewChecked";
})(exports.LifecycleHooks || (exports.LifecycleHooks = {}));
var LifecycleHooks = exports.LifecycleHooks;
exports.LIFECYCLE_HOOKS_VALUES = [ LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges, LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit, LifecycleHooks.AfterViewChecked ];
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var collection_1 = __webpack_require__(134);
var element_1 = __webpack_require__(177);
var lang_1 = __webpack_require__(117);
var async_1 = __webpack_require__(148);
var view_ref_1 = __webpack_require__(199);
var view_type_1 = __webpack_require__(178);
var view_utils_1 = __webpack_require__(176);
var change_detection_1 = __webpack_require__(184);
var profile_1 = __webpack_require__(181);
var exceptions_1 = __webpack_require__(183);
var debug_context_1 = __webpack_require__(208);
var element_injector_1 = __webpack_require__(209);
var _scope_check = profile_1.wtfCreateScope("AppView#check(ascii id)");
var AppView = function() {
function AppView(clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode) {
this.clazz = clazz;
this.componentType = componentType;
this.type = type;
this.viewUtils = viewUtils;
this.parentInjector = parentInjector;
this.declarationAppElement = declarationAppElement;
this.cdMode = cdMode;
this.contentChildren = [];
this.viewChildren = [];
this.viewContainerElement = null;
this.cdState = change_detection_1.ChangeDetectorState.NeverChecked;
this.destroyed = false;
this.ref = new view_ref_1.ViewRef_(this);
if (type === view_type_1.ViewType.COMPONENT || type === view_type_1.ViewType.HOST) {
this.renderer = viewUtils.renderComponent(componentType);
} else {
this.renderer = declarationAppElement.parentView.renderer;
}
}
AppView.prototype.create = function(context, givenProjectableNodes, rootSelectorOrNode) {
this.context = context;
var projectableNodes;
switch (this.type) {
case view_type_1.ViewType.COMPONENT:
projectableNodes = view_utils_1.ensureSlotCount(givenProjectableNodes, this.componentType.slotCount);
break;

case view_type_1.ViewType.EMBEDDED:
projectableNodes = this.declarationAppElement.parentView.projectableNodes;
break;

case view_type_1.ViewType.HOST:
projectableNodes = givenProjectableNodes;
break;
}
this._hasExternalHostElement = lang_1.isPresent(rootSelectorOrNode);
this.projectableNodes = projectableNodes;
return this.createInternal(rootSelectorOrNode);
};
AppView.prototype.createInternal = function(rootSelectorOrNode) {
return null;
};
AppView.prototype.init = function(rootNodesOrAppElements, allNodes, disposables, subscriptions) {
this.rootNodesOrAppElements = rootNodesOrAppElements;
this.allNodes = allNodes;
this.disposables = disposables;
this.subscriptions = subscriptions;
if (this.type === view_type_1.ViewType.COMPONENT) {
this.declarationAppElement.parentView.viewChildren.push(this);
this.dirtyParentQueriesInternal();
}
};
AppView.prototype.selectOrCreateHostElement = function(elementName, rootSelectorOrNode, debugInfo) {
var hostElement;
if (lang_1.isPresent(rootSelectorOrNode)) {
hostElement = this.renderer.selectRootElement(rootSelectorOrNode, debugInfo);
} else {
hostElement = this.renderer.createElement(null, elementName, debugInfo);
}
return hostElement;
};
AppView.prototype.injectorGet = function(token, nodeIndex, notFoundResult) {
return this.injectorGetInternal(token, nodeIndex, notFoundResult);
};
AppView.prototype.injectorGetInternal = function(token, nodeIndex, notFoundResult) {
return notFoundResult;
};
AppView.prototype.injector = function(nodeIndex) {
if (lang_1.isPresent(nodeIndex)) {
return new element_injector_1.ElementInjector(this, nodeIndex);
} else {
return this.parentInjector;
}
};
AppView.prototype.destroy = function() {
if (this._hasExternalHostElement) {
this.renderer.detachView(this.flatRootNodes);
} else if (lang_1.isPresent(this.viewContainerElement)) {
this.viewContainerElement.detachView(this.viewContainerElement.nestedViews.indexOf(this));
}
this._destroyRecurse();
};
AppView.prototype._destroyRecurse = function() {
if (this.destroyed) {
return;
}
var children = this.contentChildren;
for (var i = 0; i < children.length; i++) {
children[i]._destroyRecurse();
}
children = this.viewChildren;
for (var i = 0; i < children.length; i++) {
children[i]._destroyRecurse();
}
this.destroyLocal();
this.destroyed = true;
};
AppView.prototype.destroyLocal = function() {
var hostElement = this.type === view_type_1.ViewType.COMPONENT ? this.declarationAppElement.nativeElement : null;
for (var i = 0; i < this.disposables.length; i++) {
this.disposables[i]();
}
for (var i = 0; i < this.subscriptions.length; i++) {
async_1.ObservableWrapper.dispose(this.subscriptions[i]);
}
this.destroyInternal();
if (this._hasExternalHostElement) {
this.renderer.detachView(this.flatRootNodes);
} else if (lang_1.isPresent(this.viewContainerElement)) {
this.viewContainerElement.detachView(this.viewContainerElement.nestedViews.indexOf(this));
} else {
this.dirtyParentQueriesInternal();
}
this.renderer.destroyView(hostElement, this.allNodes);
};
AppView.prototype.destroyInternal = function() {};
Object.defineProperty(AppView.prototype, "changeDetectorRef", {
get: function() {
return this.ref;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AppView.prototype, "parent", {
get: function() {
return lang_1.isPresent(this.declarationAppElement) ? this.declarationAppElement.parentView : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AppView.prototype, "flatRootNodes", {
get: function() {
return view_utils_1.flattenNestedViewRenderNodes(this.rootNodesOrAppElements);
},
enumerable: true,
configurable: true
});
Object.defineProperty(AppView.prototype, "lastRootNode", {
get: function() {
var lastNode = this.rootNodesOrAppElements.length > 0 ? this.rootNodesOrAppElements[this.rootNodesOrAppElements.length - 1] : null;
return _findLastRenderNode(lastNode);
},
enumerable: true,
configurable: true
});
AppView.prototype.dirtyParentQueriesInternal = function() {};
AppView.prototype.detectChanges = function(throwOnChange) {
var s = _scope_check(this.clazz);
if (this.cdMode === change_detection_1.ChangeDetectionStrategy.Detached || this.cdMode === change_detection_1.ChangeDetectionStrategy.Checked || this.cdState === change_detection_1.ChangeDetectorState.Errored) return;
if (this.destroyed) {
this.throwDestroyedError("detectChanges");
}
this.detectChangesInternal(throwOnChange);
if (this.cdMode === change_detection_1.ChangeDetectionStrategy.CheckOnce) this.cdMode = change_detection_1.ChangeDetectionStrategy.Checked;
this.cdState = change_detection_1.ChangeDetectorState.CheckedBefore;
profile_1.wtfLeave(s);
};
AppView.prototype.detectChangesInternal = function(throwOnChange) {
this.detectContentChildrenChanges(throwOnChange);
this.detectViewChildrenChanges(throwOnChange);
};
AppView.prototype.detectContentChildrenChanges = function(throwOnChange) {
for (var i = 0; i < this.contentChildren.length; ++i) {
this.contentChildren[i].detectChanges(throwOnChange);
}
};
AppView.prototype.detectViewChildrenChanges = function(throwOnChange) {
for (var i = 0; i < this.viewChildren.length; ++i) {
this.viewChildren[i].detectChanges(throwOnChange);
}
};
AppView.prototype.addToContentChildren = function(renderAppElement) {
renderAppElement.parentView.contentChildren.push(this);
this.viewContainerElement = renderAppElement;
this.dirtyParentQueriesInternal();
};
AppView.prototype.removeFromContentChildren = function(renderAppElement) {
collection_1.ListWrapper.remove(renderAppElement.parentView.contentChildren, this);
this.dirtyParentQueriesInternal();
this.viewContainerElement = null;
};
AppView.prototype.markAsCheckOnce = function() {
this.cdMode = change_detection_1.ChangeDetectionStrategy.CheckOnce;
};
AppView.prototype.markPathToRootAsCheckOnce = function() {
var c = this;
while (lang_1.isPresent(c) && c.cdMode !== change_detection_1.ChangeDetectionStrategy.Detached) {
if (c.cdMode === change_detection_1.ChangeDetectionStrategy.Checked) {
c.cdMode = change_detection_1.ChangeDetectionStrategy.CheckOnce;
}
var parentEl = c.type === view_type_1.ViewType.COMPONENT ? c.declarationAppElement : c.viewContainerElement;
c = lang_1.isPresent(parentEl) ? parentEl.parentView : null;
}
};
AppView.prototype.eventHandler = function(cb) {
return cb;
};
AppView.prototype.throwDestroyedError = function(details) {
throw new exceptions_1.ViewDestroyedException(details);
};
return AppView;
}();
exports.AppView = AppView;
var DebugAppView = function(_super) {
__extends(DebugAppView, _super);
function DebugAppView(clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode, staticNodeDebugInfos) {
_super.call(this, clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode);
this.staticNodeDebugInfos = staticNodeDebugInfos;
this._currentDebugContext = null;
}
DebugAppView.prototype.create = function(context, givenProjectableNodes, rootSelectorOrNode) {
this._resetDebug();
try {
return _super.prototype.create.call(this, context, givenProjectableNodes, rootSelectorOrNode);
} catch (e) {
this._rethrowWithContext(e, e.stack);
throw e;
}
};
DebugAppView.prototype.injectorGet = function(token, nodeIndex, notFoundResult) {
this._resetDebug();
try {
return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
} catch (e) {
this._rethrowWithContext(e, e.stack);
throw e;
}
};
DebugAppView.prototype.destroyLocal = function() {
this._resetDebug();
try {
_super.prototype.destroyLocal.call(this);
} catch (e) {
this._rethrowWithContext(e, e.stack);
throw e;
}
};
DebugAppView.prototype.detectChanges = function(throwOnChange) {
this._resetDebug();
try {
_super.prototype.detectChanges.call(this, throwOnChange);
} catch (e) {
this._rethrowWithContext(e, e.stack);
throw e;
}
};
DebugAppView.prototype._resetDebug = function() {
this._currentDebugContext = null;
};
DebugAppView.prototype.debug = function(nodeIndex, rowNum, colNum) {
return this._currentDebugContext = new debug_context_1.DebugContext(this, nodeIndex, rowNum, colNum);
};
DebugAppView.prototype._rethrowWithContext = function(e, stack) {
if (!(e instanceof exceptions_1.ViewWrappedException)) {
if (!(e instanceof exceptions_1.ExpressionChangedAfterItHasBeenCheckedException)) {
this.cdState = change_detection_1.ChangeDetectorState.Errored;
}
if (lang_1.isPresent(this._currentDebugContext)) {
throw new exceptions_1.ViewWrappedException(e, stack, this._currentDebugContext);
}
}
};
DebugAppView.prototype.eventHandler = function(cb) {
var _this = this;
var superHandler = _super.prototype.eventHandler.call(this, cb);
return function(event) {
_this._resetDebug();
try {
return superHandler(event);
} catch (e) {
_this._rethrowWithContext(e, e.stack);
throw e;
}
};
};
return DebugAppView;
}(AppView);
exports.DebugAppView = DebugAppView;
function _findLastRenderNode(node) {
var lastNode;
if (node instanceof element_1.AppElement) {
var appEl = node;
lastNode = appEl.nativeElement;
if (lang_1.isPresent(appEl.nestedViews)) {
for (var i = appEl.nestedViews.length - 1; i >= 0; i--) {
var nestedView = appEl.nestedViews[i];
if (nestedView.rootNodesOrAppElements.length > 0) {
lastNode = _findLastRenderNode(nestedView.rootNodesOrAppElements[nestedView.rootNodesOrAppElements.length - 1]);
}
}
}
} else {
lastNode = node;
}
return lastNode;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(134);
var view_type_1 = __webpack_require__(178);
var StaticNodeDebugInfo = function() {
function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {
this.providerTokens = providerTokens;
this.componentToken = componentToken;
this.refTokens = refTokens;
}
return StaticNodeDebugInfo;
}();
exports.StaticNodeDebugInfo = StaticNodeDebugInfo;
var DebugContext = function() {
function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {
this._view = _view;
this._nodeIndex = _nodeIndex;
this._tplRow = _tplRow;
this._tplCol = _tplCol;
}
Object.defineProperty(DebugContext.prototype, "_staticNodeInfo", {
get: function() {
return lang_1.isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext.prototype, "context", {
get: function() {
return this._view.context;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext.prototype, "component", {
get: function() {
var staticNodeInfo = this._staticNodeInfo;
if (lang_1.isPresent(staticNodeInfo) && lang_1.isPresent(staticNodeInfo.componentToken)) {
return this.injector.get(staticNodeInfo.componentToken);
}
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext.prototype, "componentRenderElement", {
get: function() {
var componentView = this._view;
while (lang_1.isPresent(componentView.declarationAppElement) && componentView.type !== view_type_1.ViewType.COMPONENT) {
componentView = componentView.declarationAppElement.parentView;
}
return lang_1.isPresent(componentView.declarationAppElement) ? componentView.declarationAppElement.nativeElement : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext.prototype, "injector", {
get: function() {
return this._view.injector(this._nodeIndex);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext.prototype, "renderNode", {
get: function() {
if (lang_1.isPresent(this._nodeIndex) && lang_1.isPresent(this._view.allNodes)) {
return this._view.allNodes[this._nodeIndex];
} else {
return null;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext.prototype, "providerTokens", {
get: function() {
var staticNodeInfo = this._staticNodeInfo;
return lang_1.isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext.prototype, "source", {
get: function() {
return this._view.componentType.templateUrl + ":" + this._tplRow + ":" + this._tplCol;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DebugContext.prototype, "references", {
get: function() {
var _this = this;
var varValues = {};
var staticNodeInfo = this._staticNodeInfo;
if (lang_1.isPresent(staticNodeInfo)) {
var refs = staticNodeInfo.refTokens;
collection_1.StringMapWrapper.forEach(refs, function(refToken, refName) {
var varValue;
if (lang_1.isBlank(refToken)) {
varValue = lang_1.isPresent(_this._view.allNodes) ? _this._view.allNodes[_this._nodeIndex] : null;
} else {
varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);
}
varValues[refName] = varValue;
});
}
return varValues;
},
enumerable: true,
configurable: true
});
return DebugContext;
}();
exports.DebugContext = DebugContext;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var injector_1 = __webpack_require__(130);
var _UNDEFINED = new Object();
var ElementInjector = function(_super) {
__extends(ElementInjector, _super);
function ElementInjector(_view, _nodeIndex) {
_super.call(this);
this._view = _view;
this._nodeIndex = _nodeIndex;
}
ElementInjector.prototype.get = function(token, notFoundValue) {
if (notFoundValue === void 0) {
notFoundValue = injector_1.THROW_IF_NOT_FOUND;
}
var result = _UNDEFINED;
if (result === _UNDEFINED) {
result = this._view.injectorGet(token, this._nodeIndex, _UNDEFINED);
}
if (result === _UNDEFINED) {
result = this._view.parentInjector.get(token, notFoundValue);
}
return result;
};
return ElementInjector;
}(injector_1.Injector);
exports.ElementInjector = ElementInjector;
}, function(module, exports) {
"use strict";
function wtfInit() {}
exports.wtfInit = wtfInit;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(117);
var debug_node_1 = __webpack_require__(200);
var DebugDomRootRenderer = function() {
function DebugDomRootRenderer(_delegate) {
this._delegate = _delegate;
}
DebugDomRootRenderer.prototype.renderComponent = function(componentProto) {
return new DebugDomRenderer(this._delegate.renderComponent(componentProto));
};
return DebugDomRootRenderer;
}();
exports.DebugDomRootRenderer = DebugDomRootRenderer;
var DebugDomRenderer = function() {
function DebugDomRenderer(_delegate) {
this._delegate = _delegate;
}
DebugDomRenderer.prototype.selectRootElement = function(selectorOrNode, debugInfo) {
var nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);
var debugEl = new debug_node_1.DebugElement(nativeEl, null, debugInfo);
debug_node_1.indexDebugNode(debugEl);
return nativeEl;
};
DebugDomRenderer.prototype.createElement = function(parentElement, name, debugInfo) {
var nativeEl = this._delegate.createElement(parentElement, name, debugInfo);
var debugEl = new debug_node_1.DebugElement(nativeEl, debug_node_1.getDebugNode(parentElement), debugInfo);
debugEl.name = name;
debug_node_1.indexDebugNode(debugEl);
return nativeEl;
};
DebugDomRenderer.prototype.createViewRoot = function(hostElement) {
return this._delegate.createViewRoot(hostElement);
};
DebugDomRenderer.prototype.createTemplateAnchor = function(parentElement, debugInfo) {
var comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);
var debugEl = new debug_node_1.DebugNode(comment, debug_node_1.getDebugNode(parentElement), debugInfo);
debug_node_1.indexDebugNode(debugEl);
return comment;
};
DebugDomRenderer.prototype.createText = function(parentElement, value, debugInfo) {
var text = this._delegate.createText(parentElement, value, debugInfo);
var debugEl = new debug_node_1.DebugNode(text, debug_node_1.getDebugNode(parentElement), debugInfo);
debug_node_1.indexDebugNode(debugEl);
return text;
};
DebugDomRenderer.prototype.projectNodes = function(parentElement, nodes) {
var debugParent = debug_node_1.getDebugNode(parentElement);
if (lang_1.isPresent(debugParent) && debugParent instanceof debug_node_1.DebugElement) {
var debugElement_1 = debugParent;
nodes.forEach(function(node) {
debugElement_1.addChild(debug_node_1.getDebugNode(node));
});
}
this._delegate.projectNodes(parentElement, nodes);
};
DebugDomRenderer.prototype.attachViewAfter = function(node, viewRootNodes) {
var debugNode = debug_node_1.getDebugNode(node);
if (lang_1.isPresent(debugNode)) {
var debugParent = debugNode.parent;
if (viewRootNodes.length > 0 && lang_1.isPresent(debugParent)) {
var debugViewRootNodes = [];
viewRootNodes.forEach(function(rootNode) {
return debugViewRootNodes.push(debug_node_1.getDebugNode(rootNode));
});
debugParent.insertChildrenAfter(debugNode, debugViewRootNodes);
}
}
this._delegate.attachViewAfter(node, viewRootNodes);
};
DebugDomRenderer.prototype.detachView = function(viewRootNodes) {
viewRootNodes.forEach(function(node) {
var debugNode = debug_node_1.getDebugNode(node);
if (lang_1.isPresent(debugNode) && lang_1.isPresent(debugNode.parent)) {
debugNode.parent.removeChild(debugNode);
}
});
this._delegate.detachView(viewRootNodes);
};
DebugDomRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
viewAllNodes.forEach(function(node) {
debug_node_1.removeDebugNodeFromIndex(debug_node_1.getDebugNode(node));
});
this._delegate.destroyView(hostElement, viewAllNodes);
};
DebugDomRenderer.prototype.listen = function(renderElement, name, callback) {
var debugEl = debug_node_1.getDebugNode(renderElement);
if (lang_1.isPresent(debugEl)) {
debugEl.listeners.push(new debug_node_1.EventListener(name, callback));
}
return this._delegate.listen(renderElement, name, callback);
};
DebugDomRenderer.prototype.listenGlobal = function(target, name, callback) {
return this._delegate.listenGlobal(target, name, callback);
};
DebugDomRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
var debugEl = debug_node_1.getDebugNode(renderElement);
if (lang_1.isPresent(debugEl) && debugEl instanceof debug_node_1.DebugElement) {
debugEl.properties[propertyName] = propertyValue;
}
this._delegate.setElementProperty(renderElement, propertyName, propertyValue);
};
DebugDomRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
var debugEl = debug_node_1.getDebugNode(renderElement);
if (lang_1.isPresent(debugEl) && debugEl instanceof debug_node_1.DebugElement) {
debugEl.attributes[attributeName] = attributeValue;
}
this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);
};
DebugDomRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);
};
DebugDomRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
this._delegate.setElementClass(renderElement, className, isAdd);
};
DebugDomRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
this._delegate.setElementStyle(renderElement, styleName, styleValue);
};
DebugDomRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
this._delegate.invokeElementMethod(renderElement, methodName, args);
};
DebugDomRenderer.prototype.setText = function(renderNode, text) {
this._delegate.setText(renderNode, text);
};
return DebugDomRenderer;
}();
exports.DebugDomRenderer = DebugDomRenderer;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var di_1 = __webpack_require__(128);
var api_1 = __webpack_require__(191);
var platform_providers_1 = __webpack_require__(213);
var lang_1 = __webpack_require__(117);
var dom_renderer_1 = __webpack_require__(214);
var view_1 = __webpack_require__(12);
var application = __webpack_require__(16);
var frame_1 = __webpack_require__(10);
var view_util_1 = __webpack_require__(231);
var utils_1 = __webpack_require__(22);
var view_util_2 = __webpack_require__(231);
exports.rendererTraceCategory = view_util_2.rendererTraceCategory;
var NativeScriptRootRenderer = function() {
function NativeScriptRootRenderer(rootView, device) {
this._rootView = null;
this._registeredComponents = new Map();
this._rootView = rootView;
this._viewUtil = new view_util_1.ViewUtil(device);
}
Object.defineProperty(NativeScriptRootRenderer.prototype, "rootView", {
get: function() {
if (!this._rootView) {
this._rootView = frame_1.topmost().currentPage;
}
return this._rootView;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NativeScriptRootRenderer.prototype, "page", {
get: function() {
return this.rootView.page;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NativeScriptRootRenderer.prototype, "viewUtil", {
get: function() {
return this._viewUtil;
},
enumerable: true,
configurable: true
});
NativeScriptRootRenderer.prototype.renderComponent = function(componentProto) {
var renderer = this._registeredComponents.get(componentProto.id);
if (lang_1.isBlank(renderer)) {
renderer = new NativeScriptRenderer(this, componentProto);
this._registeredComponents.set(componentProto.id, renderer);
}
return renderer;
};
NativeScriptRootRenderer = __decorate([ di_1.Injectable(), __param(0, di_1.Optional()), __param(0, di_1.Inject(platform_providers_1.APP_ROOT_VIEW)), __param(1, di_1.Inject(platform_providers_1.DEVICE)), __metadata("design:paramtypes", [ view_1.View, Object ]) ], NativeScriptRootRenderer);
return NativeScriptRootRenderer;
}();
exports.NativeScriptRootRenderer = NativeScriptRootRenderer;
var NativeScriptRenderer = function(_super) {
__extends(NativeScriptRenderer, _super);
function NativeScriptRenderer(_rootRenderer, componentProto) {
_super.call(this);
this._rootRenderer = _rootRenderer;
this.componentProto = componentProto;
this.attrReplacer = new RegExp(utils_1.escapeRegexSymbols(dom_renderer_1.CONTENT_ATTR), "g");
this.attrSanitizer = /-/g;
this.rootRenderer = _rootRenderer;
var page = this.rootRenderer.page;
var stylesLength = componentProto.styles.length;
this.componentProtoId = componentProto.id;
for (var i = 0; i < stylesLength; i++) {
this.hasComponentStyles = true;
var cssString = componentProto.styles[i] + "";
var realCSS = this.replaceNgAttribute(cssString, this.componentProtoId);
application.addCss(realCSS);
}
view_util_1.traceLog("NativeScriptRenderer created");
}
Object.defineProperty(NativeScriptRenderer.prototype, "viewUtil", {
get: function() {
return this.rootRenderer.viewUtil;
},
enumerable: true,
configurable: true
});
NativeScriptRenderer.prototype.replaceNgAttribute = function(input, componentId) {
return input.replace(this.attrReplacer, "_ng_content_" + componentId.replace(this.attrSanitizer, "_"));
};
NativeScriptRenderer.prototype.renderComponent = function(componentProto) {
return this._rootRenderer.renderComponent(componentProto);
};
NativeScriptRenderer.prototype.selectRootElement = function(selector) {
view_util_1.traceLog("selectRootElement: " + selector);
var rootView = this.rootRenderer.rootView;
rootView.nodeName = "ROOT";
return rootView;
};
NativeScriptRenderer.prototype.createViewRoot = function(hostElement) {
view_util_1.traceLog("CREATE VIEW ROOT: " + hostElement.nodeName);
return hostElement;
};
NativeScriptRenderer.prototype.projectNodes = function(parentElement, nodes) {
var _this = this;
view_util_1.traceLog("NativeScriptRenderer.projectNodes");
nodes.forEach(function(node) {
_this.viewUtil.insertChild(parentElement, node);
});
};
NativeScriptRenderer.prototype.attachViewAfter = function(anchorNode, viewRootNodes) {
var _this = this;
view_util_1.traceLog("NativeScriptRenderer.attachViewAfter: " + anchorNode.nodeName + " " + anchorNode);
var parent = anchorNode.templateParent || anchorNode.parent;
var insertPosition = this.viewUtil.getChildIndex(parent, anchorNode);
viewRootNodes.forEach(function(node, index) {
var childIndex = insertPosition + index + 1;
node.templateParent = parent;
_this.viewUtil.insertChild(parent, node, childIndex);
_this.animateNodeEnter(node);
});
};
NativeScriptRenderer.prototype.detachView = function(viewRootNodes) {
view_util_1.traceLog("NativeScriptRenderer.detachView");
for (var i = 0; i < viewRootNodes.length; i++) {
var node = viewRootNodes[i];
this.viewUtil.removeChild(node.parent, node);
this.animateNodeLeave(node);
}
};
NativeScriptRenderer.prototype.animateNodeEnter = function(node) {};
NativeScriptRenderer.prototype.animateNodeLeave = function(node) {};
NativeScriptRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
view_util_1.traceLog("NativeScriptRenderer.destroyView");
};
NativeScriptRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
view_util_1.traceLog("NativeScriptRenderer.setElementProperty " + renderElement + ": " + propertyName + " = " + propertyValue);
this.viewUtil.setProperty(renderElement, propertyName, propertyValue);
};
NativeScriptRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
view_util_1.traceLog("NativeScriptRenderer.setElementAttribute " + renderElement + ": " + attributeName + " = " + attributeValue);
return this.setElementProperty(renderElement, attributeName, attributeValue);
};
NativeScriptRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
view_util_1.traceLog("NativeScriptRenderer.setElementClass " + className + " - " + isAdd);
if (isAdd) {
this.viewUtil.addClass(renderElement, className);
} else {
this.viewUtil.removeClass(renderElement, className);
}
};
NativeScriptRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
this.viewUtil.setStyleProperty(renderElement, styleName, styleValue);
};
NativeScriptRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
view_util_1.traceLog("NativeScriptRenderer.setBindingDebugInfo: " + renderElement + ", " + propertyName + " = " + propertyValue);
};
NativeScriptRenderer.prototype.setElementDebugInfo = function(renderElement, info) {
view_util_1.traceLog("NativeScriptRenderer.setElementDebugInfo: " + renderElement);
};
NativeScriptRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
view_util_1.traceLog("NativeScriptRenderer.invokeElementMethod " + methodName + " " + args);
};
NativeScriptRenderer.prototype.setText = function(renderNode, text) {
view_util_1.traceLog("NativeScriptRenderer.setText");
};
NativeScriptRenderer.prototype.createTemplateAnchor = function(parentElement) {
view_util_1.traceLog("NativeScriptRenderer.createTemplateAnchor");
return this.viewUtil.createTemplateAnchor(parentElement);
};
NativeScriptRenderer.prototype.createElement = function(parentElement, name) {
var _this = this;
view_util_1.traceLog("NativeScriptRenderer.createElement: " + name + " parent: " + parentElement + ", " + (parentElement ? parentElement.nodeName : "null"));
return this.viewUtil.createView(name, parentElement, function(view) {
if (_this.hasComponentStyles) {
var cssAttribute = _this.replaceNgAttribute(dom_renderer_1.CONTENT_ATTR, _this.componentProtoId);
view[cssAttribute] = true;
}
});
};
NativeScriptRenderer.prototype.createText = function(parentElement, value) {
view_util_1.traceLog("NativeScriptRenderer.createText");
return this.viewUtil.createText(value);
};
NativeScriptRenderer.prototype.listen = function(renderElement, eventName, callback) {
view_util_1.traceLog("NativeScriptRenderer.listen: " + eventName);
var zonedCallback = global.Zone.current.wrap(callback);
renderElement.on(eventName, zonedCallback);
return function() {
return renderElement.off(eventName, zonedCallback);
};
};
NativeScriptRenderer.prototype.listenGlobal = function(target, eventName, callback) {
throw new Error("Not implemented.");
};
NativeScriptRenderer = __decorate([ di_1.Injectable(), __metadata("design:paramtypes", [ NativeScriptRootRenderer, api_1.RenderComponentType ]) ], NativeScriptRenderer);
return NativeScriptRenderer;
}(api_1.Renderer);
exports.NativeScriptRenderer = NativeScriptRenderer;
}, function(module, exports, __webpack_require__) {
"use strict";
var frame_1 = __webpack_require__(10);
var page_1 = __webpack_require__(72);
var di_1 = __webpack_require__(128);
var platform_1 = __webpack_require__(45);
exports.APP_ROOT_VIEW = new di_1.OpaqueToken("App Root View");
exports.DEVICE = new di_1.OpaqueToken("platfrom device");
exports.defaultPageProvider = di_1.provide(page_1.Page, {
useFactory: getDefaultPage
});
function getDefaultPage() {
var frame = frame_1.topmost();
if (frame) {
return frame.currentPage;
} else {
return null;
}
}
exports.getDefaultPage = getDefaultPage;
exports.defaultDeviceProvider = di_1.provide(exports.DEVICE, {
useValue: platform_1.device
});
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var animation_builder_1 = __webpack_require__(215);
var lang_1 = __webpack_require__(219);
var exceptions_1 = __webpack_require__(225);
var shared_styles_host_1 = __webpack_require__(228);
var event_manager_1 = __webpack_require__(230);
var dom_tokens_1 = __webpack_require__(229);
var dom_adapter_1 = __webpack_require__(223);
var util_1 = __webpack_require__(222);
var NAMESPACE_URIS = {
xlink: "http://www.w3.org/1999/xlink",
svg: "http://www.w3.org/2000/svg"
};
var TEMPLATE_COMMENT_TEXT = "template bindings={}";
var TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/g;
var DomRootRenderer = function() {
function DomRootRenderer(document, eventManager, sharedStylesHost, animate) {
this.document = document;
this.eventManager = eventManager;
this.sharedStylesHost = sharedStylesHost;
this.animate = animate;
this._registeredComponents = new Map();
}
DomRootRenderer.prototype.renderComponent = function(componentProto) {
var renderer = this._registeredComponents.get(componentProto.id);
if (lang_1.isBlank(renderer)) {
renderer = new DomRenderer(this, componentProto);
this._registeredComponents.set(componentProto.id, renderer);
}
return renderer;
};
return DomRootRenderer;
}();
exports.DomRootRenderer = DomRootRenderer;
var DomRootRenderer_ = function(_super) {
__extends(DomRootRenderer_, _super);
function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animate) {
_super.call(this, _document, _eventManager, sharedStylesHost, animate);
}
DomRootRenderer_.decorators = [ {
type: core_1.Injectable
} ];
DomRootRenderer_.ctorParameters = [ {
type: undefined,
decorators: [ {
type: core_1.Inject,
args: [ dom_tokens_1.DOCUMENT ]
} ]
}, {
type: event_manager_1.EventManager
}, {
type: shared_styles_host_1.DomSharedStylesHost
}, {
type: animation_builder_1.AnimationBuilder
} ];
return DomRootRenderer_;
}(DomRootRenderer);
exports.DomRootRenderer_ = DomRootRenderer_;
var DomRenderer = function() {
function DomRenderer(_rootRenderer, componentProto) {
this._rootRenderer = _rootRenderer;
this.componentProto = componentProto;
this._styles = _flattenStyles(componentProto.id, componentProto.styles, []);
if (componentProto.encapsulation !== core_1.ViewEncapsulation.Native) {
this._rootRenderer.sharedStylesHost.addStyles(this._styles);
}
if (this.componentProto.encapsulation === core_1.ViewEncapsulation.Emulated) {
this._contentAttr = _shimContentAttribute(componentProto.id);
this._hostAttr = _shimHostAttribute(componentProto.id);
} else {
this._contentAttr = null;
this._hostAttr = null;
}
}
DomRenderer.prototype.selectRootElement = function(selectorOrNode, debugInfo) {
var el;
if (lang_1.isString(selectorOrNode)) {
el = dom_adapter_1.getDOM().querySelector(this._rootRenderer.document, selectorOrNode);
if (lang_1.isBlank(el)) {
throw new exceptions_1.BaseException('The selector "' + selectorOrNode + '" did not match any elements');
}
} else {
el = selectorOrNode;
}
dom_adapter_1.getDOM().clearNodes(el);
return el;
};
DomRenderer.prototype.createElement = function(parent, name, debugInfo) {
var nsAndName = splitNamespace(name);
var el = lang_1.isPresent(nsAndName[0]) ? dom_adapter_1.getDOM().createElementNS(NAMESPACE_URIS[nsAndName[0]], nsAndName[1]) : dom_adapter_1.getDOM().createElement(nsAndName[1]);
if (lang_1.isPresent(this._contentAttr)) {
dom_adapter_1.getDOM().setAttribute(el, this._contentAttr, "");
}
if (lang_1.isPresent(parent)) {
dom_adapter_1.getDOM().appendChild(parent, el);
}
return el;
};
DomRenderer.prototype.createViewRoot = function(hostElement) {
var nodesParent;
if (this.componentProto.encapsulation === core_1.ViewEncapsulation.Native) {
nodesParent = dom_adapter_1.getDOM().createShadowRoot(hostElement);
this._rootRenderer.sharedStylesHost.addHost(nodesParent);
for (var i = 0; i < this._styles.length; i++) {
dom_adapter_1.getDOM().appendChild(nodesParent, dom_adapter_1.getDOM().createStyleElement(this._styles[i]));
}
} else {
if (lang_1.isPresent(this._hostAttr)) {
dom_adapter_1.getDOM().setAttribute(hostElement, this._hostAttr, "");
}
nodesParent = hostElement;
}
return nodesParent;
};
DomRenderer.prototype.createTemplateAnchor = function(parentElement, debugInfo) {
var comment = dom_adapter_1.getDOM().createComment(TEMPLATE_COMMENT_TEXT);
if (lang_1.isPresent(parentElement)) {
dom_adapter_1.getDOM().appendChild(parentElement, comment);
}
return comment;
};
DomRenderer.prototype.createText = function(parentElement, value, debugInfo) {
var node = dom_adapter_1.getDOM().createTextNode(value);
if (lang_1.isPresent(parentElement)) {
dom_adapter_1.getDOM().appendChild(parentElement, node);
}
return node;
};
DomRenderer.prototype.projectNodes = function(parentElement, nodes) {
if (lang_1.isBlank(parentElement)) return;
appendNodes(parentElement, nodes);
};
DomRenderer.prototype.attachViewAfter = function(node, viewRootNodes) {
moveNodesAfterSibling(node, viewRootNodes);
for (var i = 0; i < viewRootNodes.length; i++) this.animateNodeEnter(viewRootNodes[i]);
};
DomRenderer.prototype.detachView = function(viewRootNodes) {
for (var i = 0; i < viewRootNodes.length; i++) {
var node = viewRootNodes[i];
dom_adapter_1.getDOM().remove(node);
this.animateNodeLeave(node);
}
};
DomRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
if (this.componentProto.encapsulation === core_1.ViewEncapsulation.Native && lang_1.isPresent(hostElement)) {
this._rootRenderer.sharedStylesHost.removeHost(dom_adapter_1.getDOM().getShadowRoot(hostElement));
}
};
DomRenderer.prototype.listen = function(renderElement, name, callback) {
return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
};
DomRenderer.prototype.listenGlobal = function(target, name, callback) {
return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
};
DomRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
dom_adapter_1.getDOM().setProperty(renderElement, propertyName, propertyValue);
};
DomRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
var attrNs;
var nsAndName = splitNamespace(attributeName);
if (lang_1.isPresent(nsAndName[0])) {
attributeName = nsAndName[0] + ":" + nsAndName[1];
attrNs = NAMESPACE_URIS[nsAndName[0]];
}
if (lang_1.isPresent(attributeValue)) {
if (lang_1.isPresent(attrNs)) {
dom_adapter_1.getDOM().setAttributeNS(renderElement, attrNs, attributeName, attributeValue);
} else {
dom_adapter_1.getDOM().setAttribute(renderElement, attributeName, attributeValue);
}
} else {
if (lang_1.isPresent(attrNs)) {
dom_adapter_1.getDOM().removeAttributeNS(renderElement, attrNs, nsAndName[1]);
} else {
dom_adapter_1.getDOM().removeAttribute(renderElement, attributeName);
}
}
};
DomRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
var dashCasedPropertyName = util_1.camelCaseToDashCase(propertyName);
if (dom_adapter_1.getDOM().isCommentNode(renderElement)) {
var existingBindings = lang_1.RegExpWrapper.firstMatch(TEMPLATE_BINDINGS_EXP, lang_1.StringWrapper.replaceAll(dom_adapter_1.getDOM().getText(renderElement), /\n/g, ""));
var parsedBindings = lang_1.Json.parse(existingBindings[1]);
parsedBindings[dashCasedPropertyName] = propertyValue;
dom_adapter_1.getDOM().setText(renderElement, lang_1.StringWrapper.replace(TEMPLATE_COMMENT_TEXT, "{}", lang_1.Json.stringify(parsedBindings)));
} else {
this.setElementAttribute(renderElement, propertyName, propertyValue);
}
};
DomRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
if (isAdd) {
dom_adapter_1.getDOM().addClass(renderElement, className);
} else {
dom_adapter_1.getDOM().removeClass(renderElement, className);
}
};
DomRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
if (lang_1.isPresent(styleValue)) {
dom_adapter_1.getDOM().setStyle(renderElement, styleName, lang_1.stringify(styleValue));
} else {
dom_adapter_1.getDOM().removeStyle(renderElement, styleName);
}
};
DomRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
dom_adapter_1.getDOM().invoke(renderElement, methodName, args);
};
DomRenderer.prototype.setText = function(renderNode, text) {
dom_adapter_1.getDOM().setText(renderNode, text);
};
DomRenderer.prototype.animateNodeEnter = function(node) {
if (dom_adapter_1.getDOM().isElementNode(node) && dom_adapter_1.getDOM().hasClass(node, "ng-animate")) {
dom_adapter_1.getDOM().addClass(node, "ng-enter");
this._rootRenderer.animate.css().addAnimationClass("ng-enter-active").start(node).onComplete(function() {
dom_adapter_1.getDOM().removeClass(node, "ng-enter");
});
}
};
DomRenderer.prototype.animateNodeLeave = function(node) {
if (dom_adapter_1.getDOM().isElementNode(node) && dom_adapter_1.getDOM().hasClass(node, "ng-animate")) {
dom_adapter_1.getDOM().addClass(node, "ng-leave");
this._rootRenderer.animate.css().addAnimationClass("ng-leave-active").start(node).onComplete(function() {
dom_adapter_1.getDOM().removeClass(node, "ng-leave");
dom_adapter_1.getDOM().remove(node);
});
} else {
dom_adapter_1.getDOM().remove(node);
}
};
return DomRenderer;
}();
exports.DomRenderer = DomRenderer;
function moveNodesAfterSibling(sibling, nodes) {
var parent = dom_adapter_1.getDOM().parentElement(sibling);
if (nodes.length > 0 && lang_1.isPresent(parent)) {
var nextSibling = dom_adapter_1.getDOM().nextSibling(sibling);
if (lang_1.isPresent(nextSibling)) {
for (var i = 0; i < nodes.length; i++) {
dom_adapter_1.getDOM().insertBefore(nextSibling, nodes[i]);
}
} else {
for (var i = 0; i < nodes.length; i++) {
dom_adapter_1.getDOM().appendChild(parent, nodes[i]);
}
}
}
}
function appendNodes(parent, nodes) {
for (var i = 0; i < nodes.length; i++) {
dom_adapter_1.getDOM().appendChild(parent, nodes[i]);
}
}
function decoratePreventDefault(eventHandler) {
return function(event) {
var allowDefaultBehavior = eventHandler(event);
if (allowDefaultBehavior === false) {
dom_adapter_1.getDOM().preventDefault(event);
}
};
}
var COMPONENT_REGEX = /%COMP%/g;
exports.COMPONENT_VARIABLE = "%COMP%";
exports.HOST_ATTR = "_nghost-" + exports.COMPONENT_VARIABLE;
exports.CONTENT_ATTR = "_ngcontent-" + exports.COMPONENT_VARIABLE;
function _shimContentAttribute(componentShortId) {
return lang_1.StringWrapper.replaceAll(exports.CONTENT_ATTR, COMPONENT_REGEX, componentShortId);
}
function _shimHostAttribute(componentShortId) {
return lang_1.StringWrapper.replaceAll(exports.HOST_ATTR, COMPONENT_REGEX, componentShortId);
}
function _flattenStyles(compId, styles, target) {
for (var i = 0; i < styles.length; i++) {
var style = styles[i];
if (lang_1.isArray(style)) {
_flattenStyles(compId, style, target);
} else {
style = lang_1.StringWrapper.replaceAll(style, COMPONENT_REGEX, compId);
target.push(style);
}
}
return target;
}
var NS_PREFIX_RE = /^@([^:]+):(.+)/g;
function splitNamespace(name) {
if (name[0] != "@") {
return [ null, name ];
}
var match = lang_1.RegExpWrapper.firstMatch(NS_PREFIX_RE, name);
return [ match[1], match[2] ];
}
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var css_animation_builder_1 = __webpack_require__(216);
var browser_details_1 = __webpack_require__(224);
var AnimationBuilder = function() {
function AnimationBuilder(browserDetails) {
this.browserDetails = browserDetails;
}
AnimationBuilder.prototype.css = function() {
return new css_animation_builder_1.CssAnimationBuilder(this.browserDetails);
};
AnimationBuilder.decorators = [ {
type: core_1.Injectable
} ];
AnimationBuilder.ctorParameters = [ {
type: browser_details_1.BrowserDetails
} ];
return AnimationBuilder;
}();
exports.AnimationBuilder = AnimationBuilder;
}, function(module, exports, __webpack_require__) {
"use strict";
var css_animation_options_1 = __webpack_require__(217);
var animation_1 = __webpack_require__(218);
var CssAnimationBuilder = function() {
function CssAnimationBuilder(browserDetails) {
this.browserDetails = browserDetails;
this.data = new css_animation_options_1.CssAnimationOptions();
}
CssAnimationBuilder.prototype.addAnimationClass = function(className) {
this.data.animationClasses.push(className);
return this;
};
CssAnimationBuilder.prototype.addClass = function(className) {
this.data.classesToAdd.push(className);
return this;
};
CssAnimationBuilder.prototype.removeClass = function(className) {
this.data.classesToRemove.push(className);
return this;
};
CssAnimationBuilder.prototype.setDuration = function(duration) {
this.data.duration = duration;
return this;
};
CssAnimationBuilder.prototype.setDelay = function(delay) {
this.data.delay = delay;
return this;
};
CssAnimationBuilder.prototype.setStyles = function(from, to) {
return this.setFromStyles(from).setToStyles(to);
};
CssAnimationBuilder.prototype.setFromStyles = function(from) {
this.data.fromStyles = from;
return this;
};
CssAnimationBuilder.prototype.setToStyles = function(to) {
this.data.toStyles = to;
return this;
};
CssAnimationBuilder.prototype.start = function(element) {
return new animation_1.Animation(element, this.data, this.browserDetails);
};
return CssAnimationBuilder;
}();
exports.CssAnimationBuilder = CssAnimationBuilder;
}, function(module, exports) {
"use strict";
var CssAnimationOptions = function() {
function CssAnimationOptions() {
this.classesToAdd = [];
this.classesToRemove = [];
this.animationClasses = [];
}
return CssAnimationOptions;
}();
exports.CssAnimationOptions = CssAnimationOptions;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(219);
var math_1 = __webpack_require__(220);
var collection_1 = __webpack_require__(221);
var util_1 = __webpack_require__(222);
var dom_adapter_1 = __webpack_require__(223);
var Animation = function() {
function Animation(element, data, browserDetails) {
var _this = this;
this.element = element;
this.data = data;
this.browserDetails = browserDetails;
this.callbacks = [];
this.eventClearFunctions = [];
this.completed = false;
this._stringPrefix = "";
this.startTime = lang_1.DateWrapper.toMillis(lang_1.DateWrapper.now());
this._stringPrefix = dom_adapter_1.getDOM().getAnimationPrefix();
this.setup();
this.wait(function(timestamp) {
return _this.start();
});
}
Object.defineProperty(Animation.prototype, "totalTime", {
get: function() {
var delay = this.computedDelay != null ? this.computedDelay : 0;
var duration = this.computedDuration != null ? this.computedDuration : 0;
return delay + duration;
},
enumerable: true,
configurable: true
});
Animation.prototype.wait = function(callback) {
this.browserDetails.raf(callback, 2);
};
Animation.prototype.setup = function() {
if (this.data.fromStyles != null) this.applyStyles(this.data.fromStyles);
if (this.data.duration != null) this.applyStyles({
transitionDuration: this.data.duration.toString() + "ms"
});
if (this.data.delay != null) this.applyStyles({
transitionDelay: this.data.delay.toString() + "ms"
});
};
Animation.prototype.start = function() {
this.addClasses(this.data.classesToAdd);
this.addClasses(this.data.animationClasses);
this.removeClasses(this.data.classesToRemove);
if (this.data.toStyles != null) this.applyStyles(this.data.toStyles);
var computedStyles = dom_adapter_1.getDOM().getComputedStyle(this.element);
this.computedDelay = math_1.Math.max(this.parseDurationString(computedStyles.getPropertyValue(this._stringPrefix + "transition-delay")), this.parseDurationString(this.element.style.getPropertyValue(this._stringPrefix + "transition-delay")));
this.computedDuration = math_1.Math.max(this.parseDurationString(computedStyles.getPropertyValue(this._stringPrefix + "transition-duration")), this.parseDurationString(this.element.style.getPropertyValue(this._stringPrefix + "transition-duration")));
this.addEvents();
};
Animation.prototype.applyStyles = function(styles) {
var _this = this;
collection_1.StringMapWrapper.forEach(styles, function(value, key) {
var dashCaseKey = util_1.camelCaseToDashCase(key);
if (lang_1.isPresent(dom_adapter_1.getDOM().getStyle(_this.element, dashCaseKey))) {
dom_adapter_1.getDOM().setStyle(_this.element, dashCaseKey, value.toString());
} else {
dom_adapter_1.getDOM().setStyle(_this.element, _this._stringPrefix + dashCaseKey, value.toString());
}
});
};
Animation.prototype.addClasses = function(classes) {
for (var i = 0, len = classes.length; i < len; i++) dom_adapter_1.getDOM().addClass(this.element, classes[i]);
};
Animation.prototype.removeClasses = function(classes) {
for (var i = 0, len = classes.length; i < len; i++) dom_adapter_1.getDOM().removeClass(this.element, classes[i]);
};
Animation.prototype.addEvents = function() {
var _this = this;
if (this.totalTime > 0) {
this.eventClearFunctions.push(dom_adapter_1.getDOM().onAndCancel(this.element, dom_adapter_1.getDOM().getTransitionEnd(), function(event) {
return _this.handleAnimationEvent(event);
}));
} else {
this.handleAnimationCompleted();
}
};
Animation.prototype.handleAnimationEvent = function(event) {
var elapsedTime = math_1.Math.round(event.elapsedTime * 1e3);
if (!this.browserDetails.elapsedTimeIncludesDelay) elapsedTime += this.computedDelay;
event.stopPropagation();
if (elapsedTime >= this.totalTime) this.handleAnimationCompleted();
};
Animation.prototype.handleAnimationCompleted = function() {
this.removeClasses(this.data.animationClasses);
this.callbacks.forEach(function(callback) {
return callback();
});
this.callbacks = [];
this.eventClearFunctions.forEach(function(fn) {
return fn();
});
this.eventClearFunctions = [];
this.completed = true;
};
Animation.prototype.onComplete = function(callback) {
if (this.completed) {
callback();
} else {
this.callbacks.push(callback);
}
return this;
};
Animation.prototype.parseDurationString = function(duration) {
var maxValue = 0;
if (duration == null || duration.length < 2) {
return maxValue;
} else if (duration.substring(duration.length - 2) == "ms") {
var value = lang_1.NumberWrapper.parseInt(this.stripLetters(duration), 10);
if (value > maxValue) maxValue = value;
} else if (duration.substring(duration.length - 1) == "s") {
var ms = lang_1.NumberWrapper.parseFloat(this.stripLetters(duration)) * 1e3;
var value = math_1.Math.floor(ms);
if (value > maxValue) maxValue = value;
}
return maxValue;
};
Animation.prototype.stripLetters = function(str) {
return lang_1.StringWrapper.replaceAll(str, lang_1.RegExpWrapper.create("[^0-9]+$", ""), "");
};
return Animation;
}();
exports.Animation = Animation;
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var globalScope;
if (typeof window === "undefined") {
if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) {
globalScope = self;
} else {
globalScope = global;
}
} else {
globalScope = window;
}
function scheduleMicroTask(fn) {
Zone.current.scheduleMicroTask("scheduleMicrotask", fn);
}
exports.scheduleMicroTask = scheduleMicroTask;
exports.IS_DART = false;
var _global = globalScope;
exports.global = _global;
exports.Type = Function;
function getTypeNameForDebugging(type) {
if (type["name"]) {
return type["name"];
}
return typeof type;
}
exports.getTypeNameForDebugging = getTypeNameForDebugging;
exports.Math = _global.Math;
exports.Date = _global.Date;
var _devMode = true;
var _modeLocked = false;
function lockMode() {
_modeLocked = true;
}
exports.lockMode = lockMode;
function enableProdMode() {
if (_modeLocked) {
throw "Cannot enable prod mode after platform setup.";
}
_devMode = false;
}
exports.enableProdMode = enableProdMode;
function assertionsEnabled() {
return _devMode;
}
exports.assertionsEnabled = assertionsEnabled;
_global.assert = function assert(condition) {};
function isPresent(obj) {
return obj !== undefined && obj !== null;
}
exports.isPresent = isPresent;
function isBlank(obj) {
return obj === undefined || obj === null;
}
exports.isBlank = isBlank;
function isBoolean(obj) {
return typeof obj === "boolean";
}
exports.isBoolean = isBoolean;
function isNumber(obj) {
return typeof obj === "number";
}
exports.isNumber = isNumber;
function isString(obj) {
return typeof obj === "string";
}
exports.isString = isString;
function isFunction(obj) {
return typeof obj === "function";
}
exports.isFunction = isFunction;
function isType(obj) {
return isFunction(obj);
}
exports.isType = isType;
function isStringMap(obj) {
return typeof obj === "object" && obj !== null;
}
exports.isStringMap = isStringMap;
var STRING_MAP_PROTO = Object.getPrototypeOf({});
function isStrictStringMap(obj) {
return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
}
exports.isStrictStringMap = isStrictStringMap;
function isPromise(obj) {
return obj instanceof _global.Promise;
}
exports.isPromise = isPromise;
function isArray(obj) {
return Array.isArray(obj);
}
exports.isArray = isArray;
function isDate(obj) {
return obj instanceof exports.Date && !isNaN(obj.valueOf());
}
exports.isDate = isDate;
function noop() {}
exports.noop = noop;
function stringify(token) {
if (typeof token === "string") {
return token;
}
if (token === undefined || token === null) {
return "" + token;
}
if (token.name) {
return token.name;
}
if (token.overriddenName) {
return token.overriddenName;
}
var res = token.toString();
var newLineIndex = res.indexOf("\n");
return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
exports.stringify = stringify;
function serializeEnum(val) {
return val;
}
exports.serializeEnum = serializeEnum;
function deserializeEnum(val, values) {
return val;
}
exports.deserializeEnum = deserializeEnum;
function resolveEnumToken(enumValue, val) {
return enumValue[val];
}
exports.resolveEnumToken = resolveEnumToken;
var StringWrapper = function() {
function StringWrapper() {}
StringWrapper.fromCharCode = function(code) {
return String.fromCharCode(code);
};
StringWrapper.charCodeAt = function(s, index) {
return s.charCodeAt(index);
};
StringWrapper.split = function(s, regExp) {
return s.split(regExp);
};
StringWrapper.equals = function(s, s2) {
return s === s2;
};
StringWrapper.stripLeft = function(s, charVal) {
if (s && s.length) {
var pos = 0;
for (var i = 0; i < s.length; i++) {
if (s[i] != charVal) break;
pos++;
}
s = s.substring(pos);
}
return s;
};
StringWrapper.stripRight = function(s, charVal) {
if (s && s.length) {
var pos = s.length;
for (var i = s.length - 1; i >= 0; i--) {
if (s[i] != charVal) break;
pos--;
}
s = s.substring(0, pos);
}
return s;
};
StringWrapper.replace = function(s, from, replace) {
return s.replace(from, replace);
};
StringWrapper.replaceAll = function(s, from, replace) {
return s.replace(from, replace);
};
StringWrapper.slice = function(s, from, to) {
if (from === void 0) {
from = 0;
}
if (to === void 0) {
to = null;
}
return s.slice(from, to === null ? undefined : to);
};
StringWrapper.replaceAllMapped = function(s, from, cb) {
return s.replace(from, function() {
var matches = [];
for (var _i = 0; _i < arguments.length; _i++) {
matches[_i - 0] = arguments[_i];
}
matches.splice(-2, 2);
return cb(matches);
});
};
StringWrapper.contains = function(s, substr) {
return s.indexOf(substr) != -1;
};
StringWrapper.compare = function(a, b) {
if (a < b) {
return -1;
} else if (a > b) {
return 1;
} else {
return 0;
}
};
return StringWrapper;
}();
exports.StringWrapper = StringWrapper;
var StringJoiner = function() {
function StringJoiner(parts) {
if (parts === void 0) {
parts = [];
}
this.parts = parts;
}
StringJoiner.prototype.add = function(part) {
this.parts.push(part);
};
StringJoiner.prototype.toString = function() {
return this.parts.join("");
};
return StringJoiner;
}();
exports.StringJoiner = StringJoiner;
var NumberParseError = function(_super) {
__extends(NumberParseError, _super);
function NumberParseError(message) {
_super.call(this);
this.message = message;
}
NumberParseError.prototype.toString = function() {
return this.message;
};
return NumberParseError;
}(Error);
exports.NumberParseError = NumberParseError;
var NumberWrapper = function() {
function NumberWrapper() {}
NumberWrapper.toFixed = function(n, fractionDigits) {
return n.toFixed(fractionDigits);
};
NumberWrapper.equal = function(a, b) {
return a === b;
};
NumberWrapper.parseIntAutoRadix = function(text) {
var result = parseInt(text);
if (isNaN(result)) {
throw new NumberParseError("Invalid integer literal when parsing " + text);
}
return result;
};
NumberWrapper.parseInt = function(text, radix) {
if (radix == 10) {
if (/^(\-|\+)?[0-9]+$/.test(text)) {
return parseInt(text, radix);
}
} else if (radix == 16) {
if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
return parseInt(text, radix);
}
} else {
var result = parseInt(text, radix);
if (!isNaN(result)) {
return result;
}
}
throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " + radix);
};
NumberWrapper.parseFloat = function(text) {
return parseFloat(text);
};
Object.defineProperty(NumberWrapper, "NaN", {
get: function() {
return NaN;
},
enumerable: true,
configurable: true
});
NumberWrapper.isNaN = function(value) {
return isNaN(value);
};
NumberWrapper.isInteger = function(value) {
return Number.isInteger(value);
};
return NumberWrapper;
}();
exports.NumberWrapper = NumberWrapper;
exports.RegExp = _global.RegExp;
var RegExpWrapper = function() {
function RegExpWrapper() {}
RegExpWrapper.create = function(regExpStr, flags) {
if (flags === void 0) {
flags = "";
}
flags = flags.replace(/g/g, "");
return new _global.RegExp(regExpStr, flags + "g");
};
RegExpWrapper.firstMatch = function(regExp, input) {
regExp.lastIndex = 0;
return regExp.exec(input);
};
RegExpWrapper.test = function(regExp, input) {
regExp.lastIndex = 0;
return regExp.test(input);
};
RegExpWrapper.matcher = function(regExp, input) {
regExp.lastIndex = 0;
return {
re: regExp,
input: input
};
};
RegExpWrapper.replaceAll = function(regExp, input, replace) {
var c = regExp.exec(input);
var res = "";
regExp.lastIndex = 0;
var prev = 0;
while (c) {
res += input.substring(prev, c.index);
res += replace(c);
prev = c.index + c[0].length;
regExp.lastIndex = prev;
c = regExp.exec(input);
}
res += input.substring(prev);
return res;
};
return RegExpWrapper;
}();
exports.RegExpWrapper = RegExpWrapper;
var RegExpMatcherWrapper = function() {
function RegExpMatcherWrapper() {}
RegExpMatcherWrapper.next = function(matcher) {
return matcher.re.exec(matcher.input);
};
return RegExpMatcherWrapper;
}();
exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
var FunctionWrapper = function() {
function FunctionWrapper() {}
FunctionWrapper.apply = function(fn, posArgs) {
return fn.apply(null, posArgs);
};
return FunctionWrapper;
}();
exports.FunctionWrapper = FunctionWrapper;
function looseIdentical(a, b) {
return a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
}
exports.looseIdentical = looseIdentical;
function getMapKey(value) {
return value;
}
exports.getMapKey = getMapKey;
function normalizeBlank(obj) {
return isBlank(obj) ? null : obj;
}
exports.normalizeBlank = normalizeBlank;
function normalizeBool(obj) {
return isBlank(obj) ? false : obj;
}
exports.normalizeBool = normalizeBool;
function isJsObject(o) {
return o !== null && (typeof o === "function" || typeof o === "object");
}
exports.isJsObject = isJsObject;
function print(obj) {
console.log(obj);
}
exports.print = print;
function warn(obj) {
console.warn(obj);
}
exports.warn = warn;
var Json = function() {
function Json() {}
Json.parse = function(s) {
return _global.JSON.parse(s);
};
Json.stringify = function(data) {
return _global.JSON.stringify(data, null, 2);
};
return Json;
}();
exports.Json = Json;
var DateWrapper = function() {
function DateWrapper() {}
DateWrapper.create = function(year, month, day, hour, minutes, seconds, milliseconds) {
if (month === void 0) {
month = 1;
}
if (day === void 0) {
day = 1;
}
if (hour === void 0) {
hour = 0;
}
if (minutes === void 0) {
minutes = 0;
}
if (seconds === void 0) {
seconds = 0;
}
if (milliseconds === void 0) {
milliseconds = 0;
}
return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
};
DateWrapper.fromISOString = function(str) {
return new exports.Date(str);
};
DateWrapper.fromMillis = function(ms) {
return new exports.Date(ms);
};
DateWrapper.toMillis = function(date) {
return date.getTime();
};
DateWrapper.now = function() {
return new exports.Date();
};
DateWrapper.toJson = function(date) {
return date.toJSON();
};
return DateWrapper;
}();
exports.DateWrapper = DateWrapper;
function setValueOnPath(global, path, value) {
var parts = path.split(".");
var obj = global;
while (parts.length > 1) {
var name = parts.shift();
if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
obj = obj[name];
} else {
obj = obj[name] = {};
}
}
if (obj === undefined || obj === null) {
obj = {};
}
obj[parts.shift()] = value;
}
exports.setValueOnPath = setValueOnPath;
var _symbolIterator = null;
function getSymbolIterator() {
if (isBlank(_symbolIterator)) {
if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
_symbolIterator = Symbol.iterator;
} else {
var keys = Object.getOwnPropertyNames(Map.prototype);
for (var i = 0; i < keys.length; ++i) {
var key = keys[i];
if (key !== "entries" && key !== "size" && Map.prototype[key] === Map.prototype["entries"]) {
_symbolIterator = key;
}
}
}
}
return _symbolIterator;
}
exports.getSymbolIterator = getSymbolIterator;
function evalExpression(sourceUrl, expr, declarations, vars) {
var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
var fnArgNames = [];
var fnArgValues = [];
for (var argName in vars) {
fnArgNames.push(argName);
fnArgValues.push(vars[argName]);
}
return new (Function.bind.apply(Function, [ void 0 ].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
}
exports.evalExpression = evalExpression;
function isPrimitive(obj) {
return !isJsObject(obj);
}
exports.isPrimitive = isPrimitive;
function hasConstructor(value, type) {
return value.constructor === type;
}
exports.hasConstructor = hasConstructor;
function bitWiseOr(values) {
return values.reduce(function(a, b) {
return a | b;
});
}
exports.bitWiseOr = bitWiseOr;
function bitWiseAnd(values) {
return values.reduce(function(a, b) {
return a & b;
});
}
exports.bitWiseAnd = bitWiseAnd;
function escape(s) {
return _global.encodeURI(s);
}
exports.escape = escape;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(219);
exports.Math = lang_1.global.Math;
exports.NaN = typeof exports.NaN;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(219);
exports.Map = lang_1.global.Map;
exports.Set = lang_1.global.Set;
var createMapFromPairs = function() {
try {
if (new exports.Map([ [ 1, 2 ] ]).size === 1) {
return function createMapFromPairs(pairs) {
return new exports.Map(pairs);
};
}
} catch (e) {}
return function createMapAndPopulateFromPairs(pairs) {
var map = new exports.Map();
for (var i = 0; i < pairs.length; i++) {
var pair = pairs[i];
map.set(pair[0], pair[1]);
}
return map;
};
}();
var createMapFromMap = function() {
try {
if (new exports.Map(new exports.Map())) {
return function createMapFromMap(m) {
return new exports.Map(m);
};
}
} catch (e) {}
return function createMapAndPopulateFromMap(m) {
var map = new exports.Map();
m.forEach(function(v, k) {
map.set(k, v);
});
return map;
};
}();
var _clearValues = function() {
if (new exports.Map().keys().next) {
return function _clearValues(m) {
var keyIterator = m.keys();
var k;
while (!(k = keyIterator.next()).done) {
m.set(k.value, null);
}
};
} else {
return function _clearValuesWithForeEach(m) {
m.forEach(function(v, k) {
m.set(k, null);
});
};
}
}();
var _arrayFromMap = function() {
try {
if (new exports.Map().values().next) {
return function createArrayFromMap(m, getValues) {
return getValues ? Array.from(m.values()) : Array.from(m.keys());
};
}
} catch (e) {}
return function createArrayFromMapWithForeach(m, getValues) {
var res = ListWrapper.createFixedSize(m.size), i = 0;
m.forEach(function(v, k) {
res[i] = getValues ? v : k;
i++;
});
return res;
};
}();
var MapWrapper = function() {
function MapWrapper() {}
MapWrapper.clone = function(m) {
return createMapFromMap(m);
};
MapWrapper.createFromStringMap = function(stringMap) {
var result = new exports.Map();
for (var prop in stringMap) {
result.set(prop, stringMap[prop]);
}
return result;
};
MapWrapper.toStringMap = function(m) {
var r = {};
m.forEach(function(v, k) {
return r[k] = v;
});
return r;
};
MapWrapper.createFromPairs = function(pairs) {
return createMapFromPairs(pairs);
};
MapWrapper.clearValues = function(m) {
_clearValues(m);
};
MapWrapper.iterable = function(m) {
return m;
};
MapWrapper.keys = function(m) {
return _arrayFromMap(m, false);
};
MapWrapper.values = function(m) {
return _arrayFromMap(m, true);
};
return MapWrapper;
}();
exports.MapWrapper = MapWrapper;
var StringMapWrapper = function() {
function StringMapWrapper() {}
StringMapWrapper.create = function() {
return {};
};
StringMapWrapper.contains = function(map, key) {
return map.hasOwnProperty(key);
};
StringMapWrapper.get = function(map, key) {
return map.hasOwnProperty(key) ? map[key] : undefined;
};
StringMapWrapper.set = function(map, key, value) {
map[key] = value;
};
StringMapWrapper.keys = function(map) {
return Object.keys(map);
};
StringMapWrapper.values = function(map) {
return Object.keys(map).reduce(function(r, a) {
r.push(map[a]);
return r;
}, []);
};
StringMapWrapper.isEmpty = function(map) {
for (var prop in map) {
return false;
}
return true;
};
StringMapWrapper.delete = function(map, key) {
delete map[key];
};
StringMapWrapper.forEach = function(map, callback) {
for (var prop in map) {
if (map.hasOwnProperty(prop)) {
callback(map[prop], prop);
}
}
};
StringMapWrapper.merge = function(m1, m2) {
var m = {};
for (var attr in m1) {
if (m1.hasOwnProperty(attr)) {
m[attr] = m1[attr];
}
}
for (var attr in m2) {
if (m2.hasOwnProperty(attr)) {
m[attr] = m2[attr];
}
}
return m;
};
StringMapWrapper.equals = function(m1, m2) {
var k1 = Object.keys(m1);
var k2 = Object.keys(m2);
if (k1.length != k2.length) {
return false;
}
var key;
for (var i = 0; i < k1.length; i++) {
key = k1[i];
if (m1[key] !== m2[key]) {
return false;
}
}
return true;
};
return StringMapWrapper;
}();
exports.StringMapWrapper = StringMapWrapper;
var ListWrapper = function() {
function ListWrapper() {}
ListWrapper.createFixedSize = function(size) {
return new Array(size);
};
ListWrapper.createGrowableSize = function(size) {
return new Array(size);
};
ListWrapper.clone = function(array) {
return array.slice(0);
};
ListWrapper.forEachWithIndex = function(array, fn) {
for (var i = 0; i < array.length; i++) {
fn(array[i], i);
}
};
ListWrapper.first = function(array) {
if (!array) return null;
return array[0];
};
ListWrapper.last = function(array) {
if (!array || array.length == 0) return null;
return array[array.length - 1];
};
ListWrapper.indexOf = function(array, value, startIndex) {
if (startIndex === void 0) {
startIndex = 0;
}
return array.indexOf(value, startIndex);
};
ListWrapper.contains = function(list, el) {
return list.indexOf(el) !== -1;
};
ListWrapper.reversed = function(array) {
var a = ListWrapper.clone(array);
return a.reverse();
};
ListWrapper.concat = function(a, b) {
return a.concat(b);
};
ListWrapper.insert = function(list, index, value) {
list.splice(index, 0, value);
};
ListWrapper.removeAt = function(list, index) {
var res = list[index];
list.splice(index, 1);
return res;
};
ListWrapper.removeAll = function(list, items) {
for (var i = 0; i < items.length; ++i) {
var index = list.indexOf(items[i]);
list.splice(index, 1);
}
};
ListWrapper.remove = function(list, el) {
var index = list.indexOf(el);
if (index > -1) {
list.splice(index, 1);
return true;
}
return false;
};
ListWrapper.clear = function(list) {
list.length = 0;
};
ListWrapper.isEmpty = function(list) {
return list.length == 0;
};
ListWrapper.fill = function(list, value, start, end) {
if (start === void 0) {
start = 0;
}
if (end === void 0) {
end = null;
}
list.fill(value, start, end === null ? list.length : end);
};
ListWrapper.equals = function(a, b) {
if (a.length != b.length) return false;
for (var i = 0; i < a.length; ++i) {
if (a[i] !== b[i]) return false;
}
return true;
};
ListWrapper.slice = function(l, from, to) {
if (from === void 0) {
from = 0;
}
if (to === void 0) {
to = null;
}
return l.slice(from, to === null ? undefined : to);
};
ListWrapper.splice = function(l, from, length) {
return l.splice(from, length);
};
ListWrapper.sort = function(l, compareFn) {
if (lang_1.isPresent(compareFn)) {
l.sort(compareFn);
} else {
l.sort();
}
};
ListWrapper.toString = function(l) {
return l.toString();
};
ListWrapper.toJSON = function(l) {
return JSON.stringify(l);
};
ListWrapper.maximum = function(list, predicate) {
if (list.length == 0) {
return null;
}
var solution = null;
var maxValue = -Infinity;
for (var index = 0; index < list.length; index++) {
var candidate = list[index];
if (lang_1.isBlank(candidate)) {
continue;
}
var candidateValue = predicate(candidate);
if (candidateValue > maxValue) {
solution = candidate;
maxValue = candidateValue;
}
}
return solution;
};
ListWrapper.flatten = function(list) {
var target = [];
_flattenArray(list, target);
return target;
};
ListWrapper.addAll = function(list, source) {
for (var i = 0; i < source.length; i++) {
list.push(source[i]);
}
};
return ListWrapper;
}();
exports.ListWrapper = ListWrapper;
function _flattenArray(source, target) {
if (lang_1.isPresent(source)) {
for (var i = 0; i < source.length; i++) {
var item = source[i];
if (lang_1.isArray(item)) {
_flattenArray(item, target);
} else {
target.push(item);
}
}
}
return target;
}
function isListLikeIterable(obj) {
if (!lang_1.isJsObject(obj)) return false;
return lang_1.isArray(obj) || !(obj instanceof exports.Map) && lang_1.getSymbolIterator() in obj;
}
exports.isListLikeIterable = isListLikeIterable;
function areIterablesEqual(a, b, comparator) {
var iterator1 = a[lang_1.getSymbolIterator()]();
var iterator2 = b[lang_1.getSymbolIterator()]();
while (true) {
var item1 = iterator1.next();
var item2 = iterator2.next();
if (item1.done && item2.done) return true;
if (item1.done || item2.done) return false;
if (!comparator(item1.value, item2.value)) return false;
}
}
exports.areIterablesEqual = areIterablesEqual;
function iterateListLike(obj, fn) {
if (lang_1.isArray(obj)) {
for (var i = 0; i < obj.length; i++) {
fn(obj[i]);
}
} else {
var iterator = obj[lang_1.getSymbolIterator()]();
var item;
while (!(item = iterator.next()).done) {
fn(item.value);
}
}
}
exports.iterateListLike = iterateListLike;
var createSetFromList = function() {
var test = new exports.Set([ 1, 2, 3 ]);
if (test.size === 3) {
return function createSetFromList(lst) {
return new exports.Set(lst);
};
} else {
return function createSetAndPopulateFromList(lst) {
var res = new exports.Set(lst);
if (res.size !== lst.length) {
for (var i = 0; i < lst.length; i++) {
res.add(lst[i]);
}
}
return res;
};
}
}();
var SetWrapper = function() {
function SetWrapper() {}
SetWrapper.createFromList = function(lst) {
return createSetFromList(lst);
};
SetWrapper.has = function(s, key) {
return s.has(key);
};
SetWrapper.delete = function(m, k) {
m.delete(k);
};
return SetWrapper;
}();
exports.SetWrapper = SetWrapper;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(219);
var CAMEL_CASE_REGEXP = /([A-Z])/g;
var DASH_CASE_REGEXP = /-([a-z])/g;
function camelCaseToDashCase(input) {
return lang_1.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function(m) {
return "-" + m[1].toLowerCase();
});
}
exports.camelCaseToDashCase = camelCaseToDashCase;
function dashCaseToCamelCase(input) {
return lang_1.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function(m) {
return m[1].toUpperCase();
});
}
exports.dashCaseToCamelCase = dashCaseToCamelCase;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(219);
var _DOM = null;
function getDOM() {
return _DOM;
}
exports.getDOM = getDOM;
function setDOM(adapter) {
_DOM = adapter;
}
exports.setDOM = setDOM;
function setRootDomAdapter(adapter) {
if (lang_1.isBlank(_DOM)) {
_DOM = adapter;
}
}
exports.setRootDomAdapter = setRootDomAdapter;
var DomAdapter = function() {
function DomAdapter() {
this.xhrType = null;
}
DomAdapter.prototype.getXHR = function() {
return this.xhrType;
};
Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
get: function() {
return this._attrToPropMap;
},
set: function(value) {
this._attrToPropMap = value;
},
enumerable: true,
configurable: true
});
return DomAdapter;
}();
exports.DomAdapter = DomAdapter;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var math_1 = __webpack_require__(220);
var dom_adapter_1 = __webpack_require__(223);
var BrowserDetails = function() {
function BrowserDetails() {
this.elapsedTimeIncludesDelay = false;
this.doesElapsedTimeIncludesDelay();
}
BrowserDetails.prototype.doesElapsedTimeIncludesDelay = function() {
var _this = this;
var div = dom_adapter_1.getDOM().createElement("div");
dom_adapter_1.getDOM().setAttribute(div, "style", "position: absolute; top: -9999px; left: -9999px; width: 1px;\n      height: 1px; transition: all 1ms linear 1ms;");
this.raf(function(timestamp) {
dom_adapter_1.getDOM().on(div, "transitionend", function(event) {
var elapsed = math_1.Math.round(event.elapsedTime * 1e3);
_this.elapsedTimeIncludesDelay = elapsed == 2;
dom_adapter_1.getDOM().remove(div);
});
dom_adapter_1.getDOM().setStyle(div, "width", "2px");
}, 2);
};
BrowserDetails.prototype.raf = function(callback, frames) {
if (frames === void 0) {
frames = 1;
}
var queue = new RafQueue(callback, frames);
return function() {
return queue.cancel();
};
};
BrowserDetails.decorators = [ {
type: core_1.Injectable
} ];
BrowserDetails.ctorParameters = [];
return BrowserDetails;
}();
exports.BrowserDetails = BrowserDetails;
var RafQueue = function() {
function RafQueue(callback, frames) {
this.callback = callback;
this.frames = frames;
this._raf();
}
RafQueue.prototype._raf = function() {
var _this = this;
this.currentFrameId = dom_adapter_1.getDOM().requestAnimationFrame(function(timestamp) {
return _this._nextFrame(timestamp);
});
};
RafQueue.prototype._nextFrame = function(timestamp) {
this.frames--;
if (this.frames > 0) {
this._raf();
} else {
this.callback(timestamp);
}
};
RafQueue.prototype.cancel = function() {
dom_adapter_1.getDOM().cancelAnimationFrame(this.currentFrameId);
this.currentFrameId = null;
};
return RafQueue;
}();
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var base_wrapped_exception_1 = __webpack_require__(226);
var exception_handler_1 = __webpack_require__(227);
var exception_handler_2 = __webpack_require__(227);
exports.ExceptionHandler = exception_handler_2.ExceptionHandler;
var BaseException = function(_super) {
__extends(BaseException, _super);
function BaseException(message) {
if (message === void 0) {
message = "--";
}
_super.call(this, message);
this.message = message;
this.stack = new Error(message).stack;
}
BaseException.prototype.toString = function() {
return this.message;
};
return BaseException;
}(Error);
exports.BaseException = BaseException;
var WrappedException = function(_super) {
__extends(WrappedException, _super);
function WrappedException(_wrapperMessage, _originalException, _originalStack, _context) {
_super.call(this, _wrapperMessage);
this._wrapperMessage = _wrapperMessage;
this._originalException = _originalException;
this._originalStack = _originalStack;
this._context = _context;
this._wrapperStack = new Error(_wrapperMessage).stack;
}
Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
get: function() {
return this._wrapperMessage;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "wrapperStack", {
get: function() {
return this._wrapperStack;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "originalException", {
get: function() {
return this._originalException;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "originalStack", {
get: function() {
return this._originalStack;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "context", {
get: function() {
return this._context;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "message", {
get: function() {
return exception_handler_1.ExceptionHandler.exceptionToString(this);
},
enumerable: true,
configurable: true
});
WrappedException.prototype.toString = function() {
return this.message;
};
return WrappedException;
}(base_wrapped_exception_1.BaseWrappedException);
exports.WrappedException = WrappedException;
function makeTypeError(message) {
return new TypeError(message);
}
exports.makeTypeError = makeTypeError;
function unimplemented() {
throw new BaseException("unimplemented");
}
exports.unimplemented = unimplemented;
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BaseWrappedException = function(_super) {
__extends(BaseWrappedException, _super);
function BaseWrappedException(message) {
_super.call(this, message);
}
Object.defineProperty(BaseWrappedException.prototype, "wrapperMessage", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "wrapperStack", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "originalException", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "originalStack", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "context", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "message", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
return BaseWrappedException;
}(Error);
exports.BaseWrappedException = BaseWrappedException;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(219);
var base_wrapped_exception_1 = __webpack_require__(226);
var collection_1 = __webpack_require__(221);
var _ArrayLogger = function() {
function _ArrayLogger() {
this.res = [];
}
_ArrayLogger.prototype.log = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logError = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logGroup = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logGroupEnd = function() {};
return _ArrayLogger;
}();
var ExceptionHandler = function() {
function ExceptionHandler(_logger, _rethrowException) {
if (_rethrowException === void 0) {
_rethrowException = true;
}
this._logger = _logger;
this._rethrowException = _rethrowException;
}
ExceptionHandler.exceptionToString = function(exception, stackTrace, reason) {
if (stackTrace === void 0) {
stackTrace = null;
}
if (reason === void 0) {
reason = null;
}
var l = new _ArrayLogger();
var e = new ExceptionHandler(l, false);
e.call(exception, stackTrace, reason);
return l.res.join("\n");
};
ExceptionHandler.prototype.call = function(exception, stackTrace, reason) {
if (stackTrace === void 0) {
stackTrace = null;
}
if (reason === void 0) {
reason = null;
}
var originalException = this._findOriginalException(exception);
var originalStack = this._findOriginalStack(exception);
var context = this._findContext(exception);
this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
this._logger.logError("STACKTRACE:");
this._logger.logError(this._longStackTrace(stackTrace));
}
if (lang_1.isPresent(reason)) {
this._logger.logError("REASON: " + reason);
}
if (lang_1.isPresent(originalException)) {
this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
}
if (lang_1.isPresent(originalStack)) {
this._logger.logError("ORIGINAL STACKTRACE:");
this._logger.logError(this._longStackTrace(originalStack));
}
if (lang_1.isPresent(context)) {
this._logger.logError("ERROR CONTEXT:");
this._logger.logError(context);
}
this._logger.logGroupEnd();
if (this._rethrowException) throw exception;
};
ExceptionHandler.prototype._extractMessage = function(exception) {
return exception instanceof base_wrapped_exception_1.BaseWrappedException ? exception.wrapperMessage : exception.toString();
};
ExceptionHandler.prototype._longStackTrace = function(stackTrace) {
return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join("\n\n-----async gap-----\n") : stackTrace.toString();
};
ExceptionHandler.prototype._findContext = function(exception) {
try {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
return lang_1.isPresent(exception.context) ? exception.context : this._findContext(exception.originalException);
} catch (e) {
return null;
}
};
ExceptionHandler.prototype._findOriginalException = function(exception) {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
var e = exception.originalException;
while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
e = e.originalException;
}
return e;
};
ExceptionHandler.prototype._findOriginalStack = function(exception) {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
var e = exception;
var stack = exception.originalStack;
while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
e = e.originalException;
if (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
stack = e.originalStack;
}
}
return stack;
};
return ExceptionHandler;
}();
exports.ExceptionHandler = ExceptionHandler;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var collection_1 = __webpack_require__(221);
var dom_adapter_1 = __webpack_require__(223);
var dom_tokens_1 = __webpack_require__(229);
var SharedStylesHost = function() {
function SharedStylesHost() {
this._styles = [];
this._stylesSet = new Set();
}
SharedStylesHost.prototype.addStyles = function(styles) {
var _this = this;
var additions = [];
styles.forEach(function(style) {
if (!collection_1.SetWrapper.has(_this._stylesSet, style)) {
_this._stylesSet.add(style);
_this._styles.push(style);
additions.push(style);
}
});
this.onStylesAdded(additions);
};
SharedStylesHost.prototype.onStylesAdded = function(additions) {};
SharedStylesHost.prototype.getAllStyles = function() {
return this._styles;
};
SharedStylesHost.decorators = [ {
type: core_1.Injectable
} ];
SharedStylesHost.ctorParameters = [];
return SharedStylesHost;
}();
exports.SharedStylesHost = SharedStylesHost;
var DomSharedStylesHost = function(_super) {
__extends(DomSharedStylesHost, _super);
function DomSharedStylesHost(doc) {
_super.call(this);
this._hostNodes = new Set();
this._hostNodes.add(doc.head);
}
DomSharedStylesHost.prototype._addStylesToHost = function(styles, host) {
for (var i = 0; i < styles.length; i++) {
var style = styles[i];
dom_adapter_1.getDOM().appendChild(host, dom_adapter_1.getDOM().createStyleElement(style));
}
};
DomSharedStylesHost.prototype.addHost = function(hostNode) {
this._addStylesToHost(this._styles, hostNode);
this._hostNodes.add(hostNode);
};
DomSharedStylesHost.prototype.removeHost = function(hostNode) {
collection_1.SetWrapper.delete(this._hostNodes, hostNode);
};
DomSharedStylesHost.prototype.onStylesAdded = function(additions) {
var _this = this;
this._hostNodes.forEach(function(hostNode) {
_this._addStylesToHost(additions, hostNode);
});
};
DomSharedStylesHost.decorators = [ {
type: core_1.Injectable
} ];
DomSharedStylesHost.ctorParameters = [ {
type: undefined,
decorators: [ {
type: core_1.Inject,
args: [ dom_tokens_1.DOCUMENT ]
} ]
} ];
return DomSharedStylesHost;
}(SharedStylesHost);
exports.DomSharedStylesHost = DomSharedStylesHost;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
exports.DOCUMENT = new core_1.OpaqueToken("DocumentToken");
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var exceptions_1 = __webpack_require__(225);
var collection_1 = __webpack_require__(221);
exports.EVENT_MANAGER_PLUGINS = new core_1.OpaqueToken("EventManagerPlugins");
var EventManager = function() {
function EventManager(plugins, _zone) {
var _this = this;
this._zone = _zone;
plugins.forEach(function(p) {
return p.manager = _this;
});
this._plugins = collection_1.ListWrapper.reversed(plugins);
}
EventManager.prototype.addEventListener = function(element, eventName, handler) {
var plugin = this._findPluginFor(eventName);
return plugin.addEventListener(element, eventName, handler);
};
EventManager.prototype.addGlobalEventListener = function(target, eventName, handler) {
var plugin = this._findPluginFor(eventName);
return plugin.addGlobalEventListener(target, eventName, handler);
};
EventManager.prototype.getZone = function() {
return this._zone;
};
EventManager.prototype._findPluginFor = function(eventName) {
var plugins = this._plugins;
for (var i = 0; i < plugins.length; i++) {
var plugin = plugins[i];
if (plugin.supports(eventName)) {
return plugin;
}
}
throw new exceptions_1.BaseException("No event manager plugin found for event " + eventName);
};
EventManager.decorators = [ {
type: core_1.Injectable
} ];
EventManager.ctorParameters = [ {
type: undefined,
decorators: [ {
type: core_1.Inject,
args: [ exports.EVENT_MANAGER_PLUGINS ]
} ]
}, {
type: core_1.NgZone
} ];
return EventManager;
}();
exports.EventManager = EventManager;
var EventManagerPlugin = function() {
function EventManagerPlugin() {}
EventManagerPlugin.prototype.supports = function(eventName) {
return false;
};
EventManagerPlugin.prototype.addEventListener = function(element, eventName, handler) {
throw "not implemented";
};
EventManagerPlugin.prototype.addGlobalEventListener = function(element, eventName, handler) {
throw "not implemented";
};
return EventManagerPlugin;
}();
exports.EventManagerPlugin = EventManagerPlugin;
}, function(module, exports, __webpack_require__) {
"use strict";
var types_1 = __webpack_require__(14);
var view_1 = __webpack_require__(12);
var placeholder_1 = __webpack_require__(232);
var content_view_1 = __webpack_require__(74);
var layout_base_1 = __webpack_require__(79);
var element_registry_1 = __webpack_require__(234);
var special_properties_1 = __webpack_require__(39);
var trace = __webpack_require__(30);
var platform_1 = __webpack_require__(45);
var IOS_PREFX = "@ios:";
var ANDROID_PREFX = "@android:";
var whiteSpaceSplitter = /\s+/;
exports.rendererTraceCategory = "ns-renderer";
function traceLog(msg) {
trace.write(msg, exports.rendererTraceCategory);
}
exports.traceLog = traceLog;
function isView(view) {
return view instanceof view_1.View;
}
exports.isView = isView;
function isLayout(view) {
return view instanceof layout_base_1.LayoutBase;
}
exports.isLayout = isLayout;
function isContentView(view) {
return view instanceof content_view_1.ContentView;
}
exports.isContentView = isContentView;
var propertyMaps = new Map();
var ViewUtil = function() {
function ViewUtil(device) {
this.isIos = device.os === platform_1.platformNames.ios;
this.isAndroid = device.os === platform_1.platformNames.android;
}
ViewUtil.prototype.insertChild = function(parent, child, atIndex) {
if (atIndex === void 0) {
atIndex = -1;
}
if (!parent || child.meta.skipAddToDom) {
return;
}
if (parent.meta && parent.meta.insertChild) {
parent.meta.insertChild(parent, child, atIndex);
} else if (isLayout(parent)) {
if (atIndex !== -1) {
parent.insertChild(child, atIndex);
} else {
parent.addChild(child);
}
} else if (isContentView(parent)) {
parent.content = child;
} else if (parent && parent._addChildFromBuilder) {
parent._addChildFromBuilder(child.nodeName, child);
} else {}
};
ViewUtil.prototype.removeChild = function(parent, child) {
if (!parent || child.meta.skipAddToDom) {
return;
}
if (parent.meta && parent.meta.removeChild) {
parent.meta.removeChild(parent, child);
} else if (isLayout(parent)) {
parent.removeChild(child);
} else if (isContentView(parent)) {
if (parent.content === child) {
parent.content = null;
}
} else if (isView(parent)) {
parent._removeView(child);
} else {}
};
ViewUtil.prototype.getChildIndex = function(parent, child) {
if (isLayout(parent)) {
return parent.getChildIndex(child);
} else if (isContentView(parent)) {
return child === parent.content ? 0 : -1;
} else {}
};
ViewUtil.prototype.createAndAttach = function(name, viewClass, parent, beforeAttach) {
var view = new viewClass();
view.nodeName = name;
view.meta = element_registry_1.getViewMeta(name);
if (beforeAttach) {
beforeAttach(view);
}
if (parent) {
this.insertChild(parent, view);
}
return view;
};
ViewUtil.prototype.createView = function(name, parent, beforeAttach) {
if (element_registry_1.isKnownView(name)) {
var viewClass = element_registry_1.getViewClass(name);
return this.createAndAttach(name, viewClass, parent, beforeAttach);
} else {
return this.createViewContainer(name, parent, beforeAttach);
}
};
ViewUtil.prototype.createText = function(value) {
var text = new placeholder_1.Placeholder();
text.nodeName = "#text";
text.visibility = "collapse";
text.meta = element_registry_1.getViewMeta("Placeholder");
return text;
};
ViewUtil.prototype.createViewContainer = function(name, parentElement, beforeAttach) {
traceLog("Creating view container in:" + parentElement);
var layout = this.createView("ProxyViewContainer", parentElement, beforeAttach);
layout.nodeName = "ProxyViewContainer";
return layout;
};
ViewUtil.prototype.createTemplateAnchor = function(parentElement) {
var anchor = this.createAndAttach("template", content_view_1.ContentView, parentElement);
anchor.visibility = "collapse";
anchor.templateParent = parentElement;
return anchor;
};
ViewUtil.prototype.isXMLAttribute = function(name) {
switch (name) {
case "style":
return true;

case "rows":
return true;

case "columns":
return true;

case "fontAttributes":
return true;

default:
return false;
}
};
ViewUtil.prototype.platformFilter = function(attribute) {
var lowered = attribute.toLowerCase();
if (lowered.indexOf(IOS_PREFX) === 0) {
if (this.isIos) {
return attribute.substr(IOS_PREFX.length);
} else {
return null;
}
}
if (lowered.indexOf(ANDROID_PREFX) === 0) {
if (this.isAndroid) {
return attribute.substr(ANDROID_PREFX.length);
} else {
return null;
}
}
return attribute;
};
ViewUtil.prototype.setProperty = function(view, attributeName, value) {
attributeName = this.platformFilter(attributeName);
if (!attributeName) {
return;
}
if (attributeName.indexOf(".") !== -1) {
var properties = attributeName.split(".");
attributeName = properties[properties.length - 1];
var propMap = this.getProperties(view);
var i = 0;
while (i < properties.length - 1 && types_1.isDefined(view)) {
var prop = properties[i];
if (propMap.has(prop)) {
prop = propMap.get(prop);
}
view = view[prop];
propMap = this.getProperties(view);
i++;
}
}
if (types_1.isDefined(view)) {
this.setPropertyInternal(view, attributeName, value);
}
};
ViewUtil.prototype.setPropertyInternal = function(view, attributeName, value) {
traceLog("Setting attribute: " + attributeName);
var specialSetter = special_properties_1.getSpecialPropertySetter(attributeName);
var propMap = this.getProperties(view);
if (attributeName === "class") {
this.setClasses(view, value);
} else if (this.isXMLAttribute(attributeName)) {
view._applyXmlAttribute(attributeName, value);
} else if (specialSetter) {
specialSetter(view, value);
} else if (propMap.has(attributeName)) {
var propertyName = propMap.get(attributeName);
view[propertyName] = this.convertValue(value);
} else {
view[attributeName] = this.convertValue(value);
}
};
ViewUtil.prototype.convertValue = function(value) {
if (typeof value !== "string" || value === "") {
return value;
}
var valueAsNumber = +value;
if (!isNaN(valueAsNumber)) {
return valueAsNumber;
} else if (value && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
return value.toLowerCase() === "true" ? true : false;
} else {
return value;
}
};
ViewUtil.prototype.getProperties = function(instance) {
var type = instance && instance.constructor;
if (!type) {
return new Map();
}
if (!propertyMaps.has(type)) {
var propMap = new Map();
for (var propName in instance) {
propMap.set(propName.toLowerCase(), propName);
}
propertyMaps.set(type, propMap);
}
return propertyMaps.get(type);
};
ViewUtil.prototype.cssClasses = function(view) {
if (!view.cssClasses) {
view.cssClasses = new Map();
}
return view.cssClasses;
};
ViewUtil.prototype.addClass = function(view, className) {
this.cssClasses(view).set(className, true);
this.syncClasses(view);
};
ViewUtil.prototype.removeClass = function(view, className) {
this.cssClasses(view).delete(className);
this.syncClasses(view);
};
ViewUtil.prototype.setClasses = function(view, classesValue) {
var _this = this;
var classes = classesValue.split(whiteSpaceSplitter);
classes.forEach(function(className) {
return _this.cssClasses(view).set(className, true);
});
this.syncClasses(view);
};
ViewUtil.prototype.syncClasses = function(view) {
var classValue = Array.from(this.cssClasses(view).keys()).join(" ");
view.cssClass = classValue;
};
ViewUtil.prototype.setStyleProperty = function(view, styleName, styleValue) {
throw new Error("Not implemented: setStyleProperty");
};
return ViewUtil;
}();
exports.ViewUtil = ViewUtil;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(233);
global.moduleMerge(common, exports);
var Placeholder = function(_super) {
__extends(Placeholder, _super);
function Placeholder() {
_super.apply(this, arguments);
}
Placeholder.prototype._createUI = function() {
var args = {
eventName: common.Placeholder.creatingViewEvent,
object: this,
view: undefined,
context: this._context
};
this.notify(args);
this._android = args.view;
};
Object.defineProperty(Placeholder.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Placeholder.prototype, "_nativeView", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
return Placeholder;
}(common.Placeholder);
exports.Placeholder = Placeholder;
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var Placeholder = function(_super) {
__extends(Placeholder, _super);
function Placeholder() {
_super.apply(this, arguments);
}
Placeholder.creatingViewEvent = "creatingView";
return Placeholder;
}(view.View);
exports.Placeholder = Placeholder;
}, function(module, exports, __webpack_require__) {
"use strict";
var defaultViewMeta = {
skipAddToDom: false
};
var elementMap = new Map();
var camelCaseSplit = /([a-z0-9])([A-Z])/g;
function registerElement(elementName, resolver, meta) {
if (elementMap.has(elementName)) {
throw new Error("Element for " + elementName + " already registered.");
} else {
var entry = {
resolver: resolver,
meta: meta
};
elementMap.set(elementName, entry);
elementMap.set(elementName.toLowerCase(), entry);
elementMap.set(elementName.replace(camelCaseSplit, "$1-$2").toLowerCase(), entry);
}
}
exports.registerElement = registerElement;
function getViewClass(elementName) {
var entry = elementMap.get(elementName) || elementMap.get(elementName.toLowerCase());
if (!entry) {
throw new TypeError("No known component for element " + elementName + ".");
}
try {
return entry.resolver();
} catch (e) {
throw new TypeError("Could not load view for: " + elementName + "." + e);
}
}
exports.getViewClass = getViewClass;
function getViewMeta(nodeName) {
var meta = defaultViewMeta;
var entry = elementMap.get(nodeName) || elementMap.get(nodeName.toLowerCase());
if (entry && entry.meta) {
meta = entry.meta;
}
return meta;
}
exports.getViewMeta = getViewMeta;
function isKnownView(elementName) {
return elementMap.has(elementName) || elementMap.has(elementName.toLowerCase());
}
exports.isKnownView = isKnownView;
registerElement("AbsoluteLayout", function() {
return __webpack_require__(88).AbsoluteLayout;
});
registerElement("ActivityIndicator", function() {
return __webpack_require__(235).ActivityIndicator;
});
registerElement("Border", function() {
return __webpack_require__(237).Border;
});
registerElement("Button", function() {
return __webpack_require__(51).Button;
});
registerElement("ContentView", function() {
return __webpack_require__(74).ContentView;
});
registerElement("DatePicker", function() {
return __webpack_require__(238).DatePicker;
});
registerElement("DockLayout", function() {
return __webpack_require__(86).DockLayout;
});
registerElement("GridLayout", function() {
return __webpack_require__(77).GridLayout;
});
registerElement("HtmlView", function() {
return __webpack_require__(240).HtmlView;
});
registerElement("Image", function() {
return __webpack_require__(242).Image;
});
registerElement("img", function() {
return __webpack_require__(242).Image;
});
registerElement("Label", function() {
return __webpack_require__(100).Label;
});
registerElement("ListPicker", function() {
return __webpack_require__(244).ListPicker;
});
registerElement("ListView", function() {
return __webpack_require__(246).ListView;
});
registerElement("Page", function() {
return __webpack_require__(72).Page;
});
registerElement("Placeholder", function() {
return __webpack_require__(232).Placeholder;
});
registerElement("Progress", function() {
return __webpack_require__(251).Progress;
});
registerElement("ProxyViewContainer", function() {
return __webpack_require__(250).ProxyViewContainer;
});
registerElement("Repeater", function() {
return __webpack_require__(253).Repeater;
});
registerElement("ScrollView", function() {
return __webpack_require__(254).ScrollView;
});
registerElement("SearchBar", function() {
return __webpack_require__(256).SearchBar;
});
registerElement("SegmentedBar", function() {
return __webpack_require__(258).SegmentedBar;
});
registerElement("SegmentedBarItem", function() {
return __webpack_require__(258).SegmentedBarItem;
});
registerElement("Slider", function() {
return __webpack_require__(260).Slider;
});
registerElement("StackLayout", function() {
return __webpack_require__(248).StackLayout;
});
registerElement("Switch", function() {
return __webpack_require__(262).Switch;
});
registerElement("TabView", function() {
return __webpack_require__(264).TabView;
});
registerElement("TextField", function() {
return __webpack_require__(94).TextField;
});
registerElement("TextView", function() {
return __webpack_require__(266).TextView;
});
registerElement("TimePicker", function() {
return __webpack_require__(268).TimePicker;
});
registerElement("WebView", function() {
return __webpack_require__(270).WebView;
});
registerElement("WrapLayout", function() {
return __webpack_require__(272).WrapLayout;
});
registerElement("FormattedString", function() {
return __webpack_require__(60).FormattedString;
});
registerElement("Span", function() {
return __webpack_require__(274).Span;
});
registerElement("DetachedContainer", function() {
return __webpack_require__(250).ProxyViewContainer;
}, {
skipAddToDom: true
});
}, function(module, exports, __webpack_require__) {
var aiCommon = __webpack_require__(236);
var enums = __webpack_require__(24);
var style = __webpack_require__(15);
function onBusyPropertyChanged(data) {
var indicator = data.object;
if (!indicator.android) {
return;
}
if (indicator.visibility === enums.Visibility.visible) {
indicator.android.setVisibility(data.newValue ? android.view.View.VISIBLE : android.view.View.INVISIBLE);
}
}
aiCommon.ActivityIndicator.busyProperty.metadata.onSetNativeValue = onBusyPropertyChanged;
global.moduleMerge(aiCommon, exports);
var ActivityIndicator = function(_super) {
__extends(ActivityIndicator, _super);
function ActivityIndicator() {
_super.apply(this, arguments);
}
ActivityIndicator.prototype._createUI = function() {
this._android = new android.widget.ProgressBar(this._context);
this._android.setVisibility(android.view.View.INVISIBLE);
this._android.setIndeterminate(true);
};
Object.defineProperty(ActivityIndicator.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
return ActivityIndicator;
}(aiCommon.ActivityIndicator);
exports.ActivityIndicator = ActivityIndicator;
var ActivityIndicatorStyler = function() {
function ActivityIndicatorStyler() {}
ActivityIndicatorStyler.setColorProperty = function(view, newValue) {
var bar = view._nativeView;
bar.getIndeterminateDrawable().setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
};
ActivityIndicatorStyler.resetColorProperty = function(view, nativeValue) {
var bar = view._nativeView;
bar.getIndeterminateDrawable().clearColorFilter();
};
ActivityIndicatorStyler.setActivityIndicatorVisibilityProperty = function(view, newValue) {
ActivityIndicatorStyler.setIndicatorVisibility(view.busy, newValue, view._nativeView);
};
ActivityIndicatorStyler.resetActivityIndicatorVisibilityProperty = function(view, nativeValue) {
ActivityIndicatorStyler.setIndicatorVisibility(view.busy, enums.Visibility.visible, view._nativeView);
};
ActivityIndicatorStyler.setIndicatorVisibility = function(isBusy, visibility, nativeView) {
if (visibility === enums.Visibility.collapsed || visibility === enums.Visibility.collapse) {
nativeView.setVisibility(android.view.View.GONE);
} else {
nativeView.setVisibility(isBusy ? android.view.View.VISIBLE : android.view.View.INVISIBLE);
}
};
ActivityIndicatorStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(ActivityIndicatorStyler.setColorProperty, ActivityIndicatorStyler.resetColorProperty), "ActivityIndicator");
style.registerHandler(style.visibilityProperty, new style.StylePropertyChangedHandler(ActivityIndicatorStyler.setActivityIndicatorVisibilityProperty, ActivityIndicatorStyler.resetActivityIndicatorVisibilityProperty), "ActivityIndicator");
};
return ActivityIndicatorStyler;
}();
exports.ActivityIndicatorStyler = ActivityIndicatorStyler;
ActivityIndicatorStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var dependencyObservable = __webpack_require__(34);
var proxy = __webpack_require__(53);
var busyProperty = new dependencyObservable.Property("busy", "ActivityIndicator", new proxy.PropertyMetadata(false, dependencyObservable.PropertyMetadataSettings.AffectsLayout));
var ActivityIndicator = function(_super) {
__extends(ActivityIndicator, _super);
function ActivityIndicator() {
_super.apply(this, arguments);
}
Object.defineProperty(ActivityIndicator.prototype, "busy", {
get: function() {
return this._getValue(ActivityIndicator.busyProperty);
},
set: function(value) {
this._setValue(ActivityIndicator.busyProperty, value);
},
enumerable: true,
configurable: true
});
ActivityIndicator.busyProperty = busyProperty;
return ActivityIndicator;
}(view.View);
exports.ActivityIndicator = ActivityIndicator;
}, function(module, exports, __webpack_require__) {
var contentView = __webpack_require__(74);
var viewModule = __webpack_require__(12);
var utils = __webpack_require__(22);
var Border = function(_super) {
__extends(Border, _super);
function Border() {
_super.apply(this, arguments);
}
Object.defineProperty(Border.prototype, "cornerRadius", {
get: function() {
return this.borderRadius;
},
set: function(value) {
this.borderRadius = value;
},
enumerable: true,
configurable: true
});
Border.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var width = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var height = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = utils.layout.getMeasureSpecMode(heightMeasureSpec);
var density = utils.layout.getDisplayDensity();
var borderSize = 2 * this.borderWidth * density;
var result = viewModule.View.measureChild(this, this.layoutView, utils.layout.makeMeasureSpec(width - borderSize, widthMode), utils.layout.makeMeasureSpec(height - borderSize, heightMode));
var widthAndState = viewModule.View.resolveSizeAndState(result.measuredWidth + borderSize, width, widthMode, 0);
var heightAndState = viewModule.View.resolveSizeAndState(result.measuredHeight + borderSize, height, heightMode, 0);
this.setMeasuredDimension(widthAndState, heightAndState);
};
Border.prototype.onLayout = function(left, top, right, bottom) {
var density = utils.layout.getDisplayDensity();
var borderSize = this.borderWidth * density;
viewModule.View.layoutChild(this, this.layoutView, borderSize, borderSize, right - left - borderSize, bottom - top - borderSize);
};
Border = __decorate([ Deprecated ], Border);
return Border;
}(contentView.ContentView);
exports.Border = Border;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(239);
var types = __webpack_require__(14);
function onYearPropertyChanged(data) {
var picker = data.object;
if (picker.android && picker.android.getYear() !== data.newValue) {
updateNativeDate(picker);
}
}
common.DatePicker.yearProperty.metadata.onSetNativeValue = onYearPropertyChanged;
function onMonthPropertyChanged(data) {
var picker = data.object;
if (picker.android && picker.android.getMonth() !== data.newValue - 1) {
updateNativeDate(picker);
}
}
common.DatePicker.monthProperty.metadata.onSetNativeValue = onMonthPropertyChanged;
function onDayPropertyChanged(data) {
var picker = data.object;
if (picker.android && picker.android.getDayOfMonth !== data.newValue) {
updateNativeDate(picker);
}
}
common.DatePicker.dayProperty.metadata.onSetNativeValue = onDayPropertyChanged;
function updateNativeDate(picker) {
var year = types.isNumber(picker.year) ? picker.year : picker.android.getYear();
var month = types.isNumber(picker.month) ? picker.month - 1 : picker.android.getMonth();
var day = types.isNumber(picker.day) ? picker.day : picker.android.getDayOfMonth();
picker.date = new Date(year, month, day);
}
function onMaxDatePropertyChanged(data) {
var picker = data.object;
var newValue = data.newValue.getTime();
if (picker.android && picker.android.getMaxDate() !== newValue) {
picker.android.setMaxDate(newValue);
}
}
common.DatePicker.maxDateProperty.metadata.onSetNativeValue = onMaxDatePropertyChanged;
function onMinDatePropertyChanged(data) {
var picker = data.object;
var newValue = data.newValue.getTime();
if (picker.android && picker.android.getMinDate() !== newValue) {
picker.android.setMinDate(newValue);
}
}
common.DatePicker.minDateProperty.metadata.onSetNativeValue = onMinDatePropertyChanged;
function onDatePropertyChanged(data) {
var picker = data.object;
var newValue = data.newValue;
if (picker.android && (picker.android.getDayOfMonth() !== newValue.getDay() || picker.android.getMonth() !== newValue.getMonth() || picker.android.getYear() !== newValue.getFullYear())) {
picker.android.updateDate(newValue.getFullYear(), newValue.getMonth(), newValue.getDate());
}
}
common.DatePicker.dateProperty.metadata.onSetNativeValue = onDatePropertyChanged;
global.moduleMerge(common, exports);
var DatePicker = function(_super) {
__extends(DatePicker, _super);
function DatePicker() {
_super.call(this);
var that = new WeakRef(this);
this._listener = new android.widget.DatePicker.OnDateChangedListener({
get owner() {
return that.get();
},
onDateChanged: function(picker, year, month, day) {
if (this.owner) {
var dateIsChanged = false;
if (year !== this.owner.year) {
this.owner._onPropertyChangedFromNative(common.DatePicker.yearProperty, year);
dateIsChanged = true;
}
if (month + 1 !== this.owner.month) {
this.owner._onPropertyChangedFromNative(common.DatePicker.monthProperty, month + 1);
dateIsChanged = true;
}
if (day !== this.owner.day) {
this.owner._onPropertyChangedFromNative(common.DatePicker.dayProperty, day);
dateIsChanged = true;
}
if (dateIsChanged) {
this.owner._onPropertyChangedFromNative(common.DatePicker.dateProperty, new Date(year, month, day));
}
}
}
});
}
Object.defineProperty(DatePicker.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
DatePicker.prototype._createUI = function() {
this._android = new android.widget.DatePicker(this._context);
this._android.setCalendarViewShown(false);
this._android.init(0, 0, 0, this._listener);
};
return DatePicker;
}(common.DatePicker);
exports.DatePicker = DatePicker;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(34);
var proxy = __webpack_require__(53);
var view = __webpack_require__(12);
var DatePicker = function(_super) {
__extends(DatePicker, _super);
function DatePicker() {
_super.call(this);
}
Object.defineProperty(DatePicker.prototype, "year", {
get: function() {
return this._getValue(DatePicker.yearProperty);
},
set: function(value) {
this._setValue(DatePicker.yearProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DatePicker.prototype, "month", {
get: function() {
return this._getValue(DatePicker.monthProperty);
},
set: function(value) {
this._setValue(DatePicker.monthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DatePicker.prototype, "day", {
get: function() {
return this._getValue(DatePicker.dayProperty);
},
set: function(value) {
this._setValue(DatePicker.dayProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DatePicker.prototype, "maxDate", {
get: function() {
return this._getValue(DatePicker.maxDateProperty);
},
set: function(value) {
this._setValue(DatePicker.maxDateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DatePicker.prototype, "minDate", {
get: function() {
return this._getValue(DatePicker.minDateProperty);
},
set: function(value) {
this._setValue(DatePicker.minDateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DatePicker.prototype, "date", {
get: function() {
return this._getValue(DatePicker.dateProperty);
},
set: function(value) {
this._setValue(DatePicker.dateProperty, value);
},
enumerable: true,
configurable: true
});
DatePicker.yearProperty = new dependencyObservable.Property("year", "DatePicker", new proxy.PropertyMetadata(undefined));
DatePicker.monthProperty = new dependencyObservable.Property("month", "DatePicker", new proxy.PropertyMetadata(undefined));
DatePicker.dayProperty = new dependencyObservable.Property("day", "DatePicker", new proxy.PropertyMetadata(undefined));
DatePicker.maxDateProperty = new dependencyObservable.Property("maxDate", "DatePicker", new proxy.PropertyMetadata(undefined));
DatePicker.minDateProperty = new dependencyObservable.Property("minDate", "DatePicker", new proxy.PropertyMetadata(undefined));
DatePicker.dateProperty = new dependencyObservable.Property("date", "DatePicker", new proxy.PropertyMetadata(undefined));
return DatePicker;
}(view.View);
exports.DatePicker = DatePicker;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(241);
function onHtmlPropertyChanged(data) {
var view = data.object;
if (!view.android) {
return;
}
var types = __webpack_require__(14);
if (types.isString(data.newValue)) {
var mask = 15;
if (data.newValue.search(/<a\s/i) >= 0) {
mask = 0;
}
view.android.setAutoLinkMask(mask);
view.android.setText(android.text.Html.fromHtml(data.newValue));
} else {
view.android.setText("");
}
}
common.HtmlView.htmlProperty.metadata.onSetNativeValue = onHtmlPropertyChanged;
global.moduleMerge(common, exports);
var HtmlView = function(_super) {
__extends(HtmlView, _super);
function HtmlView() {
_super.apply(this, arguments);
}
Object.defineProperty(HtmlView.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
HtmlView.prototype._createUI = function() {
this._android = new android.widget.TextView(this._context);
this._android.setLinksClickable(true);
this._android.setMovementMethod(android.text.method.LinkMovementMethod.getInstance());
};
return HtmlView;
}(common.HtmlView);
exports.HtmlView = HtmlView;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(34);
var proxy = __webpack_require__(53);
var view = __webpack_require__(12);
var HtmlView = function(_super) {
__extends(HtmlView, _super);
function HtmlView() {
_super.apply(this, arguments);
}
Object.defineProperty(HtmlView.prototype, "html", {
get: function() {
return this._getValue(HtmlView.htmlProperty);
},
set: function(value) {
this._setValue(HtmlView.htmlProperty, value);
},
enumerable: true,
configurable: true
});
HtmlView.htmlProperty = new dependencyObservable.Property("html", "HtmlView", new proxy.PropertyMetadata(false, dependencyObservable.PropertyMetadataSettings.AffectsLayout));
return HtmlView;
}(view.View);
exports.HtmlView = HtmlView;
}, function(module, exports, __webpack_require__) {
var imageCommon = __webpack_require__(243);
var style = __webpack_require__(15);
var background = __webpack_require__(48);
var utils = __webpack_require__(22);
global.moduleMerge(imageCommon, exports);
var enums;
function ensureEnums() {
if (!enums) {
enums = __webpack_require__(24);
}
}
function onStretchPropertyChanged(data) {
var image = data.object;
if (!image.android) {
return;
}
ensureEnums();
switch (data.newValue) {
case enums.Stretch.aspectFit:
image.android.setScaleType(android.widget.ImageView.ScaleType.FIT_CENTER);
break;

case enums.Stretch.aspectFill:
image.android.setScaleType(android.widget.ImageView.ScaleType.CENTER_CROP);
break;

case enums.Stretch.fill:
image.android.setScaleType(android.widget.ImageView.ScaleType.FIT_XY);
break;

case enums.Stretch.none:
default:
image.android.setScaleType(android.widget.ImageView.ScaleType.MATRIX);
break;
}
}
function onImageSourcePropertyChanged(data) {
var image = data.object;
if (!image.android) {
return;
}
image._setNativeImage(data.newValue ? data.newValue.android : null);
}
imageCommon.Image.imageSourceProperty.metadata.onSetNativeValue = onImageSourcePropertyChanged;
imageCommon.Image.stretchProperty.metadata.onSetNativeValue = onStretchPropertyChanged;
var Image = function(_super) {
__extends(Image, _super);
function Image() {
_super.apply(this, arguments);
}
Object.defineProperty(Image.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Image.prototype._createUI = function() {
this._android = new org.nativescript.widgets.ImageView(this._context);
};
Image.prototype._setNativeImage = function(nativeImage) {
this.android.setImageBitmap(nativeImage);
};
return Image;
}(imageCommon.Image);
exports.Image = Image;
var ImageStyler = function() {
function ImageStyler() {}
ImageStyler.setBorderRadiusProperty = function(v, newValue, defaultValue) {
if (!v._nativeView) {
return;
}
var val = Math.round(newValue * utils.layout.getDisplayDensity());
v._nativeView.setCornerRadius(val);
background.ad.onBackgroundOrBorderPropertyChanged(v);
};
ImageStyler.resetBorderRadiusProperty = function(v, nativeValue) {
if (!v._nativeView) {
return;
}
v._nativeView.setCornerRadius(0);
background.ad.onBackgroundOrBorderPropertyChanged(v);
};
ImageStyler.setBorderWidthProperty = function(v, newValue, defaultValue) {
if (!v._nativeView) {
return;
}
var val = Math.round(newValue * utils.layout.getDisplayDensity());
v._nativeView.setBorderWidth(val);
background.ad.onBackgroundOrBorderPropertyChanged(v);
};
ImageStyler.resetBorderWidthProperty = function(v, nativeValue) {
if (!v._nativeView) {
return;
}
v._nativeView.setBorderWidth(0);
background.ad.onBackgroundOrBorderPropertyChanged(v);
};
ImageStyler.registerHandlers = function() {
style.registerHandler(style.borderRadiusProperty, new style.StylePropertyChangedHandler(ImageStyler.setBorderRadiusProperty, ImageStyler.resetBorderRadiusProperty), "Image");
style.registerHandler(style.borderWidthProperty, new style.StylePropertyChangedHandler(ImageStyler.setBorderWidthProperty, ImageStyler.resetBorderWidthProperty), "Image");
};
return ImageStyler;
}();
exports.ImageStyler = ImageStyler;
ImageStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(34);
var view = __webpack_require__(12);
var proxy = __webpack_require__(53);
var imageSource = __webpack_require__(64);
var enums = __webpack_require__(24);
var platform = __webpack_require__(45);
var utils = __webpack_require__(22);
var types = __webpack_require__(14);
var SRC = "src";
var IMAGE_SOURCE = "imageSource";
var IMAGE = "Image";
var ISLOADING = "isLoading";
var STRETCH = "stretch";
var AffectsLayout = platform.device.os === platform.platformNames.android ? dependencyObservable.PropertyMetadataSettings.None : dependencyObservable.PropertyMetadataSettings.AffectsLayout;
function onSrcPropertyChanged(data) {
var image = data.object;
var value = data.newValue;
if (types.isString(value)) {
value = value.trim();
image.imageSource = null;
image["_url"] = value;
image._setValue(Image.isLoadingProperty, true);
if (utils.isDataURI(value)) {
var base64Data = value.split(",")[1];
if (types.isDefined(base64Data)) {
image.imageSource = imageSource.fromBase64(base64Data);
image._setValue(Image.isLoadingProperty, false);
}
} else if (imageSource.isFileOrResourcePath(value)) {
image.imageSource = imageSource.fromFileOrResource(value);
image._setValue(Image.isLoadingProperty, false);
} else {
imageSource.fromUrl(value).then(function(r) {
if (image["_url"] === value) {
image.imageSource = r;
image._setValue(Image.isLoadingProperty, false);
}
});
}
} else if (value instanceof imageSource.ImageSource) {
image.imageSource = value;
} else {
image.imageSource = imageSource.fromNativeSource(value);
}
}
var Image = function(_super) {
__extends(Image, _super);
function Image() {
_super.apply(this, arguments);
}
Object.defineProperty(Image.prototype, "imageSource", {
get: function() {
return this._getValue(Image.imageSourceProperty);
},
set: function(value) {
this._setValue(Image.imageSourceProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Image.prototype, "src", {
get: function() {
return this._getValue(Image.srcProperty);
},
set: function(value) {
this._setValue(Image.srcProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Image.prototype, "isLoading", {
get: function() {
return this._getValue(Image.isLoadingProperty);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Image.prototype, "stretch", {
get: function() {
return this._getValue(Image.stretchProperty);
},
set: function(value) {
this._setValue(Image.stretchProperty, value);
},
enumerable: true,
configurable: true
});
Image.prototype._setNativeImage = function(nativeImage) {};
Image.srcProperty = new dependencyObservable.Property(SRC, IMAGE, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None, onSrcPropertyChanged));
Image.imageSourceProperty = new dependencyObservable.Property(IMAGE_SOURCE, IMAGE, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None));
Image.isLoadingProperty = new dependencyObservable.Property(ISLOADING, IMAGE, new proxy.PropertyMetadata(false, dependencyObservable.PropertyMetadataSettings.None));
Image.stretchProperty = new dependencyObservable.Property(STRETCH, IMAGE, new proxy.PropertyMetadata(enums.Stretch.aspectFit, AffectsLayout));
return Image;
}(view.View);
exports.Image = Image;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(245);
var types = __webpack_require__(14);
global.moduleMerge(common, exports);
var ListPicker = function(_super) {
__extends(ListPicker, _super);
function ListPicker() {
_super.apply(this, arguments);
}
Object.defineProperty(ListPicker.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
ListPicker.prototype._createUI = function() {
this._android = new android.widget.NumberPicker(this._context);
this._android.setDescendantFocusability(android.widget.NumberPicker.FOCUS_BLOCK_DESCENDANTS);
this._android.setMinValue(0);
this._android.setMaxValue(0);
this._android.setValue(0);
var that = new WeakRef(this);
this._formatter = new android.widget.NumberPicker.Formatter({
get owner() {
return that.get();
},
format: function(index) {
if (this.owner) {
return this.owner._getItemAsString(index);
}
return " ";
}
});
this._android.setFormatter(this._formatter);
this._valueChangedListener = new android.widget.NumberPicker.OnValueChangeListener({
get owner() {
return that.get();
},
onValueChange: function(picker, oldVal, newVal) {
if (this.owner) {
this.owner._onPropertyChangedFromNative(common.ListPicker.selectedIndexProperty, newVal);
}
}
});
this._android.setOnValueChangedListener(this._valueChangedListener);
var mInputTextField = java.lang.Class.forName("android.widget.NumberPicker").getDeclaredField("mInputText");
mInputTextField.setAccessible(true);
this._editText = mInputTextField.get(this._android);
this._editText.setFilters([]);
this._editText.setText(" ", android.widget.TextView.BufferType.NORMAL);
};
ListPicker.prototype._onSelectedIndexPropertyChanged = function(data) {
_super.prototype._onSelectedIndexPropertyChanged.call(this, data);
if (this.android && types.isNumber(data.newValue)) {
this.android.setValue(data.newValue);
}
};
ListPicker.prototype._onItemsPropertyChanged = function(data) {
if (this.android) {
if (!data.newValue || !data.newValue.length) {
this.android.setMaxValue(0);
} else {
this.android.setMaxValue(data.newValue.length - 1);
}
this.android.setWrapSelectorWheel(false);
}
this._updateSelectedIndexOnItemsPropertyChanged(data.newValue);
this._fixNumberPickerRendering();
};
ListPicker.prototype._fixNumberPickerRendering = function() {
if (!this.android) {
return;
}
this.android.setFormatter(null);
this.android.setFormatter(this._formatter);
if (this._editText) {
this._editText.setFilters([]);
}
this._editText.invalidate();
this.android.invalidate();
};
return ListPicker;
}(common.ListPicker);
exports.ListPicker = ListPicker;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(34);
var proxy = __webpack_require__(53);
var view = __webpack_require__(12);
var types = __webpack_require__(14);
var trace = __webpack_require__(30);
exports.traceCategory = "ListPicker";
var ListPicker = function(_super) {
__extends(ListPicker, _super);
function ListPicker() {
_super.apply(this, arguments);
}
Object.defineProperty(ListPicker.prototype, "selectedIndex", {
get: function() {
return this._getValue(ListPicker.selectedIndexProperty);
},
set: function(value) {
this._setValue(ListPicker.selectedIndexProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListPicker.prototype, "items", {
get: function() {
return this._getValue(ListPicker.itemsProperty);
},
set: function(value) {
this._setValue(ListPicker.itemsProperty, value);
},
enumerable: true,
configurable: true
});
ListPicker.prototype._getItemAsString = function(index) {
if (!this.items || !this.items.length) {
return " ";
}
if (types.isDefined(this.items)) {
var item = this.items.getItem ? this.items.getItem(index) : this.items[index];
return types.isString(item) ? item : types.isDefined(item) ? item.toString() : index.toString();
}
return index.toString();
};
ListPicker.prototype._onSelectedIndexPropertyChanged = function(data) {
trace.write("ListPicker._onSelectedIndexPropertyChanged(" + data.oldValue + " => " + data.newValue + ");", exports.traceCategory);
var index = this.selectedIndex;
if (types.isUndefined(index)) {
return;
}
if (types.isDefined(this.items)) {
if (index < 0 || index >= this.items.length) {
this.selectedIndex = undefined;
throw new Error("selectedIndex should be between [0, items.length - 1]");
}
}
};
ListPicker.prototype._onItemsPropertyChanged = function(data) {};
ListPicker.prototype._updateSelectedIndexOnItemsPropertyChanged = function(newItems) {
trace.write("ListPicker._updateSelectedIndexOnItemsPropertyChanged(" + newItems + ");", exports.traceCategory);
var newItemsCount = 0;
if (newItems && newItems.length) {
newItemsCount = newItems.length;
}
if (newItemsCount === 0) {
this.selectedIndex = undefined;
} else if (types.isUndefined(this.selectedIndex) || this.selectedIndex >= newItemsCount) {
this.selectedIndex = 0;
}
};
ListPicker.selectedIndexProperty = new dependencyObservable.Property("selectedIndex", "ListPicker", new proxy.PropertyMetadata(undefined));
ListPicker.itemsProperty = new dependencyObservable.Property("items", "ListPicker", new proxy.PropertyMetadata(undefined));
return ListPicker;
}(view.View);
exports.ListPicker = ListPicker;
function onSelectedIndexPropertyChanged(data) {
var picker = data.object;
picker._onSelectedIndexPropertyChanged(data);
}
function onItemsPropertyChanged(data) {
var picker = data.object;
picker._onItemsPropertyChanged(data);
}
ListPicker.selectedIndexProperty.metadata.onSetNativeValue = onSelectedIndexPropertyChanged;
ListPicker.itemsProperty.metadata.onSetNativeValue = onItemsPropertyChanged;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(247);
var stackLayout = __webpack_require__(248);
var proxy_view_container_1 = __webpack_require__(250);
var layoutBase = __webpack_require__(79);
var color;
function ensureColor() {
if (!color) {
color = __webpack_require__(27);
}
}
var ITEMLOADING = common.ListView.itemLoadingEvent;
var LOADMOREITEMS = common.ListView.loadMoreItemsEvent;
var ITEMTAP = common.ListView.itemTapEvent;
var REALIZED_INDEX = "realizedIndex";
global.moduleMerge(common, exports);
function onSeparatorColorPropertyChanged(data) {
var bar = data.object;
if (!bar.android) {
return;
}
ensureColor();
if (data.newValue instanceof color.Color) {
bar.android.setDivider(new android.graphics.drawable.ColorDrawable(data.newValue.android));
bar.android.setDividerHeight(1);
}
}
common.ListView.separatorColorProperty.metadata.onSetNativeValue = onSeparatorColorPropertyChanged;
var ListView = function(_super) {
__extends(ListView, _super);
function ListView() {
_super.apply(this, arguments);
this._realizedItems = {};
this._androidViewId = -1;
}
ListView.prototype._createUI = function() {
this._android = new android.widget.ListView(this._context);
this._android.setCacheColorHint(android.graphics.Color.TRANSPARENT);
if (this._androidViewId < 0) {
this._androidViewId = android.view.View.generateViewId();
}
this._android.setId(this._androidViewId);
ensureListViewAdapterClass();
this.android.setAdapter(new ListViewAdapterClass(this));
var that = new WeakRef(this);
this.android.setOnScrollListener(new android.widget.AbsListView.OnScrollListener({
onScrollStateChanged: function(view, scrollState) {
var owner = this.owner;
if (!owner) {
return;
}
if (scrollState === android.widget.AbsListView.OnScrollListener.SCROLL_STATE_IDLE) {
owner._setValue(common.ListView.isScrollingProperty, false);
owner._notifyScrollIdle();
} else {
owner._setValue(common.ListView.isScrollingProperty, true);
}
},
onScroll: function(view, firstVisibleItem, visibleItemCount, totalItemCount) {
var owner = this.owner;
if (!owner) {
return;
}
if (totalItemCount > 0 && firstVisibleItem + visibleItemCount === totalItemCount) {
owner.notify({
eventName: LOADMOREITEMS,
object: owner
});
}
},
get owner() {
return that.get();
}
}));
this.android.setOnItemClickListener(new android.widget.AdapterView.OnItemClickListener({
onItemClick: function(parent, convertView, index, id) {
var owner = that.get();
if (owner) {
owner.notify({
eventName: ITEMTAP,
object: owner,
index: index,
view: owner._getRealizedView(convertView, index)
});
}
}
}));
};
Object.defineProperty(ListView.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
ListView.prototype.refresh = function() {
if (!this._android || !this._android.getAdapter()) {
return;
}
this.android.getAdapter().notifyDataSetChanged();
};
ListView.prototype.scrollToIndex = function(index) {
if (this._android) {
this._android.setSelection(index);
}
};
ListView.prototype._onDetached = function(force) {
_super.prototype._onDetached.call(this, force);
var keys = Object.keys(this._realizedItems);
var i;
var length = keys.length;
var view;
var key;
for (i = 0; i < length; i++) {
key = keys[i];
view = this._realizedItems[key];
view.parent._removeView(view);
delete this._realizedItems[key];
}
};
Object.defineProperty(ListView.prototype, "_childrenCount", {
get: function() {
var keys = Object.keys(this._realizedItems);
return keys.length;
},
enumerable: true,
configurable: true
});
ListView.prototype._eachChildView = function(callback) {
var keys = Object.keys(this._realizedItems);
var length = keys.length;
for (var i = 0; i < length; i++) {
var key = keys[i];
var view = this._realizedItems[key];
callback(view);
}
};
ListView.prototype._getRealizedView = function(convertView, index) {
if (!convertView) {
return this._getItemTemplateContent(index);
}
return this._realizedItems[convertView.hashCode()];
};
ListView.prototype._notifyScrollIdle = function() {
var keys = Object.keys(this._realizedItems);
var i;
var length = keys.length;
var view;
var key;
for (i = 0; i < length; i++) {
key = keys[i];
view = this._realizedItems[key];
if (view[REALIZED_INDEX] < this.items.length) {
this.notify({
eventName: ITEMLOADING,
object: this,
index: view[REALIZED_INDEX],
view: view
});
}
}
};
return ListView;
}(common.ListView);
exports.ListView = ListView;
var ListViewAdapterClass;
function ensureListViewAdapterClass() {
if (ListViewAdapterClass) {
return;
}
var ListViewAdapter = function(_super) {
__extends(ListViewAdapter, _super);
function ListViewAdapter(listView) {
_super.call(this);
this._listView = listView;
return global.__native(this);
}
ListViewAdapter.prototype.getCount = function() {
return this._listView && this._listView.items ? this._listView.items.length : 0;
};
ListViewAdapter.prototype.getItem = function(i) {
if (this._listView && this._listView.items && i < this._listView.items.length) {
return this._listView.items.getItem ? this._listView.items.getItem(i) : this._listView.items[i];
}
return null;
};
ListViewAdapter.prototype.getItemId = function(i) {
return long(i);
};
ListViewAdapter.prototype.hasStableIds = function() {
return true;
};
ListViewAdapter.prototype.getView = function(index, convertView, parent) {
if (!this._listView) {
return null;
}
var view = this._listView._getRealizedView(convertView, index);
var args = {
eventName: ITEMLOADING,
object: this._listView,
index: index,
view: view,
android: parent,
ios: undefined
};
this._listView.notify(args);
if (!args.view) {
args.view = this._listView._getDefaultItemContent(index);
}
if (args.view) {
if (this._listView.rowHeight > -1) {
args.view.height = this._listView.rowHeight;
} else {
args.view.height = Number.NaN;
}
this._listView._prepareItem(args.view, index);
if (!args.view.parent) {
if (args.view instanceof layoutBase.LayoutBase && !(args.view instanceof proxy_view_container_1.ProxyViewContainer)) {
this._listView._addView(args.view);
convertView = args.view.android;
} else {
var sp = new stackLayout.StackLayout();
sp.addChild(args.view);
this._listView._addView(sp);
convertView = sp.android;
}
}
this._listView._realizedItems[convertView.hashCode()] = args.view;
args.view[REALIZED_INDEX] = index;
}
return convertView;
};
return ListViewAdapter;
}(android.widget.BaseAdapter);
ListViewAdapterClass = ListViewAdapter;
}
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(18);
var view = __webpack_require__(12);
var proxy = __webpack_require__(53);
var dependencyObservable = __webpack_require__(34);
var color = __webpack_require__(27);
var builder;
function ensureBuilder() {
if (!builder) {
builder = __webpack_require__(82);
}
}
var label;
function ensureLabel() {
if (!label) {
label = __webpack_require__(100);
}
}
var observableArray;
function ensureObservableArray() {
if (!observableArray) {
observableArray = __webpack_require__(62);
}
}
var weakEvents;
function ensureWeakEvents() {
if (!weakEvents) {
weakEvents = __webpack_require__(55);
}
}
var ITEMS = "items";
var ITEMTEMPLATE = "itemTemplate";
var ISSCROLLING = "isScrolling";
var LISTVIEW = "ListView";
var SEPARATORCOLOR = "separatorColor";
var ROWHEIGHT = "rowHeight";
var knownTemplates;
(function(knownTemplates) {
knownTemplates.itemTemplate = "itemTemplate";
})(knownTemplates = exports.knownTemplates || (exports.knownTemplates = {}));
function onItemsPropertyChanged(data) {
var listView = data.object;
listView._onItemsPropertyChanged(data);
}
function onItemTemplatePropertyChanged(data) {
var listView = data.object;
listView.refresh();
}
function onRowHeightPropertyChanged(data) {
var listView = data.object;
listView._onRowHeightPropertyChanged(data);
}
var ListView = function(_super) {
__extends(ListView, _super);
function ListView() {
_super.apply(this, arguments);
}
Object.defineProperty(ListView.prototype, "items", {
get: function() {
return this._getValue(ListView.itemsProperty);
},
set: function(value) {
this._setValue(ListView.itemsProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListView.prototype, "itemTemplate", {
get: function() {
return this._getValue(ListView.itemTemplateProperty);
},
set: function(value) {
this._setValue(ListView.itemTemplateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListView.prototype, "isScrolling", {
get: function() {
return this._getValue(ListView.isScrollingProperty);
},
set: function(value) {
this._setValue(ListView.isScrollingProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListView.prototype, "separatorColor", {
get: function() {
return this._getValue(ListView.separatorColorProperty);
},
set: function(value) {
this._setValue(ListView.separatorColorProperty, value instanceof color.Color ? value : new color.Color(value));
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListView.prototype, "rowHeight", {
get: function() {
return this._getValue(ListView.rowHeightProperty);
},
set: function(value) {
this._setValue(ListView.rowHeightProperty, value);
},
enumerable: true,
configurable: true
});
ListView.prototype.refresh = function() {};
ListView.prototype.scrollToIndex = function(index) {};
ListView.prototype._getItemTemplateContent = function(index) {
ensureBuilder();
var v;
if (this.itemTemplate && this.items) {
v = builder.parse(this.itemTemplate, this);
}
return v;
};
ListView.prototype._prepareItem = function(item, index) {
if (item) {
var dataItem = this._getDataItem(index);
if (!(dataItem instanceof observable.Observable)) {
item.bindingContext = null;
}
item.bindingContext = dataItem;
item._inheritProperties(this);
}
};
ListView.prototype._getDataItem = function(index) {
return this.items.getItem ? this.items.getItem(index) : this.items[index];
};
ListView.prototype._getDefaultItemContent = function(index) {
ensureLabel();
var lbl = new label.Label();
lbl.bind({
targetProperty: "text",
sourceProperty: "$value"
});
return lbl;
};
ListView.prototype._onItemsPropertyChanged = function(data) {
ensureObservableArray();
ensureWeakEvents();
if (data.oldValue instanceof observable.Observable) {
weakEvents.removeWeakEventListener(data.oldValue, observableArray.ObservableArray.changeEvent, this._onItemsChanged, this);
}
if (data.newValue instanceof observable.Observable) {
weakEvents.addWeakEventListener(data.newValue, observableArray.ObservableArray.changeEvent, this._onItemsChanged, this);
}
this.refresh();
};
ListView.prototype._onItemsChanged = function(args) {
this.refresh();
};
ListView.prototype._onRowHeightPropertyChanged = function(data) {
this.refresh();
};
ListView.prototype._propagateInheritableProperties = function(view) {};
ListView.itemLoadingEvent = "itemLoading";
ListView.itemTapEvent = "itemTap";
ListView.loadMoreItemsEvent = "loadMoreItems";
ListView.separatorColorProperty = new dependencyObservable.Property(SEPARATORCOLOR, LISTVIEW, new proxy.PropertyMetadata(undefined));
ListView.itemsProperty = new dependencyObservable.Property(ITEMS, LISTVIEW, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemsPropertyChanged));
ListView.itemTemplateProperty = new dependencyObservable.Property(ITEMTEMPLATE, LISTVIEW, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemTemplatePropertyChanged));
ListView.isScrollingProperty = new dependencyObservable.Property(ISSCROLLING, LISTVIEW, new proxy.PropertyMetadata(false, dependencyObservable.PropertyMetadataSettings.None));
ListView.rowHeightProperty = new dependencyObservable.Property(ROWHEIGHT, LISTVIEW, new proxy.PropertyMetadata(-1, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onRowHeightPropertyChanged));
return ListView;
}(view.View);
exports.ListView = ListView;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(249);
var enums_1 = __webpack_require__(24);
global.moduleMerge(common, exports);
function setNativeOrientationProperty(data) {
var stackLayout = data.object;
var nativeView = stackLayout._nativeView;
nativeView.setOrientation(data.newValue === enums_1.Orientation.vertical ? org.nativescript.widgets.Orientation.vertical : org.nativescript.widgets.Orientation.horizontal);
}
common.StackLayout.orientationProperty.metadata.onSetNativeValue = setNativeOrientationProperty;
var StackLayout = function(_super) {
__extends(StackLayout, _super);
function StackLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(StackLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(StackLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
StackLayout.prototype._createUI = function() {
this._layout = new org.nativescript.widgets.StackLayout(this._context);
};
return StackLayout;
}(common.StackLayout);
exports.StackLayout = StackLayout;
}, function(module, exports, __webpack_require__) {
var platform = __webpack_require__(45);
var layout_base_1 = __webpack_require__(79);
var enums_1 = __webpack_require__(24);
var proxy_1 = __webpack_require__(53);
var dependency_observable_1 = __webpack_require__(34);
var AffectsLayout = platform.device.os === platform.platformNames.android ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
function validateOrientation(value) {
return value === enums_1.Orientation.vertical || value === enums_1.Orientation.horizontal;
}
var StackLayout = function(_super) {
__extends(StackLayout, _super);
function StackLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(StackLayout.prototype, "orientation", {
get: function() {
return this._getValue(StackLayout.orientationProperty);
},
set: function(value) {
this._setValue(StackLayout.orientationProperty, value);
},
enumerable: true,
configurable: true
});
StackLayout.orientationProperty = new dependency_observable_1.Property("orientation", "StackLayout", new proxy_1.PropertyMetadata(enums_1.Orientation.vertical, AffectsLayout, undefined, validateOrientation));
return StackLayout;
}(layout_base_1.LayoutBase);
exports.StackLayout = StackLayout;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var trace = __webpack_require__(30);
var layout_base_1 = __webpack_require__(79);
var ProxyViewContainer = function(_super) {
__extends(ProxyViewContainer, _super);
function ProxyViewContainer() {
_super.apply(this, arguments);
}
Object.defineProperty(ProxyViewContainer.prototype, "ios", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProxyViewContainer.prototype, "android", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProxyViewContainer.prototype, "_nativeView", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProxyViewContainer.prototype, "isLayoutRequested", {
get: function() {
return false;
},
enumerable: true,
configurable: true
});
ProxyViewContainer.prototype._createUI = function() {};
ProxyViewContainer.prototype._getNativeViewsCount = function() {
var result = 0;
this._eachChildView(function(cv) {
result += cv._getNativeViewsCount();
return true;
});
return result;
};
ProxyViewContainer.prototype._eachLayoutView = function(callback) {
this._eachChildView(function(cv) {
cv._eachLayoutView(callback);
return true;
});
};
ProxyViewContainer.prototype._addViewToNativeVisualTree = function(child, atIndex) {
trace.write("ViewContainer._addViewToNativeVisualTree for a child " + child + " ViewContainer.parent: " + this.parent, trace.categories.ViewHierarchy);
_super.prototype._addViewToNativeVisualTree.call(this, child);
var parent = this.parent;
if (parent) {
var baseIndex = 0;
var insideIndex = 0;
if (parent instanceof layout_base_1.LayoutBase) {
baseIndex = parent._childIndexToNativeChildIndex(parent.getChildIndex(this));
}
if (types.isDefined(atIndex)) {
insideIndex = this._childIndexToNativeChildIndex(atIndex);
} else {
insideIndex = this._getNativeViewsCount();
}
trace.write("ProxyViewContainer._addViewToNativeVisualTree at: " + atIndex + " base: " + baseIndex + " additional: " + insideIndex, trace.categories.ViewHierarchy);
return parent._addViewToNativeVisualTree(child, baseIndex + insideIndex);
}
return false;
};
ProxyViewContainer.prototype._removeViewFromNativeVisualTree = function(child) {
trace.write("ProxyViewContainer._removeViewFromNativeVisualTree for a child " + child + " ViewContainer.parent: " + this.parent, trace.categories.ViewHierarchy);
_super.prototype._removeViewFromNativeVisualTree.call(this, child);
var parent = this.parent;
if (parent) {
return parent._removeViewFromNativeVisualTree(child);
}
};
ProxyViewContainer.prototype._addToSuperview = function(superview, atIndex) {
var _this = this;
var index = 0;
this._eachChildView(function(cv) {
if (!cv._isAddedToNativeVisualTree) {
cv._isAddedToNativeVisualTree = _this._addViewToNativeVisualTree(cv, index++);
}
return true;
});
return true;
};
ProxyViewContainer.prototype._removeFromSuperview = function() {
var _this = this;
this._eachChildView(function(cv) {
if (cv._isAddedToNativeVisualTree) {
_this._removeViewFromNativeVisualTree(cv);
}
return true;
});
};
ProxyViewContainer.prototype._registerLayoutChild = function(child) {
if (this.parent instanceof layout_base_1.LayoutBase) {
this.parent._registerLayoutChild(child);
}
};
ProxyViewContainer.prototype._unregisterLayoutChild = function(child) {
if (this.parent instanceof layout_base_1.LayoutBase) {
this.parent._unregisterLayoutChild(child);
}
};
ProxyViewContainer.prototype._parentChanged = function(oldParent) {
var addingToParent = this.parent && !oldParent;
var newLayout = this.parent;
var oldLayout = oldParent;
if (addingToParent && newLayout instanceof layout_base_1.LayoutBase) {
this._eachChildView(function(child) {
newLayout._registerLayoutChild(child);
return true;
});
} else if (oldLayout instanceof layout_base_1.LayoutBase) {
this._eachChildView(function(child) {
oldLayout._unregisterLayoutChild(child);
return true;
});
}
};
return ProxyViewContainer;
}(layout_base_1.LayoutBase);
exports.ProxyViewContainer = ProxyViewContainer;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(252);
var style = __webpack_require__(15);
var R_ATTR_PROGRESS_BAR_STYLE_HORIZONTAL = 16842872;
function onValuePropertyChanged(data) {
var progress = data.object;
if (!progress.android) {
return;
}
progress.android.setProgress(data.newValue);
}
function onMaxValuePropertyChanged(data) {
var progress = data.object;
if (!progress.android) {
return;
}
progress.android.setMax(data.newValue);
}
common.Progress.valueProperty.metadata.onSetNativeValue = onValuePropertyChanged;
common.Progress.maxValueProperty.metadata.onSetNativeValue = onMaxValuePropertyChanged;
global.moduleMerge(common, exports);
var Progress = function(_super) {
__extends(Progress, _super);
function Progress() {
_super.apply(this, arguments);
}
Progress.prototype._createUI = function() {
this._android = new android.widget.ProgressBar(this._context, null, R_ATTR_PROGRESS_BAR_STYLE_HORIZONTAL);
};
Object.defineProperty(Progress.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
return Progress;
}(common.Progress);
exports.Progress = Progress;
var ProgressStyler = function() {
function ProgressStyler() {}
ProgressStyler.setColorProperty = function(view, newValue) {
var bar = view._nativeView;
bar.getProgressDrawable().setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
};
ProgressStyler.resetColorProperty = function(view, nativeValue) {
var bar = view._nativeView;
bar.getProgressDrawable().clearColorFilter();
};
ProgressStyler.setBackgroundAndBorderProperty = function(view, newValue) {
var bar = view._nativeView;
var progressDrawable = bar.getProgressDrawable();
if (progressDrawable.getNumberOfLayers && progressDrawable.getNumberOfLayers() > 0) {
var backgroundDrawable = progressDrawable.getDrawable(0);
if (backgroundDrawable) {
backgroundDrawable.setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
}
}
};
ProgressStyler.resetBackgroundAndBorderProperty = function(view, nativeValue) {};
ProgressStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(ProgressStyler.setColorProperty, ProgressStyler.resetColorProperty), "Progress");
style.registerHandler(style.backgroundColorProperty, new style.StylePropertyChangedHandler(ProgressStyler.setBackgroundAndBorderProperty, ProgressStyler.resetBackgroundAndBorderProperty), "Progress");
style.registerHandler(style.borderWidthProperty, style.ignorePropertyHandler, "Progress");
style.registerHandler(style.borderColorProperty, style.ignorePropertyHandler, "Progress");
style.registerHandler(style.borderRadiusProperty, style.ignorePropertyHandler, "Progress");
style.registerHandler(style.backgroundInternalProperty, style.ignorePropertyHandler, "Progress");
};
return ProgressStyler;
}();
exports.ProgressStyler = ProgressStyler;
ProgressStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var dependencyObservable = __webpack_require__(34);
var proxy = __webpack_require__(53);
var Progress = function(_super) {
__extends(Progress, _super);
function Progress() {
_super.call(this);
this.maxValue = 100;
this.value = 0;
}
Object.defineProperty(Progress.prototype, "maxValue", {
get: function() {
return this._getValue(Progress.maxValueProperty);
},
set: function(newMaxValue) {
this._setValue(Progress.maxValueProperty, newMaxValue);
if (this.value > newMaxValue) {
this.value = newMaxValue;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Progress.prototype, "value", {
get: function() {
return this._getValue(Progress.valueProperty);
},
set: function(value) {
value = Math.min(value, this.maxValue);
this._setValue(Progress.valueProperty, value);
},
enumerable: true,
configurable: true
});
Progress.valueProperty = new dependencyObservable.Property("value", "Progress", new proxy.PropertyMetadata(0, dependencyObservable.PropertyMetadataSettings.AffectsLayout));
Progress.maxValueProperty = new dependencyObservable.Property("maxValue", "Progress", new proxy.PropertyMetadata(100, dependencyObservable.PropertyMetadataSettings.AffectsLayout));
return Progress;
}(view.View);
exports.Progress = Progress;
}, function(module, exports, __webpack_require__) {
var proxy = __webpack_require__(53);
var dependencyObservable = __webpack_require__(34);
var viewModule = __webpack_require__(12);
var layoutBaseModule = __webpack_require__(79);
var utils = __webpack_require__(22);
var trace = __webpack_require__(30);
var platform = __webpack_require__(45);
var stackLayout = __webpack_require__(248);
var types = __webpack_require__(14);
var builder = __webpack_require__(82);
var observableArray = __webpack_require__(62);
var weakEvents = __webpack_require__(55);
var label;
function ensureLabel() {
if (!label) {
label = __webpack_require__(100);
}
}
var ITEMS = "items";
var ITEMTEMPLATE = "itemTemplate";
var LAYOUT = "layout";
var REPEATER = "Repeater";
var knownTemplates;
(function(knownTemplates) {
knownTemplates.itemTemplate = "itemTemplate";
})(knownTemplates = exports.knownTemplates || (exports.knownTemplates = {}));
function onItemsPropertyChanged(data) {
var repeater = data.object;
repeater._onItemsPropertyChanged(data);
}
function onItemTemplatePropertyChanged(data) {
var repeater = data.object;
repeater._onItemTemplatePropertyChanged(data);
}
function onItemsLayoutPropertyPropertyChanged(data) {
var repeater = data.object;
repeater._onItemsLayoutPropertyPropertyChanged(data);
}
var Repeater = function(_super) {
__extends(Repeater, _super);
function Repeater() {
_super.call(this);
this._isDirty = false;
if (platform.device.os === platform.platformNames.ios) {
this._ios = UIView.new();
}
this.itemsLayout = new stackLayout.StackLayout();
}
Object.defineProperty(Repeater.prototype, "items", {
get: function() {
return this._getValue(Repeater.itemsProperty);
},
set: function(value) {
this._setValue(Repeater.itemsProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Repeater.prototype, "itemTemplate", {
get: function() {
return this._getValue(Repeater.itemTemplateProperty);
},
set: function(value) {
this._setValue(Repeater.itemTemplateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Repeater.prototype, "itemsLayout", {
get: function() {
return this._getValue(Repeater.itemsLayoutProperty);
},
set: function(value) {
this._setValue(Repeater.itemsLayoutProperty, value);
},
enumerable: true,
configurable: true
});
Repeater.prototype.onLoaded = function() {
trace.write("Repeater.onLoaded()", "Repeater");
if (this._isDirty) {
this.refresh();
}
_super.prototype.onLoaded.call(this);
};
Repeater.prototype._requestRefresh = function() {
trace.write("Repeater._requestRefresh()", "Repeater");
this._isDirty = true;
if (this.isLoaded) {
this.refresh();
}
};
Repeater.prototype.refresh = function() {
trace.write("Repeater.refresh()", "Repeater");
if (this.itemsLayout) {
this.itemsLayout.removeChildren();
}
if (types.isNullOrUndefined(this.items) || !types.isNumber(this.items.length)) {
return;
}
var length = this.items.length;
for (var i = 0; i < length; i++) {
var viewToAdd = !types.isNullOrUndefined(this.itemTemplate) ? builder.parse(this.itemTemplate, this) : this._getDefaultItemContent(i);
var dataItem = this._getDataItem(i);
viewToAdd.bindingContext = dataItem;
this.itemsLayout.addChild(viewToAdd);
}
this._isDirty = false;
};
Repeater.prototype._onItemsPropertyChanged = function(data) {
trace.write("Repeater._onItemsPropertyChanged(" + data.oldValue + " => " + data.newValue + ")", "Repeater");
if (data.oldValue instanceof observableArray.ObservableArray) {
weakEvents.removeWeakEventListener(data.oldValue, observableArray.ObservableArray.changeEvent, this._onItemsChanged, this);
}
if (data.newValue instanceof observableArray.ObservableArray) {
weakEvents.addWeakEventListener(data.newValue, observableArray.ObservableArray.changeEvent, this._onItemsChanged, this);
}
this._requestRefresh();
};
Repeater.prototype._onItemTemplatePropertyChanged = function(data) {
trace.write("Repeater._onItemTemplatePropertyChanged(" + data.oldValue + " => " + data.newValue + ")", "Repeater");
this._requestRefresh();
};
Repeater.prototype._onItemsLayoutPropertyPropertyChanged = function(data) {
trace.write("Repeater._onItemsLayoutPropertyPropertyChanged(" + data.oldValue + " => " + data.newValue + ")", "Repeater");
if (data.oldValue instanceof layoutBaseModule.LayoutBase) {
this._removeView(data.oldValue);
}
if (data.newValue instanceof layoutBaseModule.LayoutBase) {
this._addView(data.newValue);
}
this._requestRefresh();
};
Repeater.prototype._onItemsChanged = function(data) {
trace.write("Repeater._onItemsChanged(" + data + ")", "Repeater");
this._requestRefresh();
};
Repeater.prototype._getDefaultItemContent = function(index) {
ensureLabel();
var lbl = new label.Label();
lbl.bind({
targetProperty: "text",
sourceProperty: "$value"
});
return lbl;
};
Repeater.prototype._getDataItem = function(index) {
return this.items.getItem ? this.items.getItem(index) : this.items[index];
};
Object.defineProperty(Repeater.prototype, "ios", {
get: function() {
return this._ios;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Repeater.prototype, "_childrenCount", {
get: function() {
var count = 0;
if (this.itemsLayout) {
count++;
}
return count;
},
enumerable: true,
configurable: true
});
Repeater.prototype._eachChildView = function(callback) {
if (this.itemsLayout) {
callback(this.itemsLayout);
}
};
Repeater.prototype.onLayout = function(left, top, right, bottom) {
viewModule.View.layoutChild(this, this.itemsLayout, 0, 0, right - left, bottom - top);
};
Repeater.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var result = viewModule.View.measureChild(this, this.itemsLayout, widthMeasureSpec, heightMeasureSpec);
var width = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var height = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = utils.layout.getMeasureSpecMode(heightMeasureSpec);
var widthAndState = viewModule.View.resolveSizeAndState(result.measuredWidth, width, widthMode, 0);
var heightAndState = viewModule.View.resolveSizeAndState(result.measuredHeight, height, heightMode, 0);
this.setMeasuredDimension(widthAndState, heightAndState);
};
Repeater.itemsProperty = new dependencyObservable.Property(ITEMS, REPEATER, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemsPropertyChanged));
Repeater.itemTemplateProperty = new dependencyObservable.Property(ITEMTEMPLATE, REPEATER, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemTemplatePropertyChanged));
Repeater.itemsLayoutProperty = new dependencyObservable.Property(LAYOUT, REPEATER, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemsLayoutPropertyPropertyChanged));
return Repeater;
}(viewModule.CustomLayoutView);
exports.Repeater = Repeater;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(255);
var utils = __webpack_require__(22);
var enums = __webpack_require__(24);
global.moduleMerge(common, exports);
common.orientationProperty.metadata.onValueChanged = function scrollViewOrientationChanged(data) {
data.object._onOrientationChanged(data.oldValue, data.newValue);
};
var ScrollView = function(_super) {
__extends(ScrollView, _super);
function ScrollView() {
_super.apply(this, arguments);
this._androidViewId = -1;
}
Object.defineProperty(ScrollView.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "_nativeView", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "horizontalOffset", {
get: function() {
if (!this._android) {
return 0;
}
return this._android.getScrollX() / utils.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "verticalOffset", {
get: function() {
if (!this._android) {
return 0;
}
return this._android.getScrollY() / utils.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "scrollableWidth", {
get: function() {
if (!this._android || this.orientation !== enums.Orientation.horizontal) {
return 0;
}
return this._android.getScrollableLength() / utils.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "scrollableHeight", {
get: function() {
if (!this._android || this.orientation !== enums.Orientation.vertical) {
return 0;
}
return this._android.getScrollableLength() / utils.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
ScrollView.prototype.scrollToVerticalOffset = function(value, animated) {
if (this._android && this.orientation === enums.Orientation.vertical) {
value *= utils.layout.getDisplayDensity();
if (animated) {
this._android.smoothScrollTo(0, value);
} else {
this._android.scrollTo(0, value);
}
}
};
ScrollView.prototype.scrollToHorizontalOffset = function(value, animated) {
if (this._android && this.orientation === enums.Orientation.horizontal) {
value *= utils.layout.getDisplayDensity();
if (animated) {
this._android.smoothScrollTo(value, 0);
} else {
this._android.scrollTo(value, 0);
}
}
};
ScrollView.prototype._createUI = function() {
if (this.orientation === enums.Orientation.horizontal) {
this._android = new org.nativescript.widgets.HorizontalScrollView(this._context);
} else {
this._android = new org.nativescript.widgets.VerticalScrollView(this._context);
}
if (this._androidViewId < 0) {
this._androidViewId = android.view.View.generateViewId();
}
this._android.setId(this._androidViewId);
};
ScrollView.prototype._onOrientationChanged = function(oldValue, newValue) {
if (this._android) {
var parent = this.parent;
if (parent) {
parent._removeView(this);
}
if (parent) {
parent._addView(this);
}
}
};
ScrollView.prototype.attachNative = function() {
var that = new WeakRef(this);
this.handler = new android.view.ViewTreeObserver.OnScrollChangedListener({
onScrollChanged: function() {
var rootScrollView = that.get();
if (rootScrollView && rootScrollView.android) {
rootScrollView.notify({
object: rootScrollView,
eventName: ScrollView.scrollEvent,
scrollX: rootScrollView.android.getScrollX() / utils.layout.getDisplayDensity(),
scrollY: rootScrollView.android.getScrollY() / utils.layout.getDisplayDensity()
});
}
}
});
this._android.getViewTreeObserver().addOnScrollChangedListener(this.handler);
};
ScrollView.prototype.dettachNative = function() {
this._android.getViewTreeObserver().removeOnScrollChangedListener(this.handler);
this.handler = null;
};
return ScrollView;
}(common.ScrollView);
exports.ScrollView = ScrollView;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(34);
var proxy = __webpack_require__(53);
var enums = __webpack_require__(24);
var contentView = __webpack_require__(74);
function isValidOrientation(value) {
return value === enums.Orientation.vertical || value === enums.Orientation.horizontal;
}
exports.orientationProperty = new dependencyObservable.Property("orientation", "ScrollView", new proxy.PropertyMetadata(enums.Orientation.vertical, dependencyObservable.PropertyMetadataSettings.AffectsLayout, undefined, isValidOrientation));
var ScrollView = function(_super) {
__extends(ScrollView, _super);
function ScrollView() {
_super.apply(this, arguments);
this._scrollChangeCount = 0;
}
Object.defineProperty(ScrollView.prototype, "orientation", {
get: function() {
return this._getValue(exports.orientationProperty);
},
set: function(value) {
this._setValue(exports.orientationProperty, value);
},
enumerable: true,
configurable: true
});
ScrollView.prototype.addEventListener = function(arg, callback, thisArg) {
_super.prototype.addEventListener.call(this, arg, callback, thisArg);
if (arg === ScrollView.scrollEvent) {
this._scrollChangeCount++;
this.attach();
}
};
ScrollView.prototype.removeEventListener = function(arg, callback, thisArg) {
_super.prototype.addEventListener.call(this, arg, callback, thisArg);
if (arg === ScrollView.scrollEvent) {
this._scrollChangeCount--;
this.dettach();
}
};
ScrollView.prototype.onLoaded = function() {
_super.prototype.onLoaded.call(this);
this.attach();
};
ScrollView.prototype.onUnloaded = function() {
_super.prototype.onUnloaded.call(this);
this.dettach();
};
ScrollView.prototype.attach = function() {
if (this._scrollChangeCount > 0 && this.isLoaded) {
this.attachNative();
}
};
ScrollView.prototype.dettach = function() {
if (this._scrollChangeCount === 0 && this.isLoaded) {
this.dettachNative();
}
};
ScrollView.prototype.attachNative = function() {};
ScrollView.prototype.dettachNative = function() {};
Object.defineProperty(ScrollView.prototype, "horizontalOffset", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "verticalOffset", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "scrollableWidth", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "scrollableHeight", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
ScrollView.prototype.scrollToVerticalOffset = function(value, animated) {};
ScrollView.prototype.scrollToHorizontalOffset = function(value, animated) {};
ScrollView.scrollEvent = "scroll";
return ScrollView;
}(contentView.ContentView);
exports.ScrollView = ScrollView;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(257);
var color = __webpack_require__(27);
var utils = __webpack_require__(22);
var style = __webpack_require__(15);
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(14);
}
}
var SEARCHTEXT = "searchText";
var QUERY = "query";
var EMPTY = "";
function onTextPropertyChanged(data) {
var bar = data.object;
if (!bar.android) {
return;
}
bar.android.setQuery(data.newValue, false);
}
common.SearchBar.textProperty.metadata.onSetNativeValue = onTextPropertyChanged;
function onTextFieldBackgroundColorPropertyChanged(data) {
var bar = data.object;
if (!bar.android) {
return;
}
if (data.newValue instanceof color.Color) {
_changeSearchViewBackgroundColor(bar.android, data.newValue.android);
}
}
common.SearchBar.textFieldBackgroundColorProperty.metadata.onSetNativeValue = onTextFieldBackgroundColorPropertyChanged;
function onTextFieldHintColorPropertyChanged(data) {
var bar = data.object;
if (!bar.android) {
return;
}
if (data.newValue instanceof color.Color) {
_changeSearchViewHintColor(bar.android, data.newValue.android);
}
}
common.SearchBar.textFieldHintColorProperty.metadata.onSetNativeValue = onTextFieldHintColorPropertyChanged;
function onHintPropertyChanged(data) {
var bar = data.object;
if (!bar.android) {
return;
}
var newValue = data.newValue;
ensureTypes();
if (types.isString(newValue)) {
bar.android.setQueryHint(newValue);
}
}
common.SearchBar.hintProperty.metadata.onSetNativeValue = onHintPropertyChanged;
function getTextView(bar) {
if (bar) {
var id = bar.getContext().getResources().getIdentifier("android:id/search_src_text", null, null);
if (id) {
return bar.findViewById(id);
}
}
return undefined;
}
function _changeSearchViewBackgroundColor(bar, color) {
var textView = getTextView(bar);
if (textView) {
textView.setBackgroundColor(color);
}
}
function _changeSearchViewHintColor(bar, color) {
var textView = getTextView(bar);
if (textView) {
textView.setHintTextColor(color);
}
}
global.moduleMerge(common, exports);
var SearchBar = function(_super) {
__extends(SearchBar, _super);
function SearchBar() {
_super.apply(this, arguments);
}
SearchBar.prototype.dismissSoftInput = function() {
utils.ad.dismissSoftInput(this._nativeView);
};
SearchBar.prototype.focus = function() {
var result = _super.prototype.focus.call(this);
if (result) {
utils.ad.showSoftInput(this._nativeView);
}
return result;
};
SearchBar.prototype._createUI = function() {
this._android = new android.widget.SearchView(this._context);
this._android.setIconified(false);
var that = new WeakRef(this);
this._android.setOnQueryTextListener(new android.widget.SearchView.OnQueryTextListener({
get owner() {
return that.get();
},
onQueryTextChange: function(newText) {
if (this.owner) {
this.owner._onPropertyChangedFromNative(common.SearchBar.textProperty, newText);
if (newText === EMPTY && this[SEARCHTEXT] !== newText) {
this.owner._emit(common.SearchBar.clearEvent);
}
this[SEARCHTEXT] = newText;
}
return true;
},
onQueryTextSubmit: function(query) {
if (this.owner) {
if (query !== EMPTY && this[QUERY] !== query) {
this.owner._emit(common.SearchBar.submitEvent);
}
this[QUERY] = query;
}
return true;
}
}));
this._android.setOnCloseListener(new android.widget.SearchView.OnCloseListener({
get owner() {
return that.get();
},
onClose: function() {
if (this.owner) {
this.owner._emit(common.SearchBar.clearEvent);
}
return true;
}
}));
if (this.textFieldBackgroundColor instanceof color.Color) {
_changeSearchViewBackgroundColor(this._android, this.textFieldBackgroundColor.android);
}
if (this.textFieldHintColor instanceof color.Color) {
_changeSearchViewHintColor(this._android, this.textFieldHintColor.android);
}
};
Object.defineProperty(SearchBar.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
return SearchBar;
}(common.SearchBar);
exports.SearchBar = SearchBar;
var SearchBarStyler = function() {
function SearchBarStyler() {}
SearchBarStyler.getBackgroundColorProperty = function(v) {
var bar = v._nativeView;
return bar.getDrawingCacheBackgroundColor();
};
SearchBarStyler.setBackgroundColorProperty = function(v, newValue) {
var bar = v._nativeView;
bar.setBackgroundColor(newValue);
SearchBarStyler._changeSearchViewPlateBackgroundColor(bar, newValue);
};
SearchBarStyler.resetBackgroundColorProperty = function(v, nativeValue) {
var bar = v._nativeView;
bar.setBackgroundColor(nativeValue);
SearchBarStyler._changeSearchViewPlateBackgroundColor(bar, nativeValue);
};
SearchBarStyler.getColorProperty = function(v) {
var bar = v._nativeView;
var textView = SearchBarStyler._getSearchViewTextView(bar);
if (textView) {
return textView.getCurrentTextColor();
}
return undefined;
};
SearchBarStyler.setColorProperty = function(v, newValue) {
var bar = v._nativeView;
SearchBarStyler._changeSearchViewTextColor(bar, newValue);
};
SearchBarStyler.resetColorProperty = function(v, nativeValue) {
var bar = v._nativeView;
SearchBarStyler._changeSearchViewTextColor(bar, nativeValue);
};
SearchBarStyler.setFontInternalProperty = function(v, newValue, nativeValue) {
var bar = v.android;
var textView = SearchBarStyler._getSearchViewTextView(bar);
var fontValue = newValue;
var typeface = fontValue.getAndroidTypeface();
if (typeface) {
textView.setTypeface(typeface);
} else {
textView.setTypeface(nativeValue.typeface);
}
if (fontValue.fontSize) {
textView.setTextSize(fontValue.fontSize);
} else {
textView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
};
SearchBarStyler.resetFontInternalProperty = function(v, nativeValue) {
var bar = v.android;
var textView = SearchBarStyler._getSearchViewTextView(bar);
textView.setTypeface(nativeValue.typeface);
textView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
};
SearchBarStyler.getNativeFontInternalValue = function(v) {
var bar = v.android;
var textView = SearchBarStyler._getSearchViewTextView(bar);
return {
typeface: textView.getTypeface(),
size: textView.getTextSize()
};
};
SearchBarStyler.registerHandlers = function() {
style.registerHandler(style.backgroundColorProperty, new style.StylePropertyChangedHandler(SearchBarStyler.setBackgroundColorProperty, SearchBarStyler.resetBackgroundColorProperty, SearchBarStyler.getBackgroundColorProperty), "SearchBar");
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(SearchBarStyler.setColorProperty, SearchBarStyler.resetColorProperty, SearchBarStyler.getColorProperty), "SearchBar");
style.registerHandler(style.fontInternalProperty, new style.StylePropertyChangedHandler(SearchBarStyler.setFontInternalProperty, SearchBarStyler.resetFontInternalProperty, SearchBarStyler.getNativeFontInternalValue), "SearchBar");
};
SearchBarStyler._getSearchViewTextView = function(bar) {
var id = bar.getContext().getResources().getIdentifier("android:id/search_src_text", null, null);
return bar.findViewById(id);
};
SearchBarStyler._changeSearchViewTextColor = function(bar, color) {
var textView = SearchBarStyler._getSearchViewTextView(bar);
if (textView) {
textView.setTextColor(color);
}
};
SearchBarStyler._changeSearchViewPlateBackgroundColor = function(bar, color) {
var id = bar.getContext().getResources().getIdentifier("android:id/search_plate", null, null);
var textView = bar.findViewById(id);
if (textView) {
textView.setBackgroundColor(color);
}
};
return SearchBarStyler;
}();
exports.SearchBarStyler = SearchBarStyler;
SearchBarStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var dependencyObservable = __webpack_require__(34);
var proxy = __webpack_require__(53);
var color = __webpack_require__(27);
var SearchBar = function(_super) {
__extends(SearchBar, _super);
function SearchBar() {
_super.apply(this, arguments);
}
Object.defineProperty(SearchBar.prototype, "text", {
get: function() {
return this._getValue(SearchBar.textProperty);
},
set: function(value) {
this._setValue(SearchBar.textProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(SearchBar.prototype, "hint", {
get: function() {
return this._getValue(SearchBar.hintProperty);
},
set: function(value) {
this._setValue(SearchBar.hintProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(SearchBar.prototype, "textFieldBackgroundColor", {
get: function() {
return this._getValue(SearchBar.textFieldBackgroundColorProperty);
},
set: function(value) {
this._setValue(SearchBar.textFieldBackgroundColorProperty, value instanceof color.Color ? value : new color.Color(value));
},
enumerable: true,
configurable: true
});
Object.defineProperty(SearchBar.prototype, "textFieldHintColor", {
get: function() {
return this._getValue(SearchBar.textFieldHintColorProperty);
},
set: function(value) {
this._setValue(SearchBar.textFieldHintColorProperty, value instanceof color.Color ? value : new color.Color(value));
},
enumerable: true,
configurable: true
});
SearchBar.prototype.dismissSoftInput = function() {};
SearchBar.submitEvent = "submit";
SearchBar.clearEvent = "clear";
SearchBar.textFieldBackgroundColorProperty = new dependencyObservable.Property("textFieldBackgroundColor", "SearchBar", new proxy.PropertyMetadata(undefined));
SearchBar.textFieldHintColorProperty = new dependencyObservable.Property("textFieldHintColor", "SearchBar", new proxy.PropertyMetadata(undefined));
SearchBar.hintProperty = new dependencyObservable.Property("hint", "SearchBar", new proxy.PropertyMetadata(""));
SearchBar.textProperty = new dependencyObservable.Property("text", "SearchBar", new proxy.PropertyMetadata("", dependencyObservable.PropertyMetadataSettings.AffectsLayout));
return SearchBar;
}(view.View);
exports.SearchBar = SearchBar;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(259);
var types = __webpack_require__(14);
var style = __webpack_require__(15);
var R_ID_TABS = 16908307;
var R_ID_TABCONTENT = 16908305;
var R_ATTR_STATE_SELECTED = 16842913;
global.moduleMerge(common, exports);
function onSelectedIndexPropertyChanged(data) {
var view = data.object;
if (!view.android || !view.items) {
return;
}
var index = data.newValue;
if (types.isNumber(index)) {
if (index >= 0 && index <= view.items.length - 1) {
view.android.setCurrentTab(index);
view.notify({
eventName: SegmentedBar.selectedIndexChangedEvent,
object: view,
oldIndex: data.oldValue,
newIndex: data.newValue
});
} else {
view.selectedIndex = undefined;
throw new Error("selectedIndex should be between [0, " + (view.items.length - 1) + "]");
}
}
}
common.SegmentedBar.selectedIndexProperty.metadata.onSetNativeValue = onSelectedIndexPropertyChanged;
function onItemsPropertyChanged(data) {
var view = data.object;
if (!view.android) {
return;
}
var oldItems = data.oldValue;
if (oldItems && oldItems.length) {
for (var i = 0; i < oldItems.length; i++) {
oldItems[i]._parent = null;
}
}
view.android.clearAllTabs();
var newItems = data.newValue;
view._adjustSelectedIndex(newItems);
if (newItems && newItems.length) {
for (var i = 0; i < newItems.length; i++) {
view.insertTab(newItems[i], i);
}
if (types.isNumber(view.selectedIndex) && view.android.getCurrentTab() !== view.selectedIndex) {
view.android.setCurrentTab(view.selectedIndex);
}
view.android.setOnTabChangedListener(null);
view.android.setOnTabChangedListener(view._listener);
var tabHost = view.android;
var tabIndex;
if (view.selectedBackgroundColor) {
ensureSegmentedBarColorDrawableClass();
for (tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var vg = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var stateDrawable = new android.graphics.drawable.StateListDrawable();
var arr = Array.create("int", 1);
arr[0] = R_ATTR_STATE_SELECTED;
var colorDrawable = new SegmentedBarColorDrawableClass(view.selectedBackgroundColor.android);
stateDrawable.addState(arr, colorDrawable);
stateDrawable.setBounds(0, 15, vg.getRight(), vg.getBottom());
vg.setBackgroundDrawable(stateDrawable);
}
}
for (tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var tabChild = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var t = tabChild.getChildAt(1);
if (view.color) {
t.setTextColor(view.color.android);
}
t.setMaxLines(1);
t.setEllipsize(android.text.TextUtils.TruncateAt.END);
}
}
}
common.SegmentedBar.itemsProperty.metadata.onSetNativeValue = onItemsPropertyChanged;
var SegmentedBarColorDrawableClass;
function ensureSegmentedBarColorDrawableClass() {
if (SegmentedBarColorDrawableClass) {
return;
}
var SegmentedBarColorDrawable = function(_super) {
__extends(SegmentedBarColorDrawable, _super);
function SegmentedBarColorDrawable(arg) {
_super.call(this, arg);
return global.__native(this);
}
SegmentedBarColorDrawable.prototype.draw = function(canvas) {
var p = new android.graphics.Paint();
p.setColor(this.getColor());
p.setStyle(android.graphics.Paint.Style.FILL);
canvas.drawRect(0, this.getBounds().height() - 15, this.getBounds().width(), this.getBounds().height(), p);
};
return SegmentedBarColorDrawable;
}(android.graphics.drawable.ColorDrawable);
SegmentedBarColorDrawableClass = SegmentedBarColorDrawable;
}
var SegmentedBarItem = function(_super) {
__extends(SegmentedBarItem, _super);
function SegmentedBarItem() {
_super.apply(this, arguments);
}
SegmentedBarItem.prototype._update = function() {
if (this._parent && this._parent.android) {
var tabIndex = this._parent.items.indexOf(this);
var titleTextViewId = 16908310;
var titleTextView = this._parent.android.getTabWidget().getChildAt(tabIndex).findViewById(titleTextViewId);
titleTextView.setText(this.title || "");
}
};
return SegmentedBarItem;
}(common.SegmentedBarItem);
exports.SegmentedBarItem = SegmentedBarItem;
var SegmentedBar = function(_super) {
__extends(SegmentedBar, _super);
function SegmentedBar() {
_super.apply(this, arguments);
}
SegmentedBar.prototype._createUI = function() {
ensureTabHostClass();
this._android = new TabHostClass(this._context, null);
if (types.isNumber(this.selectedIndex) && this._android.getCurrentTab() !== this.selectedIndex) {
this._android.setCurrentTab(this.selectedIndex);
}
var that = new WeakRef(this);
this._listener = new android.widget.TabHost.OnTabChangeListener({
onTabChanged: function(id) {
var bar = that.get();
if (bar) {
bar.selectedIndex = parseInt(id);
}
}
});
var tabHostLayout = new android.widget.LinearLayout(this._context);
tabHostLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
var tabWidget = new android.widget.TabWidget(this._context);
tabWidget.setId(R_ID_TABS);
tabHostLayout.addView(tabWidget);
var frame = new android.widget.FrameLayout(this._context);
frame.setId(R_ID_TABCONTENT);
frame.setVisibility(android.view.View.GONE);
tabHostLayout.addView(frame);
this._android.addView(tabHostLayout);
this._android.setup();
};
Object.defineProperty(SegmentedBar.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
SegmentedBar.prototype.insertTab = function(tabItem, index) {
_super.prototype.insertTab.call(this, tabItem, index);
tabItem._parent = this;
var tab = this.android.newTabSpec(this.getValidIndex(index) + "");
tab.setIndicator(tabItem.title || "");
var that = this;
tab.setContent(new android.widget.TabHost.TabContentFactory({
createTabContent: function(tag) {
var tv = new android.widget.TextView(that._context);
tv.setVisibility(android.view.View.GONE);
return tv;
}
}));
this.android.addTab(tab);
};
return SegmentedBar;
}(common.SegmentedBar);
exports.SegmentedBar = SegmentedBar;
var TabHostClass;
function ensureTabHostClass() {
if (TabHostClass) {
return;
}
var OurTabHost = function(_super) {
__extends(OurTabHost, _super);
function OurTabHost(context, attrs) {
_super.call(this, context, attrs);
return global.__native(this);
}
OurTabHost.prototype.onAttachedToWindow = function() {};
return OurTabHost;
}(android.widget.TabHost);
TabHostClass = OurTabHost;
}
var SegmentedBarStyler = function() {
function SegmentedBarStyler() {}
SegmentedBarStyler.setColorProperty = function(v, newValue) {
var tabHost = v._nativeView;
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var tab = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var t = tab.getChildAt(1);
t.setTextColor(newValue);
}
};
SegmentedBarStyler.resetColorProperty = function(v, nativeValue) {
var tabHost = v._nativeView;
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var tab = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var t = tab.getChildAt(1);
t.setTextColor(nativeValue);
}
};
SegmentedBarStyler.getColorProperty = function(v) {
var tabHost = v._nativeView;
var textView = new android.widget.TextView(tabHost.getContext());
return textView.getCurrentTextColor();
};
SegmentedBarStyler.setFontInternalProperty = function(v, newValue, nativeValue) {
var tabHost = v._nativeView;
var fontValue = newValue;
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var tab = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var t = tab.getChildAt(1);
var typeface = fontValue.getAndroidTypeface();
if (typeface) {
t.setTypeface(typeface);
} else {
t.setTypeface(nativeValue.typeface);
}
if (fontValue.fontSize) {
t.setTextSize(fontValue.fontSize);
} else {
t.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
}
};
SegmentedBarStyler.resetFontInternalProperty = function(v, nativeValue) {
var tabHost = v._nativeView;
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var tab = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var t = tab.getChildAt(1);
t.setTypeface(nativeValue.typeface);
t.setTextSize(nativeValue.size);
}
};
SegmentedBarStyler.getFontInternalProperty = function(v) {
var tabHost = v._nativeView;
var textView = new android.widget.TextView(tabHost.getContext());
return {
typeface: textView.getTypeface(),
size: textView.getTextSize()
};
};
SegmentedBarStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(SegmentedBarStyler.setColorProperty, SegmentedBarStyler.resetColorProperty, SegmentedBarStyler.getColorProperty), "SegmentedBar");
style.registerHandler(style.fontInternalProperty, new style.StylePropertyChangedHandler(SegmentedBarStyler.setFontInternalProperty, SegmentedBarStyler.resetFontInternalProperty, SegmentedBarStyler.getFontInternalProperty), "SegmentedBar");
};
return SegmentedBarStyler;
}();
exports.SegmentedBarStyler = SegmentedBarStyler;
SegmentedBarStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var proxy = __webpack_require__(53);
var dependencyObservable = __webpack_require__(34);
var color = __webpack_require__(27);
var bindable = __webpack_require__(54);
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(14);
}
}
var knownCollections;
(function(knownCollections) {
knownCollections.items = "items";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
var CHILD_SEGMENTED_BAR_ITEM = "SegmentedBarItem";
var SegmentedBarItem = function(_super) {
__extends(SegmentedBarItem, _super);
function SegmentedBarItem() {
_super.apply(this, arguments);
this._title = "";
}
Object.defineProperty(SegmentedBarItem.prototype, "title", {
get: function() {
return this._title;
},
set: function(value) {
if (this._title !== value) {
this._title = value;
this._update();
}
},
enumerable: true,
configurable: true
});
SegmentedBarItem.prototype._update = function() {};
return SegmentedBarItem;
}(bindable.Bindable);
exports.SegmentedBarItem = SegmentedBarItem;
var SegmentedBar = function(_super) {
__extends(SegmentedBar, _super);
function SegmentedBar() {
_super.apply(this, arguments);
}
SegmentedBar.prototype._addArrayFromBuilder = function(name, value) {
if (name === "items") {
this._setValue(SegmentedBar.itemsProperty, value);
}
};
SegmentedBar.prototype._adjustSelectedIndex = function(items) {
if (this.items) {
if (this.items.length > 0) {
ensureTypes();
if (types.isUndefined(this.selectedIndex) || this.selectedIndex > this.items.length - 1) {
this._setValue(SegmentedBar.selectedIndexProperty, 0);
}
} else {
this._setValue(SegmentedBar.selectedIndexProperty, undefined);
}
} else {
this._setValue(SegmentedBar.selectedIndexProperty, undefined);
}
};
Object.defineProperty(SegmentedBar.prototype, "selectedIndex", {
get: function() {
return this._getValue(SegmentedBar.selectedIndexProperty);
},
set: function(value) {
this._setValue(SegmentedBar.selectedIndexProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(SegmentedBar.prototype, "items", {
get: function() {
return this._getValue(SegmentedBar.itemsProperty);
},
set: function(value) {
this._setValue(SegmentedBar.itemsProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(SegmentedBar.prototype, "selectedBackgroundColor", {
get: function() {
return this._getValue(SegmentedBar.selectedBackgroundColorProperty);
},
set: function(value) {
this._setValue(SegmentedBar.selectedBackgroundColorProperty, value instanceof color.Color ? value : new color.Color(value));
},
enumerable: true,
configurable: true
});
SegmentedBar.prototype._onBindingContextChanged = function(oldValue, newValue) {
_super.prototype._onBindingContextChanged.call(this, oldValue, newValue);
if (this.items && this.items.length > 0) {
var i = 0;
var length = this.items.length;
for (;i < length; i++) {
this.items[i].bindingContext = newValue;
}
}
};
SegmentedBar.prototype._addChildFromBuilder = function(name, value) {
if (name === CHILD_SEGMENTED_BAR_ITEM) {
if (!this.items) {
this.items = new Array();
}
this.items.push(value);
this.insertTab(value);
}
};
SegmentedBar.prototype.insertTab = function(tabItem, index) {};
SegmentedBar.prototype.getValidIndex = function(index) {
ensureTypes();
var idx;
var itemsLength = this.items ? this.items.length : 0;
if (types.isNullOrUndefined(index)) {
idx = itemsLength;
} else {
if (index < 0 || index > itemsLength) {
idx = itemsLength;
} else {
idx = index;
}
}
return idx;
};
SegmentedBar.selectedBackgroundColorProperty = new dependencyObservable.Property("selectedBackgroundColor", "SegmentedBar", new proxy.PropertyMetadata(undefined));
SegmentedBar.selectedIndexProperty = new dependencyObservable.Property("selectedIndex", "SegmentedBar", new proxy.PropertyMetadata(undefined));
SegmentedBar.itemsProperty = new dependencyObservable.Property("items", "SegmentedBar", new proxy.PropertyMetadata(undefined));
SegmentedBar.selectedIndexChangedEvent = "selectedIndexChanged";
return SegmentedBar;
}(view.View);
exports.SegmentedBar = SegmentedBar;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(261);
var style = __webpack_require__(15);
function onValuePropertyChanged(data) {
var slider = data.object;
if (!slider.android) {
return;
}
slider._setNativeValuesSilently(data.newValue - slider.minValue, slider.maxValue - slider.minValue);
}
function onMinValuePropertyChanged(data) {
var slider = data.object;
if (!slider.android) {
return;
}
slider._setNativeValuesSilently(slider.value - data.newValue, slider.maxValue - data.newValue);
}
function onMaxValuePropertyChanged(data) {
var slider = data.object;
if (!slider.android) {
return;
}
slider.android.setMax(data.newValue - slider.minValue);
}
common.Slider.valueProperty.metadata.onSetNativeValue = onValuePropertyChanged;
common.Slider.minValueProperty.metadata.onSetNativeValue = onMinValuePropertyChanged;
common.Slider.maxValueProperty.metadata.onSetNativeValue = onMaxValuePropertyChanged;
global.moduleMerge(common, exports);
var Slider = function(_super) {
__extends(Slider, _super);
function Slider() {
_super.apply(this, arguments);
}
Slider.prototype._createUI = function() {
this._android = new android.widget.SeekBar(this._context);
var that = new WeakRef(this);
this._changeListener = new android.widget.SeekBar.OnSeekBarChangeListener({
onProgressChanged: function(seekBar, progress, fromUser) {
var owner = that.get();
if (owner) {
if (!owner._supressNativeValue) {
var newValue = seekBar.getProgress() + owner.minValue;
owner._onPropertyChangedFromNative(common.Slider.valueProperty, newValue);
}
}
},
onStartTrackingTouch: function(seekBar) {},
onStopTrackingTouch: function(seekBar) {}
});
this._android.setOnSeekBarChangeListener(this._changeListener);
};
Object.defineProperty(Slider.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Slider.prototype._setNativeValuesSilently = function(newValue, newMaxValue) {
if (!this.android) {
return;
}
this._supressNativeValue = true;
try {
this.android.setMax(newMaxValue);
this.android.setProgress(newValue);
} finally {
this._supressNativeValue = false;
}
};
return Slider;
}(common.Slider);
exports.Slider = Slider;
var SliderStyler = function() {
function SliderStyler() {}
SliderStyler.setColorProperty = function(view, newValue) {
var bar = view._nativeView;
bar.getThumb().setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
};
SliderStyler.resetColorProperty = function(view, nativeValue) {
var bar = view._nativeView;
bar.getThumb().clearColorFilter();
};
SliderStyler.setBackgroundAndBorderProperty = function(view, newValue) {
var bar = view._nativeView;
bar.getProgressDrawable().setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
};
SliderStyler.resetBackgroundAndBorderProperty = function(view, nativeValue) {};
SliderStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(SliderStyler.setColorProperty, SliderStyler.resetColorProperty), "Slider");
style.registerHandler(style.backgroundColorProperty, new style.StylePropertyChangedHandler(SliderStyler.setBackgroundAndBorderProperty, SliderStyler.resetBackgroundAndBorderProperty), "Slider");
style.registerHandler(style.borderWidthProperty, style.ignorePropertyHandler, "Slider");
style.registerHandler(style.borderColorProperty, style.ignorePropertyHandler, "Slider");
style.registerHandler(style.borderRadiusProperty, style.ignorePropertyHandler, "Slider");
style.registerHandler(style.backgroundInternalProperty, style.ignorePropertyHandler, "Slider");
};
return SliderStyler;
}();
exports.SliderStyler = SliderStyler;
SliderStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var dependencyObservable = __webpack_require__(34);
var proxy = __webpack_require__(53);
var Slider = function(_super) {
__extends(Slider, _super);
function Slider() {
_super.call(this);
}
Object.defineProperty(Slider.prototype, "value", {
get: function() {
return this._getValue(Slider.valueProperty);
},
set: function(value) {
var newValue = value;
newValue = Math.max(newValue, this.minValue);
newValue = Math.min(newValue, this.maxValue);
this._setValue(Slider.valueProperty, newValue);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Slider.prototype, "minValue", {
get: function() {
return this._getValue(Slider.minValueProperty);
},
set: function(newValue) {
this._setValue(Slider.minValueProperty, newValue);
if (newValue > this.maxValue) {
this._setValue(Slider.maxValueProperty, newValue);
}
if (newValue > this.value) {
this._setValue(Slider.valueProperty, newValue);
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Slider.prototype, "maxValue", {
get: function() {
return this._getValue(Slider.maxValueProperty);
},
set: function(newValue) {
this._setValue(Slider.maxValueProperty, newValue);
if (newValue < this.minValue) {
this._setValue(Slider.minValueProperty, newValue);
}
if (newValue < this.value) {
this._setValue(Slider.valueProperty, newValue);
}
},
enumerable: true,
configurable: true
});
Slider.valueProperty = new dependencyObservable.Property("value", "Slider", new proxy.PropertyMetadata(0));
Slider.minValueProperty = new dependencyObservable.Property("minValue", "Slider", new proxy.PropertyMetadata(0));
Slider.maxValueProperty = new dependencyObservable.Property("maxValue", "Slider", new proxy.PropertyMetadata(100));
return Slider;
}(view.View);
exports.Slider = Slider;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(263);
var style = __webpack_require__(15);
function onCheckedPropertyChanged(data) {
var swtch = data.object;
if (!swtch.android) {
return;
}
swtch.android.setChecked(data.newValue);
}
common.Switch.checkedProperty.metadata.onSetNativeValue = onCheckedPropertyChanged;
global.moduleMerge(common, exports);
var Switch = function(_super) {
__extends(Switch, _super);
function Switch() {
_super.apply(this, arguments);
}
Object.defineProperty(Switch.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Switch.prototype._createUI = function() {
this._android = new android.widget.Switch(this._context);
var that = new WeakRef(this);
this._android.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({
get owner() {
return that.get();
},
onCheckedChanged: function(sender, isChecked) {
if (this.owner) {
this.owner._onPropertyChangedFromNative(common.Switch.checkedProperty, isChecked);
}
}
}));
};
return Switch;
}(common.Switch);
exports.Switch = Switch;
var SwitchStyler = function() {
function SwitchStyler() {}
SwitchStyler.setColorProperty = function(view, newValue) {
var sw = view._nativeView;
var drawable = sw.getThumbDrawable();
if (drawable) {
drawable.setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
}
};
SwitchStyler.resetColorProperty = function(view, nativeValue) {};
SwitchStyler.setBackgroundAndBorderProperty = function(view, newValue) {
var sw = view._nativeView;
var drawable = sw.getTrackDrawable();
if (drawable) {
drawable.setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
}
};
SwitchStyler.resetBackgroundAndBorderProperty = function(view, nativeValue) {};
SwitchStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(SwitchStyler.setColorProperty, SwitchStyler.resetColorProperty), "Switch");
style.registerHandler(style.backgroundColorProperty, new style.StylePropertyChangedHandler(SwitchStyler.setBackgroundAndBorderProperty, SwitchStyler.resetBackgroundAndBorderProperty), "Switch");
style.registerHandler(style.borderWidthProperty, style.ignorePropertyHandler, "Switch");
style.registerHandler(style.borderColorProperty, style.ignorePropertyHandler, "Switch");
style.registerHandler(style.borderRadiusProperty, style.ignorePropertyHandler, "Switch");
style.registerHandler(style.backgroundInternalProperty, style.ignorePropertyHandler, "Switch");
};
return SwitchStyler;
}();
exports.SwitchStyler = SwitchStyler;
SwitchStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var dependencyObservable = __webpack_require__(34);
var proxy = __webpack_require__(53);
var Switch = function(_super) {
__extends(Switch, _super);
function Switch() {
_super.apply(this, arguments);
}
Object.defineProperty(Switch.prototype, "checked", {
get: function() {
return this._getValue(Switch.checkedProperty);
},
set: function(value) {
this._setValue(Switch.checkedProperty, value);
},
enumerable: true,
configurable: true
});
Switch.checkedProperty = new dependencyObservable.Property("checked", "Switch", new proxy.PropertyMetadata(false));
return Switch;
}(view.View);
exports.Switch = Switch;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(265);
var trace = __webpack_require__(30);
var types = __webpack_require__(14);
var utils = __webpack_require__(22);
var color = __webpack_require__(27);
var style = __webpack_require__(15);
var imageSource;
function ensureImageSource() {
if (!imageSource) {
imageSource = __webpack_require__(64);
}
}
var VIEWS_STATES = "_viewStates";
var ACCENT_COLOR = "colorAccent";
var PRIMARY_COLOR = "colorPrimary";
var DEFAULT_ELEVATION = 4;
global.moduleMerge(common, exports);
var TabViewItem = function(_super) {
__extends(TabViewItem, _super);
function TabViewItem() {
_super.apply(this, arguments);
}
TabViewItem.prototype._update = function() {
if (this._parent) {
this._parent._updateTabForItem(this);
}
};
return TabViewItem;
}(common.TabViewItem);
exports.TabViewItem = TabViewItem;
var PagerAdapterClass;
function ensurePagerAdapterClass() {
if (PagerAdapterClass) {
return;
}
var PagerAdapterClassInner = function(_super) {
__extends(PagerAdapterClassInner, _super);
function PagerAdapterClassInner(owner, items) {
_super.call(this);
this.owner = owner;
this.items = items;
return global.__native(this);
}
PagerAdapterClassInner.prototype.getCount = function() {
return this.items ? this.items.length : 0;
};
PagerAdapterClassInner.prototype.getPageTitle = function(index) {
if (index < 0 || index >= this.items.length) {
return "";
}
return this.items[index].title;
};
PagerAdapterClassInner.prototype.instantiateItem = function(container, index) {
trace.write("TabView.PagerAdapter.instantiateItem; container: " + container + "; index: " + index, common.traceCategory);
var item = this.items[index];
if (item.view.parent !== this.owner) {
this.owner._addView(item.view);
}
if (this[VIEWS_STATES]) {
trace.write("TabView.PagerAdapter.instantiateItem; restoreHierarchyState: " + item.view, common.traceCategory);
item.view._nativeView.restoreHierarchyState(this[VIEWS_STATES]);
}
container.addView(item.view._nativeView);
return item.view._nativeView;
};
PagerAdapterClassInner.prototype.destroyItem = function(container, index, _object) {
trace.write("TabView.PagerAdapter.destroyItem; container: " + container + "; index: " + index + "; _object: " + _object, common.traceCategory);
var item = this.items[index];
var nativeView = item.view._nativeView;
if (nativeView.toString() !== _object.toString()) {
throw new Error("Expected " + nativeView.toString() + " to equal " + _object.toString());
}
if (!this[VIEWS_STATES]) {
this[VIEWS_STATES] = new android.util.SparseArray();
}
nativeView.saveHierarchyState(this[VIEWS_STATES]);
container.removeView(nativeView);
if (item.view.parent === this.owner) {
this.owner._removeView(item.view);
}
};
PagerAdapterClassInner.prototype.isViewFromObject = function(view, _object) {
return view === _object;
};
PagerAdapterClassInner.prototype.saveState = function() {
trace.write("TabView.PagerAdapter.saveState", common.traceCategory);
var owner = this.owner;
if (!owner || owner._childrenCount === 0) {
return null;
}
if (!this[VIEWS_STATES]) {
this[VIEWS_STATES] = new android.util.SparseArray();
}
var viewStates = this[VIEWS_STATES];
var childCallback = function(view) {
var nativeView = view._nativeView;
if (nativeView && nativeView.isSaveFromParentEnabled && nativeView.isSaveFromParentEnabled()) {
nativeView.saveHierarchyState(viewStates);
}
return true;
};
owner._eachChildView(childCallback);
var bundle = new android.os.Bundle();
bundle.putSparseParcelableArray(VIEWS_STATES, viewStates);
return bundle;
};
PagerAdapterClassInner.prototype.restoreState = function(state, loader) {
trace.write("TabView.PagerAdapter.restoreState", common.traceCategory);
var bundle = state;
bundle.setClassLoader(loader);
this[VIEWS_STATES] = bundle.getSparseParcelableArray(VIEWS_STATES);
};
return PagerAdapterClassInner;
}(android.support.v4.view.PagerAdapter);
PagerAdapterClass = PagerAdapterClassInner;
}
var PageChangedListenerClass;
function ensurePageChangedListenerClass() {
if (PageChangedListenerClass) {
return;
}
var PageChangedListener = function(_super) {
__extends(PageChangedListener, _super);
function PageChangedListener(owner) {
_super.call(this);
this._owner = owner;
return global.__native(this);
}
PageChangedListener.prototype.onPageSelected = function(position) {
this._owner.selectedIndex = position;
};
return PageChangedListener;
}(android.support.v4.view.ViewPager.SimpleOnPageChangeListener);
PageChangedListenerClass = PageChangedListener;
}
function selectedColorPropertyChanged(data) {
var tabLayout = data.object._getAndroidTabView();
if (tabLayout && data.newValue instanceof color.Color) {
tabLayout.setSelectedIndicatorColors([ data.newValue.android ]);
}
}
common.TabView.selectedColorProperty.metadata.onSetNativeValue = selectedColorPropertyChanged;
function tabsBackgroundColorPropertyChanged(data) {
var tabLayout = data.object._getAndroidTabView();
if (tabLayout && data.newValue instanceof color.Color) {
tabLayout.setBackgroundColor(data.newValue.android);
}
}
common.TabView.tabsBackgroundColorProperty.metadata.onSetNativeValue = tabsBackgroundColorPropertyChanged;
var TabView = function(_super) {
__extends(TabView, _super);
function TabView() {
_super.apply(this, arguments);
this._androidViewId = -1;
}
Object.defineProperty(TabView.prototype, "android", {
get: function() {
return this._grid;
},
enumerable: true,
configurable: true
});
TabView.prototype._createUI = function() {
trace.write("TabView._createUI(" + this + ");", common.traceCategory);
this._grid = new org.nativescript.widgets.GridLayout(this._context);
this._grid.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.auto));
this._grid.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.star));
this._tabLayout = new org.nativescript.widgets.TabLayout(this._context);
this._grid.addView(this._tabLayout);
this.setElevation();
var accentColor = utils.ad.resources.getPalleteColor(ACCENT_COLOR, this._context);
if (accentColor) {
this._tabLayout.setSelectedIndicatorColors([ accentColor ]);
}
var primaryColor = utils.ad.resources.getPalleteColor(PRIMARY_COLOR, this._context);
if (primaryColor) {
this._tabLayout.setBackgroundColor(primaryColor);
}
this._viewPager = new android.support.v4.view.ViewPager(this._context);
var lp = new org.nativescript.widgets.CommonLayoutParams();
lp.row = 1;
this._viewPager.setLayoutParams(lp);
this._grid.addView(this._viewPager);
if (this._androidViewId < 0) {
this._androidViewId = android.view.View.generateViewId();
}
this._grid.setId(this._androidViewId);
ensurePageChangedListenerClass();
this._pageChagedListener = new PageChangedListenerClass(this);
this._viewPager.addOnPageChangeListener(this._pageChagedListener);
};
TabView.prototype.setElevation = function() {
var compat = android.support.v4.view.ViewCompat;
if (compat.setElevation) {
var val = DEFAULT_ELEVATION * utils.layout.getDisplayDensity();
compat.setElevation(this._grid, val);
compat.setElevation(this._tabLayout, val);
}
};
TabView.prototype._onItemsPropertyChangedSetNativeValue = function(data) {
var _this = this;
trace.write("TabView._onItemsPropertyChangedSetNativeValue(" + data.oldValue + " ---> " + data.newValue + ");", common.traceCategory);
if (data.oldValue) {
var oldItems = data.oldValue;
oldItems.forEach(function(oldItem) {
oldItem._parent = null;
});
this._viewPager.setAdapter(null);
this._pagerAdapter = null;
this._tabLayout.setItems(null, null);
}
if (data.newValue) {
var items = data.newValue;
var tabItems = new Array();
items.forEach(function(item, idx, arr) {
if (types.isNullOrUndefined(item.view)) {
throw new Error("View of TabViewItem at index " + idx + " is " + item.view);
}
item._parent = _this;
if (item.view.parent !== _this) {
_this._addView(item.view, idx);
}
tabItems.push(_this.createTabItem(item));
});
ensurePagerAdapterClass();
this._pagerAdapter = new PagerAdapterClass(this, data.newValue);
this._viewPager.setAdapter(this._pagerAdapter);
this._tabLayout.setItems(tabItems, this._viewPager);
}
this._updateSelectedIndexOnItemsPropertyChanged(data.newValue);
};
TabView.prototype._updateTabForItem = function(item) {
if (this.items && this.items.length > 0) {
var index = this.items.indexOf(item);
if (index >= 0) {
this._tabLayout.updateItemAt(index, this.createTabItem(item));
}
}
};
TabView.prototype._onSelectedIndexPropertyChangedSetNativeValue = function(data) {
trace.write("TabView._onSelectedIndexPropertyChangedSetNativeValue(" + data.oldValue + " ---> " + data.newValue + ");", common.traceCategory);
_super.prototype._onSelectedIndexPropertyChangedSetNativeValue.call(this, data);
var index = data.newValue;
if (!types.isNullOrUndefined(index)) {
var viewPagerSelectedIndex = this._viewPager.getCurrentItem();
if (viewPagerSelectedIndex !== index) {
trace.write("TabView this._viewPager.setCurrentItem(" + index + ", true);", common.traceCategory);
this._viewPager.setCurrentItem(index, true);
}
}
var args = {
eventName: TabView.selectedIndexChangedEvent,
object: this,
oldIndex: data.oldValue,
newIndex: data.newValue
};
this.notify(args);
};
TabView.prototype.createTabItem = function(item) {
var result = new org.nativescript.widgets.TabItemSpec();
result.title = item.title;
if (item.iconSource) {
if (item.iconSource.indexOf(utils.RESOURCE_PREFIX) === 0) {
result.iconId = utils.ad.resources.getDrawableId(item.iconSource.substr(utils.RESOURCE_PREFIX.length));
} else {
ensureImageSource();
var is = imageSource.fromFileOrResource(item.iconSource);
if (is) {
result.iconDrawable = new android.graphics.drawable.BitmapDrawable(is.android);
}
}
}
return result;
};
TabView.prototype._getAndroidTabView = function() {
return this._tabLayout;
};
return TabView;
}(common.TabView);
exports.TabView = TabView;
var TabViewStyler = function() {
function TabViewStyler() {}
TabViewStyler.setColorProperty = function(v, newValue) {
var tab = v;
if (tab.items && tab.items.length > 0) {
var tabLayout = tab._getAndroidTabView();
for (var i = 0; i < tab.items.length; i++) {
tabLayout.getTextViewForItemAt(i).setTextColor(newValue);
}
}
};
TabViewStyler.resetColorProperty = function(v, nativeValue) {
if (types.isNullOrUndefined(nativeValue)) {
return;
}
var tab = v;
if (tab.items && tab.items.length > 0) {
var tabLayout = tab._getAndroidTabView();
for (var i = 0; i < tab.items.length; i++) {
tabLayout.getTextViewForItemAt(i).setTextColor(nativeValue);
}
}
};
TabViewStyler.getColorProperty = function(v) {
var tab = v;
var tv = tab._getAndroidTabView().getTextViewForItemAt(0);
if (tv) {
return tv.getTextColors().getDefaultColor();
} else {
return null;
}
};
TabViewStyler.setFontInternalProperty = function(v, newValue, nativeValue) {
var tab = v;
var fontValue = newValue;
var typeface = fontValue.getAndroidTypeface();
if (tab.items && tab.items.length > 0) {
var tabLayout = tab._getAndroidTabView();
for (var i = 0; i < tab.items.length; i++) {
var tv = tabLayout.getTextViewForItemAt(i);
if (typeface) {
tv.setTypeface(typeface);
} else {
tv.setTypeface(nativeValue.typeface);
}
if (fontValue.fontSize) {
tv.setTextSize(fontValue.fontSize);
} else {
tv.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
}
}
};
TabViewStyler.resetFontInternalProperty = function(v, nativeValue) {
var tab = v;
if (tab.items && tab.items.length > 0) {
var tabLayout = tab._getAndroidTabView();
for (var i = 0; i < tab.items.length; i++) {
var tv = tabLayout.getTextViewForItemAt(i);
tv.setTypeface(nativeValue.typeface);
tv.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
}
};
TabViewStyler.getNativeFontInternalValue = function(v) {
var tab = v;
var tv = tab._getAndroidTabView().getTextViewForItemAt(0);
if (tv) {
return {
typeface: tv.getTypeface(),
size: tv.getTextSize()
};
} else {
return null;
}
};
TabViewStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(TabViewStyler.setColorProperty, TabViewStyler.resetColorProperty, TabViewStyler.getColorProperty), "TabView");
style.registerHandler(style.fontInternalProperty, new style.StylePropertyChangedHandler(TabViewStyler.setFontInternalProperty, TabViewStyler.resetFontInternalProperty, TabViewStyler.getNativeFontInternalValue), "TabView");
};
return TabViewStyler;
}();
exports.TabViewStyler = TabViewStyler;
TabViewStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var dependencyObservable = __webpack_require__(34);
var proxy = __webpack_require__(53);
var types = __webpack_require__(14);
var trace = __webpack_require__(30);
var bindable = __webpack_require__(54);
var color = __webpack_require__(27);
exports.traceCategory = "TabView";
var TabViewItem = function(_super) {
__extends(TabViewItem, _super);
function TabViewItem() {
_super.apply(this, arguments);
this._title = "";
}
Object.defineProperty(TabViewItem.prototype, "title", {
get: function() {
return this._title;
},
set: function(value) {
if (this._title !== value) {
this._title = value;
this._update();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewItem.prototype, "view", {
get: function() {
return this._view;
},
set: function(value) {
if (this._view !== value) {
if (this._view) {
throw new Error("Changing the view of an already loaded TabViewItem is not currently supported.");
}
this._view = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewItem.prototype, "iconSource", {
get: function() {
return this._iconSource;
},
set: function(value) {
if (this._iconSource !== value) {
this._iconSource = value;
this._update();
}
},
enumerable: true,
configurable: true
});
TabViewItem.prototype._update = function() {};
return TabViewItem;
}(bindable.Bindable);
exports.TabViewItem = TabViewItem;
var TAB_VIEW = "TabView";
var ITEMS = "items";
var SELECTED_INDEX = "selectedIndex";
var SELECTED_COLOR = "selectedColor";
var TABS_BACKGROUND_COLOR = "tabsBackgroundColor";
var knownCollections;
(function(knownCollections) {
knownCollections.items = "items";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
var itemsProperty = new dependencyObservable.Property(ITEMS, TAB_VIEW, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout));
var selectedIndexProperty = new dependencyObservable.Property(SELECTED_INDEX, TAB_VIEW, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout));
var selectedColorProperty = new dependencyObservable.Property(SELECTED_COLOR, TAB_VIEW, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None));
var tabsBackgroundColorProperty = new dependencyObservable.Property(TABS_BACKGROUND_COLOR, TAB_VIEW, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None));
selectedIndexProperty.metadata.onSetNativeValue = function(data) {
var tabView = data.object;
tabView._onSelectedIndexPropertyChangedSetNativeValue(data);
};
itemsProperty.metadata.onSetNativeValue = function(data) {
var tabView = data.object;
tabView._onItemsPropertyChangedSetNativeValue(data);
};
var TabView = function(_super) {
__extends(TabView, _super);
function TabView() {
_super.apply(this, arguments);
}
TabView.prototype._addArrayFromBuilder = function(name, value) {
if (name === ITEMS) {
this.items = value;
}
};
Object.defineProperty(TabView.prototype, "items", {
get: function() {
return this._getValue(TabView.itemsProperty);
},
set: function(value) {
this._setValue(TabView.itemsProperty, value);
},
enumerable: true,
configurable: true
});
TabView.prototype._onItemsPropertyChangedSetNativeValue = function(data) {
trace.write("TabView.__onItemsPropertyChangedSetNativeValue(" + data.oldValue + " -> " + data.newValue + ");", exports.traceCategory);
if (data.oldValue) {
this._removeTabs(data.oldValue);
}
if (data.newValue) {
this._addTabs(data.newValue);
}
this._updateSelectedIndexOnItemsPropertyChanged(data.newValue);
};
TabView.prototype._updateSelectedIndexOnItemsPropertyChanged = function(newItems) {
trace.write("TabView._updateSelectedIndexOnItemsPropertyChanged(" + newItems + ");", exports.traceCategory);
var newItemsCount = 0;
if (newItems) {
newItemsCount = newItems.length;
}
if (newItemsCount === 0) {
this.selectedIndex = undefined;
} else if (types.isUndefined(this.selectedIndex) || this.selectedIndex >= newItemsCount) {
this.selectedIndex = 0;
}
};
TabView.prototype._removeTabs = function(oldItems) {
var i;
var length = oldItems.length;
var oldItem;
for (i = 0; i < length; i++) {
oldItem = oldItems[i];
if (!oldItem) {
throw new Error("TabViewItem at index " + i + " is undefined.");
}
if (!oldItem.view) {
throw new Error("TabViewItem at index " + i + " does not have a view.");
}
this._removeView(oldItem.view);
}
};
TabView.prototype._addTabs = function(newItems) {
var i;
var length = newItems.length;
var newItem;
for (i = 0; i < length; i++) {
newItem = newItems[i];
if (!newItem) {
throw new Error("TabViewItem at index " + i + " is undefined.");
}
if (!newItem.view) {
throw new Error("TabViewItem at index " + i + " does not have a view.");
}
this._addView(newItem.view, i);
}
};
Object.defineProperty(TabView.prototype, "selectedIndex", {
get: function() {
return this._getValue(TabView.selectedIndexProperty);
},
set: function(value) {
this._setValue(TabView.selectedIndexProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "selectedColor", {
get: function() {
return this._getValue(TabView.selectedColorProperty);
},
set: function(value) {
this._setValue(TabView.selectedColorProperty, value instanceof color.Color ? value : new color.Color(value));
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "tabsBackgroundColor", {
get: function() {
return this._getValue(TabView.tabsBackgroundColorProperty);
},
set: function(value) {
this._setValue(TabView.tabsBackgroundColorProperty, value instanceof color.Color ? value : new color.Color(value));
},
enumerable: true,
configurable: true
});
TabView.prototype._onSelectedIndexPropertyChangedSetNativeValue = function(data) {
var index = this.selectedIndex;
if (types.isUndefined(index)) {
return;
}
if (types.isDefined(this.items)) {
if (index < 0 || index >= this.items.length) {
this.selectedIndex = undefined;
throw new Error("SelectedIndex should be between [0, items.length)");
}
}
};
Object.defineProperty(TabView.prototype, "_selectedView", {
get: function() {
var _items = this.items;
var _selectedIndex = this.selectedIndex;
if (!_items) {
return undefined;
}
if (_items.length === 0) {
return undefined;
}
if (_selectedIndex === undefined) {
return undefined;
}
return _items[_selectedIndex].view;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "_childrenCount", {
get: function() {
if (this.items) {
return this.items.length;
}
return 0;
},
enumerable: true,
configurable: true
});
TabView.prototype._eachChildView = function(callback) {
var _items = this.items;
if (!_items) {
return;
}
var i;
var length = _items.length;
var item;
var retVal;
for (i = 0; i < length; i++) {
item = _items[i];
if (item.view) {
retVal = callback(item.view);
if (retVal === false) {
break;
}
}
}
};
TabView.prototype._onBindingContextChanged = function(oldValue, newValue) {
_super.prototype._onBindingContextChanged.call(this, oldValue, newValue);
if (this.items && this.items.length > 0) {
var i = 0;
var length = this.items.length;
for (;i < length; i++) {
this.items[i].bindingContext = newValue;
}
}
};
TabView.prototype._getAndroidTabView = function() {
return undefined;
};
TabView.prototype._updateIOSTabBarColorsAndFonts = function() {};
TabView.itemsProperty = itemsProperty;
TabView.selectedIndexProperty = selectedIndexProperty;
TabView.selectedColorProperty = selectedColorProperty;
TabView.tabsBackgroundColorProperty = tabsBackgroundColorProperty;
TabView.selectedIndexChangedEvent = "selectedIndexChanged";
return TabView;
}(view.View);
exports.TabView = TabView;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(267);
global.moduleMerge(common, exports);
var TextView = function(_super) {
__extends(TextView, _super);
function TextView() {
_super.apply(this, arguments);
}
TextView.prototype._configureEditText = function() {
this.android.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | android.text.InputType.TYPE_TEXT_FLAG_MULTI_LINE);
this.android.setGravity(android.view.Gravity.TOP | android.view.Gravity.LEFT);
};
return TextView;
}(common.TextView);
exports.TextView = TextView;
}, function(module, exports, __webpack_require__) {
var textBase = __webpack_require__(96);
var editableTextBase = __webpack_require__(98);
global.moduleMerge(textBase, exports);
var TextView = function(_super) {
__extends(TextView, _super);
function TextView() {
_super.apply(this, arguments);
}
return TextView;
}(editableTextBase.EditableTextBase);
exports.TextView = TextView;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(269);
global.moduleMerge(common, exports);
var TimePicker = function(_super) {
__extends(TimePicker, _super);
function TimePicker() {
_super.apply(this, arguments);
}
Object.defineProperty(TimePicker.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
TimePicker.prototype._createUI = function() {
this._android = new android.widget.TimePicker(this._context);
var that = new WeakRef(this);
this._listener = new android.widget.TimePicker.OnTimeChangedListener({
get owner() {
return that.get();
},
onTimeChanged: function(picker, hour, minute) {
if (this.owner) {
var validTime = common.getValidTime(this.owner, hour, minute);
this.owner._setNativeValueSilently(validTime.hour, validTime.minute);
this.owner._onPropertyChangedFromNative(common.TimePicker.timeProperty, new Date(0, 0, 0, validTime.hour, validTime.minute));
}
}
});
this._android.setOnTimeChangedListener(this._listener);
var c = java.util.Calendar.getInstance();
if (this.hour === common.TimePicker.hourProperty.metadata.defaultValue) {
this.hour = c.get(java.util.Calendar.HOUR_OF_DAY);
}
if (this.minute === common.TimePicker.minuteProperty.metadata.defaultValue) {
this.minute = c.get(java.util.Calendar.MINUTE);
}
var validTime = common.getValidTime(this, this.hour, this.minute);
this._setNativeValueSilently(validTime.hour, validTime.minute);
};
TimePicker.prototype._setNativeValueSilently = function(hour, minute) {
if (this.android) {
this.android.setOnTimeChangedListener(null);
this.android.setCurrentHour(new java.lang.Integer(hour));
this.android.setCurrentMinute(new java.lang.Integer(minute));
this.minute = minute;
this.hour = hour;
this.android.setOnTimeChangedListener(this._listener);
}
};
TimePicker.prototype._setNativeTime = function() {
this._setNativeValueSilently(this.hour, this.minute);
};
return TimePicker;
}(common.TimePicker);
exports.TimePicker = TimePicker;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(34);
var proxy = __webpack_require__(53);
var view = __webpack_require__(12);
var types = __webpack_require__(14);
function isHourValid(value) {
return types.isNumber(value) && value >= 0 && value <= 23;
}
function isMinuteValid(value) {
return types.isNumber(value) && value >= 0 && value <= 59;
}
function isMinuteIntervalValid(value) {
return types.isNumber(value) && value >= 1 && value <= 30 && 60 % value === 0;
}
function getMinutes(hour) {
return hour * 60;
}
function isGreaterThanMinTime(picker, hour, minute) {
if (!types.isDefined(picker.minHour) || !types.isDefined(picker.minMinute)) {
return true;
}
return getMinutes(types.isDefined(hour) ? hour : picker.hour) + (types.isDefined(minute) ? minute : picker.minute) >= getMinutes(picker.minHour) + picker.minMinute;
}
exports.isGreaterThanMinTime = isGreaterThanMinTime;
function isLessThanMaxTime(picker, hour, minute) {
if (!types.isDefined(picker.maxHour) || !types.isDefined(picker.maxMinute)) {
return true;
}
return getMinutes(types.isDefined(hour) ? hour : picker.hour) + (types.isDefined(minute) ? minute : picker.minute) <= getMinutes(picker.maxHour) + picker.maxMinute;
}
exports.isLessThanMaxTime = isLessThanMaxTime;
function isValidTime(picker) {
return isGreaterThanMinTime(picker) && isLessThanMaxTime(picker);
}
exports.isValidTime = isValidTime;
function getValidTime(picker, hour, minute) {
if (picker.minuteInterval > 1) {
var minuteFloor = minute - minute % picker.minuteInterval;
minute = minuteFloor + (minute === minuteFloor + 1 ? picker.minuteInterval : 0);
if (minute === 60) {
hour++;
minute = 0;
}
}
var time = {
hour: hour,
minute: minute
};
if (!isGreaterThanMinTime(picker, hour, minute)) {
time = {
hour: picker.minHour,
minute: picker.minMinute
};
}
if (!isLessThanMaxTime(picker, hour, minute)) {
time = {
hour: picker.maxHour,
minute: picker.maxMinute
};
}
return time;
}
exports.getValidTime = getValidTime;
function toString(value) {
return value < 10 ? "0" + value : "" + value;
}
function getMinMaxTimeErrorMessage(picker) {
return "Min time: (" + toString(picker.minHour) + ":" + toString(picker.minMinute) + "), max time: (" + toString(picker.maxHour) + ":" + toString(picker.maxMinute) + ")";
}
function getErrorMessage(picker, propertyName, newValue) {
return propertyName + " property value (" + toString(newValue) + ":" + toString(picker.minute) + ") is not valid. " + getMinMaxTimeErrorMessage(picker) + ".";
}
function onHourPropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeTime();
if (picker.time) {
picker.time.setHours(picker.hour);
} else {
picker.time = new Date(0, 0, 0, picker.hour, picker.minute);
}
} else {
throw new Error(getErrorMessage(picker, "Hour", data.newValue));
}
}
function onMinutePropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeTime();
if (picker.time) {
picker.time.setMinutes(picker.minute);
} else {
picker.time = new Date(0, 0, 0, picker.hour, picker.minute);
}
} else {
throw new Error(getErrorMessage(picker, "Minute", data.newValue));
}
}
function onTimePropertyChanged(data) {
var picker = data.object;
var newTime = data.newValue;
picker.hour = newTime.getHours();
picker.minute = newTime.getMinutes();
if (isValidTime(picker)) {
picker._setNativeTime();
} else {
throw new Error(getErrorMessage(picker, "Time", data.newValue));
}
}
function onMinMinutePropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeMinTime();
} else {
throw new Error(getErrorMessage(picker, "Minute", data.newValue));
}
}
function onMaxMinutePropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeMaxTime();
} else {
throw new Error(getErrorMessage(picker, "Minute", data.newValue));
}
}
function onMinHourPropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeMinTime();
} else {
throw new Error(getErrorMessage(picker, "Hour", data.newValue));
}
}
function onMaxHourPropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeMaxTime();
} else {
throw new Error(getErrorMessage(picker, "Hour", data.newValue));
}
}
function onMinuteIntervalPropertyChanged(data) {
var picker = data.object;
picker._setNativeMinuteIntervalTime();
}
var TimePicker = function(_super) {
__extends(TimePicker, _super);
function TimePicker() {
_super.apply(this, arguments);
}
Object.defineProperty(TimePicker.prototype, "hour", {
get: function() {
return this._getValue(TimePicker.hourProperty);
},
set: function(value) {
this._setValue(TimePicker.hourProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "minute", {
get: function() {
return this._getValue(TimePicker.minuteProperty);
},
set: function(value) {
this._setValue(TimePicker.minuteProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "time", {
get: function() {
return this._getValue(TimePicker.timeProperty);
},
set: function(value) {
this._setValue(TimePicker.timeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "minuteInterval", {
get: function() {
return this._getValue(TimePicker.minuteIntervalProperty);
},
set: function(value) {
this._setValue(TimePicker.minuteIntervalProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "maxHour", {
get: function() {
return this._getValue(TimePicker.maxHourProperty);
},
set: function(value) {
this._setValue(TimePicker.maxHourProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "maxMinute", {
get: function() {
return this._getValue(TimePicker.maxMinuteProperty);
},
set: function(value) {
this._setValue(TimePicker.maxMinuteProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "minHour", {
get: function() {
return this._getValue(TimePicker.minHourProperty);
},
set: function(value) {
this._setValue(TimePicker.minHourProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "minMinute", {
get: function() {
return this._getValue(TimePicker.minMinuteProperty);
},
set: function(value) {
this._setValue(TimePicker.minMinuteProperty, value);
},
enumerable: true,
configurable: true
});
TimePicker.prototype._setNativeTime = function() {};
TimePicker.prototype._setNativeMinTime = function() {};
TimePicker.prototype._setNativeMaxTime = function() {};
TimePicker.prototype._setNativeMinuteIntervalTime = function() {};
TimePicker.hourProperty = new dependencyObservable.Property("hour", "TimePicker", new proxy.PropertyMetadata(0, dependencyObservable.PropertyMetadataSettings.None, onHourPropertyChanged, isHourValid));
TimePicker.minHourProperty = new dependencyObservable.Property("minHour", "TimePicker", new proxy.PropertyMetadata(0, dependencyObservable.PropertyMetadataSettings.None, onMinHourPropertyChanged, isHourValid));
TimePicker.maxHourProperty = new dependencyObservable.Property("maxHour", "TimePicker", new proxy.PropertyMetadata(23, dependencyObservable.PropertyMetadataSettings.None, onMaxHourPropertyChanged, isHourValid));
TimePicker.minuteProperty = new dependencyObservable.Property("minute", "TimePicker", new proxy.PropertyMetadata(0, dependencyObservable.PropertyMetadataSettings.None, onMinutePropertyChanged, isMinuteValid));
TimePicker.minMinuteProperty = new dependencyObservable.Property("minMinute", "TimePicker", new proxy.PropertyMetadata(0, dependencyObservable.PropertyMetadataSettings.None, onMinMinutePropertyChanged, isMinuteValid));
TimePicker.maxMinuteProperty = new dependencyObservable.Property("maxMinute", "TimePicker", new proxy.PropertyMetadata(59, dependencyObservable.PropertyMetadataSettings.None, onMaxMinutePropertyChanged, isMinuteValid));
TimePicker.minuteIntervalProperty = new dependencyObservable.Property("minuteInterval", "TimePicker", new proxy.PropertyMetadata(1, dependencyObservable.PropertyMetadataSettings.None, onMinuteIntervalPropertyChanged, isMinuteIntervalValid));
TimePicker.timeProperty = new dependencyObservable.Property("time", "TimePicker", new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None, onTimePropertyChanged, isValidTime));
return TimePicker;
}(view.View);
exports.TimePicker = TimePicker;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(271);
var trace = __webpack_require__(30);
global.moduleMerge(common, exports);
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(19);
}
}
var WebViewClientClass;
function ensureWebViewClientClass() {
if (WebViewClientClass) {
return;
}
var WebViewClientClassInner = function(_super) {
__extends(WebViewClientClassInner, _super);
function WebViewClientClassInner(view) {
_super.call(this);
this._view = view;
return global.__native(this);
}
WebViewClientClassInner.prototype.shouldOverrideUrlLoading = function(view, url) {
trace.write("WebViewClientClass.shouldOverrideUrlLoading(" + url + ")", trace.categories.Debug);
return false;
};
WebViewClientClassInner.prototype.onPageStarted = function(view, url, favicon) {
_super.prototype.onPageStarted.call(this, view, url, favicon);
if (this._view) {
trace.write("WebViewClientClass.onPageStarted(" + url + ", " + favicon + ")", trace.categories.Debug);
this._view._onLoadStarted(url, common.WebView.navigationTypes[common.WebView.navigationTypes.indexOf("linkClicked")]);
}
};
WebViewClientClassInner.prototype.onPageFinished = function(view, url) {
_super.prototype.onPageFinished.call(this, view, url);
if (this._view) {
trace.write("WebViewClientClass.onPageFinished(" + url + ")", trace.categories.Debug);
this._view._onLoadFinished(url, undefined);
}
};
WebViewClientClassInner.prototype.onReceivedError = function() {
var view = arguments[0];
if (arguments.length === 4) {
var errorCode = arguments[1];
var description = arguments[2];
var failingUrl = arguments[3];
_super.prototype.onReceivedError.call(this, view, errorCode, description, failingUrl);
if (this._view) {
trace.write("WebViewClientClass.onReceivedError(" + errorCode + ", " + description + ", " + failingUrl + ")", trace.categories.Debug);
this._view._onLoadFinished(failingUrl, description + "(" + errorCode + ")");
}
} else {
var request = arguments[1];
var error = arguments[2];
_super.prototype.onReceivedError.call(this, view, request, error);
if (this._view) {
trace.write("WebViewClientClass.onReceivedError(" + error.getErrorCode() + ", " + error.getDescription() + ", " + (error.getUrl && error.getUrl()) + ")", trace.categories.Debug);
this._view._onLoadFinished(error.getUrl && error.getUrl(), error.getDescription() + "(" + error.getErrorCode() + ")");
}
}
};
return WebViewClientClassInner;
}(android.webkit.WebViewClient);
WebViewClientClass = WebViewClientClassInner;
}
var WebView = function(_super) {
__extends(WebView, _super);
function WebView() {
_super.call(this);
ensureWebViewClientClass();
this._webViewClient = new WebViewClientClass(this);
}
Object.defineProperty(WebView.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
WebView.prototype._createUI = function() {
this._android = new android.webkit.WebView(this._context);
this._android.getSettings().setJavaScriptEnabled(true);
this._android.getSettings().setBuiltInZoomControls(true);
this._android.setWebViewClient(this._webViewClient);
};
WebView.prototype._onDetached = function(force) {
if (this.android) {
this.android.destroy();
}
_super.prototype._onDetached.call(this, force);
};
WebView.prototype._loadUrl = function(url) {
if (!this._android) {
return;
}
trace.write("WebView._loadUrl(" + url + ")", trace.categories.Debug);
this._android.stopLoading();
this._android.loadUrl(url);
};
WebView.prototype._loadFileOrResource = function(path, content) {
if (!this._android) {
return;
}
var baseUrl = "file:///" + path.substring(0, path.lastIndexOf("/") + 1);
this._android.loadDataWithBaseURL(baseUrl, content, "text/html", "utf-8", null);
};
WebView.prototype._loadHttp = function(src) {
if (!this._android) {
return;
}
this._android.loadUrl(src);
};
WebView.prototype._loadData = function(src) {
if (!this._android) {
return;
}
ensureFS();
var baseUrl = "file:///" + fs.knownFolders.currentApp().path + "/";
this._android.loadDataWithBaseURL(baseUrl, src, "text/html", "utf-8", null);
};
Object.defineProperty(WebView.prototype, "canGoBack", {
get: function() {
return this._android.canGoBack();
},
enumerable: true,
configurable: true
});
WebView.prototype.stopLoading = function() {
if (this._android) {
this._android.stopLoading();
}
};
Object.defineProperty(WebView.prototype, "canGoForward", {
get: function() {
return this._android.canGoForward();
},
enumerable: true,
configurable: true
});
WebView.prototype.goBack = function() {
this._android.goBack();
};
WebView.prototype.goForward = function() {
this._android.goForward();
};
WebView.prototype.reload = function() {
this._android.reload();
};
return WebView;
}(common.WebView);
exports.WebView = WebView;
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var dependencyObservable = __webpack_require__(34);
var proxy = __webpack_require__(53);
var utils = __webpack_require__(22);
var trace = __webpack_require__(30);
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(19);
}
}
var urlProperty = new dependencyObservable.Property("url", "WebView", new proxy.PropertyMetadata(""));
function onUrlPropertyChanged(data) {
var webView = data.object;
if (webView._suspendLoading) {
return;
}
webView._loadUrl(data.newValue);
}
urlProperty.metadata.onSetNativeValue = onUrlPropertyChanged;
var srcProperty = new dependencyObservable.Property("src", "WebView", new proxy.PropertyMetadata(""));
function onSrcPropertyChanged(data) {
var webView = data.object;
if (webView._suspendLoading) {
return;
}
webView.stopLoading();
var src = data.newValue;
trace.write("WebView._loadSrc(" + src + ")", trace.categories.Debug);
if (utils.isFileOrResourcePath(src)) {
ensureFS();
if (src.indexOf("~/") === 0) {
src = fs.path.join(fs.knownFolders.currentApp().path, src.replace("~/", ""));
}
if (fs.File.exists(src)) {
var file = fs.File.fromPath(src);
var content = file.readTextSync();
webView._loadFileOrResource(src, content);
}
} else if (src.toLowerCase().indexOf("http://") === 0 || src.toLowerCase().indexOf("https://") === 0) {
webView._loadHttp(src);
} else {
webView._loadData(src);
}
}
srcProperty.metadata.onSetNativeValue = onSrcPropertyChanged;
var WebView = function(_super) {
__extends(WebView, _super);
function WebView() {
_super.apply(this, arguments);
}
Object.defineProperty(WebView.prototype, "url", {
get: function() {
return this._getValue(WebView.urlProperty);
},
set: function(value) {
this._setValue(WebView.urlProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(WebView.prototype, "src", {
get: function() {
return this._getValue(WebView.srcProperty);
},
set: function(value) {
this._setValue(WebView.srcProperty, value);
},
enumerable: true,
configurable: true
});
WebView.prototype._onLoadFinished = function(url, error) {
this._suspendLoading = true;
this.url = url;
this._suspendLoading = false;
var args = {
eventName: WebView.loadFinishedEvent,
object: this,
url: url,
navigationType: undefined,
error: error
};
this.notify(args);
};
WebView.prototype._onLoadStarted = function(url, navigationType) {
var args = {
eventName: WebView.loadStartedEvent,
object: this,
url: url,
navigationType: navigationType,
error: undefined
};
this.notify(args);
};
Object.defineProperty(WebView.prototype, "canGoBack", {
get: function() {
throw new Error("This member is abstract.");
},
enumerable: true,
configurable: true
});
Object.defineProperty(WebView.prototype, "canGoForward", {
get: function() {
throw new Error("This member is abstract.");
},
enumerable: true,
configurable: true
});
WebView.loadStartedEvent = "loadStarted";
WebView.loadFinishedEvent = "loadFinished";
WebView.navigationTypes = [ "linkClicked", "formSubmitted", "backForward", "reload", "formResubmitted", "other" ];
WebView.urlProperty = urlProperty;
WebView.srcProperty = srcProperty;
return WebView;
}(view.View);
exports.WebView = WebView;
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(22);
var common = __webpack_require__(273);
var enums_1 = __webpack_require__(24);
global.moduleMerge(common, exports);
function setNativeOrientationProperty(data) {
var wrapLayout = data.object;
var nativeView = wrapLayout._nativeView;
nativeView.setOrientation(data.newValue === enums_1.Orientation.vertical ? org.nativescript.widgets.Orientation.vertical : org.nativescript.widgets.Orientation.horizontal);
}
function setNativeItemWidthProperty(data) {
var wrapLayout = data.object;
var nativeView = wrapLayout._nativeView;
nativeView.setItemWidth(data.newValue * utils.layout.getDisplayDensity());
}
function setNativeItemHeightProperty(data) {
var wrapLayout = data.object;
var nativeView = wrapLayout._nativeView;
nativeView.setItemHeight(data.newValue * utils.layout.getDisplayDensity());
}
common.WrapLayout.orientationProperty.metadata.onSetNativeValue = setNativeOrientationProperty;
common.WrapLayout.itemWidthProperty.metadata.onSetNativeValue = setNativeItemWidthProperty;
common.WrapLayout.itemHeightProperty.metadata.onSetNativeValue = setNativeItemHeightProperty;
var WrapLayout = function(_super) {
__extends(WrapLayout, _super);
function WrapLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(WrapLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrapLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
WrapLayout.prototype._createUI = function() {
this._layout = new org.nativescript.widgets.WrapLayout(this._context);
};
return WrapLayout;
}(common.WrapLayout);
exports.WrapLayout = WrapLayout;
}, function(module, exports, __webpack_require__) {
var platform = __webpack_require__(45);
var layout_base_1 = __webpack_require__(79);
var enums_1 = __webpack_require__(24);
var proxy_1 = __webpack_require__(53);
var dependency_observable_1 = __webpack_require__(34);
var AffectsLayout = platform.device.os === platform.platformNames.android ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
function isWidthHeightValid(value) {
return value >= 0 && value !== Number.POSITIVE_INFINITY;
}
function isValidOrientation(value) {
return value === enums_1.Orientation.vertical || value === enums_1.Orientation.horizontal;
}
var WrapLayout = function(_super) {
__extends(WrapLayout, _super);
function WrapLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(WrapLayout.prototype, "orientation", {
get: function() {
return this._getValue(WrapLayout.orientationProperty);
},
set: function(value) {
this._setValue(WrapLayout.orientationProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrapLayout.prototype, "itemWidth", {
get: function() {
return this._getValue(WrapLayout.itemWidthProperty);
},
set: function(value) {
this._setValue(WrapLayout.itemWidthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrapLayout.prototype, "itemHeight", {
get: function() {
return this._getValue(WrapLayout.itemHeightProperty);
},
set: function(value) {
this._setValue(WrapLayout.itemHeightProperty, value);
},
enumerable: true,
configurable: true
});
WrapLayout.orientationProperty = new dependency_observable_1.Property("orientation", "WrapLayout", new proxy_1.PropertyMetadata(enums_1.Orientation.horizontal, AffectsLayout, undefined, isValidOrientation));
WrapLayout.itemWidthProperty = new dependency_observable_1.Property("itemWidth", "WrapLayout", new proxy_1.PropertyMetadata(0, AffectsLayout, undefined, isWidthHeightValid));
WrapLayout.itemHeightProperty = new dependency_observable_1.Property("itemHeight", "WrapLayout", new proxy_1.PropertyMetadata(0, AffectsLayout, undefined, isWidthHeightValid));
return WrapLayout;
}(layout_base_1.LayoutBase);
exports.WrapLayout = WrapLayout;
}, function(module, exports, __webpack_require__) {
var spanCommon = __webpack_require__(275);
var enums = __webpack_require__(24);
var utils = __webpack_require__(22);
var fontModule = __webpack_require__(46);
global.moduleMerge(spanCommon, exports);
var CustomTypefaceSpanClass;
function ensureCustomTypefaceSpanClass() {
if (CustomTypefaceSpanClass) {
return;
}
var CustomTypefaceSpan = function(_super) {
__extends(CustomTypefaceSpan, _super);
function CustomTypefaceSpan(family, typeface) {
_super.call(this, family);
this.typeface = typeface;
return global.__native(this);
}
CustomTypefaceSpan.prototype.updateDrawState = function(ds) {
CustomTypefaceSpan.applyCustomTypeFace(ds, this.typeface);
};
CustomTypefaceSpan.prototype.updateMeasureState = function(paint) {
CustomTypefaceSpan.applyCustomTypeFace(paint, this.typeface);
};
CustomTypefaceSpan.applyCustomTypeFace = function(paint, tf) {
var oldStyle;
var old = paint.getTypeface();
if (old === null) {
oldStyle = 0;
} else {
oldStyle = old.getStyle();
}
var fake = oldStyle & ~tf.getStyle();
if ((fake & android.graphics.Typeface.BOLD) !== 0) {
paint.setFakeBoldText(true);
}
if ((fake & android.graphics.Typeface.ITALIC) !== 0) {
paint.setTextSkewX(-.25);
}
paint.setTypeface(tf);
};
return CustomTypefaceSpan;
}(android.text.style.TypefaceSpan);
CustomTypefaceSpanClass = CustomTypefaceSpan;
}
var Span = function(_super) {
__extends(Span, _super);
function Span() {
_super.apply(this, arguments);
}
Span.prototype.updateSpanModifiers = function(parent) {
_super.prototype.updateSpanModifiers.call(this, parent);
var realFontFamily = this.fontFamily || (parent ? parent.fontFamily : undefined);
if (realFontFamily) {
var font = new fontModule.Font(realFontFamily, 0, realFontAttributes & enums.FontAttributes.Italic ? enums.FontStyle.italic : enums.FontStyle.normal, realFontAttributes & enums.FontAttributes.Bold ? enums.FontWeight.bold : enums.FontWeight.normal);
ensureCustomTypefaceSpanClass();
var typefaceSpan = new CustomTypefaceSpanClass(realFontFamily, font.getAndroidTypeface());
this.spanModifiers.push(typefaceSpan);
}
var realFontSize = this.fontSize || (parent ? parent.fontSize : undefined) || (parent && parent.parent ? parent.parent.style.fontSize : undefined);
if (realFontSize) {
this.spanModifiers.push(new android.text.style.AbsoluteSizeSpan(realFontSize * utils.layout.getDisplayDensity()));
}
var realForegroundColor = this.foregroundColor || (parent ? parent.foregroundColor : undefined) || (parent && parent.parent ? parent.parent.style.color : undefined);
if (realForegroundColor) {
this.spanModifiers.push(new android.text.style.ForegroundColorSpan(realForegroundColor.android));
}
var realBackgroundColor = this.backgroundColor || (parent ? parent.backgroundColor : undefined) || (parent && parent.parent ? parent.parent.style.backgroundColor : undefined);
if (realBackgroundColor) {
this.spanModifiers.push(new android.text.style.BackgroundColorSpan(realBackgroundColor.android));
}
var realFontAttributes = this.fontAttributes || (parent ? parent.fontAttributes : undefined);
if (realFontAttributes) {
if (realFontAttributes & enums.FontAttributes.Bold && realFontAttributes & enums.FontAttributes.Italic) {
this.spanModifiers.push(new android.text.style.StyleSpan(android.graphics.Typeface.BOLD_ITALIC));
} else if (realFontAttributes & enums.FontAttributes.Bold) {
this.spanModifiers.push(new android.text.style.StyleSpan(android.graphics.Typeface.BOLD));
} else if (realFontAttributes & enums.FontAttributes.Italic) {
this.spanModifiers.push(new android.text.style.StyleSpan(android.graphics.Typeface.ITALIC));
}
}
var realUnderline = this.underline || (parent ? parent.underline : undefined);
if (realUnderline) {
this.spanModifiers.push(new android.text.style.UnderlineSpan());
}
var realStrikethrough = this.strikethrough || (parent ? parent.strikethrough : undefined);
if (realStrikethrough) {
this.spanModifiers.push(new android.text.style.StrikethroughSpan());
}
};
return Span;
}(spanCommon.Span);
exports.Span = Span;
}, function(module, exports, __webpack_require__) {
var colorModule = __webpack_require__(27);
var bindable = __webpack_require__(54);
var types = __webpack_require__(14);
var enums = __webpack_require__(24);
var Span = function(_super) {
__extends(Span, _super);
function Span() {
_super.apply(this, arguments);
}
Object.defineProperty(Span.prototype, "fontFamily", {
get: function() {
return this._fontFamily;
},
set: function(value) {
if (this._fontFamily !== value) {
this._fontFamily = value;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "fontSize", {
get: function() {
return this._fontSize;
},
set: function(value) {
var fSize;
if (types.isString(value)) {
fSize = parseInt(value);
} else {
fSize = value;
}
if (this._fontSize !== fSize) {
this._fontSize = fSize;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Span.prototype._getColorValue = function(value) {
var result;
if (types.isString(value) && colorModule.Color.isValid(value)) {
result = new colorModule.Color(value);
} else {
result = value;
}
return result;
};
Object.defineProperty(Span.prototype, "foregroundColor", {
get: function() {
return this._foregroundColor;
},
set: function(value) {
var convertedColor = this._getColorValue(value);
if (this._foregroundColor !== convertedColor) {
this._foregroundColor = convertedColor;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "backgroundColor", {
get: function() {
return this._backgroundColor;
},
set: function(value) {
var convertedColor = this._getColorValue(value);
if (this._backgroundColor !== convertedColor) {
this._backgroundColor = convertedColor;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "underline", {
get: function() {
return this._underline;
},
set: function(value) {
var underlineIntValue;
if (types.isString(value)) {
underlineIntValue = parseInt(value);
} else {
underlineIntValue = value;
}
if (this._underline !== underlineIntValue) {
this._underline = underlineIntValue;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "strikethrough", {
get: function() {
return this._strikethrough;
},
set: function(value) {
var strikethroughIntValue;
if (types.isString(value)) {
strikethroughIntValue = parseInt(value);
} else {
strikethroughIntValue = value;
}
if (this._strikethrough !== strikethroughIntValue) {
this._strikethrough = strikethroughIntValue;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "fontAttributes", {
get: function() {
return this._fontAttributes;
},
set: function(value) {
if (this._fontAttributes !== value) {
this._fontAttributes = value;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "spanModifiers", {
get: function() {
if (!this._spanModifiers) {
this._spanModifiers = new Array();
}
return this._spanModifiers;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "text", {
get: function() {
return this._text;
},
set: function(value) {
if (this._text !== value) {
this._text = value;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "parentFormattedString", {
get: function() {
return this._parentFormattedString;
},
set: function(value) {
if (this._parentFormattedString !== value) {
this._parentFormattedString = value;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Span.prototype.updateSpanModifiers = function(parent) {
if (this._isInEditMode) {
throw new Error("Cannot update span modifiers during update!");
}
this._spanModifiers = new Array();
};
Span.prototype.beginEdit = function() {
this._isInEditMode = true;
};
Span.prototype.updateAndNotify = function() {
if (!this._isInEditMode) {
this.updateSpanModifiers(this.parentFormattedString);
this.notify(this._createPropertyChangeData(".", this));
}
};
Span.prototype.endEdit = function() {
this._isInEditMode = false;
this.updateAndNotify();
};
Span.prototype._applyXmlAttribute = function(attribute, value) {
if (attribute === "fontAttributes") {
if (value.indexOf(",")) {
var fontAttr = value.split(",");
var fontAttrValue;
var j;
for (j = 0; j < fontAttr.length; j++) {
fontAttrValue = Span.getFontAttributeFromString(fontAttr[j]);
this.fontAttributes |= fontAttrValue;
}
} else {
this.fontAttributes |= value;
}
return true;
} else {
return false;
}
};
Span.getFontAttributeFromString = function(fontAttr) {
var fontAttrTrimmedAndLowerCase = fontAttr.trim().toLowerCase();
if (fontAttrTrimmedAndLowerCase === "bold") {
return enums.FontAttributes.Bold;
} else if (fontAttrTrimmedAndLowerCase === "italic") {
return enums.FontAttributes.Italic;
} else {
return enums.FontAttributes.Normal;
}
};
return Span;
}(bindable.Bindable);
exports.Span = Span;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var compiler_1 = __webpack_require__(277);
var security_1 = __webpack_require__(116);
var platform_server_1 = __webpack_require__(346);
var dom_adapter_1 = __webpack_require__(223);
(function(SecurityContext) {
SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
SecurityContext[SecurityContext["URL"] = 4] = "URL";
SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
})(exports.SecurityContext || (exports.SecurityContext = {}));
var SecurityContext = exports.SecurityContext;
var NativeScriptElementSchemaRegistry = function(_super) {
__extends(NativeScriptElementSchemaRegistry, _super);
function NativeScriptElementSchemaRegistry() {
_super.apply(this, arguments);
}
NativeScriptElementSchemaRegistry.prototype.hasProperty = function(tagName, propName) {
return true;
};
NativeScriptElementSchemaRegistry.prototype.getMappedPropName = function(propName) {
return propName;
};
NativeScriptElementSchemaRegistry.prototype.securityContext = function(tagName, propName) {
return SecurityContext.NONE;
};
return NativeScriptElementSchemaRegistry;
}(compiler_1.ElementSchemaRegistry);
exports.NativeScriptElementSchemaRegistry = NativeScriptElementSchemaRegistry;
var NativeScriptSanitizationService = function(_super) {
__extends(NativeScriptSanitizationService, _super);
function NativeScriptSanitizationService() {
_super.apply(this, arguments);
}
NativeScriptSanitizationService.prototype.sanitize = function(context, value) {
return value;
};
return NativeScriptSanitizationService;
}(security_1.SanitizationService);
exports.NativeScriptSanitizationService = NativeScriptSanitizationService;
var NativeScriptDomAdapter = function(_super) {
__extends(NativeScriptDomAdapter, _super);
function NativeScriptDomAdapter() {
_super.apply(this, arguments);
}
NativeScriptDomAdapter.makeCurrent = function() {
console.log("Setting DOM");
dom_adapter_1.setRootDomAdapter(new NativeScriptDomAdapter());
};
NativeScriptDomAdapter.prototype.getXHR = function() {
return null;
};
NativeScriptDomAdapter.prototype.hasProperty = function(element, name) {
return true;
};
return NativeScriptDomAdapter;
}(platform_server_1.Parse5DomAdapter);
exports.NativeScriptDomAdapter = NativeScriptDomAdapter;
}, function(module, exports, __webpack_require__) {
"use strict";
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
__export(__webpack_require__(278));
}, function(module, exports, __webpack_require__) {
"use strict";
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var element_schema_registry_1 = __webpack_require__(279);
exports.ElementSchemaRegistry = element_schema_registry_1.ElementSchemaRegistry;
var compiler_1 = __webpack_require__(280);
exports.COMPILER_PROVIDERS = compiler_1.COMPILER_PROVIDERS;
exports.TEMPLATE_TRANSFORMS = compiler_1.TEMPLATE_TRANSFORMS;
exports.CompilerConfig = compiler_1.CompilerConfig;
exports.RenderTypes = compiler_1.RenderTypes;
exports.UrlResolver = compiler_1.UrlResolver;
exports.DEFAULT_PACKAGE_URL_PROVIDER = compiler_1.DEFAULT_PACKAGE_URL_PROVIDER;
exports.createOfflineCompileUrlResolver = compiler_1.createOfflineCompileUrlResolver;
exports.XHR = compiler_1.XHR;
exports.ViewResolver = compiler_1.ViewResolver;
exports.DirectiveResolver = compiler_1.DirectiveResolver;
exports.PipeResolver = compiler_1.PipeResolver;
exports.SourceModule = compiler_1.SourceModule;
exports.NormalizedComponentWithViewDirectives = compiler_1.NormalizedComponentWithViewDirectives;
exports.OfflineCompiler = compiler_1.OfflineCompiler;
exports.CompileMetadataWithIdentifier = compiler_1.CompileMetadataWithIdentifier;
exports.CompileMetadataWithType = compiler_1.CompileMetadataWithType;
exports.CompileIdentifierMetadata = compiler_1.CompileIdentifierMetadata;
exports.CompileDiDependencyMetadata = compiler_1.CompileDiDependencyMetadata;
exports.CompileProviderMetadata = compiler_1.CompileProviderMetadata;
exports.CompileFactoryMetadata = compiler_1.CompileFactoryMetadata;
exports.CompileTokenMetadata = compiler_1.CompileTokenMetadata;
exports.CompileTypeMetadata = compiler_1.CompileTypeMetadata;
exports.CompileQueryMetadata = compiler_1.CompileQueryMetadata;
exports.CompileTemplateMetadata = compiler_1.CompileTemplateMetadata;
exports.CompileDirectiveMetadata = compiler_1.CompileDirectiveMetadata;
exports.CompilePipeMetadata = compiler_1.CompilePipeMetadata;
__export(__webpack_require__(282));
__export(__webpack_require__(344));
}, function(module, exports) {
"use strict";
var ElementSchemaRegistry = function() {
function ElementSchemaRegistry() {}
return ElementSchemaRegistry;
}();
exports.ElementSchemaRegistry = ElementSchemaRegistry;
}, function(module, exports, __webpack_require__) {
"use strict";
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(281);
__export(__webpack_require__(282));
var template_parser_1 = __webpack_require__(283);
exports.TEMPLATE_TRANSFORMS = template_parser_1.TEMPLATE_TRANSFORMS;
var config_1 = __webpack_require__(305);
exports.CompilerConfig = config_1.CompilerConfig;
exports.RenderTypes = config_1.RenderTypes;
__export(__webpack_require__(302));
__export(__webpack_require__(306));
var runtime_compiler_1 = __webpack_require__(308);
exports.RuntimeCompiler = runtime_compiler_1.RuntimeCompiler;
__export(__webpack_require__(303));
__export(__webpack_require__(329));
var view_resolver_1 = __webpack_require__(333);
exports.ViewResolver = view_resolver_1.ViewResolver;
var directive_resolver_1 = __webpack_require__(331);
exports.DirectiveResolver = directive_resolver_1.DirectiveResolver;
var pipe_resolver_1 = __webpack_require__(332);
exports.PipeResolver = pipe_resolver_1.PipeResolver;
var template_parser_2 = __webpack_require__(283);
var html_parser_1 = __webpack_require__(292);
var directive_normalizer_1 = __webpack_require__(328);
var metadata_resolver_1 = __webpack_require__(330);
var style_compiler_1 = __webpack_require__(311);
var view_compiler_1 = __webpack_require__(313);
var config_2 = __webpack_require__(305);
var runtime_compiler_2 = __webpack_require__(308);
var element_schema_registry_1 = __webpack_require__(279);
var dom_element_schema_registry_1 = __webpack_require__(343);
var url_resolver_2 = __webpack_require__(303);
var parser_1 = __webpack_require__(290);
var lexer_1 = __webpack_require__(291);
var view_resolver_2 = __webpack_require__(333);
var directive_resolver_2 = __webpack_require__(331);
var pipe_resolver_2 = __webpack_require__(332);
function _createCompilerConfig() {
return new config_2.CompilerConfig(lang_1.assertionsEnabled(), false, true);
}
exports.COMPILER_PROVIDERS = [ lexer_1.Lexer, parser_1.Parser, html_parser_1.HtmlParser, template_parser_2.TemplateParser, directive_normalizer_1.DirectiveNormalizer, metadata_resolver_1.CompileMetadataResolver, url_resolver_2.DEFAULT_PACKAGE_URL_PROVIDER, style_compiler_1.StyleCompiler, view_compiler_1.ViewCompiler, {
provide: config_2.CompilerConfig,
useFactory: _createCompilerConfig,
deps: []
}, runtime_compiler_2.RuntimeCompiler, {
provide: core_1.ComponentResolver,
useExisting: runtime_compiler_2.RuntimeCompiler
}, dom_element_schema_registry_1.DomElementSchemaRegistry, {
provide: element_schema_registry_1.ElementSchemaRegistry,
useExisting: dom_element_schema_registry_1.DomElementSchemaRegistry
}, url_resolver_2.UrlResolver, view_resolver_2.ViewResolver, directive_resolver_2.DirectiveResolver, pipe_resolver_2.PipeResolver ];
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var globalScope;
if (typeof window === "undefined") {
if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) {
globalScope = self;
} else {
globalScope = global;
}
} else {
globalScope = window;
}
function scheduleMicroTask(fn) {
Zone.current.scheduleMicroTask("scheduleMicrotask", fn);
}
exports.scheduleMicroTask = scheduleMicroTask;
exports.IS_DART = false;
var _global = globalScope;
exports.global = _global;
exports.Type = Function;
function getTypeNameForDebugging(type) {
if (type["name"]) {
return type["name"];
}
return typeof type;
}
exports.getTypeNameForDebugging = getTypeNameForDebugging;
exports.Math = _global.Math;
exports.Date = _global.Date;
var _devMode = true;
var _modeLocked = false;
function lockMode() {
_modeLocked = true;
}
exports.lockMode = lockMode;
function enableProdMode() {
if (_modeLocked) {
throw "Cannot enable prod mode after platform setup.";
}
_devMode = false;
}
exports.enableProdMode = enableProdMode;
function assertionsEnabled() {
return _devMode;
}
exports.assertionsEnabled = assertionsEnabled;
_global.assert = function assert(condition) {};
function isPresent(obj) {
return obj !== undefined && obj !== null;
}
exports.isPresent = isPresent;
function isBlank(obj) {
return obj === undefined || obj === null;
}
exports.isBlank = isBlank;
function isBoolean(obj) {
return typeof obj === "boolean";
}
exports.isBoolean = isBoolean;
function isNumber(obj) {
return typeof obj === "number";
}
exports.isNumber = isNumber;
function isString(obj) {
return typeof obj === "string";
}
exports.isString = isString;
function isFunction(obj) {
return typeof obj === "function";
}
exports.isFunction = isFunction;
function isType(obj) {
return isFunction(obj);
}
exports.isType = isType;
function isStringMap(obj) {
return typeof obj === "object" && obj !== null;
}
exports.isStringMap = isStringMap;
var STRING_MAP_PROTO = Object.getPrototypeOf({});
function isStrictStringMap(obj) {
return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
}
exports.isStrictStringMap = isStrictStringMap;
function isPromise(obj) {
return obj instanceof _global.Promise;
}
exports.isPromise = isPromise;
function isArray(obj) {
return Array.isArray(obj);
}
exports.isArray = isArray;
function isDate(obj) {
return obj instanceof exports.Date && !isNaN(obj.valueOf());
}
exports.isDate = isDate;
function noop() {}
exports.noop = noop;
function stringify(token) {
if (typeof token === "string") {
return token;
}
if (token === undefined || token === null) {
return "" + token;
}
if (token.name) {
return token.name;
}
if (token.overriddenName) {
return token.overriddenName;
}
var res = token.toString();
var newLineIndex = res.indexOf("\n");
return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
exports.stringify = stringify;
function serializeEnum(val) {
return val;
}
exports.serializeEnum = serializeEnum;
function deserializeEnum(val, values) {
return val;
}
exports.deserializeEnum = deserializeEnum;
function resolveEnumToken(enumValue, val) {
return enumValue[val];
}
exports.resolveEnumToken = resolveEnumToken;
var StringWrapper = function() {
function StringWrapper() {}
StringWrapper.fromCharCode = function(code) {
return String.fromCharCode(code);
};
StringWrapper.charCodeAt = function(s, index) {
return s.charCodeAt(index);
};
StringWrapper.split = function(s, regExp) {
return s.split(regExp);
};
StringWrapper.equals = function(s, s2) {
return s === s2;
};
StringWrapper.stripLeft = function(s, charVal) {
if (s && s.length) {
var pos = 0;
for (var i = 0; i < s.length; i++) {
if (s[i] != charVal) break;
pos++;
}
s = s.substring(pos);
}
return s;
};
StringWrapper.stripRight = function(s, charVal) {
if (s && s.length) {
var pos = s.length;
for (var i = s.length - 1; i >= 0; i--) {
if (s[i] != charVal) break;
pos--;
}
s = s.substring(0, pos);
}
return s;
};
StringWrapper.replace = function(s, from, replace) {
return s.replace(from, replace);
};
StringWrapper.replaceAll = function(s, from, replace) {
return s.replace(from, replace);
};
StringWrapper.slice = function(s, from, to) {
if (from === void 0) {
from = 0;
}
if (to === void 0) {
to = null;
}
return s.slice(from, to === null ? undefined : to);
};
StringWrapper.replaceAllMapped = function(s, from, cb) {
return s.replace(from, function() {
var matches = [];
for (var _i = 0; _i < arguments.length; _i++) {
matches[_i - 0] = arguments[_i];
}
matches.splice(-2, 2);
return cb(matches);
});
};
StringWrapper.contains = function(s, substr) {
return s.indexOf(substr) != -1;
};
StringWrapper.compare = function(a, b) {
if (a < b) {
return -1;
} else if (a > b) {
return 1;
} else {
return 0;
}
};
return StringWrapper;
}();
exports.StringWrapper = StringWrapper;
var StringJoiner = function() {
function StringJoiner(parts) {
if (parts === void 0) {
parts = [];
}
this.parts = parts;
}
StringJoiner.prototype.add = function(part) {
this.parts.push(part);
};
StringJoiner.prototype.toString = function() {
return this.parts.join("");
};
return StringJoiner;
}();
exports.StringJoiner = StringJoiner;
var NumberParseError = function(_super) {
__extends(NumberParseError, _super);
function NumberParseError(message) {
_super.call(this);
this.message = message;
}
NumberParseError.prototype.toString = function() {
return this.message;
};
return NumberParseError;
}(Error);
exports.NumberParseError = NumberParseError;
var NumberWrapper = function() {
function NumberWrapper() {}
NumberWrapper.toFixed = function(n, fractionDigits) {
return n.toFixed(fractionDigits);
};
NumberWrapper.equal = function(a, b) {
return a === b;
};
NumberWrapper.parseIntAutoRadix = function(text) {
var result = parseInt(text);
if (isNaN(result)) {
throw new NumberParseError("Invalid integer literal when parsing " + text);
}
return result;
};
NumberWrapper.parseInt = function(text, radix) {
if (radix == 10) {
if (/^(\-|\+)?[0-9]+$/.test(text)) {
return parseInt(text, radix);
}
} else if (radix == 16) {
if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
return parseInt(text, radix);
}
} else {
var result = parseInt(text, radix);
if (!isNaN(result)) {
return result;
}
}
throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " + radix);
};
NumberWrapper.parseFloat = function(text) {
return parseFloat(text);
};
Object.defineProperty(NumberWrapper, "NaN", {
get: function() {
return NaN;
},
enumerable: true,
configurable: true
});
NumberWrapper.isNaN = function(value) {
return isNaN(value);
};
NumberWrapper.isInteger = function(value) {
return Number.isInteger(value);
};
return NumberWrapper;
}();
exports.NumberWrapper = NumberWrapper;
exports.RegExp = _global.RegExp;
var RegExpWrapper = function() {
function RegExpWrapper() {}
RegExpWrapper.create = function(regExpStr, flags) {
if (flags === void 0) {
flags = "";
}
flags = flags.replace(/g/g, "");
return new _global.RegExp(regExpStr, flags + "g");
};
RegExpWrapper.firstMatch = function(regExp, input) {
regExp.lastIndex = 0;
return regExp.exec(input);
};
RegExpWrapper.test = function(regExp, input) {
regExp.lastIndex = 0;
return regExp.test(input);
};
RegExpWrapper.matcher = function(regExp, input) {
regExp.lastIndex = 0;
return {
re: regExp,
input: input
};
};
RegExpWrapper.replaceAll = function(regExp, input, replace) {
var c = regExp.exec(input);
var res = "";
regExp.lastIndex = 0;
var prev = 0;
while (c) {
res += input.substring(prev, c.index);
res += replace(c);
prev = c.index + c[0].length;
regExp.lastIndex = prev;
c = regExp.exec(input);
}
res += input.substring(prev);
return res;
};
return RegExpWrapper;
}();
exports.RegExpWrapper = RegExpWrapper;
var RegExpMatcherWrapper = function() {
function RegExpMatcherWrapper() {}
RegExpMatcherWrapper.next = function(matcher) {
return matcher.re.exec(matcher.input);
};
return RegExpMatcherWrapper;
}();
exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
var FunctionWrapper = function() {
function FunctionWrapper() {}
FunctionWrapper.apply = function(fn, posArgs) {
return fn.apply(null, posArgs);
};
return FunctionWrapper;
}();
exports.FunctionWrapper = FunctionWrapper;
function looseIdentical(a, b) {
return a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
}
exports.looseIdentical = looseIdentical;
function getMapKey(value) {
return value;
}
exports.getMapKey = getMapKey;
function normalizeBlank(obj) {
return isBlank(obj) ? null : obj;
}
exports.normalizeBlank = normalizeBlank;
function normalizeBool(obj) {
return isBlank(obj) ? false : obj;
}
exports.normalizeBool = normalizeBool;
function isJsObject(o) {
return o !== null && (typeof o === "function" || typeof o === "object");
}
exports.isJsObject = isJsObject;
function print(obj) {
console.log(obj);
}
exports.print = print;
function warn(obj) {
console.warn(obj);
}
exports.warn = warn;
var Json = function() {
function Json() {}
Json.parse = function(s) {
return _global.JSON.parse(s);
};
Json.stringify = function(data) {
return _global.JSON.stringify(data, null, 2);
};
return Json;
}();
exports.Json = Json;
var DateWrapper = function() {
function DateWrapper() {}
DateWrapper.create = function(year, month, day, hour, minutes, seconds, milliseconds) {
if (month === void 0) {
month = 1;
}
if (day === void 0) {
day = 1;
}
if (hour === void 0) {
hour = 0;
}
if (minutes === void 0) {
minutes = 0;
}
if (seconds === void 0) {
seconds = 0;
}
if (milliseconds === void 0) {
milliseconds = 0;
}
return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
};
DateWrapper.fromISOString = function(str) {
return new exports.Date(str);
};
DateWrapper.fromMillis = function(ms) {
return new exports.Date(ms);
};
DateWrapper.toMillis = function(date) {
return date.getTime();
};
DateWrapper.now = function() {
return new exports.Date();
};
DateWrapper.toJson = function(date) {
return date.toJSON();
};
return DateWrapper;
}();
exports.DateWrapper = DateWrapper;
function setValueOnPath(global, path, value) {
var parts = path.split(".");
var obj = global;
while (parts.length > 1) {
var name = parts.shift();
if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
obj = obj[name];
} else {
obj = obj[name] = {};
}
}
if (obj === undefined || obj === null) {
obj = {};
}
obj[parts.shift()] = value;
}
exports.setValueOnPath = setValueOnPath;
var _symbolIterator = null;
function getSymbolIterator() {
if (isBlank(_symbolIterator)) {
if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
_symbolIterator = Symbol.iterator;
} else {
var keys = Object.getOwnPropertyNames(Map.prototype);
for (var i = 0; i < keys.length; ++i) {
var key = keys[i];
if (key !== "entries" && key !== "size" && Map.prototype[key] === Map.prototype["entries"]) {
_symbolIterator = key;
}
}
}
}
return _symbolIterator;
}
exports.getSymbolIterator = getSymbolIterator;
function evalExpression(sourceUrl, expr, declarations, vars) {
var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
var fnArgNames = [];
var fnArgValues = [];
for (var argName in vars) {
fnArgNames.push(argName);
fnArgValues.push(vars[argName]);
}
return new (Function.bind.apply(Function, [ void 0 ].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
}
exports.evalExpression = evalExpression;
function isPrimitive(obj) {
return !isJsObject(obj);
}
exports.isPrimitive = isPrimitive;
function hasConstructor(value, type) {
return value.constructor === type;
}
exports.hasConstructor = hasConstructor;
function bitWiseOr(values) {
return values.reduce(function(a, b) {
return a | b;
});
}
exports.bitWiseOr = bitWiseOr;
function bitWiseAnd(values) {
return values.reduce(function(a, b) {
return a & b;
});
}
exports.bitWiseAnd = bitWiseAnd;
function escape(s) {
return _global.encodeURI(s);
}
exports.escape = escape;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(281);
var TextAst = function() {
function TextAst(value, ngContentIndex, sourceSpan) {
this.value = value;
this.ngContentIndex = ngContentIndex;
this.sourceSpan = sourceSpan;
}
TextAst.prototype.visit = function(visitor, context) {
return visitor.visitText(this, context);
};
return TextAst;
}();
exports.TextAst = TextAst;
var BoundTextAst = function() {
function BoundTextAst(value, ngContentIndex, sourceSpan) {
this.value = value;
this.ngContentIndex = ngContentIndex;
this.sourceSpan = sourceSpan;
}
BoundTextAst.prototype.visit = function(visitor, context) {
return visitor.visitBoundText(this, context);
};
return BoundTextAst;
}();
exports.BoundTextAst = BoundTextAst;
var AttrAst = function() {
function AttrAst(name, value, sourceSpan) {
this.name = name;
this.value = value;
this.sourceSpan = sourceSpan;
}
AttrAst.prototype.visit = function(visitor, context) {
return visitor.visitAttr(this, context);
};
return AttrAst;
}();
exports.AttrAst = AttrAst;
var BoundElementPropertyAst = function() {
function BoundElementPropertyAst(name, type, securityContext, value, unit, sourceSpan) {
this.name = name;
this.type = type;
this.securityContext = securityContext;
this.value = value;
this.unit = unit;
this.sourceSpan = sourceSpan;
}
BoundElementPropertyAst.prototype.visit = function(visitor, context) {
return visitor.visitElementProperty(this, context);
};
return BoundElementPropertyAst;
}();
exports.BoundElementPropertyAst = BoundElementPropertyAst;
var BoundEventAst = function() {
function BoundEventAst(name, target, handler, sourceSpan) {
this.name = name;
this.target = target;
this.handler = handler;
this.sourceSpan = sourceSpan;
}
BoundEventAst.prototype.visit = function(visitor, context) {
return visitor.visitEvent(this, context);
};
Object.defineProperty(BoundEventAst.prototype, "fullName", {
get: function() {
if (lang_1.isPresent(this.target)) {
return this.target + ":" + this.name;
} else {
return this.name;
}
},
enumerable: true,
configurable: true
});
return BoundEventAst;
}();
exports.BoundEventAst = BoundEventAst;
var ReferenceAst = function() {
function ReferenceAst(name, value, sourceSpan) {
this.name = name;
this.value = value;
this.sourceSpan = sourceSpan;
}
ReferenceAst.prototype.visit = function(visitor, context) {
return visitor.visitReference(this, context);
};
return ReferenceAst;
}();
exports.ReferenceAst = ReferenceAst;
var VariableAst = function() {
function VariableAst(name, value, sourceSpan) {
this.name = name;
this.value = value;
this.sourceSpan = sourceSpan;
}
VariableAst.prototype.visit = function(visitor, context) {
return visitor.visitVariable(this, context);
};
return VariableAst;
}();
exports.VariableAst = VariableAst;
var ElementAst = function() {
function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
this.name = name;
this.attrs = attrs;
this.inputs = inputs;
this.outputs = outputs;
this.references = references;
this.directives = directives;
this.providers = providers;
this.hasViewContainer = hasViewContainer;
this.children = children;
this.ngContentIndex = ngContentIndex;
this.sourceSpan = sourceSpan;
}
ElementAst.prototype.visit = function(visitor, context) {
return visitor.visitElement(this, context);
};
return ElementAst;
}();
exports.ElementAst = ElementAst;
var EmbeddedTemplateAst = function() {
function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
this.attrs = attrs;
this.outputs = outputs;
this.references = references;
this.variables = variables;
this.directives = directives;
this.providers = providers;
this.hasViewContainer = hasViewContainer;
this.children = children;
this.ngContentIndex = ngContentIndex;
this.sourceSpan = sourceSpan;
}
EmbeddedTemplateAst.prototype.visit = function(visitor, context) {
return visitor.visitEmbeddedTemplate(this, context);
};
return EmbeddedTemplateAst;
}();
exports.EmbeddedTemplateAst = EmbeddedTemplateAst;
var BoundDirectivePropertyAst = function() {
function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
this.directiveName = directiveName;
this.templateName = templateName;
this.value = value;
this.sourceSpan = sourceSpan;
}
BoundDirectivePropertyAst.prototype.visit = function(visitor, context) {
return visitor.visitDirectiveProperty(this, context);
};
return BoundDirectivePropertyAst;
}();
exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;
var DirectiveAst = function() {
function DirectiveAst(directive, inputs, hostProperties, hostEvents, sourceSpan) {
this.directive = directive;
this.inputs = inputs;
this.hostProperties = hostProperties;
this.hostEvents = hostEvents;
this.sourceSpan = sourceSpan;
}
DirectiveAst.prototype.visit = function(visitor, context) {
return visitor.visitDirective(this, context);
};
return DirectiveAst;
}();
exports.DirectiveAst = DirectiveAst;
var ProviderAst = function() {
function ProviderAst(token, multiProvider, eager, providers, providerType, sourceSpan) {
this.token = token;
this.multiProvider = multiProvider;
this.eager = eager;
this.providers = providers;
this.providerType = providerType;
this.sourceSpan = sourceSpan;
}
ProviderAst.prototype.visit = function(visitor, context) {
return null;
};
return ProviderAst;
}();
exports.ProviderAst = ProviderAst;
(function(ProviderAstType) {
ProviderAstType[ProviderAstType["PublicService"] = 0] = "PublicService";
ProviderAstType[ProviderAstType["PrivateService"] = 1] = "PrivateService";
ProviderAstType[ProviderAstType["Component"] = 2] = "Component";
ProviderAstType[ProviderAstType["Directive"] = 3] = "Directive";
ProviderAstType[ProviderAstType["Builtin"] = 4] = "Builtin";
})(exports.ProviderAstType || (exports.ProviderAstType = {}));
var ProviderAstType = exports.ProviderAstType;
var NgContentAst = function() {
function NgContentAst(index, ngContentIndex, sourceSpan) {
this.index = index;
this.ngContentIndex = ngContentIndex;
this.sourceSpan = sourceSpan;
}
NgContentAst.prototype.visit = function(visitor, context) {
return visitor.visitNgContent(this, context);
};
return NgContentAst;
}();
exports.NgContentAst = NgContentAst;
(function(PropertyBindingType) {
PropertyBindingType[PropertyBindingType["Property"] = 0] = "Property";
PropertyBindingType[PropertyBindingType["Attribute"] = 1] = "Attribute";
PropertyBindingType[PropertyBindingType["Class"] = 2] = "Class";
PropertyBindingType[PropertyBindingType["Style"] = 3] = "Style";
})(exports.PropertyBindingType || (exports.PropertyBindingType = {}));
var PropertyBindingType = exports.PropertyBindingType;
function templateVisitAll(visitor, asts, context) {
if (context === void 0) {
context = null;
}
var result = [];
asts.forEach(function(ast) {
var astResult = ast.visit(visitor, context);
if (lang_1.isPresent(astResult)) {
result.push(astResult);
}
});
return result;
}
exports.templateVisitAll = templateVisitAll;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var core_private_1 = __webpack_require__(284);
var collection_1 = __webpack_require__(285);
var lang_1 = __webpack_require__(281);
var exceptions_1 = __webpack_require__(286);
var ast_1 = __webpack_require__(289);
var parser_1 = __webpack_require__(290);
var html_parser_1 = __webpack_require__(292);
var html_tags_1 = __webpack_require__(296);
var parse_util_1 = __webpack_require__(295);
var template_ast_1 = __webpack_require__(282);
var selector_1 = __webpack_require__(297);
var element_schema_registry_1 = __webpack_require__(279);
var template_preparser_1 = __webpack_require__(298);
var style_url_resolver_1 = __webpack_require__(299);
var html_ast_1 = __webpack_require__(293);
var util_1 = __webpack_require__(300);
var identifiers_1 = __webpack_require__(301);
var provider_parser_1 = __webpack_require__(304);
var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(var-)|(let-)|(ref-|#)|(on-)|(bindon-))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/g;
var TEMPLATE_ELEMENT = "template";
var TEMPLATE_ATTR = "template";
var TEMPLATE_ATTR_PREFIX = "*";
var CLASS_ATTR = "class";
var PROPERTY_PARTS_SEPARATOR = ".";
var ATTRIBUTE_PREFIX = "attr";
var CLASS_PREFIX = "class";
var STYLE_PREFIX = "style";
var TEXT_CSS_SELECTOR = selector_1.CssSelector.parse("*")[0];
exports.TEMPLATE_TRANSFORMS = new core_1.OpaqueToken("TemplateTransforms");
var TemplateParseError = function(_super) {
__extends(TemplateParseError, _super);
function TemplateParseError(message, span, level) {
_super.call(this, span, message, level);
}
return TemplateParseError;
}(parse_util_1.ParseError);
exports.TemplateParseError = TemplateParseError;
var TemplateParseResult = function() {
function TemplateParseResult(templateAst, errors) {
this.templateAst = templateAst;
this.errors = errors;
}
return TemplateParseResult;
}();
exports.TemplateParseResult = TemplateParseResult;
var TemplateParser = function() {
function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
this._exprParser = _exprParser;
this._schemaRegistry = _schemaRegistry;
this._htmlParser = _htmlParser;
this._console = _console;
this.transforms = transforms;
}
TemplateParser.prototype.parse = function(component, template, directives, pipes, templateUrl) {
var result = this.tryParse(component, template, directives, pipes, templateUrl);
var warnings = result.errors.filter(function(error) {
return error.level === parse_util_1.ParseErrorLevel.WARNING;
});
var errors = result.errors.filter(function(error) {
return error.level === parse_util_1.ParseErrorLevel.FATAL;
});
if (warnings.length > 0) {
this._console.warn("Template parse warnings:\n" + warnings.join("\n"));
}
if (errors.length > 0) {
var errorString = errors.join("\n");
throw new exceptions_1.BaseException("Template parse errors:\n" + errorString);
}
return result.templateAst;
};
TemplateParser.prototype.tryParse = function(component, template, directives, pipes, templateUrl) {
var htmlAstWithErrors = this._htmlParser.parse(template, templateUrl);
var errors = htmlAstWithErrors.errors;
var result;
if (htmlAstWithErrors.rootNodes.length > 0) {
var uniqDirectives = removeDuplicates(directives);
var uniqPipes = removeDuplicates(pipes);
var providerViewContext = new provider_parser_1.ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan);
var parseVisitor = new TemplateParseVisitor(providerViewContext, uniqDirectives, uniqPipes, this._exprParser, this._schemaRegistry);
result = html_ast_1.htmlVisitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
errors = errors.concat(parseVisitor.errors).concat(providerViewContext.errors);
} else {
result = [];
}
if (errors.length > 0) {
return new TemplateParseResult(result, errors);
}
if (lang_1.isPresent(this.transforms)) {
this.transforms.forEach(function(transform) {
result = template_ast_1.templateVisitAll(transform, result);
});
}
return new TemplateParseResult(result, errors);
};
TemplateParser.decorators = [ {
type: core_1.Injectable
} ];
TemplateParser.ctorParameters = [ {
type: parser_1.Parser
}, {
type: element_schema_registry_1.ElementSchemaRegistry
}, {
type: html_parser_1.HtmlParser
}, {
type: core_private_1.Console
}, {
type: undefined,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Inject,
args: [ exports.TEMPLATE_TRANSFORMS ]
} ]
} ];
return TemplateParser;
}();
exports.TemplateParser = TemplateParser;
var TemplateParseVisitor = function() {
function TemplateParseVisitor(providerViewContext, directives, pipes, _exprParser, _schemaRegistry) {
var _this = this;
this.providerViewContext = providerViewContext;
this._exprParser = _exprParser;
this._schemaRegistry = _schemaRegistry;
this.errors = [];
this.directivesIndex = new Map();
this.ngContentCount = 0;
this.selectorMatcher = new selector_1.SelectorMatcher();
collection_1.ListWrapper.forEachWithIndex(directives, function(directive, index) {
var selector = selector_1.CssSelector.parse(directive.selector);
_this.selectorMatcher.addSelectables(selector, directive);
_this.directivesIndex.set(directive, index);
});
this.pipesByName = new Map();
pipes.forEach(function(pipe) {
return _this.pipesByName.set(pipe.name, pipe);
});
}
TemplateParseVisitor.prototype._reportError = function(message, sourceSpan, level) {
if (level === void 0) {
level = parse_util_1.ParseErrorLevel.FATAL;
}
this.errors.push(new TemplateParseError(message, sourceSpan, level));
};
TemplateParseVisitor.prototype._parseInterpolation = function(value, sourceSpan) {
var sourceInfo = sourceSpan.start.toString();
try {
var ast = this._exprParser.parseInterpolation(value, sourceInfo);
this._checkPipes(ast, sourceSpan);
if (lang_1.isPresent(ast) && ast.ast.expressions.length > core_private_1.MAX_INTERPOLATION_VALUES) {
throw new exceptions_1.BaseException("Only support at most " + core_private_1.MAX_INTERPOLATION_VALUES + " interpolation values!");
}
return ast;
} catch (e) {
this._reportError("" + e, sourceSpan);
return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
}
};
TemplateParseVisitor.prototype._parseAction = function(value, sourceSpan) {
var sourceInfo = sourceSpan.start.toString();
try {
var ast = this._exprParser.parseAction(value, sourceInfo);
this._checkPipes(ast, sourceSpan);
return ast;
} catch (e) {
this._reportError("" + e, sourceSpan);
return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
}
};
TemplateParseVisitor.prototype._parseBinding = function(value, sourceSpan) {
var sourceInfo = sourceSpan.start.toString();
try {
var ast = this._exprParser.parseBinding(value, sourceInfo);
this._checkPipes(ast, sourceSpan);
return ast;
} catch (e) {
this._reportError("" + e, sourceSpan);
return this._exprParser.wrapLiteralPrimitive("ERROR", sourceInfo);
}
};
TemplateParseVisitor.prototype._parseTemplateBindings = function(value, sourceSpan) {
var _this = this;
var sourceInfo = sourceSpan.start.toString();
try {
var bindingsResult = this._exprParser.parseTemplateBindings(value, sourceInfo);
bindingsResult.templateBindings.forEach(function(binding) {
if (lang_1.isPresent(binding.expression)) {
_this._checkPipes(binding.expression, sourceSpan);
}
});
bindingsResult.warnings.forEach(function(warning) {
_this._reportError(warning, sourceSpan, parse_util_1.ParseErrorLevel.WARNING);
});
return bindingsResult.templateBindings;
} catch (e) {
this._reportError("" + e, sourceSpan);
return [];
}
};
TemplateParseVisitor.prototype._checkPipes = function(ast, sourceSpan) {
var _this = this;
if (lang_1.isPresent(ast)) {
var collector = new PipeCollector();
ast.visit(collector);
collector.pipes.forEach(function(pipeName) {
if (!_this.pipesByName.has(pipeName)) {
_this._reportError("The pipe '" + pipeName + "' could not be found", sourceSpan);
}
});
}
};
TemplateParseVisitor.prototype.visitExpansion = function(ast, context) {
return null;
};
TemplateParseVisitor.prototype.visitExpansionCase = function(ast, context) {
return null;
};
TemplateParseVisitor.prototype.visitText = function(ast, parent) {
var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
var expr = this._parseInterpolation(ast.value, ast.sourceSpan);
if (lang_1.isPresent(expr)) {
return new template_ast_1.BoundTextAst(expr, ngContentIndex, ast.sourceSpan);
} else {
return new template_ast_1.TextAst(ast.value, ngContentIndex, ast.sourceSpan);
}
};
TemplateParseVisitor.prototype.visitAttr = function(ast, contex) {
return new template_ast_1.AttrAst(ast.name, ast.value, ast.sourceSpan);
};
TemplateParseVisitor.prototype.visitComment = function(ast, context) {
return null;
};
TemplateParseVisitor.prototype.visitElement = function(element, parent) {
var _this = this;
var nodeName = element.name;
var preparsedElement = template_preparser_1.preparseElement(element);
if (preparsedElement.type === template_preparser_1.PreparsedElementType.SCRIPT || preparsedElement.type === template_preparser_1.PreparsedElementType.STYLE) {
return null;
}
if (preparsedElement.type === template_preparser_1.PreparsedElementType.STYLESHEET && style_url_resolver_1.isStyleUrlResolvable(preparsedElement.hrefAttr)) {
return null;
}
var matchableAttrs = [];
var elementOrDirectiveProps = [];
var elementOrDirectiveRefs = [];
var elementVars = [];
var events = [];
var templateElementOrDirectiveProps = [];
var templateMatchableAttrs = [];
var templateElementVars = [];
var hasInlineTemplates = false;
var attrs = [];
var lcElName = html_tags_1.splitNsName(nodeName.toLowerCase())[1];
var isTemplateElement = lcElName == TEMPLATE_ELEMENT;
element.attrs.forEach(function(attr) {
var hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);
var hasTemplateBinding = _this._parseInlineTemplateBinding(attr, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
if (!hasBinding && !hasTemplateBinding) {
attrs.push(_this.visitAttr(attr, null));
matchableAttrs.push([ attr.name, attr.value ]);
}
if (hasTemplateBinding) {
hasInlineTemplates = true;
}
});
var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
var directiveMetas = this._parseDirectives(this.selectorMatcher, elementCssSelector);
var references = [];
var directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references);
var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directiveAsts);
var isViewRoot = parent.isTemplateElement || hasInlineTemplates;
var providerContext = new provider_parser_1.ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, element.sourceSpan);
var children = html_ast_1.htmlVisitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
providerContext.afterElement();
var projectionSelector = lang_1.isPresent(preparsedElement.projectAs) ? selector_1.CssSelector.parse(preparsedElement.projectAs)[0] : elementCssSelector;
var ngContentIndex = parent.findNgContentIndex(projectionSelector);
var parsedElement;
if (preparsedElement.type === template_preparser_1.PreparsedElementType.NG_CONTENT) {
if (lang_1.isPresent(element.children) && element.children.length > 0) {
this._reportError("<ng-content> element cannot have content. <ng-content> must be immediately followed by </ng-content>", element.sourceSpan);
}
parsedElement = new template_ast_1.NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
} else if (isTemplateElement) {
this._assertAllEventsPublishedByDirectives(directiveAsts, events);
this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);
parsedElement = new template_ast_1.EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
} else {
this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
var ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
parsedElement = new template_ast_1.ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan);
}
if (hasInlineTemplates) {
var templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
var templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateCssSelector);
var templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, []);
var templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectiveAsts);
this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
var templateProviderContext = new provider_parser_1.ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], element.sourceSpan);
templateProviderContext.afterElement();
parsedElement = new template_ast_1.EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, [ parsedElement ], ngContentIndex, element.sourceSpan);
}
return parsedElement;
};
TemplateParseVisitor.prototype._parseInlineTemplateBinding = function(attr, targetMatchableAttrs, targetProps, targetVars) {
var templateBindingsSource = null;
if (attr.name == TEMPLATE_ATTR) {
templateBindingsSource = attr.value;
} else if (attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {
var key = attr.name.substring(TEMPLATE_ATTR_PREFIX.length);
templateBindingsSource = attr.value.length == 0 ? key : key + " " + attr.value;
}
if (lang_1.isPresent(templateBindingsSource)) {
var bindings = this._parseTemplateBindings(templateBindingsSource, attr.sourceSpan);
for (var i = 0; i < bindings.length; i++) {
var binding = bindings[i];
if (binding.keyIsVar) {
targetVars.push(new template_ast_1.VariableAst(binding.key, binding.name, attr.sourceSpan));
} else if (lang_1.isPresent(binding.expression)) {
this._parsePropertyAst(binding.key, binding.expression, attr.sourceSpan, targetMatchableAttrs, targetProps);
} else {
targetMatchableAttrs.push([ binding.key, "" ]);
this._parseLiteralAttr(binding.key, null, attr.sourceSpan, targetProps);
}
}
return true;
}
return false;
};
TemplateParseVisitor.prototype._parseAttr = function(isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {
var attrName = this._normalizeAttributeName(attr.name);
var attrValue = attr.value;
var bindParts = lang_1.RegExpWrapper.firstMatch(BIND_NAME_REGEXP, attrName);
var hasBinding = false;
if (lang_1.isPresent(bindParts)) {
hasBinding = true;
if (lang_1.isPresent(bindParts[1])) {
this._parseProperty(bindParts[7], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
} else if (lang_1.isPresent(bindParts[2])) {
var identifier = bindParts[7];
if (isTemplateElement) {
this._reportError('"var-" on <template> elements is deprecated. Use "let-" instead!', attr.sourceSpan, parse_util_1.ParseErrorLevel.WARNING);
this._parseVariable(identifier, attrValue, attr.sourceSpan, targetVars);
} else {
this._reportError('"var-" on non <template> elements is deprecated. Use "ref-" instead!', attr.sourceSpan, parse_util_1.ParseErrorLevel.WARNING);
this._parseReference(identifier, attrValue, attr.sourceSpan, targetRefs);
}
} else if (lang_1.isPresent(bindParts[3])) {
if (isTemplateElement) {
var identifier = bindParts[7];
this._parseVariable(identifier, attrValue, attr.sourceSpan, targetVars);
} else {
this._reportError('"let-" is only supported on template elements.', attr.sourceSpan);
}
} else if (lang_1.isPresent(bindParts[4])) {
var identifier = bindParts[7];
this._parseReference(identifier, attrValue, attr.sourceSpan, targetRefs);
} else if (lang_1.isPresent(bindParts[5])) {
this._parseEvent(bindParts[7], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
} else if (lang_1.isPresent(bindParts[6])) {
this._parseProperty(bindParts[7], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
this._parseAssignmentEvent(bindParts[7], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
} else if (lang_1.isPresent(bindParts[8])) {
this._parseProperty(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
this._parseAssignmentEvent(bindParts[8], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
} else if (lang_1.isPresent(bindParts[9])) {
this._parseProperty(bindParts[9], attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
} else if (lang_1.isPresent(bindParts[10])) {
this._parseEvent(bindParts[10], attrValue, attr.sourceSpan, targetMatchableAttrs, targetEvents);
}
} else {
hasBinding = this._parsePropertyInterpolation(attrName, attrValue, attr.sourceSpan, targetMatchableAttrs, targetProps);
}
if (!hasBinding) {
this._parseLiteralAttr(attrName, attrValue, attr.sourceSpan, targetProps);
}
return hasBinding;
};
TemplateParseVisitor.prototype._normalizeAttributeName = function(attrName) {
return attrName.toLowerCase().startsWith("data-") ? attrName.substring(5) : attrName;
};
TemplateParseVisitor.prototype._parseVariable = function(identifier, value, sourceSpan, targetVars) {
if (identifier.indexOf("-") > -1) {
this._reportError('"-" is not allowed in variable names', sourceSpan);
}
targetVars.push(new template_ast_1.VariableAst(identifier, value, sourceSpan));
};
TemplateParseVisitor.prototype._parseReference = function(identifier, value, sourceSpan, targetRefs) {
if (identifier.indexOf("-") > -1) {
this._reportError('"-" is not allowed in reference names', sourceSpan);
}
targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
};
TemplateParseVisitor.prototype._parseProperty = function(name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
this._parsePropertyAst(name, this._parseBinding(expression, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
};
TemplateParseVisitor.prototype._parsePropertyInterpolation = function(name, value, sourceSpan, targetMatchableAttrs, targetProps) {
var expr = this._parseInterpolation(value, sourceSpan);
if (lang_1.isPresent(expr)) {
this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
return true;
}
return false;
};
TemplateParseVisitor.prototype._parsePropertyAst = function(name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
targetMatchableAttrs.push([ name, ast.source ]);
targetProps.push(new BoundElementOrDirectiveProperty(name, ast, false, sourceSpan));
};
TemplateParseVisitor.prototype._parseAssignmentEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
this._parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
};
TemplateParseVisitor.prototype._parseEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
var parts = util_1.splitAtColon(name, [ null, name ]);
var target = parts[0];
var eventName = parts[1];
var ast = this._parseAction(expression, sourceSpan);
targetMatchableAttrs.push([ name, ast.source ]);
targetEvents.push(new template_ast_1.BoundEventAst(eventName, target, ast, sourceSpan));
};
TemplateParseVisitor.prototype._parseLiteralAttr = function(name, value, sourceSpan, targetProps) {
targetProps.push(new BoundElementOrDirectiveProperty(name, this._exprParser.wrapLiteralPrimitive(value, ""), true, sourceSpan));
};
TemplateParseVisitor.prototype._parseDirectives = function(selectorMatcher, elementCssSelector) {
var _this = this;
var directives = collection_1.ListWrapper.createFixedSize(this.directivesIndex.size);
selectorMatcher.match(elementCssSelector, function(selector, directive) {
directives[_this.directivesIndex.get(directive)] = directive;
});
return directives.filter(function(dir) {
return lang_1.isPresent(dir);
});
};
TemplateParseVisitor.prototype._createDirectiveAsts = function(isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, sourceSpan, targetReferences) {
var _this = this;
var matchedReferences = new Set();
var component = null;
var directiveAsts = directives.map(function(directive) {
if (directive.isComponent) {
component = directive;
}
var hostProperties = [];
var hostEvents = [];
var directiveProperties = [];
_this._createDirectiveHostPropertyAsts(elementName, directive.hostProperties, sourceSpan, hostProperties);
_this._createDirectiveHostEventAsts(directive.hostListeners, sourceSpan, hostEvents);
_this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties);
elementOrDirectiveRefs.forEach(function(elOrDirRef) {
if (elOrDirRef.value.length === 0 && directive.isComponent || directive.exportAs == elOrDirRef.value) {
targetReferences.push(new template_ast_1.ReferenceAst(elOrDirRef.name, identifiers_1.identifierToken(directive.type), elOrDirRef.sourceSpan));
matchedReferences.add(elOrDirRef.name);
}
});
return new template_ast_1.DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, sourceSpan);
});
elementOrDirectiveRefs.forEach(function(elOrDirRef) {
if (elOrDirRef.value.length > 0) {
if (!collection_1.SetWrapper.has(matchedReferences, elOrDirRef.name)) {
_this._reportError('There is no directive with "exportAs" set to "' + elOrDirRef.value + '"', elOrDirRef.sourceSpan);
}
} else if (lang_1.isBlank(component)) {
var refToken = null;
if (isTemplateElement) {
refToken = identifiers_1.identifierToken(identifiers_1.Identifiers.TemplateRef);
}
targetReferences.push(new template_ast_1.ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
}
});
return directiveAsts;
};
TemplateParseVisitor.prototype._createDirectiveHostPropertyAsts = function(elementName, hostProps, sourceSpan, targetPropertyAsts) {
var _this = this;
if (lang_1.isPresent(hostProps)) {
collection_1.StringMapWrapper.forEach(hostProps, function(expression, propName) {
var exprAst = _this._parseBinding(expression, sourceSpan);
targetPropertyAsts.push(_this._createElementPropertyAst(elementName, propName, exprAst, sourceSpan));
});
}
};
TemplateParseVisitor.prototype._createDirectiveHostEventAsts = function(hostListeners, sourceSpan, targetEventAsts) {
var _this = this;
if (lang_1.isPresent(hostListeners)) {
collection_1.StringMapWrapper.forEach(hostListeners, function(expression, propName) {
_this._parseEvent(propName, expression, sourceSpan, [], targetEventAsts);
});
}
};
TemplateParseVisitor.prototype._createDirectivePropertyAsts = function(directiveProperties, boundProps, targetBoundDirectiveProps) {
if (lang_1.isPresent(directiveProperties)) {
var boundPropsByName = new Map();
boundProps.forEach(function(boundProp) {
var prevValue = boundPropsByName.get(boundProp.name);
if (lang_1.isBlank(prevValue) || prevValue.isLiteral) {
boundPropsByName.set(boundProp.name, boundProp);
}
});
collection_1.StringMapWrapper.forEach(directiveProperties, function(elProp, dirProp) {
var boundProp = boundPropsByName.get(elProp);
if (lang_1.isPresent(boundProp)) {
targetBoundDirectiveProps.push(new template_ast_1.BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
}
});
}
};
TemplateParseVisitor.prototype._createElementPropertyAsts = function(elementName, props, directives) {
var _this = this;
var boundElementProps = [];
var boundDirectivePropsIndex = new Map();
directives.forEach(function(directive) {
directive.inputs.forEach(function(prop) {
boundDirectivePropsIndex.set(prop.templateName, prop);
});
});
props.forEach(function(prop) {
if (!prop.isLiteral && lang_1.isBlank(boundDirectivePropsIndex.get(prop.name))) {
boundElementProps.push(_this._createElementPropertyAst(elementName, prop.name, prop.expression, prop.sourceSpan));
}
});
return boundElementProps;
};
TemplateParseVisitor.prototype._createElementPropertyAst = function(elementName, name, ast, sourceSpan) {
var unit = null;
var bindingType;
var boundPropertyName;
var parts = name.split(PROPERTY_PARTS_SEPARATOR);
var securityContext;
if (parts.length === 1) {
boundPropertyName = this._schemaRegistry.getMappedPropName(parts[0]);
securityContext = this._schemaRegistry.securityContext(elementName, boundPropertyName);
bindingType = template_ast_1.PropertyBindingType.Property;
if (!this._schemaRegistry.hasProperty(elementName, boundPropertyName)) {
this._reportError("Can't bind to '" + boundPropertyName + "' since it isn't a known native property", sourceSpan);
}
} else {
if (parts[0] == ATTRIBUTE_PREFIX) {
boundPropertyName = parts[1];
if (boundPropertyName.toLowerCase().startsWith("on")) {
this._reportError("Binding to event attribute '" + boundPropertyName + "' is disallowed " + ("for security reasons, please use (" + boundPropertyName.slice(2) + ")=..."), sourceSpan);
}
securityContext = this._schemaRegistry.securityContext(elementName, this._schemaRegistry.getMappedPropName(boundPropertyName));
var nsSeparatorIdx = boundPropertyName.indexOf(":");
if (nsSeparatorIdx > -1) {
var ns = boundPropertyName.substring(0, nsSeparatorIdx);
var name_1 = boundPropertyName.substring(nsSeparatorIdx + 1);
boundPropertyName = html_tags_1.mergeNsAndName(ns, name_1);
}
bindingType = template_ast_1.PropertyBindingType.Attribute;
} else if (parts[0] == CLASS_PREFIX) {
boundPropertyName = parts[1];
bindingType = template_ast_1.PropertyBindingType.Class;
securityContext = core_private_1.SecurityContext.NONE;
} else if (parts[0] == STYLE_PREFIX) {
unit = parts.length > 2 ? parts[2] : null;
boundPropertyName = parts[1];
bindingType = template_ast_1.PropertyBindingType.Style;
securityContext = core_private_1.SecurityContext.STYLE;
} else {
this._reportError("Invalid property name '" + name + "'", sourceSpan);
bindingType = null;
securityContext = null;
}
}
return new template_ast_1.BoundElementPropertyAst(boundPropertyName, bindingType, securityContext, ast, unit, sourceSpan);
};
TemplateParseVisitor.prototype._findComponentDirectiveNames = function(directives) {
var componentTypeNames = [];
directives.forEach(function(directive) {
var typeName = directive.directive.type.name;
if (directive.directive.isComponent) {
componentTypeNames.push(typeName);
}
});
return componentTypeNames;
};
TemplateParseVisitor.prototype._assertOnlyOneComponent = function(directives, sourceSpan) {
var componentTypeNames = this._findComponentDirectiveNames(directives);
if (componentTypeNames.length > 1) {
this._reportError("More than one component: " + componentTypeNames.join(","), sourceSpan);
}
};
TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function(directives, elementProps, sourceSpan) {
var _this = this;
var componentTypeNames = this._findComponentDirectiveNames(directives);
if (componentTypeNames.length > 0) {
this._reportError("Components on an embedded template: " + componentTypeNames.join(","), sourceSpan);
}
elementProps.forEach(function(prop) {
_this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template", sourceSpan);
});
};
TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function(directives, events) {
var _this = this;
var allDirectiveEvents = new Set();
directives.forEach(function(directive) {
collection_1.StringMapWrapper.forEach(directive.directive.outputs, function(eventName, _) {
allDirectiveEvents.add(eventName);
});
});
events.forEach(function(event) {
if (lang_1.isPresent(event.target) || !collection_1.SetWrapper.has(allDirectiveEvents, event.name)) {
_this._reportError("Event binding " + event.fullName + " not emitted by any directive on an embedded template", event.sourceSpan);
}
});
};
return TemplateParseVisitor;
}();
var NonBindableVisitor = function() {
function NonBindableVisitor() {}
NonBindableVisitor.prototype.visitElement = function(ast, parent) {
var preparsedElement = template_preparser_1.preparseElement(ast);
if (preparsedElement.type === template_preparser_1.PreparsedElementType.SCRIPT || preparsedElement.type === template_preparser_1.PreparsedElementType.STYLE || preparsedElement.type === template_preparser_1.PreparsedElementType.STYLESHEET) {
return null;
}
var attrNameAndValues = ast.attrs.map(function(attrAst) {
return [ attrAst.name, attrAst.value ];
});
var selector = createElementCssSelector(ast.name, attrNameAndValues);
var ngContentIndex = parent.findNgContentIndex(selector);
var children = html_ast_1.htmlVisitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
return new template_ast_1.ElementAst(ast.name, html_ast_1.htmlVisitAll(this, ast.attrs), [], [], [], [], [], false, children, ngContentIndex, ast.sourceSpan);
};
NonBindableVisitor.prototype.visitComment = function(ast, context) {
return null;
};
NonBindableVisitor.prototype.visitAttr = function(ast, context) {
return new template_ast_1.AttrAst(ast.name, ast.value, ast.sourceSpan);
};
NonBindableVisitor.prototype.visitText = function(ast, parent) {
var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
return new template_ast_1.TextAst(ast.value, ngContentIndex, ast.sourceSpan);
};
NonBindableVisitor.prototype.visitExpansion = function(ast, context) {
return ast;
};
NonBindableVisitor.prototype.visitExpansionCase = function(ast, context) {
return ast;
};
return NonBindableVisitor;
}();
var BoundElementOrDirectiveProperty = function() {
function BoundElementOrDirectiveProperty(name, expression, isLiteral, sourceSpan) {
this.name = name;
this.expression = expression;
this.isLiteral = isLiteral;
this.sourceSpan = sourceSpan;
}
return BoundElementOrDirectiveProperty;
}();
var ElementOrDirectiveRef = function() {
function ElementOrDirectiveRef(name, value, sourceSpan) {
this.name = name;
this.value = value;
this.sourceSpan = sourceSpan;
}
return ElementOrDirectiveRef;
}();
function splitClasses(classAttrValue) {
return lang_1.StringWrapper.split(classAttrValue.trim(), /\s+/g);
}
exports.splitClasses = splitClasses;
var ElementContext = function() {
function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
this.isTemplateElement = isTemplateElement;
this._ngContentIndexMatcher = _ngContentIndexMatcher;
this._wildcardNgContentIndex = _wildcardNgContentIndex;
this.providerContext = providerContext;
}
ElementContext.create = function(isTemplateElement, directives, providerContext) {
var matcher = new selector_1.SelectorMatcher();
var wildcardNgContentIndex = null;
var component = directives.find(function(directive) {
return directive.directive.isComponent;
});
if (lang_1.isPresent(component)) {
var ngContentSelectors = component.directive.template.ngContentSelectors;
for (var i = 0; i < ngContentSelectors.length; i++) {
var selector = ngContentSelectors[i];
if (lang_1.StringWrapper.equals(selector, "*")) {
wildcardNgContentIndex = i;
} else {
matcher.addSelectables(selector_1.CssSelector.parse(ngContentSelectors[i]), i);
}
}
}
return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
};
ElementContext.prototype.findNgContentIndex = function(selector) {
var ngContentIndices = [];
this._ngContentIndexMatcher.match(selector, function(selector, ngContentIndex) {
ngContentIndices.push(ngContentIndex);
});
collection_1.ListWrapper.sort(ngContentIndices);
if (lang_1.isPresent(this._wildcardNgContentIndex)) {
ngContentIndices.push(this._wildcardNgContentIndex);
}
return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
};
return ElementContext;
}();
function createElementCssSelector(elementName, matchableAttrs) {
var cssSelector = new selector_1.CssSelector();
var elNameNoNs = html_tags_1.splitNsName(elementName)[1];
cssSelector.setElement(elNameNoNs);
for (var i = 0; i < matchableAttrs.length; i++) {
var attrName = matchableAttrs[i][0];
var attrNameNoNs = html_tags_1.splitNsName(attrName)[1];
var attrValue = matchableAttrs[i][1];
cssSelector.addAttribute(attrNameNoNs, attrValue);
if (attrName.toLowerCase() == CLASS_ATTR) {
var classes = splitClasses(attrValue);
classes.forEach(function(className) {
return cssSelector.addClassName(className);
});
}
}
return cssSelector;
}
var EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new selector_1.SelectorMatcher(), null, null);
var NON_BINDABLE_VISITOR = new NonBindableVisitor();
var PipeCollector = function(_super) {
__extends(PipeCollector, _super);
function PipeCollector() {
_super.apply(this, arguments);
this.pipes = new Set();
}
PipeCollector.prototype.visitPipe = function(ast, context) {
this.pipes.add(ast.name);
ast.exp.visit(this);
this.visitAll(ast.args, context);
return null;
};
return PipeCollector;
}(ast_1.RecursiveAstVisitor);
exports.PipeCollector = PipeCollector;
function removeDuplicates(items) {
var res = [];
items.forEach(function(item) {
var hasMatch = res.filter(function(r) {
return r.type.name == item.type.name && r.type.moduleUrl == item.type.moduleUrl && r.type.runtime == item.type.runtime;
}).length > 0;
if (!hasMatch) {
res.push(item);
}
});
return res;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
exports.isDefaultChangeDetectionStrategy = core_1.__core_private__.isDefaultChangeDetectionStrategy;
exports.ChangeDetectorState = core_1.__core_private__.ChangeDetectorState;
exports.CHANGE_DETECTION_STRATEGY_VALUES = core_1.__core_private__.CHANGE_DETECTION_STRATEGY_VALUES;
exports.constructDependencies = core_1.__core_private__.constructDependencies;
exports.LifecycleHooks = core_1.__core_private__.LifecycleHooks;
exports.LIFECYCLE_HOOKS_VALUES = core_1.__core_private__.LIFECYCLE_HOOKS_VALUES;
exports.ReflectorReader = core_1.__core_private__.ReflectorReader;
exports.ReflectorComponentResolver = core_1.__core_private__.ReflectorComponentResolver;
exports.AppElement = core_1.__core_private__.AppElement;
exports.AppView = core_1.__core_private__.AppView;
exports.DebugAppView = core_1.__core_private__.DebugAppView;
exports.ViewType = core_1.__core_private__.ViewType;
exports.MAX_INTERPOLATION_VALUES = core_1.__core_private__.MAX_INTERPOLATION_VALUES;
exports.checkBinding = core_1.__core_private__.checkBinding;
exports.flattenNestedViewRenderNodes = core_1.__core_private__.flattenNestedViewRenderNodes;
exports.interpolate = core_1.__core_private__.interpolate;
exports.ViewUtils = core_1.__core_private__.ViewUtils;
exports.VIEW_ENCAPSULATION_VALUES = core_1.__core_private__.VIEW_ENCAPSULATION_VALUES;
exports.DebugContext = core_1.__core_private__.DebugContext;
exports.StaticNodeDebugInfo = core_1.__core_private__.StaticNodeDebugInfo;
exports.devModeEqual = core_1.__core_private__.devModeEqual;
exports.uninitialized = core_1.__core_private__.uninitialized;
exports.ValueUnwrapper = core_1.__core_private__.ValueUnwrapper;
exports.TemplateRef_ = core_1.__core_private__.TemplateRef_;
exports.RenderDebugInfo = core_1.__core_private__.RenderDebugInfo;
exports.SecurityContext = core_1.__core_private__.SecurityContext;
exports.SanitizationService = core_1.__core_private__.SanitizationService;
exports.createProvider = core_1.__core_private__.createProvider;
exports.isProviderLiteral = core_1.__core_private__.isProviderLiteral;
exports.EMPTY_ARRAY = core_1.__core_private__.EMPTY_ARRAY;
exports.EMPTY_MAP = core_1.__core_private__.EMPTY_MAP;
exports.pureProxy1 = core_1.__core_private__.pureProxy1;
exports.pureProxy2 = core_1.__core_private__.pureProxy2;
exports.pureProxy3 = core_1.__core_private__.pureProxy3;
exports.pureProxy4 = core_1.__core_private__.pureProxy4;
exports.pureProxy5 = core_1.__core_private__.pureProxy5;
exports.pureProxy6 = core_1.__core_private__.pureProxy6;
exports.pureProxy7 = core_1.__core_private__.pureProxy7;
exports.pureProxy8 = core_1.__core_private__.pureProxy8;
exports.pureProxy9 = core_1.__core_private__.pureProxy9;
exports.pureProxy10 = core_1.__core_private__.pureProxy10;
exports.castByValue = core_1.__core_private__.castByValue;
exports.Console = core_1.__core_private__.Console;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(281);
exports.Map = lang_1.global.Map;
exports.Set = lang_1.global.Set;
var createMapFromPairs = function() {
try {
if (new exports.Map([ [ 1, 2 ] ]).size === 1) {
return function createMapFromPairs(pairs) {
return new exports.Map(pairs);
};
}
} catch (e) {}
return function createMapAndPopulateFromPairs(pairs) {
var map = new exports.Map();
for (var i = 0; i < pairs.length; i++) {
var pair = pairs[i];
map.set(pair[0], pair[1]);
}
return map;
};
}();
var createMapFromMap = function() {
try {
if (new exports.Map(new exports.Map())) {
return function createMapFromMap(m) {
return new exports.Map(m);
};
}
} catch (e) {}
return function createMapAndPopulateFromMap(m) {
var map = new exports.Map();
m.forEach(function(v, k) {
map.set(k, v);
});
return map;
};
}();
var _clearValues = function() {
if (new exports.Map().keys().next) {
return function _clearValues(m) {
var keyIterator = m.keys();
var k;
while (!(k = keyIterator.next()).done) {
m.set(k.value, null);
}
};
} else {
return function _clearValuesWithForeEach(m) {
m.forEach(function(v, k) {
m.set(k, null);
});
};
}
}();
var _arrayFromMap = function() {
try {
if (new exports.Map().values().next) {
return function createArrayFromMap(m, getValues) {
return getValues ? Array.from(m.values()) : Array.from(m.keys());
};
}
} catch (e) {}
return function createArrayFromMapWithForeach(m, getValues) {
var res = ListWrapper.createFixedSize(m.size), i = 0;
m.forEach(function(v, k) {
res[i] = getValues ? v : k;
i++;
});
return res;
};
}();
var MapWrapper = function() {
function MapWrapper() {}
MapWrapper.clone = function(m) {
return createMapFromMap(m);
};
MapWrapper.createFromStringMap = function(stringMap) {
var result = new exports.Map();
for (var prop in stringMap) {
result.set(prop, stringMap[prop]);
}
return result;
};
MapWrapper.toStringMap = function(m) {
var r = {};
m.forEach(function(v, k) {
return r[k] = v;
});
return r;
};
MapWrapper.createFromPairs = function(pairs) {
return createMapFromPairs(pairs);
};
MapWrapper.clearValues = function(m) {
_clearValues(m);
};
MapWrapper.iterable = function(m) {
return m;
};
MapWrapper.keys = function(m) {
return _arrayFromMap(m, false);
};
MapWrapper.values = function(m) {
return _arrayFromMap(m, true);
};
return MapWrapper;
}();
exports.MapWrapper = MapWrapper;
var StringMapWrapper = function() {
function StringMapWrapper() {}
StringMapWrapper.create = function() {
return {};
};
StringMapWrapper.contains = function(map, key) {
return map.hasOwnProperty(key);
};
StringMapWrapper.get = function(map, key) {
return map.hasOwnProperty(key) ? map[key] : undefined;
};
StringMapWrapper.set = function(map, key, value) {
map[key] = value;
};
StringMapWrapper.keys = function(map) {
return Object.keys(map);
};
StringMapWrapper.values = function(map) {
return Object.keys(map).reduce(function(r, a) {
r.push(map[a]);
return r;
}, []);
};
StringMapWrapper.isEmpty = function(map) {
for (var prop in map) {
return false;
}
return true;
};
StringMapWrapper.delete = function(map, key) {
delete map[key];
};
StringMapWrapper.forEach = function(map, callback) {
for (var prop in map) {
if (map.hasOwnProperty(prop)) {
callback(map[prop], prop);
}
}
};
StringMapWrapper.merge = function(m1, m2) {
var m = {};
for (var attr in m1) {
if (m1.hasOwnProperty(attr)) {
m[attr] = m1[attr];
}
}
for (var attr in m2) {
if (m2.hasOwnProperty(attr)) {
m[attr] = m2[attr];
}
}
return m;
};
StringMapWrapper.equals = function(m1, m2) {
var k1 = Object.keys(m1);
var k2 = Object.keys(m2);
if (k1.length != k2.length) {
return false;
}
var key;
for (var i = 0; i < k1.length; i++) {
key = k1[i];
if (m1[key] !== m2[key]) {
return false;
}
}
return true;
};
return StringMapWrapper;
}();
exports.StringMapWrapper = StringMapWrapper;
var ListWrapper = function() {
function ListWrapper() {}
ListWrapper.createFixedSize = function(size) {
return new Array(size);
};
ListWrapper.createGrowableSize = function(size) {
return new Array(size);
};
ListWrapper.clone = function(array) {
return array.slice(0);
};
ListWrapper.forEachWithIndex = function(array, fn) {
for (var i = 0; i < array.length; i++) {
fn(array[i], i);
}
};
ListWrapper.first = function(array) {
if (!array) return null;
return array[0];
};
ListWrapper.last = function(array) {
if (!array || array.length == 0) return null;
return array[array.length - 1];
};
ListWrapper.indexOf = function(array, value, startIndex) {
if (startIndex === void 0) {
startIndex = 0;
}
return array.indexOf(value, startIndex);
};
ListWrapper.contains = function(list, el) {
return list.indexOf(el) !== -1;
};
ListWrapper.reversed = function(array) {
var a = ListWrapper.clone(array);
return a.reverse();
};
ListWrapper.concat = function(a, b) {
return a.concat(b);
};
ListWrapper.insert = function(list, index, value) {
list.splice(index, 0, value);
};
ListWrapper.removeAt = function(list, index) {
var res = list[index];
list.splice(index, 1);
return res;
};
ListWrapper.removeAll = function(list, items) {
for (var i = 0; i < items.length; ++i) {
var index = list.indexOf(items[i]);
list.splice(index, 1);
}
};
ListWrapper.remove = function(list, el) {
var index = list.indexOf(el);
if (index > -1) {
list.splice(index, 1);
return true;
}
return false;
};
ListWrapper.clear = function(list) {
list.length = 0;
};
ListWrapper.isEmpty = function(list) {
return list.length == 0;
};
ListWrapper.fill = function(list, value, start, end) {
if (start === void 0) {
start = 0;
}
if (end === void 0) {
end = null;
}
list.fill(value, start, end === null ? list.length : end);
};
ListWrapper.equals = function(a, b) {
if (a.length != b.length) return false;
for (var i = 0; i < a.length; ++i) {
if (a[i] !== b[i]) return false;
}
return true;
};
ListWrapper.slice = function(l, from, to) {
if (from === void 0) {
from = 0;
}
if (to === void 0) {
to = null;
}
return l.slice(from, to === null ? undefined : to);
};
ListWrapper.splice = function(l, from, length) {
return l.splice(from, length);
};
ListWrapper.sort = function(l, compareFn) {
if (lang_1.isPresent(compareFn)) {
l.sort(compareFn);
} else {
l.sort();
}
};
ListWrapper.toString = function(l) {
return l.toString();
};
ListWrapper.toJSON = function(l) {
return JSON.stringify(l);
};
ListWrapper.maximum = function(list, predicate) {
if (list.length == 0) {
return null;
}
var solution = null;
var maxValue = -Infinity;
for (var index = 0; index < list.length; index++) {
var candidate = list[index];
if (lang_1.isBlank(candidate)) {
continue;
}
var candidateValue = predicate(candidate);
if (candidateValue > maxValue) {
solution = candidate;
maxValue = candidateValue;
}
}
return solution;
};
ListWrapper.flatten = function(list) {
var target = [];
_flattenArray(list, target);
return target;
};
ListWrapper.addAll = function(list, source) {
for (var i = 0; i < source.length; i++) {
list.push(source[i]);
}
};
return ListWrapper;
}();
exports.ListWrapper = ListWrapper;
function _flattenArray(source, target) {
if (lang_1.isPresent(source)) {
for (var i = 0; i < source.length; i++) {
var item = source[i];
if (lang_1.isArray(item)) {
_flattenArray(item, target);
} else {
target.push(item);
}
}
}
return target;
}
function isListLikeIterable(obj) {
if (!lang_1.isJsObject(obj)) return false;
return lang_1.isArray(obj) || !(obj instanceof exports.Map) && lang_1.getSymbolIterator() in obj;
}
exports.isListLikeIterable = isListLikeIterable;
function areIterablesEqual(a, b, comparator) {
var iterator1 = a[lang_1.getSymbolIterator()]();
var iterator2 = b[lang_1.getSymbolIterator()]();
while (true) {
var item1 = iterator1.next();
var item2 = iterator2.next();
if (item1.done && item2.done) return true;
if (item1.done || item2.done) return false;
if (!comparator(item1.value, item2.value)) return false;
}
}
exports.areIterablesEqual = areIterablesEqual;
function iterateListLike(obj, fn) {
if (lang_1.isArray(obj)) {
for (var i = 0; i < obj.length; i++) {
fn(obj[i]);
}
} else {
var iterator = obj[lang_1.getSymbolIterator()]();
var item;
while (!(item = iterator.next()).done) {
fn(item.value);
}
}
}
exports.iterateListLike = iterateListLike;
var createSetFromList = function() {
var test = new exports.Set([ 1, 2, 3 ]);
if (test.size === 3) {
return function createSetFromList(lst) {
return new exports.Set(lst);
};
} else {
return function createSetAndPopulateFromList(lst) {
var res = new exports.Set(lst);
if (res.size !== lst.length) {
for (var i = 0; i < lst.length; i++) {
res.add(lst[i]);
}
}
return res;
};
}
}();
var SetWrapper = function() {
function SetWrapper() {}
SetWrapper.createFromList = function(lst) {
return createSetFromList(lst);
};
SetWrapper.has = function(s, key) {
return s.has(key);
};
SetWrapper.delete = function(m, k) {
m.delete(k);
};
return SetWrapper;
}();
exports.SetWrapper = SetWrapper;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var base_wrapped_exception_1 = __webpack_require__(287);
var exception_handler_1 = __webpack_require__(288);
var exception_handler_2 = __webpack_require__(288);
exports.ExceptionHandler = exception_handler_2.ExceptionHandler;
var BaseException = function(_super) {
__extends(BaseException, _super);
function BaseException(message) {
if (message === void 0) {
message = "--";
}
_super.call(this, message);
this.message = message;
this.stack = new Error(message).stack;
}
BaseException.prototype.toString = function() {
return this.message;
};
return BaseException;
}(Error);
exports.BaseException = BaseException;
var WrappedException = function(_super) {
__extends(WrappedException, _super);
function WrappedException(_wrapperMessage, _originalException, _originalStack, _context) {
_super.call(this, _wrapperMessage);
this._wrapperMessage = _wrapperMessage;
this._originalException = _originalException;
this._originalStack = _originalStack;
this._context = _context;
this._wrapperStack = new Error(_wrapperMessage).stack;
}
Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
get: function() {
return this._wrapperMessage;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "wrapperStack", {
get: function() {
return this._wrapperStack;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "originalException", {
get: function() {
return this._originalException;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "originalStack", {
get: function() {
return this._originalStack;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "context", {
get: function() {
return this._context;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "message", {
get: function() {
return exception_handler_1.ExceptionHandler.exceptionToString(this);
},
enumerable: true,
configurable: true
});
WrappedException.prototype.toString = function() {
return this.message;
};
return WrappedException;
}(base_wrapped_exception_1.BaseWrappedException);
exports.WrappedException = WrappedException;
function makeTypeError(message) {
return new TypeError(message);
}
exports.makeTypeError = makeTypeError;
function unimplemented() {
throw new BaseException("unimplemented");
}
exports.unimplemented = unimplemented;
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BaseWrappedException = function(_super) {
__extends(BaseWrappedException, _super);
function BaseWrappedException(message) {
_super.call(this, message);
}
Object.defineProperty(BaseWrappedException.prototype, "wrapperMessage", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "wrapperStack", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "originalException", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "originalStack", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "context", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "message", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
return BaseWrappedException;
}(Error);
exports.BaseWrappedException = BaseWrappedException;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(281);
var base_wrapped_exception_1 = __webpack_require__(287);
var collection_1 = __webpack_require__(285);
var _ArrayLogger = function() {
function _ArrayLogger() {
this.res = [];
}
_ArrayLogger.prototype.log = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logError = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logGroup = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logGroupEnd = function() {};
return _ArrayLogger;
}();
var ExceptionHandler = function() {
function ExceptionHandler(_logger, _rethrowException) {
if (_rethrowException === void 0) {
_rethrowException = true;
}
this._logger = _logger;
this._rethrowException = _rethrowException;
}
ExceptionHandler.exceptionToString = function(exception, stackTrace, reason) {
if (stackTrace === void 0) {
stackTrace = null;
}
if (reason === void 0) {
reason = null;
}
var l = new _ArrayLogger();
var e = new ExceptionHandler(l, false);
e.call(exception, stackTrace, reason);
return l.res.join("\n");
};
ExceptionHandler.prototype.call = function(exception, stackTrace, reason) {
if (stackTrace === void 0) {
stackTrace = null;
}
if (reason === void 0) {
reason = null;
}
var originalException = this._findOriginalException(exception);
var originalStack = this._findOriginalStack(exception);
var context = this._findContext(exception);
this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
this._logger.logError("STACKTRACE:");
this._logger.logError(this._longStackTrace(stackTrace));
}
if (lang_1.isPresent(reason)) {
this._logger.logError("REASON: " + reason);
}
if (lang_1.isPresent(originalException)) {
this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
}
if (lang_1.isPresent(originalStack)) {
this._logger.logError("ORIGINAL STACKTRACE:");
this._logger.logError(this._longStackTrace(originalStack));
}
if (lang_1.isPresent(context)) {
this._logger.logError("ERROR CONTEXT:");
this._logger.logError(context);
}
this._logger.logGroupEnd();
if (this._rethrowException) throw exception;
};
ExceptionHandler.prototype._extractMessage = function(exception) {
return exception instanceof base_wrapped_exception_1.BaseWrappedException ? exception.wrapperMessage : exception.toString();
};
ExceptionHandler.prototype._longStackTrace = function(stackTrace) {
return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join("\n\n-----async gap-----\n") : stackTrace.toString();
};
ExceptionHandler.prototype._findContext = function(exception) {
try {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
return lang_1.isPresent(exception.context) ? exception.context : this._findContext(exception.originalException);
} catch (e) {
return null;
}
};
ExceptionHandler.prototype._findOriginalException = function(exception) {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
var e = exception.originalException;
while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
e = e.originalException;
}
return e;
};
ExceptionHandler.prototype._findOriginalStack = function(exception) {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
var e = exception;
var stack = exception.originalStack;
while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
e = e.originalException;
if (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
stack = e.originalStack;
}
}
return stack;
};
return ExceptionHandler;
}();
exports.ExceptionHandler = ExceptionHandler;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var collection_1 = __webpack_require__(285);
var AST = function() {
function AST() {}
AST.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return null;
};
AST.prototype.toString = function() {
return "AST";
};
return AST;
}();
exports.AST = AST;
var Quote = function(_super) {
__extends(Quote, _super);
function Quote(prefix, uninterpretedExpression, location) {
_super.call(this);
this.prefix = prefix;
this.uninterpretedExpression = uninterpretedExpression;
this.location = location;
}
Quote.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitQuote(this, context);
};
Quote.prototype.toString = function() {
return "Quote";
};
return Quote;
}(AST);
exports.Quote = Quote;
var EmptyExpr = function(_super) {
__extends(EmptyExpr, _super);
function EmptyExpr() {
_super.apply(this, arguments);
}
EmptyExpr.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
};
return EmptyExpr;
}(AST);
exports.EmptyExpr = EmptyExpr;
var ImplicitReceiver = function(_super) {
__extends(ImplicitReceiver, _super);
function ImplicitReceiver() {
_super.apply(this, arguments);
}
ImplicitReceiver.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitImplicitReceiver(this, context);
};
return ImplicitReceiver;
}(AST);
exports.ImplicitReceiver = ImplicitReceiver;
var Chain = function(_super) {
__extends(Chain, _super);
function Chain(expressions) {
_super.call(this);
this.expressions = expressions;
}
Chain.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitChain(this, context);
};
return Chain;
}(AST);
exports.Chain = Chain;
var Conditional = function(_super) {
__extends(Conditional, _super);
function Conditional(condition, trueExp, falseExp) {
_super.call(this);
this.condition = condition;
this.trueExp = trueExp;
this.falseExp = falseExp;
}
Conditional.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitConditional(this, context);
};
return Conditional;
}(AST);
exports.Conditional = Conditional;
var PropertyRead = function(_super) {
__extends(PropertyRead, _super);
function PropertyRead(receiver, name) {
_super.call(this);
this.receiver = receiver;
this.name = name;
}
PropertyRead.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitPropertyRead(this, context);
};
return PropertyRead;
}(AST);
exports.PropertyRead = PropertyRead;
var PropertyWrite = function(_super) {
__extends(PropertyWrite, _super);
function PropertyWrite(receiver, name, value) {
_super.call(this);
this.receiver = receiver;
this.name = name;
this.value = value;
}
PropertyWrite.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitPropertyWrite(this, context);
};
return PropertyWrite;
}(AST);
exports.PropertyWrite = PropertyWrite;
var SafePropertyRead = function(_super) {
__extends(SafePropertyRead, _super);
function SafePropertyRead(receiver, name) {
_super.call(this);
this.receiver = receiver;
this.name = name;
}
SafePropertyRead.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitSafePropertyRead(this, context);
};
return SafePropertyRead;
}(AST);
exports.SafePropertyRead = SafePropertyRead;
var KeyedRead = function(_super) {
__extends(KeyedRead, _super);
function KeyedRead(obj, key) {
_super.call(this);
this.obj = obj;
this.key = key;
}
KeyedRead.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitKeyedRead(this, context);
};
return KeyedRead;
}(AST);
exports.KeyedRead = KeyedRead;
var KeyedWrite = function(_super) {
__extends(KeyedWrite, _super);
function KeyedWrite(obj, key, value) {
_super.call(this);
this.obj = obj;
this.key = key;
this.value = value;
}
KeyedWrite.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitKeyedWrite(this, context);
};
return KeyedWrite;
}(AST);
exports.KeyedWrite = KeyedWrite;
var BindingPipe = function(_super) {
__extends(BindingPipe, _super);
function BindingPipe(exp, name, args) {
_super.call(this);
this.exp = exp;
this.name = name;
this.args = args;
}
BindingPipe.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitPipe(this, context);
};
return BindingPipe;
}(AST);
exports.BindingPipe = BindingPipe;
var LiteralPrimitive = function(_super) {
__extends(LiteralPrimitive, _super);
function LiteralPrimitive(value) {
_super.call(this);
this.value = value;
}
LiteralPrimitive.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitLiteralPrimitive(this, context);
};
return LiteralPrimitive;
}(AST);
exports.LiteralPrimitive = LiteralPrimitive;
var LiteralArray = function(_super) {
__extends(LiteralArray, _super);
function LiteralArray(expressions) {
_super.call(this);
this.expressions = expressions;
}
LiteralArray.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitLiteralArray(this, context);
};
return LiteralArray;
}(AST);
exports.LiteralArray = LiteralArray;
var LiteralMap = function(_super) {
__extends(LiteralMap, _super);
function LiteralMap(keys, values) {
_super.call(this);
this.keys = keys;
this.values = values;
}
LiteralMap.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitLiteralMap(this, context);
};
return LiteralMap;
}(AST);
exports.LiteralMap = LiteralMap;
var Interpolation = function(_super) {
__extends(Interpolation, _super);
function Interpolation(strings, expressions) {
_super.call(this);
this.strings = strings;
this.expressions = expressions;
}
Interpolation.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitInterpolation(this, context);
};
return Interpolation;
}(AST);
exports.Interpolation = Interpolation;
var Binary = function(_super) {
__extends(Binary, _super);
function Binary(operation, left, right) {
_super.call(this);
this.operation = operation;
this.left = left;
this.right = right;
}
Binary.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitBinary(this, context);
};
return Binary;
}(AST);
exports.Binary = Binary;
var PrefixNot = function(_super) {
__extends(PrefixNot, _super);
function PrefixNot(expression) {
_super.call(this);
this.expression = expression;
}
PrefixNot.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitPrefixNot(this, context);
};
return PrefixNot;
}(AST);
exports.PrefixNot = PrefixNot;
var MethodCall = function(_super) {
__extends(MethodCall, _super);
function MethodCall(receiver, name, args) {
_super.call(this);
this.receiver = receiver;
this.name = name;
this.args = args;
}
MethodCall.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitMethodCall(this, context);
};
return MethodCall;
}(AST);
exports.MethodCall = MethodCall;
var SafeMethodCall = function(_super) {
__extends(SafeMethodCall, _super);
function SafeMethodCall(receiver, name, args) {
_super.call(this);
this.receiver = receiver;
this.name = name;
this.args = args;
}
SafeMethodCall.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitSafeMethodCall(this, context);
};
return SafeMethodCall;
}(AST);
exports.SafeMethodCall = SafeMethodCall;
var FunctionCall = function(_super) {
__extends(FunctionCall, _super);
function FunctionCall(target, args) {
_super.call(this);
this.target = target;
this.args = args;
}
FunctionCall.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return visitor.visitFunctionCall(this, context);
};
return FunctionCall;
}(AST);
exports.FunctionCall = FunctionCall;
var ASTWithSource = function(_super) {
__extends(ASTWithSource, _super);
function ASTWithSource(ast, source, location) {
_super.call(this);
this.ast = ast;
this.source = source;
this.location = location;
}
ASTWithSource.prototype.visit = function(visitor, context) {
if (context === void 0) {
context = null;
}
return this.ast.visit(visitor, context);
};
ASTWithSource.prototype.toString = function() {
return this.source + " in " + this.location;
};
return ASTWithSource;
}(AST);
exports.ASTWithSource = ASTWithSource;
var TemplateBinding = function() {
function TemplateBinding(key, keyIsVar, name, expression) {
this.key = key;
this.keyIsVar = keyIsVar;
this.name = name;
this.expression = expression;
}
return TemplateBinding;
}();
exports.TemplateBinding = TemplateBinding;
var RecursiveAstVisitor = function() {
function RecursiveAstVisitor() {}
RecursiveAstVisitor.prototype.visitBinary = function(ast, context) {
ast.left.visit(this);
ast.right.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitChain = function(ast, context) {
return this.visitAll(ast.expressions, context);
};
RecursiveAstVisitor.prototype.visitConditional = function(ast, context) {
ast.condition.visit(this);
ast.trueExp.visit(this);
ast.falseExp.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitPipe = function(ast, context) {
ast.exp.visit(this);
this.visitAll(ast.args, context);
return null;
};
RecursiveAstVisitor.prototype.visitFunctionCall = function(ast, context) {
ast.target.visit(this);
this.visitAll(ast.args, context);
return null;
};
RecursiveAstVisitor.prototype.visitImplicitReceiver = function(ast, context) {
return null;
};
RecursiveAstVisitor.prototype.visitInterpolation = function(ast, context) {
return this.visitAll(ast.expressions, context);
};
RecursiveAstVisitor.prototype.visitKeyedRead = function(ast, context) {
ast.obj.visit(this);
ast.key.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitKeyedWrite = function(ast, context) {
ast.obj.visit(this);
ast.key.visit(this);
ast.value.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitLiteralArray = function(ast, context) {
return this.visitAll(ast.expressions, context);
};
RecursiveAstVisitor.prototype.visitLiteralMap = function(ast, context) {
return this.visitAll(ast.values, context);
};
RecursiveAstVisitor.prototype.visitLiteralPrimitive = function(ast, context) {
return null;
};
RecursiveAstVisitor.prototype.visitMethodCall = function(ast, context) {
ast.receiver.visit(this);
return this.visitAll(ast.args, context);
};
RecursiveAstVisitor.prototype.visitPrefixNot = function(ast, context) {
ast.expression.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitPropertyRead = function(ast, context) {
ast.receiver.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitPropertyWrite = function(ast, context) {
ast.receiver.visit(this);
ast.value.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitSafePropertyRead = function(ast, context) {
ast.receiver.visit(this);
return null;
};
RecursiveAstVisitor.prototype.visitSafeMethodCall = function(ast, context) {
ast.receiver.visit(this);
return this.visitAll(ast.args, context);
};
RecursiveAstVisitor.prototype.visitAll = function(asts, context) {
var _this = this;
asts.forEach(function(ast) {
return ast.visit(_this, context);
});
return null;
};
RecursiveAstVisitor.prototype.visitQuote = function(ast, context) {
return null;
};
return RecursiveAstVisitor;
}();
exports.RecursiveAstVisitor = RecursiveAstVisitor;
var AstTransformer = function() {
function AstTransformer() {}
AstTransformer.prototype.visitImplicitReceiver = function(ast, context) {
return ast;
};
AstTransformer.prototype.visitInterpolation = function(ast, context) {
return new Interpolation(ast.strings, this.visitAll(ast.expressions));
};
AstTransformer.prototype.visitLiteralPrimitive = function(ast, context) {
return new LiteralPrimitive(ast.value);
};
AstTransformer.prototype.visitPropertyRead = function(ast, context) {
return new PropertyRead(ast.receiver.visit(this), ast.name);
};
AstTransformer.prototype.visitPropertyWrite = function(ast, context) {
return new PropertyWrite(ast.receiver.visit(this), ast.name, ast.value);
};
AstTransformer.prototype.visitSafePropertyRead = function(ast, context) {
return new SafePropertyRead(ast.receiver.visit(this), ast.name);
};
AstTransformer.prototype.visitMethodCall = function(ast, context) {
return new MethodCall(ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
};
AstTransformer.prototype.visitSafeMethodCall = function(ast, context) {
return new SafeMethodCall(ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
};
AstTransformer.prototype.visitFunctionCall = function(ast, context) {
return new FunctionCall(ast.target.visit(this), this.visitAll(ast.args));
};
AstTransformer.prototype.visitLiteralArray = function(ast, context) {
return new LiteralArray(this.visitAll(ast.expressions));
};
AstTransformer.prototype.visitLiteralMap = function(ast, context) {
return new LiteralMap(ast.keys, this.visitAll(ast.values));
};
AstTransformer.prototype.visitBinary = function(ast, context) {
return new Binary(ast.operation, ast.left.visit(this), ast.right.visit(this));
};
AstTransformer.prototype.visitPrefixNot = function(ast, context) {
return new PrefixNot(ast.expression.visit(this));
};
AstTransformer.prototype.visitConditional = function(ast, context) {
return new Conditional(ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
};
AstTransformer.prototype.visitPipe = function(ast, context) {
return new BindingPipe(ast.exp.visit(this), ast.name, this.visitAll(ast.args));
};
AstTransformer.prototype.visitKeyedRead = function(ast, context) {
return new KeyedRead(ast.obj.visit(this), ast.key.visit(this));
};
AstTransformer.prototype.visitKeyedWrite = function(ast, context) {
return new KeyedWrite(ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));
};
AstTransformer.prototype.visitAll = function(asts) {
var res = collection_1.ListWrapper.createFixedSize(asts.length);
for (var i = 0; i < asts.length; ++i) {
res[i] = asts[i].visit(this);
}
return res;
};
AstTransformer.prototype.visitChain = function(ast, context) {
return new Chain(this.visitAll(ast.expressions));
};
AstTransformer.prototype.visitQuote = function(ast, context) {
return new Quote(ast.prefix, ast.uninterpretedExpression, ast.location);
};
return AstTransformer;
}();
exports.AstTransformer = AstTransformer;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(281);
var exceptions_1 = __webpack_require__(286);
var collection_1 = __webpack_require__(285);
var lexer_1 = __webpack_require__(291);
var ast_1 = __webpack_require__(289);
var _implicitReceiver = new ast_1.ImplicitReceiver();
var INTERPOLATION_REGEXP = /\{\{([\s\S]*?)\}\}/g;
var ParseException = function(_super) {
__extends(ParseException, _super);
function ParseException(message, input, errLocation, ctxLocation) {
_super.call(this, "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation);
}
return ParseException;
}(exceptions_1.BaseException);
var SplitInterpolation = function() {
function SplitInterpolation(strings, expressions) {
this.strings = strings;
this.expressions = expressions;
}
return SplitInterpolation;
}();
exports.SplitInterpolation = SplitInterpolation;
var TemplateBindingParseResult = function() {
function TemplateBindingParseResult(templateBindings, warnings) {
this.templateBindings = templateBindings;
this.warnings = warnings;
}
return TemplateBindingParseResult;
}();
exports.TemplateBindingParseResult = TemplateBindingParseResult;
var Parser = function() {
function Parser(_lexer) {
this._lexer = _lexer;
}
Parser.prototype.parseAction = function(input, location) {
this._checkNoInterpolation(input, location);
var tokens = this._lexer.tokenize(this._stripComments(input));
var ast = new _ParseAST(input, location, tokens, true).parseChain();
return new ast_1.ASTWithSource(ast, input, location);
};
Parser.prototype.parseBinding = function(input, location) {
var ast = this._parseBindingAst(input, location);
return new ast_1.ASTWithSource(ast, input, location);
};
Parser.prototype.parseSimpleBinding = function(input, location) {
var ast = this._parseBindingAst(input, location);
if (!SimpleExpressionChecker.check(ast)) {
throw new ParseException("Host binding expression can only contain field access and constants", input, location);
}
return new ast_1.ASTWithSource(ast, input, location);
};
Parser.prototype._parseBindingAst = function(input, location) {
var quote = this._parseQuote(input, location);
if (lang_1.isPresent(quote)) {
return quote;
}
this._checkNoInterpolation(input, location);
var tokens = this._lexer.tokenize(this._stripComments(input));
return new _ParseAST(input, location, tokens, false).parseChain();
};
Parser.prototype._parseQuote = function(input, location) {
if (lang_1.isBlank(input)) return null;
var prefixSeparatorIndex = input.indexOf(":");
if (prefixSeparatorIndex == -1) return null;
var prefix = input.substring(0, prefixSeparatorIndex).trim();
if (!lexer_1.isIdentifier(prefix)) return null;
var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
return new ast_1.Quote(prefix, uninterpretedExpression, location);
};
Parser.prototype.parseTemplateBindings = function(input, location) {
var tokens = this._lexer.tokenize(input);
return new _ParseAST(input, location, tokens, false).parseTemplateBindings();
};
Parser.prototype.parseInterpolation = function(input, location) {
var split = this.splitInterpolation(input, location);
if (split == null) return null;
var expressions = [];
for (var i = 0; i < split.expressions.length; ++i) {
var tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));
var ast = new _ParseAST(input, location, tokens, false).parseChain();
expressions.push(ast);
}
return new ast_1.ASTWithSource(new ast_1.Interpolation(split.strings, expressions), input, location);
};
Parser.prototype.splitInterpolation = function(input, location) {
var parts = lang_1.StringWrapper.split(input, INTERPOLATION_REGEXP);
if (parts.length <= 1) {
return null;
}
var strings = [];
var expressions = [];
for (var i = 0; i < parts.length; i++) {
var part = parts[i];
if (i % 2 === 0) {
strings.push(part);
} else if (part.trim().length > 0) {
expressions.push(part);
} else {
throw new ParseException("Blank expressions are not allowed in interpolated strings", input, "at column " + this._findInterpolationErrorColumn(parts, i) + " in", location);
}
}
return new SplitInterpolation(strings, expressions);
};
Parser.prototype.wrapLiteralPrimitive = function(input, location) {
return new ast_1.ASTWithSource(new ast_1.LiteralPrimitive(input), input, location);
};
Parser.prototype._stripComments = function(input) {
var i = this._commentStart(input);
return lang_1.isPresent(i) ? input.substring(0, i).trim() : input;
};
Parser.prototype._commentStart = function(input) {
var outerQuote = null;
for (var i = 0; i < input.length - 1; i++) {
var char = lang_1.StringWrapper.charCodeAt(input, i);
var nextChar = lang_1.StringWrapper.charCodeAt(input, i + 1);
if (char === lexer_1.$SLASH && nextChar == lexer_1.$SLASH && lang_1.isBlank(outerQuote)) return i;
if (outerQuote === char) {
outerQuote = null;
} else if (lang_1.isBlank(outerQuote) && lexer_1.isQuote(char)) {
outerQuote = char;
}
}
return null;
};
Parser.prototype._checkNoInterpolation = function(input, location) {
var parts = lang_1.StringWrapper.split(input, INTERPOLATION_REGEXP);
if (parts.length > 1) {
throw new ParseException("Got interpolation ({{}}) where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1) + " in", location);
}
};
Parser.prototype._findInterpolationErrorColumn = function(parts, partInErrIdx) {
var errLocation = "";
for (var j = 0; j < partInErrIdx; j++) {
errLocation += j % 2 === 0 ? parts[j] : "{{" + parts[j] + "}}";
}
return errLocation.length;
};
Parser.decorators = [ {
type: core_1.Injectable
} ];
Parser.ctorParameters = [ {
type: lexer_1.Lexer
} ];
return Parser;
}();
exports.Parser = Parser;
var _ParseAST = function() {
function _ParseAST(input, location, tokens, parseAction) {
this.input = input;
this.location = location;
this.tokens = tokens;
this.parseAction = parseAction;
this.index = 0;
}
_ParseAST.prototype.peek = function(offset) {
var i = this.index + offset;
return i < this.tokens.length ? this.tokens[i] : lexer_1.EOF;
};
Object.defineProperty(_ParseAST.prototype, "next", {
get: function() {
return this.peek(0);
},
enumerable: true,
configurable: true
});
Object.defineProperty(_ParseAST.prototype, "inputIndex", {
get: function() {
return this.index < this.tokens.length ? this.next.index : this.input.length;
},
enumerable: true,
configurable: true
});
_ParseAST.prototype.advance = function() {
this.index++;
};
_ParseAST.prototype.optionalCharacter = function(code) {
if (this.next.isCharacter(code)) {
this.advance();
return true;
} else {
return false;
}
};
_ParseAST.prototype.peekKeywordLet = function() {
return this.next.isKeywordLet();
};
_ParseAST.prototype.peekDeprecatedKeywordVar = function() {
return this.next.isKeywordDeprecatedVar();
};
_ParseAST.prototype.peekDeprecatedOperatorHash = function() {
return this.next.isOperator("#");
};
_ParseAST.prototype.expectCharacter = function(code) {
if (this.optionalCharacter(code)) return;
this.error("Missing expected " + lang_1.StringWrapper.fromCharCode(code));
};
_ParseAST.prototype.optionalOperator = function(op) {
if (this.next.isOperator(op)) {
this.advance();
return true;
} else {
return false;
}
};
_ParseAST.prototype.expectOperator = function(operator) {
if (this.optionalOperator(operator)) return;
this.error("Missing expected operator " + operator);
};
_ParseAST.prototype.expectIdentifierOrKeyword = function() {
var n = this.next;
if (!n.isIdentifier() && !n.isKeyword()) {
this.error("Unexpected token " + n + ", expected identifier or keyword");
}
this.advance();
return n.toString();
};
_ParseAST.prototype.expectIdentifierOrKeywordOrString = function() {
var n = this.next;
if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
}
this.advance();
return n.toString();
};
_ParseAST.prototype.parseChain = function() {
var exprs = [];
while (this.index < this.tokens.length) {
var expr = this.parsePipe();
exprs.push(expr);
if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
if (!this.parseAction) {
this.error("Binding expression cannot contain chained expression");
}
while (this.optionalCharacter(lexer_1.$SEMICOLON)) {}
} else if (this.index < this.tokens.length) {
this.error("Unexpected token '" + this.next + "'");
}
}
if (exprs.length == 0) return new ast_1.EmptyExpr();
if (exprs.length == 1) return exprs[0];
return new ast_1.Chain(exprs);
};
_ParseAST.prototype.parsePipe = function() {
var result = this.parseExpression();
if (this.optionalOperator("|")) {
if (this.parseAction) {
this.error("Cannot have a pipe in an action expression");
}
do {
var name = this.expectIdentifierOrKeyword();
var args = [];
while (this.optionalCharacter(lexer_1.$COLON)) {
args.push(this.parseExpression());
}
result = new ast_1.BindingPipe(result, name, args);
} while (this.optionalOperator("|"));
}
return result;
};
_ParseAST.prototype.parseExpression = function() {
return this.parseConditional();
};
_ParseAST.prototype.parseConditional = function() {
var start = this.inputIndex;
var result = this.parseLogicalOr();
if (this.optionalOperator("?")) {
var yes = this.parsePipe();
if (!this.optionalCharacter(lexer_1.$COLON)) {
var end = this.inputIndex;
var expression = this.input.substring(start, end);
this.error("Conditional expression " + expression + " requires all 3 expressions");
}
var no = this.parsePipe();
return new ast_1.Conditional(result, yes, no);
} else {
return result;
}
};
_ParseAST.prototype.parseLogicalOr = function() {
var result = this.parseLogicalAnd();
while (this.optionalOperator("||")) {
result = new ast_1.Binary("||", result, this.parseLogicalAnd());
}
return result;
};
_ParseAST.prototype.parseLogicalAnd = function() {
var result = this.parseEquality();
while (this.optionalOperator("&&")) {
result = new ast_1.Binary("&&", result, this.parseEquality());
}
return result;
};
_ParseAST.prototype.parseEquality = function() {
var result = this.parseRelational();
while (true) {
if (this.optionalOperator("==")) {
result = new ast_1.Binary("==", result, this.parseRelational());
} else if (this.optionalOperator("===")) {
result = new ast_1.Binary("===", result, this.parseRelational());
} else if (this.optionalOperator("!=")) {
result = new ast_1.Binary("!=", result, this.parseRelational());
} else if (this.optionalOperator("!==")) {
result = new ast_1.Binary("!==", result, this.parseRelational());
} else {
return result;
}
}
};
_ParseAST.prototype.parseRelational = function() {
var result = this.parseAdditive();
while (true) {
if (this.optionalOperator("<")) {
result = new ast_1.Binary("<", result, this.parseAdditive());
} else if (this.optionalOperator(">")) {
result = new ast_1.Binary(">", result, this.parseAdditive());
} else if (this.optionalOperator("<=")) {
result = new ast_1.Binary("<=", result, this.parseAdditive());
} else if (this.optionalOperator(">=")) {
result = new ast_1.Binary(">=", result, this.parseAdditive());
} else {
return result;
}
}
};
_ParseAST.prototype.parseAdditive = function() {
var result = this.parseMultiplicative();
while (true) {
if (this.optionalOperator("+")) {
result = new ast_1.Binary("+", result, this.parseMultiplicative());
} else if (this.optionalOperator("-")) {
result = new ast_1.Binary("-", result, this.parseMultiplicative());
} else {
return result;
}
}
};
_ParseAST.prototype.parseMultiplicative = function() {
var result = this.parsePrefix();
while (true) {
if (this.optionalOperator("*")) {
result = new ast_1.Binary("*", result, this.parsePrefix());
} else if (this.optionalOperator("%")) {
result = new ast_1.Binary("%", result, this.parsePrefix());
} else if (this.optionalOperator("/")) {
result = new ast_1.Binary("/", result, this.parsePrefix());
} else {
return result;
}
}
};
_ParseAST.prototype.parsePrefix = function() {
if (this.optionalOperator("+")) {
return this.parsePrefix();
} else if (this.optionalOperator("-")) {
return new ast_1.Binary("-", new ast_1.LiteralPrimitive(0), this.parsePrefix());
} else if (this.optionalOperator("!")) {
return new ast_1.PrefixNot(this.parsePrefix());
} else {
return this.parseCallChain();
}
};
_ParseAST.prototype.parseCallChain = function() {
var result = this.parsePrimary();
while (true) {
if (this.optionalCharacter(lexer_1.$PERIOD)) {
result = this.parseAccessMemberOrMethodCall(result, false);
} else if (this.optionalOperator("?.")) {
result = this.parseAccessMemberOrMethodCall(result, true);
} else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
var key = this.parsePipe();
this.expectCharacter(lexer_1.$RBRACKET);
if (this.optionalOperator("=")) {
var value = this.parseConditional();
result = new ast_1.KeyedWrite(result, key, value);
} else {
result = new ast_1.KeyedRead(result, key);
}
} else if (this.optionalCharacter(lexer_1.$LPAREN)) {
var args = this.parseCallArguments();
this.expectCharacter(lexer_1.$RPAREN);
result = new ast_1.FunctionCall(result, args);
} else {
return result;
}
}
};
_ParseAST.prototype.parsePrimary = function() {
if (this.optionalCharacter(lexer_1.$LPAREN)) {
var result = this.parsePipe();
this.expectCharacter(lexer_1.$RPAREN);
return result;
} else if (this.next.isKeywordNull() || this.next.isKeywordUndefined()) {
this.advance();
return new ast_1.LiteralPrimitive(null);
} else if (this.next.isKeywordTrue()) {
this.advance();
return new ast_1.LiteralPrimitive(true);
} else if (this.next.isKeywordFalse()) {
this.advance();
return new ast_1.LiteralPrimitive(false);
} else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
var elements = this.parseExpressionList(lexer_1.$RBRACKET);
this.expectCharacter(lexer_1.$RBRACKET);
return new ast_1.LiteralArray(elements);
} else if (this.next.isCharacter(lexer_1.$LBRACE)) {
return this.parseLiteralMap();
} else if (this.next.isIdentifier()) {
return this.parseAccessMemberOrMethodCall(_implicitReceiver, false);
} else if (this.next.isNumber()) {
var value = this.next.toNumber();
this.advance();
return new ast_1.LiteralPrimitive(value);
} else if (this.next.isString()) {
var literalValue = this.next.toString();
this.advance();
return new ast_1.LiteralPrimitive(literalValue);
} else if (this.index >= this.tokens.length) {
this.error("Unexpected end of expression: " + this.input);
} else {
this.error("Unexpected token " + this.next);
}
throw new exceptions_1.BaseException("Fell through all cases in parsePrimary");
};
_ParseAST.prototype.parseExpressionList = function(terminator) {
var result = [];
if (!this.next.isCharacter(terminator)) {
do {
result.push(this.parsePipe());
} while (this.optionalCharacter(lexer_1.$COMMA));
}
return result;
};
_ParseAST.prototype.parseLiteralMap = function() {
var keys = [];
var values = [];
this.expectCharacter(lexer_1.$LBRACE);
if (!this.optionalCharacter(lexer_1.$RBRACE)) {
do {
var key = this.expectIdentifierOrKeywordOrString();
keys.push(key);
this.expectCharacter(lexer_1.$COLON);
values.push(this.parsePipe());
} while (this.optionalCharacter(lexer_1.$COMMA));
this.expectCharacter(lexer_1.$RBRACE);
}
return new ast_1.LiteralMap(keys, values);
};
_ParseAST.prototype.parseAccessMemberOrMethodCall = function(receiver, isSafe) {
if (isSafe === void 0) {
isSafe = false;
}
var id = this.expectIdentifierOrKeyword();
if (this.optionalCharacter(lexer_1.$LPAREN)) {
var args = this.parseCallArguments();
this.expectCharacter(lexer_1.$RPAREN);
return isSafe ? new ast_1.SafeMethodCall(receiver, id, args) : new ast_1.MethodCall(receiver, id, args);
} else {
if (isSafe) {
if (this.optionalOperator("=")) {
this.error("The '?.' operator cannot be used in the assignment");
} else {
return new ast_1.SafePropertyRead(receiver, id);
}
} else {
if (this.optionalOperator("=")) {
if (!this.parseAction) {
this.error("Bindings cannot contain assignments");
}
var value = this.parseConditional();
return new ast_1.PropertyWrite(receiver, id, value);
} else {
return new ast_1.PropertyRead(receiver, id);
}
}
}
return null;
};
_ParseAST.prototype.parseCallArguments = function() {
if (this.next.isCharacter(lexer_1.$RPAREN)) return [];
var positionals = [];
do {
positionals.push(this.parsePipe());
} while (this.optionalCharacter(lexer_1.$COMMA));
return positionals;
};
_ParseAST.prototype.parseBlockContent = function() {
if (!this.parseAction) {
this.error("Binding expression cannot contain chained expression");
}
var exprs = [];
while (this.index < this.tokens.length && !this.next.isCharacter(lexer_1.$RBRACE)) {
var expr = this.parseExpression();
exprs.push(expr);
if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
while (this.optionalCharacter(lexer_1.$SEMICOLON)) {}
}
}
if (exprs.length == 0) return new ast_1.EmptyExpr();
if (exprs.length == 1) return exprs[0];
return new ast_1.Chain(exprs);
};
_ParseAST.prototype.expectTemplateBindingKey = function() {
var result = "";
var operatorFound = false;
do {
result += this.expectIdentifierOrKeywordOrString();
operatorFound = this.optionalOperator("-");
if (operatorFound) {
result += "-";
}
} while (operatorFound);
return result.toString();
};
_ParseAST.prototype.parseTemplateBindings = function() {
var bindings = [];
var prefix = null;
var warnings = [];
while (this.index < this.tokens.length) {
var keyIsVar = this.peekKeywordLet();
if (!keyIsVar && this.peekDeprecatedKeywordVar()) {
keyIsVar = true;
warnings.push('"var" inside of expressions is deprecated. Use "let" instead!');
}
if (!keyIsVar && this.peekDeprecatedOperatorHash()) {
keyIsVar = true;
warnings.push('"#" inside of expressions is deprecated. Use "let" instead!');
}
if (keyIsVar) {
this.advance();
}
var key = this.expectTemplateBindingKey();
if (!keyIsVar) {
if (prefix == null) {
prefix = key;
} else {
key = prefix + key[0].toUpperCase() + key.substring(1);
}
}
this.optionalCharacter(lexer_1.$COLON);
var name = null;
var expression = null;
if (keyIsVar) {
if (this.optionalOperator("=")) {
name = this.expectTemplateBindingKey();
} else {
name = "$implicit";
}
} else if (this.next !== lexer_1.EOF && !this.peekKeywordLet() && !this.peekDeprecatedKeywordVar() && !this.peekDeprecatedOperatorHash()) {
var start = this.inputIndex;
var ast = this.parsePipe();
var source = this.input.substring(start, this.inputIndex);
expression = new ast_1.ASTWithSource(ast, source, this.location);
}
bindings.push(new ast_1.TemplateBinding(key, keyIsVar, name, expression));
if (!this.optionalCharacter(lexer_1.$SEMICOLON)) {
this.optionalCharacter(lexer_1.$COMMA);
}
}
return new TemplateBindingParseResult(bindings, warnings);
};
_ParseAST.prototype.error = function(message, index) {
if (index === void 0) {
index = null;
}
if (lang_1.isBlank(index)) index = this.index;
var location = index < this.tokens.length ? "at column " + (this.tokens[index].index + 1) + " in" : "at the end of the expression";
throw new ParseException(message, this.input, location, this.location);
};
return _ParseAST;
}();
exports._ParseAST = _ParseAST;
var SimpleExpressionChecker = function() {
function SimpleExpressionChecker() {
this.simple = true;
}
SimpleExpressionChecker.check = function(ast) {
var s = new SimpleExpressionChecker();
ast.visit(s);
return s.simple;
};
SimpleExpressionChecker.prototype.visitImplicitReceiver = function(ast, context) {};
SimpleExpressionChecker.prototype.visitInterpolation = function(ast, context) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitLiteralPrimitive = function(ast, context) {};
SimpleExpressionChecker.prototype.visitPropertyRead = function(ast, context) {};
SimpleExpressionChecker.prototype.visitPropertyWrite = function(ast, context) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitSafePropertyRead = function(ast, context) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitMethodCall = function(ast, context) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitSafeMethodCall = function(ast, context) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitFunctionCall = function(ast, context) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitLiteralArray = function(ast, context) {
this.visitAll(ast.expressions);
};
SimpleExpressionChecker.prototype.visitLiteralMap = function(ast, context) {
this.visitAll(ast.values);
};
SimpleExpressionChecker.prototype.visitBinary = function(ast, context) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitPrefixNot = function(ast, context) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitConditional = function(ast, context) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitPipe = function(ast, context) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitKeyedRead = function(ast, context) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitKeyedWrite = function(ast, context) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitAll = function(asts) {
var res = collection_1.ListWrapper.createFixedSize(asts.length);
for (var i = 0; i < asts.length; ++i) {
res[i] = asts[i].visit(this);
}
return res;
};
SimpleExpressionChecker.prototype.visitChain = function(ast, context) {
this.simple = false;
};
SimpleExpressionChecker.prototype.visitQuote = function(ast, context) {
this.simple = false;
};
return SimpleExpressionChecker;
}();
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var collection_1 = __webpack_require__(285);
var lang_1 = __webpack_require__(281);
var exceptions_1 = __webpack_require__(286);
(function(TokenType) {
TokenType[TokenType["Character"] = 0] = "Character";
TokenType[TokenType["Identifier"] = 1] = "Identifier";
TokenType[TokenType["Keyword"] = 2] = "Keyword";
TokenType[TokenType["String"] = 3] = "String";
TokenType[TokenType["Operator"] = 4] = "Operator";
TokenType[TokenType["Number"] = 5] = "Number";
})(exports.TokenType || (exports.TokenType = {}));
var TokenType = exports.TokenType;
var Lexer = function() {
function Lexer() {}
Lexer.prototype.tokenize = function(text) {
var scanner = new _Scanner(text);
var tokens = [];
var token = scanner.scanToken();
while (token != null) {
tokens.push(token);
token = scanner.scanToken();
}
return tokens;
};
Lexer.decorators = [ {
type: core_1.Injectable
} ];
return Lexer;
}();
exports.Lexer = Lexer;
var Token = function() {
function Token(index, type, numValue, strValue) {
this.index = index;
this.type = type;
this.numValue = numValue;
this.strValue = strValue;
}
Token.prototype.isCharacter = function(code) {
return this.type == TokenType.Character && this.numValue == code;
};
Token.prototype.isNumber = function() {
return this.type == TokenType.Number;
};
Token.prototype.isString = function() {
return this.type == TokenType.String;
};
Token.prototype.isOperator = function(operater) {
return this.type == TokenType.Operator && this.strValue == operater;
};
Token.prototype.isIdentifier = function() {
return this.type == TokenType.Identifier;
};
Token.prototype.isKeyword = function() {
return this.type == TokenType.Keyword;
};
Token.prototype.isKeywordDeprecatedVar = function() {
return this.type == TokenType.Keyword && this.strValue == "var";
};
Token.prototype.isKeywordLet = function() {
return this.type == TokenType.Keyword && this.strValue == "let";
};
Token.prototype.isKeywordNull = function() {
return this.type == TokenType.Keyword && this.strValue == "null";
};
Token.prototype.isKeywordUndefined = function() {
return this.type == TokenType.Keyword && this.strValue == "undefined";
};
Token.prototype.isKeywordTrue = function() {
return this.type == TokenType.Keyword && this.strValue == "true";
};
Token.prototype.isKeywordFalse = function() {
return this.type == TokenType.Keyword && this.strValue == "false";
};
Token.prototype.toNumber = function() {
return this.type == TokenType.Number ? this.numValue : -1;
};
Token.prototype.toString = function() {
switch (this.type) {
case TokenType.Character:
case TokenType.Identifier:
case TokenType.Keyword:
case TokenType.Operator:
case TokenType.String:
return this.strValue;

case TokenType.Number:
return this.numValue.toString();

default:
return null;
}
};
return Token;
}();
exports.Token = Token;
function newCharacterToken(index, code) {
return new Token(index, TokenType.Character, code, lang_1.StringWrapper.fromCharCode(code));
}
function newIdentifierToken(index, text) {
return new Token(index, TokenType.Identifier, 0, text);
}
function newKeywordToken(index, text) {
return new Token(index, TokenType.Keyword, 0, text);
}
function newOperatorToken(index, text) {
return new Token(index, TokenType.Operator, 0, text);
}
function newStringToken(index, text) {
return new Token(index, TokenType.String, 0, text);
}
function newNumberToken(index, n) {
return new Token(index, TokenType.Number, n, "");
}
exports.EOF = new Token(-1, TokenType.Character, 0, "");
exports.$EOF = 0;
exports.$TAB = 9;
exports.$LF = 10;
exports.$VTAB = 11;
exports.$FF = 12;
exports.$CR = 13;
exports.$SPACE = 32;
exports.$BANG = 33;
exports.$DQ = 34;
exports.$HASH = 35;
exports.$$ = 36;
exports.$PERCENT = 37;
exports.$AMPERSAND = 38;
exports.$SQ = 39;
exports.$LPAREN = 40;
exports.$RPAREN = 41;
exports.$STAR = 42;
exports.$PLUS = 43;
exports.$COMMA = 44;
exports.$MINUS = 45;
exports.$PERIOD = 46;
exports.$SLASH = 47;
exports.$COLON = 58;
exports.$SEMICOLON = 59;
exports.$LT = 60;
exports.$EQ = 61;
exports.$GT = 62;
exports.$QUESTION = 63;
var $0 = 48;
var $9 = 57;
var $A = 65, $E = 69, $Z = 90;
exports.$LBRACKET = 91;
exports.$BACKSLASH = 92;
exports.$RBRACKET = 93;
var $CARET = 94;
var $_ = 95;
exports.$BT = 96;
var $a = 97, $e = 101, $f = 102;
var $n = 110, $r = 114, $t = 116, $u = 117, $v = 118, $z = 122;
exports.$LBRACE = 123;
exports.$BAR = 124;
exports.$RBRACE = 125;
var $NBSP = 160;
var ScannerError = function(_super) {
__extends(ScannerError, _super);
function ScannerError(message) {
_super.call(this);
this.message = message;
}
ScannerError.prototype.toString = function() {
return this.message;
};
return ScannerError;
}(exceptions_1.BaseException);
exports.ScannerError = ScannerError;
var _Scanner = function() {
function _Scanner(input) {
this.input = input;
this.peek = 0;
this.index = -1;
this.length = input.length;
this.advance();
}
_Scanner.prototype.advance = function() {
this.peek = ++this.index >= this.length ? exports.$EOF : lang_1.StringWrapper.charCodeAt(this.input, this.index);
};
_Scanner.prototype.scanToken = function() {
var input = this.input, length = this.length, peek = this.peek, index = this.index;
while (peek <= exports.$SPACE) {
if (++index >= length) {
peek = exports.$EOF;
break;
} else {
peek = lang_1.StringWrapper.charCodeAt(input, index);
}
}
this.peek = peek;
this.index = index;
if (index >= length) {
return null;
}
if (isIdentifierStart(peek)) return this.scanIdentifier();
if (isDigit(peek)) return this.scanNumber(index);
var start = index;
switch (peek) {
case exports.$PERIOD:
this.advance();
return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, exports.$PERIOD);

case exports.$LPAREN:
case exports.$RPAREN:
case exports.$LBRACE:
case exports.$RBRACE:
case exports.$LBRACKET:
case exports.$RBRACKET:
case exports.$COMMA:
case exports.$COLON:
case exports.$SEMICOLON:
return this.scanCharacter(start, peek);

case exports.$SQ:
case exports.$DQ:
return this.scanString();

case exports.$HASH:
case exports.$PLUS:
case exports.$MINUS:
case exports.$STAR:
case exports.$SLASH:
case exports.$PERCENT:
case $CARET:
return this.scanOperator(start, lang_1.StringWrapper.fromCharCode(peek));

case exports.$QUESTION:
return this.scanComplexOperator(start, "?", exports.$PERIOD, ".");

case exports.$LT:
case exports.$GT:
return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), exports.$EQ, "=");

case exports.$BANG:
case exports.$EQ:
return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), exports.$EQ, "=", exports.$EQ, "=");

case exports.$AMPERSAND:
return this.scanComplexOperator(start, "&", exports.$AMPERSAND, "&");

case exports.$BAR:
return this.scanComplexOperator(start, "|", exports.$BAR, "|");

case $NBSP:
while (isWhitespace(this.peek)) this.advance();
return this.scanToken();
}
this.error("Unexpected character [" + lang_1.StringWrapper.fromCharCode(peek) + "]", 0);
return null;
};
_Scanner.prototype.scanCharacter = function(start, code) {
this.advance();
return newCharacterToken(start, code);
};
_Scanner.prototype.scanOperator = function(start, str) {
this.advance();
return newOperatorToken(start, str);
};
_Scanner.prototype.scanComplexOperator = function(start, one, twoCode, two, threeCode, three) {
this.advance();
var str = one;
if (this.peek == twoCode) {
this.advance();
str += two;
}
if (lang_1.isPresent(threeCode) && this.peek == threeCode) {
this.advance();
str += three;
}
return newOperatorToken(start, str);
};
_Scanner.prototype.scanIdentifier = function() {
var start = this.index;
this.advance();
while (isIdentifierPart(this.peek)) this.advance();
var str = this.input.substring(start, this.index);
if (collection_1.SetWrapper.has(KEYWORDS, str)) {
return newKeywordToken(start, str);
} else {
return newIdentifierToken(start, str);
}
};
_Scanner.prototype.scanNumber = function(start) {
var simple = this.index === start;
this.advance();
while (true) {
if (isDigit(this.peek)) {} else if (this.peek == exports.$PERIOD) {
simple = false;
} else if (isExponentStart(this.peek)) {
this.advance();
if (isExponentSign(this.peek)) this.advance();
if (!isDigit(this.peek)) this.error("Invalid exponent", -1);
simple = false;
} else {
break;
}
this.advance();
}
var str = this.input.substring(start, this.index);
var value = simple ? lang_1.NumberWrapper.parseIntAutoRadix(str) : lang_1.NumberWrapper.parseFloat(str);
return newNumberToken(start, value);
};
_Scanner.prototype.scanString = function() {
var start = this.index;
var quote = this.peek;
this.advance();
var buffer;
var marker = this.index;
var input = this.input;
while (this.peek != quote) {
if (this.peek == exports.$BACKSLASH) {
if (buffer == null) buffer = new lang_1.StringJoiner();
buffer.add(input.substring(marker, this.index));
this.advance();
var unescapedCode;
if (this.peek == $u) {
var hex = input.substring(this.index + 1, this.index + 5);
try {
unescapedCode = lang_1.NumberWrapper.parseInt(hex, 16);
} catch (e) {
this.error("Invalid unicode escape [\\u" + hex + "]", 0);
}
for (var i = 0; i < 5; i++) {
this.advance();
}
} else {
unescapedCode = unescape(this.peek);
this.advance();
}
buffer.add(lang_1.StringWrapper.fromCharCode(unescapedCode));
marker = this.index;
} else if (this.peek == exports.$EOF) {
this.error("Unterminated quote", 0);
} else {
this.advance();
}
}
var last = input.substring(marker, this.index);
this.advance();
var unescaped = last;
if (buffer != null) {
buffer.add(last);
unescaped = buffer.toString();
}
return newStringToken(start, unescaped);
};
_Scanner.prototype.error = function(message, offset) {
var position = this.index + offset;
throw new ScannerError("Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
};
return _Scanner;
}();
function isWhitespace(code) {
return code >= exports.$TAB && code <= exports.$SPACE || code == $NBSP;
}
function isIdentifierStart(code) {
return $a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == exports.$$;
}
function isIdentifier(input) {
if (input.length == 0) return false;
var scanner = new _Scanner(input);
if (!isIdentifierStart(scanner.peek)) return false;
scanner.advance();
while (scanner.peek !== exports.$EOF) {
if (!isIdentifierPart(scanner.peek)) return false;
scanner.advance();
}
return true;
}
exports.isIdentifier = isIdentifier;
function isIdentifierPart(code) {
return $a <= code && code <= $z || $A <= code && code <= $Z || $0 <= code && code <= $9 || code == $_ || code == exports.$$;
}
function isDigit(code) {
return $0 <= code && code <= $9;
}
function isExponentStart(code) {
return code == $e || code == $E;
}
function isExponentSign(code) {
return code == exports.$MINUS || code == exports.$PLUS;
}
function isQuote(code) {
return code === exports.$SQ || code === exports.$DQ || code === exports.$BT;
}
exports.isQuote = isQuote;
function unescape(code) {
switch (code) {
case $n:
return exports.$LF;

case $f:
return exports.$FF;

case $r:
return exports.$CR;

case $t:
return exports.$TAB;

case $v:
return exports.$VTAB;

default:
return code;
}
}
var OPERATORS = collection_1.SetWrapper.createFromList([ "+", "-", "*", "/", "%", "^", "=", "==", "!=", "===", "!==", "<", ">", "<=", ">=", "&&", "||", "&", "|", "!", "?", "#", "?." ]);
var KEYWORDS = collection_1.SetWrapper.createFromList([ "var", "let", "null", "undefined", "true", "false", "if", "else" ]);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(281);
var collection_1 = __webpack_require__(285);
var html_ast_1 = __webpack_require__(293);
var html_lexer_1 = __webpack_require__(294);
var parse_util_1 = __webpack_require__(295);
var html_tags_1 = __webpack_require__(296);
var HtmlTreeError = function(_super) {
__extends(HtmlTreeError, _super);
function HtmlTreeError(elementName, span, msg) {
_super.call(this, span, msg);
this.elementName = elementName;
}
HtmlTreeError.create = function(elementName, span, msg) {
return new HtmlTreeError(elementName, span, msg);
};
return HtmlTreeError;
}(parse_util_1.ParseError);
exports.HtmlTreeError = HtmlTreeError;
var HtmlParseTreeResult = function() {
function HtmlParseTreeResult(rootNodes, errors) {
this.rootNodes = rootNodes;
this.errors = errors;
}
return HtmlParseTreeResult;
}();
exports.HtmlParseTreeResult = HtmlParseTreeResult;
var HtmlParser = function() {
function HtmlParser() {}
HtmlParser.prototype.parse = function(sourceContent, sourceUrl, parseExpansionForms) {
if (parseExpansionForms === void 0) {
parseExpansionForms = false;
}
var tokensAndErrors = html_lexer_1.tokenizeHtml(sourceContent, sourceUrl, parseExpansionForms);
var treeAndErrors = new TreeBuilder(tokensAndErrors.tokens).build();
return new HtmlParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));
};
HtmlParser.decorators = [ {
type: core_1.Injectable
} ];
return HtmlParser;
}();
exports.HtmlParser = HtmlParser;
var TreeBuilder = function() {
function TreeBuilder(tokens) {
this.tokens = tokens;
this.index = -1;
this.rootNodes = [];
this.errors = [];
this.elementStack = [];
this._advance();
}
TreeBuilder.prototype.build = function() {
while (this.peek.type !== html_lexer_1.HtmlTokenType.EOF) {
if (this.peek.type === html_lexer_1.HtmlTokenType.TAG_OPEN_START) {
this._consumeStartTag(this._advance());
} else if (this.peek.type === html_lexer_1.HtmlTokenType.TAG_CLOSE) {
this._consumeEndTag(this._advance());
} else if (this.peek.type === html_lexer_1.HtmlTokenType.CDATA_START) {
this._closeVoidElement();
this._consumeCdata(this._advance());
} else if (this.peek.type === html_lexer_1.HtmlTokenType.COMMENT_START) {
this._closeVoidElement();
this._consumeComment(this._advance());
} else if (this.peek.type === html_lexer_1.HtmlTokenType.TEXT || this.peek.type === html_lexer_1.HtmlTokenType.RAW_TEXT || this.peek.type === html_lexer_1.HtmlTokenType.ESCAPABLE_RAW_TEXT) {
this._closeVoidElement();
this._consumeText(this._advance());
} else if (this.peek.type === html_lexer_1.HtmlTokenType.EXPANSION_FORM_START) {
this._consumeExpansion(this._advance());
} else {
this._advance();
}
}
return new HtmlParseTreeResult(this.rootNodes, this.errors);
};
TreeBuilder.prototype._advance = function() {
var prev = this.peek;
if (this.index < this.tokens.length - 1) {
this.index++;
}
this.peek = this.tokens[this.index];
return prev;
};
TreeBuilder.prototype._advanceIf = function(type) {
if (this.peek.type === type) {
return this._advance();
}
return null;
};
TreeBuilder.prototype._consumeCdata = function(startToken) {
this._consumeText(this._advance());
this._advanceIf(html_lexer_1.HtmlTokenType.CDATA_END);
};
TreeBuilder.prototype._consumeComment = function(token) {
var text = this._advanceIf(html_lexer_1.HtmlTokenType.RAW_TEXT);
this._advanceIf(html_lexer_1.HtmlTokenType.COMMENT_END);
var value = lang_1.isPresent(text) ? text.parts[0].trim() : null;
this._addToParent(new html_ast_1.HtmlCommentAst(value, token.sourceSpan));
};
TreeBuilder.prototype._consumeExpansion = function(token) {
var switchValue = this._advance();
var type = this._advance();
var cases = [];
while (this.peek.type === html_lexer_1.HtmlTokenType.EXPANSION_CASE_VALUE) {
var expCase = this._parseExpansionCase();
if (lang_1.isBlank(expCase)) return;
cases.push(expCase);
}
if (this.peek.type !== html_lexer_1.HtmlTokenType.EXPANSION_FORM_END) {
this.errors.push(HtmlTreeError.create(null, this.peek.sourceSpan, "Invalid expansion form. Missing '}'."));
return;
}
this._advance();
var mainSourceSpan = new parse_util_1.ParseSourceSpan(token.sourceSpan.start, this.peek.sourceSpan.end);
this._addToParent(new html_ast_1.HtmlExpansionAst(switchValue.parts[0], type.parts[0], cases, mainSourceSpan, switchValue.sourceSpan));
};
TreeBuilder.prototype._parseExpansionCase = function() {
var value = this._advance();
if (this.peek.type !== html_lexer_1.HtmlTokenType.EXPANSION_CASE_EXP_START) {
this.errors.push(HtmlTreeError.create(null, this.peek.sourceSpan, "Invalid expansion form. Missing '{'.,"));
return null;
}
var start = this._advance();
var exp = this._collectExpansionExpTokens(start);
if (lang_1.isBlank(exp)) return null;
var end = this._advance();
exp.push(new html_lexer_1.HtmlToken(html_lexer_1.HtmlTokenType.EOF, [], end.sourceSpan));
var parsedExp = new TreeBuilder(exp).build();
if (parsedExp.errors.length > 0) {
this.errors = this.errors.concat(parsedExp.errors);
return null;
}
var sourceSpan = new parse_util_1.ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
var expSourceSpan = new parse_util_1.ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
return new html_ast_1.HtmlExpansionCaseAst(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
};
TreeBuilder.prototype._collectExpansionExpTokens = function(start) {
var exp = [];
var expansionFormStack = [ html_lexer_1.HtmlTokenType.EXPANSION_CASE_EXP_START ];
while (true) {
if (this.peek.type === html_lexer_1.HtmlTokenType.EXPANSION_FORM_START || this.peek.type === html_lexer_1.HtmlTokenType.EXPANSION_CASE_EXP_START) {
expansionFormStack.push(this.peek.type);
}
if (this.peek.type === html_lexer_1.HtmlTokenType.EXPANSION_CASE_EXP_END) {
if (lastOnStack(expansionFormStack, html_lexer_1.HtmlTokenType.EXPANSION_CASE_EXP_START)) {
expansionFormStack.pop();
if (expansionFormStack.length == 0) return exp;
} else {
this.errors.push(HtmlTreeError.create(null, start.sourceSpan, "Invalid expansion form. Missing '}'."));
return null;
}
}
if (this.peek.type === html_lexer_1.HtmlTokenType.EXPANSION_FORM_END) {
if (lastOnStack(expansionFormStack, html_lexer_1.HtmlTokenType.EXPANSION_FORM_START)) {
expansionFormStack.pop();
} else {
this.errors.push(HtmlTreeError.create(null, start.sourceSpan, "Invalid expansion form. Missing '}'."));
return null;
}
}
if (this.peek.type === html_lexer_1.HtmlTokenType.EOF) {
this.errors.push(HtmlTreeError.create(null, start.sourceSpan, "Invalid expansion form. Missing '}'."));
return null;
}
exp.push(this._advance());
}
};
TreeBuilder.prototype._consumeText = function(token) {
var text = token.parts[0];
if (text.length > 0 && text[0] == "\n") {
var parent_1 = this._getParentElement();
if (lang_1.isPresent(parent_1) && parent_1.children.length == 0 && html_tags_1.getHtmlTagDefinition(parent_1.name).ignoreFirstLf) {
text = text.substring(1);
}
}
if (text.length > 0) {
this._addToParent(new html_ast_1.HtmlTextAst(text, token.sourceSpan));
}
};
TreeBuilder.prototype._closeVoidElement = function() {
if (this.elementStack.length > 0) {
var el = collection_1.ListWrapper.last(this.elementStack);
if (html_tags_1.getHtmlTagDefinition(el.name).isVoid) {
this.elementStack.pop();
}
}
};
TreeBuilder.prototype._consumeStartTag = function(startTagToken) {
var prefix = startTagToken.parts[0];
var name = startTagToken.parts[1];
var attrs = [];
while (this.peek.type === html_lexer_1.HtmlTokenType.ATTR_NAME) {
attrs.push(this._consumeAttr(this._advance()));
}
var fullName = getElementFullName(prefix, name, this._getParentElement());
var selfClosing = false;
if (this.peek.type === html_lexer_1.HtmlTokenType.TAG_OPEN_END_VOID) {
this._advance();
selfClosing = true;
if (html_tags_1.getNsPrefix(fullName) == null && !html_tags_1.getHtmlTagDefinition(fullName).isVoid) {
this.errors.push(HtmlTreeError.create(fullName, startTagToken.sourceSpan, 'Only void and foreign elements can be self closed "' + startTagToken.parts[1] + '"'));
}
} else if (this.peek.type === html_lexer_1.HtmlTokenType.TAG_OPEN_END) {
this._advance();
selfClosing = false;
}
var end = this.peek.sourceSpan.start;
var span = new parse_util_1.ParseSourceSpan(startTagToken.sourceSpan.start, end);
var el = new html_ast_1.HtmlElementAst(fullName, attrs, [], span, span, null);
this._pushElement(el);
if (selfClosing) {
this._popElement(fullName);
el.endSourceSpan = span;
}
};
TreeBuilder.prototype._pushElement = function(el) {
if (this.elementStack.length > 0) {
var parentEl = collection_1.ListWrapper.last(this.elementStack);
if (html_tags_1.getHtmlTagDefinition(parentEl.name).isClosedByChild(el.name)) {
this.elementStack.pop();
}
}
var tagDef = html_tags_1.getHtmlTagDefinition(el.name);
var parentEl = this._getParentElement();
if (tagDef.requireExtraParent(lang_1.isPresent(parentEl) ? parentEl.name : null)) {
var newParent = new html_ast_1.HtmlElementAst(tagDef.parentToAdd, [], [ el ], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
this._addToParent(newParent);
this.elementStack.push(newParent);
this.elementStack.push(el);
} else {
this._addToParent(el);
this.elementStack.push(el);
}
};
TreeBuilder.prototype._consumeEndTag = function(endTagToken) {
var fullName = getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
this._getParentElement().endSourceSpan = endTagToken.sourceSpan;
if (html_tags_1.getHtmlTagDefinition(fullName).isVoid) {
this.errors.push(HtmlTreeError.create(fullName, endTagToken.sourceSpan, 'Void elements do not have end tags "' + endTagToken.parts[1] + '"'));
} else if (!this._popElement(fullName)) {
this.errors.push(HtmlTreeError.create(fullName, endTagToken.sourceSpan, 'Unexpected closing tag "' + endTagToken.parts[1] + '"'));
}
};
TreeBuilder.prototype._popElement = function(fullName) {
for (var stackIndex = this.elementStack.length - 1; stackIndex >= 0; stackIndex--) {
var el = this.elementStack[stackIndex];
if (el.name == fullName) {
collection_1.ListWrapper.splice(this.elementStack, stackIndex, this.elementStack.length - stackIndex);
return true;
}
if (!html_tags_1.getHtmlTagDefinition(el.name).closedByParent) {
return false;
}
}
return false;
};
TreeBuilder.prototype._consumeAttr = function(attrName) {
var fullName = html_tags_1.mergeNsAndName(attrName.parts[0], attrName.parts[1]);
var end = attrName.sourceSpan.end;
var value = "";
if (this.peek.type === html_lexer_1.HtmlTokenType.ATTR_VALUE) {
var valueToken = this._advance();
value = valueToken.parts[0];
end = valueToken.sourceSpan.end;
}
return new html_ast_1.HtmlAttrAst(fullName, value, new parse_util_1.ParseSourceSpan(attrName.sourceSpan.start, end));
};
TreeBuilder.prototype._getParentElement = function() {
return this.elementStack.length > 0 ? collection_1.ListWrapper.last(this.elementStack) : null;
};
TreeBuilder.prototype._addToParent = function(node) {
var parent = this._getParentElement();
if (lang_1.isPresent(parent)) {
parent.children.push(node);
} else {
this.rootNodes.push(node);
}
};
return TreeBuilder;
}();
function getElementFullName(prefix, localName, parentElement) {
if (lang_1.isBlank(prefix)) {
prefix = html_tags_1.getHtmlTagDefinition(localName).implicitNamespacePrefix;
if (lang_1.isBlank(prefix) && lang_1.isPresent(parentElement)) {
prefix = html_tags_1.getNsPrefix(parentElement.name);
}
}
return html_tags_1.mergeNsAndName(prefix, localName);
}
function lastOnStack(stack, element) {
return stack.length > 0 && stack[stack.length - 1] === element;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(281);
var HtmlTextAst = function() {
function HtmlTextAst(value, sourceSpan) {
this.value = value;
this.sourceSpan = sourceSpan;
}
HtmlTextAst.prototype.visit = function(visitor, context) {
return visitor.visitText(this, context);
};
return HtmlTextAst;
}();
exports.HtmlTextAst = HtmlTextAst;
var HtmlExpansionAst = function() {
function HtmlExpansionAst(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
this.switchValue = switchValue;
this.type = type;
this.cases = cases;
this.sourceSpan = sourceSpan;
this.switchValueSourceSpan = switchValueSourceSpan;
}
HtmlExpansionAst.prototype.visit = function(visitor, context) {
return visitor.visitExpansion(this, context);
};
return HtmlExpansionAst;
}();
exports.HtmlExpansionAst = HtmlExpansionAst;
var HtmlExpansionCaseAst = function() {
function HtmlExpansionCaseAst(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
this.value = value;
this.expression = expression;
this.sourceSpan = sourceSpan;
this.valueSourceSpan = valueSourceSpan;
this.expSourceSpan = expSourceSpan;
}
HtmlExpansionCaseAst.prototype.visit = function(visitor, context) {
return visitor.visitExpansionCase(this, context);
};
return HtmlExpansionCaseAst;
}();
exports.HtmlExpansionCaseAst = HtmlExpansionCaseAst;
var HtmlAttrAst = function() {
function HtmlAttrAst(name, value, sourceSpan) {
this.name = name;
this.value = value;
this.sourceSpan = sourceSpan;
}
HtmlAttrAst.prototype.visit = function(visitor, context) {
return visitor.visitAttr(this, context);
};
return HtmlAttrAst;
}();
exports.HtmlAttrAst = HtmlAttrAst;
var HtmlElementAst = function() {
function HtmlElementAst(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
this.name = name;
this.attrs = attrs;
this.children = children;
this.sourceSpan = sourceSpan;
this.startSourceSpan = startSourceSpan;
this.endSourceSpan = endSourceSpan;
}
HtmlElementAst.prototype.visit = function(visitor, context) {
return visitor.visitElement(this, context);
};
return HtmlElementAst;
}();
exports.HtmlElementAst = HtmlElementAst;
var HtmlCommentAst = function() {
function HtmlCommentAst(value, sourceSpan) {
this.value = value;
this.sourceSpan = sourceSpan;
}
HtmlCommentAst.prototype.visit = function(visitor, context) {
return visitor.visitComment(this, context);
};
return HtmlCommentAst;
}();
exports.HtmlCommentAst = HtmlCommentAst;
function htmlVisitAll(visitor, asts, context) {
if (context === void 0) {
context = null;
}
var result = [];
asts.forEach(function(ast) {
var astResult = ast.visit(visitor, context);
if (lang_1.isPresent(astResult)) {
result.push(astResult);
}
});
return result;
}
exports.htmlVisitAll = htmlVisitAll;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(281);
var collection_1 = __webpack_require__(285);
var parse_util_1 = __webpack_require__(295);
var html_tags_1 = __webpack_require__(296);
(function(HtmlTokenType) {
HtmlTokenType[HtmlTokenType["TAG_OPEN_START"] = 0] = "TAG_OPEN_START";
HtmlTokenType[HtmlTokenType["TAG_OPEN_END"] = 1] = "TAG_OPEN_END";
HtmlTokenType[HtmlTokenType["TAG_OPEN_END_VOID"] = 2] = "TAG_OPEN_END_VOID";
HtmlTokenType[HtmlTokenType["TAG_CLOSE"] = 3] = "TAG_CLOSE";
HtmlTokenType[HtmlTokenType["TEXT"] = 4] = "TEXT";
HtmlTokenType[HtmlTokenType["ESCAPABLE_RAW_TEXT"] = 5] = "ESCAPABLE_RAW_TEXT";
HtmlTokenType[HtmlTokenType["RAW_TEXT"] = 6] = "RAW_TEXT";
HtmlTokenType[HtmlTokenType["COMMENT_START"] = 7] = "COMMENT_START";
HtmlTokenType[HtmlTokenType["COMMENT_END"] = 8] = "COMMENT_END";
HtmlTokenType[HtmlTokenType["CDATA_START"] = 9] = "CDATA_START";
HtmlTokenType[HtmlTokenType["CDATA_END"] = 10] = "CDATA_END";
HtmlTokenType[HtmlTokenType["ATTR_NAME"] = 11] = "ATTR_NAME";
HtmlTokenType[HtmlTokenType["ATTR_VALUE"] = 12] = "ATTR_VALUE";
HtmlTokenType[HtmlTokenType["DOC_TYPE"] = 13] = "DOC_TYPE";
HtmlTokenType[HtmlTokenType["EXPANSION_FORM_START"] = 14] = "EXPANSION_FORM_START";
HtmlTokenType[HtmlTokenType["EXPANSION_CASE_VALUE"] = 15] = "EXPANSION_CASE_VALUE";
HtmlTokenType[HtmlTokenType["EXPANSION_CASE_EXP_START"] = 16] = "EXPANSION_CASE_EXP_START";
HtmlTokenType[HtmlTokenType["EXPANSION_CASE_EXP_END"] = 17] = "EXPANSION_CASE_EXP_END";
HtmlTokenType[HtmlTokenType["EXPANSION_FORM_END"] = 18] = "EXPANSION_FORM_END";
HtmlTokenType[HtmlTokenType["EOF"] = 19] = "EOF";
})(exports.HtmlTokenType || (exports.HtmlTokenType = {}));
var HtmlTokenType = exports.HtmlTokenType;
var HtmlToken = function() {
function HtmlToken(type, parts, sourceSpan) {
this.type = type;
this.parts = parts;
this.sourceSpan = sourceSpan;
}
return HtmlToken;
}();
exports.HtmlToken = HtmlToken;
var HtmlTokenError = function(_super) {
__extends(HtmlTokenError, _super);
function HtmlTokenError(errorMsg, tokenType, span) {
_super.call(this, span, errorMsg);
this.tokenType = tokenType;
}
return HtmlTokenError;
}(parse_util_1.ParseError);
exports.HtmlTokenError = HtmlTokenError;
var HtmlTokenizeResult = function() {
function HtmlTokenizeResult(tokens, errors) {
this.tokens = tokens;
this.errors = errors;
}
return HtmlTokenizeResult;
}();
exports.HtmlTokenizeResult = HtmlTokenizeResult;
function tokenizeHtml(sourceContent, sourceUrl, tokenizeExpansionForms) {
if (tokenizeExpansionForms === void 0) {
tokenizeExpansionForms = false;
}
return new _HtmlTokenizer(new parse_util_1.ParseSourceFile(sourceContent, sourceUrl), tokenizeExpansionForms).tokenize();
}
exports.tokenizeHtml = tokenizeHtml;
var $EOF = 0;
var $TAB = 9;
var $LF = 10;
var $FF = 12;
var $CR = 13;
var $SPACE = 32;
var $BANG = 33;
var $DQ = 34;
var $HASH = 35;
var $$ = 36;
var $AMPERSAND = 38;
var $SQ = 39;
var $MINUS = 45;
var $SLASH = 47;
var $0 = 48;
var $SEMICOLON = 59;
var $9 = 57;
var $COLON = 58;
var $LT = 60;
var $EQ = 61;
var $GT = 62;
var $QUESTION = 63;
var $LBRACKET = 91;
var $RBRACKET = 93;
var $LBRACE = 123;
var $RBRACE = 125;
var $COMMA = 44;
var $A = 65;
var $F = 70;
var $X = 88;
var $Z = 90;
var $a = 97;
var $f = 102;
var $z = 122;
var $x = 120;
var $NBSP = 160;
var CR_OR_CRLF_REGEXP = /\r\n?/g;
function unexpectedCharacterErrorMsg(charCode) {
var char = charCode === $EOF ? "EOF" : lang_1.StringWrapper.fromCharCode(charCode);
return 'Unexpected character "' + char + '"';
}
function unknownEntityErrorMsg(entitySrc) {
return 'Unknown entity "' + entitySrc + '" - use the "&#<decimal>;" or  "&#x<hex>;" syntax';
}
var ControlFlowError = function() {
function ControlFlowError(error) {
this.error = error;
}
return ControlFlowError;
}();
var _HtmlTokenizer = function() {
function _HtmlTokenizer(file, tokenizeExpansionForms) {
this.file = file;
this.tokenizeExpansionForms = tokenizeExpansionForms;
this.peek = -1;
this.nextPeek = -1;
this.index = -1;
this.line = 0;
this.column = -1;
this.expansionCaseStack = [];
this.tokens = [];
this.errors = [];
this.input = file.content;
this.length = file.content.length;
this._advance();
}
_HtmlTokenizer.prototype._processCarriageReturns = function(content) {
return lang_1.StringWrapper.replaceAll(content, CR_OR_CRLF_REGEXP, "\n");
};
_HtmlTokenizer.prototype.tokenize = function() {
while (this.peek !== $EOF) {
var start = this._getLocation();
try {
if (this._attemptCharCode($LT)) {
if (this._attemptCharCode($BANG)) {
if (this._attemptCharCode($LBRACKET)) {
this._consumeCdata(start);
} else if (this._attemptCharCode($MINUS)) {
this._consumeComment(start);
} else {
this._consumeDocType(start);
}
} else if (this._attemptCharCode($SLASH)) {
this._consumeTagClose(start);
} else {
this._consumeTagOpen(start);
}
} else if (isSpecialFormStart(this.peek, this.nextPeek) && this.tokenizeExpansionForms) {
this._consumeExpansionFormStart();
} else if (this.peek === $EQ && this.tokenizeExpansionForms) {
this._consumeExpansionCaseStart();
} else if (this.peek === $RBRACE && this.isInExpansionCase() && this.tokenizeExpansionForms) {
this._consumeExpansionCaseEnd();
} else if (this.peek === $RBRACE && this.isInExpansionForm() && this.tokenizeExpansionForms) {
this._consumeExpansionFormEnd();
} else {
this._consumeText();
}
} catch (e) {
if (e instanceof ControlFlowError) {
this.errors.push(e.error);
} else {
throw e;
}
}
}
this._beginToken(HtmlTokenType.EOF);
this._endToken([]);
return new HtmlTokenizeResult(mergeTextTokens(this.tokens), this.errors);
};
_HtmlTokenizer.prototype._getLocation = function() {
return new parse_util_1.ParseLocation(this.file, this.index, this.line, this.column);
};
_HtmlTokenizer.prototype._getSpan = function(start, end) {
if (lang_1.isBlank(start)) {
start = this._getLocation();
}
if (lang_1.isBlank(end)) {
end = this._getLocation();
}
return new parse_util_1.ParseSourceSpan(start, end);
};
_HtmlTokenizer.prototype._beginToken = function(type, start) {
if (start === void 0) {
start = null;
}
if (lang_1.isBlank(start)) {
start = this._getLocation();
}
this.currentTokenStart = start;
this.currentTokenType = type;
};
_HtmlTokenizer.prototype._endToken = function(parts, end) {
if (end === void 0) {
end = null;
}
if (lang_1.isBlank(end)) {
end = this._getLocation();
}
var token = new HtmlToken(this.currentTokenType, parts, new parse_util_1.ParseSourceSpan(this.currentTokenStart, end));
this.tokens.push(token);
this.currentTokenStart = null;
this.currentTokenType = null;
return token;
};
_HtmlTokenizer.prototype._createError = function(msg, span) {
var error = new HtmlTokenError(msg, this.currentTokenType, span);
this.currentTokenStart = null;
this.currentTokenType = null;
return new ControlFlowError(error);
};
_HtmlTokenizer.prototype._advance = function() {
if (this.index >= this.length) {
throw this._createError(unexpectedCharacterErrorMsg($EOF), this._getSpan());
}
if (this.peek === $LF) {
this.line++;
this.column = 0;
} else if (this.peek !== $LF && this.peek !== $CR) {
this.column++;
}
this.index++;
this.peek = this.index >= this.length ? $EOF : lang_1.StringWrapper.charCodeAt(this.input, this.index);
this.nextPeek = this.index + 1 >= this.length ? $EOF : lang_1.StringWrapper.charCodeAt(this.input, this.index + 1);
};
_HtmlTokenizer.prototype._attemptCharCode = function(charCode) {
if (this.peek === charCode) {
this._advance();
return true;
}
return false;
};
_HtmlTokenizer.prototype._attemptCharCodeCaseInsensitive = function(charCode) {
if (compareCharCodeCaseInsensitive(this.peek, charCode)) {
this._advance();
return true;
}
return false;
};
_HtmlTokenizer.prototype._requireCharCode = function(charCode) {
var location = this._getLocation();
if (!this._attemptCharCode(charCode)) {
throw this._createError(unexpectedCharacterErrorMsg(this.peek), this._getSpan(location, location));
}
};
_HtmlTokenizer.prototype._attemptStr = function(chars) {
for (var i = 0; i < chars.length; i++) {
if (!this._attemptCharCode(lang_1.StringWrapper.charCodeAt(chars, i))) {
return false;
}
}
return true;
};
_HtmlTokenizer.prototype._attemptStrCaseInsensitive = function(chars) {
for (var i = 0; i < chars.length; i++) {
if (!this._attemptCharCodeCaseInsensitive(lang_1.StringWrapper.charCodeAt(chars, i))) {
return false;
}
}
return true;
};
_HtmlTokenizer.prototype._requireStr = function(chars) {
var location = this._getLocation();
if (!this._attemptStr(chars)) {
throw this._createError(unexpectedCharacterErrorMsg(this.peek), this._getSpan(location));
}
};
_HtmlTokenizer.prototype._attemptCharCodeUntilFn = function(predicate) {
while (!predicate(this.peek)) {
this._advance();
}
};
_HtmlTokenizer.prototype._requireCharCodeUntilFn = function(predicate, len) {
var start = this._getLocation();
this._attemptCharCodeUntilFn(predicate);
if (this.index - start.offset < len) {
throw this._createError(unexpectedCharacterErrorMsg(this.peek), this._getSpan(start, start));
}
};
_HtmlTokenizer.prototype._attemptUntilChar = function(char) {
while (this.peek !== char) {
this._advance();
}
};
_HtmlTokenizer.prototype._readChar = function(decodeEntities) {
if (decodeEntities && this.peek === $AMPERSAND) {
return this._decodeEntity();
} else {
var index = this.index;
this._advance();
return this.input[index];
}
};
_HtmlTokenizer.prototype._decodeEntity = function() {
var start = this._getLocation();
this._advance();
if (this._attemptCharCode($HASH)) {
var isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
var numberStart = this._getLocation().offset;
this._attemptCharCodeUntilFn(isDigitEntityEnd);
if (this.peek != $SEMICOLON) {
throw this._createError(unexpectedCharacterErrorMsg(this.peek), this._getSpan());
}
this._advance();
var strNum = this.input.substring(numberStart, this.index - 1);
try {
var charCode = lang_1.NumberWrapper.parseInt(strNum, isHex ? 16 : 10);
return lang_1.StringWrapper.fromCharCode(charCode);
} catch (e) {
var entity = this.input.substring(start.offset + 1, this.index - 1);
throw this._createError(unknownEntityErrorMsg(entity), this._getSpan(start));
}
} else {
var startPosition = this._savePosition();
this._attemptCharCodeUntilFn(isNamedEntityEnd);
if (this.peek != $SEMICOLON) {
this._restorePosition(startPosition);
return "&";
}
this._advance();
var name_1 = this.input.substring(start.offset + 1, this.index - 1);
var char = html_tags_1.NAMED_ENTITIES[name_1];
if (lang_1.isBlank(char)) {
throw this._createError(unknownEntityErrorMsg(name_1), this._getSpan(start));
}
return char;
}
};
_HtmlTokenizer.prototype._consumeRawText = function(decodeEntities, firstCharOfEnd, attemptEndRest) {
var tagCloseStart;
var textStart = this._getLocation();
this._beginToken(decodeEntities ? HtmlTokenType.ESCAPABLE_RAW_TEXT : HtmlTokenType.RAW_TEXT, textStart);
var parts = [];
while (true) {
tagCloseStart = this._getLocation();
if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
break;
}
if (this.index > tagCloseStart.offset) {
parts.push(this.input.substring(tagCloseStart.offset, this.index));
}
while (this.peek !== firstCharOfEnd) {
parts.push(this._readChar(decodeEntities));
}
}
return this._endToken([ this._processCarriageReturns(parts.join("")) ], tagCloseStart);
};
_HtmlTokenizer.prototype._consumeComment = function(start) {
var _this = this;
this._beginToken(HtmlTokenType.COMMENT_START, start);
this._requireCharCode($MINUS);
this._endToken([]);
var textToken = this._consumeRawText(false, $MINUS, function() {
return _this._attemptStr("->");
});
this._beginToken(HtmlTokenType.COMMENT_END, textToken.sourceSpan.end);
this._endToken([]);
};
_HtmlTokenizer.prototype._consumeCdata = function(start) {
var _this = this;
this._beginToken(HtmlTokenType.CDATA_START, start);
this._requireStr("CDATA[");
this._endToken([]);
var textToken = this._consumeRawText(false, $RBRACKET, function() {
return _this._attemptStr("]>");
});
this._beginToken(HtmlTokenType.CDATA_END, textToken.sourceSpan.end);
this._endToken([]);
};
_HtmlTokenizer.prototype._consumeDocType = function(start) {
this._beginToken(HtmlTokenType.DOC_TYPE, start);
this._attemptUntilChar($GT);
this._advance();
this._endToken([ this.input.substring(start.offset + 2, this.index - 1) ]);
};
_HtmlTokenizer.prototype._consumePrefixAndName = function() {
var nameOrPrefixStart = this.index;
var prefix = null;
while (this.peek !== $COLON && !isPrefixEnd(this.peek)) {
this._advance();
}
var nameStart;
if (this.peek === $COLON) {
this._advance();
prefix = this.input.substring(nameOrPrefixStart, this.index - 1);
nameStart = this.index;
} else {
nameStart = nameOrPrefixStart;
}
this._requireCharCodeUntilFn(isNameEnd, this.index === nameStart ? 1 : 0);
var name = this.input.substring(nameStart, this.index);
return [ prefix, name ];
};
_HtmlTokenizer.prototype._consumeTagOpen = function(start) {
var savedPos = this._savePosition();
var lowercaseTagName;
try {
if (!isAsciiLetter(this.peek)) {
throw this._createError(unexpectedCharacterErrorMsg(this.peek), this._getSpan());
}
var nameStart = this.index;
this._consumeTagOpenStart(start);
lowercaseTagName = this.input.substring(nameStart, this.index).toLowerCase();
this._attemptCharCodeUntilFn(isNotWhitespace);
while (this.peek !== $SLASH && this.peek !== $GT) {
this._consumeAttributeName();
this._attemptCharCodeUntilFn(isNotWhitespace);
if (this._attemptCharCode($EQ)) {
this._attemptCharCodeUntilFn(isNotWhitespace);
this._consumeAttributeValue();
}
this._attemptCharCodeUntilFn(isNotWhitespace);
}
this._consumeTagOpenEnd();
} catch (e) {
if (e instanceof ControlFlowError) {
this._restorePosition(savedPos);
this._beginToken(HtmlTokenType.TEXT, start);
this._endToken([ "<" ]);
return;
}
throw e;
}
var contentTokenType = html_tags_1.getHtmlTagDefinition(lowercaseTagName).contentType;
if (contentTokenType === html_tags_1.HtmlTagContentType.RAW_TEXT) {
this._consumeRawTextWithTagClose(lowercaseTagName, false);
} else if (contentTokenType === html_tags_1.HtmlTagContentType.ESCAPABLE_RAW_TEXT) {
this._consumeRawTextWithTagClose(lowercaseTagName, true);
}
};
_HtmlTokenizer.prototype._consumeRawTextWithTagClose = function(lowercaseTagName, decodeEntities) {
var _this = this;
var textToken = this._consumeRawText(decodeEntities, $LT, function() {
if (!_this._attemptCharCode($SLASH)) return false;
_this._attemptCharCodeUntilFn(isNotWhitespace);
if (!_this._attemptStrCaseInsensitive(lowercaseTagName)) return false;
_this._attemptCharCodeUntilFn(isNotWhitespace);
if (!_this._attemptCharCode($GT)) return false;
return true;
});
this._beginToken(HtmlTokenType.TAG_CLOSE, textToken.sourceSpan.end);
this._endToken([ null, lowercaseTagName ]);
};
_HtmlTokenizer.prototype._consumeTagOpenStart = function(start) {
this._beginToken(HtmlTokenType.TAG_OPEN_START, start);
var parts = this._consumePrefixAndName();
this._endToken(parts);
};
_HtmlTokenizer.prototype._consumeAttributeName = function() {
this._beginToken(HtmlTokenType.ATTR_NAME);
var prefixAndName = this._consumePrefixAndName();
this._endToken(prefixAndName);
};
_HtmlTokenizer.prototype._consumeAttributeValue = function() {
this._beginToken(HtmlTokenType.ATTR_VALUE);
var value;
if (this.peek === $SQ || this.peek === $DQ) {
var quoteChar = this.peek;
this._advance();
var parts = [];
while (this.peek !== quoteChar) {
parts.push(this._readChar(true));
}
value = parts.join("");
this._advance();
} else {
var valueStart = this.index;
this._requireCharCodeUntilFn(isNameEnd, 1);
value = this.input.substring(valueStart, this.index);
}
this._endToken([ this._processCarriageReturns(value) ]);
};
_HtmlTokenizer.prototype._consumeTagOpenEnd = function() {
var tokenType = this._attemptCharCode($SLASH) ? HtmlTokenType.TAG_OPEN_END_VOID : HtmlTokenType.TAG_OPEN_END;
this._beginToken(tokenType);
this._requireCharCode($GT);
this._endToken([]);
};
_HtmlTokenizer.prototype._consumeTagClose = function(start) {
this._beginToken(HtmlTokenType.TAG_CLOSE, start);
this._attemptCharCodeUntilFn(isNotWhitespace);
var prefixAndName;
prefixAndName = this._consumePrefixAndName();
this._attemptCharCodeUntilFn(isNotWhitespace);
this._requireCharCode($GT);
this._endToken(prefixAndName);
};
_HtmlTokenizer.prototype._consumeExpansionFormStart = function() {
this._beginToken(HtmlTokenType.EXPANSION_FORM_START, this._getLocation());
this._requireCharCode($LBRACE);
this._endToken([]);
this._beginToken(HtmlTokenType.RAW_TEXT, this._getLocation());
var condition = this._readUntil($COMMA);
this._endToken([ condition ], this._getLocation());
this._requireCharCode($COMMA);
this._attemptCharCodeUntilFn(isNotWhitespace);
this._beginToken(HtmlTokenType.RAW_TEXT, this._getLocation());
var type = this._readUntil($COMMA);
this._endToken([ type ], this._getLocation());
this._requireCharCode($COMMA);
this._attemptCharCodeUntilFn(isNotWhitespace);
this.expansionCaseStack.push(HtmlTokenType.EXPANSION_FORM_START);
};
_HtmlTokenizer.prototype._consumeExpansionCaseStart = function() {
this._requireCharCode($EQ);
this._beginToken(HtmlTokenType.EXPANSION_CASE_VALUE, this._getLocation());
var value = this._readUntil($LBRACE).trim();
this._endToken([ value ], this._getLocation());
this._attemptCharCodeUntilFn(isNotWhitespace);
this._beginToken(HtmlTokenType.EXPANSION_CASE_EXP_START, this._getLocation());
this._requireCharCode($LBRACE);
this._endToken([], this._getLocation());
this._attemptCharCodeUntilFn(isNotWhitespace);
this.expansionCaseStack.push(HtmlTokenType.EXPANSION_CASE_EXP_START);
};
_HtmlTokenizer.prototype._consumeExpansionCaseEnd = function() {
this._beginToken(HtmlTokenType.EXPANSION_CASE_EXP_END, this._getLocation());
this._requireCharCode($RBRACE);
this._endToken([], this._getLocation());
this._attemptCharCodeUntilFn(isNotWhitespace);
this.expansionCaseStack.pop();
};
_HtmlTokenizer.prototype._consumeExpansionFormEnd = function() {
this._beginToken(HtmlTokenType.EXPANSION_FORM_END, this._getLocation());
this._requireCharCode($RBRACE);
this._endToken([]);
this.expansionCaseStack.pop();
};
_HtmlTokenizer.prototype._consumeText = function() {
var start = this._getLocation();
this._beginToken(HtmlTokenType.TEXT, start);
var parts = [];
var interpolation = false;
if (this.peek === $LBRACE && this.nextPeek === $LBRACE) {
parts.push(this._readChar(true));
parts.push(this._readChar(true));
interpolation = true;
} else {
parts.push(this._readChar(true));
}
while (!this.isTextEnd(interpolation)) {
if (this.peek === $LBRACE && this.nextPeek === $LBRACE) {
parts.push(this._readChar(true));
parts.push(this._readChar(true));
interpolation = true;
} else if (this.peek === $RBRACE && this.nextPeek === $RBRACE && interpolation) {
parts.push(this._readChar(true));
parts.push(this._readChar(true));
interpolation = false;
} else {
parts.push(this._readChar(true));
}
}
this._endToken([ this._processCarriageReturns(parts.join("")) ]);
};
_HtmlTokenizer.prototype.isTextEnd = function(interpolation) {
if (this.peek === $LT || this.peek === $EOF) return true;
if (this.tokenizeExpansionForms) {
if (isSpecialFormStart(this.peek, this.nextPeek)) return true;
if (this.peek === $RBRACE && !interpolation && (this.isInExpansionCase() || this.isInExpansionForm())) return true;
}
return false;
};
_HtmlTokenizer.prototype._savePosition = function() {
return [ this.peek, this.index, this.column, this.line, this.tokens.length ];
};
_HtmlTokenizer.prototype._readUntil = function(char) {
var start = this.index;
this._attemptUntilChar(char);
return this.input.substring(start, this.index);
};
_HtmlTokenizer.prototype._restorePosition = function(position) {
this.peek = position[0];
this.index = position[1];
this.column = position[2];
this.line = position[3];
var nbTokens = position[4];
if (nbTokens < this.tokens.length) {
this.tokens = collection_1.ListWrapper.slice(this.tokens, 0, nbTokens);
}
};
_HtmlTokenizer.prototype.isInExpansionCase = function() {
return this.expansionCaseStack.length > 0 && this.expansionCaseStack[this.expansionCaseStack.length - 1] === HtmlTokenType.EXPANSION_CASE_EXP_START;
};
_HtmlTokenizer.prototype.isInExpansionForm = function() {
return this.expansionCaseStack.length > 0 && this.expansionCaseStack[this.expansionCaseStack.length - 1] === HtmlTokenType.EXPANSION_FORM_START;
};
return _HtmlTokenizer;
}();
function isNotWhitespace(code) {
return !isWhitespace(code) || code === $EOF;
}
function isWhitespace(code) {
return code >= $TAB && code <= $SPACE || code === $NBSP;
}
function isNameEnd(code) {
return isWhitespace(code) || code === $GT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ;
}
function isPrefixEnd(code) {
return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);
}
function isDigitEntityEnd(code) {
return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
}
function isNamedEntityEnd(code) {
return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
}
function isSpecialFormStart(peek, nextPeek) {
return peek === $LBRACE && nextPeek != $LBRACE;
}
function isAsciiLetter(code) {
return code >= $a && code <= $z || code >= $A && code <= $Z;
}
function isAsciiHexDigit(code) {
return code >= $a && code <= $f || code >= $A && code <= $F || code >= $0 && code <= $9;
}
function compareCharCodeCaseInsensitive(code1, code2) {
return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
}
function toUpperCaseCharCode(code) {
return code >= $a && code <= $z ? code - $a + $A : code;
}
function mergeTextTokens(srcTokens) {
var dstTokens = [];
var lastDstToken;
for (var i = 0; i < srcTokens.length; i++) {
var token = srcTokens[i];
if (lang_1.isPresent(lastDstToken) && lastDstToken.type == HtmlTokenType.TEXT && token.type == HtmlTokenType.TEXT) {
lastDstToken.parts[0] += token.parts[0];
lastDstToken.sourceSpan.end = token.sourceSpan.end;
} else {
lastDstToken = token;
dstTokens.push(lastDstToken);
}
}
return dstTokens;
}
}, function(module, exports) {
"use strict";
var ParseLocation = function() {
function ParseLocation(file, offset, line, col) {
this.file = file;
this.offset = offset;
this.line = line;
this.col = col;
}
ParseLocation.prototype.toString = function() {
return this.file.url + "@" + this.line + ":" + this.col;
};
return ParseLocation;
}();
exports.ParseLocation = ParseLocation;
var ParseSourceFile = function() {
function ParseSourceFile(content, url) {
this.content = content;
this.url = url;
}
return ParseSourceFile;
}();
exports.ParseSourceFile = ParseSourceFile;
var ParseSourceSpan = function() {
function ParseSourceSpan(start, end) {
this.start = start;
this.end = end;
}
ParseSourceSpan.prototype.toString = function() {
return this.start.file.content.substring(this.start.offset, this.end.offset);
};
return ParseSourceSpan;
}();
exports.ParseSourceSpan = ParseSourceSpan;
(function(ParseErrorLevel) {
ParseErrorLevel[ParseErrorLevel["WARNING"] = 0] = "WARNING";
ParseErrorLevel[ParseErrorLevel["FATAL"] = 1] = "FATAL";
})(exports.ParseErrorLevel || (exports.ParseErrorLevel = {}));
var ParseErrorLevel = exports.ParseErrorLevel;
var ParseError = function() {
function ParseError(span, msg, level) {
if (level === void 0) {
level = ParseErrorLevel.FATAL;
}
this.span = span;
this.msg = msg;
this.level = level;
}
ParseError.prototype.toString = function() {
var source = this.span.start.file.content;
var ctxStart = this.span.start.offset;
if (ctxStart > source.length - 1) {
ctxStart = source.length - 1;
}
var ctxEnd = ctxStart;
var ctxLen = 0;
var ctxLines = 0;
while (ctxLen < 100 && ctxStart > 0) {
ctxStart--;
ctxLen++;
if (source[ctxStart] == "\n") {
if (++ctxLines == 3) {
break;
}
}
}
ctxLen = 0;
ctxLines = 0;
while (ctxLen < 100 && ctxEnd < source.length - 1) {
ctxEnd++;
ctxLen++;
if (source[ctxEnd] == "\n") {
if (++ctxLines == 3) {
break;
}
}
}
var context = source.substring(ctxStart, this.span.start.offset) + "[ERROR ->]" + source.substring(this.span.start.offset, ctxEnd + 1);
return this.msg + ' ("' + context + '"): ' + this.span.start;
};
return ParseError;
}();
exports.ParseError = ParseError;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(281);
exports.NAMED_ENTITIES = {
Aacute: "Á",
aacute: "á",
Acirc: "Â",
acirc: "â",
acute: "´",
AElig: "Æ",
aelig: "æ",
Agrave: "À",
agrave: "à",
alefsym: "ℵ",
Alpha: "Α",
alpha: "α",
amp: "&",
and: "∧",
ang: "∠",
apos: "'",
Aring: "Å",
aring: "å",
asymp: "≈",
Atilde: "Ã",
atilde: "ã",
Auml: "Ä",
auml: "ä",
bdquo: "„",
Beta: "Β",
beta: "β",
brvbar: "¦",
bull: "•",
cap: "∩",
Ccedil: "Ç",
ccedil: "ç",
cedil: "¸",
cent: "¢",
Chi: "Χ",
chi: "χ",
circ: "ˆ",
clubs: "♣",
cong: "≅",
copy: "©",
crarr: "↵",
cup: "∪",
curren: "¤",
dagger: "†",
Dagger: "‡",
darr: "↓",
dArr: "⇓",
deg: "°",
Delta: "Δ",
delta: "δ",
diams: "♦",
divide: "÷",
Eacute: "É",
eacute: "é",
Ecirc: "Ê",
ecirc: "ê",
Egrave: "È",
egrave: "è",
empty: "∅",
emsp: " ",
ensp: " ",
Epsilon: "Ε",
epsilon: "ε",
equiv: "≡",
Eta: "Η",
eta: "η",
ETH: "Ð",
eth: "ð",
Euml: "Ë",
euml: "ë",
euro: "€",
exist: "∃",
fnof: "ƒ",
forall: "∀",
frac12: "½",
frac14: "¼",
frac34: "¾",
frasl: "⁄",
Gamma: "Γ",
gamma: "γ",
ge: "≥",
gt: ">",
harr: "↔",
hArr: "⇔",
hearts: "♥",
hellip: "…",
Iacute: "Í",
iacute: "í",
Icirc: "Î",
icirc: "î",
iexcl: "¡",
Igrave: "Ì",
igrave: "ì",
image: "ℑ",
infin: "∞",
"int": "∫",
Iota: "Ι",
iota: "ι",
iquest: "¿",
isin: "∈",
Iuml: "Ï",
iuml: "ï",
Kappa: "Κ",
kappa: "κ",
Lambda: "Λ",
lambda: "λ",
lang: "⟨",
laquo: "«",
larr: "←",
lArr: "⇐",
lceil: "⌈",
ldquo: "“",
le: "≤",
lfloor: "⌊",
lowast: "∗",
loz: "◊",
lrm: "‎",
lsaquo: "‹",
lsquo: "‘",
lt: "<",
macr: "¯",
mdash: "—",
micro: "µ",
middot: "·",
minus: "−",
Mu: "Μ",
mu: "μ",
nabla: "∇",
nbsp: " ",
ndash: "–",
ne: "≠",
ni: "∋",
not: "¬",
notin: "∉",
nsub: "⊄",
Ntilde: "Ñ",
ntilde: "ñ",
Nu: "Ν",
nu: "ν",
Oacute: "Ó",
oacute: "ó",
Ocirc: "Ô",
ocirc: "ô",
OElig: "Œ",
oelig: "œ",
Ograve: "Ò",
ograve: "ò",
oline: "‾",
Omega: "Ω",
omega: "ω",
Omicron: "Ο",
omicron: "ο",
oplus: "⊕",
or: "∨",
ordf: "ª",
ordm: "º",
Oslash: "Ø",
oslash: "ø",
Otilde: "Õ",
otilde: "õ",
otimes: "⊗",
Ouml: "Ö",
ouml: "ö",
para: "¶",
permil: "‰",
perp: "⊥",
Phi: "Φ",
phi: "φ",
Pi: "Π",
pi: "π",
piv: "ϖ",
plusmn: "±",
pound: "£",
prime: "′",
Prime: "″",
prod: "∏",
prop: "∝",
Psi: "Ψ",
psi: "ψ",
quot: '"',
radic: "√",
rang: "⟩",
raquo: "»",
rarr: "→",
rArr: "⇒",
rceil: "⌉",
rdquo: "”",
real: "ℜ",
reg: "®",
rfloor: "⌋",
Rho: "Ρ",
rho: "ρ",
rlm: "‏",
rsaquo: "›",
rsquo: "’",
sbquo: "‚",
Scaron: "Š",
scaron: "š",
sdot: "⋅",
sect: "§",
shy: "­",
Sigma: "Σ",
sigma: "σ",
sigmaf: "ς",
sim: "∼",
spades: "♠",
sub: "⊂",
sube: "⊆",
sum: "∑",
sup: "⊃",
sup1: "¹",
sup2: "²",
sup3: "³",
supe: "⊇",
szlig: "ß",
Tau: "Τ",
tau: "τ",
there4: "∴",
Theta: "Θ",
theta: "θ",
thetasym: "ϑ",
thinsp: " ",
THORN: "Þ",
thorn: "þ",
tilde: "˜",
times: "×",
trade: "™",
Uacute: "Ú",
uacute: "ú",
uarr: "↑",
uArr: "⇑",
Ucirc: "Û",
ucirc: "û",
Ugrave: "Ù",
ugrave: "ù",
uml: "¨",
upsih: "ϒ",
Upsilon: "Υ",
upsilon: "υ",
Uuml: "Ü",
uuml: "ü",
weierp: "℘",
Xi: "Ξ",
xi: "ξ",
Yacute: "Ý",
yacute: "ý",
yen: "¥",
yuml: "ÿ",
Yuml: "Ÿ",
Zeta: "Ζ",
zeta: "ζ",
zwj: "‍",
zwnj: "‌"
};
(function(HtmlTagContentType) {
HtmlTagContentType[HtmlTagContentType["RAW_TEXT"] = 0] = "RAW_TEXT";
HtmlTagContentType[HtmlTagContentType["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
HtmlTagContentType[HtmlTagContentType["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
})(exports.HtmlTagContentType || (exports.HtmlTagContentType = {}));
var HtmlTagContentType = exports.HtmlTagContentType;
var HtmlTagDefinition = function() {
function HtmlTagDefinition(_a) {
var _this = this;
var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, contentType = _b.contentType, closedByParent = _b.closedByParent, isVoid = _b.isVoid, ignoreFirstLf = _b.ignoreFirstLf;
this.closedByChildren = {};
this.closedByParent = false;
if (lang_1.isPresent(closedByChildren) && closedByChildren.length > 0) {
closedByChildren.forEach(function(tagName) {
return _this.closedByChildren[tagName] = true;
});
}
this.isVoid = lang_1.normalizeBool(isVoid);
this.closedByParent = lang_1.normalizeBool(closedByParent) || this.isVoid;
if (lang_1.isPresent(requiredParents) && requiredParents.length > 0) {
this.requiredParents = {};
this.parentToAdd = requiredParents[0];
requiredParents.forEach(function(tagName) {
return _this.requiredParents[tagName] = true;
});
}
this.implicitNamespacePrefix = implicitNamespacePrefix;
this.contentType = lang_1.isPresent(contentType) ? contentType : HtmlTagContentType.PARSABLE_DATA;
this.ignoreFirstLf = lang_1.normalizeBool(ignoreFirstLf);
}
HtmlTagDefinition.prototype.requireExtraParent = function(currentParent) {
if (lang_1.isBlank(this.requiredParents)) {
return false;
}
if (lang_1.isBlank(currentParent)) {
return true;
}
var lcParent = currentParent.toLowerCase();
return this.requiredParents[lcParent] != true && lcParent != "template";
};
HtmlTagDefinition.prototype.isClosedByChild = function(name) {
return this.isVoid || lang_1.normalizeBool(this.closedByChildren[name.toLowerCase()]);
};
return HtmlTagDefinition;
}();
exports.HtmlTagDefinition = HtmlTagDefinition;
var TAG_DEFINITIONS = {
base: new HtmlTagDefinition({
isVoid: true
}),
meta: new HtmlTagDefinition({
isVoid: true
}),
area: new HtmlTagDefinition({
isVoid: true
}),
embed: new HtmlTagDefinition({
isVoid: true
}),
link: new HtmlTagDefinition({
isVoid: true
}),
img: new HtmlTagDefinition({
isVoid: true
}),
input: new HtmlTagDefinition({
isVoid: true
}),
param: new HtmlTagDefinition({
isVoid: true
}),
hr: new HtmlTagDefinition({
isVoid: true
}),
br: new HtmlTagDefinition({
isVoid: true
}),
source: new HtmlTagDefinition({
isVoid: true
}),
track: new HtmlTagDefinition({
isVoid: true
}),
wbr: new HtmlTagDefinition({
isVoid: true
}),
p: new HtmlTagDefinition({
closedByChildren: [ "address", "article", "aside", "blockquote", "div", "dl", "fieldset", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "main", "nav", "ol", "p", "pre", "section", "table", "ul" ],
closedByParent: true
}),
thead: new HtmlTagDefinition({
closedByChildren: [ "tbody", "tfoot" ]
}),
tbody: new HtmlTagDefinition({
closedByChildren: [ "tbody", "tfoot" ],
closedByParent: true
}),
tfoot: new HtmlTagDefinition({
closedByChildren: [ "tbody" ],
closedByParent: true
}),
tr: new HtmlTagDefinition({
closedByChildren: [ "tr" ],
requiredParents: [ "tbody", "tfoot", "thead" ],
closedByParent: true
}),
td: new HtmlTagDefinition({
closedByChildren: [ "td", "th" ],
closedByParent: true
}),
th: new HtmlTagDefinition({
closedByChildren: [ "td", "th" ],
closedByParent: true
}),
col: new HtmlTagDefinition({
requiredParents: [ "colgroup" ],
isVoid: true
}),
svg: new HtmlTagDefinition({
implicitNamespacePrefix: "svg"
}),
math: new HtmlTagDefinition({
implicitNamespacePrefix: "math"
}),
li: new HtmlTagDefinition({
closedByChildren: [ "li" ],
closedByParent: true
}),
dt: new HtmlTagDefinition({
closedByChildren: [ "dt", "dd" ]
}),
dd: new HtmlTagDefinition({
closedByChildren: [ "dt", "dd" ],
closedByParent: true
}),
rb: new HtmlTagDefinition({
closedByChildren: [ "rb", "rt", "rtc", "rp" ],
closedByParent: true
}),
rt: new HtmlTagDefinition({
closedByChildren: [ "rb", "rt", "rtc", "rp" ],
closedByParent: true
}),
rtc: new HtmlTagDefinition({
closedByChildren: [ "rb", "rtc", "rp" ],
closedByParent: true
}),
rp: new HtmlTagDefinition({
closedByChildren: [ "rb", "rt", "rtc", "rp" ],
closedByParent: true
}),
optgroup: new HtmlTagDefinition({
closedByChildren: [ "optgroup" ],
closedByParent: true
}),
option: new HtmlTagDefinition({
closedByChildren: [ "option", "optgroup" ],
closedByParent: true
}),
pre: new HtmlTagDefinition({
ignoreFirstLf: true
}),
listing: new HtmlTagDefinition({
ignoreFirstLf: true
}),
style: new HtmlTagDefinition({
contentType: HtmlTagContentType.RAW_TEXT
}),
script: new HtmlTagDefinition({
contentType: HtmlTagContentType.RAW_TEXT
}),
title: new HtmlTagDefinition({
contentType: HtmlTagContentType.ESCAPABLE_RAW_TEXT
}),
textarea: new HtmlTagDefinition({
contentType: HtmlTagContentType.ESCAPABLE_RAW_TEXT,
ignoreFirstLf: true
})
};
var DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
function getHtmlTagDefinition(tagName) {
var result = TAG_DEFINITIONS[tagName.toLowerCase()];
return lang_1.isPresent(result) ? result : DEFAULT_TAG_DEFINITION;
}
exports.getHtmlTagDefinition = getHtmlTagDefinition;
var NS_PREFIX_RE = /^@([^:]+):(.+)/g;
function splitNsName(elementName) {
if (elementName[0] != "@") {
return [ null, elementName ];
}
var match = lang_1.RegExpWrapper.firstMatch(NS_PREFIX_RE, elementName);
return [ match[1], match[2] ];
}
exports.splitNsName = splitNsName;
function getNsPrefix(elementName) {
return splitNsName(elementName)[0];
}
exports.getNsPrefix = getNsPrefix;
function mergeNsAndName(prefix, localName) {
return lang_1.isPresent(prefix) ? "@" + prefix + ":" + localName : localName;
}
exports.mergeNsAndName = mergeNsAndName;
}, function(module, exports, __webpack_require__) {
"use strict";
var collection_1 = __webpack_require__(285);
var lang_1 = __webpack_require__(281);
var exceptions_1 = __webpack_require__(286);
var _EMPTY_ATTR_VALUE = "";
var _SELECTOR_REGEXP = lang_1.RegExpWrapper.create("(\\:not\\()|" + "([-\\w]+)|" + "(?:\\.([-\\w]+))|" + "(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|" + "(\\))|" + "(\\s*,\\s*)");
var CssSelector = function() {
function CssSelector() {
this.element = null;
this.classNames = [];
this.attrs = [];
this.notSelectors = [];
}
CssSelector.parse = function(selector) {
var results = [];
var _addResult = function(res, cssSel) {
if (cssSel.notSelectors.length > 0 && lang_1.isBlank(cssSel.element) && collection_1.ListWrapper.isEmpty(cssSel.classNames) && collection_1.ListWrapper.isEmpty(cssSel.attrs)) {
cssSel.element = "*";
}
res.push(cssSel);
};
var cssSelector = new CssSelector();
var matcher = lang_1.RegExpWrapper.matcher(_SELECTOR_REGEXP, selector);
var match;
var current = cssSelector;
var inNot = false;
while (lang_1.isPresent(match = lang_1.RegExpMatcherWrapper.next(matcher))) {
if (lang_1.isPresent(match[1])) {
if (inNot) {
throw new exceptions_1.BaseException("Nesting :not is not allowed in a selector");
}
inNot = true;
current = new CssSelector();
cssSelector.notSelectors.push(current);
}
if (lang_1.isPresent(match[2])) {
current.setElement(match[2]);
}
if (lang_1.isPresent(match[3])) {
current.addClassName(match[3]);
}
if (lang_1.isPresent(match[4])) {
current.addAttribute(match[4], match[5]);
}
if (lang_1.isPresent(match[6])) {
inNot = false;
current = cssSelector;
}
if (lang_1.isPresent(match[7])) {
if (inNot) {
throw new exceptions_1.BaseException("Multiple selectors in :not are not supported");
}
_addResult(results, cssSelector);
cssSelector = current = new CssSelector();
}
}
_addResult(results, cssSelector);
return results;
};
CssSelector.prototype.isElementSelector = function() {
return lang_1.isPresent(this.element) && collection_1.ListWrapper.isEmpty(this.classNames) && collection_1.ListWrapper.isEmpty(this.attrs) && this.notSelectors.length === 0;
};
CssSelector.prototype.setElement = function(element) {
if (element === void 0) {
element = null;
}
this.element = element;
};
CssSelector.prototype.getMatchingElementTemplate = function() {
var tagName = lang_1.isPresent(this.element) ? this.element : "div";
var classAttr = this.classNames.length > 0 ? ' class="' + this.classNames.join(" ") + '"' : "";
var attrs = "";
for (var i = 0; i < this.attrs.length; i += 2) {
var attrName = this.attrs[i];
var attrValue = this.attrs[i + 1] !== "" ? '="' + this.attrs[i + 1] + '"' : "";
attrs += " " + attrName + attrValue;
}
return "<" + tagName + classAttr + attrs + "></" + tagName + ">";
};
CssSelector.prototype.addAttribute = function(name, value) {
if (value === void 0) {
value = _EMPTY_ATTR_VALUE;
}
this.attrs.push(name);
if (lang_1.isPresent(value)) {
value = value.toLowerCase();
} else {
value = _EMPTY_ATTR_VALUE;
}
this.attrs.push(value);
};
CssSelector.prototype.addClassName = function(name) {
this.classNames.push(name.toLowerCase());
};
CssSelector.prototype.toString = function() {
var res = "";
if (lang_1.isPresent(this.element)) {
res += this.element;
}
if (lang_1.isPresent(this.classNames)) {
for (var i = 0; i < this.classNames.length; i++) {
res += "." + this.classNames[i];
}
}
if (lang_1.isPresent(this.attrs)) {
for (var i = 0; i < this.attrs.length; ) {
var attrName = this.attrs[i++];
var attrValue = this.attrs[i++];
res += "[" + attrName;
if (attrValue.length > 0) {
res += "=" + attrValue;
}
res += "]";
}
}
this.notSelectors.forEach(function(notSelector) {
return res += ":not(" + notSelector + ")";
});
return res;
};
return CssSelector;
}();
exports.CssSelector = CssSelector;
var SelectorMatcher = function() {
function SelectorMatcher() {
this._elementMap = new collection_1.Map();
this._elementPartialMap = new collection_1.Map();
this._classMap = new collection_1.Map();
this._classPartialMap = new collection_1.Map();
this._attrValueMap = new collection_1.Map();
this._attrValuePartialMap = new collection_1.Map();
this._listContexts = [];
}
SelectorMatcher.createNotMatcher = function(notSelectors) {
var notMatcher = new SelectorMatcher();
notMatcher.addSelectables(notSelectors, null);
return notMatcher;
};
SelectorMatcher.prototype.addSelectables = function(cssSelectors, callbackCtxt) {
var listContext = null;
if (cssSelectors.length > 1) {
listContext = new SelectorListContext(cssSelectors);
this._listContexts.push(listContext);
}
for (var i = 0; i < cssSelectors.length; i++) {
this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
}
};
SelectorMatcher.prototype._addSelectable = function(cssSelector, callbackCtxt, listContext) {
var matcher = this;
var element = cssSelector.element;
var classNames = cssSelector.classNames;
var attrs = cssSelector.attrs;
var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
if (lang_1.isPresent(element)) {
var isTerminal = attrs.length === 0 && classNames.length === 0;
if (isTerminal) {
this._addTerminal(matcher._elementMap, element, selectable);
} else {
matcher = this._addPartial(matcher._elementPartialMap, element);
}
}
if (lang_1.isPresent(classNames)) {
for (var index = 0; index < classNames.length; index++) {
var isTerminal = attrs.length === 0 && index === classNames.length - 1;
var className = classNames[index];
if (isTerminal) {
this._addTerminal(matcher._classMap, className, selectable);
} else {
matcher = this._addPartial(matcher._classPartialMap, className);
}
}
}
if (lang_1.isPresent(attrs)) {
for (var index = 0; index < attrs.length; ) {
var isTerminal = index === attrs.length - 2;
var attrName = attrs[index++];
var attrValue = attrs[index++];
if (isTerminal) {
var terminalMap = matcher._attrValueMap;
var terminalValuesMap = terminalMap.get(attrName);
if (lang_1.isBlank(terminalValuesMap)) {
terminalValuesMap = new collection_1.Map();
terminalMap.set(attrName, terminalValuesMap);
}
this._addTerminal(terminalValuesMap, attrValue, selectable);
} else {
var parttialMap = matcher._attrValuePartialMap;
var partialValuesMap = parttialMap.get(attrName);
if (lang_1.isBlank(partialValuesMap)) {
partialValuesMap = new collection_1.Map();
parttialMap.set(attrName, partialValuesMap);
}
matcher = this._addPartial(partialValuesMap, attrValue);
}
}
}
};
SelectorMatcher.prototype._addTerminal = function(map, name, selectable) {
var terminalList = map.get(name);
if (lang_1.isBlank(terminalList)) {
terminalList = [];
map.set(name, terminalList);
}
terminalList.push(selectable);
};
SelectorMatcher.prototype._addPartial = function(map, name) {
var matcher = map.get(name);
if (lang_1.isBlank(matcher)) {
matcher = new SelectorMatcher();
map.set(name, matcher);
}
return matcher;
};
SelectorMatcher.prototype.match = function(cssSelector, matchedCallback) {
var result = false;
var element = cssSelector.element;
var classNames = cssSelector.classNames;
var attrs = cssSelector.attrs;
for (var i = 0; i < this._listContexts.length; i++) {
this._listContexts[i].alreadyMatched = false;
}
result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;
if (lang_1.isPresent(classNames)) {
for (var index = 0; index < classNames.length; index++) {
var className = classNames[index];
result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
}
}
if (lang_1.isPresent(attrs)) {
for (var index = 0; index < attrs.length; ) {
var attrName = attrs[index++];
var attrValue = attrs[index++];
var terminalValuesMap = this._attrValueMap.get(attrName);
if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
result = this._matchTerminal(terminalValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) || result;
}
result = this._matchTerminal(terminalValuesMap, attrValue, cssSelector, matchedCallback) || result;
var partialValuesMap = this._attrValuePartialMap.get(attrName);
if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
result = this._matchPartial(partialValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) || result;
}
result = this._matchPartial(partialValuesMap, attrValue, cssSelector, matchedCallback) || result;
}
}
return result;
};
SelectorMatcher.prototype._matchTerminal = function(map, name, cssSelector, matchedCallback) {
if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
return false;
}
var selectables = map.get(name);
var starSelectables = map.get("*");
if (lang_1.isPresent(starSelectables)) {
selectables = selectables.concat(starSelectables);
}
if (lang_1.isBlank(selectables)) {
return false;
}
var selectable;
var result = false;
for (var index = 0; index < selectables.length; index++) {
selectable = selectables[index];
result = selectable.finalize(cssSelector, matchedCallback) || result;
}
return result;
};
SelectorMatcher.prototype._matchPartial = function(map, name, cssSelector, matchedCallback) {
if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
return false;
}
var nestedSelector = map.get(name);
if (lang_1.isBlank(nestedSelector)) {
return false;
}
return nestedSelector.match(cssSelector, matchedCallback);
};
return SelectorMatcher;
}();
exports.SelectorMatcher = SelectorMatcher;
var SelectorListContext = function() {
function SelectorListContext(selectors) {
this.selectors = selectors;
this.alreadyMatched = false;
}
return SelectorListContext;
}();
exports.SelectorListContext = SelectorListContext;
var SelectorContext = function() {
function SelectorContext(selector, cbContext, listContext) {
this.selector = selector;
this.cbContext = cbContext;
this.listContext = listContext;
this.notSelectors = selector.notSelectors;
}
SelectorContext.prototype.finalize = function(cssSelector, callback) {
var result = true;
if (this.notSelectors.length > 0 && (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
result = !notMatcher.match(cssSelector, null);
}
if (result && lang_1.isPresent(callback) && (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
if (lang_1.isPresent(this.listContext)) {
this.listContext.alreadyMatched = true;
}
callback(this.selector, this.cbContext);
}
return result;
};
return SelectorContext;
}();
exports.SelectorContext = SelectorContext;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(281);
var html_tags_1 = __webpack_require__(296);
var NG_CONTENT_SELECT_ATTR = "select";
var NG_CONTENT_ELEMENT = "ng-content";
var LINK_ELEMENT = "link";
var LINK_STYLE_REL_ATTR = "rel";
var LINK_STYLE_HREF_ATTR = "href";
var LINK_STYLE_REL_VALUE = "stylesheet";
var STYLE_ELEMENT = "style";
var SCRIPT_ELEMENT = "script";
var NG_NON_BINDABLE_ATTR = "ngNonBindable";
var NG_PROJECT_AS = "ngProjectAs";
function preparseElement(ast) {
var selectAttr = null;
var hrefAttr = null;
var relAttr = null;
var nonBindable = false;
var projectAs = null;
ast.attrs.forEach(function(attr) {
var lcAttrName = attr.name.toLowerCase();
if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
selectAttr = attr.value;
} else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
hrefAttr = attr.value;
} else if (lcAttrName == LINK_STYLE_REL_ATTR) {
relAttr = attr.value;
} else if (attr.name == NG_NON_BINDABLE_ATTR) {
nonBindable = true;
} else if (attr.name == NG_PROJECT_AS) {
if (attr.value.length > 0) {
projectAs = attr.value;
}
}
});
selectAttr = normalizeNgContentSelect(selectAttr);
var nodeName = ast.name.toLowerCase();
var type = PreparsedElementType.OTHER;
if (html_tags_1.splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {
type = PreparsedElementType.NG_CONTENT;
} else if (nodeName == STYLE_ELEMENT) {
type = PreparsedElementType.STYLE;
} else if (nodeName == SCRIPT_ELEMENT) {
type = PreparsedElementType.SCRIPT;
} else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
type = PreparsedElementType.STYLESHEET;
}
return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
}
exports.preparseElement = preparseElement;
(function(PreparsedElementType) {
PreparsedElementType[PreparsedElementType["NG_CONTENT"] = 0] = "NG_CONTENT";
PreparsedElementType[PreparsedElementType["STYLE"] = 1] = "STYLE";
PreparsedElementType[PreparsedElementType["STYLESHEET"] = 2] = "STYLESHEET";
PreparsedElementType[PreparsedElementType["SCRIPT"] = 3] = "SCRIPT";
PreparsedElementType[PreparsedElementType["OTHER"] = 4] = "OTHER";
})(exports.PreparsedElementType || (exports.PreparsedElementType = {}));
var PreparsedElementType = exports.PreparsedElementType;
var PreparsedElement = function() {
function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
this.type = type;
this.selectAttr = selectAttr;
this.hrefAttr = hrefAttr;
this.nonBindable = nonBindable;
this.projectAs = projectAs;
}
return PreparsedElement;
}();
exports.PreparsedElement = PreparsedElement;
function normalizeNgContentSelect(selectAttr) {
if (lang_1.isBlank(selectAttr) || selectAttr.length === 0) {
return "*";
}
return selectAttr;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(281);
var StyleWithImports = function() {
function StyleWithImports(style, styleUrls) {
this.style = style;
this.styleUrls = styleUrls;
}
return StyleWithImports;
}();
exports.StyleWithImports = StyleWithImports;
function isStyleUrlResolvable(url) {
if (lang_1.isBlank(url) || url.length === 0 || url[0] == "/") return false;
var schemeMatch = lang_1.RegExpWrapper.firstMatch(_urlWithSchemaRe, url);
return lang_1.isBlank(schemeMatch) || schemeMatch[1] == "package" || schemeMatch[1] == "asset";
}
exports.isStyleUrlResolvable = isStyleUrlResolvable;
function extractStyleUrls(resolver, baseUrl, cssText) {
var foundUrls = [];
var modifiedCssText = lang_1.StringWrapper.replaceAllMapped(cssText, _cssImportRe, function(m) {
var url = lang_1.isPresent(m[1]) ? m[1] : m[2];
if (!isStyleUrlResolvable(url)) {
return m[0];
}
foundUrls.push(resolver.resolve(baseUrl, url));
return "";
});
return new StyleWithImports(modifiedCssText, foundUrls);
}
exports.extractStyleUrls = extractStyleUrls;
var _cssImportRe = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
var _urlWithSchemaRe = /^([a-zA-Z\-\+\.]+):/g;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(281);
var collection_1 = __webpack_require__(285);
exports.MODULE_SUFFIX = lang_1.IS_DART ? ".dart" : "";
var CAMEL_CASE_REGEXP = /([A-Z])/g;
var DASH_CASE_REGEXP = /-([a-z])/g;
function camelCaseToDashCase(input) {
return lang_1.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function(m) {
return "-" + m[1].toLowerCase();
});
}
exports.camelCaseToDashCase = camelCaseToDashCase;
function dashCaseToCamelCase(input) {
return lang_1.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function(m) {
return m[1].toUpperCase();
});
}
exports.dashCaseToCamelCase = dashCaseToCamelCase;
function splitAtColon(input, defaultValues) {
var parts = lang_1.StringWrapper.split(input.trim(), /\s*:\s*/g);
if (parts.length > 1) {
return parts;
} else {
return defaultValues;
}
}
exports.splitAtColon = splitAtColon;
function sanitizeIdentifier(name) {
return lang_1.StringWrapper.replaceAll(name, /\W/g, "_");
}
exports.sanitizeIdentifier = sanitizeIdentifier;
function visitValue(value, visitor, context) {
if (lang_1.isArray(value)) {
return visitor.visitArray(value, context);
} else if (lang_1.isStrictStringMap(value)) {
return visitor.visitStringMap(value, context);
} else if (lang_1.isBlank(value) || lang_1.isPrimitive(value)) {
return visitor.visitPrimitive(value, context);
} else {
return visitor.visitOther(value, context);
}
}
exports.visitValue = visitValue;
var ValueTransformer = function() {
function ValueTransformer() {}
ValueTransformer.prototype.visitArray = function(arr, context) {
var _this = this;
return arr.map(function(value) {
return visitValue(value, _this, context);
});
};
ValueTransformer.prototype.visitStringMap = function(map, context) {
var _this = this;
var result = {};
collection_1.StringMapWrapper.forEach(map, function(value, key) {
result[key] = visitValue(value, _this, context);
});
return result;
};
ValueTransformer.prototype.visitPrimitive = function(value, context) {
return value;
};
ValueTransformer.prototype.visitOther = function(value, context) {
return value;
};
return ValueTransformer;
}();
exports.ValueTransformer = ValueTransformer;
function assetUrl(pkg, path, type) {
if (path === void 0) {
path = null;
}
if (type === void 0) {
type = "src";
}
if (lang_1.IS_DART) {
if (path == null) {
return "asset:angular2/" + pkg + "/" + pkg + ".dart";
} else {
return "asset:angular2/lib/" + pkg + "/src/" + path + ".dart";
}
} else {
if (path == null) {
return "asset:@angular/lib/" + pkg + "/index";
} else {
return "asset:@angular/lib/" + pkg + "/src/" + path;
}
}
}
exports.assetUrl = assetUrl;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var core_private_1 = __webpack_require__(284);
var core_private_2 = __webpack_require__(284);
var compile_metadata_1 = __webpack_require__(302);
var util_1 = __webpack_require__(300);
var APP_VIEW_MODULE_URL = util_1.assetUrl("core", "linker/view");
var VIEW_UTILS_MODULE_URL = util_1.assetUrl("core", "linker/view_utils");
var CD_MODULE_URL = util_1.assetUrl("core", "change_detection/change_detection");
var impViewUtils = core_private_2.ViewUtils;
var impAppView = core_private_2.AppView;
var impDebugAppView = core_private_2.DebugAppView;
var impDebugContext = core_private_2.DebugContext;
var impAppElement = core_private_2.AppElement;
var impElementRef = core_1.ElementRef;
var impViewContainerRef = core_1.ViewContainerRef;
var impChangeDetectorRef = core_1.ChangeDetectorRef;
var impRenderComponentType = core_1.RenderComponentType;
var impQueryList = core_1.QueryList;
var impTemplateRef = core_1.TemplateRef;
var impTemplateRef_ = core_private_2.TemplateRef_;
var impValueUnwrapper = core_private_2.ValueUnwrapper;
var impInjector = core_1.Injector;
var impViewEncapsulation = core_1.ViewEncapsulation;
var impViewType = core_private_2.ViewType;
var impChangeDetectionStrategy = core_1.ChangeDetectionStrategy;
var impStaticNodeDebugInfo = core_private_2.StaticNodeDebugInfo;
var impRenderer = core_1.Renderer;
var impSimpleChange = core_1.SimpleChange;
var impUninitialized = core_private_2.uninitialized;
var impChangeDetectorState = core_private_2.ChangeDetectorState;
var impFlattenNestedViewRenderNodes = core_private_2.flattenNestedViewRenderNodes;
var impDevModeEqual = core_private_2.devModeEqual;
var impInterpolate = core_private_2.interpolate;
var impCheckBinding = core_private_2.checkBinding;
var impCastByValue = core_private_2.castByValue;
var impEMPTY_ARRAY = core_private_2.EMPTY_ARRAY;
var impEMPTY_MAP = core_private_2.EMPTY_MAP;
var Identifiers = function() {
function Identifiers() {}
Identifiers.ViewUtils = new compile_metadata_1.CompileIdentifierMetadata({
name: "ViewUtils",
moduleUrl: util_1.assetUrl("core", "linker/view_utils"),
runtime: impViewUtils
});
Identifiers.AppView = new compile_metadata_1.CompileIdentifierMetadata({
name: "AppView",
moduleUrl: APP_VIEW_MODULE_URL,
runtime: impAppView
});
Identifiers.DebugAppView = new compile_metadata_1.CompileIdentifierMetadata({
name: "DebugAppView",
moduleUrl: APP_VIEW_MODULE_URL,
runtime: impDebugAppView
});
Identifiers.AppElement = new compile_metadata_1.CompileIdentifierMetadata({
name: "AppElement",
moduleUrl: util_1.assetUrl("core", "linker/element"),
runtime: impAppElement
});
Identifiers.ElementRef = new compile_metadata_1.CompileIdentifierMetadata({
name: "ElementRef",
moduleUrl: util_1.assetUrl("core", "linker/element_ref"),
runtime: impElementRef
});
Identifiers.ViewContainerRef = new compile_metadata_1.CompileIdentifierMetadata({
name: "ViewContainerRef",
moduleUrl: util_1.assetUrl("core", "linker/view_container_ref"),
runtime: impViewContainerRef
});
Identifiers.ChangeDetectorRef = new compile_metadata_1.CompileIdentifierMetadata({
name: "ChangeDetectorRef",
moduleUrl: util_1.assetUrl("core", "change_detection/change_detector_ref"),
runtime: impChangeDetectorRef
});
Identifiers.RenderComponentType = new compile_metadata_1.CompileIdentifierMetadata({
name: "RenderComponentType",
moduleUrl: util_1.assetUrl("core", "render/api"),
runtime: impRenderComponentType
});
Identifiers.QueryList = new compile_metadata_1.CompileIdentifierMetadata({
name: "QueryList",
moduleUrl: util_1.assetUrl("core", "linker/query_list"),
runtime: impQueryList
});
Identifiers.TemplateRef = new compile_metadata_1.CompileIdentifierMetadata({
name: "TemplateRef",
moduleUrl: util_1.assetUrl("core", "linker/template_ref"),
runtime: impTemplateRef
});
Identifiers.TemplateRef_ = new compile_metadata_1.CompileIdentifierMetadata({
name: "TemplateRef_",
moduleUrl: util_1.assetUrl("core", "linker/template_ref"),
runtime: impTemplateRef_
});
Identifiers.ValueUnwrapper = new compile_metadata_1.CompileIdentifierMetadata({
name: "ValueUnwrapper",
moduleUrl: CD_MODULE_URL,
runtime: impValueUnwrapper
});
Identifiers.Injector = new compile_metadata_1.CompileIdentifierMetadata({
name: "Injector",
moduleUrl: util_1.assetUrl("core", "di/injector"),
runtime: impInjector
});
Identifiers.ViewEncapsulation = new compile_metadata_1.CompileIdentifierMetadata({
name: "ViewEncapsulation",
moduleUrl: util_1.assetUrl("core", "metadata/view"),
runtime: impViewEncapsulation
});
Identifiers.ViewType = new compile_metadata_1.CompileIdentifierMetadata({
name: "ViewType",
moduleUrl: util_1.assetUrl("core", "linker/view_type"),
runtime: impViewType
});
Identifiers.ChangeDetectionStrategy = new compile_metadata_1.CompileIdentifierMetadata({
name: "ChangeDetectionStrategy",
moduleUrl: CD_MODULE_URL,
runtime: impChangeDetectionStrategy
});
Identifiers.StaticNodeDebugInfo = new compile_metadata_1.CompileIdentifierMetadata({
name: "StaticNodeDebugInfo",
moduleUrl: util_1.assetUrl("core", "linker/debug_context"),
runtime: impStaticNodeDebugInfo
});
Identifiers.DebugContext = new compile_metadata_1.CompileIdentifierMetadata({
name: "DebugContext",
moduleUrl: util_1.assetUrl("core", "linker/debug_context"),
runtime: impDebugContext
});
Identifiers.Renderer = new compile_metadata_1.CompileIdentifierMetadata({
name: "Renderer",
moduleUrl: util_1.assetUrl("core", "render/api"),
runtime: impRenderer
});
Identifiers.SimpleChange = new compile_metadata_1.CompileIdentifierMetadata({
name: "SimpleChange",
moduleUrl: CD_MODULE_URL,
runtime: impSimpleChange
});
Identifiers.uninitialized = new compile_metadata_1.CompileIdentifierMetadata({
name: "uninitialized",
moduleUrl: CD_MODULE_URL,
runtime: impUninitialized
});
Identifiers.ChangeDetectorState = new compile_metadata_1.CompileIdentifierMetadata({
name: "ChangeDetectorState",
moduleUrl: CD_MODULE_URL,
runtime: impChangeDetectorState
});
Identifiers.checkBinding = new compile_metadata_1.CompileIdentifierMetadata({
name: "checkBinding",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: impCheckBinding
});
Identifiers.flattenNestedViewRenderNodes = new compile_metadata_1.CompileIdentifierMetadata({
name: "flattenNestedViewRenderNodes",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: impFlattenNestedViewRenderNodes
});
Identifiers.devModeEqual = new compile_metadata_1.CompileIdentifierMetadata({
name: "devModeEqual",
moduleUrl: CD_MODULE_URL,
runtime: impDevModeEqual
});
Identifiers.interpolate = new compile_metadata_1.CompileIdentifierMetadata({
name: "interpolate",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: impInterpolate
});
Identifiers.castByValue = new compile_metadata_1.CompileIdentifierMetadata({
name: "castByValue",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: impCastByValue
});
Identifiers.EMPTY_ARRAY = new compile_metadata_1.CompileIdentifierMetadata({
name: "EMPTY_ARRAY",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: impEMPTY_ARRAY
});
Identifiers.EMPTY_MAP = new compile_metadata_1.CompileIdentifierMetadata({
name: "EMPTY_MAP",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: impEMPTY_MAP
});
Identifiers.pureProxies = [ null, new compile_metadata_1.CompileIdentifierMetadata({
name: "pureProxy1",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: core_private_2.pureProxy1
}), new compile_metadata_1.CompileIdentifierMetadata({
name: "pureProxy2",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: core_private_2.pureProxy2
}), new compile_metadata_1.CompileIdentifierMetadata({
name: "pureProxy3",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: core_private_2.pureProxy3
}), new compile_metadata_1.CompileIdentifierMetadata({
name: "pureProxy4",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: core_private_2.pureProxy4
}), new compile_metadata_1.CompileIdentifierMetadata({
name: "pureProxy5",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: core_private_2.pureProxy5
}), new compile_metadata_1.CompileIdentifierMetadata({
name: "pureProxy6",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: core_private_2.pureProxy6
}), new compile_metadata_1.CompileIdentifierMetadata({
name: "pureProxy7",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: core_private_2.pureProxy7
}), new compile_metadata_1.CompileIdentifierMetadata({
name: "pureProxy8",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: core_private_2.pureProxy8
}), new compile_metadata_1.CompileIdentifierMetadata({
name: "pureProxy9",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: core_private_2.pureProxy9
}), new compile_metadata_1.CompileIdentifierMetadata({
name: "pureProxy10",
moduleUrl: VIEW_UTILS_MODULE_URL,
runtime: core_private_2.pureProxy10
}) ];
Identifiers.SecurityContext = new compile_metadata_1.CompileIdentifierMetadata({
name: "SecurityContext",
moduleUrl: util_1.assetUrl("core", "security"),
runtime: core_private_1.SecurityContext
});
return Identifiers;
}();
exports.Identifiers = Identifiers;
function identifierToken(identifier) {
return new compile_metadata_1.CompileTokenMetadata({
identifier: identifier
});
}
exports.identifierToken = identifierToken;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var core_private_1 = __webpack_require__(284);
var lang_1 = __webpack_require__(281);
var exceptions_1 = __webpack_require__(286);
var collection_1 = __webpack_require__(285);
var selector_1 = __webpack_require__(297);
var util_1 = __webpack_require__(300);
var url_resolver_1 = __webpack_require__(303);
var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))$/g;
var CompileMetadataWithIdentifier = function() {
function CompileMetadataWithIdentifier() {}
Object.defineProperty(CompileMetadataWithIdentifier.prototype, "identifier", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return CompileMetadataWithIdentifier;
}();
exports.CompileMetadataWithIdentifier = CompileMetadataWithIdentifier;
var CompileMetadataWithType = function(_super) {
__extends(CompileMetadataWithType, _super);
function CompileMetadataWithType() {
_super.apply(this, arguments);
}
Object.defineProperty(CompileMetadataWithType.prototype, "type", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(CompileMetadataWithType.prototype, "identifier", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return CompileMetadataWithType;
}(CompileMetadataWithIdentifier);
exports.CompileMetadataWithType = CompileMetadataWithType;
function metadataFromJson(data) {
return _COMPILE_METADATA_FROM_JSON[data["class"]](data);
}
exports.metadataFromJson = metadataFromJson;
var CompileIdentifierMetadata = function() {
function CompileIdentifierMetadata(_a) {
var _b = _a === void 0 ? {} : _a, runtime = _b.runtime, name = _b.name, moduleUrl = _b.moduleUrl, prefix = _b.prefix, value = _b.value;
this.runtime = runtime;
this.name = name;
this.prefix = prefix;
this.moduleUrl = moduleUrl;
this.value = value;
}
CompileIdentifierMetadata.fromJson = function(data) {
var value = lang_1.isArray(data["value"]) ? _arrayFromJson(data["value"], metadataFromJson) : _objFromJson(data["value"], metadataFromJson);
return new CompileIdentifierMetadata({
name: data["name"],
prefix: data["prefix"],
moduleUrl: data["moduleUrl"],
value: value
});
};
CompileIdentifierMetadata.prototype.toJson = function() {
var value = lang_1.isArray(this.value) ? _arrayToJson(this.value) : _objToJson(this.value);
return {
"class": "Identifier",
name: this.name,
moduleUrl: this.moduleUrl,
prefix: this.prefix,
value: value
};
};
Object.defineProperty(CompileIdentifierMetadata.prototype, "identifier", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
return CompileIdentifierMetadata;
}();
exports.CompileIdentifierMetadata = CompileIdentifierMetadata;
var CompileDiDependencyMetadata = function() {
function CompileDiDependencyMetadata(_a) {
var _b = _a === void 0 ? {} : _a, isAttribute = _b.isAttribute, isSelf = _b.isSelf, isHost = _b.isHost, isSkipSelf = _b.isSkipSelf, isOptional = _b.isOptional, isValue = _b.isValue, query = _b.query, viewQuery = _b.viewQuery, token = _b.token, value = _b.value;
this.isAttribute = lang_1.normalizeBool(isAttribute);
this.isSelf = lang_1.normalizeBool(isSelf);
this.isHost = lang_1.normalizeBool(isHost);
this.isSkipSelf = lang_1.normalizeBool(isSkipSelf);
this.isOptional = lang_1.normalizeBool(isOptional);
this.isValue = lang_1.normalizeBool(isValue);
this.query = query;
this.viewQuery = viewQuery;
this.token = token;
this.value = value;
}
CompileDiDependencyMetadata.fromJson = function(data) {
return new CompileDiDependencyMetadata({
token: _objFromJson(data["token"], CompileTokenMetadata.fromJson),
query: _objFromJson(data["query"], CompileQueryMetadata.fromJson),
viewQuery: _objFromJson(data["viewQuery"], CompileQueryMetadata.fromJson),
value: data["value"],
isAttribute: data["isAttribute"],
isSelf: data["isSelf"],
isHost: data["isHost"],
isSkipSelf: data["isSkipSelf"],
isOptional: data["isOptional"],
isValue: data["isValue"]
});
};
CompileDiDependencyMetadata.prototype.toJson = function() {
return {
token: _objToJson(this.token),
query: _objToJson(this.query),
viewQuery: _objToJson(this.viewQuery),
value: this.value,
isAttribute: this.isAttribute,
isSelf: this.isSelf,
isHost: this.isHost,
isSkipSelf: this.isSkipSelf,
isOptional: this.isOptional,
isValue: this.isValue
};
};
return CompileDiDependencyMetadata;
}();
exports.CompileDiDependencyMetadata = CompileDiDependencyMetadata;
var CompileProviderMetadata = function() {
function CompileProviderMetadata(_a) {
var token = _a.token, useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
this.token = token;
this.useClass = useClass;
this.useValue = useValue;
this.useExisting = useExisting;
this.useFactory = useFactory;
this.deps = lang_1.normalizeBlank(deps);
this.multi = lang_1.normalizeBool(multi);
}
CompileProviderMetadata.fromJson = function(data) {
return new CompileProviderMetadata({
token: _objFromJson(data["token"], CompileTokenMetadata.fromJson),
useClass: _objFromJson(data["useClass"], CompileTypeMetadata.fromJson),
useExisting: _objFromJson(data["useExisting"], CompileTokenMetadata.fromJson),
useValue: _objFromJson(data["useValue"], CompileIdentifierMetadata.fromJson),
useFactory: _objFromJson(data["useFactory"], CompileFactoryMetadata.fromJson),
multi: data["multi"],
deps: _arrayFromJson(data["deps"], CompileDiDependencyMetadata.fromJson)
});
};
CompileProviderMetadata.prototype.toJson = function() {
return {
"class": "Provider",
token: _objToJson(this.token),
useClass: _objToJson(this.useClass),
useExisting: _objToJson(this.useExisting),
useValue: _objToJson(this.useValue),
useFactory: _objToJson(this.useFactory),
multi: this.multi,
deps: _arrayToJson(this.deps)
};
};
return CompileProviderMetadata;
}();
exports.CompileProviderMetadata = CompileProviderMetadata;
var CompileFactoryMetadata = function() {
function CompileFactoryMetadata(_a) {
var runtime = _a.runtime, name = _a.name, moduleUrl = _a.moduleUrl, prefix = _a.prefix, diDeps = _a.diDeps, value = _a.value;
this.runtime = runtime;
this.name = name;
this.prefix = prefix;
this.moduleUrl = moduleUrl;
this.diDeps = _normalizeArray(diDeps);
this.value = value;
}
Object.defineProperty(CompileFactoryMetadata.prototype, "identifier", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
CompileFactoryMetadata.fromJson = function(data) {
return new CompileFactoryMetadata({
name: data["name"],
prefix: data["prefix"],
moduleUrl: data["moduleUrl"],
value: data["value"],
diDeps: _arrayFromJson(data["diDeps"], CompileDiDependencyMetadata.fromJson)
});
};
CompileFactoryMetadata.prototype.toJson = function() {
return {
"class": "Factory",
name: this.name,
prefix: this.prefix,
moduleUrl: this.moduleUrl,
value: this.value,
diDeps: _arrayToJson(this.diDeps)
};
};
return CompileFactoryMetadata;
}();
exports.CompileFactoryMetadata = CompileFactoryMetadata;
var CompileTokenMetadata = function() {
function CompileTokenMetadata(_a) {
var value = _a.value, identifier = _a.identifier, identifierIsInstance = _a.identifierIsInstance;
this.value = value;
this.identifier = identifier;
this.identifierIsInstance = lang_1.normalizeBool(identifierIsInstance);
}
CompileTokenMetadata.fromJson = function(data) {
return new CompileTokenMetadata({
value: data["value"],
identifier: _objFromJson(data["identifier"], CompileIdentifierMetadata.fromJson),
identifierIsInstance: data["identifierIsInstance"]
});
};
CompileTokenMetadata.prototype.toJson = function() {
return {
value: this.value,
identifier: _objToJson(this.identifier),
identifierIsInstance: this.identifierIsInstance
};
};
Object.defineProperty(CompileTokenMetadata.prototype, "runtimeCacheKey", {
get: function() {
if (lang_1.isPresent(this.identifier)) {
return this.identifier.runtime;
} else {
return this.value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(CompileTokenMetadata.prototype, "assetCacheKey", {
get: function() {
if (lang_1.isPresent(this.identifier)) {
return lang_1.isPresent(this.identifier.moduleUrl) && lang_1.isPresent(url_resolver_1.getUrlScheme(this.identifier.moduleUrl)) ? this.identifier.name + "|" + this.identifier.moduleUrl + "|" + this.identifierIsInstance : null;
} else {
return this.value;
}
},
enumerable: true,
configurable: true
});
CompileTokenMetadata.prototype.equalsTo = function(token2) {
var rk = this.runtimeCacheKey;
var ak = this.assetCacheKey;
return lang_1.isPresent(rk) && rk == token2.runtimeCacheKey || lang_1.isPresent(ak) && ak == token2.assetCacheKey;
};
Object.defineProperty(CompileTokenMetadata.prototype, "name", {
get: function() {
return lang_1.isPresent(this.value) ? util_1.sanitizeIdentifier(this.value) : this.identifier.name;
},
enumerable: true,
configurable: true
});
return CompileTokenMetadata;
}();
exports.CompileTokenMetadata = CompileTokenMetadata;
var CompileTokenMap = function() {
function CompileTokenMap() {
this._valueMap = new Map();
this._values = [];
}
CompileTokenMap.prototype.add = function(token, value) {
var existing = this.get(token);
if (lang_1.isPresent(existing)) {
throw new exceptions_1.BaseException("Can only add to a TokenMap! Token: " + token.name);
}
this._values.push(value);
var rk = token.runtimeCacheKey;
if (lang_1.isPresent(rk)) {
this._valueMap.set(rk, value);
}
var ak = token.assetCacheKey;
if (lang_1.isPresent(ak)) {
this._valueMap.set(ak, value);
}
};
CompileTokenMap.prototype.get = function(token) {
var rk = token.runtimeCacheKey;
var ak = token.assetCacheKey;
var result;
if (lang_1.isPresent(rk)) {
result = this._valueMap.get(rk);
}
if (lang_1.isBlank(result) && lang_1.isPresent(ak)) {
result = this._valueMap.get(ak);
}
return result;
};
CompileTokenMap.prototype.values = function() {
return this._values;
};
Object.defineProperty(CompileTokenMap.prototype, "size", {
get: function() {
return this._values.length;
},
enumerable: true,
configurable: true
});
return CompileTokenMap;
}();
exports.CompileTokenMap = CompileTokenMap;
var CompileTypeMetadata = function() {
function CompileTypeMetadata(_a) {
var _b = _a === void 0 ? {} : _a, runtime = _b.runtime, name = _b.name, moduleUrl = _b.moduleUrl, prefix = _b.prefix, isHost = _b.isHost, value = _b.value, diDeps = _b.diDeps;
this.runtime = runtime;
this.name = name;
this.moduleUrl = moduleUrl;
this.prefix = prefix;
this.isHost = lang_1.normalizeBool(isHost);
this.value = value;
this.diDeps = _normalizeArray(diDeps);
}
CompileTypeMetadata.fromJson = function(data) {
return new CompileTypeMetadata({
name: data["name"],
moduleUrl: data["moduleUrl"],
prefix: data["prefix"],
isHost: data["isHost"],
value: data["value"],
diDeps: _arrayFromJson(data["diDeps"], CompileDiDependencyMetadata.fromJson)
});
};
Object.defineProperty(CompileTypeMetadata.prototype, "identifier", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
Object.defineProperty(CompileTypeMetadata.prototype, "type", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
CompileTypeMetadata.prototype.toJson = function() {
return {
"class": "Type",
name: this.name,
moduleUrl: this.moduleUrl,
prefix: this.prefix,
isHost: this.isHost,
value: this.value,
diDeps: _arrayToJson(this.diDeps)
};
};
return CompileTypeMetadata;
}();
exports.CompileTypeMetadata = CompileTypeMetadata;
var CompileQueryMetadata = function() {
function CompileQueryMetadata(_a) {
var _b = _a === void 0 ? {} : _a, selectors = _b.selectors, descendants = _b.descendants, first = _b.first, propertyName = _b.propertyName, read = _b.read;
this.selectors = selectors;
this.descendants = lang_1.normalizeBool(descendants);
this.first = lang_1.normalizeBool(first);
this.propertyName = propertyName;
this.read = read;
}
CompileQueryMetadata.fromJson = function(data) {
return new CompileQueryMetadata({
selectors: _arrayFromJson(data["selectors"], CompileTokenMetadata.fromJson),
descendants: data["descendants"],
first: data["first"],
propertyName: data["propertyName"],
read: _objFromJson(data["read"], CompileTokenMetadata.fromJson)
});
};
CompileQueryMetadata.prototype.toJson = function() {
return {
selectors: _arrayToJson(this.selectors),
descendants: this.descendants,
first: this.first,
propertyName: this.propertyName,
read: _objToJson(this.read)
};
};
return CompileQueryMetadata;
}();
exports.CompileQueryMetadata = CompileQueryMetadata;
var CompileTemplateMetadata = function() {
function CompileTemplateMetadata(_a) {
var _b = _a === void 0 ? {} : _a, encapsulation = _b.encapsulation, template = _b.template, templateUrl = _b.templateUrl, styles = _b.styles, styleUrls = _b.styleUrls, ngContentSelectors = _b.ngContentSelectors;
this.encapsulation = lang_1.isPresent(encapsulation) ? encapsulation : core_1.ViewEncapsulation.Emulated;
this.template = template;
this.templateUrl = templateUrl;
this.styles = lang_1.isPresent(styles) ? styles : [];
this.styleUrls = lang_1.isPresent(styleUrls) ? styleUrls : [];
this.ngContentSelectors = lang_1.isPresent(ngContentSelectors) ? ngContentSelectors : [];
}
CompileTemplateMetadata.fromJson = function(data) {
return new CompileTemplateMetadata({
encapsulation: lang_1.isPresent(data["encapsulation"]) ? core_private_1.VIEW_ENCAPSULATION_VALUES[data["encapsulation"]] : data["encapsulation"],
template: data["template"],
templateUrl: data["templateUrl"],
styles: data["styles"],
styleUrls: data["styleUrls"],
ngContentSelectors: data["ngContentSelectors"]
});
};
CompileTemplateMetadata.prototype.toJson = function() {
return {
encapsulation: lang_1.isPresent(this.encapsulation) ? lang_1.serializeEnum(this.encapsulation) : this.encapsulation,
template: this.template,
templateUrl: this.templateUrl,
styles: this.styles,
styleUrls: this.styleUrls,
ngContentSelectors: this.ngContentSelectors
};
};
return CompileTemplateMetadata;
}();
exports.CompileTemplateMetadata = CompileTemplateMetadata;
var CompileDirectiveMetadata = function() {
function CompileDirectiveMetadata(_a) {
var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, hostListeners = _b.hostListeners, hostProperties = _b.hostProperties, hostAttributes = _b.hostAttributes, lifecycleHooks = _b.lifecycleHooks, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, template = _b.template;
this.type = type;
this.isComponent = isComponent;
this.selector = selector;
this.exportAs = exportAs;
this.changeDetection = changeDetection;
this.inputs = inputs;
this.outputs = outputs;
this.hostListeners = hostListeners;
this.hostProperties = hostProperties;
this.hostAttributes = hostAttributes;
this.lifecycleHooks = _normalizeArray(lifecycleHooks);
this.providers = _normalizeArray(providers);
this.viewProviders = _normalizeArray(viewProviders);
this.queries = _normalizeArray(queries);
this.viewQueries = _normalizeArray(viewQueries);
this.template = template;
}
CompileDirectiveMetadata.create = function(_a) {
var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, host = _b.host, lifecycleHooks = _b.lifecycleHooks, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, template = _b.template;
var hostListeners = {};
var hostProperties = {};
var hostAttributes = {};
if (lang_1.isPresent(host)) {
collection_1.StringMapWrapper.forEach(host, function(value, key) {
var matches = lang_1.RegExpWrapper.firstMatch(HOST_REG_EXP, key);
if (lang_1.isBlank(matches)) {
hostAttributes[key] = value;
} else if (lang_1.isPresent(matches[1])) {
hostProperties[matches[1]] = value;
} else if (lang_1.isPresent(matches[2])) {
hostListeners[matches[2]] = value;
}
});
}
var inputsMap = {};
if (lang_1.isPresent(inputs)) {
inputs.forEach(function(bindConfig) {
var parts = util_1.splitAtColon(bindConfig, [ bindConfig, bindConfig ]);
inputsMap[parts[0]] = parts[1];
});
}
var outputsMap = {};
if (lang_1.isPresent(outputs)) {
outputs.forEach(function(bindConfig) {
var parts = util_1.splitAtColon(bindConfig, [ bindConfig, bindConfig ]);
outputsMap[parts[0]] = parts[1];
});
}
return new CompileDirectiveMetadata({
type: type,
isComponent: lang_1.normalizeBool(isComponent),
selector: selector,
exportAs: exportAs,
changeDetection: changeDetection,
inputs: inputsMap,
outputs: outputsMap,
hostListeners: hostListeners,
hostProperties: hostProperties,
hostAttributes: hostAttributes,
lifecycleHooks: lang_1.isPresent(lifecycleHooks) ? lifecycleHooks : [],
providers: providers,
viewProviders: viewProviders,
queries: queries,
viewQueries: viewQueries,
template: template
});
};
Object.defineProperty(CompileDirectiveMetadata.prototype, "identifier", {
get: function() {
return this.type;
},
enumerable: true,
configurable: true
});
CompileDirectiveMetadata.fromJson = function(data) {
return new CompileDirectiveMetadata({
isComponent: data["isComponent"],
selector: data["selector"],
exportAs: data["exportAs"],
type: lang_1.isPresent(data["type"]) ? CompileTypeMetadata.fromJson(data["type"]) : data["type"],
changeDetection: lang_1.isPresent(data["changeDetection"]) ? core_private_1.CHANGE_DETECTION_STRATEGY_VALUES[data["changeDetection"]] : data["changeDetection"],
inputs: data["inputs"],
outputs: data["outputs"],
hostListeners: data["hostListeners"],
hostProperties: data["hostProperties"],
hostAttributes: data["hostAttributes"],
lifecycleHooks: data["lifecycleHooks"].map(function(hookValue) {
return core_private_1.LIFECYCLE_HOOKS_VALUES[hookValue];
}),
template: lang_1.isPresent(data["template"]) ? CompileTemplateMetadata.fromJson(data["template"]) : data["template"],
providers: _arrayFromJson(data["providers"], metadataFromJson),
viewProviders: _arrayFromJson(data["viewProviders"], metadataFromJson),
queries: _arrayFromJson(data["queries"], CompileQueryMetadata.fromJson),
viewQueries: _arrayFromJson(data["viewQueries"], CompileQueryMetadata.fromJson)
});
};
CompileDirectiveMetadata.prototype.toJson = function() {
return {
"class": "Directive",
isComponent: this.isComponent,
selector: this.selector,
exportAs: this.exportAs,
type: lang_1.isPresent(this.type) ? this.type.toJson() : this.type,
changeDetection: lang_1.isPresent(this.changeDetection) ? lang_1.serializeEnum(this.changeDetection) : this.changeDetection,
inputs: this.inputs,
outputs: this.outputs,
hostListeners: this.hostListeners,
hostProperties: this.hostProperties,
hostAttributes: this.hostAttributes,
lifecycleHooks: this.lifecycleHooks.map(function(hook) {
return lang_1.serializeEnum(hook);
}),
template: lang_1.isPresent(this.template) ? this.template.toJson() : this.template,
providers: _arrayToJson(this.providers),
viewProviders: _arrayToJson(this.viewProviders),
queries: _arrayToJson(this.queries),
viewQueries: _arrayToJson(this.viewQueries)
};
};
return CompileDirectiveMetadata;
}();
exports.CompileDirectiveMetadata = CompileDirectiveMetadata;
function createHostComponentMeta(componentType, componentSelector) {
var template = selector_1.CssSelector.parse(componentSelector)[0].getMatchingElementTemplate();
return CompileDirectiveMetadata.create({
type: new CompileTypeMetadata({
runtime: Object,
name: componentType.name + "_Host",
moduleUrl: componentType.moduleUrl,
isHost: true
}),
template: new CompileTemplateMetadata({
template: template,
templateUrl: "",
styles: [],
styleUrls: [],
ngContentSelectors: []
}),
changeDetection: core_1.ChangeDetectionStrategy.Default,
inputs: [],
outputs: [],
host: {},
lifecycleHooks: [],
isComponent: true,
selector: "*",
providers: [],
viewProviders: [],
queries: [],
viewQueries: []
});
}
exports.createHostComponentMeta = createHostComponentMeta;
var CompilePipeMetadata = function() {
function CompilePipeMetadata(_a) {
var _b = _a === void 0 ? {} : _a, type = _b.type, name = _b.name, pure = _b.pure, lifecycleHooks = _b.lifecycleHooks;
this.type = type;
this.name = name;
this.pure = lang_1.normalizeBool(pure);
this.lifecycleHooks = _normalizeArray(lifecycleHooks);
}
Object.defineProperty(CompilePipeMetadata.prototype, "identifier", {
get: function() {
return this.type;
},
enumerable: true,
configurable: true
});
CompilePipeMetadata.fromJson = function(data) {
return new CompilePipeMetadata({
type: lang_1.isPresent(data["type"]) ? CompileTypeMetadata.fromJson(data["type"]) : data["type"],
name: data["name"],
pure: data["pure"]
});
};
CompilePipeMetadata.prototype.toJson = function() {
return {
"class": "Pipe",
type: lang_1.isPresent(this.type) ? this.type.toJson() : null,
name: this.name,
pure: this.pure
};
};
return CompilePipeMetadata;
}();
exports.CompilePipeMetadata = CompilePipeMetadata;
var _COMPILE_METADATA_FROM_JSON = {
Directive: CompileDirectiveMetadata.fromJson,
Pipe: CompilePipeMetadata.fromJson,
Type: CompileTypeMetadata.fromJson,
Provider: CompileProviderMetadata.fromJson,
Identifier: CompileIdentifierMetadata.fromJson,
Factory: CompileFactoryMetadata.fromJson
};
function _arrayFromJson(obj, fn) {
return lang_1.isBlank(obj) ? null : obj.map(function(o) {
return _objFromJson(o, fn);
});
}
function _arrayToJson(obj) {
return lang_1.isBlank(obj) ? null : obj.map(_objToJson);
}
function _objFromJson(obj, fn) {
if (lang_1.isArray(obj)) return _arrayFromJson(obj, fn);
if (lang_1.isString(obj) || lang_1.isBlank(obj) || lang_1.isBoolean(obj) || lang_1.isNumber(obj)) return obj;
return fn(obj);
}
function _objToJson(obj) {
if (lang_1.isArray(obj)) return _arrayToJson(obj);
if (lang_1.isString(obj) || lang_1.isBlank(obj) || lang_1.isBoolean(obj) || lang_1.isNumber(obj)) return obj;
return obj.toJson();
}
function _normalizeArray(obj) {
return lang_1.isPresent(obj) ? obj : [];
}
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(281);
var _ASSET_SCHEME = "asset:";
function createUrlResolverWithoutPackagePrefix() {
return new UrlResolver();
}
exports.createUrlResolverWithoutPackagePrefix = createUrlResolverWithoutPackagePrefix;
function createOfflineCompileUrlResolver() {
return new UrlResolver(_ASSET_SCHEME);
}
exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver;
exports.DEFAULT_PACKAGE_URL_PROVIDER = {
provide: core_1.PACKAGE_ROOT_URL,
useValue: "/"
};
var UrlResolver = function() {
function UrlResolver(_packagePrefix) {
if (_packagePrefix === void 0) {
_packagePrefix = null;
}
this._packagePrefix = _packagePrefix;
}
UrlResolver.prototype.resolve = function(baseUrl, url) {
var resolvedUrl = url;
if (lang_1.isPresent(baseUrl) && baseUrl.length > 0) {
resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
}
var resolvedParts = _split(resolvedUrl);
var prefix = this._packagePrefix;
if (lang_1.isPresent(prefix) && lang_1.isPresent(resolvedParts) && resolvedParts[_ComponentIndex.Scheme] == "package") {
var path = resolvedParts[_ComponentIndex.Path];
if (this._packagePrefix === _ASSET_SCHEME) {
var pathSegements = path.split(/\//);
resolvedUrl = "asset:" + pathSegements[0] + "/lib/" + pathSegements.slice(1).join("/");
} else {
prefix = lang_1.StringWrapper.stripRight(prefix, "/");
path = lang_1.StringWrapper.stripLeft(path, "/");
return prefix + "/" + path;
}
}
return resolvedUrl;
};
UrlResolver.decorators = [ {
type: core_1.Injectable
} ];
UrlResolver.ctorParameters = [ {
type: undefined,
decorators: [ {
type: core_1.Inject,
args: [ core_1.PACKAGE_ROOT_URL ]
} ]
} ];
return UrlResolver;
}();
exports.UrlResolver = UrlResolver;
function getUrlScheme(url) {
var match = _split(url);
return match && match[_ComponentIndex.Scheme] || "";
}
exports.getUrlScheme = getUrlScheme;
function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
var out = [];
if (lang_1.isPresent(opt_scheme)) {
out.push(opt_scheme + ":");
}
if (lang_1.isPresent(opt_domain)) {
out.push("//");
if (lang_1.isPresent(opt_userInfo)) {
out.push(opt_userInfo + "@");
}
out.push(opt_domain);
if (lang_1.isPresent(opt_port)) {
out.push(":" + opt_port);
}
}
if (lang_1.isPresent(opt_path)) {
out.push(opt_path);
}
if (lang_1.isPresent(opt_queryData)) {
out.push("?" + opt_queryData);
}
if (lang_1.isPresent(opt_fragment)) {
out.push("#" + opt_fragment);
}
return out.join("");
}
var _splitRe = lang_1.RegExpWrapper.create("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([\\w\\d\\-\\u0100-\\uffff.%]*)" + "(?::([0-9]+))?" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
var _ComponentIndex;
(function(_ComponentIndex) {
_ComponentIndex[_ComponentIndex["Scheme"] = 1] = "Scheme";
_ComponentIndex[_ComponentIndex["UserInfo"] = 2] = "UserInfo";
_ComponentIndex[_ComponentIndex["Domain"] = 3] = "Domain";
_ComponentIndex[_ComponentIndex["Port"] = 4] = "Port";
_ComponentIndex[_ComponentIndex["Path"] = 5] = "Path";
_ComponentIndex[_ComponentIndex["QueryData"] = 6] = "QueryData";
_ComponentIndex[_ComponentIndex["Fragment"] = 7] = "Fragment";
})(_ComponentIndex || (_ComponentIndex = {}));
function _split(uri) {
return lang_1.RegExpWrapper.firstMatch(_splitRe, uri);
}
function _removeDotSegments(path) {
if (path == "/") return "/";
var leadingSlash = path[0] == "/" ? "/" : "";
var trailingSlash = path[path.length - 1] === "/" ? "/" : "";
var segments = path.split("/");
var out = [];
var up = 0;
for (var pos = 0; pos < segments.length; pos++) {
var segment = segments[pos];
switch (segment) {
case "":
case ".":
break;

case "..":
if (out.length > 0) {
out.pop();
} else {
up++;
}
break;

default:
out.push(segment);
}
}
if (leadingSlash == "") {
while (up-- > 0) {
out.unshift("..");
}
if (out.length === 0) out.push(".");
}
return leadingSlash + out.join("/") + trailingSlash;
}
function _joinAndCanonicalizePath(parts) {
var path = parts[_ComponentIndex.Path];
path = lang_1.isBlank(path) ? "" : _removeDotSegments(path);
parts[_ComponentIndex.Path] = path;
return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
}
function _resolveUrl(base, url) {
var parts = _split(encodeURI(url));
var baseParts = _split(base);
if (lang_1.isPresent(parts[_ComponentIndex.Scheme])) {
return _joinAndCanonicalizePath(parts);
} else {
parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
}
for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
if (lang_1.isBlank(parts[i])) {
parts[i] = baseParts[i];
}
}
if (parts[_ComponentIndex.Path][0] == "/") {
return _joinAndCanonicalizePath(parts);
}
var path = baseParts[_ComponentIndex.Path];
if (lang_1.isBlank(path)) path = "/";
var index = path.lastIndexOf("/");
path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
parts[_ComponentIndex.Path] = path;
return _joinAndCanonicalizePath(parts);
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(281);
var collection_1 = __webpack_require__(285);
var template_ast_1 = __webpack_require__(282);
var compile_metadata_1 = __webpack_require__(302);
var identifiers_1 = __webpack_require__(301);
var parse_util_1 = __webpack_require__(295);
var ProviderError = function(_super) {
__extends(ProviderError, _super);
function ProviderError(message, span) {
_super.call(this, span, message);
}
return ProviderError;
}(parse_util_1.ParseError);
exports.ProviderError = ProviderError;
var ProviderViewContext = function() {
function ProviderViewContext(component, sourceSpan) {
var _this = this;
this.component = component;
this.sourceSpan = sourceSpan;
this.errors = [];
this.viewQueries = _getViewQueries(component);
this.viewProviders = new compile_metadata_1.CompileTokenMap();
_normalizeProviders(component.viewProviders, sourceSpan, this.errors).forEach(function(provider) {
if (lang_1.isBlank(_this.viewProviders.get(provider.token))) {
_this.viewProviders.add(provider.token, true);
}
});
}
return ProviderViewContext;
}();
exports.ProviderViewContext = ProviderViewContext;
var ProviderElementContext = function() {
function ProviderElementContext(_viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, _sourceSpan) {
var _this = this;
this._viewContext = _viewContext;
this._parent = _parent;
this._isViewRoot = _isViewRoot;
this._directiveAsts = _directiveAsts;
this._sourceSpan = _sourceSpan;
this._transformedProviders = new compile_metadata_1.CompileTokenMap();
this._seenProviders = new compile_metadata_1.CompileTokenMap();
this._hasViewContainer = false;
this._attrs = {};
attrs.forEach(function(attrAst) {
return _this._attrs[attrAst.name] = attrAst.value;
});
var directivesMeta = _directiveAsts.map(function(directiveAst) {
return directiveAst.directive;
});
this._allProviders = _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, _viewContext.errors);
this._contentQueries = _getContentQueries(directivesMeta);
var queriedTokens = new compile_metadata_1.CompileTokenMap();
this._allProviders.values().forEach(function(provider) {
_this._addQueryReadsTo(provider.token, queriedTokens);
});
refs.forEach(function(refAst) {
_this._addQueryReadsTo(new compile_metadata_1.CompileTokenMetadata({
value: refAst.name
}), queriedTokens);
});
if (lang_1.isPresent(queriedTokens.get(identifiers_1.identifierToken(identifiers_1.Identifiers.ViewContainerRef)))) {
this._hasViewContainer = true;
}
this._allProviders.values().forEach(function(provider) {
var eager = provider.eager || lang_1.isPresent(queriedTokens.get(provider.token));
if (eager) {
_this._getOrCreateLocalProvider(provider.providerType, provider.token, true);
}
});
}
ProviderElementContext.prototype.afterElement = function() {
var _this = this;
this._allProviders.values().forEach(function(provider) {
_this._getOrCreateLocalProvider(provider.providerType, provider.token, false);
});
};
Object.defineProperty(ProviderElementContext.prototype, "transformProviders", {
get: function() {
return this._transformedProviders.values();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", {
get: function() {
var sortedProviderTypes = this._transformedProviders.values().map(function(provider) {
return provider.token.identifier;
});
var sortedDirectives = collection_1.ListWrapper.clone(this._directiveAsts);
collection_1.ListWrapper.sort(sortedDirectives, function(dir1, dir2) {
return sortedProviderTypes.indexOf(dir1.directive.type) - sortedProviderTypes.indexOf(dir2.directive.type);
});
return sortedDirectives;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", {
get: function() {
return this._hasViewContainer;
},
enumerable: true,
configurable: true
});
ProviderElementContext.prototype._addQueryReadsTo = function(token, queryReadTokens) {
this._getQueriesFor(token).forEach(function(query) {
var queryReadToken = lang_1.isPresent(query.read) ? query.read : token;
if (lang_1.isBlank(queryReadTokens.get(queryReadToken))) {
queryReadTokens.add(queryReadToken, true);
}
});
};
ProviderElementContext.prototype._getQueriesFor = function(token) {
var result = [];
var currentEl = this;
var distance = 0;
var queries;
while (currentEl !== null) {
queries = currentEl._contentQueries.get(token);
if (lang_1.isPresent(queries)) {
collection_1.ListWrapper.addAll(result, queries.filter(function(query) {
return query.descendants || distance <= 1;
}));
}
if (currentEl._directiveAsts.length > 0) {
distance++;
}
currentEl = currentEl._parent;
}
queries = this._viewContext.viewQueries.get(token);
if (lang_1.isPresent(queries)) {
collection_1.ListWrapper.addAll(result, queries);
}
return result;
};
ProviderElementContext.prototype._getOrCreateLocalProvider = function(requestingProviderType, token, eager) {
var _this = this;
var resolvedProvider = this._allProviders.get(token);
if (lang_1.isBlank(resolvedProvider) || (requestingProviderType === template_ast_1.ProviderAstType.Directive || requestingProviderType === template_ast_1.ProviderAstType.PublicService) && resolvedProvider.providerType === template_ast_1.ProviderAstType.PrivateService || (requestingProviderType === template_ast_1.ProviderAstType.PrivateService || requestingProviderType === template_ast_1.ProviderAstType.PublicService) && resolvedProvider.providerType === template_ast_1.ProviderAstType.Builtin) {
return null;
}
var transformedProviderAst = this._transformedProviders.get(token);
if (lang_1.isPresent(transformedProviderAst)) {
return transformedProviderAst;
}
if (lang_1.isPresent(this._seenProviders.get(token))) {
this._viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, this._sourceSpan));
return null;
}
this._seenProviders.add(token, true);
var transformedProviders = resolvedProvider.providers.map(function(provider) {
var transformedUseValue = provider.useValue;
var transformedUseExisting = provider.useExisting;
var transformedDeps;
if (lang_1.isPresent(provider.useExisting)) {
var existingDiDep = _this._getDependency(resolvedProvider.providerType, new compile_metadata_1.CompileDiDependencyMetadata({
token: provider.useExisting
}), eager);
if (lang_1.isPresent(existingDiDep.token)) {
transformedUseExisting = existingDiDep.token;
} else {
transformedUseExisting = null;
transformedUseValue = existingDiDep.value;
}
} else if (lang_1.isPresent(provider.useFactory)) {
var deps = lang_1.isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;
transformedDeps = deps.map(function(dep) {
return _this._getDependency(resolvedProvider.providerType, dep, eager);
});
} else if (lang_1.isPresent(provider.useClass)) {
var deps = lang_1.isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;
transformedDeps = deps.map(function(dep) {
return _this._getDependency(resolvedProvider.providerType, dep, eager);
});
}
return _transformProvider(provider, {
useExisting: transformedUseExisting,
useValue: transformedUseValue,
deps: transformedDeps
});
});
transformedProviderAst = _transformProviderAst(resolvedProvider, {
eager: eager,
providers: transformedProviders
});
this._transformedProviders.add(token, transformedProviderAst);
return transformedProviderAst;
};
ProviderElementContext.prototype._getLocalDependency = function(requestingProviderType, dep, eager) {
if (eager === void 0) {
eager = null;
}
if (dep.isAttribute) {
var attrValue = this._attrs[dep.token.value];
return new compile_metadata_1.CompileDiDependencyMetadata({
isValue: true,
value: lang_1.normalizeBlank(attrValue)
});
}
if (lang_1.isPresent(dep.query) || lang_1.isPresent(dep.viewQuery)) {
return dep;
}
if (lang_1.isPresent(dep.token)) {
if (requestingProviderType === template_ast_1.ProviderAstType.Directive || requestingProviderType === template_ast_1.ProviderAstType.Component) {
if (dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.Renderer)) || dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.ElementRef)) || dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.ChangeDetectorRef)) || dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.TemplateRef))) {
return dep;
}
if (dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.ViewContainerRef))) {
this._hasViewContainer = true;
}
}
if (dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.Injector))) {
return dep;
}
if (lang_1.isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {
return dep;
}
}
return null;
};
ProviderElementContext.prototype._getDependency = function(requestingProviderType, dep, eager) {
if (eager === void 0) {
eager = null;
}
var currElement = this;
var currEager = eager;
var result = null;
if (!dep.isSkipSelf) {
result = this._getLocalDependency(requestingProviderType, dep, eager);
}
if (dep.isSelf) {
if (lang_1.isBlank(result) && dep.isOptional) {
result = new compile_metadata_1.CompileDiDependencyMetadata({
isValue: true,
value: null
});
}
} else {
while (lang_1.isBlank(result) && lang_1.isPresent(currElement._parent)) {
var prevElement = currElement;
currElement = currElement._parent;
if (prevElement._isViewRoot) {
currEager = false;
}
result = currElement._getLocalDependency(template_ast_1.ProviderAstType.PublicService, dep, currEager);
}
if (lang_1.isBlank(result)) {
if (!dep.isHost || this._viewContext.component.type.isHost || identifiers_1.identifierToken(this._viewContext.component.type).equalsTo(dep.token) || lang_1.isPresent(this._viewContext.viewProviders.get(dep.token))) {
result = dep;
} else {
result = dep.isOptional ? result = new compile_metadata_1.CompileDiDependencyMetadata({
isValue: true,
value: null
}) : null;
}
}
}
if (lang_1.isBlank(result)) {
this._viewContext.errors.push(new ProviderError("No provider for " + dep.token.name, this._sourceSpan));
}
return result;
};
return ProviderElementContext;
}();
exports.ProviderElementContext = ProviderElementContext;
function _transformProvider(provider, _a) {
var useExisting = _a.useExisting, useValue = _a.useValue, deps = _a.deps;
return new compile_metadata_1.CompileProviderMetadata({
token: provider.token,
useClass: provider.useClass,
useExisting: useExisting,
useFactory: provider.useFactory,
useValue: useValue,
deps: deps,
multi: provider.multi
});
}
function _transformProviderAst(provider, _a) {
var eager = _a.eager, providers = _a.providers;
return new template_ast_1.ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.sourceSpan);
}
function _normalizeProviders(providers, sourceSpan, targetErrors, targetProviders) {
if (targetProviders === void 0) {
targetProviders = null;
}
if (lang_1.isBlank(targetProviders)) {
targetProviders = [];
}
if (lang_1.isPresent(providers)) {
providers.forEach(function(provider) {
if (lang_1.isArray(provider)) {
_normalizeProviders(provider, sourceSpan, targetErrors, targetProviders);
} else {
var normalizeProvider;
if (provider instanceof compile_metadata_1.CompileProviderMetadata) {
normalizeProvider = provider;
} else if (provider instanceof compile_metadata_1.CompileTypeMetadata) {
normalizeProvider = new compile_metadata_1.CompileProviderMetadata({
token: new compile_metadata_1.CompileTokenMetadata({
identifier: provider
}),
useClass: provider
});
} else {
targetErrors.push(new ProviderError("Unknown provider type " + provider, sourceSpan));
}
if (lang_1.isPresent(normalizeProvider)) {
targetProviders.push(normalizeProvider);
}
}
});
}
return targetProviders;
}
function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
var providersByToken = new compile_metadata_1.CompileTokenMap();
directives.forEach(function(directive) {
var dirProvider = new compile_metadata_1.CompileProviderMetadata({
token: new compile_metadata_1.CompileTokenMetadata({
identifier: directive.type
}),
useClass: directive.type
});
_resolveProviders([ dirProvider ], directive.isComponent ? template_ast_1.ProviderAstType.Component : template_ast_1.ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);
});
var directivesWithComponentFirst = directives.filter(function(dir) {
return dir.isComponent;
}).concat(directives.filter(function(dir) {
return !dir.isComponent;
}));
directivesWithComponentFirst.forEach(function(directive) {
_resolveProviders(_normalizeProviders(directive.providers, sourceSpan, targetErrors), template_ast_1.ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);
_resolveProviders(_normalizeProviders(directive.viewProviders, sourceSpan, targetErrors), template_ast_1.ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);
});
return providersByToken;
}
function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
providers.forEach(function(provider) {
var resolvedProvider = targetProvidersByToken.get(provider.token);
if (lang_1.isPresent(resolvedProvider) && resolvedProvider.multiProvider !== provider.multi) {
targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + resolvedProvider.token.name, sourceSpan));
}
if (lang_1.isBlank(resolvedProvider)) {
resolvedProvider = new template_ast_1.ProviderAst(provider.token, provider.multi, eager, [ provider ], providerType, sourceSpan);
targetProvidersByToken.add(provider.token, resolvedProvider);
} else {
if (!provider.multi) {
collection_1.ListWrapper.clear(resolvedProvider.providers);
}
resolvedProvider.providers.push(provider);
}
});
}
function _getViewQueries(component) {
var viewQueries = new compile_metadata_1.CompileTokenMap();
if (lang_1.isPresent(component.viewQueries)) {
component.viewQueries.forEach(function(query) {
return _addQueryToTokenMap(viewQueries, query);
});
}
component.type.diDeps.forEach(function(dep) {
if (lang_1.isPresent(dep.viewQuery)) {
_addQueryToTokenMap(viewQueries, dep.viewQuery);
}
});
return viewQueries;
}
function _getContentQueries(directives) {
var contentQueries = new compile_metadata_1.CompileTokenMap();
directives.forEach(function(directive) {
if (lang_1.isPresent(directive.queries)) {
directive.queries.forEach(function(query) {
return _addQueryToTokenMap(contentQueries, query);
});
}
directive.type.diDeps.forEach(function(dep) {
if (lang_1.isPresent(dep.query)) {
_addQueryToTokenMap(contentQueries, dep.query);
}
});
});
return contentQueries;
}
function _addQueryToTokenMap(map, query) {
query.selectors.forEach(function(token) {
var entry = map.get(token);
if (lang_1.isBlank(entry)) {
entry = [];
map.add(token, entry);
}
entry.push(query);
});
}
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(281);
var exceptions_1 = __webpack_require__(286);
var identifiers_1 = __webpack_require__(301);
var CompilerConfig = function() {
function CompilerConfig(genDebugInfo, logBindingUpdate, useJit, renderTypes) {
if (renderTypes === void 0) {
renderTypes = null;
}
this.genDebugInfo = genDebugInfo;
this.logBindingUpdate = logBindingUpdate;
this.useJit = useJit;
if (lang_1.isBlank(renderTypes)) {
renderTypes = new DefaultRenderTypes();
}
this.renderTypes = renderTypes;
}
return CompilerConfig;
}();
exports.CompilerConfig = CompilerConfig;
var RenderTypes = function() {
function RenderTypes() {}
Object.defineProperty(RenderTypes.prototype, "renderer", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(RenderTypes.prototype, "renderText", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(RenderTypes.prototype, "renderElement", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(RenderTypes.prototype, "renderComment", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(RenderTypes.prototype, "renderNode", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(RenderTypes.prototype, "renderEvent", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return RenderTypes;
}();
exports.RenderTypes = RenderTypes;
var DefaultRenderTypes = function() {
function DefaultRenderTypes() {
this.renderer = identifiers_1.Identifiers.Renderer;
this.renderText = null;
this.renderElement = null;
this.renderComment = null;
this.renderNode = null;
this.renderEvent = null;
}
return DefaultRenderTypes;
}();
exports.DefaultRenderTypes = DefaultRenderTypes;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var compile_metadata_1 = __webpack_require__(302);
var exceptions_1 = __webpack_require__(286);
var collection_1 = __webpack_require__(285);
var o = __webpack_require__(307);
var util_1 = __webpack_require__(300);
var _COMPONENT_FACTORY_IDENTIFIER = new compile_metadata_1.CompileIdentifierMetadata({
name: "ComponentFactory",
runtime: core_1.ComponentFactory,
moduleUrl: util_1.assetUrl("core", "linker/component_factory")
});
var SourceModule = function() {
function SourceModule(moduleUrl, source) {
this.moduleUrl = moduleUrl;
this.source = source;
}
return SourceModule;
}();
exports.SourceModule = SourceModule;
var StyleSheetSourceWithImports = function() {
function StyleSheetSourceWithImports(source, importedUrls) {
this.source = source;
this.importedUrls = importedUrls;
}
return StyleSheetSourceWithImports;
}();
exports.StyleSheetSourceWithImports = StyleSheetSourceWithImports;
var NormalizedComponentWithViewDirectives = function() {
function NormalizedComponentWithViewDirectives(component, directives, pipes) {
this.component = component;
this.directives = directives;
this.pipes = pipes;
}
return NormalizedComponentWithViewDirectives;
}();
exports.NormalizedComponentWithViewDirectives = NormalizedComponentWithViewDirectives;
var OfflineCompiler = function() {
function OfflineCompiler(_directiveNormalizer, _templateParser, _styleCompiler, _viewCompiler, _outputEmitter, _xhr) {
this._directiveNormalizer = _directiveNormalizer;
this._templateParser = _templateParser;
this._styleCompiler = _styleCompiler;
this._viewCompiler = _viewCompiler;
this._outputEmitter = _outputEmitter;
this._xhr = _xhr;
}
OfflineCompiler.prototype.normalizeDirectiveMetadata = function(directive) {
return this._directiveNormalizer.normalizeDirective(directive);
};
OfflineCompiler.prototype.compileTemplates = function(components) {
var _this = this;
if (components.length === 0) {
throw new exceptions_1.BaseException("No components given");
}
var statements = [];
var exportedVars = [];
var moduleUrl = _templateModuleUrl(components[0].component);
components.forEach(function(componentWithDirs) {
var compMeta = componentWithDirs.component;
_assertComponent(compMeta);
var compViewFactoryVar = _this._compileComponent(compMeta, componentWithDirs.directives, componentWithDirs.pipes, statements);
exportedVars.push(compViewFactoryVar);
var hostMeta = compile_metadata_1.createHostComponentMeta(compMeta.type, compMeta.selector);
var hostViewFactoryVar = _this._compileComponent(hostMeta, [ compMeta ], [], statements);
var compFactoryVar = compMeta.type.name + "NgFactory";
statements.push(o.variable(compFactoryVar).set(o.importExpr(_COMPONENT_FACTORY_IDENTIFIER, [ o.importType(compMeta.type) ]).instantiate([ o.literal(compMeta.selector), o.variable(hostViewFactoryVar), o.importExpr(compMeta.type) ], o.importType(_COMPONENT_FACTORY_IDENTIFIER, [ o.importType(compMeta.type) ], [ o.TypeModifier.Const ]))).toDeclStmt(null, [ o.StmtModifier.Final ]));
exportedVars.push(compFactoryVar);
});
return this._codegenSourceModule(moduleUrl, statements, exportedVars);
};
OfflineCompiler.prototype.loadAndCompileStylesheet = function(stylesheetUrl, shim, suffix) {
var _this = this;
return this._xhr.get(stylesheetUrl).then(function(cssText) {
var compileResult = _this._styleCompiler.compileStylesheet(stylesheetUrl, cssText, shim);
var importedUrls = [];
compileResult.dependencies.forEach(function(dep) {
importedUrls.push(dep.moduleUrl);
dep.valuePlaceholder.moduleUrl = _stylesModuleUrl(dep.moduleUrl, dep.isShimmed, suffix);
});
return new StyleSheetSourceWithImports(_this._codgenStyles(stylesheetUrl, shim, suffix, compileResult), importedUrls);
});
};
OfflineCompiler.prototype._compileComponent = function(compMeta, directives, pipes, targetStatements) {
var styleResult = this._styleCompiler.compileComponent(compMeta);
var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, compMeta.type.name);
var viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, o.variable(styleResult.stylesVar), pipes);
collection_1.ListWrapper.addAll(targetStatements, _resolveStyleStatements(compMeta.type.moduleUrl, styleResult));
collection_1.ListWrapper.addAll(targetStatements, _resolveViewStatements(viewResult));
return viewResult.viewFactoryVar;
};
OfflineCompiler.prototype._codgenStyles = function(inputUrl, shim, suffix, stylesCompileResult) {
return this._codegenSourceModule(_stylesModuleUrl(inputUrl, shim, suffix), stylesCompileResult.statements, [ stylesCompileResult.stylesVar ]);
};
OfflineCompiler.prototype._codegenSourceModule = function(moduleUrl, statements, exportedVars) {
return new SourceModule(moduleUrl, this._outputEmitter.emitStatements(moduleUrl, statements, exportedVars));
};
return OfflineCompiler;
}();
exports.OfflineCompiler = OfflineCompiler;
function _resolveViewStatements(compileResult) {
compileResult.dependencies.forEach(function(dep) {
dep.factoryPlaceholder.moduleUrl = _templateModuleUrl(dep.comp);
});
return compileResult.statements;
}
function _resolveStyleStatements(containingModuleUrl, compileResult) {
var containingSuffix = _splitSuffix(containingModuleUrl)[1];
compileResult.dependencies.forEach(function(dep) {
dep.valuePlaceholder.moduleUrl = _stylesModuleUrl(dep.moduleUrl, dep.isShimmed, containingSuffix);
});
return compileResult.statements;
}
function _templateModuleUrl(comp) {
var urlWithSuffix = _splitSuffix(comp.type.moduleUrl);
return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1];
}
function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
return shim ? stylesheetUrl + ".shim" + suffix : "" + stylesheetUrl + suffix;
}
function _assertComponent(meta) {
if (!meta.isComponent) {
throw new exceptions_1.BaseException("Could not compile '" + meta.type.name + "' because it is not a component.");
}
}
function _splitSuffix(path) {
var lastDot = path.lastIndexOf(".");
if (lastDot !== -1) {
return [ path.substring(0, lastDot), path.substring(lastDot) ];
} else {
return [ path, "" ];
}
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(281);
(function(TypeModifier) {
TypeModifier[TypeModifier["Const"] = 0] = "Const";
})(exports.TypeModifier || (exports.TypeModifier = {}));
var TypeModifier = exports.TypeModifier;
var Type = function() {
function Type(modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
this.modifiers = modifiers;
if (lang_1.isBlank(modifiers)) {
this.modifiers = [];
}
}
Type.prototype.hasModifier = function(modifier) {
return this.modifiers.indexOf(modifier) !== -1;
};
return Type;
}();
exports.Type = Type;
(function(BuiltinTypeName) {
BuiltinTypeName[BuiltinTypeName["Dynamic"] = 0] = "Dynamic";
BuiltinTypeName[BuiltinTypeName["Bool"] = 1] = "Bool";
BuiltinTypeName[BuiltinTypeName["String"] = 2] = "String";
BuiltinTypeName[BuiltinTypeName["Int"] = 3] = "Int";
BuiltinTypeName[BuiltinTypeName["Number"] = 4] = "Number";
BuiltinTypeName[BuiltinTypeName["Function"] = 5] = "Function";
})(exports.BuiltinTypeName || (exports.BuiltinTypeName = {}));
var BuiltinTypeName = exports.BuiltinTypeName;
var BuiltinType = function(_super) {
__extends(BuiltinType, _super);
function BuiltinType(name, modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
_super.call(this, modifiers);
this.name = name;
}
BuiltinType.prototype.visitType = function(visitor, context) {
return visitor.visitBuiltintType(this, context);
};
return BuiltinType;
}(Type);
exports.BuiltinType = BuiltinType;
var ExternalType = function(_super) {
__extends(ExternalType, _super);
function ExternalType(value, typeParams, modifiers) {
if (typeParams === void 0) {
typeParams = null;
}
if (modifiers === void 0) {
modifiers = null;
}
_super.call(this, modifiers);
this.value = value;
this.typeParams = typeParams;
}
ExternalType.prototype.visitType = function(visitor, context) {
return visitor.visitExternalType(this, context);
};
return ExternalType;
}(Type);
exports.ExternalType = ExternalType;
var ArrayType = function(_super) {
__extends(ArrayType, _super);
function ArrayType(of, modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
_super.call(this, modifiers);
this.of = of;
}
ArrayType.prototype.visitType = function(visitor, context) {
return visitor.visitArrayType(this, context);
};
return ArrayType;
}(Type);
exports.ArrayType = ArrayType;
var MapType = function(_super) {
__extends(MapType, _super);
function MapType(valueType, modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
_super.call(this, modifiers);
this.valueType = valueType;
}
MapType.prototype.visitType = function(visitor, context) {
return visitor.visitMapType(this, context);
};
return MapType;
}(Type);
exports.MapType = MapType;
exports.DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
exports.BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
exports.INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
exports.NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
exports.STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
exports.FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
(function(BinaryOperator) {
BinaryOperator[BinaryOperator["Equals"] = 0] = "Equals";
BinaryOperator[BinaryOperator["NotEquals"] = 1] = "NotEquals";
BinaryOperator[BinaryOperator["Identical"] = 2] = "Identical";
BinaryOperator[BinaryOperator["NotIdentical"] = 3] = "NotIdentical";
BinaryOperator[BinaryOperator["Minus"] = 4] = "Minus";
BinaryOperator[BinaryOperator["Plus"] = 5] = "Plus";
BinaryOperator[BinaryOperator["Divide"] = 6] = "Divide";
BinaryOperator[BinaryOperator["Multiply"] = 7] = "Multiply";
BinaryOperator[BinaryOperator["Modulo"] = 8] = "Modulo";
BinaryOperator[BinaryOperator["And"] = 9] = "And";
BinaryOperator[BinaryOperator["Or"] = 10] = "Or";
BinaryOperator[BinaryOperator["Lower"] = 11] = "Lower";
BinaryOperator[BinaryOperator["LowerEquals"] = 12] = "LowerEquals";
BinaryOperator[BinaryOperator["Bigger"] = 13] = "Bigger";
BinaryOperator[BinaryOperator["BiggerEquals"] = 14] = "BiggerEquals";
})(exports.BinaryOperator || (exports.BinaryOperator = {}));
var BinaryOperator = exports.BinaryOperator;
var Expression = function() {
function Expression(type) {
this.type = type;
}
Expression.prototype.prop = function(name) {
return new ReadPropExpr(this, name);
};
Expression.prototype.key = function(index, type) {
if (type === void 0) {
type = null;
}
return new ReadKeyExpr(this, index, type);
};
Expression.prototype.callMethod = function(name, params) {
return new InvokeMethodExpr(this, name, params);
};
Expression.prototype.callFn = function(params) {
return new InvokeFunctionExpr(this, params);
};
Expression.prototype.instantiate = function(params, type) {
if (type === void 0) {
type = null;
}
return new InstantiateExpr(this, params, type);
};
Expression.prototype.conditional = function(trueCase, falseCase) {
if (falseCase === void 0) {
falseCase = null;
}
return new ConditionalExpr(this, trueCase, falseCase);
};
Expression.prototype.equals = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs);
};
Expression.prototype.notEquals = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs);
};
Expression.prototype.identical = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs);
};
Expression.prototype.notIdentical = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs);
};
Expression.prototype.minus = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs);
};
Expression.prototype.plus = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs);
};
Expression.prototype.divide = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs);
};
Expression.prototype.multiply = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs);
};
Expression.prototype.modulo = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs);
};
Expression.prototype.and = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.And, this, rhs);
};
Expression.prototype.or = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs);
};
Expression.prototype.lower = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs);
};
Expression.prototype.lowerEquals = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs);
};
Expression.prototype.bigger = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs);
};
Expression.prototype.biggerEquals = function(rhs) {
return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs);
};
Expression.prototype.isBlank = function() {
return this.equals(exports.NULL_EXPR);
};
Expression.prototype.cast = function(type) {
return new CastExpr(this, type);
};
Expression.prototype.toStmt = function() {
return new ExpressionStatement(this);
};
return Expression;
}();
exports.Expression = Expression;
(function(BuiltinVar) {
BuiltinVar[BuiltinVar["This"] = 0] = "This";
BuiltinVar[BuiltinVar["Super"] = 1] = "Super";
BuiltinVar[BuiltinVar["CatchError"] = 2] = "CatchError";
BuiltinVar[BuiltinVar["CatchStack"] = 3] = "CatchStack";
})(exports.BuiltinVar || (exports.BuiltinVar = {}));
var BuiltinVar = exports.BuiltinVar;
var ReadVarExpr = function(_super) {
__extends(ReadVarExpr, _super);
function ReadVarExpr(name, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type);
if (lang_1.isString(name)) {
this.name = name;
this.builtin = null;
} else {
this.name = null;
this.builtin = name;
}
}
ReadVarExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitReadVarExpr(this, context);
};
ReadVarExpr.prototype.set = function(value) {
return new WriteVarExpr(this.name, value);
};
return ReadVarExpr;
}(Expression);
exports.ReadVarExpr = ReadVarExpr;
var WriteVarExpr = function(_super) {
__extends(WriteVarExpr, _super);
function WriteVarExpr(name, value, type) {
if (type === void 0) {
type = null;
}
_super.call(this, lang_1.isPresent(type) ? type : value.type);
this.name = name;
this.value = value;
}
WriteVarExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitWriteVarExpr(this, context);
};
WriteVarExpr.prototype.toDeclStmt = function(type, modifiers) {
if (type === void 0) {
type = null;
}
if (modifiers === void 0) {
modifiers = null;
}
return new DeclareVarStmt(this.name, this.value, type, modifiers);
};
return WriteVarExpr;
}(Expression);
exports.WriteVarExpr = WriteVarExpr;
var WriteKeyExpr = function(_super) {
__extends(WriteKeyExpr, _super);
function WriteKeyExpr(receiver, index, value, type) {
if (type === void 0) {
type = null;
}
_super.call(this, lang_1.isPresent(type) ? type : value.type);
this.receiver = receiver;
this.index = index;
this.value = value;
}
WriteKeyExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitWriteKeyExpr(this, context);
};
return WriteKeyExpr;
}(Expression);
exports.WriteKeyExpr = WriteKeyExpr;
var WritePropExpr = function(_super) {
__extends(WritePropExpr, _super);
function WritePropExpr(receiver, name, value, type) {
if (type === void 0) {
type = null;
}
_super.call(this, lang_1.isPresent(type) ? type : value.type);
this.receiver = receiver;
this.name = name;
this.value = value;
}
WritePropExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitWritePropExpr(this, context);
};
return WritePropExpr;
}(Expression);
exports.WritePropExpr = WritePropExpr;
(function(BuiltinMethod) {
BuiltinMethod[BuiltinMethod["ConcatArray"] = 0] = "ConcatArray";
BuiltinMethod[BuiltinMethod["SubscribeObservable"] = 1] = "SubscribeObservable";
BuiltinMethod[BuiltinMethod["bind"] = 2] = "bind";
})(exports.BuiltinMethod || (exports.BuiltinMethod = {}));
var BuiltinMethod = exports.BuiltinMethod;
var InvokeMethodExpr = function(_super) {
__extends(InvokeMethodExpr, _super);
function InvokeMethodExpr(receiver, method, args, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type);
this.receiver = receiver;
this.args = args;
if (lang_1.isString(method)) {
this.name = method;
this.builtin = null;
} else {
this.name = null;
this.builtin = method;
}
}
InvokeMethodExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitInvokeMethodExpr(this, context);
};
return InvokeMethodExpr;
}(Expression);
exports.InvokeMethodExpr = InvokeMethodExpr;
var InvokeFunctionExpr = function(_super) {
__extends(InvokeFunctionExpr, _super);
function InvokeFunctionExpr(fn, args, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type);
this.fn = fn;
this.args = args;
}
InvokeFunctionExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitInvokeFunctionExpr(this, context);
};
return InvokeFunctionExpr;
}(Expression);
exports.InvokeFunctionExpr = InvokeFunctionExpr;
var InstantiateExpr = function(_super) {
__extends(InstantiateExpr, _super);
function InstantiateExpr(classExpr, args, type) {
_super.call(this, type);
this.classExpr = classExpr;
this.args = args;
}
InstantiateExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitInstantiateExpr(this, context);
};
return InstantiateExpr;
}(Expression);
exports.InstantiateExpr = InstantiateExpr;
var LiteralExpr = function(_super) {
__extends(LiteralExpr, _super);
function LiteralExpr(value, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type);
this.value = value;
}
LiteralExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitLiteralExpr(this, context);
};
return LiteralExpr;
}(Expression);
exports.LiteralExpr = LiteralExpr;
var ExternalExpr = function(_super) {
__extends(ExternalExpr, _super);
function ExternalExpr(value, type, typeParams) {
if (type === void 0) {
type = null;
}
if (typeParams === void 0) {
typeParams = null;
}
_super.call(this, type);
this.value = value;
this.typeParams = typeParams;
}
ExternalExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitExternalExpr(this, context);
};
return ExternalExpr;
}(Expression);
exports.ExternalExpr = ExternalExpr;
var ConditionalExpr = function(_super) {
__extends(ConditionalExpr, _super);
function ConditionalExpr(condition, trueCase, falseCase, type) {
if (falseCase === void 0) {
falseCase = null;
}
if (type === void 0) {
type = null;
}
_super.call(this, lang_1.isPresent(type) ? type : trueCase.type);
this.condition = condition;
this.falseCase = falseCase;
this.trueCase = trueCase;
}
ConditionalExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitConditionalExpr(this, context);
};
return ConditionalExpr;
}(Expression);
exports.ConditionalExpr = ConditionalExpr;
var NotExpr = function(_super) {
__extends(NotExpr, _super);
function NotExpr(condition) {
_super.call(this, exports.BOOL_TYPE);
this.condition = condition;
}
NotExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitNotExpr(this, context);
};
return NotExpr;
}(Expression);
exports.NotExpr = NotExpr;
var CastExpr = function(_super) {
__extends(CastExpr, _super);
function CastExpr(value, type) {
_super.call(this, type);
this.value = value;
}
CastExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitCastExpr(this, context);
};
return CastExpr;
}(Expression);
exports.CastExpr = CastExpr;
var FnParam = function() {
function FnParam(name, type) {
if (type === void 0) {
type = null;
}
this.name = name;
this.type = type;
}
return FnParam;
}();
exports.FnParam = FnParam;
var FunctionExpr = function(_super) {
__extends(FunctionExpr, _super);
function FunctionExpr(params, statements, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type);
this.params = params;
this.statements = statements;
}
FunctionExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitFunctionExpr(this, context);
};
FunctionExpr.prototype.toDeclStmt = function(name, modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers);
};
return FunctionExpr;
}(Expression);
exports.FunctionExpr = FunctionExpr;
var BinaryOperatorExpr = function(_super) {
__extends(BinaryOperatorExpr, _super);
function BinaryOperatorExpr(operator, lhs, rhs, type) {
if (type === void 0) {
type = null;
}
_super.call(this, lang_1.isPresent(type) ? type : lhs.type);
this.operator = operator;
this.rhs = rhs;
this.lhs = lhs;
}
BinaryOperatorExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitBinaryOperatorExpr(this, context);
};
return BinaryOperatorExpr;
}(Expression);
exports.BinaryOperatorExpr = BinaryOperatorExpr;
var ReadPropExpr = function(_super) {
__extends(ReadPropExpr, _super);
function ReadPropExpr(receiver, name, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type);
this.receiver = receiver;
this.name = name;
}
ReadPropExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitReadPropExpr(this, context);
};
ReadPropExpr.prototype.set = function(value) {
return new WritePropExpr(this.receiver, this.name, value);
};
return ReadPropExpr;
}(Expression);
exports.ReadPropExpr = ReadPropExpr;
var ReadKeyExpr = function(_super) {
__extends(ReadKeyExpr, _super);
function ReadKeyExpr(receiver, index, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type);
this.receiver = receiver;
this.index = index;
}
ReadKeyExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitReadKeyExpr(this, context);
};
ReadKeyExpr.prototype.set = function(value) {
return new WriteKeyExpr(this.receiver, this.index, value);
};
return ReadKeyExpr;
}(Expression);
exports.ReadKeyExpr = ReadKeyExpr;
var LiteralArrayExpr = function(_super) {
__extends(LiteralArrayExpr, _super);
function LiteralArrayExpr(entries, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type);
this.entries = entries;
}
LiteralArrayExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitLiteralArrayExpr(this, context);
};
return LiteralArrayExpr;
}(Expression);
exports.LiteralArrayExpr = LiteralArrayExpr;
var LiteralMapExpr = function(_super) {
__extends(LiteralMapExpr, _super);
function LiteralMapExpr(entries, type) {
if (type === void 0) {
type = null;
}
_super.call(this, type);
this.entries = entries;
this.valueType = null;
if (lang_1.isPresent(type)) {
this.valueType = type.valueType;
}
}
LiteralMapExpr.prototype.visitExpression = function(visitor, context) {
return visitor.visitLiteralMapExpr(this, context);
};
return LiteralMapExpr;
}(Expression);
exports.LiteralMapExpr = LiteralMapExpr;
exports.THIS_EXPR = new ReadVarExpr(BuiltinVar.This);
exports.SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);
exports.CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);
exports.CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);
exports.NULL_EXPR = new LiteralExpr(null, null);
(function(StmtModifier) {
StmtModifier[StmtModifier["Final"] = 0] = "Final";
StmtModifier[StmtModifier["Private"] = 1] = "Private";
})(exports.StmtModifier || (exports.StmtModifier = {}));
var StmtModifier = exports.StmtModifier;
var Statement = function() {
function Statement(modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
this.modifiers = modifiers;
if (lang_1.isBlank(modifiers)) {
this.modifiers = [];
}
}
Statement.prototype.hasModifier = function(modifier) {
return this.modifiers.indexOf(modifier) !== -1;
};
return Statement;
}();
exports.Statement = Statement;
var DeclareVarStmt = function(_super) {
__extends(DeclareVarStmt, _super);
function DeclareVarStmt(name, value, type, modifiers) {
if (type === void 0) {
type = null;
}
if (modifiers === void 0) {
modifiers = null;
}
_super.call(this, modifiers);
this.name = name;
this.value = value;
this.type = lang_1.isPresent(type) ? type : value.type;
}
DeclareVarStmt.prototype.visitStatement = function(visitor, context) {
return visitor.visitDeclareVarStmt(this, context);
};
return DeclareVarStmt;
}(Statement);
exports.DeclareVarStmt = DeclareVarStmt;
var DeclareFunctionStmt = function(_super) {
__extends(DeclareFunctionStmt, _super);
function DeclareFunctionStmt(name, params, statements, type, modifiers) {
if (type === void 0) {
type = null;
}
if (modifiers === void 0) {
modifiers = null;
}
_super.call(this, modifiers);
this.name = name;
this.params = params;
this.statements = statements;
this.type = type;
}
DeclareFunctionStmt.prototype.visitStatement = function(visitor, context) {
return visitor.visitDeclareFunctionStmt(this, context);
};
return DeclareFunctionStmt;
}(Statement);
exports.DeclareFunctionStmt = DeclareFunctionStmt;
var ExpressionStatement = function(_super) {
__extends(ExpressionStatement, _super);
function ExpressionStatement(expr) {
_super.call(this);
this.expr = expr;
}
ExpressionStatement.prototype.visitStatement = function(visitor, context) {
return visitor.visitExpressionStmt(this, context);
};
return ExpressionStatement;
}(Statement);
exports.ExpressionStatement = ExpressionStatement;
var ReturnStatement = function(_super) {
__extends(ReturnStatement, _super);
function ReturnStatement(value) {
_super.call(this);
this.value = value;
}
ReturnStatement.prototype.visitStatement = function(visitor, context) {
return visitor.visitReturnStmt(this, context);
};
return ReturnStatement;
}(Statement);
exports.ReturnStatement = ReturnStatement;
var AbstractClassPart = function() {
function AbstractClassPart(type, modifiers) {
if (type === void 0) {
type = null;
}
this.type = type;
this.modifiers = modifiers;
if (lang_1.isBlank(modifiers)) {
this.modifiers = [];
}
}
AbstractClassPart.prototype.hasModifier = function(modifier) {
return this.modifiers.indexOf(modifier) !== -1;
};
return AbstractClassPart;
}();
exports.AbstractClassPart = AbstractClassPart;
var ClassField = function(_super) {
__extends(ClassField, _super);
function ClassField(name, type, modifiers) {
if (type === void 0) {
type = null;
}
if (modifiers === void 0) {
modifiers = null;
}
_super.call(this, type, modifiers);
this.name = name;
}
return ClassField;
}(AbstractClassPart);
exports.ClassField = ClassField;
var ClassMethod = function(_super) {
__extends(ClassMethod, _super);
function ClassMethod(name, params, body, type, modifiers) {
if (type === void 0) {
type = null;
}
if (modifiers === void 0) {
modifiers = null;
}
_super.call(this, type, modifiers);
this.name = name;
this.params = params;
this.body = body;
}
return ClassMethod;
}(AbstractClassPart);
exports.ClassMethod = ClassMethod;
var ClassGetter = function(_super) {
__extends(ClassGetter, _super);
function ClassGetter(name, body, type, modifiers) {
if (type === void 0) {
type = null;
}
if (modifiers === void 0) {
modifiers = null;
}
_super.call(this, type, modifiers);
this.name = name;
this.body = body;
}
return ClassGetter;
}(AbstractClassPart);
exports.ClassGetter = ClassGetter;
var ClassStmt = function(_super) {
__extends(ClassStmt, _super);
function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers) {
if (modifiers === void 0) {
modifiers = null;
}
_super.call(this, modifiers);
this.name = name;
this.parent = parent;
this.fields = fields;
this.getters = getters;
this.constructorMethod = constructorMethod;
this.methods = methods;
}
ClassStmt.prototype.visitStatement = function(visitor, context) {
return visitor.visitDeclareClassStmt(this, context);
};
return ClassStmt;
}(Statement);
exports.ClassStmt = ClassStmt;
var IfStmt = function(_super) {
__extends(IfStmt, _super);
function IfStmt(condition, trueCase, falseCase) {
if (falseCase === void 0) {
falseCase = [];
}
_super.call(this);
this.condition = condition;
this.trueCase = trueCase;
this.falseCase = falseCase;
}
IfStmt.prototype.visitStatement = function(visitor, context) {
return visitor.visitIfStmt(this, context);
};
return IfStmt;
}(Statement);
exports.IfStmt = IfStmt;
var CommentStmt = function(_super) {
__extends(CommentStmt, _super);
function CommentStmt(comment) {
_super.call(this);
this.comment = comment;
}
CommentStmt.prototype.visitStatement = function(visitor, context) {
return visitor.visitCommentStmt(this, context);
};
return CommentStmt;
}(Statement);
exports.CommentStmt = CommentStmt;
var TryCatchStmt = function(_super) {
__extends(TryCatchStmt, _super);
function TryCatchStmt(bodyStmts, catchStmts) {
_super.call(this);
this.bodyStmts = bodyStmts;
this.catchStmts = catchStmts;
}
TryCatchStmt.prototype.visitStatement = function(visitor, context) {
return visitor.visitTryCatchStmt(this, context);
};
return TryCatchStmt;
}(Statement);
exports.TryCatchStmt = TryCatchStmt;
var ThrowStmt = function(_super) {
__extends(ThrowStmt, _super);
function ThrowStmt(error) {
_super.call(this);
this.error = error;
}
ThrowStmt.prototype.visitStatement = function(visitor, context) {
return visitor.visitThrowStmt(this, context);
};
return ThrowStmt;
}(Statement);
exports.ThrowStmt = ThrowStmt;
var ExpressionTransformer = function() {
function ExpressionTransformer() {}
ExpressionTransformer.prototype.visitReadVarExpr = function(ast, context) {
return ast;
};
ExpressionTransformer.prototype.visitWriteVarExpr = function(expr, context) {
return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context));
};
ExpressionTransformer.prototype.visitWriteKeyExpr = function(expr, context) {
return new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context));
};
ExpressionTransformer.prototype.visitWritePropExpr = function(expr, context) {
return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context));
};
ExpressionTransformer.prototype.visitInvokeMethodExpr = function(ast, context) {
var method = lang_1.isPresent(ast.builtin) ? ast.builtin : ast.name;
return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type);
};
ExpressionTransformer.prototype.visitInvokeFunctionExpr = function(ast, context) {
return new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
};
ExpressionTransformer.prototype.visitInstantiateExpr = function(ast, context) {
return new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
};
ExpressionTransformer.prototype.visitLiteralExpr = function(ast, context) {
return ast;
};
ExpressionTransformer.prototype.visitExternalExpr = function(ast, context) {
return ast;
};
ExpressionTransformer.prototype.visitConditionalExpr = function(ast, context) {
return new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context));
};
ExpressionTransformer.prototype.visitNotExpr = function(ast, context) {
return new NotExpr(ast.condition.visitExpression(this, context));
};
ExpressionTransformer.prototype.visitCastExpr = function(ast, context) {
return new CastExpr(ast.value.visitExpression(this, context), context);
};
ExpressionTransformer.prototype.visitFunctionExpr = function(ast, context) {
return ast;
};
ExpressionTransformer.prototype.visitBinaryOperatorExpr = function(ast, context) {
return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type);
};
ExpressionTransformer.prototype.visitReadPropExpr = function(ast, context) {
return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type);
};
ExpressionTransformer.prototype.visitReadKeyExpr = function(ast, context) {
return new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type);
};
ExpressionTransformer.prototype.visitLiteralArrayExpr = function(ast, context) {
return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context));
};
ExpressionTransformer.prototype.visitLiteralMapExpr = function(ast, context) {
var _this = this;
return new LiteralMapExpr(ast.entries.map(function(entry) {
return [ entry[0], entry[1].visitExpression(_this, context) ];
}));
};
ExpressionTransformer.prototype.visitAllExpressions = function(exprs, context) {
var _this = this;
return exprs.map(function(expr) {
return expr.visitExpression(_this, context);
});
};
ExpressionTransformer.prototype.visitDeclareVarStmt = function(stmt, context) {
return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers);
};
ExpressionTransformer.prototype.visitDeclareFunctionStmt = function(stmt, context) {
return stmt;
};
ExpressionTransformer.prototype.visitExpressionStmt = function(stmt, context) {
return new ExpressionStatement(stmt.expr.visitExpression(this, context));
};
ExpressionTransformer.prototype.visitReturnStmt = function(stmt, context) {
return new ReturnStatement(stmt.value.visitExpression(this, context));
};
ExpressionTransformer.prototype.visitDeclareClassStmt = function(stmt, context) {
return stmt;
};
ExpressionTransformer.prototype.visitIfStmt = function(stmt, context) {
return new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context));
};
ExpressionTransformer.prototype.visitTryCatchStmt = function(stmt, context) {
return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context));
};
ExpressionTransformer.prototype.visitThrowStmt = function(stmt, context) {
return new ThrowStmt(stmt.error.visitExpression(this, context));
};
ExpressionTransformer.prototype.visitCommentStmt = function(stmt, context) {
return stmt;
};
ExpressionTransformer.prototype.visitAllStatements = function(stmts, context) {
var _this = this;
return stmts.map(function(stmt) {
return stmt.visitStatement(_this, context);
});
};
return ExpressionTransformer;
}();
exports.ExpressionTransformer = ExpressionTransformer;
var RecursiveExpressionVisitor = function() {
function RecursiveExpressionVisitor() {}
RecursiveExpressionVisitor.prototype.visitReadVarExpr = function(ast, context) {
return ast;
};
RecursiveExpressionVisitor.prototype.visitWriteVarExpr = function(expr, context) {
expr.value.visitExpression(this, context);
return expr;
};
RecursiveExpressionVisitor.prototype.visitWriteKeyExpr = function(expr, context) {
expr.receiver.visitExpression(this, context);
expr.index.visitExpression(this, context);
expr.value.visitExpression(this, context);
return expr;
};
RecursiveExpressionVisitor.prototype.visitWritePropExpr = function(expr, context) {
expr.receiver.visitExpression(this, context);
expr.value.visitExpression(this, context);
return expr;
};
RecursiveExpressionVisitor.prototype.visitInvokeMethodExpr = function(ast, context) {
ast.receiver.visitExpression(this, context);
this.visitAllExpressions(ast.args, context);
return ast;
};
RecursiveExpressionVisitor.prototype.visitInvokeFunctionExpr = function(ast, context) {
ast.fn.visitExpression(this, context);
this.visitAllExpressions(ast.args, context);
return ast;
};
RecursiveExpressionVisitor.prototype.visitInstantiateExpr = function(ast, context) {
ast.classExpr.visitExpression(this, context);
this.visitAllExpressions(ast.args, context);
return ast;
};
RecursiveExpressionVisitor.prototype.visitLiteralExpr = function(ast, context) {
return ast;
};
RecursiveExpressionVisitor.prototype.visitExternalExpr = function(ast, context) {
return ast;
};
RecursiveExpressionVisitor.prototype.visitConditionalExpr = function(ast, context) {
ast.condition.visitExpression(this, context);
ast.trueCase.visitExpression(this, context);
ast.falseCase.visitExpression(this, context);
return ast;
};
RecursiveExpressionVisitor.prototype.visitNotExpr = function(ast, context) {
ast.condition.visitExpression(this, context);
return ast;
};
RecursiveExpressionVisitor.prototype.visitCastExpr = function(ast, context) {
ast.value.visitExpression(this, context);
return ast;
};
RecursiveExpressionVisitor.prototype.visitFunctionExpr = function(ast, context) {
return ast;
};
RecursiveExpressionVisitor.prototype.visitBinaryOperatorExpr = function(ast, context) {
ast.lhs.visitExpression(this, context);
ast.rhs.visitExpression(this, context);
return ast;
};
RecursiveExpressionVisitor.prototype.visitReadPropExpr = function(ast, context) {
ast.receiver.visitExpression(this, context);
return ast;
};
RecursiveExpressionVisitor.prototype.visitReadKeyExpr = function(ast, context) {
ast.receiver.visitExpression(this, context);
ast.index.visitExpression(this, context);
return ast;
};
RecursiveExpressionVisitor.prototype.visitLiteralArrayExpr = function(ast, context) {
this.visitAllExpressions(ast.entries, context);
return ast;
};
RecursiveExpressionVisitor.prototype.visitLiteralMapExpr = function(ast, context) {
var _this = this;
ast.entries.forEach(function(entry) {
return entry[1].visitExpression(_this, context);
});
return ast;
};
RecursiveExpressionVisitor.prototype.visitAllExpressions = function(exprs, context) {
var _this = this;
exprs.forEach(function(expr) {
return expr.visitExpression(_this, context);
});
};
RecursiveExpressionVisitor.prototype.visitDeclareVarStmt = function(stmt, context) {
stmt.value.visitExpression(this, context);
return stmt;
};
RecursiveExpressionVisitor.prototype.visitDeclareFunctionStmt = function(stmt, context) {
return stmt;
};
RecursiveExpressionVisitor.prototype.visitExpressionStmt = function(stmt, context) {
stmt.expr.visitExpression(this, context);
return stmt;
};
RecursiveExpressionVisitor.prototype.visitReturnStmt = function(stmt, context) {
stmt.value.visitExpression(this, context);
return stmt;
};
RecursiveExpressionVisitor.prototype.visitDeclareClassStmt = function(stmt, context) {
return stmt;
};
RecursiveExpressionVisitor.prototype.visitIfStmt = function(stmt, context) {
stmt.condition.visitExpression(this, context);
this.visitAllStatements(stmt.trueCase, context);
this.visitAllStatements(stmt.falseCase, context);
return stmt;
};
RecursiveExpressionVisitor.prototype.visitTryCatchStmt = function(stmt, context) {
this.visitAllStatements(stmt.bodyStmts, context);
this.visitAllStatements(stmt.catchStmts, context);
return stmt;
};
RecursiveExpressionVisitor.prototype.visitThrowStmt = function(stmt, context) {
stmt.error.visitExpression(this, context);
return stmt;
};
RecursiveExpressionVisitor.prototype.visitCommentStmt = function(stmt, context) {
return stmt;
};
RecursiveExpressionVisitor.prototype.visitAllStatements = function(stmts, context) {
var _this = this;
stmts.forEach(function(stmt) {
return stmt.visitStatement(_this, context);
});
};
return RecursiveExpressionVisitor;
}();
exports.RecursiveExpressionVisitor = RecursiveExpressionVisitor;
function replaceVarInExpression(varName, newValue, expression) {
var transformer = new _ReplaceVariableTransformer(varName, newValue);
return expression.visitExpression(transformer, null);
}
exports.replaceVarInExpression = replaceVarInExpression;
var _ReplaceVariableTransformer = function(_super) {
__extends(_ReplaceVariableTransformer, _super);
function _ReplaceVariableTransformer(_varName, _newValue) {
_super.call(this);
this._varName = _varName;
this._newValue = _newValue;
}
_ReplaceVariableTransformer.prototype.visitReadVarExpr = function(ast, context) {
return ast.name == this._varName ? this._newValue : ast;
};
return _ReplaceVariableTransformer;
}(ExpressionTransformer);
function findReadVarNames(stmts) {
var finder = new _VariableFinder();
finder.visitAllStatements(stmts, null);
return finder.varNames;
}
exports.findReadVarNames = findReadVarNames;
var _VariableFinder = function(_super) {
__extends(_VariableFinder, _super);
function _VariableFinder() {
_super.apply(this, arguments);
this.varNames = new Set();
}
_VariableFinder.prototype.visitReadVarExpr = function(ast, context) {
this.varNames.add(ast.name);
return null;
};
return _VariableFinder;
}(RecursiveExpressionVisitor);
function variable(name, type) {
if (type === void 0) {
type = null;
}
return new ReadVarExpr(name, type);
}
exports.variable = variable;
function importExpr(id, typeParams) {
if (typeParams === void 0) {
typeParams = null;
}
return new ExternalExpr(id, null, typeParams);
}
exports.importExpr = importExpr;
function importType(id, typeParams, typeModifiers) {
if (typeParams === void 0) {
typeParams = null;
}
if (typeModifiers === void 0) {
typeModifiers = null;
}
return lang_1.isPresent(id) ? new ExternalType(id, typeParams, typeModifiers) : null;
}
exports.importType = importType;
function literal(value, type) {
if (type === void 0) {
type = null;
}
return new LiteralExpr(value, type);
}
exports.literal = literal;
function literalArr(values, type) {
if (type === void 0) {
type = null;
}
return new LiteralArrayExpr(values, type);
}
exports.literalArr = literalArr;
function literalMap(values, type) {
if (type === void 0) {
type = null;
}
return new LiteralMapExpr(values, type);
}
exports.literalMap = literalMap;
function not(expr) {
return new NotExpr(expr);
}
exports.not = not;
function fn(params, body, type) {
if (type === void 0) {
type = null;
}
return new FunctionExpr(params, body, type);
}
exports.fn = fn;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(281);
var exceptions_1 = __webpack_require__(286);
var collection_1 = __webpack_require__(285);
var async_1 = __webpack_require__(309);
var compile_metadata_1 = __webpack_require__(302);
var style_compiler_1 = __webpack_require__(311);
var view_compiler_1 = __webpack_require__(313);
var template_parser_1 = __webpack_require__(283);
var directive_normalizer_1 = __webpack_require__(328);
var metadata_resolver_1 = __webpack_require__(330);
var config_1 = __webpack_require__(305);
var ir = __webpack_require__(307);
var output_jit_1 = __webpack_require__(336);
var output_interpreter_1 = __webpack_require__(339);
var interpretive_view_1 = __webpack_require__(342);
var xhr_1 = __webpack_require__(329);
var RuntimeCompiler = function() {
function RuntimeCompiler(_metadataResolver, _templateNormalizer, _templateParser, _styleCompiler, _viewCompiler, _xhr, _genConfig) {
this._metadataResolver = _metadataResolver;
this._templateNormalizer = _templateNormalizer;
this._templateParser = _templateParser;
this._styleCompiler = _styleCompiler;
this._viewCompiler = _viewCompiler;
this._xhr = _xhr;
this._genConfig = _genConfig;
this._styleCache = new Map();
this._hostCacheKeys = new Map();
this._compiledTemplateCache = new Map();
this._compiledTemplateDone = new Map();
}
RuntimeCompiler.prototype.resolveComponent = function(componentType) {
var compMeta = this._metadataResolver.getDirectiveMetadata(componentType);
var hostCacheKey = this._hostCacheKeys.get(componentType);
if (lang_1.isBlank(hostCacheKey)) {
hostCacheKey = new Object();
this._hostCacheKeys.set(componentType, hostCacheKey);
assertComponent(compMeta);
var hostMeta = compile_metadata_1.createHostComponentMeta(compMeta.type, compMeta.selector);
this._loadAndCompileComponent(hostCacheKey, hostMeta, [ compMeta ], [], []);
}
return this._compiledTemplateDone.get(hostCacheKey).then(function(compiledTemplate) {
return new core_1.ComponentFactory(compMeta.selector, compiledTemplate.viewFactory, componentType);
});
};
RuntimeCompiler.prototype.clearCache = function() {
this._styleCache.clear();
this._compiledTemplateCache.clear();
this._compiledTemplateDone.clear();
this._hostCacheKeys.clear();
};
RuntimeCompiler.prototype._loadAndCompileComponent = function(cacheKey, compMeta, viewDirectives, pipes, compilingComponentsPath) {
var _this = this;
var compiledTemplate = this._compiledTemplateCache.get(cacheKey);
var done = this._compiledTemplateDone.get(cacheKey);
if (lang_1.isBlank(compiledTemplate)) {
compiledTemplate = new CompiledTemplate();
this._compiledTemplateCache.set(cacheKey, compiledTemplate);
done = async_1.PromiseWrapper.all([ this._compileComponentStyles(compMeta) ].concat(viewDirectives.map(function(dirMeta) {
return _this._templateNormalizer.normalizeDirective(dirMeta);
}))).then(function(stylesAndNormalizedViewDirMetas) {
var normalizedViewDirMetas = stylesAndNormalizedViewDirMetas.slice(1);
var styles = stylesAndNormalizedViewDirMetas[0];
var parsedTemplate = _this._templateParser.parse(compMeta, compMeta.template.template, normalizedViewDirMetas, pipes, compMeta.type.name);
var childPromises = [];
compiledTemplate.init(_this._compileComponent(compMeta, parsedTemplate, styles, pipes, compilingComponentsPath, childPromises));
return async_1.PromiseWrapper.all(childPromises).then(function(_) {
return compiledTemplate;
});
});
this._compiledTemplateDone.set(cacheKey, done);
}
return compiledTemplate;
};
RuntimeCompiler.prototype._compileComponent = function(compMeta, parsedTemplate, styles, pipes, compilingComponentsPath, childPromises) {
var _this = this;
var compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, new ir.ExternalExpr(new compile_metadata_1.CompileIdentifierMetadata({
runtime: styles
})), pipes);
compileResult.dependencies.forEach(function(dep) {
var childCompilingComponentsPath = collection_1.ListWrapper.clone(compilingComponentsPath);
var childCacheKey = dep.comp.type.runtime;
var childViewDirectives = _this._metadataResolver.getViewDirectivesMetadata(dep.comp.type.runtime);
var childViewPipes = _this._metadataResolver.getViewPipesMetadata(dep.comp.type.runtime);
var childIsRecursive = collection_1.ListWrapper.contains(childCompilingComponentsPath, childCacheKey);
childCompilingComponentsPath.push(childCacheKey);
var childComp = _this._loadAndCompileComponent(dep.comp.type.runtime, dep.comp, childViewDirectives, childViewPipes, childCompilingComponentsPath);
dep.factoryPlaceholder.runtime = childComp.proxyViewFactory;
dep.factoryPlaceholder.name = "viewFactory_" + dep.comp.type.name;
if (!childIsRecursive) {
childPromises.push(_this._compiledTemplateDone.get(childCacheKey));
}
});
var factory;
if (lang_1.IS_DART || !this._genConfig.useJit) {
factory = output_interpreter_1.interpretStatements(compileResult.statements, compileResult.viewFactoryVar, new interpretive_view_1.InterpretiveAppViewInstanceFactory());
} else {
factory = output_jit_1.jitStatements(compMeta.type.name + ".template.js", compileResult.statements, compileResult.viewFactoryVar);
}
return factory;
};
RuntimeCompiler.prototype._compileComponentStyles = function(compMeta) {
var compileResult = this._styleCompiler.compileComponent(compMeta);
return this._resolveStylesCompileResult(compMeta.type.name, compileResult);
};
RuntimeCompiler.prototype._resolveStylesCompileResult = function(sourceUrl, result) {
var _this = this;
var promises = result.dependencies.map(function(dep) {
return _this._loadStylesheetDep(dep);
});
return async_1.PromiseWrapper.all(promises).then(function(cssTexts) {
var nestedCompileResultPromises = [];
for (var i = 0; i < result.dependencies.length; i++) {
var dep = result.dependencies[i];
var cssText = cssTexts[i];
var nestedCompileResult = _this._styleCompiler.compileStylesheet(dep.moduleUrl, cssText, dep.isShimmed);
nestedCompileResultPromises.push(_this._resolveStylesCompileResult(dep.moduleUrl, nestedCompileResult));
}
return async_1.PromiseWrapper.all(nestedCompileResultPromises);
}).then(function(nestedStylesArr) {
for (var i = 0; i < result.dependencies.length; i++) {
var dep = result.dependencies[i];
dep.valuePlaceholder.runtime = nestedStylesArr[i];
dep.valuePlaceholder.name = "importedStyles" + i;
}
if (lang_1.IS_DART || !_this._genConfig.useJit) {
return output_interpreter_1.interpretStatements(result.statements, result.stylesVar, new interpretive_view_1.InterpretiveAppViewInstanceFactory());
} else {
return output_jit_1.jitStatements(sourceUrl + ".css.js", result.statements, result.stylesVar);
}
});
};
RuntimeCompiler.prototype._loadStylesheetDep = function(dep) {
var cacheKey = "" + dep.moduleUrl + (dep.isShimmed ? ".shim" : "");
var cssTextPromise = this._styleCache.get(cacheKey);
if (lang_1.isBlank(cssTextPromise)) {
cssTextPromise = this._xhr.get(dep.moduleUrl);
this._styleCache.set(cacheKey, cssTextPromise);
}
return cssTextPromise;
};
RuntimeCompiler.decorators = [ {
type: core_1.Injectable
} ];
RuntimeCompiler.ctorParameters = [ {
type: metadata_resolver_1.CompileMetadataResolver
}, {
type: directive_normalizer_1.DirectiveNormalizer
}, {
type: template_parser_1.TemplateParser
}, {
type: style_compiler_1.StyleCompiler
}, {
type: view_compiler_1.ViewCompiler
}, {
type: xhr_1.XHR
}, {
type: config_1.CompilerConfig
} ];
return RuntimeCompiler;
}();
exports.RuntimeCompiler = RuntimeCompiler;
var CompiledTemplate = function() {
function CompiledTemplate() {
var _this = this;
this.viewFactory = null;
this.proxyViewFactory = function(viewUtils, childInjector, contextEl) {
return _this.viewFactory(viewUtils, childInjector, contextEl);
};
}
CompiledTemplate.prototype.init = function(viewFactory) {
this.viewFactory = viewFactory;
};
return CompiledTemplate;
}();
function assertComponent(meta) {
if (!meta.isComponent) {
throw new exceptions_1.BaseException("Could not compile '" + meta.type.name + "' because it is not a component.");
}
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(281);
var promise_1 = __webpack_require__(310);
exports.PromiseWrapper = promise_1.PromiseWrapper;
exports.PromiseCompleter = promise_1.PromiseCompleter;
var Subject_1 = __webpack_require__(150);
var PromiseObservable_1 = __webpack_require__(169);
var toPromise_1 = __webpack_require__(170);
var Observable_1 = __webpack_require__(151);
exports.Observable = Observable_1.Observable;
var Subject_2 = __webpack_require__(150);
exports.Subject = Subject_2.Subject;
var TimerWrapper = function() {
function TimerWrapper() {}
TimerWrapper.setTimeout = function(fn, millis) {
return lang_1.global.setTimeout(fn, millis);
};
TimerWrapper.clearTimeout = function(id) {
lang_1.global.clearTimeout(id);
};
TimerWrapper.setInterval = function(fn, millis) {
return lang_1.global.setInterval(fn, millis);
};
TimerWrapper.clearInterval = function(id) {
lang_1.global.clearInterval(id);
};
return TimerWrapper;
}();
exports.TimerWrapper = TimerWrapper;
var ObservableWrapper = function() {
function ObservableWrapper() {}
ObservableWrapper.subscribe = function(emitter, onNext, onError, onComplete) {
if (onComplete === void 0) {
onComplete = function() {};
}
onError = typeof onError === "function" && onError || lang_1.noop;
onComplete = typeof onComplete === "function" && onComplete || lang_1.noop;
return emitter.subscribe({
next: onNext,
error: onError,
complete: onComplete
});
};
ObservableWrapper.isObservable = function(obs) {
return !!obs.subscribe;
};
ObservableWrapper.hasSubscribers = function(obs) {
return obs.observers.length > 0;
};
ObservableWrapper.dispose = function(subscription) {
subscription.unsubscribe();
};
ObservableWrapper.callNext = function(emitter, value) {
emitter.next(value);
};
ObservableWrapper.callEmit = function(emitter, value) {
emitter.emit(value);
};
ObservableWrapper.callError = function(emitter, error) {
emitter.error(error);
};
ObservableWrapper.callComplete = function(emitter) {
emitter.complete();
};
ObservableWrapper.fromPromise = function(promise) {
return PromiseObservable_1.PromiseObservable.create(promise);
};
ObservableWrapper.toPromise = function(obj) {
return toPromise_1.toPromise.call(obj);
};
return ObservableWrapper;
}();
exports.ObservableWrapper = ObservableWrapper;
var EventEmitter = function(_super) {
__extends(EventEmitter, _super);
function EventEmitter(isAsync) {
if (isAsync === void 0) {
isAsync = true;
}
_super.call(this);
this._isAsync = isAsync;
}
EventEmitter.prototype.emit = function(value) {
_super.prototype.next.call(this, value);
};
EventEmitter.prototype.next = function(value) {
_super.prototype.next.call(this, value);
};
EventEmitter.prototype.subscribe = function(generatorOrNext, error, complete) {
var schedulerFn;
var errorFn = function(err) {
return null;
};
var completeFn = function() {
return null;
};
if (generatorOrNext && typeof generatorOrNext === "object") {
schedulerFn = this._isAsync ? function(value) {
setTimeout(function() {
return generatorOrNext.next(value);
});
} : function(value) {
generatorOrNext.next(value);
};
if (generatorOrNext.error) {
errorFn = this._isAsync ? function(err) {
setTimeout(function() {
return generatorOrNext.error(err);
});
} : function(err) {
generatorOrNext.error(err);
};
}
if (generatorOrNext.complete) {
completeFn = this._isAsync ? function() {
setTimeout(function() {
return generatorOrNext.complete();
});
} : function() {
generatorOrNext.complete();
};
}
} else {
schedulerFn = this._isAsync ? function(value) {
setTimeout(function() {
return generatorOrNext(value);
});
} : function(value) {
generatorOrNext(value);
};
if (error) {
errorFn = this._isAsync ? function(err) {
setTimeout(function() {
return error(err);
});
} : function(err) {
error(err);
};
}
if (complete) {
completeFn = this._isAsync ? function() {
setTimeout(function() {
return complete();
});
} : function() {
complete();
};
}
}
return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
};
return EventEmitter;
}(Subject_1.Subject);
exports.EventEmitter = EventEmitter;
}, function(module, exports) {
"use strict";
var PromiseCompleter = function() {
function PromiseCompleter() {
var _this = this;
this.promise = new Promise(function(res, rej) {
_this.resolve = res;
_this.reject = rej;
});
}
return PromiseCompleter;
}();
exports.PromiseCompleter = PromiseCompleter;
var PromiseWrapper = function() {
function PromiseWrapper() {}
PromiseWrapper.resolve = function(obj) {
return Promise.resolve(obj);
};
PromiseWrapper.reject = function(obj, _) {
return Promise.reject(obj);
};
PromiseWrapper.catchError = function(promise, onError) {
return promise.catch(onError);
};
PromiseWrapper.all = function(promises) {
if (promises.length == 0) return Promise.resolve([]);
return Promise.all(promises);
};
PromiseWrapper.then = function(promise, success, rejection) {
return promise.then(success, rejection);
};
PromiseWrapper.wrap = function(computation) {
return new Promise(function(res, rej) {
try {
res(computation());
} catch (e) {
rej(e);
}
});
};
PromiseWrapper.scheduleMicrotask = function(computation) {
PromiseWrapper.then(PromiseWrapper.resolve(null), computation, function(_) {});
};
PromiseWrapper.isPromise = function(obj) {
return obj instanceof Promise;
};
PromiseWrapper.completer = function() {
return new PromiseCompleter();
};
return PromiseWrapper;
}();
exports.PromiseWrapper = PromiseWrapper;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var compile_metadata_1 = __webpack_require__(302);
var o = __webpack_require__(307);
var shadow_css_1 = __webpack_require__(312);
var url_resolver_1 = __webpack_require__(303);
var style_url_resolver_1 = __webpack_require__(299);
var lang_1 = __webpack_require__(281);
var COMPONENT_VARIABLE = "%COMP%";
var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
var StylesCompileDependency = function() {
function StylesCompileDependency(moduleUrl, isShimmed, valuePlaceholder) {
this.moduleUrl = moduleUrl;
this.isShimmed = isShimmed;
this.valuePlaceholder = valuePlaceholder;
}
return StylesCompileDependency;
}();
exports.StylesCompileDependency = StylesCompileDependency;
var StylesCompileResult = function() {
function StylesCompileResult(statements, stylesVar, dependencies) {
this.statements = statements;
this.stylesVar = stylesVar;
this.dependencies = dependencies;
}
return StylesCompileResult;
}();
exports.StylesCompileResult = StylesCompileResult;
var StyleCompiler = function() {
function StyleCompiler(_urlResolver) {
this._urlResolver = _urlResolver;
this._shadowCss = new shadow_css_1.ShadowCss();
}
StyleCompiler.prototype.compileComponent = function(comp) {
var shim = comp.template.encapsulation === core_1.ViewEncapsulation.Emulated;
return this._compileStyles(getStylesVarName(comp), comp.template.styles, comp.template.styleUrls, shim);
};
StyleCompiler.prototype.compileStylesheet = function(stylesheetUrl, cssText, isShimmed) {
var styleWithImports = style_url_resolver_1.extractStyleUrls(this._urlResolver, stylesheetUrl, cssText);
return this._compileStyles(getStylesVarName(null), [ styleWithImports.style ], styleWithImports.styleUrls, isShimmed);
};
StyleCompiler.prototype._compileStyles = function(stylesVar, plainStyles, absUrls, shim) {
var _this = this;
var styleExpressions = plainStyles.map(function(plainStyle) {
return o.literal(_this._shimIfNeeded(plainStyle, shim));
});
var dependencies = [];
for (var i = 0; i < absUrls.length; i++) {
var identifier = new compile_metadata_1.CompileIdentifierMetadata({
name: getStylesVarName(null)
});
dependencies.push(new StylesCompileDependency(absUrls[i], shim, identifier));
styleExpressions.push(new o.ExternalExpr(identifier));
}
var stmt = o.variable(stylesVar).set(o.literalArr(styleExpressions, new o.ArrayType(o.DYNAMIC_TYPE, [ o.TypeModifier.Const ]))).toDeclStmt(null, [ o.StmtModifier.Final ]);
return new StylesCompileResult([ stmt ], stylesVar, dependencies);
};
StyleCompiler.prototype._shimIfNeeded = function(style, shim) {
return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
};
StyleCompiler.decorators = [ {
type: core_1.Injectable
} ];
StyleCompiler.ctorParameters = [ {
type: url_resolver_1.UrlResolver
} ];
return StyleCompiler;
}();
exports.StyleCompiler = StyleCompiler;
function getStylesVarName(component) {
var result = "styles";
if (lang_1.isPresent(component)) {
result += "_" + component.type.name;
}
return result;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var collection_1 = __webpack_require__(285);
var lang_1 = __webpack_require__(281);
var ShadowCss = function() {
function ShadowCss() {
this.strictStyling = true;
}
ShadowCss.prototype.shimCssText = function(cssText, selector, hostSelector) {
if (hostSelector === void 0) {
hostSelector = "";
}
cssText = stripComments(cssText);
cssText = this._insertDirectives(cssText);
return this._scopeCssText(cssText, selector, hostSelector);
};
ShadowCss.prototype._insertDirectives = function(cssText) {
cssText = this._insertPolyfillDirectivesInCssText(cssText);
return this._insertPolyfillRulesInCssText(cssText);
};
ShadowCss.prototype._insertPolyfillDirectivesInCssText = function(cssText) {
return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentNextSelectorRe, function(m) {
return m[1] + "{";
});
};
ShadowCss.prototype._insertPolyfillRulesInCssText = function(cssText) {
return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentRuleRe, function(m) {
var rule = m[0];
rule = lang_1.StringWrapper.replace(rule, m[1], "");
rule = lang_1.StringWrapper.replace(rule, m[2], "");
return m[3] + rule;
});
};
ShadowCss.prototype._scopeCssText = function(cssText, scopeSelector, hostSelector) {
var unscoped = this._extractUnscopedRulesFromCssText(cssText);
cssText = this._insertPolyfillHostInCssText(cssText);
cssText = this._convertColonHost(cssText);
cssText = this._convertColonHostContext(cssText);
cssText = this._convertShadowDOMSelectors(cssText);
if (lang_1.isPresent(scopeSelector)) {
cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
}
cssText = cssText + "\n" + unscoped;
return cssText.trim();
};
ShadowCss.prototype._extractUnscopedRulesFromCssText = function(cssText) {
var r = "", m;
var matcher = lang_1.RegExpWrapper.matcher(_cssContentUnscopedRuleRe, cssText);
while (lang_1.isPresent(m = lang_1.RegExpMatcherWrapper.next(matcher))) {
var rule = m[0];
rule = lang_1.StringWrapper.replace(rule, m[2], "");
rule = lang_1.StringWrapper.replace(rule, m[1], m[3]);
r += rule + "\n\n";
}
return r;
};
ShadowCss.prototype._convertColonHost = function(cssText) {
return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
};
ShadowCss.prototype._convertColonHostContext = function(cssText) {
return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
};
ShadowCss.prototype._convertColonRule = function(cssText, regExp, partReplacer) {
return lang_1.StringWrapper.replaceAllMapped(cssText, regExp, function(m) {
if (lang_1.isPresent(m[2])) {
var parts = m[2].split(","), r = [];
for (var i = 0; i < parts.length; i++) {
var p = parts[i];
if (lang_1.isBlank(p)) break;
p = p.trim();
r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
}
return r.join(",");
} else {
return _polyfillHostNoCombinator + m[3];
}
});
};
ShadowCss.prototype._colonHostContextPartReplacer = function(host, part, suffix) {
if (lang_1.StringWrapper.contains(part, _polyfillHost)) {
return this._colonHostPartReplacer(host, part, suffix);
} else {
return host + part + suffix + ", " + part + " " + host + suffix;
}
};
ShadowCss.prototype._colonHostPartReplacer = function(host, part, suffix) {
return host + lang_1.StringWrapper.replace(part, _polyfillHost, "") + suffix;
};
ShadowCss.prototype._convertShadowDOMSelectors = function(cssText) {
for (var i = 0; i < _shadowDOMSelectorsRe.length; i++) {
cssText = lang_1.StringWrapper.replaceAll(cssText, _shadowDOMSelectorsRe[i], " ");
}
return cssText;
};
ShadowCss.prototype._scopeSelectors = function(cssText, scopeSelector, hostSelector) {
var _this = this;
return processRules(cssText, function(rule) {
var selector = rule.selector;
var content = rule.content;
if (rule.selector[0] != "@" || rule.selector.startsWith("@page")) {
selector = _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
} else if (rule.selector.startsWith("@media")) {
content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
}
return new CssRule(selector, content);
});
};
ShadowCss.prototype._scopeSelector = function(selector, scopeSelector, hostSelector, strict) {
var r = [], parts = selector.split(",");
for (var i = 0; i < parts.length; i++) {
var p = parts[i].trim();
var deepParts = lang_1.StringWrapper.split(p, _shadowDeepSelectors);
var shallowPart = deepParts[0];
if (this._selectorNeedsScoping(shallowPart, scopeSelector)) {
deepParts[0] = strict && !lang_1.StringWrapper.contains(shallowPart, _polyfillHostNoCombinator) ? this._applyStrictSelectorScope(shallowPart, scopeSelector) : this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
}
r.push(deepParts.join(" "));
}
return r.join(", ");
};
ShadowCss.prototype._selectorNeedsScoping = function(selector, scopeSelector) {
var re = this._makeScopeMatcher(scopeSelector);
return !lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(re, selector));
};
ShadowCss.prototype._makeScopeMatcher = function(scopeSelector) {
var lre = /\[/g;
var rre = /\]/g;
scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, lre, "\\[");
scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, rre, "\\]");
return lang_1.RegExpWrapper.create("^(" + scopeSelector + ")" + _selectorReSuffix, "m");
};
ShadowCss.prototype._applySelectorScope = function(selector, scopeSelector, hostSelector) {
return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
};
ShadowCss.prototype._applySimpleSelectorScope = function(selector, scopeSelector, hostSelector) {
if (lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(_polyfillHostRe, selector))) {
var replaceBy = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
selector = lang_1.StringWrapper.replace(selector, _polyfillHostNoCombinator, replaceBy);
return lang_1.StringWrapper.replaceAll(selector, _polyfillHostRe, replaceBy + " ");
} else {
return scopeSelector + " " + selector;
}
};
ShadowCss.prototype._applyStrictSelectorScope = function(selector, scopeSelector) {
var isRe = /\[is=([^\]]*)\]/g;
scopeSelector = lang_1.StringWrapper.replaceAllMapped(scopeSelector, isRe, function(m) {
return m[1];
});
var splits = [ " ", ">", "+", "~" ], scoped = selector, attrName = "[" + scopeSelector + "]";
for (var i = 0; i < splits.length; i++) {
var sep = splits[i];
var parts = scoped.split(sep);
scoped = parts.map(function(p) {
var t = lang_1.StringWrapper.replaceAll(p.trim(), _polyfillHostRe, "");
if (t.length > 0 && !collection_1.ListWrapper.contains(splits, t) && !lang_1.StringWrapper.contains(t, attrName)) {
var re = /([^:]*)(:*)(.*)/g;
var m = lang_1.RegExpWrapper.firstMatch(re, t);
if (lang_1.isPresent(m)) {
p = m[1] + attrName + m[2] + m[3];
}
}
return p;
}).join(sep);
}
return scoped;
};
ShadowCss.prototype._insertPolyfillHostInCssText = function(selector) {
selector = lang_1.StringWrapper.replaceAll(selector, _colonHostContextRe, _polyfillHostContext);
selector = lang_1.StringWrapper.replaceAll(selector, _colonHostRe, _polyfillHost);
return selector;
};
return ShadowCss;
}();
exports.ShadowCss = ShadowCss;
var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?['"](.*?)['"][;\s]*}([^{]*?){/gim;
var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
var _polyfillHost = "-shadowcsshost";
var _polyfillHostContext = "-shadowcsscontext";
var _parenSuffix = ")(?:\\((" + "(?:\\([^)(]*\\)|[^)(]*)+?" + ")\\))?([^,{]*)";
var _cssColonHostRe = lang_1.RegExpWrapper.create("(" + _polyfillHost + _parenSuffix, "im");
var _cssColonHostContextRe = lang_1.RegExpWrapper.create("(" + _polyfillHostContext + _parenSuffix, "im");
var _polyfillHostNoCombinator = _polyfillHost + "-no-combinator";
var _shadowDOMSelectorsRe = [ /::shadow/g, /::content/g, /\/shadow-deep\//g, /\/shadow\//g ];
var _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g;
var _selectorReSuffix = "([>\\s~+[.,{:][\\s\\S]*)?$";
var _polyfillHostRe = lang_1.RegExpWrapper.create(_polyfillHost, "im");
var _colonHostRe = /:host/gim;
var _colonHostContextRe = /:host-context/gim;
var _commentRe = /\/\*[\s\S]*?\*\//g;
function stripComments(input) {
return lang_1.StringWrapper.replaceAllMapped(input, _commentRe, function(_) {
return "";
});
}
var _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
var _curlyRe = /([{}])/g;
var OPEN_CURLY = "{";
var CLOSE_CURLY = "}";
var BLOCK_PLACEHOLDER = "%BLOCK%";
var CssRule = function() {
function CssRule(selector, content) {
this.selector = selector;
this.content = content;
}
return CssRule;
}();
exports.CssRule = CssRule;
function processRules(input, ruleCallback) {
var inputWithEscapedBlocks = escapeBlocks(input);
var nextBlockIndex = 0;
return lang_1.StringWrapper.replaceAllMapped(inputWithEscapedBlocks.escapedString, _ruleRe, function(m) {
var selector = m[2];
var content = "";
var suffix = m[4];
var contentPrefix = "";
if (lang_1.isPresent(m[4]) && m[4].startsWith("{" + BLOCK_PLACEHOLDER)) {
content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
suffix = m[4].substring(BLOCK_PLACEHOLDER.length + 1);
contentPrefix = "{";
}
var rule = ruleCallback(new CssRule(selector, content));
return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
});
}
exports.processRules = processRules;
var StringWithEscapedBlocks = function() {
function StringWithEscapedBlocks(escapedString, blocks) {
this.escapedString = escapedString;
this.blocks = blocks;
}
return StringWithEscapedBlocks;
}();
function escapeBlocks(input) {
var inputParts = lang_1.StringWrapper.split(input, _curlyRe);
var resultParts = [];
var escapedBlocks = [];
var bracketCount = 0;
var currentBlockParts = [];
for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {
var part = inputParts[partIndex];
if (part == CLOSE_CURLY) {
bracketCount--;
}
if (bracketCount > 0) {
currentBlockParts.push(part);
} else {
if (currentBlockParts.length > 0) {
escapedBlocks.push(currentBlockParts.join(""));
resultParts.push(BLOCK_PLACEHOLDER);
currentBlockParts = [];
}
resultParts.push(part);
}
if (part == OPEN_CURLY) {
bracketCount++;
}
}
if (currentBlockParts.length > 0) {
escapedBlocks.push(currentBlockParts.join(""));
resultParts.push(BLOCK_PLACEHOLDER);
}
return new StringWithEscapedBlocks(resultParts.join(""), escapedBlocks);
}
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var compile_element_1 = __webpack_require__(314);
var compile_view_1 = __webpack_require__(319);
var view_builder_1 = __webpack_require__(321);
var view_binder_1 = __webpack_require__(322);
var config_1 = __webpack_require__(305);
var ViewCompileResult = function() {
function ViewCompileResult(statements, viewFactoryVar, dependencies) {
this.statements = statements;
this.viewFactoryVar = viewFactoryVar;
this.dependencies = dependencies;
}
return ViewCompileResult;
}();
exports.ViewCompileResult = ViewCompileResult;
var ViewCompiler = function() {
function ViewCompiler(_genConfig) {
this._genConfig = _genConfig;
}
ViewCompiler.prototype.compileComponent = function(component, template, styles, pipes) {
var statements = [];
var dependencies = [];
var view = new compile_view_1.CompileView(component, this._genConfig, pipes, styles, 0, compile_element_1.CompileElement.createNull(), []);
view_builder_1.buildView(view, template, dependencies);
view_binder_1.bindView(view, template);
view_builder_1.finishView(view, statements);
return new ViewCompileResult(statements, view.viewFactory.name, dependencies);
};
ViewCompiler.decorators = [ {
type: core_1.Injectable
} ];
ViewCompiler.ctorParameters = [ {
type: config_1.CompilerConfig
} ];
return ViewCompiler;
}();
exports.ViewCompiler = ViewCompiler;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(281);
var collection_1 = __webpack_require__(285);
var o = __webpack_require__(307);
var identifiers_1 = __webpack_require__(301);
var constants_1 = __webpack_require__(315);
var template_ast_1 = __webpack_require__(282);
var compile_metadata_1 = __webpack_require__(302);
var util_1 = __webpack_require__(316);
var compile_query_1 = __webpack_require__(317);
var compile_method_1 = __webpack_require__(318);
var util_2 = __webpack_require__(300);
var CompileNode = function() {
function CompileNode(parent, view, nodeIndex, renderNode, sourceAst) {
this.parent = parent;
this.view = view;
this.nodeIndex = nodeIndex;
this.renderNode = renderNode;
this.sourceAst = sourceAst;
}
CompileNode.prototype.isNull = function() {
return lang_1.isBlank(this.renderNode);
};
CompileNode.prototype.isRootElement = function() {
return this.view != this.parent.view;
};
return CompileNode;
}();
exports.CompileNode = CompileNode;
var CompileElement = function(_super) {
__extends(CompileElement, _super);
function CompileElement(parent, view, nodeIndex, renderNode, sourceAst, component, _directives, _resolvedProvidersArray, hasViewContainer, hasEmbeddedView, references) {
var _this = this;
_super.call(this, parent, view, nodeIndex, renderNode, sourceAst);
this.component = component;
this._directives = _directives;
this._resolvedProvidersArray = _resolvedProvidersArray;
this.hasViewContainer = hasViewContainer;
this.hasEmbeddedView = hasEmbeddedView;
this._compViewExpr = null;
this._instances = new compile_metadata_1.CompileTokenMap();
this._queryCount = 0;
this._queries = new compile_metadata_1.CompileTokenMap();
this._componentConstructorViewQueryLists = [];
this.contentNodesByNgContentIndex = null;
this.referenceTokens = {};
references.forEach(function(ref) {
return _this.referenceTokens[ref.name] = ref.value;
});
this.elementRef = o.importExpr(identifiers_1.Identifiers.ElementRef).instantiate([ this.renderNode ]);
this._instances.add(identifiers_1.identifierToken(identifiers_1.Identifiers.ElementRef), this.elementRef);
this.injector = o.THIS_EXPR.callMethod("injector", [ o.literal(this.nodeIndex) ]);
this._instances.add(identifiers_1.identifierToken(identifiers_1.Identifiers.Injector), this.injector);
this._instances.add(identifiers_1.identifierToken(identifiers_1.Identifiers.Renderer), o.THIS_EXPR.prop("renderer"));
if (this.hasViewContainer || this.hasEmbeddedView || lang_1.isPresent(this.component)) {
this._createAppElement();
}
}
CompileElement.createNull = function() {
return new CompileElement(null, null, null, null, null, null, [], [], false, false, []);
};
CompileElement.prototype._createAppElement = function() {
var fieldName = "_appEl_" + this.nodeIndex;
var parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;
this.view.fields.push(new o.ClassField(fieldName, o.importType(identifiers_1.Identifiers.AppElement), [ o.StmtModifier.Private ]));
var statement = o.THIS_EXPR.prop(fieldName).set(o.importExpr(identifiers_1.Identifiers.AppElement).instantiate([ o.literal(this.nodeIndex), o.literal(parentNodeIndex), o.THIS_EXPR, this.renderNode ])).toStmt();
this.view.createMethod.addStmt(statement);
this.appElement = o.THIS_EXPR.prop(fieldName);
this._instances.add(identifiers_1.identifierToken(identifiers_1.Identifiers.AppElement), this.appElement);
};
CompileElement.prototype.setComponentView = function(compViewExpr) {
this._compViewExpr = compViewExpr;
this.contentNodesByNgContentIndex = collection_1.ListWrapper.createFixedSize(this.component.template.ngContentSelectors.length);
for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++) {
this.contentNodesByNgContentIndex[i] = [];
}
};
CompileElement.prototype.setEmbeddedView = function(embeddedView) {
this.embeddedView = embeddedView;
if (lang_1.isPresent(embeddedView)) {
var createTemplateRefExpr = o.importExpr(identifiers_1.Identifiers.TemplateRef_).instantiate([ this.appElement, this.embeddedView.viewFactory ]);
var provider = new compile_metadata_1.CompileProviderMetadata({
token: identifiers_1.identifierToken(identifiers_1.Identifiers.TemplateRef),
useValue: createTemplateRefExpr
});
this._resolvedProvidersArray.unshift(new template_ast_1.ProviderAst(provider.token, false, true, [ provider ], template_ast_1.ProviderAstType.Builtin, this.sourceAst.sourceSpan));
}
};
CompileElement.prototype.beforeChildren = function() {
var _this = this;
if (this.hasViewContainer) {
this._instances.add(identifiers_1.identifierToken(identifiers_1.Identifiers.ViewContainerRef), this.appElement.prop("vcRef"));
}
this._resolvedProviders = new compile_metadata_1.CompileTokenMap();
this._resolvedProvidersArray.forEach(function(provider) {
return _this._resolvedProviders.add(provider.token, provider);
});
this._resolvedProviders.values().forEach(function(resolvedProvider) {
var providerValueExpressions = resolvedProvider.providers.map(function(provider) {
if (lang_1.isPresent(provider.useExisting)) {
return _this._getDependency(resolvedProvider.providerType, new compile_metadata_1.CompileDiDependencyMetadata({
token: provider.useExisting
}));
} else if (lang_1.isPresent(provider.useFactory)) {
var deps = lang_1.isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;
var depsExpr = deps.map(function(dep) {
return _this._getDependency(resolvedProvider.providerType, dep);
});
return o.importExpr(provider.useFactory).callFn(depsExpr);
} else if (lang_1.isPresent(provider.useClass)) {
var deps = lang_1.isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;
var depsExpr = deps.map(function(dep) {
return _this._getDependency(resolvedProvider.providerType, dep);
});
return o.importExpr(provider.useClass).instantiate(depsExpr, o.importType(provider.useClass));
} else {
return _convertValueToOutputAst(provider.useValue);
}
});
var propName = "_" + resolvedProvider.token.name + "_" + _this.nodeIndex + "_" + _this._instances.size;
var instance = createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager, _this);
_this._instances.add(resolvedProvider.token, instance);
});
this.directiveInstances = this._directives.map(function(directive) {
return _this._instances.get(identifiers_1.identifierToken(directive.type));
});
for (var i = 0; i < this.directiveInstances.length; i++) {
var directiveInstance = this.directiveInstances[i];
var directive = this._directives[i];
directive.queries.forEach(function(queryMeta) {
_this._addQuery(queryMeta, directiveInstance);
});
}
var queriesWithReads = [];
this._resolvedProviders.values().forEach(function(resolvedProvider) {
var queriesForProvider = _this._getQueriesFor(resolvedProvider.token);
collection_1.ListWrapper.addAll(queriesWithReads, queriesForProvider.map(function(query) {
return new _QueryWithRead(query, resolvedProvider.token);
}));
});
collection_1.StringMapWrapper.forEach(this.referenceTokens, function(_, varName) {
var token = _this.referenceTokens[varName];
var varValue;
if (lang_1.isPresent(token)) {
varValue = _this._instances.get(token);
} else {
varValue = _this.renderNode;
}
_this.view.locals.set(varName, varValue);
var varToken = new compile_metadata_1.CompileTokenMetadata({
value: varName
});
collection_1.ListWrapper.addAll(queriesWithReads, _this._getQueriesFor(varToken).map(function(query) {
return new _QueryWithRead(query, varToken);
}));
});
queriesWithReads.forEach(function(queryWithRead) {
var value;
if (lang_1.isPresent(queryWithRead.read.identifier)) {
value = _this._instances.get(queryWithRead.read);
} else {
var token = _this.referenceTokens[queryWithRead.read.value];
if (lang_1.isPresent(token)) {
value = _this._instances.get(token);
} else {
value = _this.elementRef;
}
}
if (lang_1.isPresent(value)) {
queryWithRead.query.addValue(value, _this.view);
}
});
if (lang_1.isPresent(this.component)) {
var componentConstructorViewQueryList = lang_1.isPresent(this.component) ? o.literalArr(this._componentConstructorViewQueryLists) : o.NULL_EXPR;
var compExpr = lang_1.isPresent(this.getComponent()) ? this.getComponent() : o.NULL_EXPR;
this.view.createMethod.addStmt(this.appElement.callMethod("initComponent", [ compExpr, componentConstructorViewQueryList, this._compViewExpr ]).toStmt());
}
};
CompileElement.prototype.afterChildren = function(childNodeCount) {
var _this = this;
this._resolvedProviders.values().forEach(function(resolvedProvider) {
var providerExpr = _this._instances.get(resolvedProvider.token);
var providerChildNodeCount = resolvedProvider.providerType === template_ast_1.ProviderAstType.PrivateService ? 0 : childNodeCount;
_this.view.injectorGetMethod.addStmt(createInjectInternalCondition(_this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));
});
this._queries.values().forEach(function(queries) {
return queries.forEach(function(query) {
return query.afterChildren(_this.view.updateContentQueriesMethod);
});
});
};
CompileElement.prototype.addContentNode = function(ngContentIndex, nodeExpr) {
this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);
};
CompileElement.prototype.getComponent = function() {
return lang_1.isPresent(this.component) ? this._instances.get(identifiers_1.identifierToken(this.component.type)) : null;
};
CompileElement.prototype.getProviderTokens = function() {
return this._resolvedProviders.values().map(function(resolvedProvider) {
return util_1.createDiTokenExpression(resolvedProvider.token);
});
};
CompileElement.prototype._getQueriesFor = function(token) {
var result = [];
var currentEl = this;
var distance = 0;
var queries;
while (!currentEl.isNull()) {
queries = currentEl._queries.get(token);
if (lang_1.isPresent(queries)) {
collection_1.ListWrapper.addAll(result, queries.filter(function(query) {
return query.meta.descendants || distance <= 1;
}));
}
if (currentEl._directives.length > 0) {
distance++;
}
currentEl = currentEl.parent;
}
queries = this.view.componentView.viewQueries.get(token);
if (lang_1.isPresent(queries)) {
collection_1.ListWrapper.addAll(result, queries);
}
return result;
};
CompileElement.prototype._addQuery = function(queryMeta, directiveInstance) {
var propName = "_query_" + queryMeta.selectors[0].name + "_" + this.nodeIndex + "_" + this._queryCount++;
var queryList = compile_query_1.createQueryList(queryMeta, directiveInstance, propName, this.view);
var query = new compile_query_1.CompileQuery(queryMeta, queryList, directiveInstance, this.view);
compile_query_1.addQueryToTokenMap(this._queries, query);
return query;
};
CompileElement.prototype._getLocalDependency = function(requestingProviderType, dep) {
var result = null;
if (lang_1.isBlank(result) && lang_1.isPresent(dep.query)) {
result = this._addQuery(dep.query, null).queryList;
}
if (lang_1.isBlank(result) && lang_1.isPresent(dep.viewQuery)) {
result = compile_query_1.createQueryList(dep.viewQuery, null, "_viewQuery_" + dep.viewQuery.selectors[0].name + "_" + this.nodeIndex + "_" + this._componentConstructorViewQueryLists.length, this.view);
this._componentConstructorViewQueryLists.push(result);
}
if (lang_1.isPresent(dep.token)) {
if (lang_1.isBlank(result)) {
if (dep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.ChangeDetectorRef))) {
if (requestingProviderType === template_ast_1.ProviderAstType.Component) {
return this._compViewExpr.prop("ref");
} else {
return util_1.getPropertyInView(o.THIS_EXPR.prop("ref"), this.view, this.view.componentView);
}
}
}
if (lang_1.isBlank(result)) {
result = this._instances.get(dep.token);
}
}
return result;
};
CompileElement.prototype._getDependency = function(requestingProviderType, dep) {
var currElement = this;
var result = null;
if (dep.isValue) {
result = o.literal(dep.value);
}
if (lang_1.isBlank(result) && !dep.isSkipSelf) {
result = this._getLocalDependency(requestingProviderType, dep);
}
while (lang_1.isBlank(result) && !currElement.parent.isNull()) {
currElement = currElement.parent;
result = currElement._getLocalDependency(template_ast_1.ProviderAstType.PublicService, new compile_metadata_1.CompileDiDependencyMetadata({
token: dep.token
}));
}
if (lang_1.isBlank(result)) {
result = util_1.injectFromViewParentInjector(dep.token, dep.isOptional);
}
if (lang_1.isBlank(result)) {
result = o.NULL_EXPR;
}
return util_1.getPropertyInView(result, this.view, currElement.view);
};
return CompileElement;
}(CompileNode);
exports.CompileElement = CompileElement;
function createInjectInternalCondition(nodeIndex, childNodeCount, provider, providerExpr) {
var indexCondition;
if (childNodeCount > 0) {
indexCondition = o.literal(nodeIndex).lowerEquals(constants_1.InjectMethodVars.requestNodeIndex).and(constants_1.InjectMethodVars.requestNodeIndex.lowerEquals(o.literal(nodeIndex + childNodeCount)));
} else {
indexCondition = o.literal(nodeIndex).identical(constants_1.InjectMethodVars.requestNodeIndex);
}
return new o.IfStmt(constants_1.InjectMethodVars.token.identical(util_1.createDiTokenExpression(provider.token)).and(indexCondition), [ new o.ReturnStatement(providerExpr) ]);
}
function createProviderProperty(propName, provider, providerValueExpressions, isMulti, isEager, compileElement) {
var view = compileElement.view;
var resolvedProviderValueExpr;
var type;
if (isMulti) {
resolvedProviderValueExpr = o.literalArr(providerValueExpressions);
type = new o.ArrayType(o.DYNAMIC_TYPE);
} else {
resolvedProviderValueExpr = providerValueExpressions[0];
type = providerValueExpressions[0].type;
}
if (lang_1.isBlank(type)) {
type = o.DYNAMIC_TYPE;
}
if (isEager) {
view.fields.push(new o.ClassField(propName, type));
view.createMethod.addStmt(o.THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
} else {
var internalField = "_" + propName;
view.fields.push(new o.ClassField(internalField, type));
var getter = new compile_method_1.CompileMethod(view);
getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
getter.addStmt(new o.IfStmt(o.THIS_EXPR.prop(internalField).isBlank(), [ o.THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt() ]));
getter.addStmt(new o.ReturnStatement(o.THIS_EXPR.prop(internalField)));
view.getters.push(new o.ClassGetter(propName, getter.finish(), type));
}
return o.THIS_EXPR.prop(propName);
}
var _QueryWithRead = function() {
function _QueryWithRead(query, match) {
this.query = query;
this.read = lang_1.isPresent(query.meta.read) ? query.meta.read : match;
}
return _QueryWithRead;
}();
function _convertValueToOutputAst(value) {
return util_2.visitValue(value, new _ValueOutputAstTransformer(), null);
}
var _ValueOutputAstTransformer = function(_super) {
__extends(_ValueOutputAstTransformer, _super);
function _ValueOutputAstTransformer() {
_super.apply(this, arguments);
}
_ValueOutputAstTransformer.prototype.visitArray = function(arr, context) {
var _this = this;
return o.literalArr(arr.map(function(value) {
return util_2.visitValue(value, _this, context);
}));
};
_ValueOutputAstTransformer.prototype.visitStringMap = function(map, context) {
var _this = this;
var entries = [];
collection_1.StringMapWrapper.forEach(map, function(value, key) {
entries.push([ key, util_2.visitValue(value, _this, context) ]);
});
return o.literalMap(entries);
};
_ValueOutputAstTransformer.prototype.visitPrimitive = function(value, context) {
return o.literal(value);
};
_ValueOutputAstTransformer.prototype.visitOther = function(value, context) {
if (value instanceof compile_metadata_1.CompileIdentifierMetadata) {
return o.importExpr(value);
} else if (value instanceof o.Expression) {
return value;
} else {
throw new core_1.BaseException("Illegal state: Don't now how to compile value " + value);
}
};
return _ValueOutputAstTransformer;
}(util_2.ValueTransformer);
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var core_private_1 = __webpack_require__(284);
var lang_1 = __webpack_require__(281);
var compile_metadata_1 = __webpack_require__(302);
var o = __webpack_require__(307);
var identifiers_1 = __webpack_require__(301);
function _enumExpression(classIdentifier, value) {
if (lang_1.isBlank(value)) return o.NULL_EXPR;
var name = lang_1.resolveEnumToken(classIdentifier.runtime, value);
return o.importExpr(new compile_metadata_1.CompileIdentifierMetadata({
name: classIdentifier.name + "." + name,
moduleUrl: classIdentifier.moduleUrl,
runtime: value
}));
}
var ViewTypeEnum = function() {
function ViewTypeEnum() {}
ViewTypeEnum.fromValue = function(value) {
return _enumExpression(identifiers_1.Identifiers.ViewType, value);
};
ViewTypeEnum.HOST = ViewTypeEnum.fromValue(core_private_1.ViewType.HOST);
ViewTypeEnum.COMPONENT = ViewTypeEnum.fromValue(core_private_1.ViewType.COMPONENT);
ViewTypeEnum.EMBEDDED = ViewTypeEnum.fromValue(core_private_1.ViewType.EMBEDDED);
return ViewTypeEnum;
}();
exports.ViewTypeEnum = ViewTypeEnum;
var ViewEncapsulationEnum = function() {
function ViewEncapsulationEnum() {}
ViewEncapsulationEnum.fromValue = function(value) {
return _enumExpression(identifiers_1.Identifiers.ViewEncapsulation, value);
};
ViewEncapsulationEnum.Emulated = ViewEncapsulationEnum.fromValue(core_1.ViewEncapsulation.Emulated);
ViewEncapsulationEnum.Native = ViewEncapsulationEnum.fromValue(core_1.ViewEncapsulation.Native);
ViewEncapsulationEnum.None = ViewEncapsulationEnum.fromValue(core_1.ViewEncapsulation.None);
return ViewEncapsulationEnum;
}();
exports.ViewEncapsulationEnum = ViewEncapsulationEnum;
var ChangeDetectorStateEnum = function() {
function ChangeDetectorStateEnum() {}
ChangeDetectorStateEnum.fromValue = function(value) {
return _enumExpression(identifiers_1.Identifiers.ChangeDetectorState, value);
};
ChangeDetectorStateEnum.NeverChecked = ChangeDetectorStateEnum.fromValue(core_private_1.ChangeDetectorState.NeverChecked);
ChangeDetectorStateEnum.CheckedBefore = ChangeDetectorStateEnum.fromValue(core_private_1.ChangeDetectorState.CheckedBefore);
ChangeDetectorStateEnum.Errored = ChangeDetectorStateEnum.fromValue(core_private_1.ChangeDetectorState.Errored);
return ChangeDetectorStateEnum;
}();
exports.ChangeDetectorStateEnum = ChangeDetectorStateEnum;
var ChangeDetectionStrategyEnum = function() {
function ChangeDetectionStrategyEnum() {}
ChangeDetectionStrategyEnum.fromValue = function(value) {
return _enumExpression(identifiers_1.Identifiers.ChangeDetectionStrategy, value);
};
ChangeDetectionStrategyEnum.CheckOnce = ChangeDetectionStrategyEnum.fromValue(core_1.ChangeDetectionStrategy.CheckOnce);
ChangeDetectionStrategyEnum.Checked = ChangeDetectionStrategyEnum.fromValue(core_1.ChangeDetectionStrategy.Checked);
ChangeDetectionStrategyEnum.CheckAlways = ChangeDetectionStrategyEnum.fromValue(core_1.ChangeDetectionStrategy.CheckAlways);
ChangeDetectionStrategyEnum.Detached = ChangeDetectionStrategyEnum.fromValue(core_1.ChangeDetectionStrategy.Detached);
ChangeDetectionStrategyEnum.OnPush = ChangeDetectionStrategyEnum.fromValue(core_1.ChangeDetectionStrategy.OnPush);
ChangeDetectionStrategyEnum.Default = ChangeDetectionStrategyEnum.fromValue(core_1.ChangeDetectionStrategy.Default);
return ChangeDetectionStrategyEnum;
}();
exports.ChangeDetectionStrategyEnum = ChangeDetectionStrategyEnum;
var ViewConstructorVars = function() {
function ViewConstructorVars() {}
ViewConstructorVars.viewUtils = o.variable("viewUtils");
ViewConstructorVars.parentInjector = o.variable("parentInjector");
ViewConstructorVars.declarationEl = o.variable("declarationEl");
return ViewConstructorVars;
}();
exports.ViewConstructorVars = ViewConstructorVars;
var ViewProperties = function() {
function ViewProperties() {}
ViewProperties.renderer = o.THIS_EXPR.prop("renderer");
ViewProperties.projectableNodes = o.THIS_EXPR.prop("projectableNodes");
ViewProperties.viewUtils = o.THIS_EXPR.prop("viewUtils");
return ViewProperties;
}();
exports.ViewProperties = ViewProperties;
var EventHandlerVars = function() {
function EventHandlerVars() {}
EventHandlerVars.event = o.variable("$event");
return EventHandlerVars;
}();
exports.EventHandlerVars = EventHandlerVars;
var InjectMethodVars = function() {
function InjectMethodVars() {}
InjectMethodVars.token = o.variable("token");
InjectMethodVars.requestNodeIndex = o.variable("requestNodeIndex");
InjectMethodVars.notFoundResult = o.variable("notFoundResult");
return InjectMethodVars;
}();
exports.InjectMethodVars = InjectMethodVars;
var DetectChangesVars = function() {
function DetectChangesVars() {}
DetectChangesVars.throwOnChange = o.variable("throwOnChange");
DetectChangesVars.changes = o.variable("changes");
DetectChangesVars.changed = o.variable("changed");
DetectChangesVars.valUnwrapper = o.variable("valUnwrapper");
return DetectChangesVars;
}();
exports.DetectChangesVars = DetectChangesVars;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(281);
var exceptions_1 = __webpack_require__(286);
var o = __webpack_require__(307);
var identifiers_1 = __webpack_require__(301);
function getPropertyInView(property, callingView, definedView) {
if (callingView === definedView) {
return property;
} else {
var viewProp = o.THIS_EXPR;
var currView = callingView;
while (currView !== definedView && lang_1.isPresent(currView.declarationElement.view)) {
currView = currView.declarationElement.view;
viewProp = viewProp.prop("parent");
}
if (currView !== definedView) {
throw new exceptions_1.BaseException("Internal error: Could not calculate a property in a parent view: " + property);
}
if (property instanceof o.ReadPropExpr) {
var readPropExpr_1 = property;
if (definedView.fields.some(function(field) {
return field.name == readPropExpr_1.name;
}) || definedView.getters.some(function(field) {
return field.name == readPropExpr_1.name;
})) {
viewProp = viewProp.cast(definedView.classType);
}
}
return o.replaceVarInExpression(o.THIS_EXPR.name, viewProp, property);
}
}
exports.getPropertyInView = getPropertyInView;
function injectFromViewParentInjector(token, optional) {
var args = [ createDiTokenExpression(token) ];
if (optional) {
args.push(o.NULL_EXPR);
}
return o.THIS_EXPR.prop("parentInjector").callMethod("get", args);
}
exports.injectFromViewParentInjector = injectFromViewParentInjector;
function getViewFactoryName(component, embeddedTemplateIndex) {
return "viewFactory_" + component.type.name + embeddedTemplateIndex;
}
exports.getViewFactoryName = getViewFactoryName;
function createDiTokenExpression(token) {
if (lang_1.isPresent(token.value)) {
return o.literal(token.value);
} else if (token.identifierIsInstance) {
return o.importExpr(token.identifier).instantiate([], o.importType(token.identifier, [], [ o.TypeModifier.Const ]));
} else {
return o.importExpr(token.identifier);
}
}
exports.createDiTokenExpression = createDiTokenExpression;
function createFlatArray(expressions) {
var lastNonArrayExpressions = [];
var result = o.literalArr([]);
for (var i = 0; i < expressions.length; i++) {
var expr = expressions[i];
if (expr.type instanceof o.ArrayType) {
if (lastNonArrayExpressions.length > 0) {
result = result.callMethod(o.BuiltinMethod.ConcatArray, [ o.literalArr(lastNonArrayExpressions) ]);
lastNonArrayExpressions = [];
}
result = result.callMethod(o.BuiltinMethod.ConcatArray, [ expr ]);
} else {
lastNonArrayExpressions.push(expr);
}
}
if (lastNonArrayExpressions.length > 0) {
result = result.callMethod(o.BuiltinMethod.ConcatArray, [ o.literalArr(lastNonArrayExpressions) ]);
}
return result;
}
exports.createFlatArray = createFlatArray;
function createPureProxy(fn, argCount, pureProxyProp, view) {
view.fields.push(new o.ClassField(pureProxyProp.name, null));
var pureProxyId = argCount < identifiers_1.Identifiers.pureProxies.length ? identifiers_1.Identifiers.pureProxies[argCount] : null;
if (lang_1.isBlank(pureProxyId)) {
throw new exceptions_1.BaseException("Unsupported number of argument for pure functions: " + argCount);
}
view.createMethod.addStmt(o.THIS_EXPR.prop(pureProxyProp.name).set(o.importExpr(pureProxyId).callFn([ fn ])).toStmt());
}
exports.createPureProxy = createPureProxy;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(281);
var collection_1 = __webpack_require__(285);
var o = __webpack_require__(307);
var identifiers_1 = __webpack_require__(301);
var util_1 = __webpack_require__(316);
var ViewQueryValues = function() {
function ViewQueryValues(view, values) {
this.view = view;
this.values = values;
}
return ViewQueryValues;
}();
var CompileQuery = function() {
function CompileQuery(meta, queryList, ownerDirectiveExpression, view) {
this.meta = meta;
this.queryList = queryList;
this.ownerDirectiveExpression = ownerDirectiveExpression;
this.view = view;
this._values = new ViewQueryValues(view, []);
}
CompileQuery.prototype.addValue = function(value, view) {
var currentView = view;
var elPath = [];
while (lang_1.isPresent(currentView) && currentView !== this.view) {
var parentEl = currentView.declarationElement;
elPath.unshift(parentEl);
currentView = parentEl.view;
}
var queryListForDirtyExpr = util_1.getPropertyInView(this.queryList, view, this.view);
var viewValues = this._values;
elPath.forEach(function(el) {
var last = viewValues.values.length > 0 ? viewValues.values[viewValues.values.length - 1] : null;
if (last instanceof ViewQueryValues && last.view === el.embeddedView) {
viewValues = last;
} else {
var newViewValues = new ViewQueryValues(el.embeddedView, []);
viewValues.values.push(newViewValues);
viewValues = newViewValues;
}
});
viewValues.values.push(value);
if (elPath.length > 0) {
view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod("setDirty", []).toStmt());
}
};
CompileQuery.prototype.afterChildren = function(targetMethod) {
var values = createQueryValues(this._values);
var updateStmts = [ this.queryList.callMethod("reset", [ o.literalArr(values) ]).toStmt() ];
if (lang_1.isPresent(this.ownerDirectiveExpression)) {
var valueExpr = this.meta.first ? this.queryList.prop("first") : this.queryList;
updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt());
}
if (!this.meta.first) {
updateStmts.push(this.queryList.callMethod("notifyOnChanges", []).toStmt());
}
targetMethod.addStmt(new o.IfStmt(this.queryList.prop("dirty"), updateStmts));
};
return CompileQuery;
}();
exports.CompileQuery = CompileQuery;
function createQueryValues(viewValues) {
return collection_1.ListWrapper.flatten(viewValues.values.map(function(entry) {
if (entry instanceof ViewQueryValues) {
return mapNestedViews(entry.view.declarationElement.appElement, entry.view, createQueryValues(entry));
} else {
return entry;
}
}));
}
function mapNestedViews(declarationAppElement, view, expressions) {
var adjustedExpressions = expressions.map(function(expr) {
return o.replaceVarInExpression(o.THIS_EXPR.name, o.variable("nestedView"), expr);
});
return declarationAppElement.callMethod("mapNestedViews", [ o.variable(view.className), o.fn([ new o.FnParam("nestedView", view.classType) ], [ new o.ReturnStatement(o.literalArr(adjustedExpressions)) ]) ]);
}
function createQueryList(query, directiveInstance, propertyName, compileView) {
compileView.fields.push(new o.ClassField(propertyName, o.importType(identifiers_1.Identifiers.QueryList)));
var expr = o.THIS_EXPR.prop(propertyName);
compileView.createMethod.addStmt(o.THIS_EXPR.prop(propertyName).set(o.importExpr(identifiers_1.Identifiers.QueryList).instantiate([])).toStmt());
return expr;
}
exports.createQueryList = createQueryList;
function addQueryToTokenMap(map, query) {
query.meta.selectors.forEach(function(selector) {
var entry = map.get(selector);
if (lang_1.isBlank(entry)) {
entry = [];
map.add(selector, entry);
}
entry.push(query);
});
}
exports.addQueryToTokenMap = addQueryToTokenMap;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(281);
var collection_1 = __webpack_require__(285);
var o = __webpack_require__(307);
var _DebugState = function() {
function _DebugState(nodeIndex, sourceAst) {
this.nodeIndex = nodeIndex;
this.sourceAst = sourceAst;
}
return _DebugState;
}();
var NULL_DEBUG_STATE = new _DebugState(null, null);
var CompileMethod = function() {
function CompileMethod(_view) {
this._view = _view;
this._newState = NULL_DEBUG_STATE;
this._currState = NULL_DEBUG_STATE;
this._bodyStatements = [];
this._debugEnabled = this._view.genConfig.genDebugInfo;
}
CompileMethod.prototype._updateDebugContextIfNeeded = function() {
if (this._newState.nodeIndex !== this._currState.nodeIndex || this._newState.sourceAst !== this._currState.sourceAst) {
var expr = this._updateDebugContext(this._newState);
if (lang_1.isPresent(expr)) {
this._bodyStatements.push(expr.toStmt());
}
}
};
CompileMethod.prototype._updateDebugContext = function(newState) {
this._currState = this._newState = newState;
if (this._debugEnabled) {
var sourceLocation = lang_1.isPresent(newState.sourceAst) ? newState.sourceAst.sourceSpan.start : null;
return o.THIS_EXPR.callMethod("debug", [ o.literal(newState.nodeIndex), lang_1.isPresent(sourceLocation) ? o.literal(sourceLocation.line) : o.NULL_EXPR, lang_1.isPresent(sourceLocation) ? o.literal(sourceLocation.col) : o.NULL_EXPR ]);
} else {
return null;
}
};
CompileMethod.prototype.resetDebugInfoExpr = function(nodeIndex, templateAst) {
var res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst));
return lang_1.isPresent(res) ? res : o.NULL_EXPR;
};
CompileMethod.prototype.resetDebugInfo = function(nodeIndex, templateAst) {
this._newState = new _DebugState(nodeIndex, templateAst);
};
CompileMethod.prototype.addStmt = function(stmt) {
this._updateDebugContextIfNeeded();
this._bodyStatements.push(stmt);
};
CompileMethod.prototype.addStmts = function(stmts) {
this._updateDebugContextIfNeeded();
collection_1.ListWrapper.addAll(this._bodyStatements, stmts);
};
CompileMethod.prototype.finish = function() {
return this._bodyStatements;
};
CompileMethod.prototype.isEmpty = function() {
return this._bodyStatements.length === 0;
};
return CompileMethod;
}();
exports.CompileMethod = CompileMethod;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_private_1 = __webpack_require__(284);
var lang_1 = __webpack_require__(281);
var collection_1 = __webpack_require__(285);
var o = __webpack_require__(307);
var constants_1 = __webpack_require__(315);
var compile_query_1 = __webpack_require__(317);
var compile_method_1 = __webpack_require__(318);
var compile_pipe_1 = __webpack_require__(320);
var compile_metadata_1 = __webpack_require__(302);
var util_1 = __webpack_require__(316);
var identifiers_1 = __webpack_require__(301);
var CompileView = function() {
function CompileView(component, genConfig, pipeMetas, styles, viewIndex, declarationElement, templateVariableBindings) {
var _this = this;
this.component = component;
this.genConfig = genConfig;
this.pipeMetas = pipeMetas;
this.styles = styles;
this.viewIndex = viewIndex;
this.declarationElement = declarationElement;
this.templateVariableBindings = templateVariableBindings;
this.nodes = [];
this.rootNodesOrAppElements = [];
this.bindings = [];
this.classStatements = [];
this.eventHandlerMethods = [];
this.fields = [];
this.getters = [];
this.disposables = [];
this.subscriptions = [];
this.purePipes = new Map();
this.pipes = [];
this.locals = new Map();
this.literalArrayCount = 0;
this.literalMapCount = 0;
this.pipeCount = 0;
this.createMethod = new compile_method_1.CompileMethod(this);
this.injectorGetMethod = new compile_method_1.CompileMethod(this);
this.updateContentQueriesMethod = new compile_method_1.CompileMethod(this);
this.dirtyParentQueriesMethod = new compile_method_1.CompileMethod(this);
this.updateViewQueriesMethod = new compile_method_1.CompileMethod(this);
this.detectChangesInInputsMethod = new compile_method_1.CompileMethod(this);
this.detectChangesRenderPropertiesMethod = new compile_method_1.CompileMethod(this);
this.afterContentLifecycleCallbacksMethod = new compile_method_1.CompileMethod(this);
this.afterViewLifecycleCallbacksMethod = new compile_method_1.CompileMethod(this);
this.destroyMethod = new compile_method_1.CompileMethod(this);
this.viewType = getViewType(component, viewIndex);
this.className = "_View_" + component.type.name + viewIndex;
this.classType = o.importType(new compile_metadata_1.CompileIdentifierMetadata({
name: this.className
}));
this.viewFactory = o.variable(util_1.getViewFactoryName(component, viewIndex));
if (this.viewType === core_private_1.ViewType.COMPONENT || this.viewType === core_private_1.ViewType.HOST) {
this.componentView = this;
} else {
this.componentView = this.declarationElement.view.componentView;
}
this.componentContext = util_1.getPropertyInView(o.THIS_EXPR.prop("context"), this, this.componentView);
var viewQueries = new compile_metadata_1.CompileTokenMap();
if (this.viewType === core_private_1.ViewType.COMPONENT) {
var directiveInstance = o.THIS_EXPR.prop("context");
collection_1.ListWrapper.forEachWithIndex(this.component.viewQueries, function(queryMeta, queryIndex) {
var propName = "_viewQuery_" + queryMeta.selectors[0].name + "_" + queryIndex;
var queryList = compile_query_1.createQueryList(queryMeta, directiveInstance, propName, _this);
var query = new compile_query_1.CompileQuery(queryMeta, queryList, directiveInstance, _this);
compile_query_1.addQueryToTokenMap(viewQueries, query);
});
var constructorViewQueryCount = 0;
this.component.type.diDeps.forEach(function(dep) {
if (lang_1.isPresent(dep.viewQuery)) {
var queryList = o.THIS_EXPR.prop("declarationAppElement").prop("componentConstructorViewQueries").key(o.literal(constructorViewQueryCount++));
var query = new compile_query_1.CompileQuery(dep.viewQuery, queryList, null, _this);
compile_query_1.addQueryToTokenMap(viewQueries, query);
}
});
}
this.viewQueries = viewQueries;
templateVariableBindings.forEach(function(entry) {
_this.locals.set(entry[1], o.THIS_EXPR.prop("context").prop(entry[0]));
});
if (!this.declarationElement.isNull()) {
this.declarationElement.setEmbeddedView(this);
}
}
CompileView.prototype.callPipe = function(name, input, args) {
return compile_pipe_1.CompilePipe.call(this, name, [ input ].concat(args));
};
CompileView.prototype.getLocal = function(name) {
if (name == constants_1.EventHandlerVars.event.name) {
return constants_1.EventHandlerVars.event;
}
var currView = this;
var result = currView.locals.get(name);
while (lang_1.isBlank(result) && lang_1.isPresent(currView.declarationElement.view)) {
currView = currView.declarationElement.view;
result = currView.locals.get(name);
}
if (lang_1.isPresent(result)) {
return util_1.getPropertyInView(result, this, currView);
} else {
return null;
}
};
CompileView.prototype.createLiteralArray = function(values) {
if (values.length === 0) {
return o.importExpr(identifiers_1.Identifiers.EMPTY_ARRAY);
}
var proxyExpr = o.THIS_EXPR.prop("_arr_" + this.literalArrayCount++);
var proxyParams = [];
var proxyReturnEntries = [];
for (var i = 0; i < values.length; i++) {
var paramName = "p" + i;
proxyParams.push(new o.FnParam(paramName));
proxyReturnEntries.push(o.variable(paramName));
}
util_1.createPureProxy(o.fn(proxyParams, [ new o.ReturnStatement(o.literalArr(proxyReturnEntries)) ]), values.length, proxyExpr, this);
return proxyExpr.callFn(values);
};
CompileView.prototype.createLiteralMap = function(entries) {
if (entries.length === 0) {
return o.importExpr(identifiers_1.Identifiers.EMPTY_MAP);
}
var proxyExpr = o.THIS_EXPR.prop("_map_" + this.literalMapCount++);
var proxyParams = [];
var proxyReturnEntries = [];
var values = [];
for (var i = 0; i < entries.length; i++) {
var paramName = "p" + i;
proxyParams.push(new o.FnParam(paramName));
proxyReturnEntries.push([ entries[i][0], o.variable(paramName) ]);
values.push(entries[i][1]);
}
util_1.createPureProxy(o.fn(proxyParams, [ new o.ReturnStatement(o.literalMap(proxyReturnEntries)) ]), entries.length, proxyExpr, this);
return proxyExpr.callFn(values);
};
CompileView.prototype.afterNodes = function() {
var _this = this;
this.pipes.forEach(function(pipe) {
return pipe.create();
});
this.viewQueries.values().forEach(function(queries) {
return queries.forEach(function(query) {
return query.afterChildren(_this.updateViewQueriesMethod);
});
});
};
return CompileView;
}();
exports.CompileView = CompileView;
function getViewType(component, embeddedTemplateIndex) {
if (embeddedTemplateIndex > 0) {
return core_private_1.ViewType.EMBEDDED;
} else if (component.type.isHost) {
return core_private_1.ViewType.HOST;
} else {
return core_private_1.ViewType.COMPONENT;
}
}
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(281);
var exceptions_1 = __webpack_require__(286);
var o = __webpack_require__(307);
var identifiers_1 = __webpack_require__(301);
var util_1 = __webpack_require__(316);
var _PurePipeProxy = function() {
function _PurePipeProxy(view, instance, argCount) {
this.view = view;
this.instance = instance;
this.argCount = argCount;
}
return _PurePipeProxy;
}();
var CompilePipe = function() {
function CompilePipe(view, meta) {
this.view = view;
this.meta = meta;
this._purePipeProxies = [];
this.instance = o.THIS_EXPR.prop("_pipe_" + meta.name + "_" + view.pipeCount++);
}
CompilePipe.call = function(view, name, args) {
var compView = view.componentView;
var meta = _findPipeMeta(compView, name);
var pipe;
if (meta.pure) {
pipe = compView.purePipes.get(name);
if (lang_1.isBlank(pipe)) {
pipe = new CompilePipe(compView, meta);
compView.purePipes.set(name, pipe);
compView.pipes.push(pipe);
}
} else {
pipe = new CompilePipe(view, meta);
view.pipes.push(pipe);
}
return pipe._call(view, args);
};
Object.defineProperty(CompilePipe.prototype, "pure", {
get: function() {
return this.meta.pure;
},
enumerable: true,
configurable: true
});
CompilePipe.prototype.create = function() {
var _this = this;
var deps = this.meta.type.diDeps.map(function(diDep) {
if (diDep.token.equalsTo(identifiers_1.identifierToken(identifiers_1.Identifiers.ChangeDetectorRef))) {
return util_1.getPropertyInView(o.THIS_EXPR.prop("ref"), _this.view, _this.view.componentView);
}
return util_1.injectFromViewParentInjector(diDep.token, false);
});
this.view.fields.push(new o.ClassField(this.instance.name, o.importType(this.meta.type)));
this.view.createMethod.resetDebugInfo(null, null);
this.view.createMethod.addStmt(o.THIS_EXPR.prop(this.instance.name).set(o.importExpr(this.meta.type).instantiate(deps)).toStmt());
this._purePipeProxies.forEach(function(purePipeProxy) {
var pipeInstanceSeenFromPureProxy = util_1.getPropertyInView(_this.instance, purePipeProxy.view, _this.view);
util_1.createPureProxy(pipeInstanceSeenFromPureProxy.prop("transform").callMethod(o.BuiltinMethod.bind, [ pipeInstanceSeenFromPureProxy ]), purePipeProxy.argCount, purePipeProxy.instance, purePipeProxy.view);
});
};
CompilePipe.prototype._call = function(callingView, args) {
if (this.meta.pure) {
var purePipeProxy = new _PurePipeProxy(callingView, o.THIS_EXPR.prop(this.instance.name + "_" + this._purePipeProxies.length), args.length);
this._purePipeProxies.push(purePipeProxy);
return o.importExpr(identifiers_1.Identifiers.castByValue).callFn([ purePipeProxy.instance, util_1.getPropertyInView(this.instance.prop("transform"), callingView, this.view) ]).callFn(args);
} else {
return util_1.getPropertyInView(this.instance, callingView, this.view).callMethod("transform", args);
}
};
return CompilePipe;
}();
exports.CompilePipe = CompilePipe;
function _findPipeMeta(view, name) {
var pipeMeta = null;
for (var i = view.pipeMetas.length - 1; i >= 0; i--) {
var localPipeMeta = view.pipeMetas[i];
if (localPipeMeta.name == name) {
pipeMeta = localPipeMeta;
break;
}
}
if (lang_1.isBlank(pipeMeta)) {
throw new exceptions_1.BaseException("Illegal state: Could not find pipe " + name + " although the parser should have detected this error!");
}
return pipeMeta;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var core_private_1 = __webpack_require__(284);
var lang_1 = __webpack_require__(281);
var collection_1 = __webpack_require__(285);
var o = __webpack_require__(307);
var identifiers_1 = __webpack_require__(301);
var constants_1 = __webpack_require__(315);
var compile_view_1 = __webpack_require__(319);
var compile_element_1 = __webpack_require__(314);
var template_ast_1 = __webpack_require__(282);
var util_1 = __webpack_require__(316);
var compile_metadata_1 = __webpack_require__(302);
var IMPLICIT_TEMPLATE_VAR = "$implicit";
var CLASS_ATTR = "class";
var STYLE_ATTR = "style";
var parentRenderNodeVar = o.variable("parentRenderNode");
var rootSelectorVar = o.variable("rootSelector");
var ViewCompileDependency = function() {
function ViewCompileDependency(comp, factoryPlaceholder) {
this.comp = comp;
this.factoryPlaceholder = factoryPlaceholder;
}
return ViewCompileDependency;
}();
exports.ViewCompileDependency = ViewCompileDependency;
function buildView(view, template, targetDependencies) {
var builderVisitor = new ViewBuilderVisitor(view, targetDependencies);
template_ast_1.templateVisitAll(builderVisitor, template, view.declarationElement.isNull() ? view.declarationElement : view.declarationElement.parent);
return builderVisitor.nestedViewCount;
}
exports.buildView = buildView;
function finishView(view, targetStatements) {
view.afterNodes();
createViewTopLevelStmts(view, targetStatements);
view.nodes.forEach(function(node) {
if (node instanceof compile_element_1.CompileElement && node.hasEmbeddedView) {
finishView(node.embeddedView, targetStatements);
}
});
}
exports.finishView = finishView;
var ViewBuilderVisitor = function() {
function ViewBuilderVisitor(view, targetDependencies) {
this.view = view;
this.targetDependencies = targetDependencies;
this.nestedViewCount = 0;
}
ViewBuilderVisitor.prototype._isRootNode = function(parent) {
return parent.view !== this.view;
};
ViewBuilderVisitor.prototype._addRootNodeAndProject = function(node, ngContentIndex, parent) {
var vcAppEl = node instanceof compile_element_1.CompileElement && node.hasViewContainer ? node.appElement : null;
if (this._isRootNode(parent)) {
if (this.view.viewType !== core_private_1.ViewType.COMPONENT) {
this.view.rootNodesOrAppElements.push(lang_1.isPresent(vcAppEl) ? vcAppEl : node.renderNode);
}
} else if (lang_1.isPresent(parent.component) && lang_1.isPresent(ngContentIndex)) {
parent.addContentNode(ngContentIndex, lang_1.isPresent(vcAppEl) ? vcAppEl : node.renderNode);
}
};
ViewBuilderVisitor.prototype._getParentRenderNode = function(parent) {
if (this._isRootNode(parent)) {
if (this.view.viewType === core_private_1.ViewType.COMPONENT) {
return parentRenderNodeVar;
} else {
return o.NULL_EXPR;
}
} else {
return lang_1.isPresent(parent.component) && parent.component.template.encapsulation !== core_1.ViewEncapsulation.Native ? o.NULL_EXPR : parent.renderNode;
}
};
ViewBuilderVisitor.prototype.visitBoundText = function(ast, parent) {
return this._visitText(ast, "", ast.ngContentIndex, parent);
};
ViewBuilderVisitor.prototype.visitText = function(ast, parent) {
return this._visitText(ast, ast.value, ast.ngContentIndex, parent);
};
ViewBuilderVisitor.prototype._visitText = function(ast, value, ngContentIndex, parent) {
var fieldName = "_text_" + this.view.nodes.length;
this.view.fields.push(new o.ClassField(fieldName, o.importType(this.view.genConfig.renderTypes.renderText)));
var renderNode = o.THIS_EXPR.prop(fieldName);
var compileNode = new compile_element_1.CompileNode(parent, this.view, this.view.nodes.length, renderNode, ast);
var createRenderNode = o.THIS_EXPR.prop(fieldName).set(constants_1.ViewProperties.renderer.callMethod("createText", [ this._getParentRenderNode(parent), o.literal(value), this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length, ast) ])).toStmt();
this.view.nodes.push(compileNode);
this.view.createMethod.addStmt(createRenderNode);
this._addRootNodeAndProject(compileNode, ngContentIndex, parent);
return renderNode;
};
ViewBuilderVisitor.prototype.visitNgContent = function(ast, parent) {
this.view.createMethod.resetDebugInfo(null, ast);
var parentRenderNode = this._getParentRenderNode(parent);
var nodesExpression = constants_1.ViewProperties.projectableNodes.key(o.literal(ast.index), new o.ArrayType(o.importType(this.view.genConfig.renderTypes.renderNode)));
if (parentRenderNode !== o.NULL_EXPR) {
this.view.createMethod.addStmt(constants_1.ViewProperties.renderer.callMethod("projectNodes", [ parentRenderNode, o.importExpr(identifiers_1.Identifiers.flattenNestedViewRenderNodes).callFn([ nodesExpression ]) ]).toStmt());
} else if (this._isRootNode(parent)) {
if (this.view.viewType !== core_private_1.ViewType.COMPONENT) {
this.view.rootNodesOrAppElements.push(nodesExpression);
}
} else {
if (lang_1.isPresent(parent.component) && lang_1.isPresent(ast.ngContentIndex)) {
parent.addContentNode(ast.ngContentIndex, nodesExpression);
}
}
return null;
};
ViewBuilderVisitor.prototype.visitElement = function(ast, parent) {
var nodeIndex = this.view.nodes.length;
var createRenderNodeExpr;
var debugContextExpr = this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast);
if (nodeIndex === 0 && this.view.viewType === core_private_1.ViewType.HOST) {
createRenderNodeExpr = o.THIS_EXPR.callMethod("selectOrCreateHostElement", [ o.literal(ast.name), rootSelectorVar, debugContextExpr ]);
} else {
createRenderNodeExpr = constants_1.ViewProperties.renderer.callMethod("createElement", [ this._getParentRenderNode(parent), o.literal(ast.name), debugContextExpr ]);
}
var fieldName = "_el_" + nodeIndex;
this.view.fields.push(new o.ClassField(fieldName, o.importType(this.view.genConfig.renderTypes.renderElement)));
this.view.createMethod.addStmt(o.THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt());
var renderNode = o.THIS_EXPR.prop(fieldName);
var directives = ast.directives.map(function(directiveAst) {
return directiveAst.directive;
});
var component = directives.find(function(directive) {
return directive.isComponent;
});
var htmlAttrs = _readHtmlAttrs(ast.attrs);
var attrNameAndValues = _mergeHtmlAndDirectiveAttrs(htmlAttrs, directives);
for (var i = 0; i < attrNameAndValues.length; i++) {
var attrName = attrNameAndValues[i][0];
var attrValue = attrNameAndValues[i][1];
this.view.createMethod.addStmt(constants_1.ViewProperties.renderer.callMethod("setElementAttribute", [ renderNode, o.literal(attrName), o.literal(attrValue) ]).toStmt());
}
var compileElement = new compile_element_1.CompileElement(parent, this.view, nodeIndex, renderNode, ast, component, directives, ast.providers, ast.hasViewContainer, false, ast.references);
this.view.nodes.push(compileElement);
var compViewExpr = null;
if (lang_1.isPresent(component)) {
var nestedComponentIdentifier = new compile_metadata_1.CompileIdentifierMetadata({
name: util_1.getViewFactoryName(component, 0)
});
this.targetDependencies.push(new ViewCompileDependency(component, nestedComponentIdentifier));
compViewExpr = o.variable("compView_" + nodeIndex);
compileElement.setComponentView(compViewExpr);
this.view.createMethod.addStmt(compViewExpr.set(o.importExpr(nestedComponentIdentifier).callFn([ constants_1.ViewProperties.viewUtils, compileElement.injector, compileElement.appElement ])).toDeclStmt());
}
compileElement.beforeChildren();
this._addRootNodeAndProject(compileElement, ast.ngContentIndex, parent);
template_ast_1.templateVisitAll(this, ast.children, compileElement);
compileElement.afterChildren(this.view.nodes.length - nodeIndex - 1);
if (lang_1.isPresent(compViewExpr)) {
var codeGenContentNodes;
if (this.view.component.type.isHost) {
codeGenContentNodes = constants_1.ViewProperties.projectableNodes;
} else {
codeGenContentNodes = o.literalArr(compileElement.contentNodesByNgContentIndex.map(function(nodes) {
return util_1.createFlatArray(nodes);
}));
}
this.view.createMethod.addStmt(compViewExpr.callMethod("create", [ compileElement.getComponent(), codeGenContentNodes, o.NULL_EXPR ]).toStmt());
}
return null;
};
ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function(ast, parent) {
var nodeIndex = this.view.nodes.length;
var fieldName = "_anchor_" + nodeIndex;
this.view.fields.push(new o.ClassField(fieldName, o.importType(this.view.genConfig.renderTypes.renderComment)));
this.view.createMethod.addStmt(o.THIS_EXPR.prop(fieldName).set(constants_1.ViewProperties.renderer.callMethod("createTemplateAnchor", [ this._getParentRenderNode(parent), this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast) ])).toStmt());
var renderNode = o.THIS_EXPR.prop(fieldName);
var templateVariableBindings = ast.variables.map(function(varAst) {
return [ varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name ];
});
var directives = ast.directives.map(function(directiveAst) {
return directiveAst.directive;
});
var compileElement = new compile_element_1.CompileElement(parent, this.view, nodeIndex, renderNode, ast, null, directives, ast.providers, ast.hasViewContainer, true, ast.references);
this.view.nodes.push(compileElement);
this.nestedViewCount++;
var embeddedView = new compile_view_1.CompileView(this.view.component, this.view.genConfig, this.view.pipeMetas, o.NULL_EXPR, this.view.viewIndex + this.nestedViewCount, compileElement, templateVariableBindings);
this.nestedViewCount += buildView(embeddedView, ast.children, this.targetDependencies);
compileElement.beforeChildren();
this._addRootNodeAndProject(compileElement, ast.ngContentIndex, parent);
compileElement.afterChildren(0);
return null;
};
ViewBuilderVisitor.prototype.visitAttr = function(ast, ctx) {
return null;
};
ViewBuilderVisitor.prototype.visitDirective = function(ast, ctx) {
return null;
};
ViewBuilderVisitor.prototype.visitEvent = function(ast, eventTargetAndNames) {
return null;
};
ViewBuilderVisitor.prototype.visitReference = function(ast, ctx) {
return null;
};
ViewBuilderVisitor.prototype.visitVariable = function(ast, ctx) {
return null;
};
ViewBuilderVisitor.prototype.visitDirectiveProperty = function(ast, context) {
return null;
};
ViewBuilderVisitor.prototype.visitElementProperty = function(ast, context) {
return null;
};
return ViewBuilderVisitor;
}();
function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs, directives) {
var result = {};
collection_1.StringMapWrapper.forEach(declaredHtmlAttrs, function(value, key) {
result[key] = value;
});
directives.forEach(function(directiveMeta) {
collection_1.StringMapWrapper.forEach(directiveMeta.hostAttributes, function(value, name) {
var prevValue = result[name];
result[name] = lang_1.isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
});
});
return mapToKeyValueArray(result);
}
function _readHtmlAttrs(attrs) {
var htmlAttrs = {};
attrs.forEach(function(ast) {
htmlAttrs[ast.name] = ast.value;
});
return htmlAttrs;
}
function mergeAttributeValue(attrName, attrValue1, attrValue2) {
if (attrName == CLASS_ATTR || attrName == STYLE_ATTR) {
return attrValue1 + " " + attrValue2;
} else {
return attrValue2;
}
}
function mapToKeyValueArray(data) {
var entryArray = [];
collection_1.StringMapWrapper.forEach(data, function(value, name) {
entryArray.push([ name, value ]);
});
collection_1.ListWrapper.sort(entryArray, function(entry1, entry2) {
return lang_1.StringWrapper.compare(entry1[0], entry2[0]);
});
var keyValueArray = [];
entryArray.forEach(function(entry) {
keyValueArray.push([ entry[0], entry[1] ]);
});
return keyValueArray;
}
function createViewTopLevelStmts(view, targetStatements) {
var nodeDebugInfosVar = o.NULL_EXPR;
if (view.genConfig.genDebugInfo) {
nodeDebugInfosVar = o.variable("nodeDebugInfos_" + view.component.type.name + view.viewIndex);
targetStatements.push(nodeDebugInfosVar.set(o.literalArr(view.nodes.map(createStaticNodeDebugInfo), new o.ArrayType(new o.ExternalType(identifiers_1.Identifiers.StaticNodeDebugInfo), [ o.TypeModifier.Const ]))).toDeclStmt(null, [ o.StmtModifier.Final ]));
}
var renderCompTypeVar = o.variable("renderType_" + view.component.type.name);
if (view.viewIndex === 0) {
targetStatements.push(renderCompTypeVar.set(o.NULL_EXPR).toDeclStmt(o.importType(identifiers_1.Identifiers.RenderComponentType)));
}
var viewClass = createViewClass(view, renderCompTypeVar, nodeDebugInfosVar);
targetStatements.push(viewClass);
targetStatements.push(createViewFactory(view, viewClass, renderCompTypeVar));
}
function createStaticNodeDebugInfo(node) {
var compileElement = node instanceof compile_element_1.CompileElement ? node : null;
var providerTokens = [];
var componentToken = o.NULL_EXPR;
var varTokenEntries = [];
if (lang_1.isPresent(compileElement)) {
providerTokens = compileElement.getProviderTokens();
if (lang_1.isPresent(compileElement.component)) {
componentToken = util_1.createDiTokenExpression(identifiers_1.identifierToken(compileElement.component.type));
}
collection_1.StringMapWrapper.forEach(compileElement.referenceTokens, function(token, varName) {
varTokenEntries.push([ varName, lang_1.isPresent(token) ? util_1.createDiTokenExpression(token) : o.NULL_EXPR ]);
});
}
return o.importExpr(identifiers_1.Identifiers.StaticNodeDebugInfo).instantiate([ o.literalArr(providerTokens, new o.ArrayType(o.DYNAMIC_TYPE, [ o.TypeModifier.Const ])), componentToken, o.literalMap(varTokenEntries, new o.MapType(o.DYNAMIC_TYPE, [ o.TypeModifier.Const ])) ], o.importType(identifiers_1.Identifiers.StaticNodeDebugInfo, null, [ o.TypeModifier.Const ]));
}
function createViewClass(view, renderCompTypeVar, nodeDebugInfosVar) {
var viewConstructorArgs = [ new o.FnParam(constants_1.ViewConstructorVars.viewUtils.name, o.importType(identifiers_1.Identifiers.ViewUtils)), new o.FnParam(constants_1.ViewConstructorVars.parentInjector.name, o.importType(identifiers_1.Identifiers.Injector)), new o.FnParam(constants_1.ViewConstructorVars.declarationEl.name, o.importType(identifiers_1.Identifiers.AppElement)) ];
var superConstructorArgs = [ o.variable(view.className), renderCompTypeVar, constants_1.ViewTypeEnum.fromValue(view.viewType), constants_1.ViewConstructorVars.viewUtils, constants_1.ViewConstructorVars.parentInjector, constants_1.ViewConstructorVars.declarationEl, constants_1.ChangeDetectionStrategyEnum.fromValue(getChangeDetectionMode(view)) ];
if (view.genConfig.genDebugInfo) {
superConstructorArgs.push(nodeDebugInfosVar);
}
var viewConstructor = new o.ClassMethod(null, viewConstructorArgs, [ o.SUPER_EXPR.callFn(superConstructorArgs).toStmt() ]);
var viewMethods = [ new o.ClassMethod("createInternal", [ new o.FnParam(rootSelectorVar.name, o.STRING_TYPE) ], generateCreateMethod(view), o.importType(identifiers_1.Identifiers.AppElement)), new o.ClassMethod("injectorGetInternal", [ new o.FnParam(constants_1.InjectMethodVars.token.name, o.DYNAMIC_TYPE), new o.FnParam(constants_1.InjectMethodVars.requestNodeIndex.name, o.NUMBER_TYPE), new o.FnParam(constants_1.InjectMethodVars.notFoundResult.name, o.DYNAMIC_TYPE) ], addReturnValuefNotEmpty(view.injectorGetMethod.finish(), constants_1.InjectMethodVars.notFoundResult), o.DYNAMIC_TYPE), new o.ClassMethod("detectChangesInternal", [ new o.FnParam(constants_1.DetectChangesVars.throwOnChange.name, o.BOOL_TYPE) ], generateDetectChangesMethod(view)), new o.ClassMethod("dirtyParentQueriesInternal", [], view.dirtyParentQueriesMethod.finish()), new o.ClassMethod("destroyInternal", [], view.destroyMethod.finish()) ].concat(view.eventHandlerMethods);
var superClass = view.genConfig.genDebugInfo ? identifiers_1.Identifiers.DebugAppView : identifiers_1.Identifiers.AppView;
var viewClass = new o.ClassStmt(view.className, o.importExpr(superClass, [ getContextType(view) ]), view.fields, view.getters, viewConstructor, viewMethods.filter(function(method) {
return method.body.length > 0;
}));
return viewClass;
}
function createViewFactory(view, viewClass, renderCompTypeVar) {
var viewFactoryArgs = [ new o.FnParam(constants_1.ViewConstructorVars.viewUtils.name, o.importType(identifiers_1.Identifiers.ViewUtils)), new o.FnParam(constants_1.ViewConstructorVars.parentInjector.name, o.importType(identifiers_1.Identifiers.Injector)), new o.FnParam(constants_1.ViewConstructorVars.declarationEl.name, o.importType(identifiers_1.Identifiers.AppElement)) ];
var initRenderCompTypeStmts = [];
var templateUrlInfo;
if (view.component.template.templateUrl == view.component.type.moduleUrl) {
templateUrlInfo = view.component.type.moduleUrl + " class " + view.component.type.name + " - inline template";
} else {
templateUrlInfo = view.component.template.templateUrl;
}
if (view.viewIndex === 0) {
initRenderCompTypeStmts = [ new o.IfStmt(renderCompTypeVar.identical(o.NULL_EXPR), [ renderCompTypeVar.set(constants_1.ViewConstructorVars.viewUtils.callMethod("createRenderComponentType", [ o.literal(templateUrlInfo), o.literal(view.component.template.ngContentSelectors.length), constants_1.ViewEncapsulationEnum.fromValue(view.component.template.encapsulation), view.styles ])).toStmt() ]) ];
}
return o.fn(viewFactoryArgs, initRenderCompTypeStmts.concat([ new o.ReturnStatement(o.variable(viewClass.name).instantiate(viewClass.constructorMethod.params.map(function(param) {
return o.variable(param.name);
}))) ]), o.importType(identifiers_1.Identifiers.AppView, [ getContextType(view) ])).toDeclStmt(view.viewFactory.name, [ o.StmtModifier.Final ]);
}
function generateCreateMethod(view) {
var parentRenderNodeExpr = o.NULL_EXPR;
var parentRenderNodeStmts = [];
if (view.viewType === core_private_1.ViewType.COMPONENT) {
parentRenderNodeExpr = constants_1.ViewProperties.renderer.callMethod("createViewRoot", [ o.THIS_EXPR.prop("declarationAppElement").prop("nativeElement") ]);
parentRenderNodeStmts = [ parentRenderNodeVar.set(parentRenderNodeExpr).toDeclStmt(o.importType(view.genConfig.renderTypes.renderNode), [ o.StmtModifier.Final ]) ];
}
var resultExpr;
if (view.viewType === core_private_1.ViewType.HOST) {
resultExpr = view.nodes[0].appElement;
} else {
resultExpr = o.NULL_EXPR;
}
return parentRenderNodeStmts.concat(view.createMethod.finish()).concat([ o.THIS_EXPR.callMethod("init", [ util_1.createFlatArray(view.rootNodesOrAppElements), o.literalArr(view.nodes.map(function(node) {
return node.renderNode;
})), o.literalArr(view.disposables), o.literalArr(view.subscriptions) ]).toStmt(), new o.ReturnStatement(resultExpr) ]);
}
function generateDetectChangesMethod(view) {
var stmts = [];
if (view.detectChangesInInputsMethod.isEmpty() && view.updateContentQueriesMethod.isEmpty() && view.afterContentLifecycleCallbacksMethod.isEmpty() && view.detectChangesRenderPropertiesMethod.isEmpty() && view.updateViewQueriesMethod.isEmpty() && view.afterViewLifecycleCallbacksMethod.isEmpty()) {
return stmts;
}
collection_1.ListWrapper.addAll(stmts, view.detectChangesInInputsMethod.finish());
stmts.push(o.THIS_EXPR.callMethod("detectContentChildrenChanges", [ constants_1.DetectChangesVars.throwOnChange ]).toStmt());
var afterContentStmts = view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish());
if (afterContentStmts.length > 0) {
stmts.push(new o.IfStmt(o.not(constants_1.DetectChangesVars.throwOnChange), afterContentStmts));
}
collection_1.ListWrapper.addAll(stmts, view.detectChangesRenderPropertiesMethod.finish());
stmts.push(o.THIS_EXPR.callMethod("detectViewChildrenChanges", [ constants_1.DetectChangesVars.throwOnChange ]).toStmt());
var afterViewStmts = view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish());
if (afterViewStmts.length > 0) {
stmts.push(new o.IfStmt(o.not(constants_1.DetectChangesVars.throwOnChange), afterViewStmts));
}
var varStmts = [];
var readVars = o.findReadVarNames(stmts);
if (collection_1.SetWrapper.has(readVars, constants_1.DetectChangesVars.changed.name)) {
varStmts.push(constants_1.DetectChangesVars.changed.set(o.literal(true)).toDeclStmt(o.BOOL_TYPE));
}
if (collection_1.SetWrapper.has(readVars, constants_1.DetectChangesVars.changes.name)) {
varStmts.push(constants_1.DetectChangesVars.changes.set(o.NULL_EXPR).toDeclStmt(new o.MapType(o.importType(identifiers_1.Identifiers.SimpleChange))));
}
if (collection_1.SetWrapper.has(readVars, constants_1.DetectChangesVars.valUnwrapper.name)) {
varStmts.push(constants_1.DetectChangesVars.valUnwrapper.set(o.importExpr(identifiers_1.Identifiers.ValueUnwrapper).instantiate([])).toDeclStmt(null, [ o.StmtModifier.Final ]));
}
return varStmts.concat(stmts);
}
function addReturnValuefNotEmpty(statements, value) {
if (statements.length > 0) {
return statements.concat([ new o.ReturnStatement(value) ]);
} else {
return statements;
}
}
function getContextType(view) {
if (view.viewType === core_private_1.ViewType.COMPONENT) {
return o.importType(view.component.type);
}
return o.DYNAMIC_TYPE;
}
function getChangeDetectionMode(view) {
var mode;
if (view.viewType === core_private_1.ViewType.COMPONENT) {
mode = core_private_1.isDefaultChangeDetectionStrategy(view.component.changeDetection) ? core_1.ChangeDetectionStrategy.CheckAlways : core_1.ChangeDetectionStrategy.CheckOnce;
} else {
mode = core_1.ChangeDetectionStrategy.CheckAlways;
}
return mode;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var collection_1 = __webpack_require__(285);
var template_ast_1 = __webpack_require__(282);
var property_binder_1 = __webpack_require__(323);
var event_binder_1 = __webpack_require__(326);
var lifecycle_binder_1 = __webpack_require__(327);
function bindView(view, parsedTemplate) {
var visitor = new ViewBinderVisitor(view);
template_ast_1.templateVisitAll(visitor, parsedTemplate);
view.pipes.forEach(function(pipe) {
lifecycle_binder_1.bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view);
});
}
exports.bindView = bindView;
var ViewBinderVisitor = function() {
function ViewBinderVisitor(view) {
this.view = view;
this._nodeIndex = 0;
}
ViewBinderVisitor.prototype.visitBoundText = function(ast, parent) {
var node = this.view.nodes[this._nodeIndex++];
property_binder_1.bindRenderText(ast, node, this.view);
return null;
};
ViewBinderVisitor.prototype.visitText = function(ast, parent) {
this._nodeIndex++;
return null;
};
ViewBinderVisitor.prototype.visitNgContent = function(ast, parent) {
return null;
};
ViewBinderVisitor.prototype.visitElement = function(ast, parent) {
var compileElement = this.view.nodes[this._nodeIndex++];
var eventListeners = event_binder_1.collectEventListeners(ast.outputs, ast.directives, compileElement);
property_binder_1.bindRenderInputs(ast.inputs, compileElement);
event_binder_1.bindRenderOutputs(eventListeners);
collection_1.ListWrapper.forEachWithIndex(ast.directives, function(directiveAst, index) {
var directiveInstance = compileElement.directiveInstances[index];
property_binder_1.bindDirectiveInputs(directiveAst, directiveInstance, compileElement);
lifecycle_binder_1.bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement);
property_binder_1.bindDirectiveHostProps(directiveAst, directiveInstance, compileElement);
event_binder_1.bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners);
});
template_ast_1.templateVisitAll(this, ast.children, compileElement);
collection_1.ListWrapper.forEachWithIndex(ast.directives, function(directiveAst, index) {
var directiveInstance = compileElement.directiveInstances[index];
lifecycle_binder_1.bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
lifecycle_binder_1.bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
lifecycle_binder_1.bindDirectiveDestroyLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
});
return null;
};
ViewBinderVisitor.prototype.visitEmbeddedTemplate = function(ast, parent) {
var compileElement = this.view.nodes[this._nodeIndex++];
var eventListeners = event_binder_1.collectEventListeners(ast.outputs, ast.directives, compileElement);
collection_1.ListWrapper.forEachWithIndex(ast.directives, function(directiveAst, index) {
var directiveInstance = compileElement.directiveInstances[index];
property_binder_1.bindDirectiveInputs(directiveAst, directiveInstance, compileElement);
lifecycle_binder_1.bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement);
event_binder_1.bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners);
lifecycle_binder_1.bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
lifecycle_binder_1.bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
lifecycle_binder_1.bindDirectiveDestroyLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
});
bindView(compileElement.embeddedView, ast.children);
return null;
};
ViewBinderVisitor.prototype.visitAttr = function(ast, ctx) {
return null;
};
ViewBinderVisitor.prototype.visitDirective = function(ast, ctx) {
return null;
};
ViewBinderVisitor.prototype.visitEvent = function(ast, eventTargetAndNames) {
return null;
};
ViewBinderVisitor.prototype.visitReference = function(ast, ctx) {
return null;
};
ViewBinderVisitor.prototype.visitVariable = function(ast, ctx) {
return null;
};
ViewBinderVisitor.prototype.visitDirectiveProperty = function(ast, context) {
return null;
};
ViewBinderVisitor.prototype.visitElementProperty = function(ast, context) {
return null;
};
return ViewBinderVisitor;
}();
}, function(module, exports, __webpack_require__) {
"use strict";
var core_private_1 = __webpack_require__(284);
var core_private_2 = __webpack_require__(284);
var lang_1 = __webpack_require__(281);
var o = __webpack_require__(307);
var identifiers_1 = __webpack_require__(301);
var constants_1 = __webpack_require__(315);
var template_ast_1 = __webpack_require__(282);
var util_1 = __webpack_require__(300);
var expression_converter_1 = __webpack_require__(324);
var compile_binding_1 = __webpack_require__(325);
function createBindFieldExpr(exprIndex) {
return o.THIS_EXPR.prop("_expr_" + exprIndex);
}
function createCurrValueExpr(exprIndex) {
return o.variable("currVal_" + exprIndex);
}
function bind(view, currValExpr, fieldExpr, parsedExpression, context, actions, method) {
var checkExpression = expression_converter_1.convertCdExpressionToIr(view, context, parsedExpression, constants_1.DetectChangesVars.valUnwrapper);
if (lang_1.isBlank(checkExpression.expression)) {
return;
}
view.fields.push(new o.ClassField(fieldExpr.name, null, [ o.StmtModifier.Private ]));
view.createMethod.addStmt(o.THIS_EXPR.prop(fieldExpr.name).set(o.importExpr(identifiers_1.Identifiers.uninitialized)).toStmt());
if (checkExpression.needsValueUnwrapper) {
var initValueUnwrapperStmt = constants_1.DetectChangesVars.valUnwrapper.callMethod("reset", []).toStmt();
method.addStmt(initValueUnwrapperStmt);
}
method.addStmt(currValExpr.set(checkExpression.expression).toDeclStmt(null, [ o.StmtModifier.Final ]));
var condition = o.importExpr(identifiers_1.Identifiers.checkBinding).callFn([ constants_1.DetectChangesVars.throwOnChange, fieldExpr, currValExpr ]);
if (checkExpression.needsValueUnwrapper) {
condition = constants_1.DetectChangesVars.valUnwrapper.prop("hasWrappedValue").or(condition);
}
method.addStmt(new o.IfStmt(condition, actions.concat([ o.THIS_EXPR.prop(fieldExpr.name).set(currValExpr).toStmt() ])));
}
function bindRenderText(boundText, compileNode, view) {
var bindingIndex = view.bindings.length;
view.bindings.push(new compile_binding_1.CompileBinding(compileNode, boundText));
var currValExpr = createCurrValueExpr(bindingIndex);
var valueField = createBindFieldExpr(bindingIndex);
view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText);
bind(view, currValExpr, valueField, boundText.value, view.componentContext, [ o.THIS_EXPR.prop("renderer").callMethod("setText", [ compileNode.renderNode, currValExpr ]).toStmt() ], view.detectChangesRenderPropertiesMethod);
}
exports.bindRenderText = bindRenderText;
function bindAndWriteToRenderer(boundProps, context, compileElement) {
var view = compileElement.view;
var renderNode = compileElement.renderNode;
boundProps.forEach(function(boundProp) {
var bindingIndex = view.bindings.length;
view.bindings.push(new compile_binding_1.CompileBinding(compileElement, boundProp));
view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp);
var fieldExpr = createBindFieldExpr(bindingIndex);
var currValExpr = createCurrValueExpr(bindingIndex);
var renderMethod;
var renderValue = sanitizedValue(boundProp, currValExpr);
var updateStmts = [];
switch (boundProp.type) {
case template_ast_1.PropertyBindingType.Property:
renderMethod = "setElementProperty";
if (view.genConfig.logBindingUpdate) {
updateStmts.push(logBindingUpdateStmt(renderNode, boundProp.name, currValExpr));
}
break;

case template_ast_1.PropertyBindingType.Attribute:
renderMethod = "setElementAttribute";
renderValue = renderValue.isBlank().conditional(o.NULL_EXPR, renderValue.callMethod("toString", []));
break;

case template_ast_1.PropertyBindingType.Class:
renderMethod = "setElementClass";
break;

case template_ast_1.PropertyBindingType.Style:
renderMethod = "setElementStyle";
var strValue = renderValue.callMethod("toString", []);
if (lang_1.isPresent(boundProp.unit)) {
strValue = strValue.plus(o.literal(boundProp.unit));
}
renderValue = renderValue.isBlank().conditional(o.NULL_EXPR, strValue);
break;
}
updateStmts.push(o.THIS_EXPR.prop("renderer").callMethod(renderMethod, [ renderNode, o.literal(boundProp.name), renderValue ]).toStmt());
bind(view, currValExpr, fieldExpr, boundProp.value, context, updateStmts, view.detectChangesRenderPropertiesMethod);
});
}
function sanitizedValue(boundProp, renderValue) {
var enumValue;
switch (boundProp.securityContext) {
case core_private_1.SecurityContext.NONE:
return renderValue;

case core_private_1.SecurityContext.HTML:
enumValue = "HTML";
break;

case core_private_1.SecurityContext.STYLE:
enumValue = "STYLE";
break;

case core_private_1.SecurityContext.SCRIPT:
enumValue = "SCRIPT";
break;

case core_private_1.SecurityContext.URL:
enumValue = "URL";
break;

case core_private_1.SecurityContext.RESOURCE_URL:
enumValue = "RESOURCE_URL";
break;

default:
throw new Error("internal error, unexpected SecurityContext " + boundProp.securityContext + ".");
}
var ctx = constants_1.ViewProperties.viewUtils.prop("sanitizer");
var args = [ o.importExpr(identifiers_1.Identifiers.SecurityContext).prop(enumValue), renderValue ];
return ctx.callMethod("sanitize", args);
}
function bindRenderInputs(boundProps, compileElement) {
bindAndWriteToRenderer(boundProps, compileElement.view.componentContext, compileElement);
}
exports.bindRenderInputs = bindRenderInputs;
function bindDirectiveHostProps(directiveAst, directiveInstance, compileElement) {
bindAndWriteToRenderer(directiveAst.hostProperties, directiveInstance, compileElement);
}
exports.bindDirectiveHostProps = bindDirectiveHostProps;
function bindDirectiveInputs(directiveAst, directiveInstance, compileElement) {
if (directiveAst.inputs.length === 0) {
return;
}
var view = compileElement.view;
var detectChangesInInputsMethod = view.detectChangesInInputsMethod;
detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
var lifecycleHooks = directiveAst.directive.lifecycleHooks;
var calcChangesMap = lifecycleHooks.indexOf(core_private_2.LifecycleHooks.OnChanges) !== -1;
var isOnPushComp = directiveAst.directive.isComponent && !core_private_2.isDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection);
if (calcChangesMap) {
detectChangesInInputsMethod.addStmt(constants_1.DetectChangesVars.changes.set(o.NULL_EXPR).toStmt());
}
if (isOnPushComp) {
detectChangesInInputsMethod.addStmt(constants_1.DetectChangesVars.changed.set(o.literal(false)).toStmt());
}
directiveAst.inputs.forEach(function(input) {
var bindingIndex = view.bindings.length;
view.bindings.push(new compile_binding_1.CompileBinding(compileElement, input));
detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input);
var fieldExpr = createBindFieldExpr(bindingIndex);
var currValExpr = createCurrValueExpr(bindingIndex);
var statements = [ directiveInstance.prop(input.directiveName).set(currValExpr).toStmt() ];
if (calcChangesMap) {
statements.push(new o.IfStmt(constants_1.DetectChangesVars.changes.identical(o.NULL_EXPR), [ constants_1.DetectChangesVars.changes.set(o.literalMap([], new o.MapType(o.importType(identifiers_1.Identifiers.SimpleChange)))).toStmt() ]));
statements.push(constants_1.DetectChangesVars.changes.key(o.literal(input.directiveName)).set(o.importExpr(identifiers_1.Identifiers.SimpleChange).instantiate([ fieldExpr, currValExpr ])).toStmt());
}
if (isOnPushComp) {
statements.push(constants_1.DetectChangesVars.changed.set(o.literal(true)).toStmt());
}
if (view.genConfig.logBindingUpdate) {
statements.push(logBindingUpdateStmt(compileElement.renderNode, input.directiveName, currValExpr));
}
bind(view, currValExpr, fieldExpr, input.value, view.componentContext, statements, detectChangesInInputsMethod);
});
if (isOnPushComp) {
detectChangesInInputsMethod.addStmt(new o.IfStmt(constants_1.DetectChangesVars.changed, [ compileElement.appElement.prop("componentView").callMethod("markAsCheckOnce", []).toStmt() ]));
}
}
exports.bindDirectiveInputs = bindDirectiveInputs;
function logBindingUpdateStmt(renderNode, propName, value) {
return o.THIS_EXPR.prop("renderer").callMethod("setBindingDebugInfo", [ renderNode, o.literal("ng-reflect-" + util_1.camelCaseToDashCase(propName)), value.isBlank().conditional(o.NULL_EXPR, value.callMethod("toString", [])) ]).toStmt();
}
}, function(module, exports, __webpack_require__) {
"use strict";
var exceptions_1 = __webpack_require__(286);
var lang_1 = __webpack_require__(281);
var o = __webpack_require__(307);
var identifiers_1 = __webpack_require__(301);
var IMPLICIT_RECEIVER = o.variable("#implicit");
var ExpressionWithWrappedValueInfo = function() {
function ExpressionWithWrappedValueInfo(expression, needsValueUnwrapper) {
this.expression = expression;
this.needsValueUnwrapper = needsValueUnwrapper;
}
return ExpressionWithWrappedValueInfo;
}();
exports.ExpressionWithWrappedValueInfo = ExpressionWithWrappedValueInfo;
function convertCdExpressionToIr(nameResolver, implicitReceiver, expression, valueUnwrapper) {
var visitor = new _AstToIrVisitor(nameResolver, implicitReceiver, valueUnwrapper);
var irAst = expression.visit(visitor, _Mode.Expression);
return new ExpressionWithWrappedValueInfo(irAst, visitor.needsValueUnwrapper);
}
exports.convertCdExpressionToIr = convertCdExpressionToIr;
function convertCdStatementToIr(nameResolver, implicitReceiver, stmt) {
var visitor = new _AstToIrVisitor(nameResolver, implicitReceiver, null);
var statements = [];
flattenStatements(stmt.visit(visitor, _Mode.Statement), statements);
return statements;
}
exports.convertCdStatementToIr = convertCdStatementToIr;
var _Mode;
(function(_Mode) {
_Mode[_Mode["Statement"] = 0] = "Statement";
_Mode[_Mode["Expression"] = 1] = "Expression";
})(_Mode || (_Mode = {}));
function ensureStatementMode(mode, ast) {
if (mode !== _Mode.Statement) {
throw new exceptions_1.BaseException("Expected a statement, but saw " + ast);
}
}
function ensureExpressionMode(mode, ast) {
if (mode !== _Mode.Expression) {
throw new exceptions_1.BaseException("Expected an expression, but saw " + ast);
}
}
function convertToStatementIfNeeded(mode, expr) {
if (mode === _Mode.Statement) {
return expr.toStmt();
} else {
return expr;
}
}
var _AstToIrVisitor = function() {
function _AstToIrVisitor(_nameResolver, _implicitReceiver, _valueUnwrapper) {
this._nameResolver = _nameResolver;
this._implicitReceiver = _implicitReceiver;
this._valueUnwrapper = _valueUnwrapper;
this.needsValueUnwrapper = false;
}
_AstToIrVisitor.prototype.visitBinary = function(ast, mode) {
var op;
switch (ast.operation) {
case "+":
op = o.BinaryOperator.Plus;
break;

case "-":
op = o.BinaryOperator.Minus;
break;

case "*":
op = o.BinaryOperator.Multiply;
break;

case "/":
op = o.BinaryOperator.Divide;
break;

case "%":
op = o.BinaryOperator.Modulo;
break;

case "&&":
op = o.BinaryOperator.And;
break;

case "||":
op = o.BinaryOperator.Or;
break;

case "==":
op = o.BinaryOperator.Equals;
break;

case "!=":
op = o.BinaryOperator.NotEquals;
break;

case "===":
op = o.BinaryOperator.Identical;
break;

case "!==":
op = o.BinaryOperator.NotIdentical;
break;

case "<":
op = o.BinaryOperator.Lower;
break;

case ">":
op = o.BinaryOperator.Bigger;
break;

case "<=":
op = o.BinaryOperator.LowerEquals;
break;

case ">=":
op = o.BinaryOperator.BiggerEquals;
break;

default:
throw new exceptions_1.BaseException("Unsupported operation " + ast.operation);
}
return convertToStatementIfNeeded(mode, new o.BinaryOperatorExpr(op, ast.left.visit(this, _Mode.Expression), ast.right.visit(this, _Mode.Expression)));
};
_AstToIrVisitor.prototype.visitChain = function(ast, mode) {
ensureStatementMode(mode, ast);
return this.visitAll(ast.expressions, mode);
};
_AstToIrVisitor.prototype.visitConditional = function(ast, mode) {
var value = ast.condition.visit(this, _Mode.Expression);
return convertToStatementIfNeeded(mode, value.conditional(ast.trueExp.visit(this, _Mode.Expression), ast.falseExp.visit(this, _Mode.Expression)));
};
_AstToIrVisitor.prototype.visitPipe = function(ast, mode) {
var input = ast.exp.visit(this, _Mode.Expression);
var args = this.visitAll(ast.args, _Mode.Expression);
var value = this._nameResolver.callPipe(ast.name, input, args);
this.needsValueUnwrapper = true;
return convertToStatementIfNeeded(mode, this._valueUnwrapper.callMethod("unwrap", [ value ]));
};
_AstToIrVisitor.prototype.visitFunctionCall = function(ast, mode) {
return convertToStatementIfNeeded(mode, ast.target.visit(this, _Mode.Expression).callFn(this.visitAll(ast.args, _Mode.Expression)));
};
_AstToIrVisitor.prototype.visitImplicitReceiver = function(ast, mode) {
ensureExpressionMode(mode, ast);
return IMPLICIT_RECEIVER;
};
_AstToIrVisitor.prototype.visitInterpolation = function(ast, mode) {
ensureExpressionMode(mode, ast);
var args = [ o.literal(ast.expressions.length) ];
for (var i = 0; i < ast.strings.length - 1; i++) {
args.push(o.literal(ast.strings[i]));
args.push(ast.expressions[i].visit(this, _Mode.Expression));
}
args.push(o.literal(ast.strings[ast.strings.length - 1]));
return o.importExpr(identifiers_1.Identifiers.interpolate).callFn(args);
};
_AstToIrVisitor.prototype.visitKeyedRead = function(ast, mode) {
return convertToStatementIfNeeded(mode, ast.obj.visit(this, _Mode.Expression).key(ast.key.visit(this, _Mode.Expression)));
};
_AstToIrVisitor.prototype.visitKeyedWrite = function(ast, mode) {
var obj = ast.obj.visit(this, _Mode.Expression);
var key = ast.key.visit(this, _Mode.Expression);
var value = ast.value.visit(this, _Mode.Expression);
return convertToStatementIfNeeded(mode, obj.key(key).set(value));
};
_AstToIrVisitor.prototype.visitLiteralArray = function(ast, mode) {
return convertToStatementIfNeeded(mode, this._nameResolver.createLiteralArray(this.visitAll(ast.expressions, mode)));
};
_AstToIrVisitor.prototype.visitLiteralMap = function(ast, mode) {
var parts = [];
for (var i = 0; i < ast.keys.length; i++) {
parts.push([ ast.keys[i], ast.values[i].visit(this, _Mode.Expression) ]);
}
return convertToStatementIfNeeded(mode, this._nameResolver.createLiteralMap(parts));
};
_AstToIrVisitor.prototype.visitLiteralPrimitive = function(ast, mode) {
return convertToStatementIfNeeded(mode, o.literal(ast.value));
};
_AstToIrVisitor.prototype.visitMethodCall = function(ast, mode) {
var args = this.visitAll(ast.args, _Mode.Expression);
var result = null;
var receiver = ast.receiver.visit(this, _Mode.Expression);
if (receiver === IMPLICIT_RECEIVER) {
var varExpr = this._nameResolver.getLocal(ast.name);
if (lang_1.isPresent(varExpr)) {
result = varExpr.callFn(args);
} else {
receiver = this._implicitReceiver;
}
}
if (lang_1.isBlank(result)) {
result = receiver.callMethod(ast.name, args);
}
return convertToStatementIfNeeded(mode, result);
};
_AstToIrVisitor.prototype.visitPrefixNot = function(ast, mode) {
return convertToStatementIfNeeded(mode, o.not(ast.expression.visit(this, _Mode.Expression)));
};
_AstToIrVisitor.prototype.visitPropertyRead = function(ast, mode) {
var result = null;
var receiver = ast.receiver.visit(this, _Mode.Expression);
if (receiver === IMPLICIT_RECEIVER) {
result = this._nameResolver.getLocal(ast.name);
if (lang_1.isBlank(result)) {
receiver = this._implicitReceiver;
}
}
if (lang_1.isBlank(result)) {
result = receiver.prop(ast.name);
}
return convertToStatementIfNeeded(mode, result);
};
_AstToIrVisitor.prototype.visitPropertyWrite = function(ast, mode) {
var receiver = ast.receiver.visit(this, _Mode.Expression);
if (receiver === IMPLICIT_RECEIVER) {
var varExpr = this._nameResolver.getLocal(ast.name);
if (lang_1.isPresent(varExpr)) {
throw new exceptions_1.BaseException("Cannot assign to a reference or variable!");
}
receiver = this._implicitReceiver;
}
return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(ast.value.visit(this, _Mode.Expression)));
};
_AstToIrVisitor.prototype.visitSafePropertyRead = function(ast, mode) {
var receiver = ast.receiver.visit(this, _Mode.Expression);
return convertToStatementIfNeeded(mode, receiver.isBlank().conditional(o.NULL_EXPR, receiver.prop(ast.name)));
};
_AstToIrVisitor.prototype.visitSafeMethodCall = function(ast, mode) {
var receiver = ast.receiver.visit(this, _Mode.Expression);
var args = this.visitAll(ast.args, _Mode.Expression);
return convertToStatementIfNeeded(mode, receiver.isBlank().conditional(o.NULL_EXPR, receiver.callMethod(ast.name, args)));
};
_AstToIrVisitor.prototype.visitAll = function(asts, mode) {
var _this = this;
return asts.map(function(ast) {
return ast.visit(_this, mode);
});
};
_AstToIrVisitor.prototype.visitQuote = function(ast, mode) {
throw new exceptions_1.BaseException("Quotes are not supported for evaluation!");
};
return _AstToIrVisitor;
}();
function flattenStatements(arg, output) {
if (lang_1.isArray(arg)) {
arg.forEach(function(entry) {
return flattenStatements(entry, output);
});
} else {
output.push(arg);
}
}
}, function(module, exports) {
"use strict";
var CompileBinding = function() {
function CompileBinding(node, sourceAst) {
this.node = node;
this.sourceAst = sourceAst;
}
return CompileBinding;
}();
exports.CompileBinding = CompileBinding;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(281);
var collection_1 = __webpack_require__(285);
var constants_1 = __webpack_require__(315);
var o = __webpack_require__(307);
var compile_method_1 = __webpack_require__(318);
var expression_converter_1 = __webpack_require__(324);
var compile_binding_1 = __webpack_require__(325);
var CompileEventListener = function() {
function CompileEventListener(compileElement, eventTarget, eventName, listenerIndex) {
this.compileElement = compileElement;
this.eventTarget = eventTarget;
this.eventName = eventName;
this._hasComponentHostListener = false;
this._actionResultExprs = [];
this._method = new compile_method_1.CompileMethod(compileElement.view);
this._methodName = "_handle_" + santitizeEventName(eventName) + "_" + compileElement.nodeIndex + "_" + listenerIndex;
this._eventParam = new o.FnParam(constants_1.EventHandlerVars.event.name, o.importType(this.compileElement.view.genConfig.renderTypes.renderEvent));
}
CompileEventListener.getOrCreate = function(compileElement, eventTarget, eventName, targetEventListeners) {
var listener = targetEventListeners.find(function(listener) {
return listener.eventTarget == eventTarget && listener.eventName == eventName;
});
if (lang_1.isBlank(listener)) {
listener = new CompileEventListener(compileElement, eventTarget, eventName, targetEventListeners.length);
targetEventListeners.push(listener);
}
return listener;
};
CompileEventListener.prototype.addAction = function(hostEvent, directive, directiveInstance) {
if (lang_1.isPresent(directive) && directive.isComponent) {
this._hasComponentHostListener = true;
}
this._method.resetDebugInfo(this.compileElement.nodeIndex, hostEvent);
var context = lang_1.isPresent(directiveInstance) ? directiveInstance : this.compileElement.view.componentContext;
var actionStmts = expression_converter_1.convertCdStatementToIr(this.compileElement.view, context, hostEvent.handler);
var lastIndex = actionStmts.length - 1;
if (lastIndex >= 0) {
var lastStatement = actionStmts[lastIndex];
var returnExpr = convertStmtIntoExpression(lastStatement);
var preventDefaultVar = o.variable("pd_" + this._actionResultExprs.length);
this._actionResultExprs.push(preventDefaultVar);
if (lang_1.isPresent(returnExpr)) {
actionStmts[lastIndex] = preventDefaultVar.set(returnExpr.cast(o.DYNAMIC_TYPE).notIdentical(o.literal(false))).toDeclStmt(null, [ o.StmtModifier.Final ]);
}
}
this._method.addStmts(actionStmts);
};
CompileEventListener.prototype.finishMethod = function() {
var markPathToRootStart = this._hasComponentHostListener ? this.compileElement.appElement.prop("componentView") : o.THIS_EXPR;
var resultExpr = o.literal(true);
this._actionResultExprs.forEach(function(expr) {
resultExpr = resultExpr.and(expr);
});
var stmts = [ markPathToRootStart.callMethod("markPathToRootAsCheckOnce", []).toStmt() ].concat(this._method.finish()).concat([ new o.ReturnStatement(resultExpr) ]);
this.compileElement.view.eventHandlerMethods.push(new o.ClassMethod(this._methodName, [ this._eventParam ], stmts, o.BOOL_TYPE, [ o.StmtModifier.Private ]));
};
CompileEventListener.prototype.listenToRenderer = function() {
var listenExpr;
var eventListener = o.THIS_EXPR.callMethod("eventHandler", [ o.THIS_EXPR.prop(this._methodName).callMethod(o.BuiltinMethod.bind, [ o.THIS_EXPR ]) ]);
if (lang_1.isPresent(this.eventTarget)) {
listenExpr = constants_1.ViewProperties.renderer.callMethod("listenGlobal", [ o.literal(this.eventTarget), o.literal(this.eventName), eventListener ]);
} else {
listenExpr = constants_1.ViewProperties.renderer.callMethod("listen", [ this.compileElement.renderNode, o.literal(this.eventName), eventListener ]);
}
var disposable = o.variable("disposable_" + this.compileElement.view.disposables.length);
this.compileElement.view.disposables.push(disposable);
this.compileElement.view.createMethod.addStmt(disposable.set(listenExpr).toDeclStmt(o.FUNCTION_TYPE, [ o.StmtModifier.Private ]));
};
CompileEventListener.prototype.listenToDirective = function(directiveInstance, observablePropName) {
var subscription = o.variable("subscription_" + this.compileElement.view.subscriptions.length);
this.compileElement.view.subscriptions.push(subscription);
var eventListener = o.THIS_EXPR.callMethod("eventHandler", [ o.THIS_EXPR.prop(this._methodName).callMethod(o.BuiltinMethod.bind, [ o.THIS_EXPR ]) ]);
this.compileElement.view.createMethod.addStmt(subscription.set(directiveInstance.prop(observablePropName).callMethod(o.BuiltinMethod.SubscribeObservable, [ eventListener ])).toDeclStmt(null, [ o.StmtModifier.Final ]));
};
return CompileEventListener;
}();
exports.CompileEventListener = CompileEventListener;
function collectEventListeners(hostEvents, dirs, compileElement) {
var eventListeners = [];
hostEvents.forEach(function(hostEvent) {
compileElement.view.bindings.push(new compile_binding_1.CompileBinding(compileElement, hostEvent));
var listener = CompileEventListener.getOrCreate(compileElement, hostEvent.target, hostEvent.name, eventListeners);
listener.addAction(hostEvent, null, null);
});
collection_1.ListWrapper.forEachWithIndex(dirs, function(directiveAst, i) {
var directiveInstance = compileElement.directiveInstances[i];
directiveAst.hostEvents.forEach(function(hostEvent) {
compileElement.view.bindings.push(new compile_binding_1.CompileBinding(compileElement, hostEvent));
var listener = CompileEventListener.getOrCreate(compileElement, hostEvent.target, hostEvent.name, eventListeners);
listener.addAction(hostEvent, directiveAst.directive, directiveInstance);
});
});
eventListeners.forEach(function(listener) {
return listener.finishMethod();
});
return eventListeners;
}
exports.collectEventListeners = collectEventListeners;
function bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners) {
collection_1.StringMapWrapper.forEach(directiveAst.directive.outputs, function(eventName, observablePropName) {
eventListeners.filter(function(listener) {
return listener.eventName == eventName;
}).forEach(function(listener) {
listener.listenToDirective(directiveInstance, observablePropName);
});
});
}
exports.bindDirectiveOutputs = bindDirectiveOutputs;
function bindRenderOutputs(eventListeners) {
eventListeners.forEach(function(listener) {
return listener.listenToRenderer();
});
}
exports.bindRenderOutputs = bindRenderOutputs;
function convertStmtIntoExpression(stmt) {
if (stmt instanceof o.ExpressionStatement) {
return stmt.expr;
} else if (stmt instanceof o.ReturnStatement) {
return stmt.value;
}
return null;
}
function santitizeEventName(name) {
return lang_1.StringWrapper.replaceAll(name, /[^a-zA-Z_]/g, "_");
}
}, function(module, exports, __webpack_require__) {
"use strict";
var core_private_1 = __webpack_require__(284);
var o = __webpack_require__(307);
var constants_1 = __webpack_require__(315);
var STATE_IS_NEVER_CHECKED = o.THIS_EXPR.prop("cdState").identical(constants_1.ChangeDetectorStateEnum.NeverChecked);
var NOT_THROW_ON_CHANGES = o.not(constants_1.DetectChangesVars.throwOnChange);
function bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement) {
var view = compileElement.view;
var detectChangesInInputsMethod = view.detectChangesInInputsMethod;
var lifecycleHooks = directiveAst.directive.lifecycleHooks;
if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.OnChanges) !== -1 && directiveAst.inputs.length > 0) {
detectChangesInInputsMethod.addStmt(new o.IfStmt(constants_1.DetectChangesVars.changes.notIdentical(o.NULL_EXPR), [ directiveInstance.callMethod("ngOnChanges", [ constants_1.DetectChangesVars.changes ]).toStmt() ]));
}
if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.OnInit) !== -1) {
detectChangesInInputsMethod.addStmt(new o.IfStmt(STATE_IS_NEVER_CHECKED.and(NOT_THROW_ON_CHANGES), [ directiveInstance.callMethod("ngOnInit", []).toStmt() ]));
}
if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.DoCheck) !== -1) {
detectChangesInInputsMethod.addStmt(new o.IfStmt(NOT_THROW_ON_CHANGES, [ directiveInstance.callMethod("ngDoCheck", []).toStmt() ]));
}
}
exports.bindDirectiveDetectChangesLifecycleCallbacks = bindDirectiveDetectChangesLifecycleCallbacks;
function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
var view = compileElement.view;
var lifecycleHooks = directiveMeta.lifecycleHooks;
var afterContentLifecycleCallbacksMethod = view.afterContentLifecycleCallbacksMethod;
afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.AfterContentInit) !== -1) {
afterContentLifecycleCallbacksMethod.addStmt(new o.IfStmt(STATE_IS_NEVER_CHECKED, [ directiveInstance.callMethod("ngAfterContentInit", []).toStmt() ]));
}
if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.AfterContentChecked) !== -1) {
afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod("ngAfterContentChecked", []).toStmt());
}
}
exports.bindDirectiveAfterContentLifecycleCallbacks = bindDirectiveAfterContentLifecycleCallbacks;
function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
var view = compileElement.view;
var lifecycleHooks = directiveMeta.lifecycleHooks;
var afterViewLifecycleCallbacksMethod = view.afterViewLifecycleCallbacksMethod;
afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.AfterViewInit) !== -1) {
afterViewLifecycleCallbacksMethod.addStmt(new o.IfStmt(STATE_IS_NEVER_CHECKED, [ directiveInstance.callMethod("ngAfterViewInit", []).toStmt() ]));
}
if (lifecycleHooks.indexOf(core_private_1.LifecycleHooks.AfterViewChecked) !== -1) {
afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod("ngAfterViewChecked", []).toStmt());
}
}
exports.bindDirectiveAfterViewLifecycleCallbacks = bindDirectiveAfterViewLifecycleCallbacks;
function bindDirectiveDestroyLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
var onDestroyMethod = compileElement.view.destroyMethod;
onDestroyMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
if (directiveMeta.lifecycleHooks.indexOf(core_private_1.LifecycleHooks.OnDestroy) !== -1) {
onDestroyMethod.addStmt(directiveInstance.callMethod("ngOnDestroy", []).toStmt());
}
}
exports.bindDirectiveDestroyLifecycleCallbacks = bindDirectiveDestroyLifecycleCallbacks;
function bindPipeDestroyLifecycleCallbacks(pipeMeta, pipeInstance, view) {
var onDestroyMethod = view.destroyMethod;
if (pipeMeta.lifecycleHooks.indexOf(core_private_1.LifecycleHooks.OnDestroy) !== -1) {
onDestroyMethod.addStmt(pipeInstance.callMethod("ngOnDestroy", []).toStmt());
}
}
exports.bindPipeDestroyLifecycleCallbacks = bindPipeDestroyLifecycleCallbacks;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(281);
var exceptions_1 = __webpack_require__(286);
var async_1 = __webpack_require__(309);
var compile_metadata_1 = __webpack_require__(302);
var xhr_1 = __webpack_require__(329);
var url_resolver_1 = __webpack_require__(303);
var style_url_resolver_1 = __webpack_require__(299);
var html_ast_1 = __webpack_require__(293);
var html_parser_1 = __webpack_require__(292);
var template_preparser_1 = __webpack_require__(298);
var DirectiveNormalizer = function() {
function DirectiveNormalizer(_xhr, _urlResolver, _htmlParser) {
this._xhr = _xhr;
this._urlResolver = _urlResolver;
this._htmlParser = _htmlParser;
}
DirectiveNormalizer.prototype.normalizeDirective = function(directive) {
if (!directive.isComponent) {
return async_1.PromiseWrapper.resolve(directive);
}
return this.normalizeTemplate(directive.type, directive.template).then(function(normalizedTemplate) {
return new compile_metadata_1.CompileDirectiveMetadata({
type: directive.type,
isComponent: directive.isComponent,
selector: directive.selector,
exportAs: directive.exportAs,
changeDetection: directive.changeDetection,
inputs: directive.inputs,
outputs: directive.outputs,
hostListeners: directive.hostListeners,
hostProperties: directive.hostProperties,
hostAttributes: directive.hostAttributes,
lifecycleHooks: directive.lifecycleHooks,
providers: directive.providers,
viewProviders: directive.viewProviders,
queries: directive.queries,
viewQueries: directive.viewQueries,
template: normalizedTemplate
});
});
};
DirectiveNormalizer.prototype.normalizeTemplate = function(directiveType, template) {
var _this = this;
if (lang_1.isPresent(template.template)) {
return async_1.PromiseWrapper.resolve(this.normalizeLoadedTemplate(directiveType, template, template.template, directiveType.moduleUrl));
} else if (lang_1.isPresent(template.templateUrl)) {
var sourceAbsUrl = this._urlResolver.resolve(directiveType.moduleUrl, template.templateUrl);
return this._xhr.get(sourceAbsUrl).then(function(templateContent) {
return _this.normalizeLoadedTemplate(directiveType, template, templateContent, sourceAbsUrl);
});
} else {
throw new exceptions_1.BaseException("No template specified for component " + directiveType.name);
}
};
DirectiveNormalizer.prototype.normalizeLoadedTemplate = function(directiveType, templateMeta, template, templateAbsUrl) {
var _this = this;
var rootNodesAndErrors = this._htmlParser.parse(template, directiveType.name);
if (rootNodesAndErrors.errors.length > 0) {
var errorString = rootNodesAndErrors.errors.join("\n");
throw new exceptions_1.BaseException("Template parse errors:\n" + errorString);
}
var visitor = new TemplatePreparseVisitor();
html_ast_1.htmlVisitAll(visitor, rootNodesAndErrors.rootNodes);
var allStyles = templateMeta.styles.concat(visitor.styles);
var allStyleAbsUrls = visitor.styleUrls.filter(style_url_resolver_1.isStyleUrlResolvable).map(function(url) {
return _this._urlResolver.resolve(templateAbsUrl, url);
}).concat(templateMeta.styleUrls.filter(style_url_resolver_1.isStyleUrlResolvable).map(function(url) {
return _this._urlResolver.resolve(directiveType.moduleUrl, url);
}));
var allResolvedStyles = allStyles.map(function(style) {
var styleWithImports = style_url_resolver_1.extractStyleUrls(_this._urlResolver, templateAbsUrl, style);
styleWithImports.styleUrls.forEach(function(styleUrl) {
return allStyleAbsUrls.push(styleUrl);
});
return styleWithImports.style;
});
var encapsulation = templateMeta.encapsulation;
if (encapsulation === core_1.ViewEncapsulation.Emulated && allResolvedStyles.length === 0 && allStyleAbsUrls.length === 0) {
encapsulation = core_1.ViewEncapsulation.None;
}
return new compile_metadata_1.CompileTemplateMetadata({
encapsulation: encapsulation,
template: template,
templateUrl: templateAbsUrl,
styles: allResolvedStyles,
styleUrls: allStyleAbsUrls,
ngContentSelectors: visitor.ngContentSelectors
});
};
DirectiveNormalizer.decorators = [ {
type: core_1.Injectable
} ];
DirectiveNormalizer.ctorParameters = [ {
type: xhr_1.XHR
}, {
type: url_resolver_1.UrlResolver
}, {
type: html_parser_1.HtmlParser
} ];
return DirectiveNormalizer;
}();
exports.DirectiveNormalizer = DirectiveNormalizer;
var TemplatePreparseVisitor = function() {
function TemplatePreparseVisitor() {
this.ngContentSelectors = [];
this.styles = [];
this.styleUrls = [];
this.ngNonBindableStackCount = 0;
}
TemplatePreparseVisitor.prototype.visitElement = function(ast, context) {
var preparsedElement = template_preparser_1.preparseElement(ast);
switch (preparsedElement.type) {
case template_preparser_1.PreparsedElementType.NG_CONTENT:
if (this.ngNonBindableStackCount === 0) {
this.ngContentSelectors.push(preparsedElement.selectAttr);
}
break;

case template_preparser_1.PreparsedElementType.STYLE:
var textContent = "";
ast.children.forEach(function(child) {
if (child instanceof html_ast_1.HtmlTextAst) {
textContent += child.value;
}
});
this.styles.push(textContent);
break;

case template_preparser_1.PreparsedElementType.STYLESHEET:
this.styleUrls.push(preparsedElement.hrefAttr);
break;

default:
break;
}
if (preparsedElement.nonBindable) {
this.ngNonBindableStackCount++;
}
html_ast_1.htmlVisitAll(this, ast.children);
if (preparsedElement.nonBindable) {
this.ngNonBindableStackCount--;
}
return null;
};
TemplatePreparseVisitor.prototype.visitComment = function(ast, context) {
return null;
};
TemplatePreparseVisitor.prototype.visitAttr = function(ast, context) {
return null;
};
TemplatePreparseVisitor.prototype.visitText = function(ast, context) {
return null;
};
TemplatePreparseVisitor.prototype.visitExpansion = function(ast, context) {
return null;
};
TemplatePreparseVisitor.prototype.visitExpansionCase = function(ast, context) {
return null;
};
return TemplatePreparseVisitor;
}();
}, function(module, exports) {
"use strict";
var XHR = function() {
function XHR() {}
XHR.prototype.get = function(url) {
return null;
};
return XHR;
}();
exports.XHR = XHR;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var core_private_1 = __webpack_require__(284);
var lang_1 = __webpack_require__(281);
var collection_1 = __webpack_require__(285);
var exceptions_1 = __webpack_require__(286);
var cpl = __webpack_require__(302);
var directive_resolver_1 = __webpack_require__(331);
var pipe_resolver_1 = __webpack_require__(332);
var view_resolver_1 = __webpack_require__(333);
var directive_lifecycle_reflector_1 = __webpack_require__(334);
var util_1 = __webpack_require__(300);
var assertions_1 = __webpack_require__(335);
var url_resolver_1 = __webpack_require__(303);
var core_private_2 = __webpack_require__(284);
var CompileMetadataResolver = function() {
function CompileMetadataResolver(_directiveResolver, _pipeResolver, _viewResolver, _platformDirectives, _platformPipes, _reflector) {
this._directiveResolver = _directiveResolver;
this._pipeResolver = _pipeResolver;
this._viewResolver = _viewResolver;
this._platformDirectives = _platformDirectives;
this._platformPipes = _platformPipes;
this._directiveCache = new Map();
this._pipeCache = new Map();
this._anonymousTypes = new Map();
this._anonymousTypeIndex = 0;
if (lang_1.isPresent(_reflector)) {
this._reflector = _reflector;
} else {
this._reflector = core_1.reflector;
}
}
CompileMetadataResolver.prototype.sanitizeTokenName = function(token) {
var identifier = lang_1.stringify(token);
if (identifier.indexOf("(") >= 0) {
var found = this._anonymousTypes.get(token);
if (lang_1.isBlank(found)) {
this._anonymousTypes.set(token, this._anonymousTypeIndex++);
found = this._anonymousTypes.get(token);
}
identifier = "anonymous_token_" + found + "_";
}
return util_1.sanitizeIdentifier(identifier);
};
CompileMetadataResolver.prototype.getDirectiveMetadata = function(directiveType) {
var meta = this._directiveCache.get(directiveType);
if (lang_1.isBlank(meta)) {
var dirMeta = this._directiveResolver.resolve(directiveType);
var templateMeta = null;
var changeDetectionStrategy = null;
var viewProviders = [];
var moduleUrl = staticTypeModuleUrl(directiveType);
if (dirMeta instanceof core_1.ComponentMetadata) {
assertions_1.assertArrayOfStrings("styles", dirMeta.styles);
var cmpMeta = dirMeta;
var viewMeta = this._viewResolver.resolve(directiveType);
assertions_1.assertArrayOfStrings("styles", viewMeta.styles);
templateMeta = new cpl.CompileTemplateMetadata({
encapsulation: viewMeta.encapsulation,
template: viewMeta.template,
templateUrl: viewMeta.templateUrl,
styles: viewMeta.styles,
styleUrls: viewMeta.styleUrls
});
changeDetectionStrategy = cmpMeta.changeDetection;
if (lang_1.isPresent(dirMeta.viewProviders)) {
viewProviders = this.getProvidersMetadata(dirMeta.viewProviders);
}
moduleUrl = componentModuleUrl(this._reflector, directiveType, cmpMeta);
}
var providers = [];
if (lang_1.isPresent(dirMeta.providers)) {
providers = this.getProvidersMetadata(dirMeta.providers);
}
var queries = [];
var viewQueries = [];
if (lang_1.isPresent(dirMeta.queries)) {
queries = this.getQueriesMetadata(dirMeta.queries, false);
viewQueries = this.getQueriesMetadata(dirMeta.queries, true);
}
meta = cpl.CompileDirectiveMetadata.create({
selector: dirMeta.selector,
exportAs: dirMeta.exportAs,
isComponent: lang_1.isPresent(templateMeta),
type: this.getTypeMetadata(directiveType, moduleUrl),
template: templateMeta,
changeDetection: changeDetectionStrategy,
inputs: dirMeta.inputs,
outputs: dirMeta.outputs,
host: dirMeta.host,
lifecycleHooks: core_private_1.LIFECYCLE_HOOKS_VALUES.filter(function(hook) {
return directive_lifecycle_reflector_1.hasLifecycleHook(hook, directiveType);
}),
providers: providers,
viewProviders: viewProviders,
queries: queries,
viewQueries: viewQueries
});
this._directiveCache.set(directiveType, meta);
}
return meta;
};
CompileMetadataResolver.prototype.maybeGetDirectiveMetadata = function(someType) {
try {
return this.getDirectiveMetadata(someType);
} catch (e) {
if (e.message.indexOf("No Directive annotation") !== -1) {
return null;
}
throw e;
}
};
CompileMetadataResolver.prototype.getTypeMetadata = function(type, moduleUrl) {
return new cpl.CompileTypeMetadata({
name: this.sanitizeTokenName(type),
moduleUrl: moduleUrl,
runtime: type,
diDeps: this.getDependenciesMetadata(type, null)
});
};
CompileMetadataResolver.prototype.getFactoryMetadata = function(factory, moduleUrl) {
return new cpl.CompileFactoryMetadata({
name: this.sanitizeTokenName(factory),
moduleUrl: moduleUrl,
runtime: factory,
diDeps: this.getDependenciesMetadata(factory, null)
});
};
CompileMetadataResolver.prototype.getPipeMetadata = function(pipeType) {
var meta = this._pipeCache.get(pipeType);
if (lang_1.isBlank(meta)) {
var pipeMeta = this._pipeResolver.resolve(pipeType);
meta = new cpl.CompilePipeMetadata({
type: this.getTypeMetadata(pipeType, staticTypeModuleUrl(pipeType)),
name: pipeMeta.name,
pure: pipeMeta.pure,
lifecycleHooks: core_private_1.LIFECYCLE_HOOKS_VALUES.filter(function(hook) {
return directive_lifecycle_reflector_1.hasLifecycleHook(hook, pipeType);
})
});
this._pipeCache.set(pipeType, meta);
}
return meta;
};
CompileMetadataResolver.prototype.getViewDirectivesMetadata = function(component) {
var _this = this;
var view = this._viewResolver.resolve(component);
var directives = flattenDirectives(view, this._platformDirectives);
for (var i = 0; i < directives.length; i++) {
if (!isValidType(directives[i])) {
throw new exceptions_1.BaseException("Unexpected directive value '" + lang_1.stringify(directives[i]) + "' on the View of component '" + lang_1.stringify(component) + "'");
}
}
return directives.map(function(type) {
return _this.getDirectiveMetadata(type);
});
};
CompileMetadataResolver.prototype.getViewPipesMetadata = function(component) {
var _this = this;
var view = this._viewResolver.resolve(component);
var pipes = flattenPipes(view, this._platformPipes);
for (var i = 0; i < pipes.length; i++) {
if (!isValidType(pipes[i])) {
throw new exceptions_1.BaseException("Unexpected piped value '" + lang_1.stringify(pipes[i]) + "' on the View of component '" + lang_1.stringify(component) + "'");
}
}
return pipes.map(function(type) {
return _this.getPipeMetadata(type);
});
};
CompileMetadataResolver.prototype.getDependenciesMetadata = function(typeOrFunc, dependencies) {
var _this = this;
var params = lang_1.isPresent(dependencies) ? dependencies : this._reflector.parameters(typeOrFunc);
if (lang_1.isBlank(params)) {
params = [];
}
return params.map(function(param) {
if (lang_1.isBlank(param)) {
return null;
}
var isAttribute = false;
var isHost = false;
var isSelf = false;
var isSkipSelf = false;
var isOptional = false;
var query = null;
var viewQuery = null;
var token = null;
if (lang_1.isArray(param)) {
param.forEach(function(paramEntry) {
if (paramEntry instanceof core_1.HostMetadata) {
isHost = true;
} else if (paramEntry instanceof core_1.SelfMetadata) {
isSelf = true;
} else if (paramEntry instanceof core_1.SkipSelfMetadata) {
isSkipSelf = true;
} else if (paramEntry instanceof core_1.OptionalMetadata) {
isOptional = true;
} else if (paramEntry instanceof core_1.AttributeMetadata) {
isAttribute = true;
token = paramEntry.attributeName;
} else if (paramEntry instanceof core_1.QueryMetadata) {
if (paramEntry.isViewQuery) {
viewQuery = paramEntry;
} else {
query = paramEntry;
}
} else if (paramEntry instanceof core_1.InjectMetadata) {
token = paramEntry.token;
} else if (isValidType(paramEntry) && lang_1.isBlank(token)) {
token = paramEntry;
}
});
} else {
token = param;
}
if (lang_1.isBlank(token)) {
return null;
}
return new cpl.CompileDiDependencyMetadata({
isAttribute: isAttribute,
isHost: isHost,
isSelf: isSelf,
isSkipSelf: isSkipSelf,
isOptional: isOptional,
query: lang_1.isPresent(query) ? _this.getQueryMetadata(query, null) : null,
viewQuery: lang_1.isPresent(viewQuery) ? _this.getQueryMetadata(viewQuery, null) : null,
token: _this.getTokenMetadata(token)
});
});
};
CompileMetadataResolver.prototype.getTokenMetadata = function(token) {
token = core_1.resolveForwardRef(token);
var compileToken;
if (lang_1.isString(token)) {
compileToken = new cpl.CompileTokenMetadata({
value: token
});
} else {
compileToken = new cpl.CompileTokenMetadata({
identifier: new cpl.CompileIdentifierMetadata({
runtime: token,
name: this.sanitizeTokenName(token),
moduleUrl: staticTypeModuleUrl(token)
})
});
}
return compileToken;
};
CompileMetadataResolver.prototype.getProvidersMetadata = function(providers) {
var _this = this;
return providers.map(function(provider) {
provider = core_1.resolveForwardRef(provider);
if (lang_1.isArray(provider)) {
return _this.getProvidersMetadata(provider);
} else if (provider instanceof core_1.Provider) {
return _this.getProviderMetadata(provider);
} else if (core_private_2.isProviderLiteral(provider)) {
return _this.getProviderMetadata(core_private_2.createProvider(provider));
} else {
return _this.getTypeMetadata(provider, staticTypeModuleUrl(provider));
}
});
};
CompileMetadataResolver.prototype.getProviderMetadata = function(provider) {
var compileDeps;
if (lang_1.isPresent(provider.useClass)) {
compileDeps = this.getDependenciesMetadata(provider.useClass, provider.dependencies);
} else if (lang_1.isPresent(provider.useFactory)) {
compileDeps = this.getDependenciesMetadata(provider.useFactory, provider.dependencies);
}
return new cpl.CompileProviderMetadata({
token: this.getTokenMetadata(provider.token),
useClass: lang_1.isPresent(provider.useClass) ? this.getTypeMetadata(provider.useClass, staticTypeModuleUrl(provider.useClass)) : null,
useValue: convertToCompileValue(provider.useValue),
useFactory: lang_1.isPresent(provider.useFactory) ? this.getFactoryMetadata(provider.useFactory, staticTypeModuleUrl(provider.useFactory)) : null,
useExisting: lang_1.isPresent(provider.useExisting) ? this.getTokenMetadata(provider.useExisting) : null,
deps: compileDeps,
multi: provider.multi
});
};
CompileMetadataResolver.prototype.getQueriesMetadata = function(queries, isViewQuery) {
var _this = this;
var compileQueries = [];
collection_1.StringMapWrapper.forEach(queries, function(query, propertyName) {
if (query.isViewQuery === isViewQuery) {
compileQueries.push(_this.getQueryMetadata(query, propertyName));
}
});
return compileQueries;
};
CompileMetadataResolver.prototype.getQueryMetadata = function(q, propertyName) {
var _this = this;
var selectors;
if (q.isVarBindingQuery) {
selectors = q.varBindings.map(function(varName) {
return _this.getTokenMetadata(varName);
});
} else {
selectors = [ this.getTokenMetadata(q.selector) ];
}
return new cpl.CompileQueryMetadata({
selectors: selectors,
first: q.first,
descendants: q.descendants,
propertyName: propertyName,
read: lang_1.isPresent(q.read) ? this.getTokenMetadata(q.read) : null
});
};
CompileMetadataResolver.decorators = [ {
type: core_1.Injectable
} ];
CompileMetadataResolver.ctorParameters = [ {
type: directive_resolver_1.DirectiveResolver
}, {
type: pipe_resolver_1.PipeResolver
}, {
type: view_resolver_1.ViewResolver
}, {
type: undefined,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Inject,
args: [ core_1.PLATFORM_DIRECTIVES ]
} ]
}, {
type: undefined,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Inject,
args: [ core_1.PLATFORM_PIPES ]
} ]
}, {
type: core_private_1.ReflectorReader
} ];
return CompileMetadataResolver;
}();
exports.CompileMetadataResolver = CompileMetadataResolver;
function flattenDirectives(view, platformDirectives) {
var directives = [];
if (lang_1.isPresent(platformDirectives)) {
flattenArray(platformDirectives, directives);
}
if (lang_1.isPresent(view.directives)) {
flattenArray(view.directives, directives);
}
return directives;
}
function flattenPipes(view, platformPipes) {
var pipes = [];
if (lang_1.isPresent(platformPipes)) {
flattenArray(platformPipes, pipes);
}
if (lang_1.isPresent(view.pipes)) {
flattenArray(view.pipes, pipes);
}
return pipes;
}
function flattenArray(tree, out) {
for (var i = 0; i < tree.length; i++) {
var item = core_1.resolveForwardRef(tree[i]);
if (lang_1.isArray(item)) {
flattenArray(item, out);
} else {
out.push(item);
}
}
}
function isStaticType(value) {
return lang_1.isStringMap(value) && lang_1.isPresent(value["name"]) && lang_1.isPresent(value["filePath"]);
}
function isValidType(value) {
return isStaticType(value) || value instanceof lang_1.Type;
}
function staticTypeModuleUrl(value) {
return isStaticType(value) ? value["filePath"] : null;
}
function componentModuleUrl(reflector, type, cmpMetadata) {
if (isStaticType(type)) {
return staticTypeModuleUrl(type);
}
if (lang_1.isPresent(cmpMetadata.moduleId)) {
var moduleId = cmpMetadata.moduleId;
var scheme = url_resolver_1.getUrlScheme(moduleId);
return lang_1.isPresent(scheme) && scheme.length > 0 ? moduleId : "package:" + moduleId + util_1.MODULE_SUFFIX;
}
return reflector.importUri(type);
}
function convertToCompileValue(value) {
return util_1.visitValue(value, new _CompileValueConverter(), null);
}
var _CompileValueConverter = function(_super) {
__extends(_CompileValueConverter, _super);
function _CompileValueConverter() {
_super.apply(this, arguments);
}
_CompileValueConverter.prototype.visitOther = function(value, context) {
if (isStaticType(value)) {
return new cpl.CompileIdentifierMetadata({
name: value["name"],
moduleUrl: staticTypeModuleUrl(value)
});
} else {
return new cpl.CompileIdentifierMetadata({
runtime: value
});
}
};
return _CompileValueConverter;
}(util_1.ValueTransformer);
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var core_private_1 = __webpack_require__(284);
var lang_1 = __webpack_require__(281);
var exceptions_1 = __webpack_require__(286);
var collection_1 = __webpack_require__(285);
function _isDirectiveMetadata(type) {
return type instanceof core_1.DirectiveMetadata;
}
var DirectiveResolver = function() {
function DirectiveResolver(_reflector) {
if (lang_1.isPresent(_reflector)) {
this._reflector = _reflector;
} else {
this._reflector = core_1.reflector;
}
}
DirectiveResolver.prototype.resolve = function(type) {
var typeMetadata = this._reflector.annotations(core_1.resolveForwardRef(type));
if (lang_1.isPresent(typeMetadata)) {
var metadata = typeMetadata.find(_isDirectiveMetadata);
if (lang_1.isPresent(metadata)) {
var propertyMetadata = this._reflector.propMetadata(type);
return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
}
}
throw new exceptions_1.BaseException("No Directive annotation found on " + lang_1.stringify(type));
};
DirectiveResolver.prototype._mergeWithPropertyMetadata = function(dm, propertyMetadata, directiveType) {
var inputs = [];
var outputs = [];
var host = {};
var queries = {};
collection_1.StringMapWrapper.forEach(propertyMetadata, function(metadata, propName) {
metadata.forEach(function(a) {
if (a instanceof core_1.InputMetadata) {
if (lang_1.isPresent(a.bindingPropertyName)) {
inputs.push(propName + ": " + a.bindingPropertyName);
} else {
inputs.push(propName);
}
}
if (a instanceof core_1.OutputMetadata) {
if (lang_1.isPresent(a.bindingPropertyName)) {
outputs.push(propName + ": " + a.bindingPropertyName);
} else {
outputs.push(propName);
}
}
if (a instanceof core_1.HostBindingMetadata) {
if (lang_1.isPresent(a.hostPropertyName)) {
host["[" + a.hostPropertyName + "]"] = propName;
} else {
host["[" + propName + "]"] = propName;
}
}
if (a instanceof core_1.HostListenerMetadata) {
var args = lang_1.isPresent(a.args) ? a.args.join(", ") : "";
host["(" + a.eventName + ")"] = propName + "(" + args + ")";
}
if (a instanceof core_1.ContentChildrenMetadata) {
queries[propName] = a;
}
if (a instanceof core_1.ViewChildrenMetadata) {
queries[propName] = a;
}
if (a instanceof core_1.ContentChildMetadata) {
queries[propName] = a;
}
if (a instanceof core_1.ViewChildMetadata) {
queries[propName] = a;
}
});
});
return this._merge(dm, inputs, outputs, host, queries, directiveType);
};
DirectiveResolver.prototype._merge = function(dm, inputs, outputs, host, queries, directiveType) {
var mergedInputs = lang_1.isPresent(dm.inputs) ? collection_1.ListWrapper.concat(dm.inputs, inputs) : inputs;
var mergedOutputs;
if (lang_1.isPresent(dm.outputs)) {
dm.outputs.forEach(function(propName) {
if (collection_1.ListWrapper.contains(outputs, propName)) {
throw new exceptions_1.BaseException("Output event '" + propName + "' defined multiple times in '" + lang_1.stringify(directiveType) + "'");
}
});
mergedOutputs = collection_1.ListWrapper.concat(dm.outputs, outputs);
} else {
mergedOutputs = outputs;
}
var mergedHost = lang_1.isPresent(dm.host) ? collection_1.StringMapWrapper.merge(dm.host, host) : host;
var mergedQueries = lang_1.isPresent(dm.queries) ? collection_1.StringMapWrapper.merge(dm.queries, queries) : queries;
if (dm instanceof core_1.ComponentMetadata) {
return new core_1.ComponentMetadata({
selector: dm.selector,
inputs: mergedInputs,
outputs: mergedOutputs,
host: mergedHost,
exportAs: dm.exportAs,
moduleId: dm.moduleId,
queries: mergedQueries,
changeDetection: dm.changeDetection,
providers: dm.providers,
viewProviders: dm.viewProviders
});
} else {
return new core_1.DirectiveMetadata({
selector: dm.selector,
inputs: mergedInputs,
outputs: mergedOutputs,
host: mergedHost,
exportAs: dm.exportAs,
queries: mergedQueries,
providers: dm.providers
});
}
};
DirectiveResolver.decorators = [ {
type: core_1.Injectable
} ];
DirectiveResolver.ctorParameters = [ {
type: core_private_1.ReflectorReader
} ];
return DirectiveResolver;
}();
exports.DirectiveResolver = DirectiveResolver;
exports.CODEGEN_DIRECTIVE_RESOLVER = new DirectiveResolver(core_1.reflector);
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var core_private_1 = __webpack_require__(284);
var lang_1 = __webpack_require__(281);
var exceptions_1 = __webpack_require__(286);
function _isPipeMetadata(type) {
return type instanceof core_1.PipeMetadata;
}
var PipeResolver = function() {
function PipeResolver(_reflector) {
if (lang_1.isPresent(_reflector)) {
this._reflector = _reflector;
} else {
this._reflector = core_1.reflector;
}
}
PipeResolver.prototype.resolve = function(type) {
var metas = this._reflector.annotations(core_1.resolveForwardRef(type));
if (lang_1.isPresent(metas)) {
var annotation = metas.find(_isPipeMetadata);
if (lang_1.isPresent(annotation)) {
return annotation;
}
}
throw new exceptions_1.BaseException("No Pipe decorator found on " + lang_1.stringify(type));
};
PipeResolver.decorators = [ {
type: core_1.Injectable
} ];
PipeResolver.ctorParameters = [ {
type: core_private_1.ReflectorReader
} ];
return PipeResolver;
}();
exports.PipeResolver = PipeResolver;
exports.CODEGEN_PIPE_RESOLVER = new PipeResolver(core_1.reflector);
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var core_private_1 = __webpack_require__(284);
var lang_1 = __webpack_require__(281);
var exceptions_1 = __webpack_require__(286);
var collection_1 = __webpack_require__(285);
var ViewResolver = function() {
function ViewResolver(_reflector) {
this._cache = new collection_1.Map();
if (lang_1.isPresent(_reflector)) {
this._reflector = _reflector;
} else {
this._reflector = core_1.reflector;
}
}
ViewResolver.prototype.resolve = function(component) {
var view = this._cache.get(component);
if (lang_1.isBlank(view)) {
view = this._resolve(component);
this._cache.set(component, view);
}
return view;
};
ViewResolver.prototype._resolve = function(component) {
var compMeta;
var viewMeta;
this._reflector.annotations(component).forEach(function(m) {
if (m instanceof core_1.ViewMetadata) {
viewMeta = m;
}
if (m instanceof core_1.ComponentMetadata) {
compMeta = m;
}
});
if (lang_1.isPresent(compMeta)) {
if (lang_1.isBlank(compMeta.template) && lang_1.isBlank(compMeta.templateUrl) && lang_1.isBlank(viewMeta)) {
throw new exceptions_1.BaseException("Component '" + lang_1.stringify(component) + "' must have either 'template' or 'templateUrl' set.");
} else if (lang_1.isPresent(compMeta.template) && lang_1.isPresent(viewMeta)) {
this._throwMixingViewAndComponent("template", component);
} else if (lang_1.isPresent(compMeta.templateUrl) && lang_1.isPresent(viewMeta)) {
this._throwMixingViewAndComponent("templateUrl", component);
} else if (lang_1.isPresent(compMeta.directives) && lang_1.isPresent(viewMeta)) {
this._throwMixingViewAndComponent("directives", component);
} else if (lang_1.isPresent(compMeta.pipes) && lang_1.isPresent(viewMeta)) {
this._throwMixingViewAndComponent("pipes", component);
} else if (lang_1.isPresent(compMeta.encapsulation) && lang_1.isPresent(viewMeta)) {
this._throwMixingViewAndComponent("encapsulation", component);
} else if (lang_1.isPresent(compMeta.styles) && lang_1.isPresent(viewMeta)) {
this._throwMixingViewAndComponent("styles", component);
} else if (lang_1.isPresent(compMeta.styleUrls) && lang_1.isPresent(viewMeta)) {
this._throwMixingViewAndComponent("styleUrls", component);
} else if (lang_1.isPresent(viewMeta)) {
return viewMeta;
} else {
return new core_1.ViewMetadata({
templateUrl: compMeta.templateUrl,
template: compMeta.template,
directives: compMeta.directives,
pipes: compMeta.pipes,
encapsulation: compMeta.encapsulation,
styles: compMeta.styles,
styleUrls: compMeta.styleUrls
});
}
} else {
if (lang_1.isBlank(viewMeta)) {
throw new exceptions_1.BaseException("Could not compile '" + lang_1.stringify(component) + "' because it is not a component.");
} else {
return viewMeta;
}
}
return null;
};
ViewResolver.prototype._throwMixingViewAndComponent = function(propertyName, component) {
throw new exceptions_1.BaseException("Component '" + lang_1.stringify(component) + "' cannot have both '" + propertyName + "' and '@View' set at the same time\"");
};
ViewResolver.decorators = [ {
type: core_1.Injectable
} ];
ViewResolver.ctorParameters = [ {
type: core_private_1.ReflectorReader
} ];
return ViewResolver;
}();
exports.ViewResolver = ViewResolver;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_private_1 = __webpack_require__(284);
var lang_1 = __webpack_require__(281);
function hasLifecycleHook(lcInterface, token) {
if (!(token instanceof lang_1.Type)) return false;
var proto = token.prototype;
switch (lcInterface) {
case core_private_1.LifecycleHooks.AfterContentInit:
return !!proto.ngAfterContentInit;

case core_private_1.LifecycleHooks.AfterContentChecked:
return !!proto.ngAfterContentChecked;

case core_private_1.LifecycleHooks.AfterViewInit:
return !!proto.ngAfterViewInit;

case core_private_1.LifecycleHooks.AfterViewChecked:
return !!proto.ngAfterViewChecked;

case core_private_1.LifecycleHooks.OnChanges:
return !!proto.ngOnChanges;

case core_private_1.LifecycleHooks.DoCheck:
return !!proto.ngDoCheck;

case core_private_1.LifecycleHooks.OnDestroy:
return !!proto.ngOnDestroy;

case core_private_1.LifecycleHooks.OnInit:
return !!proto.ngOnInit;

default:
return false;
}
}
exports.hasLifecycleHook = hasLifecycleHook;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(281);
var exceptions_1 = __webpack_require__(286);
function assertArrayOfStrings(identifier, value) {
if (!lang_1.assertionsEnabled() || lang_1.isBlank(value)) {
return;
}
if (!lang_1.isArray(value)) {
throw new exceptions_1.BaseException("Expected '" + identifier + "' to be an array of strings.");
}
for (var i = 0; i < value.length; i += 1) {
if (!lang_1.isString(value[i])) {
throw new exceptions_1.BaseException("Expected '" + identifier + "' to be an array of strings.");
}
}
}
exports.assertArrayOfStrings = assertArrayOfStrings;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(281);
var abstract_emitter_1 = __webpack_require__(337);
var abstract_js_emitter_1 = __webpack_require__(338);
var util_1 = __webpack_require__(300);
function jitStatements(sourceUrl, statements, resultVar) {
var converter = new JitEmitterVisitor();
var ctx = abstract_emitter_1.EmitterVisitorContext.createRoot([ resultVar ]);
converter.visitAllStatements(statements, ctx);
return lang_1.evalExpression(sourceUrl, resultVar, ctx.toSource(), converter.getArgs());
}
exports.jitStatements = jitStatements;
var JitEmitterVisitor = function(_super) {
__extends(JitEmitterVisitor, _super);
function JitEmitterVisitor() {
_super.apply(this, arguments);
this._evalArgNames = [];
this._evalArgValues = [];
}
JitEmitterVisitor.prototype.getArgs = function() {
var result = {};
for (var i = 0; i < this._evalArgNames.length; i++) {
result[this._evalArgNames[i]] = this._evalArgValues[i];
}
return result;
};
JitEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {
var value = ast.value.runtime;
var id = this._evalArgValues.indexOf(value);
if (id === -1) {
id = this._evalArgValues.length;
this._evalArgValues.push(value);
var name = lang_1.isPresent(ast.value.name) ? util_1.sanitizeIdentifier(ast.value.name) : "val";
this._evalArgNames.push(util_1.sanitizeIdentifier("jit_" + name + id));
}
ctx.print(this._evalArgNames[id]);
return null;
};
return JitEmitterVisitor;
}(abstract_js_emitter_1.AbstractJsEmitterVisitor);
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(281);
var exceptions_1 = __webpack_require__(286);
var o = __webpack_require__(307);
var _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
exports.CATCH_ERROR_VAR = o.variable("error");
exports.CATCH_STACK_VAR = o.variable("stack");
var OutputEmitter = function() {
function OutputEmitter() {}
return OutputEmitter;
}();
exports.OutputEmitter = OutputEmitter;
var _EmittedLine = function() {
function _EmittedLine(indent) {
this.indent = indent;
this.parts = [];
}
return _EmittedLine;
}();
var EmitterVisitorContext = function() {
function EmitterVisitorContext(_exportedVars, _indent) {
this._exportedVars = _exportedVars;
this._indent = _indent;
this._classes = [];
this._lines = [ new _EmittedLine(_indent) ];
}
EmitterVisitorContext.createRoot = function(exportedVars) {
return new EmitterVisitorContext(exportedVars, 0);
};
Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", {
get: function() {
return this._lines[this._lines.length - 1];
},
enumerable: true,
configurable: true
});
EmitterVisitorContext.prototype.isExportedVar = function(varName) {
return this._exportedVars.indexOf(varName) !== -1;
};
EmitterVisitorContext.prototype.println = function(lastPart) {
if (lastPart === void 0) {
lastPart = "";
}
this.print(lastPart, true);
};
EmitterVisitorContext.prototype.lineIsEmpty = function() {
return this._currentLine.parts.length === 0;
};
EmitterVisitorContext.prototype.print = function(part, newLine) {
if (newLine === void 0) {
newLine = false;
}
if (part.length > 0) {
this._currentLine.parts.push(part);
}
if (newLine) {
this._lines.push(new _EmittedLine(this._indent));
}
};
EmitterVisitorContext.prototype.removeEmptyLastLine = function() {
if (this.lineIsEmpty()) {
this._lines.pop();
}
};
EmitterVisitorContext.prototype.incIndent = function() {
this._indent++;
this._currentLine.indent = this._indent;
};
EmitterVisitorContext.prototype.decIndent = function() {
this._indent--;
this._currentLine.indent = this._indent;
};
EmitterVisitorContext.prototype.pushClass = function(clazz) {
this._classes.push(clazz);
};
EmitterVisitorContext.prototype.popClass = function() {
return this._classes.pop();
};
Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", {
get: function() {
return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
},
enumerable: true,
configurable: true
});
EmitterVisitorContext.prototype.toSource = function() {
var lines = this._lines;
if (lines[lines.length - 1].parts.length === 0) {
lines = lines.slice(0, lines.length - 1);
}
return lines.map(function(line) {
if (line.parts.length > 0) {
return _createIndent(line.indent) + line.parts.join("");
} else {
return "";
}
}).join("\n");
};
return EmitterVisitorContext;
}();
exports.EmitterVisitorContext = EmitterVisitorContext;
var AbstractEmitterVisitor = function() {
function AbstractEmitterVisitor(_escapeDollarInStrings) {
this._escapeDollarInStrings = _escapeDollarInStrings;
}
AbstractEmitterVisitor.prototype.visitExpressionStmt = function(stmt, ctx) {
stmt.expr.visitExpression(this, ctx);
ctx.println(";");
return null;
};
AbstractEmitterVisitor.prototype.visitReturnStmt = function(stmt, ctx) {
ctx.print("return ");
stmt.value.visitExpression(this, ctx);
ctx.println(";");
return null;
};
AbstractEmitterVisitor.prototype.visitIfStmt = function(stmt, ctx) {
ctx.print("if (");
stmt.condition.visitExpression(this, ctx);
ctx.print(") {");
var hasElseCase = lang_1.isPresent(stmt.falseCase) && stmt.falseCase.length > 0;
if (stmt.trueCase.length <= 1 && !hasElseCase) {
ctx.print(" ");
this.visitAllStatements(stmt.trueCase, ctx);
ctx.removeEmptyLastLine();
ctx.print(" ");
} else {
ctx.println();
ctx.incIndent();
this.visitAllStatements(stmt.trueCase, ctx);
ctx.decIndent();
if (hasElseCase) {
ctx.println("} else {");
ctx.incIndent();
this.visitAllStatements(stmt.falseCase, ctx);
ctx.decIndent();
}
}
ctx.println("}");
return null;
};
AbstractEmitterVisitor.prototype.visitThrowStmt = function(stmt, ctx) {
ctx.print("throw ");
stmt.error.visitExpression(this, ctx);
ctx.println(";");
return null;
};
AbstractEmitterVisitor.prototype.visitCommentStmt = function(stmt, ctx) {
var lines = stmt.comment.split("\n");
lines.forEach(function(line) {
ctx.println("// " + line);
});
return null;
};
AbstractEmitterVisitor.prototype.visitWriteVarExpr = function(expr, ctx) {
var lineWasEmpty = ctx.lineIsEmpty();
if (!lineWasEmpty) {
ctx.print("(");
}
ctx.print(expr.name + " = ");
expr.value.visitExpression(this, ctx);
if (!lineWasEmpty) {
ctx.print(")");
}
return null;
};
AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function(expr, ctx) {
var lineWasEmpty = ctx.lineIsEmpty();
if (!lineWasEmpty) {
ctx.print("(");
}
expr.receiver.visitExpression(this, ctx);
ctx.print("[");
expr.index.visitExpression(this, ctx);
ctx.print("] = ");
expr.value.visitExpression(this, ctx);
if (!lineWasEmpty) {
ctx.print(")");
}
return null;
};
AbstractEmitterVisitor.prototype.visitWritePropExpr = function(expr, ctx) {
var lineWasEmpty = ctx.lineIsEmpty();
if (!lineWasEmpty) {
ctx.print("(");
}
expr.receiver.visitExpression(this, ctx);
ctx.print("." + expr.name + " = ");
expr.value.visitExpression(this, ctx);
if (!lineWasEmpty) {
ctx.print(")");
}
return null;
};
AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function(expr, ctx) {
expr.receiver.visitExpression(this, ctx);
var name = expr.name;
if (lang_1.isPresent(expr.builtin)) {
name = this.getBuiltinMethodName(expr.builtin);
if (lang_1.isBlank(name)) {
return null;
}
}
ctx.print("." + name + "(");
this.visitAllExpressions(expr.args, ctx, ",");
ctx.print(")");
return null;
};
AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function(expr, ctx) {
expr.fn.visitExpression(this, ctx);
ctx.print("(");
this.visitAllExpressions(expr.args, ctx, ",");
ctx.print(")");
return null;
};
AbstractEmitterVisitor.prototype.visitReadVarExpr = function(ast, ctx) {
var varName = ast.name;
if (lang_1.isPresent(ast.builtin)) {
switch (ast.builtin) {
case o.BuiltinVar.Super:
varName = "super";
break;

case o.BuiltinVar.This:
varName = "this";
break;

case o.BuiltinVar.CatchError:
varName = exports.CATCH_ERROR_VAR.name;
break;

case o.BuiltinVar.CatchStack:
varName = exports.CATCH_STACK_VAR.name;
break;

default:
throw new exceptions_1.BaseException("Unknown builtin variable " + ast.builtin);
}
}
ctx.print(varName);
return null;
};
AbstractEmitterVisitor.prototype.visitInstantiateExpr = function(ast, ctx) {
ctx.print("new ");
ast.classExpr.visitExpression(this, ctx);
ctx.print("(");
this.visitAllExpressions(ast.args, ctx, ",");
ctx.print(")");
return null;
};
AbstractEmitterVisitor.prototype.visitLiteralExpr = function(ast, ctx) {
var value = ast.value;
if (lang_1.isString(value)) {
ctx.print(escapeSingleQuoteString(value, this._escapeDollarInStrings));
} else if (lang_1.isBlank(value)) {
ctx.print("null");
} else {
ctx.print("" + value);
}
return null;
};
AbstractEmitterVisitor.prototype.visitConditionalExpr = function(ast, ctx) {
ctx.print("(");
ast.condition.visitExpression(this, ctx);
ctx.print("? ");
ast.trueCase.visitExpression(this, ctx);
ctx.print(": ");
ast.falseCase.visitExpression(this, ctx);
ctx.print(")");
return null;
};
AbstractEmitterVisitor.prototype.visitNotExpr = function(ast, ctx) {
ctx.print("!");
ast.condition.visitExpression(this, ctx);
return null;
};
AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function(ast, ctx) {
var opStr;
switch (ast.operator) {
case o.BinaryOperator.Equals:
opStr = "==";
break;

case o.BinaryOperator.Identical:
opStr = "===";
break;

case o.BinaryOperator.NotEquals:
opStr = "!=";
break;

case o.BinaryOperator.NotIdentical:
opStr = "!==";
break;

case o.BinaryOperator.And:
opStr = "&&";
break;

case o.BinaryOperator.Or:
opStr = "||";
break;

case o.BinaryOperator.Plus:
opStr = "+";
break;

case o.BinaryOperator.Minus:
opStr = "-";
break;

case o.BinaryOperator.Divide:
opStr = "/";
break;

case o.BinaryOperator.Multiply:
opStr = "*";
break;

case o.BinaryOperator.Modulo:
opStr = "%";
break;

case o.BinaryOperator.Lower:
opStr = "<";
break;

case o.BinaryOperator.LowerEquals:
opStr = "<=";
break;

case o.BinaryOperator.Bigger:
opStr = ">";
break;

case o.BinaryOperator.BiggerEquals:
opStr = ">=";
break;

default:
throw new exceptions_1.BaseException("Unknown operator " + ast.operator);
}
ctx.print("(");
ast.lhs.visitExpression(this, ctx);
ctx.print(" " + opStr + " ");
ast.rhs.visitExpression(this, ctx);
ctx.print(")");
return null;
};
AbstractEmitterVisitor.prototype.visitReadPropExpr = function(ast, ctx) {
ast.receiver.visitExpression(this, ctx);
ctx.print(".");
ctx.print(ast.name);
return null;
};
AbstractEmitterVisitor.prototype.visitReadKeyExpr = function(ast, ctx) {
ast.receiver.visitExpression(this, ctx);
ctx.print("[");
ast.index.visitExpression(this, ctx);
ctx.print("]");
return null;
};
AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function(ast, ctx) {
var useNewLine = ast.entries.length > 1;
ctx.print("[", useNewLine);
ctx.incIndent();
this.visitAllExpressions(ast.entries, ctx, ",", useNewLine);
ctx.decIndent();
ctx.print("]", useNewLine);
return null;
};
AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function(ast, ctx) {
var _this = this;
var useNewLine = ast.entries.length > 1;
ctx.print("{", useNewLine);
ctx.incIndent();
this.visitAllObjects(function(entry) {
ctx.print(escapeSingleQuoteString(entry[0], _this._escapeDollarInStrings) + ": ");
entry[1].visitExpression(_this, ctx);
}, ast.entries, ctx, ",", useNewLine);
ctx.decIndent();
ctx.print("}", useNewLine);
return null;
};
AbstractEmitterVisitor.prototype.visitAllExpressions = function(expressions, ctx, separator, newLine) {
var _this = this;
if (newLine === void 0) {
newLine = false;
}
this.visitAllObjects(function(expr) {
return expr.visitExpression(_this, ctx);
}, expressions, ctx, separator, newLine);
};
AbstractEmitterVisitor.prototype.visitAllObjects = function(handler, expressions, ctx, separator, newLine) {
if (newLine === void 0) {
newLine = false;
}
for (var i = 0; i < expressions.length; i++) {
if (i > 0) {
ctx.print(separator, newLine);
}
handler(expressions[i]);
}
if (newLine) {
ctx.println();
}
};
AbstractEmitterVisitor.prototype.visitAllStatements = function(statements, ctx) {
var _this = this;
statements.forEach(function(stmt) {
return stmt.visitStatement(_this, ctx);
});
};
return AbstractEmitterVisitor;
}();
exports.AbstractEmitterVisitor = AbstractEmitterVisitor;
function escapeSingleQuoteString(input, escapeDollar) {
if (lang_1.isBlank(input)) {
return null;
}
var body = lang_1.StringWrapper.replaceAllMapped(input, _SINGLE_QUOTE_ESCAPE_STRING_RE, function(match) {
if (match[0] == "$") {
return escapeDollar ? "\\$" : "$";
} else if (match[0] == "\n") {
return "\\n";
} else if (match[0] == "\r") {
return "\\r";
} else {
return "\\" + match[0];
}
});
return "'" + body + "'";
}
exports.escapeSingleQuoteString = escapeSingleQuoteString;
function _createIndent(count) {
var res = "";
for (var i = 0; i < count; i++) {
res += "  ";
}
return res;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(281);
var exceptions_1 = __webpack_require__(286);
var o = __webpack_require__(307);
var abstract_emitter_1 = __webpack_require__(337);
var AbstractJsEmitterVisitor = function(_super) {
__extends(AbstractJsEmitterVisitor, _super);
function AbstractJsEmitterVisitor() {
_super.call(this, false);
}
AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {
var _this = this;
ctx.pushClass(stmt);
this._visitClassConstructor(stmt, ctx);
if (lang_1.isPresent(stmt.parent)) {
ctx.print(stmt.name + ".prototype = Object.create(");
stmt.parent.visitExpression(this, ctx);
ctx.println(".prototype);");
}
stmt.getters.forEach(function(getter) {
return _this._visitClassGetter(stmt, getter, ctx);
});
stmt.methods.forEach(function(method) {
return _this._visitClassMethod(stmt, method, ctx);
});
ctx.popClass();
return null;
};
AbstractJsEmitterVisitor.prototype._visitClassConstructor = function(stmt, ctx) {
ctx.print("function " + stmt.name + "(");
if (lang_1.isPresent(stmt.constructorMethod)) {
this._visitParams(stmt.constructorMethod.params, ctx);
}
ctx.println(") {");
ctx.incIndent();
if (lang_1.isPresent(stmt.constructorMethod)) {
if (stmt.constructorMethod.body.length > 0) {
ctx.println("var self = this;");
this.visitAllStatements(stmt.constructorMethod.body, ctx);
}
}
ctx.decIndent();
ctx.println("}");
};
AbstractJsEmitterVisitor.prototype._visitClassGetter = function(stmt, getter, ctx) {
ctx.println("Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {");
ctx.incIndent();
if (getter.body.length > 0) {
ctx.println("var self = this;");
this.visitAllStatements(getter.body, ctx);
}
ctx.decIndent();
ctx.println("}});");
};
AbstractJsEmitterVisitor.prototype._visitClassMethod = function(stmt, method, ctx) {
ctx.print(stmt.name + ".prototype." + method.name + " = function(");
this._visitParams(method.params, ctx);
ctx.println(") {");
ctx.incIndent();
if (method.body.length > 0) {
ctx.println("var self = this;");
this.visitAllStatements(method.body, ctx);
}
ctx.decIndent();
ctx.println("};");
};
AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function(ast, ctx) {
if (ast.builtin === o.BuiltinVar.This) {
ctx.print("self");
} else if (ast.builtin === o.BuiltinVar.Super) {
throw new exceptions_1.BaseException("'super' needs to be handled at a parent ast node, not at the variable level!");
} else {
_super.prototype.visitReadVarExpr.call(this, ast, ctx);
}
return null;
};
AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {
ctx.print("var " + stmt.name + " = ");
stmt.value.visitExpression(this, ctx);
ctx.println(";");
return null;
};
AbstractJsEmitterVisitor.prototype.visitCastExpr = function(ast, ctx) {
ast.value.visitExpression(this, ctx);
return null;
};
AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function(expr, ctx) {
var fnExpr = expr.fn;
if (fnExpr instanceof o.ReadVarExpr && fnExpr.builtin === o.BuiltinVar.Super) {
ctx.currentClass.parent.visitExpression(this, ctx);
ctx.print(".call(this");
if (expr.args.length > 0) {
ctx.print(", ");
this.visitAllExpressions(expr.args, ctx, ",");
}
ctx.print(")");
} else {
_super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);
}
return null;
};
AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {
ctx.print("function(");
this._visitParams(ast.params, ctx);
ctx.println(") {");
ctx.incIndent();
this.visitAllStatements(ast.statements, ctx);
ctx.decIndent();
ctx.print("}");
return null;
};
AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
ctx.print("function " + stmt.name + "(");
this._visitParams(stmt.params, ctx);
ctx.println(") {");
ctx.incIndent();
this.visitAllStatements(stmt.statements, ctx);
ctx.decIndent();
ctx.println("}");
return null;
};
AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {
ctx.println("try {");
ctx.incIndent();
this.visitAllStatements(stmt.bodyStmts, ctx);
ctx.decIndent();
ctx.println("} catch (" + abstract_emitter_1.CATCH_ERROR_VAR.name + ") {");
ctx.incIndent();
var catchStmts = [ abstract_emitter_1.CATCH_STACK_VAR.set(abstract_emitter_1.CATCH_ERROR_VAR.prop("stack")).toDeclStmt(null, [ o.StmtModifier.Final ]) ].concat(stmt.catchStmts);
this.visitAllStatements(catchStmts, ctx);
ctx.decIndent();
ctx.println("}");
return null;
};
AbstractJsEmitterVisitor.prototype._visitParams = function(params, ctx) {
this.visitAllObjects(function(param) {
return ctx.print(param.name);
}, params, ctx, ",");
};
AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function(method) {
var name;
switch (method) {
case o.BuiltinMethod.ConcatArray:
name = "concat";
break;

case o.BuiltinMethod.SubscribeObservable:
name = "subscribe";
break;

case o.BuiltinMethod.bind:
name = "bind";
break;

default:
throw new exceptions_1.BaseException("Unknown builtin method: " + method);
}
return name;
};
return AbstractJsEmitterVisitor;
}(abstract_emitter_1.AbstractEmitterVisitor);
exports.AbstractJsEmitterVisitor = AbstractJsEmitterVisitor;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(281);
var async_1 = __webpack_require__(309);
var exceptions_1 = __webpack_require__(286);
var collection_1 = __webpack_require__(285);
var o = __webpack_require__(307);
var dart_emitter_1 = __webpack_require__(340);
var ts_emitter_1 = __webpack_require__(341);
function interpretStatements(statements, resultVar, instanceFactory) {
var stmtsWithReturn = statements.concat([ new o.ReturnStatement(o.variable(resultVar)) ]);
var ctx = new _ExecutionContext(null, null, null, null, new Map(), new Map(), new Map(), new Map(), instanceFactory);
var visitor = new StatementInterpreter();
var result = visitor.visitAllStatements(stmtsWithReturn, ctx);
return lang_1.isPresent(result) ? result.value : null;
}
exports.interpretStatements = interpretStatements;
var DynamicInstance = function() {
function DynamicInstance() {}
Object.defineProperty(DynamicInstance.prototype, "props", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(DynamicInstance.prototype, "getters", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(DynamicInstance.prototype, "methods", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(DynamicInstance.prototype, "clazz", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return DynamicInstance;
}();
exports.DynamicInstance = DynamicInstance;
function isDynamicInstance(instance) {
if (lang_1.IS_DART) {
return instance instanceof DynamicInstance;
} else {
return lang_1.isPresent(instance) && lang_1.isPresent(instance.props) && lang_1.isPresent(instance.getters) && lang_1.isPresent(instance.methods);
}
}
function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
var childCtx = ctx.createChildWihtLocalVars();
for (var i = 0; i < varNames.length; i++) {
childCtx.vars.set(varNames[i], varValues[i]);
}
var result = visitor.visitAllStatements(statements, childCtx);
return lang_1.isPresent(result) ? result.value : null;
}
var _ExecutionContext = function() {
function _ExecutionContext(parent, superClass, superInstance, className, vars, props, getters, methods, instanceFactory) {
this.parent = parent;
this.superClass = superClass;
this.superInstance = superInstance;
this.className = className;
this.vars = vars;
this.props = props;
this.getters = getters;
this.methods = methods;
this.instanceFactory = instanceFactory;
}
_ExecutionContext.prototype.createChildWihtLocalVars = function() {
return new _ExecutionContext(this, this.superClass, this.superInstance, this.className, new Map(), this.props, this.getters, this.methods, this.instanceFactory);
};
return _ExecutionContext;
}();
var ReturnValue = function() {
function ReturnValue(value) {
this.value = value;
}
return ReturnValue;
}();
var _DynamicClass = function() {
function _DynamicClass(_classStmt, _ctx, _visitor) {
this._classStmt = _classStmt;
this._ctx = _ctx;
this._visitor = _visitor;
}
_DynamicClass.prototype.instantiate = function(args) {
var _this = this;
var props = new Map();
var getters = new Map();
var methods = new Map();
var superClass = this._classStmt.parent.visitExpression(this._visitor, this._ctx);
var instanceCtx = new _ExecutionContext(this._ctx, superClass, null, this._classStmt.name, this._ctx.vars, props, getters, methods, this._ctx.instanceFactory);
this._classStmt.fields.forEach(function(field) {
props.set(field.name, null);
});
this._classStmt.getters.forEach(function(getter) {
getters.set(getter.name, function() {
return _executeFunctionStatements([], [], getter.body, instanceCtx, _this._visitor);
});
});
this._classStmt.methods.forEach(function(method) {
var paramNames = method.params.map(function(param) {
return param.name;
});
methods.set(method.name, _declareFn(paramNames, method.body, instanceCtx, _this._visitor));
});
var ctorParamNames = this._classStmt.constructorMethod.params.map(function(param) {
return param.name;
});
_executeFunctionStatements(ctorParamNames, args, this._classStmt.constructorMethod.body, instanceCtx, this._visitor);
return instanceCtx.superInstance;
};
_DynamicClass.prototype.debugAst = function() {
return this._visitor.debugAst(this._classStmt);
};
return _DynamicClass;
}();
var StatementInterpreter = function() {
function StatementInterpreter() {}
StatementInterpreter.prototype.debugAst = function(ast) {
return lang_1.IS_DART ? dart_emitter_1.debugOutputAstAsDart(ast) : ts_emitter_1.debugOutputAstAsTypeScript(ast);
};
StatementInterpreter.prototype.visitDeclareVarStmt = function(stmt, ctx) {
ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));
return null;
};
StatementInterpreter.prototype.visitWriteVarExpr = function(expr, ctx) {
var value = expr.value.visitExpression(this, ctx);
var currCtx = ctx;
while (currCtx != null) {
if (currCtx.vars.has(expr.name)) {
currCtx.vars.set(expr.name, value);
return value;
}
currCtx = currCtx.parent;
}
throw new exceptions_1.BaseException("Not declared variable " + expr.name);
};
StatementInterpreter.prototype.visitReadVarExpr = function(ast, ctx) {
var varName = ast.name;
if (lang_1.isPresent(ast.builtin)) {
switch (ast.builtin) {
case o.BuiltinVar.Super:
case o.BuiltinVar.This:
return ctx.superInstance;

case o.BuiltinVar.CatchError:
varName = CATCH_ERROR_VAR;
break;

case o.BuiltinVar.CatchStack:
varName = CATCH_STACK_VAR;
break;

default:
throw new exceptions_1.BaseException("Unknown builtin variable " + ast.builtin);
}
}
var currCtx = ctx;
while (currCtx != null) {
if (currCtx.vars.has(varName)) {
return currCtx.vars.get(varName);
}
currCtx = currCtx.parent;
}
throw new exceptions_1.BaseException("Not declared variable " + varName);
};
StatementInterpreter.prototype.visitWriteKeyExpr = function(expr, ctx) {
var receiver = expr.receiver.visitExpression(this, ctx);
var index = expr.index.visitExpression(this, ctx);
var value = expr.value.visitExpression(this, ctx);
receiver[index] = value;
return value;
};
StatementInterpreter.prototype.visitWritePropExpr = function(expr, ctx) {
var receiver = expr.receiver.visitExpression(this, ctx);
var value = expr.value.visitExpression(this, ctx);
if (isDynamicInstance(receiver)) {
var di = receiver;
if (di.props.has(expr.name)) {
di.props.set(expr.name, value);
} else {
core_1.reflector.setter(expr.name)(receiver, value);
}
} else {
core_1.reflector.setter(expr.name)(receiver, value);
}
return value;
};
StatementInterpreter.prototype.visitInvokeMethodExpr = function(expr, ctx) {
var receiver = expr.receiver.visitExpression(this, ctx);
var args = this.visitAllExpressions(expr.args, ctx);
var result;
if (lang_1.isPresent(expr.builtin)) {
switch (expr.builtin) {
case o.BuiltinMethod.ConcatArray:
result = collection_1.ListWrapper.concat(receiver, args[0]);
break;

case o.BuiltinMethod.SubscribeObservable:
result = async_1.ObservableWrapper.subscribe(receiver, args[0]);
break;

case o.BuiltinMethod.bind:
if (lang_1.IS_DART) {
result = receiver;
} else {
result = receiver.bind(args[0]);
}
break;

default:
throw new exceptions_1.BaseException("Unknown builtin method " + expr.builtin);
}
} else if (isDynamicInstance(receiver)) {
var di = receiver;
if (di.methods.has(expr.name)) {
result = lang_1.FunctionWrapper.apply(di.methods.get(expr.name), args);
} else {
result = core_1.reflector.method(expr.name)(receiver, args);
}
} else {
result = core_1.reflector.method(expr.name)(receiver, args);
}
return result;
};
StatementInterpreter.prototype.visitInvokeFunctionExpr = function(stmt, ctx) {
var args = this.visitAllExpressions(stmt.args, ctx);
var fnExpr = stmt.fn;
if (fnExpr instanceof o.ReadVarExpr && fnExpr.builtin === o.BuiltinVar.Super) {
ctx.superInstance = ctx.instanceFactory.createInstance(ctx.superClass, ctx.className, args, ctx.props, ctx.getters, ctx.methods);
ctx.parent.superInstance = ctx.superInstance;
return null;
} else {
var fn = stmt.fn.visitExpression(this, ctx);
return lang_1.FunctionWrapper.apply(fn, args);
}
};
StatementInterpreter.prototype.visitReturnStmt = function(stmt, ctx) {
return new ReturnValue(stmt.value.visitExpression(this, ctx));
};
StatementInterpreter.prototype.visitDeclareClassStmt = function(stmt, ctx) {
var clazz = new _DynamicClass(stmt, ctx, this);
ctx.vars.set(stmt.name, clazz);
return null;
};
StatementInterpreter.prototype.visitExpressionStmt = function(stmt, ctx) {
return stmt.expr.visitExpression(this, ctx);
};
StatementInterpreter.prototype.visitIfStmt = function(stmt, ctx) {
var condition = stmt.condition.visitExpression(this, ctx);
if (condition) {
return this.visitAllStatements(stmt.trueCase, ctx);
} else if (lang_1.isPresent(stmt.falseCase)) {
return this.visitAllStatements(stmt.falseCase, ctx);
}
return null;
};
StatementInterpreter.prototype.visitTryCatchStmt = function(stmt, ctx) {
try {
return this.visitAllStatements(stmt.bodyStmts, ctx);
} catch (e) {
var childCtx = ctx.createChildWihtLocalVars();
childCtx.vars.set(CATCH_ERROR_VAR, e);
childCtx.vars.set(CATCH_STACK_VAR, e.stack);
return this.visitAllStatements(stmt.catchStmts, childCtx);
}
};
StatementInterpreter.prototype.visitThrowStmt = function(stmt, ctx) {
throw stmt.error.visitExpression(this, ctx);
};
StatementInterpreter.prototype.visitCommentStmt = function(stmt, context) {
return null;
};
StatementInterpreter.prototype.visitInstantiateExpr = function(ast, ctx) {
var args = this.visitAllExpressions(ast.args, ctx);
var clazz = ast.classExpr.visitExpression(this, ctx);
if (clazz instanceof _DynamicClass) {
return clazz.instantiate(args);
} else {
return lang_1.FunctionWrapper.apply(core_1.reflector.factory(clazz), args);
}
};
StatementInterpreter.prototype.visitLiteralExpr = function(ast, ctx) {
return ast.value;
};
StatementInterpreter.prototype.visitExternalExpr = function(ast, ctx) {
return ast.value.runtime;
};
StatementInterpreter.prototype.visitConditionalExpr = function(ast, ctx) {
if (ast.condition.visitExpression(this, ctx)) {
return ast.trueCase.visitExpression(this, ctx);
} else if (lang_1.isPresent(ast.falseCase)) {
return ast.falseCase.visitExpression(this, ctx);
}
return null;
};
StatementInterpreter.prototype.visitNotExpr = function(ast, ctx) {
return !ast.condition.visitExpression(this, ctx);
};
StatementInterpreter.prototype.visitCastExpr = function(ast, ctx) {
return ast.value.visitExpression(this, ctx);
};
StatementInterpreter.prototype.visitFunctionExpr = function(ast, ctx) {
var paramNames = ast.params.map(function(param) {
return param.name;
});
return _declareFn(paramNames, ast.statements, ctx, this);
};
StatementInterpreter.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
var paramNames = stmt.params.map(function(param) {
return param.name;
});
ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));
return null;
};
StatementInterpreter.prototype.visitBinaryOperatorExpr = function(ast, ctx) {
var _this = this;
var lhs = function() {
return ast.lhs.visitExpression(_this, ctx);
};
var rhs = function() {
return ast.rhs.visitExpression(_this, ctx);
};
switch (ast.operator) {
case o.BinaryOperator.Equals:
return lhs() == rhs();

case o.BinaryOperator.Identical:
return lhs() === rhs();

case o.BinaryOperator.NotEquals:
return lhs() != rhs();

case o.BinaryOperator.NotIdentical:
return lhs() !== rhs();

case o.BinaryOperator.And:
return lhs() && rhs();

case o.BinaryOperator.Or:
return lhs() || rhs();

case o.BinaryOperator.Plus:
return lhs() + rhs();

case o.BinaryOperator.Minus:
return lhs() - rhs();

case o.BinaryOperator.Divide:
return lhs() / rhs();

case o.BinaryOperator.Multiply:
return lhs() * rhs();

case o.BinaryOperator.Modulo:
return lhs() % rhs();

case o.BinaryOperator.Lower:
return lhs() < rhs();

case o.BinaryOperator.LowerEquals:
return lhs() <= rhs();

case o.BinaryOperator.Bigger:
return lhs() > rhs();

case o.BinaryOperator.BiggerEquals:
return lhs() >= rhs();

default:
throw new exceptions_1.BaseException("Unknown operator " + ast.operator);
}
};
StatementInterpreter.prototype.visitReadPropExpr = function(ast, ctx) {
var result;
var receiver = ast.receiver.visitExpression(this, ctx);
if (isDynamicInstance(receiver)) {
var di = receiver;
if (di.props.has(ast.name)) {
result = di.props.get(ast.name);
} else if (di.getters.has(ast.name)) {
result = di.getters.get(ast.name)();
} else if (di.methods.has(ast.name)) {
result = di.methods.get(ast.name);
} else {
result = core_1.reflector.getter(ast.name)(receiver);
}
} else {
result = core_1.reflector.getter(ast.name)(receiver);
}
return result;
};
StatementInterpreter.prototype.visitReadKeyExpr = function(ast, ctx) {
var receiver = ast.receiver.visitExpression(this, ctx);
var prop = ast.index.visitExpression(this, ctx);
return receiver[prop];
};
StatementInterpreter.prototype.visitLiteralArrayExpr = function(ast, ctx) {
return this.visitAllExpressions(ast.entries, ctx);
};
StatementInterpreter.prototype.visitLiteralMapExpr = function(ast, ctx) {
var _this = this;
var result = {};
ast.entries.forEach(function(entry) {
return result[entry[0]] = entry[1].visitExpression(_this, ctx);
});
return result;
};
StatementInterpreter.prototype.visitAllExpressions = function(expressions, ctx) {
var _this = this;
return expressions.map(function(expr) {
return expr.visitExpression(_this, ctx);
});
};
StatementInterpreter.prototype.visitAllStatements = function(statements, ctx) {
for (var i = 0; i < statements.length; i++) {
var stmt = statements[i];
var val = stmt.visitStatement(this, ctx);
if (val instanceof ReturnValue) {
return val;
}
}
return null;
};
return StatementInterpreter;
}();
function _declareFn(varNames, statements, ctx, visitor) {
switch (varNames.length) {
case 0:
return function() {
return _executeFunctionStatements(varNames, [], statements, ctx, visitor);
};

case 1:
return function(d0) {
return _executeFunctionStatements(varNames, [ d0 ], statements, ctx, visitor);
};

case 2:
return function(d0, d1) {
return _executeFunctionStatements(varNames, [ d0, d1 ], statements, ctx, visitor);
};

case 3:
return function(d0, d1, d2) {
return _executeFunctionStatements(varNames, [ d0, d1, d2 ], statements, ctx, visitor);
};

case 4:
return function(d0, d1, d2, d3) {
return _executeFunctionStatements(varNames, [ d0, d1, d2, d3 ], statements, ctx, visitor);
};

case 5:
return function(d0, d1, d2, d3, d4) {
return _executeFunctionStatements(varNames, [ d0, d1, d2, d3, d4 ], statements, ctx, visitor);
};

case 6:
return function(d0, d1, d2, d3, d4, d5) {
return _executeFunctionStatements(varNames, [ d0, d1, d2, d3, d4, d5 ], statements, ctx, visitor);
};

case 7:
return function(d0, d1, d2, d3, d4, d5, d6) {
return _executeFunctionStatements(varNames, [ d0, d1, d2, d3, d4, d5, d6 ], statements, ctx, visitor);
};

case 8:
return function(d0, d1, d2, d3, d4, d5, d6, d7) {
return _executeFunctionStatements(varNames, [ d0, d1, d2, d3, d4, d5, d6, d7 ], statements, ctx, visitor);
};

case 9:
return function(d0, d1, d2, d3, d4, d5, d6, d7, d8) {
return _executeFunctionStatements(varNames, [ d0, d1, d2, d3, d4, d5, d6, d7, d8 ], statements, ctx, visitor);
};

case 10:
return function(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9) {
return _executeFunctionStatements(varNames, [ d0, d1, d2, d3, d4, d5, d6, d7, d8, d9 ], statements, ctx, visitor);
};

default:
throw new exceptions_1.BaseException("Declaring functions with more than 10 arguments is not supported right now");
}
}
var CATCH_ERROR_VAR = "error";
var CATCH_STACK_VAR = "stack";
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(281);
var exceptions_1 = __webpack_require__(286);
var o = __webpack_require__(307);
var abstract_emitter_1 = __webpack_require__(337);
var _debugModuleUrl = "asset://debug/lib";
function debugOutputAstAsDart(ast) {
var converter = new _DartEmitterVisitor(_debugModuleUrl);
var ctx = abstract_emitter_1.EmitterVisitorContext.createRoot([]);
var asts;
if (lang_1.isArray(ast)) {
asts = ast;
} else {
asts = [ ast ];
}
asts.forEach(function(ast) {
if (ast instanceof o.Statement) {
ast.visitStatement(converter, ctx);
} else if (ast instanceof o.Expression) {
ast.visitExpression(converter, ctx);
} else if (ast instanceof o.Type) {
ast.visitType(converter, ctx);
} else {
throw new exceptions_1.BaseException("Don't know how to print debug info for " + ast);
}
});
return ctx.toSource();
}
exports.debugOutputAstAsDart = debugOutputAstAsDart;
var DartEmitter = function() {
function DartEmitter(_importGenerator) {
this._importGenerator = _importGenerator;
}
DartEmitter.prototype.emitStatements = function(moduleUrl, stmts, exportedVars) {
var _this = this;
var srcParts = [];
var converter = new _DartEmitterVisitor(moduleUrl);
var ctx = abstract_emitter_1.EmitterVisitorContext.createRoot(exportedVars);
converter.visitAllStatements(stmts, ctx);
converter.importsWithPrefixes.forEach(function(prefix, importedModuleUrl) {
srcParts.push("import '" + _this._importGenerator.getImportPath(moduleUrl, importedModuleUrl) + "' as " + prefix + ";");
});
srcParts.push(ctx.toSource());
return srcParts.join("\n");
};
return DartEmitter;
}();
exports.DartEmitter = DartEmitter;
var _DartEmitterVisitor = function(_super) {
__extends(_DartEmitterVisitor, _super);
function _DartEmitterVisitor(_moduleUrl) {
_super.call(this, true);
this._moduleUrl = _moduleUrl;
this.importsWithPrefixes = new Map();
}
_DartEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {
this._visitIdentifier(ast.value, ast.typeParams, ctx);
return null;
};
_DartEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {
if (stmt.hasModifier(o.StmtModifier.Final)) {
if (isConstType(stmt.type)) {
ctx.print("const ");
} else {
ctx.print("final ");
}
} else if (lang_1.isBlank(stmt.type)) {
ctx.print("var ");
}
if (lang_1.isPresent(stmt.type)) {
stmt.type.visitType(this, ctx);
ctx.print(" ");
}
ctx.print(stmt.name + " = ");
stmt.value.visitExpression(this, ctx);
ctx.println(";");
return null;
};
_DartEmitterVisitor.prototype.visitCastExpr = function(ast, ctx) {
ctx.print("(");
ast.value.visitExpression(this, ctx);
ctx.print(" as ");
ast.type.visitType(this, ctx);
ctx.print(")");
return null;
};
_DartEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {
var _this = this;
ctx.pushClass(stmt);
ctx.print("class " + stmt.name);
if (lang_1.isPresent(stmt.parent)) {
ctx.print(" extends ");
stmt.parent.visitExpression(this, ctx);
}
ctx.println(" {");
ctx.incIndent();
stmt.fields.forEach(function(field) {
return _this._visitClassField(field, ctx);
});
if (lang_1.isPresent(stmt.constructorMethod)) {
this._visitClassConstructor(stmt, ctx);
}
stmt.getters.forEach(function(getter) {
return _this._visitClassGetter(getter, ctx);
});
stmt.methods.forEach(function(method) {
return _this._visitClassMethod(method, ctx);
});
ctx.decIndent();
ctx.println("}");
ctx.popClass();
return null;
};
_DartEmitterVisitor.prototype._visitClassField = function(field, ctx) {
if (field.hasModifier(o.StmtModifier.Final)) {
ctx.print("final ");
} else if (lang_1.isBlank(field.type)) {
ctx.print("var ");
}
if (lang_1.isPresent(field.type)) {
field.type.visitType(this, ctx);
ctx.print(" ");
}
ctx.println(field.name + ";");
};
_DartEmitterVisitor.prototype._visitClassGetter = function(getter, ctx) {
if (lang_1.isPresent(getter.type)) {
getter.type.visitType(this, ctx);
ctx.print(" ");
}
ctx.println("get " + getter.name + " {");
ctx.incIndent();
this.visitAllStatements(getter.body, ctx);
ctx.decIndent();
ctx.println("}");
};
_DartEmitterVisitor.prototype._visitClassConstructor = function(stmt, ctx) {
ctx.print(stmt.name + "(");
this._visitParams(stmt.constructorMethod.params, ctx);
ctx.print(")");
var ctorStmts = stmt.constructorMethod.body;
var superCtorExpr = ctorStmts.length > 0 ? getSuperConstructorCallExpr(ctorStmts[0]) : null;
if (lang_1.isPresent(superCtorExpr)) {
ctx.print(": ");
superCtorExpr.visitExpression(this, ctx);
ctorStmts = ctorStmts.slice(1);
}
ctx.println(" {");
ctx.incIndent();
this.visitAllStatements(ctorStmts, ctx);
ctx.decIndent();
ctx.println("}");
};
_DartEmitterVisitor.prototype._visitClassMethod = function(method, ctx) {
if (lang_1.isPresent(method.type)) {
method.type.visitType(this, ctx);
} else {
ctx.print("void");
}
ctx.print(" " + method.name + "(");
this._visitParams(method.params, ctx);
ctx.println(") {");
ctx.incIndent();
this.visitAllStatements(method.body, ctx);
ctx.decIndent();
ctx.println("}");
};
_DartEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {
ctx.print("(");
this._visitParams(ast.params, ctx);
ctx.println(") {");
ctx.incIndent();
this.visitAllStatements(ast.statements, ctx);
ctx.decIndent();
ctx.print("}");
return null;
};
_DartEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
if (lang_1.isPresent(stmt.type)) {
stmt.type.visitType(this, ctx);
} else {
ctx.print("void");
}
ctx.print(" " + stmt.name + "(");
this._visitParams(stmt.params, ctx);
ctx.println(") {");
ctx.incIndent();
this.visitAllStatements(stmt.statements, ctx);
ctx.decIndent();
ctx.println("}");
return null;
};
_DartEmitterVisitor.prototype.getBuiltinMethodName = function(method) {
var name;
switch (method) {
case o.BuiltinMethod.ConcatArray:
name = ".addAll";
break;

case o.BuiltinMethod.SubscribeObservable:
name = "listen";
break;

case o.BuiltinMethod.bind:
name = null;
break;

default:
throw new exceptions_1.BaseException("Unknown builtin method: " + method);
}
return name;
};
_DartEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {
ctx.println("try {");
ctx.incIndent();
this.visitAllStatements(stmt.bodyStmts, ctx);
ctx.decIndent();
ctx.println("} catch (" + abstract_emitter_1.CATCH_ERROR_VAR.name + ", " + abstract_emitter_1.CATCH_STACK_VAR.name + ") {");
ctx.incIndent();
this.visitAllStatements(stmt.catchStmts, ctx);
ctx.decIndent();
ctx.println("}");
return null;
};
_DartEmitterVisitor.prototype.visitBinaryOperatorExpr = function(ast, ctx) {
switch (ast.operator) {
case o.BinaryOperator.Identical:
ctx.print("identical(");
ast.lhs.visitExpression(this, ctx);
ctx.print(", ");
ast.rhs.visitExpression(this, ctx);
ctx.print(")");
break;

case o.BinaryOperator.NotIdentical:
ctx.print("!identical(");
ast.lhs.visitExpression(this, ctx);
ctx.print(", ");
ast.rhs.visitExpression(this, ctx);
ctx.print(")");
break;

default:
_super.prototype.visitBinaryOperatorExpr.call(this, ast, ctx);
}
return null;
};
_DartEmitterVisitor.prototype.visitLiteralArrayExpr = function(ast, ctx) {
if (isConstType(ast.type)) {
ctx.print("const ");
}
return _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx);
};
_DartEmitterVisitor.prototype.visitLiteralMapExpr = function(ast, ctx) {
if (isConstType(ast.type)) {
ctx.print("const ");
}
if (lang_1.isPresent(ast.valueType)) {
ctx.print("<String, ");
ast.valueType.visitType(this, ctx);
ctx.print(">");
}
return _super.prototype.visitLiteralMapExpr.call(this, ast, ctx);
};
_DartEmitterVisitor.prototype.visitInstantiateExpr = function(ast, ctx) {
ctx.print(isConstType(ast.type) ? "const" : "new");
ctx.print(" ");
ast.classExpr.visitExpression(this, ctx);
ctx.print("(");
this.visitAllExpressions(ast.args, ctx, ",");
ctx.print(")");
return null;
};
_DartEmitterVisitor.prototype.visitBuiltintType = function(type, ctx) {
var typeStr;
switch (type.name) {
case o.BuiltinTypeName.Bool:
typeStr = "bool";
break;

case o.BuiltinTypeName.Dynamic:
typeStr = "dynamic";
break;

case o.BuiltinTypeName.Function:
typeStr = "Function";
break;

case o.BuiltinTypeName.Number:
typeStr = "num";
break;

case o.BuiltinTypeName.Int:
typeStr = "int";
break;

case o.BuiltinTypeName.String:
typeStr = "String";
break;

default:
throw new exceptions_1.BaseException("Unsupported builtin type " + type.name);
}
ctx.print(typeStr);
return null;
};
_DartEmitterVisitor.prototype.visitExternalType = function(ast, ctx) {
this._visitIdentifier(ast.value, ast.typeParams, ctx);
return null;
};
_DartEmitterVisitor.prototype.visitArrayType = function(type, ctx) {
ctx.print("List<");
if (lang_1.isPresent(type.of)) {
type.of.visitType(this, ctx);
} else {
ctx.print("dynamic");
}
ctx.print(">");
return null;
};
_DartEmitterVisitor.prototype.visitMapType = function(type, ctx) {
ctx.print("Map<String, ");
if (lang_1.isPresent(type.valueType)) {
type.valueType.visitType(this, ctx);
} else {
ctx.print("dynamic");
}
ctx.print(">");
return null;
};
_DartEmitterVisitor.prototype._visitParams = function(params, ctx) {
var _this = this;
this.visitAllObjects(function(param) {
if (lang_1.isPresent(param.type)) {
param.type.visitType(_this, ctx);
ctx.print(" ");
}
ctx.print(param.name);
}, params, ctx, ",");
};
_DartEmitterVisitor.prototype._visitIdentifier = function(value, typeParams, ctx) {
var _this = this;
if (lang_1.isBlank(value.name)) {
throw new exceptions_1.BaseException("Internal error: unknown identifier " + value);
}
if (lang_1.isPresent(value.moduleUrl) && value.moduleUrl != this._moduleUrl) {
var prefix = this.importsWithPrefixes.get(value.moduleUrl);
if (lang_1.isBlank(prefix)) {
prefix = "import" + this.importsWithPrefixes.size;
this.importsWithPrefixes.set(value.moduleUrl, prefix);
}
ctx.print(prefix + ".");
}
ctx.print(value.name);
if (lang_1.isPresent(typeParams) && typeParams.length > 0) {
ctx.print("<");
this.visitAllObjects(function(type) {
return type.visitType(_this, ctx);
}, typeParams, ctx, ",");
ctx.print(">");
}
};
return _DartEmitterVisitor;
}(abstract_emitter_1.AbstractEmitterVisitor);
function getSuperConstructorCallExpr(stmt) {
if (stmt instanceof o.ExpressionStatement) {
var expr = stmt.expr;
if (expr instanceof o.InvokeFunctionExpr) {
var fn = expr.fn;
if (fn instanceof o.ReadVarExpr) {
if (fn.builtin === o.BuiltinVar.Super) {
return expr;
}
}
}
}
return null;
}
function isConstType(type) {
return lang_1.isPresent(type) && type.hasModifier(o.TypeModifier.Const);
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var o = __webpack_require__(307);
var lang_1 = __webpack_require__(281);
var exceptions_1 = __webpack_require__(286);
var abstract_emitter_1 = __webpack_require__(337);
var _debugModuleUrl = "asset://debug/lib";
function debugOutputAstAsTypeScript(ast) {
var converter = new _TsEmitterVisitor(_debugModuleUrl);
var ctx = abstract_emitter_1.EmitterVisitorContext.createRoot([]);
var asts;
if (lang_1.isArray(ast)) {
asts = ast;
} else {
asts = [ ast ];
}
asts.forEach(function(ast) {
if (ast instanceof o.Statement) {
ast.visitStatement(converter, ctx);
} else if (ast instanceof o.Expression) {
ast.visitExpression(converter, ctx);
} else if (ast instanceof o.Type) {
ast.visitType(converter, ctx);
} else {
throw new exceptions_1.BaseException("Don't know how to print debug info for " + ast);
}
});
return ctx.toSource();
}
exports.debugOutputAstAsTypeScript = debugOutputAstAsTypeScript;
var TypeScriptEmitter = function() {
function TypeScriptEmitter(_importGenerator) {
this._importGenerator = _importGenerator;
}
TypeScriptEmitter.prototype.emitStatements = function(moduleUrl, stmts, exportedVars) {
var _this = this;
var converter = new _TsEmitterVisitor(moduleUrl);
var ctx = abstract_emitter_1.EmitterVisitorContext.createRoot(exportedVars);
converter.visitAllStatements(stmts, ctx);
var srcParts = [];
converter.importsWithPrefixes.forEach(function(prefix, importedModuleUrl) {
srcParts.push("imp" + ("ort * as " + prefix + " from '" + _this._importGenerator.getImportPath(moduleUrl, importedModuleUrl) + "';"));
});
srcParts.push(ctx.toSource());
return srcParts.join("\n");
};
return TypeScriptEmitter;
}();
exports.TypeScriptEmitter = TypeScriptEmitter;
var _TsEmitterVisitor = function(_super) {
__extends(_TsEmitterVisitor, _super);
function _TsEmitterVisitor(_moduleUrl) {
_super.call(this, false);
this._moduleUrl = _moduleUrl;
this.importsWithPrefixes = new Map();
}
_TsEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {
this._visitIdentifier(ast.value, ast.typeParams, ctx);
return null;
};
_TsEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {
if (ctx.isExportedVar(stmt.name)) {
ctx.print("export ");
}
if (stmt.hasModifier(o.StmtModifier.Final)) {
ctx.print("const");
} else {
ctx.print("var");
}
ctx.print(" " + stmt.name);
if (lang_1.isPresent(stmt.type)) {
ctx.print(":");
stmt.type.visitType(this, ctx);
}
ctx.print(" = ");
stmt.value.visitExpression(this, ctx);
ctx.println(";");
return null;
};
_TsEmitterVisitor.prototype.visitCastExpr = function(ast, ctx) {
ctx.print("(<");
ast.type.visitType(this, ctx);
ctx.print(">");
ast.value.visitExpression(this, ctx);
ctx.print(")");
return null;
};
_TsEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {
var _this = this;
ctx.pushClass(stmt);
if (ctx.isExportedVar(stmt.name)) {
ctx.print("export ");
}
ctx.print("class " + stmt.name);
if (lang_1.isPresent(stmt.parent)) {
ctx.print(" extends ");
stmt.parent.visitExpression(this, ctx);
}
ctx.println(" {");
ctx.incIndent();
stmt.fields.forEach(function(field) {
return _this._visitClassField(field, ctx);
});
if (lang_1.isPresent(stmt.constructorMethod)) {
this._visitClassConstructor(stmt, ctx);
}
stmt.getters.forEach(function(getter) {
return _this._visitClassGetter(getter, ctx);
});
stmt.methods.forEach(function(method) {
return _this._visitClassMethod(method, ctx);
});
ctx.decIndent();
ctx.println("}");
ctx.popClass();
return null;
};
_TsEmitterVisitor.prototype._visitClassField = function(field, ctx) {
if (field.hasModifier(o.StmtModifier.Private)) {
ctx.print("private ");
}
ctx.print(field.name);
if (lang_1.isPresent(field.type)) {
ctx.print(":");
field.type.visitType(this, ctx);
} else {
ctx.print(": any");
}
ctx.println(";");
};
_TsEmitterVisitor.prototype._visitClassGetter = function(getter, ctx) {
if (getter.hasModifier(o.StmtModifier.Private)) {
ctx.print("private ");
}
ctx.print("get " + getter.name + "()");
if (lang_1.isPresent(getter.type)) {
ctx.print(":");
getter.type.visitType(this, ctx);
}
ctx.println(" {");
ctx.incIndent();
this.visitAllStatements(getter.body, ctx);
ctx.decIndent();
ctx.println("}");
};
_TsEmitterVisitor.prototype._visitClassConstructor = function(stmt, ctx) {
ctx.print("constructor(");
this._visitParams(stmt.constructorMethod.params, ctx);
ctx.println(") {");
ctx.incIndent();
this.visitAllStatements(stmt.constructorMethod.body, ctx);
ctx.decIndent();
ctx.println("}");
};
_TsEmitterVisitor.prototype._visitClassMethod = function(method, ctx) {
if (method.hasModifier(o.StmtModifier.Private)) {
ctx.print("private ");
}
ctx.print(method.name + "(");
this._visitParams(method.params, ctx);
ctx.print("):");
if (lang_1.isPresent(method.type)) {
method.type.visitType(this, ctx);
} else {
ctx.print("void");
}
ctx.println(" {");
ctx.incIndent();
this.visitAllStatements(method.body, ctx);
ctx.decIndent();
ctx.println("}");
};
_TsEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {
ctx.print("(");
this._visitParams(ast.params, ctx);
ctx.print("):");
if (lang_1.isPresent(ast.type)) {
ast.type.visitType(this, ctx);
} else {
ctx.print("void");
}
ctx.println(" => {");
ctx.incIndent();
this.visitAllStatements(ast.statements, ctx);
ctx.decIndent();
ctx.print("}");
return null;
};
_TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
if (ctx.isExportedVar(stmt.name)) {
ctx.print("export ");
}
ctx.print("function " + stmt.name + "(");
this._visitParams(stmt.params, ctx);
ctx.print("):");
if (lang_1.isPresent(stmt.type)) {
stmt.type.visitType(this, ctx);
} else {
ctx.print("void");
}
ctx.println(" {");
ctx.incIndent();
this.visitAllStatements(stmt.statements, ctx);
ctx.decIndent();
ctx.println("}");
return null;
};
_TsEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {
ctx.println("try {");
ctx.incIndent();
this.visitAllStatements(stmt.bodyStmts, ctx);
ctx.decIndent();
ctx.println("} catch (" + abstract_emitter_1.CATCH_ERROR_VAR.name + ") {");
ctx.incIndent();
var catchStmts = [ abstract_emitter_1.CATCH_STACK_VAR.set(abstract_emitter_1.CATCH_ERROR_VAR.prop("stack")).toDeclStmt(null, [ o.StmtModifier.Final ]) ].concat(stmt.catchStmts);
this.visitAllStatements(catchStmts, ctx);
ctx.decIndent();
ctx.println("}");
return null;
};
_TsEmitterVisitor.prototype.visitBuiltintType = function(type, ctx) {
var typeStr;
switch (type.name) {
case o.BuiltinTypeName.Bool:
typeStr = "boolean";
break;

case o.BuiltinTypeName.Dynamic:
typeStr = "any";
break;

case o.BuiltinTypeName.Function:
typeStr = "Function";
break;

case o.BuiltinTypeName.Number:
typeStr = "number";
break;

case o.BuiltinTypeName.Int:
typeStr = "number";
break;

case o.BuiltinTypeName.String:
typeStr = "string";
break;

default:
throw new exceptions_1.BaseException("Unsupported builtin type " + type.name);
}
ctx.print(typeStr);
return null;
};
_TsEmitterVisitor.prototype.visitExternalType = function(ast, ctx) {
this._visitIdentifier(ast.value, ast.typeParams, ctx);
return null;
};
_TsEmitterVisitor.prototype.visitArrayType = function(type, ctx) {
if (lang_1.isPresent(type.of)) {
type.of.visitType(this, ctx);
} else {
ctx.print("any");
}
ctx.print("[]");
return null;
};
_TsEmitterVisitor.prototype.visitMapType = function(type, ctx) {
ctx.print("{[key: string]:");
if (lang_1.isPresent(type.valueType)) {
type.valueType.visitType(this, ctx);
} else {
ctx.print("any");
}
ctx.print("}");
return null;
};
_TsEmitterVisitor.prototype.getBuiltinMethodName = function(method) {
var name;
switch (method) {
case o.BuiltinMethod.ConcatArray:
name = "concat";
break;

case o.BuiltinMethod.SubscribeObservable:
name = "subscribe";
break;

case o.BuiltinMethod.bind:
name = "bind";
break;

default:
throw new exceptions_1.BaseException("Unknown builtin method: " + method);
}
return name;
};
_TsEmitterVisitor.prototype._visitParams = function(params, ctx) {
var _this = this;
this.visitAllObjects(function(param) {
ctx.print(param.name);
if (lang_1.isPresent(param.type)) {
ctx.print(":");
param.type.visitType(_this, ctx);
}
}, params, ctx, ",");
};
_TsEmitterVisitor.prototype._visitIdentifier = function(value, typeParams, ctx) {
var _this = this;
if (lang_1.isBlank(value.name)) {
throw new exceptions_1.BaseException("Internal error: unknown identifier " + value);
}
if (lang_1.isPresent(value.moduleUrl) && value.moduleUrl != this._moduleUrl) {
var prefix = this.importsWithPrefixes.get(value.moduleUrl);
if (lang_1.isBlank(prefix)) {
prefix = "import" + this.importsWithPrefixes.size;
this.importsWithPrefixes.set(value.moduleUrl, prefix);
}
ctx.print(prefix + ".");
}
ctx.print(value.name);
if (lang_1.isPresent(typeParams) && typeParams.length > 0) {
ctx.print("<");
this.visitAllObjects(function(type) {
return type.visitType(_this, ctx);
}, typeParams, ctx, ",");
ctx.print(">");
}
};
return _TsEmitterVisitor;
}(abstract_emitter_1.AbstractEmitterVisitor);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_private_1 = __webpack_require__(284);
var lang_1 = __webpack_require__(281);
var exceptions_1 = __webpack_require__(286);
var InterpretiveAppViewInstanceFactory = function() {
function InterpretiveAppViewInstanceFactory() {}
InterpretiveAppViewInstanceFactory.prototype.createInstance = function(superClass, clazz, args, props, getters, methods) {
if (superClass === core_private_1.AppView) {
args = args.concat([ null ]);
return new _InterpretiveAppView(args, props, getters, methods);
} else if (superClass === core_private_1.DebugAppView) {
return new _InterpretiveAppView(args, props, getters, methods);
}
throw new exceptions_1.BaseException("Can't instantiate class " + superClass + " in interpretative mode");
};
return InterpretiveAppViewInstanceFactory;
}();
exports.InterpretiveAppViewInstanceFactory = InterpretiveAppViewInstanceFactory;
var _InterpretiveAppView = function(_super) {
__extends(_InterpretiveAppView, _super);
function _InterpretiveAppView(args, props, getters, methods) {
_super.call(this, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
this.props = props;
this.getters = getters;
this.methods = methods;
}
_InterpretiveAppView.prototype.createInternal = function(rootSelector) {
var m = this.methods.get("createInternal");
if (lang_1.isPresent(m)) {
return m(rootSelector);
} else {
return _super.prototype.createInternal.call(this, rootSelector);
}
};
_InterpretiveAppView.prototype.injectorGetInternal = function(token, nodeIndex, notFoundResult) {
var m = this.methods.get("injectorGetInternal");
if (lang_1.isPresent(m)) {
return m(token, nodeIndex, notFoundResult);
} else {
return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
}
};
_InterpretiveAppView.prototype.destroyInternal = function() {
var m = this.methods.get("destroyInternal");
if (lang_1.isPresent(m)) {
return m();
} else {
return _super.prototype.destroyInternal.call(this);
}
};
_InterpretiveAppView.prototype.dirtyParentQueriesInternal = function() {
var m = this.methods.get("dirtyParentQueriesInternal");
if (lang_1.isPresent(m)) {
return m();
} else {
return _super.prototype.dirtyParentQueriesInternal.call(this);
}
};
_InterpretiveAppView.prototype.detectChangesInternal = function(throwOnChange) {
var m = this.methods.get("detectChangesInternal");
if (lang_1.isPresent(m)) {
return m(throwOnChange);
} else {
return _super.prototype.detectChangesInternal.call(this, throwOnChange);
}
};
return _InterpretiveAppView;
}(core_private_1.DebugAppView);
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var core_private_1 = __webpack_require__(284);
var lang_1 = __webpack_require__(281);
var collection_1 = __webpack_require__(285);
var element_schema_registry_1 = __webpack_require__(279);
var EVENT = "event";
var BOOLEAN = "boolean";
var NUMBER = "number";
var STRING = "string";
var OBJECT = "object";
var SCHEMA = [ "*|%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop", "^*|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*autocomplete,*autocompleteerror,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate", "media|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,#volume", "@svg:^*|*abort,*autocomplete,*autocompleteerror,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex", "@svg:graphics^@svg:|", "@svg:animation^@svg:|*begin,*end,*repeat", "@svg:geometry^@svg:|", "@svg:componentTransferFunction^@svg:|", "@svg:gradient^@svg:|", "@svg:textContent^@svg:graphics|", "@svg:textPositioning^@svg:textContent|", "a|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,rel,rev,search,shape,target,text,type,username", "area|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,search,shape,target,username", "audio^media|", "br|clear", "base|href,target", "body|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink", "button|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value", "canvas|#height,#width", "content|select", "dl|!compact", "datalist|", "details|!open", "dialog|!open,returnValue", "dir|!compact", "div|align", "embed|align,height,name,src,type,width", "fieldset|!disabled,name", "font|color,face,size", "form|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target", "frame|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src", "frameset|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows", "hr|align,color,!noShade,size,width", "head|", "h1,h2,h3,h4,h5,h6|align", "html|version", "iframe|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,%sandbox,scrolling,src,srcdoc,width", "img|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,sizes,src,srcset,useMap,#vspace,#width", "input|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width", "keygen|!autofocus,challenge,!disabled,keytype,name", "li|type,#value", "label|htmlFor", "legend|align", "link|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type", "map|name", "marquee|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width", "menu|!compact", "meta|content,httpEquiv,name,scheme", "meter|#high,#low,#max,#min,#optimum,#value", "ins,del|cite,dateTime", "ol|!compact,!reversed,#start,type", "object|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width", "optgroup|!disabled,label", "option|!defaultSelected,!disabled,label,!selected,text,value", "output|defaultValue,%htmlFor,name,value", "p|align", "param|name,type,value,valueType", "picture|", "pre|#width", "progress|#max,#value", "q,blockquote,cite|", "script|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type", "select|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value", "shadow|", "source|media,sizes,src,srcset,type", "span|", "style|!disabled,media,type", "caption|align", "th,td|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width", "col,colgroup|align,ch,chOff,#span,vAlign,width", "table|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width", "tr|align,bgColor,ch,chOff,vAlign", "tfoot,thead,tbody|align,ch,chOff,vAlign", "template|", "textarea|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap", "title|text", "track|!default,kind,label,src,srclang", "ul|!compact,type", "unknown|", "video^media|#height,poster,#width", "@svg:a^@svg:graphics|", "@svg:animate^@svg:animation|", "@svg:animateMotion^@svg:animation|", "@svg:animateTransform^@svg:animation|", "@svg:circle^@svg:geometry|", "@svg:clipPath^@svg:graphics|", "@svg:cursor^@svg:|", "@svg:defs^@svg:graphics|", "@svg:desc^@svg:|", "@svg:discard^@svg:|", "@svg:ellipse^@svg:geometry|", "@svg:feBlend^@svg:|", "@svg:feColorMatrix^@svg:|", "@svg:feComponentTransfer^@svg:|", "@svg:feComposite^@svg:|", "@svg:feConvolveMatrix^@svg:|", "@svg:feDiffuseLighting^@svg:|", "@svg:feDisplacementMap^@svg:|", "@svg:feDistantLight^@svg:|", "@svg:feDropShadow^@svg:|", "@svg:feFlood^@svg:|", "@svg:feFuncA^@svg:componentTransferFunction|", "@svg:feFuncB^@svg:componentTransferFunction|", "@svg:feFuncG^@svg:componentTransferFunction|", "@svg:feFuncR^@svg:componentTransferFunction|", "@svg:feGaussianBlur^@svg:|", "@svg:feImage^@svg:|", "@svg:feMerge^@svg:|", "@svg:feMergeNode^@svg:|", "@svg:feMorphology^@svg:|", "@svg:feOffset^@svg:|", "@svg:fePointLight^@svg:|", "@svg:feSpecularLighting^@svg:|", "@svg:feSpotLight^@svg:|", "@svg:feTile^@svg:|", "@svg:feTurbulence^@svg:|", "@svg:filter^@svg:|", "@svg:foreignObject^@svg:graphics|", "@svg:g^@svg:graphics|", "@svg:image^@svg:graphics|", "@svg:line^@svg:geometry|", "@svg:linearGradient^@svg:gradient|", "@svg:mpath^@svg:|", "@svg:marker^@svg:|", "@svg:mask^@svg:|", "@svg:metadata^@svg:|", "@svg:path^@svg:geometry|", "@svg:pattern^@svg:|", "@svg:polygon^@svg:geometry|", "@svg:polyline^@svg:geometry|", "@svg:radialGradient^@svg:gradient|", "@svg:rect^@svg:geometry|", "@svg:svg^@svg:graphics|#currentScale,#zoomAndPan", "@svg:script^@svg:|type", "@svg:set^@svg:animation|", "@svg:stop^@svg:|", "@svg:style^@svg:|!disabled,media,title,type", "@svg:switch^@svg:graphics|", "@svg:symbol^@svg:|", "@svg:tspan^@svg:textPositioning|", "@svg:text^@svg:textPositioning|", "@svg:textPath^@svg:textContent|", "@svg:title^@svg:|", "@svg:use^@svg:graphics|", "@svg:view^@svg:|#zoomAndPan" ];
var attrToPropMap = {
"class": "className",
innerHtml: "innerHTML",
readonly: "readOnly",
tabindex: "tabIndex"
};
var DomElementSchemaRegistry = function(_super) {
__extends(DomElementSchemaRegistry, _super);
function DomElementSchemaRegistry() {
var _this = this;
_super.call(this);
this.schema = {};
SCHEMA.forEach(function(encodedType) {
var parts = encodedType.split("|");
var properties = parts[1].split(",");
var typeParts = (parts[0] + "^").split("^");
var typeName = typeParts[0];
var type = {};
typeName.split(",").forEach(function(tag) {
return _this.schema[tag] = type;
});
var superType = _this.schema[typeParts[1]];
if (lang_1.isPresent(superType)) {
collection_1.StringMapWrapper.forEach(superType, function(v, k) {
return type[k] = v;
});
}
properties.forEach(function(property) {
if (property == "") {} else if (property.startsWith("*")) {} else if (property.startsWith("!")) {
type[property.substring(1)] = BOOLEAN;
} else if (property.startsWith("#")) {
type[property.substring(1)] = NUMBER;
} else if (property.startsWith("%")) {
type[property.substring(1)] = OBJECT;
} else {
type[property] = STRING;
}
});
});
}
DomElementSchemaRegistry.prototype.hasProperty = function(tagName, propName) {
if (tagName.indexOf("-") !== -1) {
return true;
} else {
var elementProperties = this.schema[tagName.toLowerCase()];
if (!lang_1.isPresent(elementProperties)) {
elementProperties = this.schema["unknown"];
}
return lang_1.isPresent(elementProperties[propName]);
}
};
DomElementSchemaRegistry.prototype.securityContext = function(tagName, propName) {
if (propName === "style") return core_private_1.SecurityContext.STYLE;
if (tagName === "a" && propName === "href") return core_private_1.SecurityContext.URL;
if (propName === "innerHTML") return core_private_1.SecurityContext.HTML;
return core_private_1.SecurityContext.NONE;
};
DomElementSchemaRegistry.prototype.getMappedPropName = function(propName) {
var mappedPropName = collection_1.StringMapWrapper.get(attrToPropMap, propName);
return lang_1.isPresent(mappedPropName) ? mappedPropName : propName;
};
DomElementSchemaRegistry.decorators = [ {
type: core_1.Injectable
} ];
DomElementSchemaRegistry.ctorParameters = [];
return DomElementSchemaRegistry;
}(element_schema_registry_1.ElementSchemaRegistry);
exports.DomElementSchemaRegistry = DomElementSchemaRegistry;
}, function(module, exports, __webpack_require__) {
"use strict";
var selector = __webpack_require__(297);
var pathUtil = __webpack_require__(345);
var __compiler_private__;
(function(__compiler_private__) {
__compiler_private__.SelectorMatcher = selector.SelectorMatcher;
__compiler_private__.CssSelector = selector.CssSelector;
__compiler_private__.AssetUrl = pathUtil.AssetUrl;
__compiler_private__.ImportGenerator = pathUtil.ImportGenerator;
})(__compiler_private__ = exports.__compiler_private__ || (exports.__compiler_private__ = {}));
}, function(module, exports, __webpack_require__) {
"use strict";
var exceptions_1 = __webpack_require__(286);
var lang_1 = __webpack_require__(281);
var _ASSET_URL_RE = /asset:([^\/]+)\/([^\/]+)\/(.+)/g;
var ImportGenerator = function() {
function ImportGenerator() {}
ImportGenerator.parseAssetUrl = function(url) {
return AssetUrl.parse(url);
};
return ImportGenerator;
}();
exports.ImportGenerator = ImportGenerator;
var AssetUrl = function() {
function AssetUrl(packageName, firstLevelDir, modulePath) {
this.packageName = packageName;
this.firstLevelDir = firstLevelDir;
this.modulePath = modulePath;
}
AssetUrl.parse = function(url, allowNonMatching) {
if (allowNonMatching === void 0) {
allowNonMatching = true;
}
var match = lang_1.RegExpWrapper.firstMatch(_ASSET_URL_RE, url);
if (lang_1.isPresent(match)) {
return new AssetUrl(match[1], match[2], match[3]);
}
if (allowNonMatching) {
return null;
}
throw new exceptions_1.BaseException("Url " + url + " is not a valid asset: url");
};
return AssetUrl;
}();
exports.AssetUrl = AssetUrl;
}, function(module, exports, __webpack_require__) {
"use strict";
var parse5_adapter_1 = __webpack_require__(347);
exports.Parse5DomAdapter = parse5_adapter_1.Parse5DomAdapter;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var parse5 = __webpack_require__(348);
var collection_1 = __webpack_require__(369);
var platform_browser_private_1 = __webpack_require__(371);
var lang_1 = __webpack_require__(370);
var exceptions_1 = __webpack_require__(458);
var compiler_private_1 = __webpack_require__(461);
var compiler_1 = __webpack_require__(277);
var parser = null;
var serializer = null;
var treeAdapter = null;
var _attrToPropMap = {
"class": "className",
innerHtml: "innerHTML",
readonly: "readOnly",
tabindex: "tabIndex"
};
var defDoc = null;
var mapProps = [ "attribs", "x-attribsNamespace", "x-attribsPrefix" ];
function _notImplemented(methodName) {
return new exceptions_1.BaseException("This method is not implemented in Parse5DomAdapter: " + methodName);
}
var Parse5DomAdapter = function(_super) {
__extends(Parse5DomAdapter, _super);
function Parse5DomAdapter() {
_super.apply(this, arguments);
}
Parse5DomAdapter.makeCurrent = function() {
parser = new parse5.Parser(parse5.TreeAdapters.htmlparser2);
serializer = new parse5.Serializer(parse5.TreeAdapters.htmlparser2);
treeAdapter = parser.treeAdapter;
platform_browser_private_1.setRootDomAdapter(new Parse5DomAdapter());
};
Parse5DomAdapter.prototype.hasProperty = function(element, name) {
return _HTMLElementPropertyList.indexOf(name) > -1;
};
Parse5DomAdapter.prototype.setProperty = function(el, name, value) {
if (name === "innerHTML") {
this.setInnerHTML(el, value);
} else if (name === "className") {
el.attribs["class"] = el.className = value;
} else {
el[name] = value;
}
};
Parse5DomAdapter.prototype.getProperty = function(el, name) {
return el[name];
};
Parse5DomAdapter.prototype.logError = function(error) {
console.error(error);
};
Parse5DomAdapter.prototype.log = function(error) {
console.log(error);
};
Parse5DomAdapter.prototype.logGroup = function(error) {
console.error(error);
};
Parse5DomAdapter.prototype.logGroupEnd = function() {};
Parse5DomAdapter.prototype.getXHR = function() {
return compiler_1.XHR;
};
Object.defineProperty(Parse5DomAdapter.prototype, "attrToPropMap", {
get: function() {
return _attrToPropMap;
},
enumerable: true,
configurable: true
});
Parse5DomAdapter.prototype.query = function(selector) {
throw _notImplemented("query");
};
Parse5DomAdapter.prototype.querySelector = function(el, selector) {
return this.querySelectorAll(el, selector)[0];
};
Parse5DomAdapter.prototype.querySelectorAll = function(el, selector) {
var _this = this;
var res = [];
var _recursive = function(result, node, selector, matcher) {
var cNodes = node.childNodes;
if (cNodes && cNodes.length > 0) {
for (var i = 0; i < cNodes.length; i++) {
var childNode = cNodes[i];
if (_this.elementMatches(childNode, selector, matcher)) {
result.push(childNode);
}
_recursive(result, childNode, selector, matcher);
}
}
};
var matcher = new compiler_private_1.SelectorMatcher();
matcher.addSelectables(compiler_private_1.CssSelector.parse(selector));
_recursive(res, el, selector, matcher);
return res;
};
Parse5DomAdapter.prototype.elementMatches = function(node, selector, matcher) {
if (matcher === void 0) {
matcher = null;
}
if (this.isElementNode(node) && selector === "*") {
return true;
}
var result = false;
if (selector && selector.charAt(0) == "#") {
result = this.getAttribute(node, "id") == selector.substring(1);
} else if (selector) {
var result = false;
if (matcher == null) {
matcher = new compiler_private_1.SelectorMatcher();
matcher.addSelectables(compiler_private_1.CssSelector.parse(selector));
}
var cssSelector = new compiler_private_1.CssSelector();
cssSelector.setElement(this.tagName(node));
if (node.attribs) {
for (var attrName in node.attribs) {
cssSelector.addAttribute(attrName, node.attribs[attrName]);
}
}
var classList = this.classList(node);
for (var i = 0; i < classList.length; i++) {
cssSelector.addClassName(classList[i]);
}
matcher.match(cssSelector, function(selector, cb) {
result = true;
});
}
return result;
};
Parse5DomAdapter.prototype.on = function(el, evt, listener) {
var listenersMap = el._eventListenersMap;
if (lang_1.isBlank(listenersMap)) {
var listenersMap = collection_1.StringMapWrapper.create();
el._eventListenersMap = listenersMap;
}
var listeners = collection_1.StringMapWrapper.get(listenersMap, evt);
if (lang_1.isBlank(listeners)) {
listeners = [];
}
listeners.push(listener);
collection_1.StringMapWrapper.set(listenersMap, evt, listeners);
};
Parse5DomAdapter.prototype.onAndCancel = function(el, evt, listener) {
this.on(el, evt, listener);
return function() {
collection_1.ListWrapper.remove(collection_1.StringMapWrapper.get(el._eventListenersMap, evt), listener);
};
};
Parse5DomAdapter.prototype.dispatchEvent = function(el, evt) {
if (lang_1.isBlank(evt.target)) {
evt.target = el;
}
if (lang_1.isPresent(el._eventListenersMap)) {
var listeners = collection_1.StringMapWrapper.get(el._eventListenersMap, evt.type);
if (lang_1.isPresent(listeners)) {
for (var i = 0; i < listeners.length; i++) {
listeners[i](evt);
}
}
}
if (lang_1.isPresent(el.parent)) {
this.dispatchEvent(el.parent, evt);
}
if (lang_1.isPresent(el._window)) {
this.dispatchEvent(el._window, evt);
}
};
Parse5DomAdapter.prototype.createMouseEvent = function(eventType) {
return this.createEvent(eventType);
};
Parse5DomAdapter.prototype.createEvent = function(eventType) {
var evt = {
type: eventType,
defaultPrevented: false,
preventDefault: function() {
evt.defaultPrevented = true;
}
};
return evt;
};
Parse5DomAdapter.prototype.preventDefault = function(evt) {
evt.returnValue = false;
};
Parse5DomAdapter.prototype.isPrevented = function(evt) {
return lang_1.isPresent(evt.returnValue) && !evt.returnValue;
};
Parse5DomAdapter.prototype.getInnerHTML = function(el) {
return serializer.serialize(this.templateAwareRoot(el));
};
Parse5DomAdapter.prototype.getOuterHTML = function(el) {
serializer.html = "";
serializer._serializeElement(el);
return serializer.html;
};
Parse5DomAdapter.prototype.nodeName = function(node) {
return node.tagName;
};
Parse5DomAdapter.prototype.nodeValue = function(node) {
return node.nodeValue;
};
Parse5DomAdapter.prototype.type = function(node) {
throw _notImplemented("type");
};
Parse5DomAdapter.prototype.content = function(node) {
return node.childNodes[0];
};
Parse5DomAdapter.prototype.firstChild = function(el) {
return el.firstChild;
};
Parse5DomAdapter.prototype.nextSibling = function(el) {
return el.nextSibling;
};
Parse5DomAdapter.prototype.parentElement = function(el) {
return el.parent;
};
Parse5DomAdapter.prototype.childNodes = function(el) {
return el.childNodes;
};
Parse5DomAdapter.prototype.childNodesAsList = function(el) {
var childNodes = el.childNodes;
var res = collection_1.ListWrapper.createFixedSize(childNodes.length);
for (var i = 0; i < childNodes.length; i++) {
res[i] = childNodes[i];
}
return res;
};
Parse5DomAdapter.prototype.clearNodes = function(el) {
while (el.childNodes.length > 0) {
this.remove(el.childNodes[0]);
}
};
Parse5DomAdapter.prototype.appendChild = function(el, node) {
this.remove(node);
treeAdapter.appendChild(this.templateAwareRoot(el), node);
};
Parse5DomAdapter.prototype.removeChild = function(el, node) {
if (collection_1.ListWrapper.contains(el.childNodes, node)) {
this.remove(node);
}
};
Parse5DomAdapter.prototype.remove = function(el) {
var parent = el.parent;
if (parent) {
var index = parent.childNodes.indexOf(el);
parent.childNodes.splice(index, 1);
}
var prev = el.previousSibling;
var next = el.nextSibling;
if (prev) {
prev.next = next;
}
if (next) {
next.prev = prev;
}
el.prev = null;
el.next = null;
el.parent = null;
return el;
};
Parse5DomAdapter.prototype.insertBefore = function(el, node) {
this.remove(node);
treeAdapter.insertBefore(el.parent, node, el);
};
Parse5DomAdapter.prototype.insertAllBefore = function(el, nodes) {
var _this = this;
nodes.forEach(function(n) {
return _this.insertBefore(el, n);
});
};
Parse5DomAdapter.prototype.insertAfter = function(el, node) {
if (el.nextSibling) {
this.insertBefore(el.nextSibling, node);
} else {
this.appendChild(el.parent, node);
}
};
Parse5DomAdapter.prototype.setInnerHTML = function(el, value) {
this.clearNodes(el);
var content = parser.parseFragment(value);
for (var i = 0; i < content.childNodes.length; i++) {
treeAdapter.appendChild(el, content.childNodes[i]);
}
};
Parse5DomAdapter.prototype.getText = function(el, isRecursive) {
if (this.isTextNode(el)) {
return el.data;
} else if (this.isCommentNode(el)) {
return isRecursive ? "" : el.data;
} else if (lang_1.isBlank(el.childNodes) || el.childNodes.length == 0) {
return "";
} else {
var textContent = "";
for (var i = 0; i < el.childNodes.length; i++) {
textContent += this.getText(el.childNodes[i], true);
}
return textContent;
}
};
Parse5DomAdapter.prototype.setText = function(el, value) {
if (this.isTextNode(el) || this.isCommentNode(el)) {
el.data = value;
} else {
this.clearNodes(el);
if (value !== "") treeAdapter.insertText(el, value);
}
};
Parse5DomAdapter.prototype.getValue = function(el) {
return el.value;
};
Parse5DomAdapter.prototype.setValue = function(el, value) {
el.value = value;
};
Parse5DomAdapter.prototype.getChecked = function(el) {
return el.checked;
};
Parse5DomAdapter.prototype.setChecked = function(el, value) {
el.checked = value;
};
Parse5DomAdapter.prototype.createComment = function(text) {
return treeAdapter.createCommentNode(text);
};
Parse5DomAdapter.prototype.createTemplate = function(html) {
var template = treeAdapter.createElement("template", "http://www.w3.org/1999/xhtml", []);
var content = parser.parseFragment(html);
treeAdapter.appendChild(template, content);
return template;
};
Parse5DomAdapter.prototype.createElement = function(tagName) {
return treeAdapter.createElement(tagName, "http://www.w3.org/1999/xhtml", []);
};
Parse5DomAdapter.prototype.createElementNS = function(ns, tagName) {
return treeAdapter.createElement(tagName, ns, []);
};
Parse5DomAdapter.prototype.createTextNode = function(text) {
var t = this.createComment(text);
t.type = "text";
return t;
};
Parse5DomAdapter.prototype.createScriptTag = function(attrName, attrValue) {
return treeAdapter.createElement("script", "http://www.w3.org/1999/xhtml", [ {
name: attrName,
value: attrValue
} ]);
};
Parse5DomAdapter.prototype.createStyleElement = function(css) {
var style = this.createElement("style");
this.setText(style, css);
return style;
};
Parse5DomAdapter.prototype.createShadowRoot = function(el) {
el.shadowRoot = treeAdapter.createDocumentFragment();
el.shadowRoot.parent = el;
return el.shadowRoot;
};
Parse5DomAdapter.prototype.getShadowRoot = function(el) {
return el.shadowRoot;
};
Parse5DomAdapter.prototype.getHost = function(el) {
return el.host;
};
Parse5DomAdapter.prototype.getDistributedNodes = function(el) {
throw _notImplemented("getDistributedNodes");
};
Parse5DomAdapter.prototype.clone = function(node) {
var _recursive = function(node) {
var nodeClone = Object.create(Object.getPrototypeOf(node));
for (var prop in node) {
var desc = Object.getOwnPropertyDescriptor(node, prop);
if (desc && "value" in desc && typeof desc.value !== "object") {
nodeClone[prop] = node[prop];
}
}
nodeClone.parent = null;
nodeClone.prev = null;
nodeClone.next = null;
nodeClone.children = null;
mapProps.forEach(function(mapName) {
if (lang_1.isPresent(node[mapName])) {
nodeClone[mapName] = {};
for (var prop in node[mapName]) {
nodeClone[mapName][prop] = node[mapName][prop];
}
}
});
var cNodes = node.children;
if (cNodes) {
var cNodesClone = new Array(cNodes.length);
for (var i = 0; i < cNodes.length; i++) {
var childNode = cNodes[i];
var childNodeClone = _recursive(childNode);
cNodesClone[i] = childNodeClone;
if (i > 0) {
childNodeClone.prev = cNodesClone[i - 1];
cNodesClone[i - 1].next = childNodeClone;
}
childNodeClone.parent = nodeClone;
}
nodeClone.children = cNodesClone;
}
return nodeClone;
};
return _recursive(node);
};
Parse5DomAdapter.prototype.getElementsByClassName = function(element, name) {
return this.querySelectorAll(element, "." + name);
};
Parse5DomAdapter.prototype.getElementsByTagName = function(element, name) {
throw _notImplemented("getElementsByTagName");
};
Parse5DomAdapter.prototype.classList = function(element) {
var classAttrValue = null;
var attributes = element.attribs;
if (attributes && attributes.hasOwnProperty("class")) {
classAttrValue = attributes["class"];
}
return classAttrValue ? classAttrValue.trim().split(/\s+/g) : [];
};
Parse5DomAdapter.prototype.addClass = function(element, className) {
var classList = this.classList(element);
var index = classList.indexOf(className);
if (index == -1) {
classList.push(className);
element.attribs["class"] = element.className = classList.join(" ");
}
};
Parse5DomAdapter.prototype.removeClass = function(element, className) {
var classList = this.classList(element);
var index = classList.indexOf(className);
if (index > -1) {
classList.splice(index, 1);
element.attribs["class"] = element.className = classList.join(" ");
}
};
Parse5DomAdapter.prototype.hasClass = function(element, className) {
return collection_1.ListWrapper.contains(this.classList(element), className);
};
Parse5DomAdapter.prototype.hasStyle = function(element, styleName, styleValue) {
if (styleValue === void 0) {
styleValue = null;
}
var value = this.getStyle(element, styleName) || "";
return styleValue ? value == styleValue : value.length > 0;
};
Parse5DomAdapter.prototype._readStyleAttribute = function(element) {
var styleMap = {};
var attributes = element.attribs;
if (attributes && attributes.hasOwnProperty("style")) {
var styleAttrValue = attributes["style"];
var styleList = styleAttrValue.split(/;+/g);
for (var i = 0; i < styleList.length; i++) {
if (styleList[i].length > 0) {
var elems = styleList[i].split(/:+/g);
styleMap[elems[0].trim()] = elems[1].trim();
}
}
}
return styleMap;
};
Parse5DomAdapter.prototype._writeStyleAttribute = function(element, styleMap) {
var styleAttrValue = "";
for (var key in styleMap) {
var newValue = styleMap[key];
if (newValue && newValue.length > 0) {
styleAttrValue += key + ":" + styleMap[key] + ";";
}
}
element.attribs["style"] = styleAttrValue;
};
Parse5DomAdapter.prototype.setStyle = function(element, styleName, styleValue) {
var styleMap = this._readStyleAttribute(element);
styleMap[styleName] = styleValue;
this._writeStyleAttribute(element, styleMap);
};
Parse5DomAdapter.prototype.removeStyle = function(element, styleName) {
this.setStyle(element, styleName, null);
};
Parse5DomAdapter.prototype.getStyle = function(element, styleName) {
var styleMap = this._readStyleAttribute(element);
return styleMap.hasOwnProperty(styleName) ? styleMap[styleName] : "";
};
Parse5DomAdapter.prototype.tagName = function(element) {
return element.tagName == "style" ? "STYLE" : element.tagName;
};
Parse5DomAdapter.prototype.attributeMap = function(element) {
var res = new Map();
var elAttrs = treeAdapter.getAttrList(element);
for (var i = 0; i < elAttrs.length; i++) {
var attrib = elAttrs[i];
res.set(attrib.name, attrib.value);
}
return res;
};
Parse5DomAdapter.prototype.hasAttribute = function(element, attribute) {
return element.attribs && element.attribs.hasOwnProperty(attribute);
};
Parse5DomAdapter.prototype.hasAttributeNS = function(element, ns, attribute) {
throw "not implemented";
};
Parse5DomAdapter.prototype.getAttribute = function(element, attribute) {
return element.attribs && element.attribs.hasOwnProperty(attribute) ? element.attribs[attribute] : null;
};
Parse5DomAdapter.prototype.getAttributeNS = function(element, ns, attribute) {
throw "not implemented";
};
Parse5DomAdapter.prototype.setAttribute = function(element, attribute, value) {
if (attribute) {
element.attribs[attribute] = value;
if (attribute === "class") {
element.className = value;
}
}
};
Parse5DomAdapter.prototype.setAttributeNS = function(element, ns, attribute, value) {
throw "not implemented";
};
Parse5DomAdapter.prototype.removeAttribute = function(element, attribute) {
if (attribute) {
collection_1.StringMapWrapper.delete(element.attribs, attribute);
}
};
Parse5DomAdapter.prototype.removeAttributeNS = function(element, ns, name) {
throw "not implemented";
};
Parse5DomAdapter.prototype.templateAwareRoot = function(el) {
return this.isTemplateElement(el) ? this.content(el) : el;
};
Parse5DomAdapter.prototype.createHtmlDocument = function() {
var newDoc = treeAdapter.createDocument();
newDoc.title = "fake title";
var head = treeAdapter.createElement("head", null, []);
var body = treeAdapter.createElement("body", "http://www.w3.org/1999/xhtml", []);
this.appendChild(newDoc, head);
this.appendChild(newDoc, body);
collection_1.StringMapWrapper.set(newDoc, "head", head);
collection_1.StringMapWrapper.set(newDoc, "body", body);
collection_1.StringMapWrapper.set(newDoc, "_window", collection_1.StringMapWrapper.create());
return newDoc;
};
Parse5DomAdapter.prototype.defaultDoc = function() {
if (defDoc === null) {
defDoc = this.createHtmlDocument();
}
return defDoc;
};
Parse5DomAdapter.prototype.getBoundingClientRect = function(el) {
return {
left: 0,
top: 0,
width: 0,
height: 0
};
};
Parse5DomAdapter.prototype.getTitle = function() {
return this.defaultDoc().title || "";
};
Parse5DomAdapter.prototype.setTitle = function(newTitle) {
this.defaultDoc().title = newTitle;
};
Parse5DomAdapter.prototype.isTemplateElement = function(el) {
return this.isElementNode(el) && this.tagName(el) === "template";
};
Parse5DomAdapter.prototype.isTextNode = function(node) {
return treeAdapter.isTextNode(node);
};
Parse5DomAdapter.prototype.isCommentNode = function(node) {
return treeAdapter.isCommentNode(node);
};
Parse5DomAdapter.prototype.isElementNode = function(node) {
return node ? treeAdapter.isElementNode(node) : false;
};
Parse5DomAdapter.prototype.hasShadowRoot = function(node) {
return lang_1.isPresent(node.shadowRoot);
};
Parse5DomAdapter.prototype.isShadowRoot = function(node) {
return this.getShadowRoot(node) == node;
};
Parse5DomAdapter.prototype.importIntoDoc = function(node) {
return this.clone(node);
};
Parse5DomAdapter.prototype.adoptNode = function(node) {
return node;
};
Parse5DomAdapter.prototype.getHref = function(el) {
return el.href;
};
Parse5DomAdapter.prototype.resolveAndSetHref = function(el, baseUrl, href) {
if (href == null) {
el.href = baseUrl;
} else {
el.href = baseUrl + "/../" + href;
}
};
Parse5DomAdapter.prototype._buildRules = function(parsedRules, css) {
var rules = [];
for (var i = 0; i < parsedRules.length; i++) {
var parsedRule = parsedRules[i];
var rule = collection_1.StringMapWrapper.create();
collection_1.StringMapWrapper.set(rule, "cssText", css);
collection_1.StringMapWrapper.set(rule, "style", {
content: "",
cssText: ""
});
if (parsedRule.type == "rule") {
collection_1.StringMapWrapper.set(rule, "type", 1);
collection_1.StringMapWrapper.set(rule, "selectorText", parsedRule.selectors.join(", ").replace(/\s{2,}/g, " ").replace(/\s*~\s*/g, " ~ ").replace(/\s*\+\s*/g, " + ").replace(/\s*>\s*/g, " > ").replace(/\[(\w+)=(\w+)\]/g, '[$1="$2"]'));
if (lang_1.isBlank(parsedRule.declarations)) {
continue;
}
for (var j = 0; j < parsedRule.declarations.length; j++) {
var declaration = parsedRule.declarations[j];
collection_1.StringMapWrapper.set(collection_1.StringMapWrapper.get(rule, "style"), declaration.property, declaration.value);
collection_1.StringMapWrapper.get(rule, "style").cssText += declaration.property + ": " + declaration.value + ";";
}
} else if (parsedRule.type == "media") {
collection_1.StringMapWrapper.set(rule, "type", 4);
collection_1.StringMapWrapper.set(rule, "media", {
mediaText: parsedRule.media
});
if (parsedRule.rules) {
collection_1.StringMapWrapper.set(rule, "cssRules", this._buildRules(parsedRule.rules));
}
}
rules.push(rule);
}
return rules;
};
Parse5DomAdapter.prototype.supportsDOMEvents = function() {
return false;
};
Parse5DomAdapter.prototype.supportsNativeShadowDOM = function() {
return false;
};
Parse5DomAdapter.prototype.getGlobalEventTarget = function(target) {
if (target == "window") {
return this.defaultDoc()._window;
} else if (target == "document") {
return this.defaultDoc();
} else if (target == "body") {
return this.defaultDoc().body;
}
};
Parse5DomAdapter.prototype.getBaseHref = function() {
throw "not implemented";
};
Parse5DomAdapter.prototype.resetBaseElement = function() {
throw "not implemented";
};
Parse5DomAdapter.prototype.getHistory = function() {
throw "not implemented";
};
Parse5DomAdapter.prototype.getLocation = function() {
throw "not implemented";
};
Parse5DomAdapter.prototype.getUserAgent = function() {
return "Fake user agent";
};
Parse5DomAdapter.prototype.getData = function(el, name) {
return this.getAttribute(el, "data-" + name);
};
Parse5DomAdapter.prototype.getComputedStyle = function(el) {
throw "not implemented";
};
Parse5DomAdapter.prototype.setData = function(el, name, value) {
this.setAttribute(el, "data-" + name, value);
};
Parse5DomAdapter.prototype.setGlobalVar = function(path, value) {
lang_1.setValueOnPath(lang_1.global, path, value);
};
Parse5DomAdapter.prototype.requestAnimationFrame = function(callback) {
return setTimeout(callback, 0);
};
Parse5DomAdapter.prototype.cancelAnimationFrame = function(id) {
clearTimeout(id);
};
Parse5DomAdapter.prototype.performanceNow = function() {
return lang_1.DateWrapper.toMillis(lang_1.DateWrapper.now());
};
Parse5DomAdapter.prototype.getAnimationPrefix = function() {
return "";
};
Parse5DomAdapter.prototype.getTransitionEnd = function() {
return "transitionend";
};
Parse5DomAdapter.prototype.supportsAnimation = function() {
return true;
};
Parse5DomAdapter.prototype.replaceChild = function(el, newNode, oldNode) {
throw new Error("not implemented");
};
Parse5DomAdapter.prototype.parse = function(templateHtml) {
throw new Error("not implemented");
};
Parse5DomAdapter.prototype.invoke = function(el, methodName, args) {
throw new Error("not implemented");
};
Parse5DomAdapter.prototype.getEventKey = function(event) {
throw new Error("not implemented");
};
return Parse5DomAdapter;
}(platform_browser_private_1.DomAdapter);
exports.Parse5DomAdapter = Parse5DomAdapter;
var _HTMLElementPropertyList = [ "webkitEntries", "incremental", "webkitdirectory", "selectionDirection", "selectionEnd", "selectionStart", "labels", "validationMessage", "validity", "willValidate", "width", "valueAsNumber", "valueAsDate", "value", "useMap", "defaultValue", "type", "step", "src", "size", "required", "readOnly", "placeholder", "pattern", "name", "multiple", "min", "minLength", "maxLength", "max", "list", "indeterminate", "height", "formTarget", "formNoValidate", "formMethod", "formEnctype", "formAction", "files", "form", "disabled", "dirName", "checked", "defaultChecked", "autofocus", "autocomplete", "alt", "align", "accept", "onautocompleteerror", "onautocomplete", "onwaiting", "onvolumechange", "ontoggle", "ontimeupdate", "onsuspend", "onsubmit", "onstalled", "onshow", "onselect", "onseeking", "onseeked", "onscroll", "onresize", "onreset", "onratechange", "onprogress", "onplaying", "onplay", "onpause", "onmousewheel", "onmouseup", "onmouseover", "onmouseout", "onmousemove", "onmouseleave", "onmouseenter", "onmousedown", "onloadstart", "onloadedmetadata", "onloadeddata", "onload", "onkeyup", "onkeypress", "onkeydown", "oninvalid", "oninput", "onfocus", "onerror", "onended", "onemptied", "ondurationchange", "ondrop", "ondragstart", "ondragover", "ondragleave", "ondragenter", "ondragend", "ondrag", "ondblclick", "oncuechange", "oncontextmenu", "onclose", "onclick", "onchange", "oncanplaythrough", "oncanplay", "oncancel", "onblur", "onabort", "spellcheck", "isContentEditable", "contentEditable", "outerText", "innerText", "accessKey", "hidden", "webkitdropzone", "draggable", "tabIndex", "dir", "translate", "lang", "title", "childElementCount", "lastElementChild", "firstElementChild", "children", "onwebkitfullscreenerror", "onwebkitfullscreenchange", "nextElementSibling", "previousElementSibling", "onwheel", "onselectstart", "onsearch", "onpaste", "oncut", "oncopy", "onbeforepaste", "onbeforecut", "onbeforecopy", "shadowRoot", "dataset", "classList", "className", "outerHTML", "innerHTML", "scrollHeight", "scrollWidth", "scrollTop", "scrollLeft", "clientHeight", "clientWidth", "clientTop", "clientLeft", "offsetParent", "offsetHeight", "offsetWidth", "offsetTop", "offsetLeft", "localName", "prefix", "namespaceURI", "id", "style", "attributes", "tagName", "parentElement", "textContent", "baseURI", "ownerDocument", "nextSibling", "previousSibling", "lastChild", "firstChild", "childNodes", "parentNode", "nodeType", "nodeValue", "nodeName", "closure_lm_714617", "__jsaction" ];
}, function(module, exports, __webpack_require__) {
"use strict";
exports.Parser = __webpack_require__(349);
exports.SimpleApiParser = __webpack_require__(363);
exports.TreeSerializer = exports.Serializer = __webpack_require__(365);
exports.JsDomParser = __webpack_require__(366);
exports.TreeAdapters = {
"default": __webpack_require__(359),
htmlparser2: __webpack_require__(368)
};
}, function(module, exports, __webpack_require__) {
"use strict";
var Tokenizer = __webpack_require__(350), OpenElementStack = __webpack_require__(355), FormattingElementList = __webpack_require__(357), LocationInfoMixin = __webpack_require__(358), DefaultTreeAdapter = __webpack_require__(359), Doctype = __webpack_require__(360), ForeignContent = __webpack_require__(361), Utils = __webpack_require__(362), UNICODE = __webpack_require__(352), HTML = __webpack_require__(356);
var $ = HTML.TAG_NAMES, NS = HTML.NAMESPACES, ATTRS = HTML.ATTRS;
var DEFAULT_OPTIONS = {
decodeHtmlEntities: true,
locationInfo: false
};
var SEARCHABLE_INDEX_DEFAULT_PROMPT = "This is a searchable index. Enter search keywords: ", SEARCHABLE_INDEX_INPUT_NAME = "isindex", HIDDEN_INPUT_TYPE = "hidden";
var AA_OUTER_LOOP_ITER = 8, AA_INNER_LOOP_ITER = 3;
var INITIAL_MODE = "INITIAL_MODE", BEFORE_HTML_MODE = "BEFORE_HTML_MODE", BEFORE_HEAD_MODE = "BEFORE_HEAD_MODE", IN_HEAD_MODE = "IN_HEAD_MODE", AFTER_HEAD_MODE = "AFTER_HEAD_MODE", IN_BODY_MODE = "IN_BODY_MODE", TEXT_MODE = "TEXT_MODE", IN_TABLE_MODE = "IN_TABLE_MODE", IN_TABLE_TEXT_MODE = "IN_TABLE_TEXT_MODE", IN_CAPTION_MODE = "IN_CAPTION_MODE", IN_COLUMN_GROUP_MODE = "IN_COLUMN_GROUP_MODE", IN_TABLE_BODY_MODE = "IN_TABLE_BODY_MODE", IN_ROW_MODE = "IN_ROW_MODE", IN_CELL_MODE = "IN_CELL_MODE", IN_SELECT_MODE = "IN_SELECT_MODE", IN_SELECT_IN_TABLE_MODE = "IN_SELECT_IN_TABLE_MODE", IN_TEMPLATE_MODE = "IN_TEMPLATE_MODE", AFTER_BODY_MODE = "AFTER_BODY_MODE", IN_FRAMESET_MODE = "IN_FRAMESET_MODE", AFTER_FRAMESET_MODE = "AFTER_FRAMESET_MODE", AFTER_AFTER_BODY_MODE = "AFTER_AFTER_BODY_MODE", AFTER_AFTER_FRAMESET_MODE = "AFTER_AFTER_FRAMESET_MODE";
var INSERTION_MODE_RESET_MAP = {};
INSERTION_MODE_RESET_MAP[$.TR] = IN_ROW_MODE;
INSERTION_MODE_RESET_MAP[$.TBODY] = INSERTION_MODE_RESET_MAP[$.THEAD] = INSERTION_MODE_RESET_MAP[$.TFOOT] = IN_TABLE_BODY_MODE;
INSERTION_MODE_RESET_MAP[$.CAPTION] = IN_CAPTION_MODE;
INSERTION_MODE_RESET_MAP[$.COLGROUP] = IN_COLUMN_GROUP_MODE;
INSERTION_MODE_RESET_MAP[$.TABLE] = IN_TABLE_MODE;
INSERTION_MODE_RESET_MAP[$.BODY] = IN_BODY_MODE;
INSERTION_MODE_RESET_MAP[$.FRAMESET] = IN_FRAMESET_MODE;
var TEMPLATE_INSERTION_MODE_SWITCH_MAP = {};
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.CAPTION] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.COLGROUP] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TBODY] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TFOOT] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.THEAD] = IN_TABLE_MODE;
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.COL] = IN_COLUMN_GROUP_MODE;
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TR] = IN_TABLE_BODY_MODE;
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TD] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TH] = IN_ROW_MODE;
var _ = {};
_[INITIAL_MODE] = {};
_[INITIAL_MODE][Tokenizer.CHARACTER_TOKEN] = _[INITIAL_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInInitialMode;
_[INITIAL_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
_[INITIAL_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[INITIAL_MODE][Tokenizer.DOCTYPE_TOKEN] = doctypeInInitialMode;
_[INITIAL_MODE][Tokenizer.START_TAG_TOKEN] = _[INITIAL_MODE][Tokenizer.END_TAG_TOKEN] = _[INITIAL_MODE][Tokenizer.EOF_TOKEN] = tokenInInitialMode;
_[BEFORE_HTML_MODE] = {};
_[BEFORE_HTML_MODE][Tokenizer.CHARACTER_TOKEN] = _[BEFORE_HTML_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenBeforeHtml;
_[BEFORE_HTML_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
_[BEFORE_HTML_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[BEFORE_HTML_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[BEFORE_HTML_MODE][Tokenizer.START_TAG_TOKEN] = startTagBeforeHtml;
_[BEFORE_HTML_MODE][Tokenizer.END_TAG_TOKEN] = endTagBeforeHtml;
_[BEFORE_HTML_MODE][Tokenizer.EOF_TOKEN] = tokenBeforeHtml;
_[BEFORE_HEAD_MODE] = {};
_[BEFORE_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] = _[BEFORE_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenBeforeHead;
_[BEFORE_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
_[BEFORE_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[BEFORE_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[BEFORE_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagBeforeHead;
_[BEFORE_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagBeforeHead;
_[BEFORE_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenBeforeHead;
_[IN_HEAD_MODE] = {};
_[IN_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInHead;
_[IN_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagInHead;
_[IN_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagInHead;
_[IN_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenInHead;
_[AFTER_HEAD_MODE] = {};
_[AFTER_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] = _[AFTER_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterHead;
_[AFTER_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[AFTER_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[AFTER_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterHead;
_[AFTER_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterHead;
_[AFTER_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenAfterHead;
_[IN_BODY_MODE] = {};
_[IN_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagInBody;
_[IN_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagInBody;
_[IN_BODY_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[TEXT_MODE] = {};
_[TEXT_MODE][Tokenizer.CHARACTER_TOKEN] = _[TEXT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = _[TEXT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[TEXT_MODE][Tokenizer.COMMENT_TOKEN] = _[TEXT_MODE][Tokenizer.DOCTYPE_TOKEN] = _[TEXT_MODE][Tokenizer.START_TAG_TOKEN] = ignoreToken;
_[TEXT_MODE][Tokenizer.END_TAG_TOKEN] = endTagInText;
_[TEXT_MODE][Tokenizer.EOF_TOKEN] = eofInText;
_[IN_TABLE_MODE] = {};
_[IN_TABLE_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_TABLE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = _[IN_TABLE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
_[IN_TABLE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_TABLE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_TABLE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTable;
_[IN_TABLE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTable;
_[IN_TABLE_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_TABLE_TEXT_MODE] = {};
_[IN_TABLE_TEXT_MODE][Tokenizer.CHARACTER_TOKEN] = characterInTableText;
_[IN_TABLE_TEXT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_TABLE_TEXT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInTableText;
_[IN_TABLE_TEXT_MODE][Tokenizer.COMMENT_TOKEN] = _[IN_TABLE_TEXT_MODE][Tokenizer.DOCTYPE_TOKEN] = _[IN_TABLE_TEXT_MODE][Tokenizer.START_TAG_TOKEN] = _[IN_TABLE_TEXT_MODE][Tokenizer.END_TAG_TOKEN] = _[IN_TABLE_TEXT_MODE][Tokenizer.EOF_TOKEN] = tokenInTableText;
_[IN_CAPTION_MODE] = {};
_[IN_CAPTION_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_CAPTION_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_CAPTION_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_CAPTION_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_CAPTION_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_CAPTION_MODE][Tokenizer.START_TAG_TOKEN] = startTagInCaption;
_[IN_CAPTION_MODE][Tokenizer.END_TAG_TOKEN] = endTagInCaption;
_[IN_CAPTION_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_COLUMN_GROUP_MODE] = {};
_[IN_COLUMN_GROUP_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_COLUMN_GROUP_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInColumnGroup;
_[IN_COLUMN_GROUP_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_COLUMN_GROUP_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_COLUMN_GROUP_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_COLUMN_GROUP_MODE][Tokenizer.START_TAG_TOKEN] = startTagInColumnGroup;
_[IN_COLUMN_GROUP_MODE][Tokenizer.END_TAG_TOKEN] = endTagInColumnGroup;
_[IN_COLUMN_GROUP_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_TABLE_BODY_MODE] = {};
_[IN_TABLE_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_TABLE_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = _[IN_TABLE_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
_[IN_TABLE_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_TABLE_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_TABLE_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTableBody;
_[IN_TABLE_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTableBody;
_[IN_TABLE_BODY_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_ROW_MODE] = {};
_[IN_ROW_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_ROW_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = _[IN_ROW_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
_[IN_ROW_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_ROW_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_ROW_MODE][Tokenizer.START_TAG_TOKEN] = startTagInRow;
_[IN_ROW_MODE][Tokenizer.END_TAG_TOKEN] = endTagInRow;
_[IN_ROW_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_CELL_MODE] = {};
_[IN_CELL_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_CELL_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_CELL_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_CELL_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_CELL_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_CELL_MODE][Tokenizer.START_TAG_TOKEN] = startTagInCell;
_[IN_CELL_MODE][Tokenizer.END_TAG_TOKEN] = endTagInCell;
_[IN_CELL_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_SELECT_MODE] = {};
_[IN_SELECT_MODE][Tokenizer.CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_SELECT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_SELECT_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_SELECT_MODE][Tokenizer.START_TAG_TOKEN] = startTagInSelect;
_[IN_SELECT_MODE][Tokenizer.END_TAG_TOKEN] = endTagInSelect;
_[IN_SELECT_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_SELECT_IN_TABLE_MODE] = {};
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInSelectInTable;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInSelectInTable;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_TEMPLATE_MODE] = {};
_[IN_TEMPLATE_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_TEMPLATE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_TEMPLATE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_TEMPLATE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_TEMPLATE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_TEMPLATE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTemplate;
_[IN_TEMPLATE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTemplate;
_[IN_TEMPLATE_MODE][Tokenizer.EOF_TOKEN] = eofInTemplate;
_[AFTER_BODY_MODE] = {};
_[AFTER_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = _[AFTER_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterBody;
_[AFTER_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[AFTER_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToRootHtmlElement;
_[AFTER_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterBody;
_[AFTER_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterBody;
_[AFTER_BODY_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
_[IN_FRAMESET_MODE] = {};
_[IN_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagInFrameset;
_[IN_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = endTagInFrameset;
_[IN_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
_[AFTER_FRAMESET_MODE] = {};
_[AFTER_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] = _[AFTER_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[AFTER_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[AFTER_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[AFTER_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterFrameset;
_[AFTER_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterFrameset;
_[AFTER_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
_[AFTER_AFTER_BODY_MODE] = {};
_[AFTER_AFTER_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = tokenAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToDocument;
_[AFTER_AFTER_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_AFTER_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.END_TAG_TOKEN] = tokenAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
_[AFTER_AFTER_FRAMESET_MODE] = {};
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] = _[AFTER_AFTER_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToDocument;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterAfterFrameset;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = ignoreToken;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
function getSearchableIndexFormAttrs(isindexStartTagToken) {
var indexAction = Tokenizer.getTokenAttr(isindexStartTagToken, ATTRS.ACTION), attrs = [];
if (indexAction !== null) {
attrs.push({
name: ATTRS.ACTION,
value: indexAction
});
}
return attrs;
}
function getSearchableIndexLabelText(isindexStartTagToken) {
var indexPrompt = Tokenizer.getTokenAttr(isindexStartTagToken, ATTRS.PROMPT);
return indexPrompt === null ? SEARCHABLE_INDEX_DEFAULT_PROMPT : indexPrompt;
}
function getSearchableIndexInputAttrs(isindexStartTagToken) {
var isindexAttrs = isindexStartTagToken.attrs, inputAttrs = [];
for (var i = 0; i < isindexAttrs.length; i++) {
var name = isindexAttrs[i].name;
if (name !== ATTRS.NAME && name !== ATTRS.ACTION && name !== ATTRS.PROMPT) inputAttrs.push(isindexAttrs[i]);
}
inputAttrs.push({
name: ATTRS.NAME,
value: SEARCHABLE_INDEX_INPUT_NAME
});
return inputAttrs;
}
var Parser = module.exports = function(treeAdapter, options) {
this.treeAdapter = treeAdapter || DefaultTreeAdapter;
this.options = Utils.mergeOptions(DEFAULT_OPTIONS, options);
this.scriptHandler = null;
if (this.options.locationInfo) LocationInfoMixin.assign(this);
};
Parser.prototype.parse = function(html) {
var document = this.treeAdapter.createDocument();
this._reset(html, document, null);
this._runParsingLoop();
return document;
};
Parser.prototype.parseFragment = function(html, fragmentContext) {
if (!fragmentContext) fragmentContext = this.treeAdapter.createElement($.TEMPLATE, NS.HTML, []);
var documentMock = this.treeAdapter.createElement("documentmock", NS.HTML, []);
this._reset(html, documentMock, fragmentContext);
if (this.treeAdapter.getTagName(fragmentContext) === $.TEMPLATE) this._pushTmplInsertionMode(IN_TEMPLATE_MODE);
this._initTokenizerForFragmentParsing();
this._insertFakeRootElement();
this._resetInsertionMode();
this._findFormInFragmentContext();
this._runParsingLoop();
var rootElement = this.treeAdapter.getFirstChild(documentMock), fragment = this.treeAdapter.createDocumentFragment();
this._adoptNodes(rootElement, fragment);
return fragment;
};
Parser.prototype._reset = function(html, document, fragmentContext) {
this.tokenizer = new Tokenizer(html, this.options);
this.stopped = false;
this.insertionMode = INITIAL_MODE;
this.originalInsertionMode = "";
this.document = document;
this.fragmentContext = fragmentContext;
this.headElement = null;
this.formElement = null;
this.openElements = new OpenElementStack(this.document, this.treeAdapter);
this.activeFormattingElements = new FormattingElementList(this.treeAdapter);
this.tmplInsertionModeStack = [];
this.tmplInsertionModeStackTop = -1;
this.currentTmplInsertionMode = null;
this.pendingCharacterTokens = [];
this.hasNonWhitespacePendingCharacterToken = false;
this.framesetOk = true;
this.skipNextNewLine = false;
this.fosterParentingEnabled = false;
};
Parser.prototype._iterateParsingLoop = function() {
this._setupTokenizerCDATAMode();
var token = this.tokenizer.getNextToken();
if (this.skipNextNewLine) {
this.skipNextNewLine = false;
if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === "\n") {
if (token.chars.length === 1) return;
token.chars = token.chars.substr(1);
}
}
if (this._shouldProcessTokenInForeignContent(token)) this._processTokenInForeignContent(token); else this._processToken(token);
};
Parser.prototype._runParsingLoop = function() {
while (!this.stopped) this._iterateParsingLoop();
};
Parser.prototype._setupTokenizerCDATAMode = function() {
var current = this._getAdjustedCurrentElement();
this.tokenizer.allowCDATA = current && current !== this.document && this.treeAdapter.getNamespaceURI(current) !== NS.HTML && !this._isHtmlIntegrationPoint(current) && !this._isMathMLTextIntegrationPoint(current);
};
Parser.prototype._switchToTextParsing = function(currentToken, nextTokenizerState) {
this._insertElement(currentToken, NS.HTML);
this.tokenizer.state = nextTokenizerState;
this.originalInsertionMode = this.insertionMode;
this.insertionMode = TEXT_MODE;
};
Parser.prototype._getAdjustedCurrentElement = function() {
return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;
};
Parser.prototype._findFormInFragmentContext = function() {
var node = this.fragmentContext;
do {
if (this.treeAdapter.getTagName(node) === $.FORM) {
this.formElement = node;
break;
}
node = this.treeAdapter.getParentNode(node);
} while (node);
};
Parser.prototype._initTokenizerForFragmentParsing = function() {
var tn = this.treeAdapter.getTagName(this.fragmentContext);
if (tn === $.TITLE || tn === $.TEXTAREA) this.tokenizer.state = Tokenizer.MODE.RCDATA; else if (tn === $.STYLE || tn === $.XMP || tn === $.IFRAME || tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT) {
this.tokenizer.state = Tokenizer.MODE.RAWTEXT;
} else if (tn === $.SCRIPT) this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA; else if (tn === $.PLAINTEXT) this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
};
Parser.prototype._setDocumentType = function(token) {
this.treeAdapter.setDocumentType(this.document, token.name, token.publicId, token.systemId);
};
Parser.prototype._attachElementToTree = function(element) {
if (this._shouldFosterParentOnInsertion()) this._fosterParentElement(element); else {
var parent = this.openElements.currentTmplContent || this.openElements.current;
this.treeAdapter.appendChild(parent, element);
}
};
Parser.prototype._appendElement = function(token, namespaceURI) {
var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
this._attachElementToTree(element);
};
Parser.prototype._insertElement = function(token, namespaceURI) {
var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
this._attachElementToTree(element);
this.openElements.push(element);
};
Parser.prototype._insertTemplate = function(token) {
var tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs), content = this.treeAdapter.createDocumentFragment();
this.treeAdapter.appendChild(tmpl, content);
this._attachElementToTree(tmpl);
this.openElements.push(tmpl);
};
Parser.prototype._insertFakeRootElement = function() {
var element = this.treeAdapter.createElement($.HTML, NS.HTML, []);
this.treeAdapter.appendChild(this.openElements.current, element);
this.openElements.push(element);
};
Parser.prototype._appendCommentNode = function(token, parent) {
var commentNode = this.treeAdapter.createCommentNode(token.data);
this.treeAdapter.appendChild(parent, commentNode);
};
Parser.prototype._insertCharacters = function(token) {
if (this._shouldFosterParentOnInsertion()) this._fosterParentText(token.chars); else {
var parent = this.openElements.currentTmplContent || this.openElements.current;
this.treeAdapter.insertText(parent, token.chars);
}
};
Parser.prototype._adoptNodes = function(donor, recipient) {
while (true) {
var child = this.treeAdapter.getFirstChild(donor);
if (!child) break;
this.treeAdapter.detachNode(child);
this.treeAdapter.appendChild(recipient, child);
}
};
Parser.prototype._shouldProcessTokenInForeignContent = function(token) {
var current = this._getAdjustedCurrentElement();
if (!current || current === this.document) return false;
var ns = this.treeAdapter.getNamespaceURI(current);
if (ns === NS.HTML) return false;
if (this.treeAdapter.getTagName(current) === $.ANNOTATION_XML && ns === NS.MATHML && token.type === Tokenizer.START_TAG_TOKEN && token.tagName === $.SVG) {
return false;
}
var isCharacterToken = token.type === Tokenizer.CHARACTER_TOKEN || token.type === Tokenizer.NULL_CHARACTER_TOKEN || token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN, isMathMLTextStartTag = token.type === Tokenizer.START_TAG_TOKEN && token.tagName !== $.MGLYPH && token.tagName !== $.MALIGNMARK;
if ((isMathMLTextStartTag || isCharacterToken) && this._isMathMLTextIntegrationPoint(current)) return false;
if ((token.type === Tokenizer.START_TAG_TOKEN || isCharacterToken) && this._isHtmlIntegrationPoint(current)) return false;
return token.type !== Tokenizer.EOF_TOKEN;
};
Parser.prototype._processToken = function(token) {
_[this.insertionMode][token.type](this, token);
};
Parser.prototype._processTokenInBodyMode = function(token) {
_[IN_BODY_MODE][token.type](this, token);
};
Parser.prototype._processTokenInForeignContent = function(token) {
if (token.type === Tokenizer.CHARACTER_TOKEN) characterInForeignContent(this, token); else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN) nullCharacterInForeignContent(this, token); else if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN) insertCharacters(this, token); else if (token.type === Tokenizer.COMMENT_TOKEN) appendComment(this, token); else if (token.type === Tokenizer.START_TAG_TOKEN) startTagInForeignContent(this, token); else if (token.type === Tokenizer.END_TAG_TOKEN) endTagInForeignContent(this, token);
};
Parser.prototype._processFakeStartTagWithAttrs = function(tagName, attrs) {
var fakeToken = this.tokenizer.buildStartTagToken(tagName);
fakeToken.attrs = attrs;
this._processToken(fakeToken);
};
Parser.prototype._processFakeStartTag = function(tagName) {
var fakeToken = this.tokenizer.buildStartTagToken(tagName);
this._processToken(fakeToken);
return fakeToken;
};
Parser.prototype._processFakeEndTag = function(tagName) {
var fakeToken = this.tokenizer.buildEndTagToken(tagName);
this._processToken(fakeToken);
return fakeToken;
};
Parser.prototype._isMathMLTextIntegrationPoint = function(element) {
var tn = this.treeAdapter.getTagName(element), ns = this.treeAdapter.getNamespaceURI(element);
return ForeignContent.isMathMLTextIntegrationPoint(tn, ns);
};
Parser.prototype._isHtmlIntegrationPoint = function(element) {
var tn = this.treeAdapter.getTagName(element), ns = this.treeAdapter.getNamespaceURI(element), attrs = this.treeAdapter.getAttrList(element);
return ForeignContent.isHtmlIntegrationPoint(tn, ns, attrs);
};
Parser.prototype._reconstructActiveFormattingElements = function() {
var listLength = this.activeFormattingElements.length;
if (listLength) {
var unopenIdx = listLength, entry = null;
do {
unopenIdx--;
entry = this.activeFormattingElements.entries[unopenIdx];
if (entry.type === FormattingElementList.MARKER_ENTRY || this.openElements.contains(entry.element)) {
unopenIdx++;
break;
}
} while (unopenIdx > 0);
for (var i = unopenIdx; i < listLength; i++) {
entry = this.activeFormattingElements.entries[i];
this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
entry.element = this.openElements.current;
}
}
};
Parser.prototype._closeTableCell = function() {
if (this.openElements.hasInTableScope($.TD)) this._processFakeEndTag($.TD); else this._processFakeEndTag($.TH);
};
Parser.prototype._closePElement = function() {
this.openElements.generateImpliedEndTagsWithExclusion($.P);
this.openElements.popUntilTagNamePopped($.P);
};
Parser.prototype._resetInsertionMode = function() {
for (var i = this.openElements.stackTop, last = false; i >= 0; i--) {
var element = this.openElements.items[i];
if (i === 0) {
last = true;
if (this.fragmentContext) element = this.fragmentContext;
}
var tn = this.treeAdapter.getTagName(element), newInsertionMode = INSERTION_MODE_RESET_MAP[tn];
if (newInsertionMode) {
this.insertionMode = newInsertionMode;
break;
} else if (!last && (tn === $.TD || tn === $.TH)) {
this.insertionMode = IN_CELL_MODE;
break;
} else if (!last && tn === $.HEAD) {
this.insertionMode = IN_HEAD_MODE;
break;
} else if (tn === $.SELECT) {
this._resetInsertionModeForSelect(i);
break;
} else if (tn === $.TEMPLATE) {
this.insertionMode = this.currentTmplInsertionMode;
break;
} else if (tn === $.HTML) {
this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;
break;
} else if (last) {
this.insertionMode = IN_BODY_MODE;
break;
}
}
};
Parser.prototype._resetInsertionModeForSelect = function(selectIdx) {
if (selectIdx > 0) {
for (var i = selectIdx - 1; i > 0; i--) {
var ancestor = this.openElements.items[i], tn = this.treeAdapter.getTagName(ancestor);
if (tn === $.TEMPLATE) break; else if (tn === $.TABLE) {
this.insertionMode = IN_SELECT_IN_TABLE_MODE;
return;
}
}
}
this.insertionMode = IN_SELECT_MODE;
};
Parser.prototype._pushTmplInsertionMode = function(mode) {
this.tmplInsertionModeStack.push(mode);
this.tmplInsertionModeStackTop++;
this.currentTmplInsertionMode = mode;
};
Parser.prototype._popTmplInsertionMode = function() {
this.tmplInsertionModeStack.pop();
this.tmplInsertionModeStackTop--;
this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];
};
Parser.prototype._isElementCausesFosterParenting = function(element) {
var tn = this.treeAdapter.getTagName(element);
return tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn == $.THEAD || tn === $.TR;
};
Parser.prototype._shouldFosterParentOnInsertion = function() {
return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current);
};
Parser.prototype._findFosterParentingLocation = function() {
var location = {
parent: null,
beforeElement: null
};
for (var i = this.openElements.stackTop; i >= 0; i--) {
var openElement = this.openElements.items[i], tn = this.treeAdapter.getTagName(openElement), ns = this.treeAdapter.getNamespaceURI(openElement);
if (tn === $.TEMPLATE && ns === NS.HTML) {
location.parent = this.treeAdapter.getChildNodes(openElement)[0];
break;
} else if (tn === $.TABLE) {
location.parent = this.treeAdapter.getParentNode(openElement);
if (location.parent) location.beforeElement = openElement; else location.parent = this.openElements.items[i - 1];
break;
}
}
if (!location.parent) location.parent = this.openElements.items[0];
return location;
};
Parser.prototype._fosterParentElement = function(element) {
var location = this._findFosterParentingLocation();
if (location.beforeElement) this.treeAdapter.insertBefore(location.parent, element, location.beforeElement); else this.treeAdapter.appendChild(location.parent, element);
};
Parser.prototype._fosterParentText = function(chars) {
var location = this._findFosterParentingLocation();
if (location.beforeElement) this.treeAdapter.insertTextBefore(location.parent, chars, location.beforeElement); else this.treeAdapter.insertText(location.parent, chars);
};
Parser.prototype._isSpecialElement = function(element) {
var tn = this.treeAdapter.getTagName(element), ns = this.treeAdapter.getNamespaceURI(element);
return HTML.SPECIAL_ELEMENTS[ns][tn];
};
function aaObtainFormattingElementEntry(p, token) {
var formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);
if (formattingElementEntry) {
if (!p.openElements.contains(formattingElementEntry.element)) {
p.activeFormattingElements.removeEntry(formattingElementEntry);
formattingElementEntry = null;
} else if (!p.openElements.hasInScope(token.tagName)) formattingElementEntry = null;
} else genericEndTagInBody(p, token);
return formattingElementEntry;
}
function aaObtainFurthestBlock(p, formattingElementEntry) {
var furthestBlock = null;
for (var i = p.openElements.stackTop; i >= 0; i--) {
var element = p.openElements.items[i];
if (element === formattingElementEntry.element) break;
if (p._isSpecialElement(element)) furthestBlock = element;
}
if (!furthestBlock) {
p.openElements.popUntilElementPopped(formattingElementEntry.element);
p.activeFormattingElements.removeEntry(formattingElementEntry);
}
return furthestBlock;
}
function aaInnerLoop(p, furthestBlock, formattingElement) {
var element = null, lastElement = furthestBlock, nextElement = p.openElements.getCommonAncestor(furthestBlock);
for (var i = 0; i < AA_INNER_LOOP_ITER; i++) {
element = nextElement;
nextElement = p.openElements.getCommonAncestor(element);
var elementEntry = p.activeFormattingElements.getElementEntry(element);
if (!elementEntry) {
p.openElements.remove(element);
continue;
}
if (element === formattingElement) break;
element = aaRecreateElementFromEntry(p, elementEntry);
if (lastElement === furthestBlock) p.activeFormattingElements.bookmark = elementEntry;
p.treeAdapter.detachNode(lastElement);
p.treeAdapter.appendChild(element, lastElement);
lastElement = element;
}
return lastElement;
}
function aaRecreateElementFromEntry(p, elementEntry) {
var ns = p.treeAdapter.getNamespaceURI(elementEntry.element), newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);
p.openElements.replace(elementEntry.element, newElement);
elementEntry.element = newElement;
return newElement;
}
function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
if (p._isElementCausesFosterParenting(commonAncestor)) p._fosterParentElement(lastElement); else {
var tn = p.treeAdapter.getTagName(commonAncestor), ns = p.treeAdapter.getNamespaceURI(commonAncestor);
if (tn === $.TEMPLATE && ns === NS.HTML) commonAncestor = p.treeAdapter.getChildNodes(commonAncestor)[0];
p.treeAdapter.appendChild(commonAncestor, lastElement);
}
}
function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
var ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element), token = formattingElementEntry.token, newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);
p._adoptNodes(furthestBlock, newElement);
p.treeAdapter.appendChild(furthestBlock, newElement);
p.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);
p.activeFormattingElements.removeEntry(formattingElementEntry);
p.openElements.remove(formattingElementEntry.element);
p.openElements.insertAfter(furthestBlock, newElement);
}
function callAdoptionAgency(p, token) {
for (var i = 0; i < AA_OUTER_LOOP_ITER; i++) {
var formattingElementEntry = aaObtainFormattingElementEntry(p, token, formattingElementEntry);
if (!formattingElementEntry) break;
var furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);
if (!furthestBlock) break;
p.activeFormattingElements.bookmark = formattingElementEntry;
var lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element), commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);
p.treeAdapter.detachNode(lastElement);
aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
}
}
function ignoreToken(p, token) {}
function appendComment(p, token) {
p._appendCommentNode(token, p.openElements.currentTmplContent || p.openElements.current);
}
function appendCommentToRootHtmlElement(p, token) {
p._appendCommentNode(token, p.openElements.items[0]);
}
function appendCommentToDocument(p, token) {
p._appendCommentNode(token, p.document);
}
function insertCharacters(p, token) {
p._insertCharacters(token);
}
function stopParsing(p, token) {
p.stopped = true;
}
function doctypeInInitialMode(p, token) {
p._setDocumentType(token);
if (token.forceQuirks || Doctype.isQuirks(token.name, token.publicId, token.systemId)) p.treeAdapter.setQuirksMode(p.document);
p.insertionMode = BEFORE_HTML_MODE;
}
function tokenInInitialMode(p, token) {
p.treeAdapter.setQuirksMode(p.document);
p.insertionMode = BEFORE_HTML_MODE;
p._processToken(token);
}
function startTagBeforeHtml(p, token) {
if (token.tagName === $.HTML) {
p._insertElement(token, NS.HTML);
p.insertionMode = BEFORE_HEAD_MODE;
} else tokenBeforeHtml(p, token);
}
function endTagBeforeHtml(p, token) {
var tn = token.tagName;
if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) tokenBeforeHtml(p, token);
}
function tokenBeforeHtml(p, token) {
p._insertFakeRootElement();
p.insertionMode = BEFORE_HEAD_MODE;
p._processToken(token);
}
function startTagBeforeHead(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.HEAD) {
p._insertElement(token, NS.HTML);
p.headElement = p.openElements.current;
p.insertionMode = IN_HEAD_MODE;
} else tokenBeforeHead(p, token);
}
function endTagBeforeHead(p, token) {
var tn = token.tagName;
if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) tokenBeforeHead(p, token);
}
function tokenBeforeHead(p, token) {
p._processFakeStartTag($.HEAD);
p._processToken(token);
}
function startTagInHead(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.COMMAND || tn === $.LINK || tn === $.META) {
p._appendElement(token, NS.HTML);
} else if (tn === $.TITLE) p._switchToTextParsing(token, Tokenizer.MODE.RCDATA); else if (tn === $.NOSCRIPT || tn === $.NOFRAMES || tn === $.STYLE) p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT); else if (tn === $.SCRIPT) p._switchToTextParsing(token, Tokenizer.MODE.SCRIPT_DATA); else if (tn === $.TEMPLATE) {
p._insertTemplate(token, NS.HTML);
p.activeFormattingElements.insertMarker();
p.framesetOk = false;
p.insertionMode = IN_TEMPLATE_MODE;
p._pushTmplInsertionMode(IN_TEMPLATE_MODE);
} else if (tn !== $.HEAD) tokenInHead(p, token);
}
function endTagInHead(p, token) {
var tn = token.tagName;
if (tn === $.HEAD) {
p.openElements.pop();
p.insertionMode = AFTER_HEAD_MODE;
} else if (tn === $.BODY || tn === $.BR || tn === $.HTML) tokenInHead(p, token); else if (tn === $.TEMPLATE && p.openElements.tmplCount > 0) {
p.openElements.generateImpliedEndTags();
p.openElements.popUntilTemplatePopped();
p.activeFormattingElements.clearToLastMarker();
p._popTmplInsertionMode();
p._resetInsertionMode();
}
}
function tokenInHead(p, token) {
p._processFakeEndTag($.HEAD);
p._processToken(token);
}
function startTagAfterHead(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.BODY) {
p._insertElement(token, NS.HTML);
p.framesetOk = false;
p.insertionMode = IN_BODY_MODE;
} else if (tn === $.FRAMESET) {
p._insertElement(token, NS.HTML);
p.insertionMode = IN_FRAMESET_MODE;
} else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
p.openElements.push(p.headElement);
startTagInHead(p, token);
p.openElements.remove(p.headElement);
} else if (tn !== $.HEAD) tokenAfterHead(p, token);
}
function endTagAfterHead(p, token) {
var tn = token.tagName;
if (tn === $.BODY || tn === $.HTML || tn === $.BR) tokenAfterHead(p, token); else if (tn === $.TEMPLATE) endTagInHead(p, token);
}
function tokenAfterHead(p, token) {
p._processFakeStartTag($.BODY);
p.framesetOk = true;
p._processToken(token);
}
function whitespaceCharacterInBody(p, token) {
p._reconstructActiveFormattingElements();
p._insertCharacters(token);
}
function characterInBody(p, token) {
p._reconstructActiveFormattingElements();
p._insertCharacters(token);
p.framesetOk = false;
}
function htmlStartTagInBody(p, token) {
if (p.openElements.tmplCount === 0) p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
}
function bodyStartTagInBody(p, token) {
var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
if (bodyElement && p.openElements.tmplCount === 0) {
p.framesetOk = false;
p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
}
}
function framesetStartTagInBody(p, token) {
var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
if (p.framesetOk && bodyElement) {
p.treeAdapter.detachNode(bodyElement);
p.openElements.popAllUpToHtmlElement();
p._insertElement(token, NS.HTML);
p.insertionMode = IN_FRAMESET_MODE;
}
}
function addressStartTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._insertElement(token, NS.HTML);
}
function numberedHeaderStartTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
var tn = p.openElements.currentTagName;
if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) p.openElements.pop();
p._insertElement(token, NS.HTML);
}
function preStartTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._insertElement(token, NS.HTML);
p.skipNextNewLine = true;
p.framesetOk = false;
}
function formStartTagInBody(p, token) {
var inTemplate = p.openElements.tmplCount > 0;
if (!p.formElement || inTemplate) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._insertElement(token, NS.HTML);
if (!inTemplate) p.formElement = p.openElements.current;
}
}
function listItemStartTagInBody(p, token) {
p.framesetOk = false;
for (var i = p.openElements.stackTop; i >= 0; i--) {
var element = p.openElements.items[i], tn = p.treeAdapter.getTagName(element);
if (token.tagName === $.LI && tn === $.LI || (token.tagName === $.DD || token.tagName === $.DT) && (tn === $.DD || tn == $.DT)) {
p._processFakeEndTag(tn);
break;
}
if (tn !== $.ADDRESS && tn !== $.DIV && tn !== $.P && p._isSpecialElement(element)) break;
}
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._insertElement(token, NS.HTML);
}
function plaintextStartTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._insertElement(token, NS.HTML);
p.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
}
function buttonStartTagInBody(p, token) {
if (p.openElements.hasInScope($.BUTTON)) {
p._processFakeEndTag($.BUTTON);
buttonStartTagInBody(p, token);
} else {
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
p.framesetOk = false;
}
}
function aStartTagInBody(p, token) {
var activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName($.A);
if (activeElementEntry) {
p._processFakeEndTag($.A);
p.openElements.remove(activeElementEntry.element);
p.activeFormattingElements.removeEntry(activeElementEntry);
}
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
p.activeFormattingElements.pushElement(p.openElements.current, token);
}
function bStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
p.activeFormattingElements.pushElement(p.openElements.current, token);
}
function nobrStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
if (p.openElements.hasInScope($.NOBR)) {
p._processFakeEndTag($.NOBR);
p._reconstructActiveFormattingElements();
}
p._insertElement(token, NS.HTML);
p.activeFormattingElements.pushElement(p.openElements.current, token);
}
function appletStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
p.activeFormattingElements.insertMarker();
p.framesetOk = false;
}
function tableStartTagInBody(p, token) {
if (!p.treeAdapter.isQuirksMode(p.document) && p.openElements.hasInButtonScope($.P)) p._closePElement();
p._insertElement(token, NS.HTML);
p.framesetOk = false;
p.insertionMode = IN_TABLE_MODE;
}
function areaStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
p._appendElement(token, NS.HTML);
p.framesetOk = false;
}
function inputStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
p._appendElement(token, NS.HTML);
var inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);
if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE) p.framesetOk = false;
}
function paramStartTagInBody(p, token) {
p._appendElement(token, NS.HTML);
}
function hrStartTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._appendElement(token, NS.HTML);
p.framesetOk = false;
}
function imageStartTagInBody(p, token) {
token.tagName = $.IMG;
areaStartTagInBody(p, token);
}
function isindexStartTagInBody(p, token) {
if (!p.formElement || p.openElements.tmplCount > 0) {
p._processFakeStartTagWithAttrs($.FORM, getSearchableIndexFormAttrs(token));
p._processFakeStartTag($.HR);
p._processFakeStartTag($.LABEL);
p.treeAdapter.insertText(p.openElements.current, getSearchableIndexLabelText(token));
p._processFakeStartTagWithAttrs($.INPUT, getSearchableIndexInputAttrs(token));
p._processFakeEndTag($.LABEL);
p._processFakeStartTag($.HR);
p._processFakeEndTag($.FORM);
}
}
function textareaStartTagInBody(p, token) {
p._insertElement(token, NS.HTML);
p.skipNextNewLine = true;
p.tokenizer.state = Tokenizer.MODE.RCDATA;
p.originalInsertionMode = p.insertionMode;
p.framesetOk = false;
p.insertionMode = TEXT_MODE;
}
function xmpStartTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) p._closePElement();
p._reconstructActiveFormattingElements();
p.framesetOk = false;
p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}
function iframeStartTagInBody(p, token) {
p.framesetOk = false;
p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}
function noembedStartTagInBody(p, token) {
p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}
function selectStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
p.framesetOk = false;
if (p.insertionMode === IN_TABLE_MODE || p.insertionMode === IN_CAPTION_MODE || p.insertionMode === IN_TABLE_BODY_MODE || p.insertionMode === IN_ROW_MODE || p.insertionMode === IN_CELL_MODE) {
p.insertionMode = IN_SELECT_IN_TABLE_MODE;
} else p.insertionMode = IN_SELECT_MODE;
}
function optgroupStartTagInBody(p, token) {
if (p.openElements.currentTagName === $.OPTION) p._processFakeEndTag($.OPTION);
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
}
function rpStartTagInBody(p, token) {
if (p.openElements.hasInScope($.RUBY)) p.openElements.generateImpliedEndTags();
p._insertElement(token, NS.HTML);
}
function menuitemStartTagInBody(p, token) {
p._appendElement(token, NS.HTML);
}
function mathStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
ForeignContent.adjustTokenMathMLAttrs(token);
ForeignContent.adjustTokenXMLAttrs(token);
if (token.selfClosing) p._appendElement(token, NS.MATHML); else p._insertElement(token, NS.MATHML);
}
function svgStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
ForeignContent.adjustTokenSVGAttrs(token);
ForeignContent.adjustTokenXMLAttrs(token);
if (token.selfClosing) p._appendElement(token, NS.SVG); else p._insertElement(token, NS.SVG);
}
function genericStartTagInBody(p, token) {
p._reconstructActiveFormattingElements();
p._insertElement(token, NS.HTML);
}
function startTagInBody(p, token) {
var tn = token.tagName;
switch (tn.length) {
case 1:
if (tn === $.I || tn === $.S || tn === $.B || tn === $.U) bStartTagInBody(p, token); else if (tn === $.P) addressStartTagInBody(p, token); else if (tn === $.A) aStartTagInBody(p, token); else genericStartTagInBody(p, token);
break;

case 2:
if (tn === $.DL || tn === $.OL || tn === $.UL) addressStartTagInBody(p, token); else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) numberedHeaderStartTagInBody(p, token); else if (tn === $.LI || tn === $.DD || tn === $.DT) listItemStartTagInBody(p, token); else if (tn === $.EM || tn === $.TT) bStartTagInBody(p, token); else if (tn === $.BR) areaStartTagInBody(p, token); else if (tn === $.HR) hrStartTagInBody(p, token); else if (tn === $.RP || tn === $.RT) rpStartTagInBody(p, token); else if (tn !== $.TH && tn !== $.TD && tn !== $.TR) genericStartTagInBody(p, token);
break;

case 3:
if (tn === $.DIV || tn === $.DIR || tn === $.NAV) addressStartTagInBody(p, token); else if (tn === $.PRE) preStartTagInBody(p, token); else if (tn === $.BIG) bStartTagInBody(p, token); else if (tn === $.IMG || tn === $.WBR) areaStartTagInBody(p, token); else if (tn === $.XMP) xmpStartTagInBody(p, token); else if (tn === $.SVG) svgStartTagInBody(p, token); else if (tn !== $.COL) genericStartTagInBody(p, token);
break;

case 4:
if (tn === $.HTML) htmlStartTagInBody(p, token); else if (tn === $.BASE || tn === $.LINK || tn === $.META) startTagInHead(p, token); else if (tn === $.BODY) bodyStartTagInBody(p, token); else if (tn === $.MAIN || tn === $.MENU) addressStartTagInBody(p, token); else if (tn === $.FORM) formStartTagInBody(p, token); else if (tn === $.CODE || tn === $.FONT) bStartTagInBody(p, token); else if (tn === $.NOBR) nobrStartTagInBody(p, token); else if (tn === $.AREA) areaStartTagInBody(p, token); else if (tn === $.MATH) mathStartTagInBody(p, token); else if (tn !== $.HEAD) genericStartTagInBody(p, token);
break;

case 5:
if (tn === $.STYLE || tn === $.TITLE) startTagInHead(p, token); else if (tn === $.ASIDE) addressStartTagInBody(p, token); else if (tn === $.SMALL) bStartTagInBody(p, token); else if (tn === $.TABLE) tableStartTagInBody(p, token); else if (tn === $.EMBED) areaStartTagInBody(p, token); else if (tn === $.INPUT) inputStartTagInBody(p, token); else if (tn === $.PARAM || tn === $.TRACK) paramStartTagInBody(p, token); else if (tn === $.IMAGE) imageStartTagInBody(p, token); else if (tn !== $.FRAME && tn !== $.TBODY && tn !== $.TFOOT && tn !== $.THEAD) genericStartTagInBody(p, token);
break;

case 6:
if (tn === $.SCRIPT) startTagInHead(p, token); else if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP) addressStartTagInBody(p, token); else if (tn === $.BUTTON) buttonStartTagInBody(p, token); else if (tn === $.STRIKE || tn === $.STRONG) bStartTagInBody(p, token); else if (tn === $.APPLET || tn === $.OBJECT) appletStartTagInBody(p, token); else if (tn === $.KEYGEN) areaStartTagInBody(p, token); else if (tn === $.SOURCE) paramStartTagInBody(p, token); else if (tn === $.IFRAME) iframeStartTagInBody(p, token); else if (tn === $.SELECT) selectStartTagInBody(p, token); else if (tn === $.OPTION) optgroupStartTagInBody(p, token); else genericStartTagInBody(p, token);
break;

case 7:
if (tn === $.BGSOUND || tn === $.COMMAND) startTagInHead(p, token); else if (tn === $.DETAILS || tn === $.ADDRESS || tn === $.ARTICLE || tn === $.SECTION || tn === $.SUMMARY) addressStartTagInBody(p, token); else if (tn === $.LISTING) preStartTagInBody(p, token); else if (tn === $.MARQUEE) appletStartTagInBody(p, token); else if (tn === $.ISINDEX) isindexStartTagInBody(p, token); else if (tn === $.NOEMBED) noembedStartTagInBody(p, token); else if (tn !== $.CAPTION) genericStartTagInBody(p, token);
break;

case 8:
if (tn === $.BASEFONT || tn === $.MENUITEM) menuitemStartTagInBody(p, token); else if (tn === $.FRAMESET) framesetStartTagInBody(p, token); else if (tn === $.FIELDSET) addressStartTagInBody(p, token); else if (tn === $.TEXTAREA) textareaStartTagInBody(p, token); else if (tn === $.TEMPLATE) startTagInHead(p, token); else if (tn === $.NOSCRIPT) noembedStartTagInBody(p, token); else if (tn === $.OPTGROUP) optgroupStartTagInBody(p, token); else if (tn !== $.COLGROUP) genericStartTagInBody(p, token);
break;

case 9:
if (tn === $.PLAINTEXT) plaintextStartTagInBody(p, token); else genericStartTagInBody(p, token);
break;

case 10:
if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) addressStartTagInBody(p, token); else genericStartTagInBody(p, token);
break;

default:
genericStartTagInBody(p, token);
}
}
function bodyEndTagInBody(p, token) {
if (p.openElements.hasInScope($.BODY)) p.insertionMode = AFTER_BODY_MODE; else token.ignored = true;
}
function htmlEndTagInBody(p, token) {
var fakeToken = p._processFakeEndTag($.BODY);
if (!fakeToken.ignored) p._processToken(token);
}
function addressEndTagInBody(p, token) {
var tn = token.tagName;
if (p.openElements.hasInScope(tn)) {
p.openElements.generateImpliedEndTags();
p.openElements.popUntilTagNamePopped(tn);
}
}
function formEndTagInBody(p, token) {
var inTemplate = p.openElements.tmplCount > 0, formElement = p.formElement;
if (!inTemplate) p.formElement = null;
if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {
p.openElements.generateImpliedEndTags();
if (inTemplate) p.openElements.popUntilTagNamePopped($.FORM); else p.openElements.remove(formElement);
}
}
function pEndTagInBody(p, token) {
if (p.openElements.hasInButtonScope($.P)) {
p.openElements.generateImpliedEndTagsWithExclusion($.P);
p.openElements.popUntilTagNamePopped($.P);
} else {
p._processFakeStartTag($.P);
p._processToken(token);
}
}
function liEndTagInBody(p, token) {
if (p.openElements.hasInListItemScope($.LI)) {
p.openElements.generateImpliedEndTagsWithExclusion($.LI);
p.openElements.popUntilTagNamePopped($.LI);
}
}
function ddEndTagInBody(p, token) {
var tn = token.tagName;
if (p.openElements.hasInScope(tn)) {
p.openElements.generateImpliedEndTagsWithExclusion(tn);
p.openElements.popUntilTagNamePopped(tn);
}
}
function numberedHeaderEndTagInBody(p, token) {
if (p.openElements.hasNumberedHeaderInScope()) {
p.openElements.generateImpliedEndTags();
p.openElements.popUntilNumberedHeaderPopped();
}
}
function appletEndTagInBody(p, token) {
var tn = token.tagName;
if (p.openElements.hasInScope(tn)) {
p.openElements.generateImpliedEndTags();
p.openElements.popUntilTagNamePopped(tn);
p.activeFormattingElements.clearToLastMarker();
}
}
function brEndTagInBody(p, token) {
p._processFakeStartTag($.BR);
}
function genericEndTagInBody(p, token) {
var tn = token.tagName;
for (var i = p.openElements.stackTop; i > 0; i--) {
var element = p.openElements.items[i];
if (p.treeAdapter.getTagName(element) === tn) {
p.openElements.generateImpliedEndTagsWithExclusion(tn);
p.openElements.popUntilElementPopped(element);
break;
}
if (p._isSpecialElement(element)) break;
}
}
function endTagInBody(p, token) {
var tn = token.tagName;
switch (tn.length) {
case 1:
if (tn === $.A || tn === $.B || tn === $.I || tn === $.S || tn == $.U) callAdoptionAgency(p, token); else if (tn === $.P) pEndTagInBody(p, token); else genericEndTagInBody(p, token);
break;

case 2:
if (tn == $.DL || tn === $.UL || tn === $.OL) addressEndTagInBody(p, token); else if (tn === $.LI) liEndTagInBody(p, token); else if (tn === $.DD || tn === $.DT) ddEndTagInBody(p, token); else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) numberedHeaderEndTagInBody(p, token); else if (tn === $.BR) brEndTagInBody(p, token); else if (tn === $.EM || tn === $.TT) callAdoptionAgency(p, token); else genericEndTagInBody(p, token);
break;

case 3:
if (tn === $.BIG) callAdoptionAgency(p, token); else if (tn === $.DIR || tn === $.DIV || tn === $.NAV) addressEndTagInBody(p, token); else genericEndTagInBody(p, token);
break;

case 4:
if (tn === $.BODY) bodyEndTagInBody(p, token); else if (tn === $.HTML) htmlEndTagInBody(p, token); else if (tn === $.FORM) formEndTagInBody(p, token); else if (tn === $.CODE || tn === $.FONT || tn === $.NOBR) callAdoptionAgency(p, token); else if (tn === $.MAIN || tn === $.MENU) addressEndTagInBody(p, token); else genericEndTagInBody(p, token);
break;

case 5:
if (tn === $.ASIDE) addressEndTagInBody(p, token); else if (tn === $.SMALL) callAdoptionAgency(p, token); else genericEndTagInBody(p, token);
break;

case 6:
if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP) addressEndTagInBody(p, token); else if (tn === $.APPLET || tn === $.OBJECT) appletEndTagInBody(p, token); else if (tn == $.STRIKE || tn === $.STRONG) callAdoptionAgency(p, token); else genericEndTagInBody(p, token);
break;

case 7:
if (tn === $.ADDRESS || tn === $.ARTICLE || tn === $.DETAILS || tn === $.SECTION || tn === $.SUMMARY) addressEndTagInBody(p, token); else if (tn === $.MARQUEE) appletEndTagInBody(p, token); else genericEndTagInBody(p, token);
break;

case 8:
if (tn === $.FIELDSET) addressEndTagInBody(p, token); else if (tn === $.TEMPLATE) endTagInHead(p, token); else genericEndTagInBody(p, token);
break;

case 10:
if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) addressEndTagInBody(p, token); else genericEndTagInBody(p, token);
break;

default:
genericEndTagInBody(p, token);
}
}
function eofInBody(p, token) {
if (p.tmplInsertionModeStackTop > -1) eofInTemplate(p, token); else p.stopped = true;
}
function endTagInText(p, token) {
if (!p.fragmentContext && p.scriptHandler && token.tagName === $.SCRIPT) p.scriptHandler(p.document, p.openElements.current);
p.openElements.pop();
p.insertionMode = p.originalInsertionMode;
}
function eofInText(p, token) {
p.openElements.pop();
p.insertionMode = p.originalInsertionMode;
p._processToken(token);
}
function characterInTable(p, token) {
var curTn = p.openElements.currentTagName;
if (curTn === $.TABLE || curTn === $.TBODY || curTn === $.TFOOT || curTn === $.THEAD || curTn === $.TR) {
p.pendingCharacterTokens = [];
p.hasNonWhitespacePendingCharacterToken = false;
p.originalInsertionMode = p.insertionMode;
p.insertionMode = IN_TABLE_TEXT_MODE;
p._processToken(token);
} else tokenInTable(p, token);
}
function captionStartTagInTable(p, token) {
p.openElements.clearBackToTableContext();
p.activeFormattingElements.insertMarker();
p._insertElement(token, NS.HTML);
p.insertionMode = IN_CAPTION_MODE;
}
function colgroupStartTagInTable(p, token) {
p.openElements.clearBackToTableContext();
p._insertElement(token, NS.HTML);
p.insertionMode = IN_COLUMN_GROUP_MODE;
}
function colStartTagInTable(p, token) {
p._processFakeStartTag($.COLGROUP);
p._processToken(token);
}
function tbodyStartTagInTable(p, token) {
p.openElements.clearBackToTableContext();
p._insertElement(token, NS.HTML);
p.insertionMode = IN_TABLE_BODY_MODE;
}
function tdStartTagInTable(p, token) {
p._processFakeStartTag($.TBODY);
p._processToken(token);
}
function tableStartTagInTable(p, token) {
var fakeToken = p._processFakeEndTag($.TABLE);
if (!fakeToken.ignored) p._processToken(token);
}
function inputStartTagInTable(p, token) {
var inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);
if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE) p._appendElement(token, NS.HTML); else tokenInTable(p, token);
}
function formStartTagInTable(p, token) {
if (!p.formElement && p.openElements.tmplCount === 0) {
p._insertElement(token, NS.HTML);
p.formElement = p.openElements.current;
p.openElements.pop();
}
}
function startTagInTable(p, token) {
var tn = token.tagName;
switch (tn.length) {
case 2:
if (tn === $.TD || tn === $.TH || tn === $.TR) tdStartTagInTable(p, token); else tokenInTable(p, token);
break;

case 3:
if (tn === $.COL) colStartTagInTable(p, token); else tokenInTable(p, token);
break;

case 4:
if (tn === $.FORM) formStartTagInTable(p, token); else tokenInTable(p, token);
break;

case 5:
if (tn === $.TABLE) tableStartTagInTable(p, token); else if (tn === $.STYLE) startTagInHead(p, token); else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) tbodyStartTagInTable(p, token); else if (tn === $.INPUT) inputStartTagInTable(p, token); else tokenInTable(p, token);
break;

case 6:
if (tn === $.SCRIPT) startTagInHead(p, token); else tokenInTable(p, token);
break;

case 7:
if (tn === $.CAPTION) captionStartTagInTable(p, token); else tokenInTable(p, token);
break;

case 8:
if (tn === $.COLGROUP) colgroupStartTagInTable(p, token); else if (tn === $.TEMPLATE) startTagInHead(p, token); else tokenInTable(p, token);
break;

default:
tokenInTable(p, token);
}
}
function endTagInTable(p, token) {
var tn = token.tagName;
if (tn === $.TABLE) {
if (p.openElements.hasInTableScope($.TABLE)) {
p.openElements.popUntilTagNamePopped($.TABLE);
p._resetInsertionMode();
} else token.ignored = true;
} else if (tn === $.TEMPLATE) endTagInHead(p, token); else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) {
tokenInTable(p, token);
}
}
function tokenInTable(p, token) {
var savedFosterParentingState = p.fosterParentingEnabled;
p.fosterParentingEnabled = true;
p._processTokenInBodyMode(token);
p.fosterParentingEnabled = savedFosterParentingState;
}
function whitespaceCharacterInTableText(p, token) {
p.pendingCharacterTokens.push(token);
}
function characterInTableText(p, token) {
p.pendingCharacterTokens.push(token);
p.hasNonWhitespacePendingCharacterToken = true;
}
function tokenInTableText(p, token) {
if (p.hasNonWhitespacePendingCharacterToken) {
for (var i = 0; i < p.pendingCharacterTokens.length; i++) tokenInTable(p, p.pendingCharacterTokens[i]);
} else {
for (var i = 0; i < p.pendingCharacterTokens.length; i++) p._insertCharacters(p.pendingCharacterTokens[i]);
}
p.insertionMode = p.originalInsertionMode;
p._processToken(token);
}
function startTagInCaption(p, token) {
var tn = token.tagName;
if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
var fakeToken = p._processFakeEndTag($.CAPTION);
if (!fakeToken.ignored) p._processToken(token);
} else startTagInBody(p, token);
}
function endTagInCaption(p, token) {
var tn = token.tagName;
if (tn === $.CAPTION) {
if (p.openElements.hasInTableScope($.CAPTION)) {
p.openElements.generateImpliedEndTags();
p.openElements.popUntilTagNamePopped($.CAPTION);
p.activeFormattingElements.clearToLastMarker();
p.insertionMode = IN_TABLE_MODE;
} else token.ignored = true;
} else if (tn === $.TABLE) {
var fakeToken = p._processFakeEndTag($.CAPTION);
if (!fakeToken.ignored) p._processToken(token);
} else if (tn !== $.BODY && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) {
endTagInBody(p, token);
}
}
function startTagInColumnGroup(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.COL) p._appendElement(token, NS.HTML); else if (tn === $.TEMPLATE) startTagInHead(p, token); else tokenInColumnGroup(p, token);
}
function endTagInColumnGroup(p, token) {
var tn = token.tagName;
if (tn === $.COLGROUP) {
if (p.openElements.currentTagName !== $.COLGROUP) token.ignored = true; else {
p.openElements.pop();
p.insertionMode = IN_TABLE_MODE;
}
} else if (tn === $.TEMPLATE) endTagInHead(p, token); else if (tn !== $.COL) tokenInColumnGroup(p, token);
}
function tokenInColumnGroup(p, token) {
var fakeToken = p._processFakeEndTag($.COLGROUP);
if (!fakeToken.ignored) p._processToken(token);
}
function startTagInTableBody(p, token) {
var tn = token.tagName;
if (tn === $.TR) {
p.openElements.clearBackToTableBodyContext();
p._insertElement(token, NS.HTML);
p.insertionMode = IN_ROW_MODE;
} else if (tn === $.TH || tn === $.TD) {
p._processFakeStartTag($.TR);
p._processToken(token);
} else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
if (p.openElements.hasTableBodyContextInTableScope()) {
p.openElements.clearBackToTableBodyContext();
p._processFakeEndTag(p.openElements.currentTagName);
p._processToken(token);
}
} else startTagInTable(p, token);
}
function endTagInTableBody(p, token) {
var tn = token.tagName;
if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
if (p.openElements.hasInTableScope(tn)) {
p.openElements.clearBackToTableBodyContext();
p.openElements.pop();
p.insertionMode = IN_TABLE_MODE;
}
} else if (tn === $.TABLE) {
if (p.openElements.hasTableBodyContextInTableScope()) {
p.openElements.clearBackToTableBodyContext();
p._processFakeEndTag(p.openElements.currentTagName);
p._processToken(token);
}
} else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP || tn !== $.HTML && tn !== $.TD && tn !== $.TH && tn !== $.TR) {
endTagInTable(p, token);
}
}
function startTagInRow(p, token) {
var tn = token.tagName;
if (tn === $.TH || tn === $.TD) {
p.openElements.clearBackToTableRowContext();
p._insertElement(token, NS.HTML);
p.insertionMode = IN_CELL_MODE;
p.activeFormattingElements.insertMarker();
} else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
var fakeToken = p._processFakeEndTag($.TR);
if (!fakeToken.ignored) p._processToken(token);
} else startTagInTable(p, token);
}
function endTagInRow(p, token) {
var tn = token.tagName;
if (tn === $.TR) {
if (p.openElements.hasInTableScope($.TR)) {
p.openElements.clearBackToTableRowContext();
p.openElements.pop();
p.insertionMode = IN_TABLE_BODY_MODE;
} else token.ignored = true;
} else if (tn === $.TABLE) {
var fakeToken = p._processFakeEndTag($.TR);
if (!fakeToken.ignored) p._processToken(token);
} else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
if (p.openElements.hasInTableScope(tn)) {
p._processFakeEndTag($.TR);
p._processToken(token);
}
} else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP || tn !== $.HTML && tn !== $.TD && tn !== $.TH) {
endTagInTable(p, token);
}
}
function startTagInCell(p, token) {
var tn = token.tagName;
if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {
p._closeTableCell();
p._processToken(token);
}
} else startTagInBody(p, token);
}
function endTagInCell(p, token) {
var tn = token.tagName;
if (tn === $.TD || tn === $.TH) {
if (p.openElements.hasInTableScope(tn)) {
p.openElements.generateImpliedEndTags();
p.openElements.popUntilTagNamePopped(tn);
p.activeFormattingElements.clearToLastMarker();
p.insertionMode = IN_ROW_MODE;
}
} else if (tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
if (p.openElements.hasInTableScope(tn)) {
p._closeTableCell();
p._processToken(token);
}
} else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML) endTagInBody(p, token);
}
function startTagInSelect(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.OPTION) {
if (p.openElements.currentTagName === $.OPTION) p._processFakeEndTag($.OPTION);
p._insertElement(token, NS.HTML);
} else if (tn === $.OPTGROUP) {
if (p.openElements.currentTagName === $.OPTION) p._processFakeEndTag($.OPTION);
if (p.openElements.currentTagName === $.OPTGROUP) p._processFakeEndTag($.OPTGROUP);
p._insertElement(token, NS.HTML);
} else if (tn === $.SELECT) p._processFakeEndTag($.SELECT); else if (tn === $.INPUT || tn === $.KEYGEN || tn === $.TEXTAREA) {
if (p.openElements.hasInSelectScope($.SELECT)) {
p._processFakeEndTag($.SELECT);
p._processToken(token);
}
} else if (tn === $.SCRIPT || tn === $.TEMPLATE) startTagInHead(p, token);
}
function endTagInSelect(p, token) {
var tn = token.tagName;
if (tn === $.OPTGROUP) {
var prevOpenElement = p.openElements.items[p.openElements.stackTop - 1], prevOpenElementTn = prevOpenElement && p.treeAdapter.getTagName(prevOpenElement);
if (p.openElements.currentTagName === $.OPTION && prevOpenElementTn === $.OPTGROUP) p._processFakeEndTag($.OPTION);
if (p.openElements.currentTagName === $.OPTGROUP) p.openElements.pop();
} else if (tn === $.OPTION) {
if (p.openElements.currentTagName === $.OPTION) p.openElements.pop();
} else if (tn === $.SELECT && p.openElements.hasInSelectScope($.SELECT)) {
p.openElements.popUntilTagNamePopped($.SELECT);
p._resetInsertionMode();
} else if (tn === $.TEMPLATE) endTagInHead(p, token);
}
function startTagInSelectInTable(p, token) {
var tn = token.tagName;
if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
p._processFakeEndTag($.SELECT);
p._processToken(token);
} else startTagInSelect(p, token);
}
function endTagInSelectInTable(p, token) {
var tn = token.tagName;
if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
if (p.openElements.hasInTableScope(tn)) {
p._processFakeEndTag($.SELECT);
p._processToken(token);
}
} else endTagInSelect(p, token);
}
function startTagInTemplate(p, token) {
var tn = token.tagName;
if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
startTagInHead(p, token);
} else {
var newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn] || IN_BODY_MODE;
p._popTmplInsertionMode();
p._pushTmplInsertionMode(newInsertionMode);
p.insertionMode = newInsertionMode;
p._processToken(token);
}
}
function endTagInTemplate(p, token) {
if (token.tagName === $.TEMPLATE) endTagInHead(p, token);
}
function eofInTemplate(p, token) {
if (p.openElements.tmplCount > 0) {
p.openElements.popUntilTemplatePopped();
p.activeFormattingElements.clearToLastMarker();
p._popTmplInsertionMode();
p._resetInsertionMode();
p._processToken(token);
} else p.stopped = true;
}
function startTagAfterBody(p, token) {
if (token.tagName === $.HTML) startTagInBody(p, token); else tokenAfterBody(p, token);
}
function endTagAfterBody(p, token) {
if (token.tagName === $.HTML) {
if (!p.fragmentContext) p.insertionMode = AFTER_AFTER_BODY_MODE;
} else tokenAfterBody(p, token);
}
function tokenAfterBody(p, token) {
p.insertionMode = IN_BODY_MODE;
p._processToken(token);
}
function startTagInFrameset(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.FRAMESET) p._insertElement(token, NS.HTML); else if (tn === $.FRAME) p._appendElement(token, NS.HTML); else if (tn === $.NOFRAMES) startTagInHead(p, token);
}
function endTagInFrameset(p, token) {
if (token.tagName === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
p.openElements.pop();
if (!p.fragmentContext && p.openElements.currentTagName !== $.FRAMESET) p.insertionMode = AFTER_FRAMESET_MODE;
}
}
function startTagAfterFrameset(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.NOFRAMES) startTagInHead(p, token);
}
function endTagAfterFrameset(p, token) {
if (token.tagName === $.HTML) p.insertionMode = AFTER_AFTER_FRAMESET_MODE;
}
function startTagAfterAfterBody(p, token) {
if (token.tagName === $.HTML) startTagInBody(p, token); else tokenAfterAfterBody(p, token);
}
function tokenAfterAfterBody(p, token) {
p.insertionMode = IN_BODY_MODE;
p._processToken(token);
}
function startTagAfterAfterFrameset(p, token) {
var tn = token.tagName;
if (tn === $.HTML) startTagInBody(p, token); else if (tn === $.NOFRAMES) startTagInHead(p, token);
}
function nullCharacterInForeignContent(p, token) {
token.chars = UNICODE.REPLACEMENT_CHARACTER;
p._insertCharacters(token);
}
function characterInForeignContent(p, token) {
p._insertCharacters(token);
p.framesetOk = false;
}
function startTagInForeignContent(p, token) {
if (ForeignContent.causesExit(token) && !p.fragmentContext) {
while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML && !p._isMathMLTextIntegrationPoint(p.openElements.current) && !p._isHtmlIntegrationPoint(p.openElements.current)) {
p.openElements.pop();
}
p._processToken(token);
} else {
var current = p._getAdjustedCurrentElement(), currentNs = p.treeAdapter.getNamespaceURI(current);
if (currentNs === NS.MATHML) ForeignContent.adjustTokenMathMLAttrs(token); else if (currentNs === NS.SVG) {
ForeignContent.adjustTokenSVGTagName(token);
ForeignContent.adjustTokenSVGAttrs(token);
}
ForeignContent.adjustTokenXMLAttrs(token);
if (token.selfClosing) p._appendElement(token, currentNs); else p._insertElement(token, currentNs);
}
}
function endTagInForeignContent(p, token) {
for (var i = p.openElements.stackTop; i > 0; i--) {
var element = p.openElements.items[i];
if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
p._processToken(token);
break;
}
if (p.treeAdapter.getTagName(element).toLowerCase() === token.tagName) {
p.openElements.popUntilElementPopped(element);
break;
}
}
}
}, function(module, exports, __webpack_require__) {
"use strict";
var Preprocessor = __webpack_require__(351), LocationInfoMixin = __webpack_require__(353), UNICODE = __webpack_require__(352), NAMED_ENTITY_TRIE = __webpack_require__(354);
var $ = UNICODE.CODE_POINTS, $$ = UNICODE.CODE_POINT_SEQUENCES;
var NUMERIC_ENTITY_REPLACEMENTS = {
0: 65533,
13: 13,
128: 8364,
129: 129,
130: 8218,
131: 402,
132: 8222,
133: 8230,
134: 8224,
135: 8225,
136: 710,
137: 8240,
138: 352,
139: 8249,
140: 338,
141: 141,
142: 381,
143: 143,
144: 144,
145: 8216,
146: 8217,
147: 8220,
148: 8221,
149: 8226,
150: 8211,
151: 8212,
152: 732,
153: 8482,
154: 353,
155: 8250,
156: 339,
157: 157,
158: 382,
159: 376
};
var DATA_STATE = "DATA_STATE", CHARACTER_REFERENCE_IN_DATA_STATE = "CHARACTER_REFERENCE_IN_DATA_STATE", RCDATA_STATE = "RCDATA_STATE", CHARACTER_REFERENCE_IN_RCDATA_STATE = "CHARACTER_REFERENCE_IN_RCDATA_STATE", RAWTEXT_STATE = "RAWTEXT_STATE", SCRIPT_DATA_STATE = "SCRIPT_DATA_STATE", PLAINTEXT_STATE = "PLAINTEXT_STATE", TAG_OPEN_STATE = "TAG_OPEN_STATE", END_TAG_OPEN_STATE = "END_TAG_OPEN_STATE", TAG_NAME_STATE = "TAG_NAME_STATE", RCDATA_LESS_THAN_SIGN_STATE = "RCDATA_LESS_THAN_SIGN_STATE", RCDATA_END_TAG_OPEN_STATE = "RCDATA_END_TAG_OPEN_STATE", RCDATA_END_TAG_NAME_STATE = "RCDATA_END_TAG_NAME_STATE", RAWTEXT_LESS_THAN_SIGN_STATE = "RAWTEXT_LESS_THAN_SIGN_STATE", RAWTEXT_END_TAG_OPEN_STATE = "RAWTEXT_END_TAG_OPEN_STATE", RAWTEXT_END_TAG_NAME_STATE = "RAWTEXT_END_TAG_NAME_STATE", SCRIPT_DATA_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_LESS_THAN_SIGN_STATE", SCRIPT_DATA_END_TAG_OPEN_STATE = "SCRIPT_DATA_END_TAG_OPEN_STATE", SCRIPT_DATA_END_TAG_NAME_STATE = "SCRIPT_DATA_END_TAG_NAME_STATE", SCRIPT_DATA_ESCAPE_START_STATE = "SCRIPT_DATA_ESCAPE_START_STATE", SCRIPT_DATA_ESCAPE_START_DASH_STATE = "SCRIPT_DATA_ESCAPE_START_DASH_STATE", SCRIPT_DATA_ESCAPED_STATE = "SCRIPT_DATA_ESCAPED_STATE", SCRIPT_DATA_ESCAPED_DASH_STATE = "SCRIPT_DATA_ESCAPED_DASH_STATE", SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = "SCRIPT_DATA_ESCAPED_DASH_DASH_STATE", SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE", SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = "SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE", SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = "SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE", SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = "SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE", SCRIPT_DATA_DOUBLE_ESCAPED_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_STATE", SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE", SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE", SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE", SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = "SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE", BEFORE_ATTRIBUTE_NAME_STATE = "BEFORE_ATTRIBUTE_NAME_STATE", ATTRIBUTE_NAME_STATE = "ATTRIBUTE_NAME_STATE", AFTER_ATTRIBUTE_NAME_STATE = "AFTER_ATTRIBUTE_NAME_STATE", BEFORE_ATTRIBUTE_VALUE_STATE = "BEFORE_ATTRIBUTE_VALUE_STATE", ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = "ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE", ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = "ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE", ATTRIBUTE_VALUE_UNQUOTED_STATE = "ATTRIBUTE_VALUE_UNQUOTED_STATE", CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE = "CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE", AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = "AFTER_ATTRIBUTE_VALUE_QUOTED_STATE", SELF_CLOSING_START_TAG_STATE = "SELF_CLOSING_START_TAG_STATE", BOGUS_COMMENT_STATE = "BOGUS_COMMENT_STATE", MARKUP_DECLARATION_OPEN_STATE = "MARKUP_DECLARATION_OPEN_STATE", COMMENT_START_STATE = "COMMENT_START_STATE", COMMENT_START_DASH_STATE = "COMMENT_START_DASH_STATE", COMMENT_STATE = "COMMENT_STATE", COMMENT_END_DASH_STATE = "COMMENT_END_DASH_STATE", COMMENT_END_STATE = "COMMENT_END_STATE", COMMENT_END_BANG_STATE = "COMMENT_END_BANG_STATE", DOCTYPE_STATE = "DOCTYPE_STATE", BEFORE_DOCTYPE_NAME_STATE = "BEFORE_DOCTYPE_NAME_STATE", DOCTYPE_NAME_STATE = "DOCTYPE_NAME_STATE", AFTER_DOCTYPE_NAME_STATE = "AFTER_DOCTYPE_NAME_STATE", AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = "AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE", BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = "BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE", DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = "DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE", DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = "DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE", AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = "AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE", BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = "BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE", AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = "AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE", BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = "BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE", DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = "DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE", DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = "DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE", AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = "AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE", BOGUS_DOCTYPE_STATE = "BOGUS_DOCTYPE_STATE", CDATA_SECTION_STATE = "CDATA_SECTION_STATE";
function isWhitespace(cp) {
return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;
}
function isAsciiDigit(cp) {
return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;
}
function isAsciiUpper(cp) {
return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;
}
function isAsciiLower(cp) {
return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;
}
function isAsciiAlphaNumeric(cp) {
return isAsciiDigit(cp) || isAsciiUpper(cp) || isAsciiLower(cp);
}
function isDigit(cp, isHex) {
return isAsciiDigit(cp) || isHex && (cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F || cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F);
}
function isReservedCodePoint(cp) {
return cp >= 55296 && cp <= 57343 || cp > 1114111;
}
function toAsciiLowerCodePoint(cp) {
return cp + 32;
}
function toChar(cp) {
if (cp <= 65535) return String.fromCharCode(cp);
cp -= 65536;
return String.fromCharCode(cp >>> 10 & 1023 | 55296) + String.fromCharCode(56320 | cp & 1023);
}
function toAsciiLowerChar(cp) {
return String.fromCharCode(toAsciiLowerCodePoint(cp));
}
var Tokenizer = module.exports = function(html, options) {
this.disableEntitiesDecoding = false;
this.preprocessor = new Preprocessor(html);
this.tokenQueue = [];
this.allowCDATA = false;
this.state = DATA_STATE;
this.returnState = "";
this.consumptionPos = 0;
this.tempBuff = [];
this.additionalAllowedCp = void 0;
this.lastStartTagName = "";
this.currentCharacterToken = null;
this.currentToken = null;
this.currentAttr = null;
if (options) {
this.disableEntitiesDecoding = !options.decodeHtmlEntities;
if (options.locationInfo) LocationInfoMixin.assign(this);
}
};
Tokenizer.CHARACTER_TOKEN = "CHARACTER_TOKEN";
Tokenizer.NULL_CHARACTER_TOKEN = "NULL_CHARACTER_TOKEN";
Tokenizer.WHITESPACE_CHARACTER_TOKEN = "WHITESPACE_CHARACTER_TOKEN";
Tokenizer.START_TAG_TOKEN = "START_TAG_TOKEN";
Tokenizer.END_TAG_TOKEN = "END_TAG_TOKEN";
Tokenizer.COMMENT_TOKEN = "COMMENT_TOKEN";
Tokenizer.DOCTYPE_TOKEN = "DOCTYPE_TOKEN";
Tokenizer.EOF_TOKEN = "EOF_TOKEN";
Tokenizer.MODE = Tokenizer.prototype.MODE = {
DATA: DATA_STATE,
RCDATA: RCDATA_STATE,
RAWTEXT: RAWTEXT_STATE,
SCRIPT_DATA: SCRIPT_DATA_STATE,
PLAINTEXT: PLAINTEXT_STATE
};
Tokenizer.getTokenAttr = function(token, attrName) {
for (var i = token.attrs.length - 1; i >= 0; i--) {
if (token.attrs[i].name === attrName) return token.attrs[i].value;
}
return null;
};
Tokenizer.prototype.getNextToken = function() {
while (!this.tokenQueue.length) this[this.state](this._consume());
return this.tokenQueue.shift();
};
Tokenizer.prototype._consume = function() {
this.consumptionPos++;
return this.preprocessor.advanceAndPeekCodePoint();
};
Tokenizer.prototype._unconsume = function() {
this.consumptionPos--;
this.preprocessor.retreat();
};
Tokenizer.prototype._unconsumeSeveral = function(count) {
while (count--) this._unconsume();
};
Tokenizer.prototype._reconsumeInState = function(state) {
this.state = state;
this._unconsume();
};
Tokenizer.prototype._consumeSubsequentIfMatch = function(pattern, startCp, caseSensitive) {
var rollbackPos = this.consumptionPos, isMatch = true, patternLength = pattern.length, patternPos = 0, cp = startCp, patternCp = void 0;
for (;patternPos < patternLength; patternPos++) {
if (patternPos > 0) cp = this._consume();
if (cp === $.EOF) {
isMatch = false;
break;
}
patternCp = pattern[patternPos];
if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {
isMatch = false;
break;
}
}
if (!isMatch) this._unconsumeSeveral(this.consumptionPos - rollbackPos);
return isMatch;
};
Tokenizer.prototype._lookahead = function() {
var cp = this.preprocessor.advanceAndPeekCodePoint();
this.preprocessor.retreat();
return cp;
};
Tokenizer.prototype.isTempBufferEqualToScriptString = function() {
if (this.tempBuff.length !== $$.SCRIPT_STRING.length) return false;
for (var i = 0; i < this.tempBuff.length; i++) {
if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) return false;
}
return true;
};
Tokenizer.prototype.buildStartTagToken = function(tagName) {
return {
type: Tokenizer.START_TAG_TOKEN,
tagName: tagName,
selfClosing: false,
attrs: []
};
};
Tokenizer.prototype.buildEndTagToken = function(tagName) {
return {
type: Tokenizer.END_TAG_TOKEN,
tagName: tagName,
ignored: false,
attrs: []
};
};
Tokenizer.prototype._createStartTagToken = function(tagNameFirstCh) {
this.currentToken = this.buildStartTagToken(tagNameFirstCh);
};
Tokenizer.prototype._createEndTagToken = function(tagNameFirstCh) {
this.currentToken = this.buildEndTagToken(tagNameFirstCh);
};
Tokenizer.prototype._createCommentToken = function() {
this.currentToken = {
type: Tokenizer.COMMENT_TOKEN,
data: ""
};
};
Tokenizer.prototype._createDoctypeToken = function(doctypeNameFirstCh) {
this.currentToken = {
type: Tokenizer.DOCTYPE_TOKEN,
name: doctypeNameFirstCh || "",
forceQuirks: false,
publicId: null,
systemId: null
};
};
Tokenizer.prototype._createCharacterToken = function(type, ch) {
this.currentCharacterToken = {
type: type,
chars: ch
};
};
Tokenizer.prototype._createAttr = function(attrNameFirstCh) {
this.currentAttr = {
name: attrNameFirstCh,
value: ""
};
};
Tokenizer.prototype._isDuplicateAttr = function() {
return Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) !== null;
};
Tokenizer.prototype._leaveAttrName = function(toState) {
this.state = toState;
if (!this._isDuplicateAttr()) this.currentToken.attrs.push(this.currentAttr);
};
Tokenizer.prototype._isAppropriateEndTagToken = function() {
return this.lastStartTagName === this.currentToken.tagName;
};
Tokenizer.prototype._emitCurrentToken = function() {
this._emitCurrentCharacterToken();
if (this.currentToken.type === Tokenizer.START_TAG_TOKEN) this.lastStartTagName = this.currentToken.tagName;
this.tokenQueue.push(this.currentToken);
this.currentToken = null;
};
Tokenizer.prototype._emitCurrentCharacterToken = function() {
if (this.currentCharacterToken) {
this.tokenQueue.push(this.currentCharacterToken);
this.currentCharacterToken = null;
}
};
Tokenizer.prototype._emitEOFToken = function() {
this._emitCurrentCharacterToken();
this.tokenQueue.push({
type: Tokenizer.EOF_TOKEN
});
};
Tokenizer.prototype._appendCharToCurrentCharacterToken = function(type, ch) {
if (this.currentCharacterToken && this.currentCharacterToken.type !== type) this._emitCurrentCharacterToken();
if (this.currentCharacterToken) this.currentCharacterToken.chars += ch; else this._createCharacterToken(type, ch);
};
Tokenizer.prototype._emitCodePoint = function(cp) {
var type = Tokenizer.CHARACTER_TOKEN;
if (isWhitespace(cp)) type = Tokenizer.WHITESPACE_CHARACTER_TOKEN; else if (cp === $.NULL) type = Tokenizer.NULL_CHARACTER_TOKEN;
this._appendCharToCurrentCharacterToken(type, toChar(cp));
};
Tokenizer.prototype._emitSeveralCodePoints = function(codePoints) {
for (var i = 0; i < codePoints.length; i++) this._emitCodePoint(codePoints[i]);
};
Tokenizer.prototype._emitChar = function(ch) {
this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);
};
Tokenizer.prototype._consumeNumericEntity = function(isHex) {
var digits = "", nextCp = void 0;
do {
digits += toChar(this._consume());
nextCp = this._lookahead();
} while (nextCp !== $.EOF && isDigit(nextCp, isHex));
if (this._lookahead() === $.SEMICOLON) this._consume();
var referencedCp = parseInt(digits, isHex ? 16 : 10), replacement = NUMERIC_ENTITY_REPLACEMENTS[referencedCp];
if (replacement) return replacement;
if (isReservedCodePoint(referencedCp)) return $.REPLACEMENT_CHARACTER;
return referencedCp;
};
Tokenizer.prototype._consumeNamedEntity = function(startCp, inAttr) {
var referencedCodePoints = null, entityCodePointsCount = 0, cp = startCp, leaf = NAMED_ENTITY_TRIE[cp], consumedCount = 1, semicolonTerminated = false;
for (;leaf && cp !== $.EOF; cp = this._consume(), consumedCount++, leaf = leaf.l && leaf.l[cp]) {
if (leaf.c) {
referencedCodePoints = leaf.c;
entityCodePointsCount = consumedCount;
if (cp === $.SEMICOLON) {
semicolonTerminated = true;
break;
}
}
}
if (referencedCodePoints) {
if (!semicolonTerminated) {
this._unconsumeSeveral(consumedCount - entityCodePointsCount);
if (inAttr) {
var nextCp = this._lookahead();
if (nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp)) {
this._unconsumeSeveral(entityCodePointsCount);
return null;
}
}
}
return referencedCodePoints;
}
this._unconsumeSeveral(consumedCount);
return null;
};
Tokenizer.prototype._consumeCharacterReference = function(startCp, inAttr) {
if (this.disableEntitiesDecoding || isWhitespace(startCp) || startCp === $.GREATER_THAN_SIGN || startCp === $.AMPERSAND || startCp === this.additionalAllowedCp || startCp === $.EOF) {
this._unconsume();
return null;
} else if (startCp === $.NUMBER_SIGN) {
var isHex = false, nextCp = this._lookahead();
if (nextCp === $.LATIN_SMALL_X || nextCp === $.LATIN_CAPITAL_X) {
this._consume();
isHex = true;
}
nextCp = this._lookahead();
if (nextCp !== $.EOF && isDigit(nextCp, isHex)) return [ this._consumeNumericEntity(isHex) ]; else {
this._unconsumeSeveral(isHex ? 2 : 1);
return null;
}
} else return this._consumeNamedEntity(startCp, inAttr);
};
var _ = Tokenizer.prototype;
_[DATA_STATE] = function dataState(cp) {
if (cp === $.AMPERSAND) this.state = CHARACTER_REFERENCE_IN_DATA_STATE; else if (cp === $.LESS_THAN_SIGN) this.state = TAG_OPEN_STATE; else if (cp === $.NULL) this._emitCodePoint(cp); else if (cp === $.EOF) this._emitEOFToken(); else this._emitCodePoint(cp);
};
_[CHARACTER_REFERENCE_IN_DATA_STATE] = function characterReferenceInDataState(cp) {
this.state = DATA_STATE;
this.additionalAllowedCp = void 0;
var referencedCodePoints = this._consumeCharacterReference(cp, false);
if (referencedCodePoints) this._emitSeveralCodePoints(referencedCodePoints); else this._emitChar("&");
};
_[RCDATA_STATE] = function rcdataState(cp) {
if (cp === $.AMPERSAND) this.state = CHARACTER_REFERENCE_IN_RCDATA_STATE; else if (cp === $.LESS_THAN_SIGN) this.state = RCDATA_LESS_THAN_SIGN_STATE; else if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER); else if (cp === $.EOF) this._emitEOFToken(); else this._emitCodePoint(cp);
};
_[CHARACTER_REFERENCE_IN_RCDATA_STATE] = function characterReferenceInRcdataState(cp) {
this.state = RCDATA_STATE;
this.additionalAllowedCp = void 0;
var referencedCodePoints = this._consumeCharacterReference(cp, false);
if (referencedCodePoints) this._emitSeveralCodePoints(referencedCodePoints); else this._emitChar("&");
};
_[RAWTEXT_STATE] = function rawtextState(cp) {
if (cp === $.LESS_THAN_SIGN) this.state = RAWTEXT_LESS_THAN_SIGN_STATE; else if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER); else if (cp === $.EOF) this._emitEOFToken(); else this._emitCodePoint(cp);
};
_[SCRIPT_DATA_STATE] = function scriptDataState(cp) {
if (cp === $.LESS_THAN_SIGN) this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE; else if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER); else if (cp === $.EOF) this._emitEOFToken(); else this._emitCodePoint(cp);
};
_[PLAINTEXT_STATE] = function plaintextState(cp) {
if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER); else if (cp === $.EOF) this._emitEOFToken(); else this._emitCodePoint(cp);
};
_[TAG_OPEN_STATE] = function tagOpenState(cp) {
if (cp === $.EXCLAMATION_MARK) this.state = MARKUP_DECLARATION_OPEN_STATE; else if (cp === $.SOLIDUS) this.state = END_TAG_OPEN_STATE; else if (isAsciiUpper(cp)) {
this._createStartTagToken(toAsciiLowerChar(cp));
this.state = TAG_NAME_STATE;
} else if (isAsciiLower(cp)) {
this._createStartTagToken(toChar(cp));
this.state = TAG_NAME_STATE;
} else if (cp === $.QUESTION_MARK) {
this[BOGUS_COMMENT_STATE](cp);
} else {
this._emitChar("<");
this._reconsumeInState(DATA_STATE);
}
};
_[END_TAG_OPEN_STATE] = function endTagOpenState(cp) {
if (isAsciiUpper(cp)) {
this._createEndTagToken(toAsciiLowerChar(cp));
this.state = TAG_NAME_STATE;
} else if (isAsciiLower(cp)) {
this._createEndTagToken(toChar(cp));
this.state = TAG_NAME_STATE;
} else if (cp === $.GREATER_THAN_SIGN) this.state = DATA_STATE; else if (cp === $.EOF) {
this._reconsumeInState(DATA_STATE);
this._emitChar("<");
this._emitChar("/");
} else {
this[BOGUS_COMMENT_STATE](cp);
}
};
_[TAG_NAME_STATE] = function tagNameState(cp) {
if (isWhitespace(cp)) this.state = BEFORE_ATTRIBUTE_NAME_STATE; else if (cp === $.SOLIDUS) this.state = SELF_CLOSING_START_TAG_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (isAsciiUpper(cp)) this.currentToken.tagName += toAsciiLowerChar(cp); else if (cp === $.NULL) this.currentToken.tagName += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this.currentToken.tagName += toChar(cp);
};
_[RCDATA_LESS_THAN_SIGN_STATE] = function rcdataLessThanSignState(cp) {
if (cp === $.SOLIDUS) {
this.tempBuff = [];
this.state = RCDATA_END_TAG_OPEN_STATE;
} else {
this._emitChar("<");
this._reconsumeInState(RCDATA_STATE);
}
};
_[RCDATA_END_TAG_OPEN_STATE] = function rcdataEndTagOpenState(cp) {
if (isAsciiUpper(cp)) {
this._createEndTagToken(toAsciiLowerChar(cp));
this.tempBuff.push(cp);
this.state = RCDATA_END_TAG_NAME_STATE;
} else if (isAsciiLower(cp)) {
this._createEndTagToken(toChar(cp));
this.tempBuff.push(cp);
this.state = RCDATA_END_TAG_NAME_STATE;
} else {
this._emitChar("<");
this._emitChar("/");
this._reconsumeInState(RCDATA_STATE);
}
};
_[RCDATA_END_TAG_NAME_STATE] = function rcdataEndTagNameState(cp) {
if (isAsciiUpper(cp)) {
this.currentToken.tagName += toAsciiLowerChar(cp);
this.tempBuff.push(cp);
} else if (isAsciiLower(cp)) {
this.currentToken.tagName += toChar(cp);
this.tempBuff.push(cp);
} else {
if (this._isAppropriateEndTagToken()) {
if (isWhitespace(cp)) {
this.state = BEFORE_ATTRIBUTE_NAME_STATE;
return;
}
if (cp === $.SOLIDUS) {
this.state = SELF_CLOSING_START_TAG_STATE;
return;
}
if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
return;
}
}
this._emitChar("<");
this._emitChar("/");
this._emitSeveralCodePoints(this.tempBuff);
this._reconsumeInState(RCDATA_STATE);
}
};
_[RAWTEXT_LESS_THAN_SIGN_STATE] = function rawtextLessThanSignState(cp) {
if (cp === $.SOLIDUS) {
this.tempBuff = [];
this.state = RAWTEXT_END_TAG_OPEN_STATE;
} else {
this._emitChar("<");
this._reconsumeInState(RAWTEXT_STATE);
}
};
_[RAWTEXT_END_TAG_OPEN_STATE] = function rawtextEndTagOpenState(cp) {
if (isAsciiUpper(cp)) {
this._createEndTagToken(toAsciiLowerChar(cp));
this.tempBuff.push(cp);
this.state = RAWTEXT_END_TAG_NAME_STATE;
} else if (isAsciiLower(cp)) {
this._createEndTagToken(toChar(cp));
this.tempBuff.push(cp);
this.state = RAWTEXT_END_TAG_NAME_STATE;
} else {
this._emitChar("<");
this._emitChar("/");
this._reconsumeInState(RAWTEXT_STATE);
}
};
_[RAWTEXT_END_TAG_NAME_STATE] = function rawtextEndTagNameState(cp) {
if (isAsciiUpper(cp)) {
this.currentToken.tagName += toAsciiLowerChar(cp);
this.tempBuff.push(cp);
} else if (isAsciiLower(cp)) {
this.currentToken.tagName += toChar(cp);
this.tempBuff.push(cp);
} else {
if (this._isAppropriateEndTagToken()) {
if (isWhitespace(cp)) {
this.state = BEFORE_ATTRIBUTE_NAME_STATE;
return;
}
if (cp === $.SOLIDUS) {
this.state = SELF_CLOSING_START_TAG_STATE;
return;
}
if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
return;
}
}
this._emitChar("<");
this._emitChar("/");
this._emitSeveralCodePoints(this.tempBuff);
this._reconsumeInState(RAWTEXT_STATE);
}
};
_[SCRIPT_DATA_LESS_THAN_SIGN_STATE] = function scriptDataLessThanSignState(cp) {
if (cp === $.SOLIDUS) {
this.tempBuff = [];
this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;
} else if (cp === $.EXCLAMATION_MARK) {
this.state = SCRIPT_DATA_ESCAPE_START_STATE;
this._emitChar("<");
this._emitChar("!");
} else {
this._emitChar("<");
this._reconsumeInState(SCRIPT_DATA_STATE);
}
};
_[SCRIPT_DATA_END_TAG_OPEN_STATE] = function scriptDataEndTagOpenState(cp) {
if (isAsciiUpper(cp)) {
this._createEndTagToken(toAsciiLowerChar(cp));
this.tempBuff.push(cp);
this.state = SCRIPT_DATA_END_TAG_NAME_STATE;
} else if (isAsciiLower(cp)) {
this._createEndTagToken(toChar(cp));
this.tempBuff.push(cp);
this.state = SCRIPT_DATA_END_TAG_NAME_STATE;
} else {
this._emitChar("<");
this._emitChar("/");
this._reconsumeInState(SCRIPT_DATA_STATE);
}
};
_[SCRIPT_DATA_END_TAG_NAME_STATE] = function scriptDataEndTagNameState(cp) {
if (isAsciiUpper(cp)) {
this.currentToken.tagName += toAsciiLowerChar(cp);
this.tempBuff.push(cp);
} else if (isAsciiLower(cp)) {
this.currentToken.tagName += toChar(cp);
this.tempBuff.push(cp);
} else {
if (this._isAppropriateEndTagToken()) {
if (isWhitespace(cp)) {
this.state = BEFORE_ATTRIBUTE_NAME_STATE;
return;
} else if (cp === $.SOLIDUS) {
this.state = SELF_CLOSING_START_TAG_STATE;
return;
} else if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
return;
}
}
this._emitChar("<");
this._emitChar("/");
this._emitSeveralCodePoints(this.tempBuff);
this._reconsumeInState(SCRIPT_DATA_STATE);
}
};
_[SCRIPT_DATA_ESCAPE_START_STATE] = function scriptDataEscapeStartState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;
this._emitChar("-");
} else this._reconsumeInState(SCRIPT_DATA_STATE);
};
_[SCRIPT_DATA_ESCAPE_START_DASH_STATE] = function scriptDataEscapeStartDashState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
this._emitChar("-");
} else this._reconsumeInState(SCRIPT_DATA_STATE);
};
_[SCRIPT_DATA_ESCAPED_STATE] = function scriptDataEscapedState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;
this._emitChar("-");
} else if (cp === $.LESS_THAN_SIGN) this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE; else if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER); else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this._emitCodePoint(cp);
};
_[SCRIPT_DATA_ESCAPED_DASH_STATE] = function scriptDataEscapedDashState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
this._emitChar("-");
} else if (cp === $.LESS_THAN_SIGN) this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE; else if (cp === $.NULL) {
this.state = SCRIPT_DATA_ESCAPED_STATE;
this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this.state = SCRIPT_DATA_ESCAPED_STATE;
this._emitCodePoint(cp);
}
};
_[SCRIPT_DATA_ESCAPED_DASH_DASH_STATE] = function scriptDataEscapedDashDashState(cp) {
if (cp === $.HYPHEN_MINUS) this._emitChar("-"); else if (cp === $.LESS_THAN_SIGN) this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.state = SCRIPT_DATA_STATE;
this._emitChar(">");
} else if (cp === $.NULL) {
this.state = SCRIPT_DATA_ESCAPED_STATE;
this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this.state = SCRIPT_DATA_ESCAPED_STATE;
this._emitCodePoint(cp);
}
};
_[SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE] = function scriptDataEscapedLessThanSignState(cp) {
if (cp === $.SOLIDUS) {
this.tempBuff = [];
this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;
} else if (isAsciiUpper(cp)) {
this.tempBuff = [];
this.tempBuff.push(toAsciiLowerCodePoint(cp));
this.state = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;
this._emitChar("<");
this._emitCodePoint(cp);
} else if (isAsciiLower(cp)) {
this.tempBuff = [];
this.tempBuff.push(cp);
this.state = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;
this._emitChar("<");
this._emitCodePoint(cp);
} else {
this._emitChar("<");
this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
}
};
_[SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE] = function scriptDataEscapedEndTagOpenState(cp) {
if (isAsciiUpper(cp)) {
this._createEndTagToken(toAsciiLowerChar(cp));
this.tempBuff.push(cp);
this.state = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;
} else if (isAsciiLower(cp)) {
this._createEndTagToken(toChar(cp));
this.tempBuff.push(cp);
this.state = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;
} else {
this._emitChar("<");
this._emitChar("/");
this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
}
};
_[SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE] = function scriptDataEscapedEndTagNameState(cp) {
if (isAsciiUpper(cp)) {
this.currentToken.tagName += toAsciiLowerChar(cp);
this.tempBuff.push(cp);
} else if (isAsciiLower(cp)) {
this.currentToken.tagName += toChar(cp);
this.tempBuff.push(cp);
} else {
if (this._isAppropriateEndTagToken()) {
if (isWhitespace(cp)) {
this.state = BEFORE_ATTRIBUTE_NAME_STATE;
return;
}
if (cp === $.SOLIDUS) {
this.state = SELF_CLOSING_START_TAG_STATE;
return;
}
if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
return;
}
}
this._emitChar("<");
this._emitChar("/");
this._emitSeveralCodePoints(this.tempBuff);
this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
}
};
_[SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE] = function scriptDataDoubleEscapeStartState(cp) {
if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
this.state = this.isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;
this._emitCodePoint(cp);
} else if (isAsciiUpper(cp)) {
this.tempBuff.push(toAsciiLowerCodePoint(cp));
this._emitCodePoint(cp);
} else if (isAsciiLower(cp)) {
this.tempBuff.push(cp);
this._emitCodePoint(cp);
} else this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
};
_[SCRIPT_DATA_DOUBLE_ESCAPED_STATE] = function scriptDataDoubleEscapedState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;
this._emitChar("-");
} else if (cp === $.LESS_THAN_SIGN) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
this._emitChar("<");
} else if (cp === $.NULL) this._emitChar(UNICODE.REPLACEMENT_CHARACTER); else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this._emitCodePoint(cp);
};
_[SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE] = function scriptDataDoubleEscapedDashState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;
this._emitChar("-");
} else if (cp === $.LESS_THAN_SIGN) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
this._emitChar("<");
} else if (cp === $.NULL) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
this._emitCodePoint(cp);
}
};
_[SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE] = function scriptDataDoubleEscapedDashDashState(cp) {
if (cp === $.HYPHEN_MINUS) this._emitChar("-"); else if (cp === $.LESS_THAN_SIGN) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
this._emitChar("<");
} else if (cp === $.GREATER_THAN_SIGN) {
this.state = SCRIPT_DATA_STATE;
this._emitChar(">");
} else if (cp === $.NULL) {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
this._emitCodePoint(cp);
}
};
_[SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE] = function scriptDataDoubleEscapedLessThanSignState(cp) {
if (cp === $.SOLIDUS) {
this.tempBuff = [];
this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;
this._emitChar("/");
} else this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
};
_[SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE] = function scriptDataDoubleEscapeEndState(cp) {
if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
this.state = this.isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
this._emitCodePoint(cp);
} else if (isAsciiUpper(cp)) {
this.tempBuff.push(toAsciiLowerCodePoint(cp));
this._emitCodePoint(cp);
} else if (isAsciiLower(cp)) {
this.tempBuff.push(cp);
this._emitCodePoint(cp);
} else this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
};
_[BEFORE_ATTRIBUTE_NAME_STATE] = function beforeAttributeNameState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.SOLIDUS) this.state = SELF_CLOSING_START_TAG_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (isAsciiUpper(cp)) {
this._createAttr(toAsciiLowerChar(cp));
this.state = ATTRIBUTE_NAME_STATE;
} else if (cp === $.NULL) {
this._createAttr(UNICODE.REPLACEMENT_CHARACTER);
this.state = ATTRIBUTE_NAME_STATE;
} else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN) {
this._createAttr(toChar(cp));
this.state = ATTRIBUTE_NAME_STATE;
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this._createAttr(toChar(cp));
this.state = ATTRIBUTE_NAME_STATE;
}
};
_[ATTRIBUTE_NAME_STATE] = function attributeNameState(cp) {
if (isWhitespace(cp)) this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE); else if (cp === $.SOLIDUS) this._leaveAttrName(SELF_CLOSING_START_TAG_STATE); else if (cp === $.EQUALS_SIGN) this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE); else if (cp === $.GREATER_THAN_SIGN) {
this._leaveAttrName(DATA_STATE);
this._emitCurrentToken();
} else if (isAsciiUpper(cp)) this.currentAttr.name += toAsciiLowerChar(cp); else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) this.currentAttr.name += toChar(cp); else if (cp === $.NULL) this.currentAttr.name += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this.currentAttr.name += toChar(cp);
};
_[AFTER_ATTRIBUTE_NAME_STATE] = function afterAttributeNameState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.SOLIDUS) this.state = SELF_CLOSING_START_TAG_STATE; else if (cp === $.EQUALS_SIGN) this.state = BEFORE_ATTRIBUTE_VALUE_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (isAsciiUpper(cp)) {
this._createAttr(toAsciiLowerChar(cp));
this.state = ATTRIBUTE_NAME_STATE;
} else if (cp === $.NULL) {
this._createAttr(UNICODE.REPLACEMENT_CHARACTER);
this.state = ATTRIBUTE_NAME_STATE;
} else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {
this._createAttr(toChar(cp));
this.state = ATTRIBUTE_NAME_STATE;
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this._createAttr(toChar(cp));
this.state = ATTRIBUTE_NAME_STATE;
}
};
_[BEFORE_ATTRIBUTE_VALUE_STATE] = function beforeAttributeValueState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.QUOTATION_MARK) this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE; else if (cp === $.AMPERSAND) this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE); else if (cp === $.APOSTROPHE) this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE; else if (cp === $.NULL) {
this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER;
this.state = ATTRIBUTE_VALUE_UNQUOTED_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) {
this.currentAttr.value += toChar(cp);
this.state = ATTRIBUTE_VALUE_UNQUOTED_STATE;
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else {
this.currentAttr.value += toChar(cp);
this.state = ATTRIBUTE_VALUE_UNQUOTED_STATE;
}
};
_[ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE] = function attributeValueDoubleQuotedState(cp) {
if (cp === $.QUOTATION_MARK) this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE; else if (cp === $.AMPERSAND) {
this.additionalAllowedCp = $.QUOTATION_MARK;
this.returnState = this.state;
this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
} else if (cp === $.NULL) this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this.currentAttr.value += toChar(cp);
};
_[ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE] = function attributeValueSingleQuotedState(cp) {
if (cp === $.APOSTROPHE) this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE; else if (cp === $.AMPERSAND) {
this.additionalAllowedCp = $.APOSTROPHE;
this.returnState = this.state;
this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
} else if (cp === $.NULL) this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this.currentAttr.value += toChar(cp);
};
_[ATTRIBUTE_VALUE_UNQUOTED_STATE] = function attributeValueUnquotedState(cp) {
if (isWhitespace(cp)) this.state = BEFORE_ATTRIBUTE_NAME_STATE; else if (cp === $.AMPERSAND) {
this.additionalAllowedCp = $.GREATER_THAN_SIGN;
this.returnState = this.state;
this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.NULL) this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) {
this.currentAttr.value += toChar(cp);
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this.currentAttr.value += toChar(cp);
};
_[CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE] = function characterReferenceInAttributeValueState(cp) {
var referencedCodePoints = this._consumeCharacterReference(cp, true);
if (referencedCodePoints) {
for (var i = 0; i < referencedCodePoints.length; i++) this.currentAttr.value += toChar(referencedCodePoints[i]);
} else this.currentAttr.value += "&";
this.state = this.returnState;
};
_[AFTER_ATTRIBUTE_VALUE_QUOTED_STATE] = function afterAttributeValueQuotedState(cp) {
if (isWhitespace(cp)) this.state = BEFORE_ATTRIBUTE_NAME_STATE; else if (cp === $.SOLIDUS) this.state = SELF_CLOSING_START_TAG_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
};
_[SELF_CLOSING_START_TAG_STATE] = function selfClosingStartTagState(cp) {
if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.selfClosing = true;
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.EOF) this._reconsumeInState(DATA_STATE); else this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
};
_[BOGUS_COMMENT_STATE] = function bogusCommentState(cp) {
this._createCommentToken();
while (true) {
if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
break;
} else if (cp === $.EOF) {
this._reconsumeInState(DATA_STATE);
break;
} else {
this.currentToken.data += cp === $.NULL ? UNICODE.REPLACEMENT_CHARACTER : toChar(cp);
cp = this._consume();
}
}
this._emitCurrentToken();
};
_[MARKUP_DECLARATION_OPEN_STATE] = function markupDeclarationOpenState(cp) {
if (this._consumeSubsequentIfMatch($$.DASH_DASH_STRING, cp, true)) {
this._createCommentToken();
this.state = COMMENT_START_STATE;
} else if (this._consumeSubsequentIfMatch($$.DOCTYPE_STRING, cp, false)) this.state = DOCTYPE_STATE; else if (this.allowCDATA && this._consumeSubsequentIfMatch($$.CDATA_START_STRING, cp, true)) this.state = CDATA_SECTION_STATE; else {
this[BOGUS_COMMENT_STATE](cp);
}
};
_[COMMENT_START_STATE] = function commentStartState(cp) {
if (cp === $.HYPHEN_MINUS) this.state = COMMENT_START_DASH_STATE; else if (cp === $.NULL) {
this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
this.state = COMMENT_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.EOF) {
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.data += toChar(cp);
this.state = COMMENT_STATE;
}
};
_[COMMENT_START_DASH_STATE] = function commentStartDashState(cp) {
if (cp === $.HYPHEN_MINUS) this.state = COMMENT_END_STATE; else if (cp === $.NULL) {
this.currentToken.data += "-";
this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
this.state = COMMENT_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.EOF) {
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.data += "-";
this.currentToken.data += toChar(cp);
this.state = COMMENT_STATE;
}
};
_[COMMENT_STATE] = function commentState(cp) {
if (cp === $.HYPHEN_MINUS) this.state = COMMENT_END_DASH_STATE; else if (cp === $.NULL) this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) {
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.currentToken.data += toChar(cp);
};
_[COMMENT_END_DASH_STATE] = function commentEndDashState(cp) {
if (cp === $.HYPHEN_MINUS) this.state = COMMENT_END_STATE; else if (cp === $.NULL) {
this.currentToken.data += "-";
this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
this.state = COMMENT_STATE;
} else if (cp === $.EOF) {
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.data += "-";
this.currentToken.data += toChar(cp);
this.state = COMMENT_STATE;
}
};
_[COMMENT_END_STATE] = function commentEndState(cp) {
if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.EXCLAMATION_MARK) this.state = COMMENT_END_BANG_STATE; else if (cp === $.HYPHEN_MINUS) this.currentToken.data += "-"; else if (cp === $.NULL) {
this.currentToken.data += "--";
this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
this.state = COMMENT_STATE;
} else if (cp === $.EOF) {
this._reconsumeInState(DATA_STATE);
this._emitCurrentToken();
} else {
this.currentToken.data += "--";
this.currentToken.data += toChar(cp);
this.state = COMMENT_STATE;
}
};
_[COMMENT_END_BANG_STATE] = function commentEndBangState(cp) {
if (cp === $.HYPHEN_MINUS) {
this.currentToken.data += "--!";
this.state = COMMENT_END_DASH_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.NULL) {
this.currentToken.data += "--!";
this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
this.state = COMMENT_STATE;
} else if (cp === $.EOF) {
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.data += "--!";
this.currentToken.data += toChar(cp);
this.state = COMMENT_STATE;
}
};
_[DOCTYPE_STATE] = function doctypeState(cp) {
if (isWhitespace(cp)) this.state = BEFORE_DOCTYPE_NAME_STATE; else if (cp === $.EOF) {
this._createDoctypeToken();
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
};
_[BEFORE_DOCTYPE_NAME_STATE] = function beforeDoctypeNameState(cp) {
if (isWhitespace(cp)) return;
if (isAsciiUpper(cp)) {
this._createDoctypeToken(toAsciiLowerChar(cp));
this.state = DOCTYPE_NAME_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this._createDoctypeToken();
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this._createDoctypeToken();
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else if (cp === $.NULL) {
this._createDoctypeToken(UNICODE.REPLACEMENT_CHARACTER);
this.state = DOCTYPE_NAME_STATE;
} else {
this._createDoctypeToken(toChar(cp));
this.state = DOCTYPE_NAME_STATE;
}
};
_[DOCTYPE_NAME_STATE] = function doctypeNameState(cp) {
if (isWhitespace(cp)) this.state = AFTER_DOCTYPE_NAME_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (isAsciiUpper(cp)) this.currentToken.name += toAsciiLowerChar(cp); else if (cp === $.NULL) this.currentToken.name += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.currentToken.name += toChar(cp);
};
_[AFTER_DOCTYPE_NAME_STATE] = function afterDoctypeNameState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.GREATER_THAN_SIGN) {
this.state = DATA_STATE;
this._emitCurrentToken();
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else if (this._consumeSubsequentIfMatch($$.PUBLIC_STRING, cp, false)) this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE; else if (this._consumeSubsequentIfMatch($$.SYSTEM_STRING, cp, false)) this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE; else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE] = function afterDoctypePublicKeywordState(cp) {
if (isWhitespace(cp)) this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE; else if (cp === $.QUOTATION_MARK) {
this.currentToken.publicId = "";
this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
} else if (cp === $.APOSTROPHE) {
this.currentToken.publicId = "";
this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE] = function beforeDoctypePublicIdentifierState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.QUOTATION_MARK) {
this.currentToken.publicId = "";
this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
} else if (cp === $.APOSTROPHE) {
this.currentToken.publicId = "";
this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE] = function doctypePublicIdentifierDoubleQuotedState(cp) {
if (cp === $.QUOTATION_MARK) this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE; else if (cp === $.NULL) this.currentToken.publicId += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.currentToken.publicId += toChar(cp);
};
_[DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE] = function doctypePublicIdentifierSingleQuotedState(cp) {
if (cp === $.APOSTROPHE) this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE; else if (cp === $.NULL) this.currentToken.publicId += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.currentToken.publicId += toChar(cp);
};
_[AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE] = function afterDoctypePublicIdentifierState(cp) {
if (isWhitespace(cp)) this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.QUOTATION_MARK) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
} else if (cp === $.APOSTROPHE) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE] = function betweenDoctypePublicAndSystemIdentifiersState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.QUOTATION_MARK) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
} else if (cp === $.APOSTROPHE) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE] = function afterDoctypeSystemKeywordState(cp) {
if (isWhitespace(cp)) this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE; else if (cp === $.QUOTATION_MARK) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
} else if (cp === $.APOSTROPHE) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE] = function beforeDoctypeSystemIdentifierState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.QUOTATION_MARK) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
} else if (cp === $.APOSTROPHE) {
this.currentToken.systemId = "";
this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
} else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else {
this.currentToken.forceQuirks = true;
this.state = BOGUS_DOCTYPE_STATE;
}
};
_[DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE] = function doctypeSystemIdentifierDoubleQuotedState(cp) {
if (cp === $.QUOTATION_MARK) this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.NULL) this.currentToken.systemId += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.currentToken.systemId += toChar(cp);
};
_[DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE] = function doctypeSystemIdentifierSingleQuotedState(cp) {
if (cp === $.APOSTROPHE) this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE; else if (cp === $.GREATER_THAN_SIGN) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.NULL) this.currentToken.systemId += UNICODE.REPLACEMENT_CHARACTER; else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.currentToken.systemId += toChar(cp);
};
_[AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE] = function afterDoctypeSystemIdentifierState(cp) {
if (isWhitespace(cp)) return;
if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this.currentToken.forceQuirks = true;
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
} else this.state = BOGUS_DOCTYPE_STATE;
};
_[BOGUS_DOCTYPE_STATE] = function bogusDoctypeState(cp) {
if (cp === $.GREATER_THAN_SIGN) {
this._emitCurrentToken();
this.state = DATA_STATE;
} else if (cp === $.EOF) {
this._emitCurrentToken();
this._reconsumeInState(DATA_STATE);
}
};
_[CDATA_SECTION_STATE] = function cdataSectionState(cp) {
while (true) {
if (cp === $.EOF) {
this._reconsumeInState(DATA_STATE);
break;
} else if (this._consumeSubsequentIfMatch($$.CDATA_END_STRING, cp, true)) {
this.state = DATA_STATE;
break;
} else {
this._emitCodePoint(cp);
cp = this._consume();
}
}
};
}, function(module, exports, __webpack_require__) {
"use strict";
var UNICODE = __webpack_require__(352);
var $ = UNICODE.CODE_POINTS;
function isReservedCodePoint(cp) {
return cp >= 55296 && cp <= 57343 || cp > 1114111;
}
function isSurrogatePair(cp1, cp2) {
return cp1 >= 55296 && cp1 <= 56319 && cp2 >= 56320 && cp2 <= 57343;
}
function getSurrogatePairCodePoint(cp1, cp2) {
return (cp1 - 55296) * 1024 + 9216 + cp2;
}
var Preprocessor = module.exports = function(html) {
this.write(html);
this.pos = this.html.charCodeAt(0) === $.BOM ? 0 : -1;
this.gapStack = [];
this.lastGapPos = -1;
this.skipNextNewLine = false;
};
Preprocessor.prototype.write = function(html) {
if (this.html) {
this.html = this.html.substring(0, this.pos + 1) + html + this.html.substring(this.pos + 1, this.html.length);
} else this.html = html;
this.lastCharPos = this.html.length - 1;
};
Preprocessor.prototype.advanceAndPeekCodePoint = function() {
this.pos++;
if (this.pos > this.lastCharPos) return $.EOF;
var cp = this.html.charCodeAt(this.pos);
if (this.skipNextNewLine && cp === $.LINE_FEED) {
this.skipNextNewLine = false;
this._addGap();
return this.advanceAndPeekCodePoint();
}
if (cp === $.CARRIAGE_RETURN) {
this.skipNextNewLine = true;
return $.LINE_FEED;
}
this.skipNextNewLine = false;
return cp >= 55296 ? this._processHighRangeCodePoint(cp) : cp;
};
Preprocessor.prototype._processHighRangeCodePoint = function(cp) {
if (this.pos !== this.lastCharPos) {
var nextCp = this.html.charCodeAt(this.pos + 1);
if (isSurrogatePair(cp, nextCp)) {
this.pos++;
cp = getSurrogatePairCodePoint(cp, nextCp);
this._addGap();
}
}
if (isReservedCodePoint(cp)) cp = $.REPLACEMENT_CHARACTER;
return cp;
};
Preprocessor.prototype._addGap = function() {
this.gapStack.push(this.lastGapPos);
this.lastGapPos = this.pos;
};
Preprocessor.prototype.retreat = function() {
if (this.pos === this.lastGapPos) {
this.lastGapPos = this.gapStack.pop();
this.pos--;
}
this.pos--;
};
}, function(module, exports) {
"use strict";
exports.REPLACEMENT_CHARACTER = "�";
exports.CODE_POINTS = {
EOF: -1,
NULL: 0,
TABULATION: 9,
CARRIAGE_RETURN: 13,
LINE_FEED: 10,
FORM_FEED: 12,
SPACE: 32,
EXCLAMATION_MARK: 33,
QUOTATION_MARK: 34,
NUMBER_SIGN: 35,
AMPERSAND: 38,
APOSTROPHE: 39,
HYPHEN_MINUS: 45,
SOLIDUS: 47,
DIGIT_0: 48,
DIGIT_9: 57,
SEMICOLON: 59,
LESS_THAN_SIGN: 60,
EQUALS_SIGN: 61,
GREATER_THAN_SIGN: 62,
QUESTION_MARK: 63,
LATIN_CAPITAL_A: 65,
LATIN_CAPITAL_F: 70,
LATIN_CAPITAL_X: 88,
LATIN_CAPITAL_Z: 90,
GRAVE_ACCENT: 96,
LATIN_SMALL_A: 97,
LATIN_SMALL_F: 102,
LATIN_SMALL_X: 120,
LATIN_SMALL_Z: 122,
BOM: 65279,
REPLACEMENT_CHARACTER: 65533
};
exports.CODE_POINT_SEQUENCES = {
DASH_DASH_STRING: [ 45, 45 ],
DOCTYPE_STRING: [ 68, 79, 67, 84, 89, 80, 69 ],
CDATA_START_STRING: [ 91, 67, 68, 65, 84, 65, 91 ],
CDATA_END_STRING: [ 93, 93, 62 ],
SCRIPT_STRING: [ 115, 99, 114, 105, 112, 116 ],
PUBLIC_STRING: [ 80, 85, 66, 76, 73, 67 ],
SYSTEM_STRING: [ 83, 89, 83, 84, 69, 77 ]
};
}, function(module, exports) {
"use strict";
exports.assign = function(tokenizer) {
var tokenizerProto = Object.getPrototypeOf(tokenizer);
tokenizer.tokenStartLoc = -1;
tokenizer._attachLocationInfo = function(token) {
token.location = {
start: this.tokenStartLoc,
end: -1
};
};
tokenizer._createStartTagToken = function(tagNameFirstCh) {
tokenizerProto._createStartTagToken.call(this, tagNameFirstCh);
this._attachLocationInfo(this.currentToken);
};
tokenizer._createEndTagToken = function(tagNameFirstCh) {
tokenizerProto._createEndTagToken.call(this, tagNameFirstCh);
this._attachLocationInfo(this.currentToken);
};
tokenizer._createCommentToken = function() {
tokenizerProto._createCommentToken.call(this);
this._attachLocationInfo(this.currentToken);
};
tokenizer._createDoctypeToken = function(doctypeNameFirstCh) {
tokenizerProto._createDoctypeToken.call(this, doctypeNameFirstCh);
this._attachLocationInfo(this.currentToken);
};
tokenizer._createCharacterToken = function(type, ch) {
tokenizerProto._createCharacterToken.call(this, type, ch);
this._attachLocationInfo(this.currentCharacterToken);
};
tokenizer._emitCurrentToken = function() {
if (this.currentCharacterToken) this.currentCharacterToken.location.end = this.currentToken.location.start;
this.currentToken.location.end = this.preprocessor.pos + 1;
tokenizerProto._emitCurrentToken.call(this);
};
tokenizer._emitCurrentCharacterToken = function() {
if (this.currentCharacterToken && this.currentCharacterToken.location.end === -1) {
this.currentCharacterToken.location.end = this.preprocessor.pos;
}
tokenizerProto._emitCurrentCharacterToken.call(this);
};
Object.keys(tokenizerProto.MODE).map(function(modeName) {
return tokenizerProto.MODE[modeName];
}).forEach(function(state) {
tokenizer[state] = function(cp) {
this.tokenStartLoc = this.preprocessor.pos;
tokenizerProto[state].call(this, cp);
};
});
};
}, function(module, exports) {
"use strict";
module.exports = {
65: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 193 ]
}
},
c: [ 193 ]
}
}
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 258 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 194 ]
}
},
c: [ 194 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1040 ]
}
}
}
}
},
69: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 198 ]
}
},
c: [ 198 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120068 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 192 ]
}
},
c: [ 192 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
112: {
l: {
104: {
l: {
97: {
l: {
59: {
c: [ 913 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 256 ]
}
}
}
}
}
}
}
}
},
77: {
l: {
80: {
l: {
59: {
c: [ 38 ]
}
},
c: [ 38 ]
}
}
},
110: {
l: {
100: {
l: {
59: {
c: [ 10835 ]
}
}
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 260 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120120 ]
}
}
}
}
}
}
},
112: {
l: {
112: {
l: {
108: {
l: {
121: {
l: {
70: {
l: {
117: {
l: {
110: {
l: {
99: {
l: {
116: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8289 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 197 ]
}
},
c: [ 197 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119964 ]
}
}
}
}
},
115: {
l: {
105: {
l: {
103: {
l: {
110: {
l: {
59: {
c: [ 8788 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 195 ]
}
},
c: [ 195 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 196 ]
}
},
c: [ 196 ]
}
}
}
}
}
}
},
97: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 225 ]
}
},
c: [ 225 ]
}
}
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 259 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
59: {
c: [ 8766 ]
},
100: {
l: {
59: {
c: [ 8767 ]
}
}
},
69: {
l: {
59: {
c: [ 8766, 819 ]
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 226 ]
}
},
c: [ 226 ]
}
}
}
}
},
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 180 ]
}
},
c: [ 180 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1072 ]
}
}
}
}
},
101: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 230 ]
}
},
c: [ 230 ]
}
}
}
}
}
}
},
102: {
l: {
59: {
c: [ 8289 ]
},
114: {
l: {
59: {
c: [ 120094 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 224 ]
}
},
c: [ 224 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
115: {
l: {
121: {
l: {
109: {
l: {
59: {
c: [ 8501 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
104: {
l: {
59: {
c: [ 8501 ]
}
}
}
}
}
}
},
112: {
l: {
104: {
l: {
97: {
l: {
59: {
c: [ 945 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 257 ]
}
}
}
}
},
108: {
l: {
103: {
l: {
59: {
c: [ 10815 ]
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 38 ]
}
},
c: [ 38 ]
}
}
},
110: {
l: {
100: {
l: {
97: {
l: {
110: {
l: {
100: {
l: {
59: {
c: [ 10837 ]
}
}
}
}
}
}
},
59: {
c: [ 8743 ]
},
100: {
l: {
59: {
c: [ 10844 ]
}
}
},
115: {
l: {
108: {
l: {
111: {
l: {
112: {
l: {
101: {
l: {
59: {
c: [ 10840 ]
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 10842 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 8736 ]
},
101: {
l: {
59: {
c: [ 10660 ]
}
}
},
108: {
l: {
101: {
l: {
59: {
c: [ 8736 ]
}
}
}
}
},
109: {
l: {
115: {
l: {
100: {
l: {
97: {
l: {
97: {
l: {
59: {
c: [ 10664 ]
}
}
},
98: {
l: {
59: {
c: [ 10665 ]
}
}
},
99: {
l: {
59: {
c: [ 10666 ]
}
}
},
100: {
l: {
59: {
c: [ 10667 ]
}
}
},
101: {
l: {
59: {
c: [ 10668 ]
}
}
},
102: {
l: {
59: {
c: [ 10669 ]
}
}
},
103: {
l: {
59: {
c: [ 10670 ]
}
}
},
104: {
l: {
59: {
c: [ 10671 ]
}
}
}
}
},
59: {
c: [ 8737 ]
}
}
}
}
}
}
},
114: {
l: {
116: {
l: {
59: {
c: [ 8735 ]
},
118: {
l: {
98: {
l: {
59: {
c: [ 8894 ]
},
100: {
l: {
59: {
c: [ 10653 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
112: {
l: {
104: {
l: {
59: {
c: [ 8738 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 197 ]
}
}
}
}
},
122: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 9084 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 261 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120146 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10863 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 8776 ]
},
69: {
l: {
59: {
c: [ 10864 ]
}
}
},
101: {
l: {
59: {
c: [ 8778 ]
}
}
},
105: {
l: {
100: {
l: {
59: {
c: [ 8779 ]
}
}
}
}
},
111: {
l: {
115: {
l: {
59: {
c: [ 39 ]
}
}
}
}
},
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 8776 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8778 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 229 ]
}
},
c: [ 229 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119990 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 42 ]
}
}
},
121: {
l: {
109: {
l: {
112: {
l: {
59: {
c: [ 8776 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8781 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 227 ]
}
},
c: [ 227 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 228 ]
}
},
c: [ 228 ]
}
}
}
}
},
119: {
l: {
99: {
l: {
111: {
l: {
110: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8755 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10769 ]
}
}
}
}
}
}
}
}
}
}
},
98: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
99: {
l: {
111: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 8780 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
112: {
l: {
115: {
l: {
105: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 1014 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 8245 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8765 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8909 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
118: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8893 ]
}
}
}
}
}
}
},
119: {
l: {
101: {
l: {
100: {
l: {
59: {
c: [ 8965 ]
},
103: {
l: {
101: {
l: {
59: {
c: [ 8965 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 9141 ]
},
116: {
l: {
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 9142 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
111: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 8780 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1073 ]
}
}
}
}
},
100: {
l: {
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 8222 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
99: {
l: {
97: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8757 ]
},
101: {
l: {
59: {
c: [ 8757 ]
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
112: {
l: {
116: {
l: {
121: {
l: {
118: {
l: {
59: {
c: [ 10672 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
115: {
l: {
105: {
l: {
59: {
c: [ 1014 ]
}
}
}
}
}
}
},
114: {
l: {
110: {
l: {
111: {
l: {
117: {
l: {
59: {
c: [ 8492 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 946 ]
}
}
},
104: {
l: {
59: {
c: [ 8502 ]
}
}
},
119: {
l: {
101: {
l: {
101: {
l: {
110: {
l: {
59: {
c: [ 8812 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120095 ]
}
}
}
}
},
105: {
l: {
103: {
l: {
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8898 ]
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 9711 ]
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 8899 ]
}
}
}
}
}
}
},
111: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10752 ]
}
}
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10753 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 10754 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
113: {
l: {
99: {
l: {
117: {
l: {
112: {
l: {
59: {
c: [ 10758 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 9733 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 9661 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 9651 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10756 ]
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8897 ]
}
}
}
}
}
}
},
119: {
l: {
101: {
l: {
100: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 8896 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
107: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10509 ]
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
108: {
l: {
111: {
l: {
122: {
l: {
101: {
l: {
110: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 10731 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9642 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 9652 ]
},
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 9662 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 9666 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 9656 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
107: {
l: {
59: {
c: [ 9251 ]
}
}
}
}
}
}
},
107: {
l: {
49: {
l: {
50: {
l: {
59: {
c: [ 9618 ]
}
}
},
52: {
l: {
59: {
c: [ 9617 ]
}
}
}
}
},
51: {
l: {
52: {
l: {
59: {
c: [ 9619 ]
}
}
}
}
}
}
},
111: {
l: {
99: {
l: {
107: {
l: {
59: {
c: [ 9608 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
101: {
l: {
59: {
c: [ 61, 8421 ]
},
113: {
l: {
117: {
l: {
105: {
l: {
118: {
l: {
59: {
c: [ 8801, 8421 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
116: {
l: {
59: {
c: [ 8976 ]
}
}
}
}
}
}
},
78: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10989 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120147 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 8869 ]
},
116: {
l: {
111: {
l: {
109: {
l: {
59: {
c: [ 8869 ]
}
}
}
}
}
}
}
}
},
119: {
l: {
116: {
l: {
105: {
l: {
101: {
l: {
59: {
c: [ 8904 ]
}
}
}
}
}
}
}
}
},
120: {
l: {
98: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10697 ]
}
}
}
}
}
}
},
100: {
l: {
108: {
l: {
59: {
c: [ 9488 ]
}
}
},
76: {
l: {
59: {
c: [ 9557 ]
}
}
},
114: {
l: {
59: {
c: [ 9484 ]
}
}
},
82: {
l: {
59: {
c: [ 9554 ]
}
}
}
}
},
68: {
l: {
108: {
l: {
59: {
c: [ 9558 ]
}
}
},
76: {
l: {
59: {
c: [ 9559 ]
}
}
},
114: {
l: {
59: {
c: [ 9555 ]
}
}
},
82: {
l: {
59: {
c: [ 9556 ]
}
}
}
}
},
104: {
l: {
59: {
c: [ 9472 ]
},
100: {
l: {
59: {
c: [ 9516 ]
}
}
},
68: {
l: {
59: {
c: [ 9573 ]
}
}
},
117: {
l: {
59: {
c: [ 9524 ]
}
}
},
85: {
l: {
59: {
c: [ 9576 ]
}
}
}
}
},
72: {
l: {
59: {
c: [ 9552 ]
},
100: {
l: {
59: {
c: [ 9572 ]
}
}
},
68: {
l: {
59: {
c: [ 9574 ]
}
}
},
117: {
l: {
59: {
c: [ 9575 ]
}
}
},
85: {
l: {
59: {
c: [ 9577 ]
}
}
}
}
},
109: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8863 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8862 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8864 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
108: {
l: {
59: {
c: [ 9496 ]
}
}
},
76: {
l: {
59: {
c: [ 9563 ]
}
}
},
114: {
l: {
59: {
c: [ 9492 ]
}
}
},
82: {
l: {
59: {
c: [ 9560 ]
}
}
}
}
},
85: {
l: {
108: {
l: {
59: {
c: [ 9564 ]
}
}
},
76: {
l: {
59: {
c: [ 9565 ]
}
}
},
114: {
l: {
59: {
c: [ 9561 ]
}
}
},
82: {
l: {
59: {
c: [ 9562 ]
}
}
}
}
},
118: {
l: {
59: {
c: [ 9474 ]
},
104: {
l: {
59: {
c: [ 9532 ]
}
}
},
72: {
l: {
59: {
c: [ 9578 ]
}
}
},
108: {
l: {
59: {
c: [ 9508 ]
}
}
},
76: {
l: {
59: {
c: [ 9569 ]
}
}
},
114: {
l: {
59: {
c: [ 9500 ]
}
}
},
82: {
l: {
59: {
c: [ 9566 ]
}
}
}
}
},
86: {
l: {
59: {
c: [ 9553 ]
},
104: {
l: {
59: {
c: [ 9579 ]
}
}
},
72: {
l: {
59: {
c: [ 9580 ]
}
}
},
108: {
l: {
59: {
c: [ 9570 ]
}
}
},
76: {
l: {
59: {
c: [ 9571 ]
}
}
},
114: {
l: {
59: {
c: [ 9567 ]
}
}
},
82: {
l: {
59: {
c: [ 9568 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 8245 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 728 ]
}
}
}
}
}
}
},
118: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 166 ]
}
},
c: [ 166 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119991 ]
}
}
}
}
},
101: {
l: {
109: {
l: {
105: {
l: {
59: {
c: [ 8271 ]
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 8765 ]
},
101: {
l: {
59: {
c: [ 8909 ]
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
98: {
l: {
59: {
c: [ 10693 ]
}
}
},
59: {
c: [ 92 ]
},
104: {
l: {
115: {
l: {
117: {
l: {
98: {
l: {
59: {
c: [ 10184 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
108: {
l: {
108: {
l: {
59: {
c: [ 8226 ]
},
101: {
l: {
116: {
l: {
59: {
c: [ 8226 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
112: {
l: {
59: {
c: [ 8782 ]
},
69: {
l: {
59: {
c: [ 10926 ]
}
}
},
101: {
l: {
59: {
c: [ 8783 ]
},
113: {
l: {
59: {
c: [ 8783 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
66: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
115: {
l: {
108: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8726 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
118: {
l: {
59: {
c: [ 10983 ]
}
}
},
119: {
l: {
101: {
l: {
100: {
l: {
59: {
c: [ 8966 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1041 ]
}
}
}
}
},
101: {
l: {
99: {
l: {
97: {
l: {
117: {
l: {
115: {
l: {
101: {
l: {
59: {
c: [ 8757 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
110: {
l: {
111: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
105: {
l: {
115: {
l: {
59: {
c: [ 8492 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 914 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120069 ]
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120121 ]
}
}
}
}
}
}
},
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 728 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8492 ]
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
112: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8782 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
67: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 262 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8914 ]
},
105: {
l: {
116: {
l: {
97: {
l: {
108: {
l: {
68: {
l: {
105: {
l: {
102: {
l: {
102: {
l: {
101: {
l: {
114: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
105: {
l: {
97: {
l: {
108: {
l: {
68: {
l: {
59: {
c: [ 8517 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
121: {
l: {
108: {
l: {
101: {
l: {
121: {
l: {
115: {
l: {
59: {
c: [ 8493 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 268 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 199 ]
}
},
c: [ 199 ]
}
}
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 264 ]
}
}
}
}
}
}
},
111: {
l: {
110: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8752 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 266 ]
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
108: {
l: {
97: {
l: {
59: {
c: [ 184 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 183 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 8493 ]
}
}
}
}
},
72: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1063 ]
}
}
}
}
}
}
},
104: {
l: {
105: {
l: {
59: {
c: [ 935 ]
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
108: {
l: {
101: {
l: {
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8857 ]
}
}
}
}
}
}
},
77: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8854 ]
}
}
}
}
}
}
}
}
}
}
},
80: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8853 ]
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8855 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
111: {
l: {
99: {
l: {
107: {
l: {
119: {
l: {
105: {
l: {
115: {
l: {
101: {
l: {
67: {
l: {
111: {
l: {
110: {
l: {
116: {
l: {
111: {
l: {
117: {
l: {
114: {
l: {
73: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8754 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
101: {
l: {
67: {
l: {
117: {
l: {
114: {
l: {
108: {
l: {
121: {
l: {
68: {
l: {
111: {
l: {
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
81: {
l: {
117: {
l: {
111: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 8221 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
81: {
l: {
117: {
l: {
111: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 8217 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8759 ]
},
101: {
l: {
59: {
c: [ 10868 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
114: {
l: {
117: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8801 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8751 ]
}
}
}
}
}
}
},
116: {
l: {
111: {
l: {
117: {
l: {
114: {
l: {
73: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8750 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 8450 ]
}
}
},
114: {
l: {
111: {
l: {
100: {
l: {
117: {
l: {
99: {
l: {
116: {
l: {
59: {
c: [ 8720 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
67: {
l: {
108: {
l: {
111: {
l: {
99: {
l: {
107: {
l: {
119: {
l: {
105: {
l: {
115: {
l: {
101: {
l: {
67: {
l: {
111: {
l: {
110: {
l: {
116: {
l: {
111: {
l: {
117: {
l: {
114: {
l: {
73: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8755 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
79: {
l: {
80: {
l: {
89: {
l: {
59: {
c: [ 169 ]
}
},
c: [ 169 ]
}
}
}
}
},
114: {
l: {
111: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10799 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119966 ]
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
67: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8781 ]
}
}
}
}
}
}
},
59: {
c: [ 8915 ]
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 263 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
110: {
l: {
100: {
l: {
59: {
c: [ 10820 ]
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
99: {
l: {
117: {
l: {
112: {
l: {
59: {
c: [ 10825 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10827 ]
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 10823 ]
}
}
}
}
}
}
},
59: {
c: [ 8745 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10816 ]
}
}
}
}
}
}
},
115: {
l: {
59: {
c: [ 8745, 65024 ]
}
}
}
}
},
114: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8257 ]
}
}
}
}
},
111: {
l: {
110: {
l: {
59: {
c: [ 711 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
112: {
l: {
115: {
l: {
59: {
c: [ 10829 ]
}
}
}
}
},
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 269 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 231 ]
}
},
c: [ 231 ]
}
}
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 265 ]
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
115: {
l: {
59: {
c: [ 10828 ]
},
115: {
l: {
109: {
l: {
59: {
c: [ 10832 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 267 ]
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 184 ]
}
},
c: [ 184 ]
}
}
}
}
},
109: {
l: {
112: {
l: {
116: {
l: {
121: {
l: {
118: {
l: {
59: {
c: [ 10674 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
116: {
l: {
59: {
c: [ 162 ]
},
101: {
l: {
114: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 183 ]
}
}
}
}
}
}
}
}
}
}
}
},
c: [ 162 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120096 ]
}
}
}
}
},
104: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1095 ]
}
}
}
}
},
101: {
l: {
99: {
l: {
107: {
l: {
59: {
c: [ 10003 ]
},
109: {
l: {
97: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 10003 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
59: {
c: [ 967 ]
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 710 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8791 ]
}
}
}
}
},
108: {
l: {
101: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8634 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8635 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 8859 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 8858 ]
}
}
}
}
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8861 ]
}
}
}
}
}
}
}
}
},
82: {
l: {
59: {
c: [ 174 ]
}
}
},
83: {
l: {
59: {
c: [ 9416 ]
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 9675 ]
},
69: {
l: {
59: {
c: [ 10691 ]
}
}
},
101: {
l: {
59: {
c: [ 8791 ]
}
}
},
102: {
l: {
110: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10768 ]
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
100: {
l: {
59: {
c: [ 10991 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10690 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
117: {
l: {
98: {
l: {
115: {
l: {
59: {
c: [ 9827 ]
},
117: {
l: {
105: {
l: {
116: {
l: {
59: {
c: [ 9827 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 58 ]
},
101: {
l: {
59: {
c: [ 8788 ]
},
113: {
l: {
59: {
c: [ 8788 ]
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 44 ]
},
116: {
l: {
59: {
c: [ 64 ]
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8705 ]
},
102: {
l: {
110: {
l: {
59: {
c: [ 8728 ]
}
}
}
}
},
108: {
l: {
101: {
l: {
109: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8705 ]
}
}
}
}
}
}
}
}
},
120: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8450 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 8773 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10861 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8750 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120148 ]
}
}
},
114: {
l: {
111: {
l: {
100: {
l: {
59: {
c: [ 8720 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 169 ]
},
115: {
l: {
114: {
l: {
59: {
c: [ 8471 ]
}
}
}
}
}
},
c: [ 169 ]
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8629 ]
}
}
}
}
}
}
},
111: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10007 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119992 ]
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 10959 ]
},
101: {
l: {
59: {
c: [ 10961 ]
}
}
}
}
},
112: {
l: {
59: {
c: [ 10960 ]
},
101: {
l: {
59: {
c: [ 10962 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8943 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
100: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
108: {
l: {
59: {
c: [ 10552 ]
}
}
},
114: {
l: {
59: {
c: [ 10549 ]
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
112: {
l: {
114: {
l: {
59: {
c: [ 8926 ]
}
}
}
}
},
115: {
l: {
99: {
l: {
59: {
c: [ 8927 ]
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8630 ]
},
112: {
l: {
59: {
c: [ 10557 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
98: {
l: {
114: {
l: {
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10824 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10822 ]
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 10826 ]
}
}
}
}
}
}
},
59: {
c: [ 8746 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8845 ]
}
}
}
}
}
}
},
111: {
l: {
114: {
l: {
59: {
c: [ 10821 ]
}
}
}
}
},
115: {
l: {
59: {
c: [ 8746, 65024 ]
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8631 ]
},
109: {
l: {
59: {
c: [ 10556 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
121: {
l: {
101: {
l: {
113: {
l: {
112: {
l: {
114: {
l: {
101: {
l: {
99: {
l: {
59: {
c: [ 8926 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
117: {
l: {
99: {
l: {
99: {
l: {
59: {
c: [ 8927 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8910 ]
}
}
}
}
}
}
},
119: {
l: {
101: {
l: {
100: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 8911 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
101: {
l: {
110: {
l: {
59: {
c: [ 164 ]
}
},
c: [ 164 ]
}
}
}
}
},
118: {
l: {
101: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8630 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8631 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8910 ]
}
}
}
}
}
}
},
119: {
l: {
101: {
l: {
100: {
l: {
59: {
c: [ 8911 ]
}
}
}
}
}
}
}
}
},
119: {
l: {
99: {
l: {
111: {
l: {
110: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8754 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8753 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
108: {
l: {
99: {
l: {
116: {
l: {
121: {
l: {
59: {
c: [ 9005 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
97: {
l: {
103: {
l: {
103: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8224 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
116: {
l: {
104: {
l: {
59: {
c: [ 8504 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8595 ]
}
}
}
}
},
115: {
l: {
104: {
l: {
59: {
c: [ 8208 ]
},
118: {
l: {
59: {
c: [ 8867 ]
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8659 ]
}
}
}
}
}
}
},
98: {
l: {
107: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10511 ]
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
99: {
l: {
59: {
c: [ 733 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 271 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1076 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
103: {
l: {
103: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8225 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8650 ]
}
}
}
}
}
}
},
59: {
c: [ 8518 ]
},
111: {
l: {
116: {
l: {
115: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 10871 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
103: {
l: {
59: {
c: [ 176 ]
}
},
c: [ 176 ]
},
108: {
l: {
116: {
l: {
97: {
l: {
59: {
c: [ 948 ]
}
}
}
}
}
}
},
109: {
l: {
112: {
l: {
116: {
l: {
121: {
l: {
118: {
l: {
59: {
c: [ 10673 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
105: {
l: {
115: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 10623 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120097 ]
}
}
}
}
},
72: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10597 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
108: {
l: {
59: {
c: [ 8643 ]
}
}
},
114: {
l: {
59: {
c: [ 8642 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
97: {
l: {
109: {
l: {
59: {
c: [ 8900 ]
},
111: {
l: {
110: {
l: {
100: {
l: {
59: {
c: [ 8900 ]
},
115: {
l: {
117: {
l: {
105: {
l: {
116: {
l: {
59: {
c: [ 9830 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
59: {
c: [ 9830 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 168 ]
}
}
},
103: {
l: {
97: {
l: {
109: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 989 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
110: {
l: {
59: {
c: [ 8946 ]
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 247 ]
},
105: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 247 ]
},
111: {
l: {
110: {
l: {
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8903 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
c: [ 247 ]
}
}
}
}
},
111: {
l: {
110: {
l: {
120: {
l: {
59: {
c: [ 8903 ]
}
}
}
}
}
}
}
}
}
}
},
106: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1106 ]
}
}
}
}
}
}
},
108: {
l: {
99: {
l: {
111: {
l: {
114: {
l: {
110: {
l: {
59: {
c: [ 8990 ]
}
}
}
}
}
}
},
114: {
l: {
111: {
l: {
112: {
l: {
59: {
c: [ 8973 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
108: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 36 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120149 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 729 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8784 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8785 ]
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8760 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8724 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 8865 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
119: {
l: {
101: {
l: {
100: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 8966 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
110: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8595 ]
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
115: {
l: {
59: {
c: [ 8650 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
111: {
l: {
111: {
l: {
110: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8643 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8642 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
98: {
l: {
107: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10512 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
111: {
l: {
114: {
l: {
110: {
l: {
59: {
c: [ 8991 ]
}
}
}
}
}
}
},
114: {
l: {
111: {
l: {
112: {
l: {
59: {
c: [ 8972 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119993 ]
}
}
},
121: {
l: {
59: {
c: [ 1109 ]
}
}
}
}
},
111: {
l: {
108: {
l: {
59: {
c: [ 10742 ]
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 273 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8945 ]
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
59: {
c: [ 9663 ]
},
102: {
l: {
59: {
c: [ 9662 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8693 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10607 ]
}
}
}
}
}
}
}
}
},
119: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 10662 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
122: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1119 ]
}
}
}
}
},
105: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10239 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
97: {
l: {
103: {
l: {
103: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8225 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8609 ]
}
}
}
}
},
115: {
l: {
104: {
l: {
118: {
l: {
59: {
c: [ 10980 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 270 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1044 ]
}
}
}
}
},
68: {
l: {
59: {
c: [ 8517 ]
},
111: {
l: {
116: {
l: {
114: {
l: {
97: {
l: {
104: {
l: {
100: {
l: {
59: {
c: [ 10513 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
108: {
l: {
59: {
c: [ 8711 ]
},
116: {
l: {
97: {
l: {
59: {
c: [ 916 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120071 ]
}
}
}
}
},
105: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
105: {
l: {
116: {
l: {
105: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
65: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 180 ]
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 729 ]
}
}
},
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
65: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 733 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
71: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 96 ]
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 732 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
111: {
l: {
110: {
l: {
100: {
l: {
59: {
c: [ 8900 ]
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
102: {
l: {
101: {
l: {
114: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
105: {
l: {
97: {
l: {
108: {
l: {
68: {
l: {
59: {
c: [ 8518 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
74: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1026 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120123 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 168 ]
},
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8412 ]
}
}
}
}
}
}
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8784 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
67: {
l: {
111: {
l: {
110: {
l: {
116: {
l: {
111: {
l: {
117: {
l: {
114: {
l: {
73: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8751 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 168 ]
}
}
},
119: {
l: {
110: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8659 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8656 ]
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8660 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 10980 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
110: {
l: {
103: {
l: {
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10232 ]
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10234 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10233 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8658 ]
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8872 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
112: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8657 ]
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8661 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
105: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8741 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
110: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10515 ]
}
}
}
}
}
}
},
59: {
c: [ 8595 ]
},
85: {
l: {
112: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8693 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8659 ]
}
}
}
}
}
}
}
}
}
}
},
66: {
l: {
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 785 ]
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10576 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10590 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10582 ]
}
}
}
}
}
}
},
59: {
c: [ 8637 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
84: {
l: {
101: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10591 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10583 ]
}
}
}
}
}
}
},
59: {
c: [ 8641 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8615 ]
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8868 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119967 ]
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 272 ]
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1029 ]
}
}
}
}
}
}
},
90: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1039 ]
}
}
}
}
}
}
}
}
},
69: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 201 ]
}
},
c: [ 201 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 282 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 202 ]
}
},
c: [ 202 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1069 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 278 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120072 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 200 ]
}
},
c: [ 200 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
109: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8712 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 274 ]
}
}
}
}
}
}
},
112: {
l: {
116: {
l: {
121: {
l: {
83: {
l: {
109: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
83: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9723 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
114: {
l: {
121: {
l: {
83: {
l: {
109: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
83: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9643 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
78: {
l: {
71: {
l: {
59: {
c: [ 330 ]
}
}
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 280 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120124 ]
}
}
}
}
}
}
},
112: {
l: {
115: {
l: {
105: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 917 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10869 ]
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8770 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
108: {
l: {
105: {
l: {
98: {
l: {
114: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
59: {
c: [ 8652 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8496 ]
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 10867 ]
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 919 ]
}
}
}
}
},
84: {
l: {
72: {
l: {
59: {
c: [ 208 ]
}
},
c: [ 208 ]
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 203 ]
}
},
c: [ 203 ]
}
}
}
}
},
120: {
l: {
105: {
l: {
115: {
l: {
116: {
l: {
115: {
l: {
59: {
c: [ 8707 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
111: {
l: {
110: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
105: {
l: {
97: {
l: {
108: {
l: {
69: {
l: {
59: {
c: [ 8519 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 233 ]
}
},
c: [ 233 ]
}
}
}
}
}
}
},
115: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 10862 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 283 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 234 ]
}
},
c: [ 234 ]
},
59: {
c: [ 8790 ]
}
}
}
}
},
111: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8789 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1101 ]
}
}
}
}
},
68: {
l: {
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10871 ]
}
}
}
}
}
}
},
111: {
l: {
116: {
l: {
59: {
c: [ 8785 ]
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 279 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 8519 ]
}
}
},
102: {
l: {
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8786 ]
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120098 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 10906 ]
},
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 232 ]
}
},
c: [ 232 ]
}
}
}
}
}
}
},
115: {
l: {
59: {
c: [ 10902 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10904 ]
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
59: {
c: [ 10905 ]
},
105: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
59: {
c: [ 9191 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
59: {
c: [ 8467 ]
}
}
},
115: {
l: {
59: {
c: [ 10901 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10903 ]
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 275 ]
}
}
}
}
}
}
},
112: {
l: {
116: {
l: {
121: {
l: {
59: {
c: [ 8709 ]
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8709 ]
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 8709 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
112: {
l: {
49: {
l: {
51: {
l: {
59: {
c: [ 8196 ]
}
}
},
52: {
l: {
59: {
c: [ 8197 ]
}
}
}
}
},
59: {
c: [ 8195 ]
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 331 ]
}
}
},
115: {
l: {
112: {
l: {
59: {
c: [ 8194 ]
}
}
}
}
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 281 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120150 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8917 ]
},
115: {
l: {
108: {
l: {
59: {
c: [ 10723 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10865 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
59: {
c: [ 949 ]
},
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 949 ]
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 1013 ]
}
}
}
}
}
}
}
}
},
113: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 8790 ]
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8789 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8770 ]
}
}
}
}
},
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
103: {
l: {
116: {
l: {
114: {
l: {
59: {
c: [ 10902 ]
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10901 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
97: {
l: {
108: {
l: {
115: {
l: {
59: {
c: [ 61 ]
}
}
}
}
}
}
},
101: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 8799 ]
}
}
}
}
}
}
},
105: {
l: {
118: {
l: {
59: {
c: [ 8801 ]
},
68: {
l: {
68: {
l: {
59: {
c: [ 10872 ]
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
112: {
l: {
97: {
l: {
114: {
l: {
115: {
l: {
108: {
l: {
59: {
c: [ 10725 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10609 ]
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8787 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8495 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8784 ]
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 8770 ]
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 951 ]
}
}
},
104: {
l: {
59: {
c: [ 240 ]
}
},
c: [ 240 ]
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 235 ]
}
},
c: [ 235 ]
}
}
},
114: {
l: {
111: {
l: {
59: {
c: [ 8364 ]
}
}
}
}
}
}
},
120: {
l: {
99: {
l: {
108: {
l: {
59: {
c: [ 33 ]
}
}
}
}
},
105: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 8707 ]
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
97: {
l: {
116: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8496 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
110: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
105: {
l: {
97: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 8519 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
115: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8786 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1092 ]
}
}
}
}
},
101: {
l: {
109: {
l: {
97: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 9792 ]
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
105: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 64259 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 64256 ]
}
}
}
}
},
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 64260 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120099 ]
}
}
}
}
},
105: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 64257 ]
}
}
}
}
}
}
}
}
},
106: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 102, 106 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
116: {
l: {
59: {
c: [ 9837 ]
}
}
}
}
},
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 64258 ]
}
}
}
}
}
}
},
116: {
l: {
110: {
l: {
115: {
l: {
59: {
c: [ 9649 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
111: {
l: {
102: {
l: {
59: {
c: [ 402 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120151 ]
}
}
}
}
},
114: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
59: {
c: [ 8704 ]
}
}
}
}
}
}
},
107: {
l: {
59: {
c: [ 8916 ]
},
118: {
l: {
59: {
c: [ 10969 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
116: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10765 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
99: {
l: {
49: {
l: {
50: {
l: {
59: {
c: [ 189 ]
}
},
c: [ 189 ]
},
51: {
l: {
59: {
c: [ 8531 ]
}
}
},
52: {
l: {
59: {
c: [ 188 ]
}
},
c: [ 188 ]
},
53: {
l: {
59: {
c: [ 8533 ]
}
}
},
54: {
l: {
59: {
c: [ 8537 ]
}
}
},
56: {
l: {
59: {
c: [ 8539 ]
}
}
}
}
},
50: {
l: {
51: {
l: {
59: {
c: [ 8532 ]
}
}
},
53: {
l: {
59: {
c: [ 8534 ]
}
}
}
}
},
51: {
l: {
52: {
l: {
59: {
c: [ 190 ]
}
},
c: [ 190 ]
},
53: {
l: {
59: {
c: [ 8535 ]
}
}
},
56: {
l: {
59: {
c: [ 8540 ]
}
}
}
}
},
52: {
l: {
53: {
l: {
59: {
c: [ 8536 ]
}
}
}
}
},
53: {
l: {
54: {
l: {
59: {
c: [ 8538 ]
}
}
},
56: {
l: {
59: {
c: [ 8541 ]
}
}
}
}
},
55: {
l: {
56: {
l: {
59: {
c: [ 8542 ]
}
}
}
}
}
}
},
115: {
l: {
108: {
l: {
59: {
c: [ 8260 ]
}
}
}
}
}
}
},
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 8994 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119995 ]
}
}
}
}
}
}
}
}
},
70: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1060 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120073 ]
}
}
}
}
},
105: {
l: {
108: {
l: {
108: {
l: {
101: {
l: {
100: {
l: {
83: {
l: {
109: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
83: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9724 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
114: {
l: {
121: {
l: {
83: {
l: {
109: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
83: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9642 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120125 ]
}
}
}
}
},
114: {
l: {
65: {
l: {
108: {
l: {
108: {
l: {
59: {
c: [ 8704 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
114: {
l: {
105: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
114: {
l: {
102: {
l: {
59: {
c: [ 8497 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8497 ]
}
}
}
}
}
}
}
}
},
103: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 501 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 947 ]
},
100: {
l: {
59: {
c: [ 989 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 10886 ]
}
}
}
}
},
98: {
l: {
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 287 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 285 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1075 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 289 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 8805 ]
},
108: {
l: {
59: {
c: [ 8923 ]
}
}
},
113: {
l: {
59: {
c: [ 8805 ]
},
113: {
l: {
59: {
c: [ 8807 ]
}
}
},
115: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10878 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
99: {
l: {
59: {
c: [ 10921 ]
}
}
}
}
},
59: {
c: [ 10878 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10880 ]
},
111: {
l: {
59: {
c: [ 10882 ]
},
108: {
l: {
59: {
c: [ 10884 ]
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
59: {
c: [ 8923, 65024 ]
},
101: {
l: {
115: {
l: {
59: {
c: [ 10900 ]
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 8807 ]
},
108: {
l: {
59: {
c: [ 10892 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120100 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 8811 ]
},
103: {
l: {
59: {
c: [ 8921 ]
}
}
}
}
},
105: {
l: {
109: {
l: {
101: {
l: {
108: {
l: {
59: {
c: [ 8503 ]
}
}
}
}
}
}
}
}
},
106: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1107 ]
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
59: {
c: [ 10917 ]
}
}
},
59: {
c: [ 8823 ]
},
69: {
l: {
59: {
c: [ 10898 ]
}
}
},
106: {
l: {
59: {
c: [ 10916 ]
}
}
}
}
},
110: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10890 ]
},
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10890 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 10888 ]
},
113: {
l: {
59: {
c: [ 10888 ]
},
113: {
l: {
59: {
c: [ 8809 ]
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 8809 ]
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8935 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120152 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 96 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8458 ]
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 8819 ]
},
101: {
l: {
59: {
c: [ 10894 ]
}
}
},
108: {
l: {
59: {
c: [ 10896 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
99: {
l: {
99: {
l: {
59: {
c: [ 10919 ]
}
}
},
105: {
l: {
114: {
l: {
59: {
c: [ 10874 ]
}
}
}
}
}
}
},
59: {
c: [ 62 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8919 ]
}
}
}
}
}
}
},
108: {
l: {
80: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10645 ]
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
101: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 10876 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10886 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 10616 ]
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8919 ]
}
}
}
}
}
}
},
101: {
l: {
113: {
l: {
108: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8923 ]
}
}
}
}
}
}
}
}
},
113: {
l: {
108: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10892 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8823 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8819 ]
}
}
}
}
}
}
}
}
}
},
c: [ 62 ]
},
118: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
110: {
l: {
101: {
l: {
113: {
l: {
113: {
l: {
59: {
c: [ 8809, 65024 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
69: {
l: {
59: {
c: [ 8809, 65024 ]
}
}
}
}
}
}
}
}
},
71: {
l: {
97: {
l: {
109: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 915 ]
},
100: {
l: {
59: {
c: [ 988 ]
}
}
}
}
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 286 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 290 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 284 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1043 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 288 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120074 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 8921 ]
}
}
},
74: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1027 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120126 ]
}
}
}
}
}
}
},
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8805 ]
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8923 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8807 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 10914 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8823 ]
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10878 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8819 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119970 ]
}
}
}
}
}
}
},
84: {
l: {
59: {
c: [ 62 ]
}
},
c: [ 62 ]
},
116: {
l: {
59: {
c: [ 8811 ]
}
}
}
}
},
72: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
107: {
l: {
59: {
c: [ 711 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 94 ]
}
}
}
}
},
65: {
l: {
82: {
l: {
68: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1066 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 292 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 8460 ]
}
}
}
}
},
105: {
l: {
108: {
l: {
98: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8459 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 8461 ]
}
}
}
}
},
114: {
l: {
105: {
l: {
122: {
l: {
111: {
l: {
110: {
l: {
116: {
l: {
97: {
l: {
108: {
l: {
76: {
l: {
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 9472 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8459 ]
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 294 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
112: {
l: {
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
72: {
l: {
117: {
l: {
109: {
l: {
112: {
l: {
59: {
c: [ 8782 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8783 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
105: {
l: {
114: {
l: {
115: {
l: {
112: {
l: {
59: {
c: [ 8202 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
102: {
l: {
59: {
c: [ 189 ]
}
}
}
}
},
109: {
l: {
105: {
l: {
108: {
l: {
116: {
l: {
59: {
c: [ 8459 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
100: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1098 ]
}
}
}
}
}
}
},
114: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10568 ]
}
}
}
}
}
}
},
59: {
c: [ 8596 ]
},
119: {
l: {
59: {
c: [ 8621 ]
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8660 ]
}
}
}
}
}
}
},
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8463 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 293 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
97: {
l: {
114: {
l: {
116: {
l: {
115: {
l: {
59: {
c: [ 9829 ]
},
117: {
l: {
105: {
l: {
116: {
l: {
59: {
c: [ 9829 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
108: {
l: {
105: {
l: {
112: {
l: {
59: {
c: [ 8230 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
99: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8889 ]
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120101 ]
}
}
}
}
},
107: {
l: {
115: {
l: {
101: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10533 ]
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10534 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8703 ]
}
}
}
}
}
}
},
109: {
l: {
116: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8763 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
107: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8617 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8618 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120153 ]
}
}
}
}
},
114: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8213 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119997 ]
}
}
}
}
},
108: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8463 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 295 ]
}
}
}
}
}
}
}
}
}
}
},
121: {
l: {
98: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
59: {
c: [ 8259 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
104: {
l: {
101: {
l: {
110: {
l: {
59: {
c: [ 8208 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
73: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 205 ]
}
},
c: [ 205 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 206 ]
}
},
c: [ 206 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1048 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 304 ]
}
}
}
}
}
}
},
69: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1045 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 8465 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 204 ]
}
},
c: [ 204 ]
}
}
}
}
}
}
}
}
},
74: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 306 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 298 ]
}
}
}
}
},
103: {
l: {
105: {
l: {
110: {
l: {
97: {
l: {
114: {
l: {
121: {
l: {
73: {
l: {
59: {
c: [ 8520 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8465 ]
},
112: {
l: {
108: {
l: {
105: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8658 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
116: {
l: {
59: {
c: [ 8748 ]
},
101: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8747 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
115: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8898 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
105: {
l: {
115: {
l: {
105: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
67: {
l: {
111: {
l: {
109: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 8291 ]
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8290 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
79: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1025 ]
}
}
}
}
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 302 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120128 ]
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 921 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8464 ]
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 296 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
107: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1030 ]
}
}
}
}
}
}
},
109: {
l: {
108: {
l: {
59: {
c: [ 207 ]
}
},
c: [ 207 ]
}
}
}
}
}
}
},
105: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 237 ]
}
},
c: [ 237 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
59: {
c: [ 8291 ]
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 238 ]
}
},
c: [ 238 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1080 ]
}
}
}
}
},
101: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1077 ]
}
}
}
}
},
120: {
l: {
99: {
l: {
108: {
l: {
59: {
c: [ 161 ]
}
},
c: [ 161 ]
}
}
}
}
}
}
},
102: {
l: {
102: {
l: {
59: {
c: [ 8660 ]
}
}
},
114: {
l: {
59: {
c: [ 120102 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 236 ]
}
},
c: [ 236 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
59: {
c: [ 8520 ]
},
105: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10764 ]
}
}
}
}
}
}
},
110: {
l: {
116: {
l: {
59: {
c: [ 8749 ]
}
}
}
}
}
}
},
110: {
l: {
102: {
l: {
105: {
l: {
110: {
l: {
59: {
c: [ 10716 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
116: {
l: {
97: {
l: {
59: {
c: [ 8489 ]
}
}
}
}
}
}
}
}
},
106: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 307 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 299 ]
}
}
}
}
},
103: {
l: {
101: {
l: {
59: {
c: [ 8465 ]
}
}
},
108: {
l: {
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 8464 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
116: {
l: {
59: {
c: [ 8465 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
104: {
l: {
59: {
c: [ 305 ]
}
}
}
}
}
}
},
111: {
l: {
102: {
l: {
59: {
c: [ 8887 ]
}
}
}
}
},
112: {
l: {
101: {
l: {
100: {
l: {
59: {
c: [ 437 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
99: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 8453 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 8712 ]
},
102: {
l: {
105: {
l: {
110: {
l: {
59: {
c: [ 8734 ]
},
116: {
l: {
105: {
l: {
101: {
l: {
59: {
c: [ 10717 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 305 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8890 ]
}
}
}
}
}
}
},
59: {
c: [ 8747 ]
},
101: {
l: {
103: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
59: {
c: [ 8484 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8890 ]
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
104: {
l: {
107: {
l: {
59: {
c: [ 10775 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
111: {
l: {
100: {
l: {
59: {
c: [ 10812 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1105 ]
}
}
}
}
},
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 303 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120154 ]
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 953 ]
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
111: {
l: {
100: {
l: {
59: {
c: [ 10812 ]
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
101: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 191 ]
}
},
c: [ 191 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119998 ]
}
}
}
}
},
105: {
l: {
110: {
l: {
59: {
c: [ 8712 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8949 ]
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 8953 ]
}
}
},
115: {
l: {
59: {
c: [ 8948 ]
},
118: {
l: {
59: {
c: [ 8947 ]
}
}
}
}
},
118: {
l: {
59: {
c: [ 8712 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 8290 ]
},
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 297 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
107: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1110 ]
}
}
}
}
}
}
},
109: {
l: {
108: {
l: {
59: {
c: [ 239 ]
}
},
c: [ 239 ]
}
}
}
}
}
}
},
74: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 308 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1049 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120077 ]
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120129 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119973 ]
}
}
}
}
},
101: {
l: {
114: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1032 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
107: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1028 ]
}
}
}
}
}
}
}
}
}
}
},
106: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 309 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1081 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120103 ]
}
}
}
}
},
109: {
l: {
97: {
l: {
116: {
l: {
104: {
l: {
59: {
c: [ 567 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120155 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119999 ]
}
}
}
}
},
101: {
l: {
114: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1112 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
107: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1108 ]
}
}
}
}
}
}
}
}
}
}
},
75: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
97: {
l: {
59: {
c: [ 922 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 310 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1050 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120078 ]
}
}
}
}
},
72: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1061 ]
}
}
}
}
}
}
},
74: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1036 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120130 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119974 ]
}
}
}
}
}
}
}
}
},
107: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
97: {
l: {
59: {
c: [ 954 ]
},
118: {
l: {
59: {
c: [ 1008 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 311 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1082 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120104 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
101: {
l: {
101: {
l: {
110: {
l: {
59: {
c: [ 312 ]
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1093 ]
}
}
}
}
}
}
},
106: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1116 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120156 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 12e4 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
65: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8666 ]
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8656 ]
}
}
}
}
},
116: {
l: {
97: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 10523 ]
}
}
}
}
}
}
}
}
}
}
},
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 314 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
109: {
l: {
112: {
l: {
116: {
l: {
121: {
l: {
118: {
l: {
59: {
c: [ 10676 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
110: {
l: {
59: {
c: [ 8466 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
98: {
l: {
100: {
l: {
97: {
l: {
59: {
c: [ 955 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 10216 ]
},
100: {
l: {
59: {
c: [ 10641 ]
}
}
},
108: {
l: {
101: {
l: {
59: {
c: [ 10216 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 10885 ]
}
}
},
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 171 ]
}
},
c: [ 171 ]
}
}
}
}
},
114: {
l: {
114: {
l: {
98: {
l: {
59: {
c: [ 8676 ]
},
102: {
l: {
115: {
l: {
59: {
c: [ 10527 ]
}
}
}
}
}
}
},
59: {
c: [ 8592 ]
},
102: {
l: {
115: {
l: {
59: {
c: [ 10525 ]
}
}
}
}
},
104: {
l: {
107: {
l: {
59: {
c: [ 8617 ]
}
}
}
}
},
108: {
l: {
112: {
l: {
59: {
c: [ 8619 ]
}
}
}
}
},
112: {
l: {
108: {
l: {
59: {
c: [ 10553 ]
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 10611 ]
}
}
}
}
}
}
},
116: {
l: {
108: {
l: {
59: {
c: [ 8610 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 10521 ]
}
}
}
}
}
}
},
59: {
c: [ 10923 ]
},
101: {
l: {
59: {
c: [ 10925 ]
},
115: {
l: {
59: {
c: [ 10925, 65024 ]
}
}
}
}
}
}
}
}
},
98: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10508 ]
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 10098 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 123 ]
}
}
},
107: {
l: {
59: {
c: [ 91 ]
}
}
}
}
}
}
},
107: {
l: {
101: {
l: {
59: {
c: [ 10635 ]
}
}
},
115: {
l: {
108: {
l: {
100: {
l: {
59: {
c: [ 10639 ]
}
}
},
117: {
l: {
59: {
c: [ 10637 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
66: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10510 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 318 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 316 ]
}
}
}
}
}
}
},
105: {
l: {
108: {
l: {
59: {
c: [ 8968 ]
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 123 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1083 ]
}
}
}
}
},
100: {
l: {
99: {
l: {
97: {
l: {
59: {
c: [ 10550 ]
}
}
}
}
},
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 8220 ]
},
114: {
l: {
59: {
c: [ 8222 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
100: {
l: {
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10599 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
115: {
l: {
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10571 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
104: {
l: {
59: {
c: [ 8626 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 8804 ]
},
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8592 ]
},
116: {
l: {
97: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 8610 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
111: {
l: {
111: {
l: {
110: {
l: {
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 8637 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 8636 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
115: {
l: {
59: {
c: [ 8647 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8596 ]
},
115: {
l: {
59: {
c: [ 8646 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
111: {
l: {
111: {
l: {
110: {
l: {
115: {
l: {
59: {
c: [ 8651 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
113: {
l: {
117: {
l: {
105: {
l: {
103: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8621 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
104: {
l: {
114: {
l: {
101: {
l: {
101: {
l: {
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8907 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
103: {
l: {
59: {
c: [ 8922 ]
}
}
},
113: {
l: {
59: {
c: [ 8804 ]
},
113: {
l: {
59: {
c: [ 8806 ]
}
}
},
115: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10877 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
99: {
l: {
59: {
c: [ 10920 ]
}
}
}
}
},
59: {
c: [ 10877 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10879 ]
},
111: {
l: {
59: {
c: [ 10881 ]
},
114: {
l: {
59: {
c: [ 10883 ]
}
}
}
}
}
}
}
}
}
}
},
103: {
l: {
59: {
c: [ 8922, 65024 ]
},
101: {
l: {
115: {
l: {
59: {
c: [ 10899 ]
}
}
}
}
}
}
},
115: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10885 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8918 ]
}
}
}
}
}
}
},
101: {
l: {
113: {
l: {
103: {
l: {
116: {
l: {
114: {
l: {
59: {
c: [ 8922 ]
}
}
}
}
}
}
},
113: {
l: {
103: {
l: {
116: {
l: {
114: {
l: {
59: {
c: [ 10891 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
103: {
l: {
116: {
l: {
114: {
l: {
59: {
c: [ 8822 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8818 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 8806 ]
},
103: {
l: {
59: {
c: [ 10891 ]
}
}
}
}
},
102: {
l: {
105: {
l: {
115: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 10620 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
111: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 8970 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120105 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 8822 ]
},
69: {
l: {
59: {
c: [ 10897 ]
}
}
}
}
},
72: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10594 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
100: {
l: {
59: {
c: [ 8637 ]
}
}
},
117: {
l: {
59: {
c: [ 8636 ]
},
108: {
l: {
59: {
c: [ 10602 ]
}
}
}
}
}
}
}
}
},
98: {
l: {
108: {
l: {
107: {
l: {
59: {
c: [ 9604 ]
}
}
}
}
}
}
}
}
},
106: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1113 ]
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8647 ]
}
}
}
}
}
}
},
59: {
c: [ 8810 ]
},
99: {
l: {
111: {
l: {
114: {
l: {
110: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8990 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
100: {
l: {
59: {
c: [ 10603 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 9722 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 320 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
117: {
l: {
115: {
l: {
116: {
l: {
97: {
l: {
99: {
l: {
104: {
l: {
101: {
l: {
59: {
c: [ 9136 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 9136 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10889 ]
},
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10889 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 10887 ]
},
113: {
l: {
59: {
c: [ 10887 ]
},
113: {
l: {
59: {
c: [ 8808 ]
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 8808 ]
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8934 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 10220 ]
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8701 ]
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 10214 ]
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10229 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10231 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
112: {
l: {
115: {
l: {
116: {
l: {
111: {
l: {
59: {
c: [ 10236 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10230 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8619 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8620 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10629 ]
}
}
}
}
},
102: {
l: {
59: {
c: [ 120157 ]
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10797 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 10804 ]
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
97: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 8727 ]
}
}
}
}
}
}
},
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 95 ]
}
}
}
}
}
}
}
}
},
122: {
l: {
59: {
c: [ 9674 ]
},
101: {
l: {
110: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 9674 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
59: {
c: [ 10731 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 40 ]
},
108: {
l: {
116: {
l: {
59: {
c: [ 10643 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8646 ]
}
}
}
}
}
}
},
99: {
l: {
111: {
l: {
114: {
l: {
110: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8991 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8651 ]
},
100: {
l: {
59: {
c: [ 10605 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 8206 ]
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 8895 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
97: {
l: {
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 8249 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
114: {
l: {
59: {
c: [ 120001 ]
}
}
}
}
},
104: {
l: {
59: {
c: [ 8624 ]
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 8818 ]
},
101: {
l: {
59: {
c: [ 10893 ]
}
}
},
103: {
l: {
59: {
c: [ 10895 ]
}
}
}
}
}
}
},
113: {
l: {
98: {
l: {
59: {
c: [ 91 ]
}
}
},
117: {
l: {
111: {
l: {
59: {
c: [ 8216 ]
},
114: {
l: {
59: {
c: [ 8218 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 322 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
99: {
l: {
99: {
l: {
59: {
c: [ 10918 ]
}
}
},
105: {
l: {
114: {
l: {
59: {
c: [ 10873 ]
}
}
}
}
}
}
},
59: {
c: [ 60 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8918 ]
}
}
}
}
}
}
},
104: {
l: {
114: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8907 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8905 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10614 ]
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
101: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 10875 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
59: {
c: [ 9667 ]
},
101: {
l: {
59: {
c: [ 8884 ]
}
}
},
102: {
l: {
59: {
c: [ 9666 ]
}
}
}
}
},
80: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10646 ]
}
}
}
}
}
}
}
}
}
},
c: [ 60 ]
},
117: {
l: {
114: {
l: {
100: {
l: {
115: {
l: {
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10570 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10598 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
110: {
l: {
101: {
l: {
113: {
l: {
113: {
l: {
59: {
c: [ 8808, 65024 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
69: {
l: {
59: {
c: [ 8808, 65024 ]
}
}
}
}
}
}
}
}
},
76: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 313 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
98: {
l: {
100: {
l: {
97: {
l: {
59: {
c: [ 923 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 10218 ]
}
}
}
}
},
112: {
l: {
108: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
116: {
l: {
114: {
l: {
102: {
l: {
59: {
c: [ 8466 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8606 ]
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 317 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 315 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1051 ]
}
}
}
}
},
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
114: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 10216 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8676 ]
}
}
}
}
}
}
},
59: {
c: [ 8592 ]
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8646 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8656 ]
}
}
}
}
}
}
}
}
}
}
},
67: {
l: {
101: {
l: {
105: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 8968 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
114: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 10214 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
110: {
l: {
84: {
l: {
101: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10593 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10585 ]
}
}
}
}
}
}
},
59: {
c: [ 8643 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
108: {
l: {
111: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 8970 ]
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8596 ]
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10574 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8660 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8612 ]
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8867 ]
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10586 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10703 ]
}
}
}
}
}
}
},
59: {
c: [ 8882 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8884 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
112: {
l: {
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10577 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10592 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10584 ]
}
}
}
}
}
}
},
59: {
c: [ 8639 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10578 ]
}
}
}
}
}
}
},
59: {
c: [ 8636 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
115: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8922 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8806 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8822 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10913 ]
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10877 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8818 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120079 ]
}
}
}
}
},
74: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1033 ]
}
}
}
}
}
}
},
108: {
l: {
59: {
c: [ 8920 ]
},
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8666 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 319 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
110: {
l: {
103: {
l: {
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10229 ]
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10231 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10232 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10234 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10230 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 10233 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120131 ]
}
}
}
}
},
119: {
l: {
101: {
l: {
114: {
l: {
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8601 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8600 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8466 ]
}
}
}
}
},
104: {
l: {
59: {
c: [ 8624 ]
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 321 ]
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
59: {
c: [ 60 ]
}
},
c: [ 60 ]
},
116: {
l: {
59: {
c: [ 8810 ]
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 175 ]
}
},
c: [ 175 ]
}
}
},
108: {
l: {
101: {
l: {
59: {
c: [ 9794 ]
}
}
},
116: {
l: {
59: {
c: [ 10016 ]
},
101: {
l: {
115: {
l: {
101: {
l: {
59: {
c: [ 10016 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8614 ]
},
115: {
l: {
116: {
l: {
111: {
l: {
59: {
c: [ 8614 ]
},
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 8615 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8612 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 8613 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
107: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 9646 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
111: {
l: {
109: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 10793 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1084 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8212 ]
}
}
}
}
}
}
}
}
},
68: {
l: {
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8762 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
97: {
l: {
115: {
l: {
117: {
l: {
114: {
l: {
101: {
l: {
100: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 8737 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120106 ]
}
}
}
}
},
104: {
l: {
111: {
l: {
59: {
c: [ 8487 ]
}
}
}
}
},
105: {
l: {
99: {
l: {
114: {
l: {
111: {
l: {
59: {
c: [ 181 ]
}
},
c: [ 181 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 42 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10992 ]
}
}
}
}
}
}
},
59: {
c: [ 8739 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 183 ]
}
},
c: [ 183 ]
}
}
}
}
}
}
},
110: {
l: {
117: {
l: {
115: {
l: {
98: {
l: {
59: {
c: [ 8863 ]
}
}
},
59: {
c: [ 8722 ]
},
100: {
l: {
59: {
c: [ 8760 ]
},
117: {
l: {
59: {
c: [ 10794 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
99: {
l: {
112: {
l: {
59: {
c: [ 10971 ]
}
}
}
}
},
100: {
l: {
114: {
l: {
59: {
c: [ 8230 ]
}
}
}
}
}
}
},
110: {
l: {
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8723 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
100: {
l: {
101: {
l: {
108: {
l: {
115: {
l: {
59: {
c: [ 8871 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120158 ]
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8723 ]
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120002 ]
}
}
}
}
},
116: {
l: {
112: {
l: {
111: {
l: {
115: {
l: {
59: {
c: [ 8766 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
59: {
c: [ 956 ]
},
108: {
l: {
116: {
l: {
105: {
l: {
109: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8888 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8888 ]
}
}
}
}
}
}
}
}
}
}
},
77: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10501 ]
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1052 ]
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8287 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
114: {
l: {
102: {
l: {
59: {
c: [ 8499 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120080 ]
}
}
}
}
},
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
80: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8723 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120132 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8499 ]
}
}
}
}
}
}
},
117: {
l: {
59: {
c: [ 924 ]
}
}
}
}
},
110: {
l: {
97: {
l: {
98: {
l: {
108: {
l: {
97: {
l: {
59: {
c: [ 8711 ]
}
}
}
}
}
}
},
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 324 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 8736, 8402 ]
}
}
}
}
},
112: {
l: {
59: {
c: [ 8777 ]
},
69: {
l: {
59: {
c: [ 10864, 824 ]
}
}
},
105: {
l: {
100: {
l: {
59: {
c: [ 8779, 824 ]
}
}
}
}
},
111: {
l: {
115: {
l: {
59: {
c: [ 329 ]
}
}
}
}
},
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 8777 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
117: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 9838 ]
},
115: {
l: {
59: {
c: [ 8469 ]
}
}
}
}
}
}
},
59: {
c: [ 9838 ]
}
}
}
}
}
}
}
}
},
98: {
l: {
115: {
l: {
112: {
l: {
59: {
c: [ 160 ]
}
},
c: [ 160 ]
}
}
},
117: {
l: {
109: {
l: {
112: {
l: {
59: {
c: [ 8782, 824 ]
},
101: {
l: {
59: {
c: [ 8783, 824 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10819 ]
}
}
},
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 328 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 326 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 8775 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10861, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 10818 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1085 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8211 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
97: {
l: {
114: {
l: {
104: {
l: {
107: {
l: {
59: {
c: [ 10532 ]
}
}
}
}
},
114: {
l: {
59: {
c: [ 8599 ]
},
111: {
l: {
119: {
l: {
59: {
c: [ 8599 ]
}
}
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8663 ]
}
}
}
}
}
}
},
59: {
c: [ 8800 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8784, 824 ]
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
105: {
l: {
118: {
l: {
59: {
c: [ 8802 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
101: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10536 ]
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 8770, 824 ]
}
}
}
}
}
}
},
120: {
l: {
105: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 8708 ]
},
115: {
l: {
59: {
c: [ 8708 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120107 ]
}
}
}
}
},
103: {
l: {
69: {
l: {
59: {
c: [ 8807, 824 ]
}
}
},
101: {
l: {
59: {
c: [ 8817 ]
},
113: {
l: {
59: {
c: [ 8817 ]
},
113: {
l: {
59: {
c: [ 8807, 824 ]
}
}
},
115: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10878, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
59: {
c: [ 10878, 824 ]
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8821 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 8815 ]
},
114: {
l: {
59: {
c: [ 8815 ]
}
}
}
}
}
}
},
71: {
l: {
103: {
l: {
59: {
c: [ 8921, 824 ]
}
}
},
116: {
l: {
59: {
c: [ 8811, 8402 ]
},
118: {
l: {
59: {
c: [ 8811, 824 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8622 ]
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8654 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10994 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
59: {
c: [ 8715 ]
},
115: {
l: {
59: {
c: [ 8956 ]
},
100: {
l: {
59: {
c: [ 8954 ]
}
}
}
}
},
118: {
l: {
59: {
c: [ 8715 ]
}
}
}
}
},
106: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1114 ]
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8602 ]
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8653 ]
}
}
}
}
}
}
},
100: {
l: {
114: {
l: {
59: {
c: [ 8229 ]
}
}
}
}
},
69: {
l: {
59: {
c: [ 8806, 824 ]
}
}
},
101: {
l: {
59: {
c: [ 8816 ]
},
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8602 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8622 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
113: {
l: {
59: {
c: [ 8816 ]
},
113: {
l: {
59: {
c: [ 8806, 824 ]
}
}
},
115: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10877, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
59: {
c: [ 10877, 824 ]
},
115: {
l: {
59: {
c: [ 8814 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8820 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 8814 ]
},
114: {
l: {
105: {
l: {
59: {
c: [ 8938 ]
},
101: {
l: {
59: {
c: [ 8940 ]
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8653 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8654 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
59: {
c: [ 8920, 824 ]
}
}
},
116: {
l: {
59: {
c: [ 8810, 8402 ]
},
118: {
l: {
59: {
c: [ 8810, 824 ]
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
100: {
l: {
59: {
c: [ 8740 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120159 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 172 ]
},
105: {
l: {
110: {
l: {
59: {
c: [ 8713 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8949, 824 ]
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 8953, 824 ]
}
}
},
118: {
l: {
97: {
l: {
59: {
c: [ 8713 ]
}
}
},
98: {
l: {
59: {
c: [ 8951 ]
}
}
},
99: {
l: {
59: {
c: [ 8950 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
105: {
l: {
59: {
c: [ 8716 ]
},
118: {
l: {
97: {
l: {
59: {
c: [ 8716 ]
}
}
},
98: {
l: {
59: {
c: [ 8958 ]
}
}
},
99: {
l: {
59: {
c: [ 8957 ]
}
}
}
}
}
}
}
}
}
},
c: [ 172 ]
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
101: {
l: {
108: {
l: {
59: {
c: [ 8742 ]
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8742 ]
},
115: {
l: {
108: {
l: {
59: {
c: [ 11005, 8421 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 8706, 824 ]
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10772 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 8832 ]
},
99: {
l: {
117: {
l: {
101: {
l: {
59: {
c: [ 8928 ]
}
}
}
}
}
}
},
101: {
l: {
99: {
l: {
59: {
c: [ 8832 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 10927, 824 ]
}
}
}
}
}
}
},
59: {
c: [ 10927, 824 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 10547, 824 ]
}
}
},
59: {
c: [ 8603 ]
},
119: {
l: {
59: {
c: [ 8605, 824 ]
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8655 ]
}
}
}
}
}
}
},
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8603 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 8939 ]
},
101: {
l: {
59: {
c: [ 8941 ]
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8655 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
59: {
c: [ 8833 ]
},
99: {
l: {
117: {
l: {
101: {
l: {
59: {
c: [ 8929 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 10928, 824 ]
}
}
},
114: {
l: {
59: {
c: [ 120003 ]
}
}
}
}
},
104: {
l: {
111: {
l: {
114: {
l: {
116: {
l: {
109: {
l: {
105: {
l: {
100: {
l: {
59: {
c: [ 8740 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
101: {
l: {
108: {
l: {
59: {
c: [ 8742 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 8769 ]
},
101: {
l: {
59: {
c: [ 8772 ]
},
113: {
l: {
59: {
c: [ 8772 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
100: {
l: {
59: {
c: [ 8740 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8742 ]
}
}
}
}
}
}
},
113: {
l: {
115: {
l: {
117: {
l: {
98: {
l: {
101: {
l: {
59: {
c: [ 8930 ]
}
}
}
}
},
112: {
l: {
101: {
l: {
59: {
c: [ 8931 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 8836 ]
},
69: {
l: {
59: {
c: [ 10949, 824 ]
}
}
},
101: {
l: {
59: {
c: [ 8840 ]
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8834, 8402 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8840 ]
},
113: {
l: {
59: {
c: [ 10949, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
99: {
l: {
59: {
c: [ 8833 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 10928, 824 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8837 ]
},
69: {
l: {
59: {
c: [ 10950, 824 ]
}
}
},
101: {
l: {
59: {
c: [ 8841 ]
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8835, 8402 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8841 ]
},
113: {
l: {
59: {
c: [ 10950, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
103: {
l: {
108: {
l: {
59: {
c: [ 8825 ]
}
}
}
}
},
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 241 ]
}
},
c: [ 241 ]
}
}
}
}
}
}
},
108: {
l: {
103: {
l: {
59: {
c: [ 8824 ]
}
}
}
}
},
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8938 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8940 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8939 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8941 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
59: {
c: [ 957 ]
},
109: {
l: {
59: {
c: [ 35 ]
},
101: {
l: {
114: {
l: {
111: {
l: {
59: {
c: [ 8470 ]
}
}
}
}
}
}
},
115: {
l: {
112: {
l: {
59: {
c: [ 8199 ]
}
}
}
}
}
}
}
}
},
118: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8781, 8402 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8876 ]
}
}
}
}
}
}
}
}
},
68: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8877 ]
}
}
}
}
}
}
}
}
},
103: {
l: {
101: {
l: {
59: {
c: [ 8805, 8402 ]
}
}
},
116: {
l: {
59: {
c: [ 62, 8402 ]
}
}
}
}
},
72: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10500 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
102: {
l: {
105: {
l: {
110: {
l: {
59: {
c: [ 10718 ]
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10498 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 8804, 8402 ]
}
}
},
116: {
l: {
59: {
c: [ 60, 8402 ]
},
114: {
l: {
105: {
l: {
101: {
l: {
59: {
c: [ 8884, 8402 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10499 ]
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
101: {
l: {
59: {
c: [ 8885, 8402 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8764, 8402 ]
}
}
}
}
}
}
}
}
},
86: {
l: {
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8878 ]
}
}
}
}
}
}
}
}
},
68: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8879 ]
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
97: {
l: {
114: {
l: {
104: {
l: {
107: {
l: {
59: {
c: [ 10531 ]
}
}
}
}
},
114: {
l: {
59: {
c: [ 8598 ]
},
111: {
l: {
119: {
l: {
59: {
c: [ 8598 ]
}
}
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8662 ]
}
}
}
}
}
}
},
110: {
l: {
101: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10535 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
78: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 323 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 327 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 325 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1053 ]
}
}
}
}
},
101: {
l: {
103: {
l: {
97: {
l: {
116: {
l: {
105: {
l: {
118: {
l: {
101: {
l: {
77: {
l: {
101: {
l: {
100: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8203 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
104: {
l: {
105: {
l: {
99: {
l: {
107: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8203 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8203 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
114: {
l: {
121: {
l: {
84: {
l: {
104: {
l: {
105: {
l: {
110: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8203 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
116: {
l: {
101: {
l: {
100: {
l: {
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8811 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8810 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
76: {
l: {
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 10 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120081 ]
}
}
}
}
},
74: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1034 ]
}
}
}
}
}
}
},
111: {
l: {
66: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
107: {
l: {
59: {
c: [ 8288 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
66: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
107: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 160 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 8469 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 10988 ]
},
67: {
l: {
111: {
l: {
110: {
l: {
103: {
l: {
114: {
l: {
117: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8802 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
67: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8813 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
105: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8742 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
108: {
l: {
101: {
l: {
109: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8713 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8800 ]
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8770, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
120: {
l: {
105: {
l: {
115: {
l: {
116: {
l: {
115: {
l: {
59: {
c: [ 8708 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8815 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8817 ]
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8807, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8811, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8825 ]
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10878, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8821 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
72: {
l: {
117: {
l: {
109: {
l: {
112: {
l: {
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
72: {
l: {
117: {
l: {
109: {
l: {
112: {
l: {
59: {
c: [ 8782, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8783, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
84: {
l: {
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10703, 824 ]
}
}
}
}
}
}
},
59: {
c: [ 8938 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8940 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
115: {
l: {
59: {
c: [ 8814 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8816 ]
}
}
}
}
}
}
}
}
}
}
},
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 8824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 8810, 824 ]
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10877, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8820 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
78: {
l: {
101: {
l: {
115: {
l: {
116: {
l: {
101: {
l: {
100: {
l: {
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
71: {
l: {
114: {
l: {
101: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
59: {
c: [ 10914, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
76: {
l: {
101: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10913, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
80: {
l: {
114: {
l: {
101: {
l: {
99: {
l: {
101: {
l: {
100: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8832 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10927, 824 ]
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8928 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
101: {
l: {
118: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
69: {
l: {
108: {
l: {
101: {
l: {
109: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8716 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
84: {
l: {
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10704, 824 ]
}
}
}
}
}
}
},
59: {
c: [ 8939 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8941 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
83: {
l: {
117: {
l: {
98: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8847, 824 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8930 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8848, 824 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8931 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8834, 8402 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8840 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
99: {
l: {
101: {
l: {
101: {
l: {
100: {
l: {
115: {
l: {
59: {
c: [ 8833 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10928, 824 ]
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8929 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8831, 824 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8835, 8402 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8841 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8769 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8772 ]
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8775 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8777 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
114: {
l: {
116: {
l: {
105: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8740 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119977 ]
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 209 ]
}
},
c: [ 209 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
59: {
c: [ 925 ]
}
}
}
}
},
79: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 211 ]
}
},
c: [ 211 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 212 ]
}
},
c: [ 212 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1054 ]
}
}
}
}
},
100: {
l: {
98: {
l: {
108: {
l: {
97: {
l: {
99: {
l: {
59: {
c: [ 336 ]
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 338 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120082 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 210 ]
}
},
c: [ 210 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 332 ]
}
}
}
}
}
}
},
101: {
l: {
103: {
l: {
97: {
l: {
59: {
c: [ 937 ]
}
}
}
}
}
}
},
105: {
l: {
99: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 927 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120134 ]
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
110: {
l: {
67: {
l: {
117: {
l: {
114: {
l: {
108: {
l: {
121: {
l: {
68: {
l: {
111: {
l: {
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
81: {
l: {
117: {
l: {
111: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 8220 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
81: {
l: {
117: {
l: {
111: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 8216 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 10836 ]
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119978 ]
}
}
}
}
},
108: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 216 ]
}
},
c: [ 216 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 213 ]
}
},
c: [ 213 ]
}
}
}
}
},
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 10807 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 214 ]
}
},
c: [ 214 ]
}
}
}
}
},
118: {
l: {
101: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8254 ]
}
}
}
}
},
114: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 9182 ]
}
}
},
107: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 9140 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
80: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
104: {
l: {
101: {
l: {
115: {
l: {
105: {
l: {
115: {
l: {
59: {
c: [ 9180 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 243 ]
}
},
c: [ 243 ]
}
}
}
}
}
}
},
115: {
l: {
116: {
l: {
59: {
c: [ 8859 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 244 ]
}
},
c: [ 244 ]
},
59: {
c: [ 8858 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1086 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8861 ]
}
}
}
}
}
}
},
98: {
l: {
108: {
l: {
97: {
l: {
99: {
l: {
59: {
c: [ 337 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
118: {
l: {
59: {
c: [ 10808 ]
}
}
}
}
},
111: {
l: {
116: {
l: {
59: {
c: [ 8857 ]
}
}
}
}
},
115: {
l: {
111: {
l: {
108: {
l: {
100: {
l: {
59: {
c: [ 10684 ]
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 339 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10687 ]
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120108 ]
}
}
}
}
},
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 731 ]
}
}
}
}
},
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 242 ]
}
},
c: [ 242 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 10689 ]
}
}
}
}
},
104: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10677 ]
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 937 ]
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8750 ]
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8634 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10686 ]
}
}
}
}
},
114: {
l: {
111: {
l: {
115: {
l: {
115: {
l: {
59: {
c: [ 10683 ]
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 8254 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 10688 ]
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 333 ]
}
}
}
}
}
}
},
101: {
l: {
103: {
l: {
97: {
l: {
59: {
c: [ 969 ]
}
}
}
}
}
}
},
105: {
l: {
99: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 959 ]
}
}
}
}
}
}
}
}
},
100: {
l: {
59: {
c: [ 10678 ]
}
}
},
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8854 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120160 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10679 ]
}
}
}
}
},
101: {
l: {
114: {
l: {
112: {
l: {
59: {
c: [ 10681 ]
}
}
}
}
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8853 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8635 ]
}
}
}
}
}
}
},
59: {
c: [ 8744 ]
},
100: {
l: {
59: {
c: [ 10845 ]
},
101: {
l: {
114: {
l: {
59: {
c: [ 8500 ]
},
111: {
l: {
102: {
l: {
59: {
c: [ 8500 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
59: {
c: [ 170 ]
}
},
c: [ 170 ]
},
109: {
l: {
59: {
c: [ 186 ]
}
},
c: [ 186 ]
}
}
},
105: {
l: {
103: {
l: {
111: {
l: {
102: {
l: {
59: {
c: [ 8886 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
114: {
l: {
59: {
c: [ 10838 ]
}
}
}
}
},
115: {
l: {
108: {
l: {
111: {
l: {
112: {
l: {
101: {
l: {
59: {
c: [ 10839 ]
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 10843 ]
}
}
}
}
},
83: {
l: {
59: {
c: [ 9416 ]
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8500 ]
}
}
}
}
},
108: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 248 ]
}
},
c: [ 248 ]
}
}
}
}
}
}
},
111: {
l: {
108: {
l: {
59: {
c: [ 8856 ]
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 245 ]
}
},
c: [ 245 ]
}
}
}
}
},
109: {
l: {
101: {
l: {
115: {
l: {
97: {
l: {
115: {
l: {
59: {
c: [ 10806 ]
}
}
}
}
},
59: {
c: [ 8855 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 246 ]
}
},
c: [ 246 ]
}
}
}
}
},
118: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 9021 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
97: {
l: {
59: {
c: [ 182 ]
},
108: {
l: {
108: {
l: {
101: {
l: {
108: {
l: {
59: {
c: [ 8741 ]
}
}
}
}
}
}
}
}
}
},
c: [ 182 ]
},
59: {
c: [ 8741 ]
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 10995 ]
}
}
}
}
},
108: {
l: {
59: {
c: [ 11005 ]
}
}
}
}
},
116: {
l: {
59: {
c: [ 8706 ]
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1087 ]
}
}
}
}
},
101: {
l: {
114: {
l: {
99: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 37 ]
}
}
}
}
}
}
},
105: {
l: {
111: {
l: {
100: {
l: {
59: {
c: [ 46 ]
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 8240 ]
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8869 ]
}
}
},
116: {
l: {
101: {
l: {
110: {
l: {
107: {
l: {
59: {
c: [ 8241 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120109 ]
}
}
}
}
},
104: {
l: {
105: {
l: {
59: {
c: [ 966 ]
},
118: {
l: {
59: {
c: [ 981 ]
}
}
}
}
},
109: {
l: {
109: {
l: {
97: {
l: {
116: {
l: {
59: {
c: [ 8499 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 9742 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
59: {
c: [ 960 ]
},
116: {
l: {
99: {
l: {
104: {
l: {
102: {
l: {
111: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 8916 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 982 ]
}
}
}
}
},
108: {
l: {
97: {
l: {
110: {
l: {
99: {
l: {
107: {
l: {
59: {
c: [ 8463 ]
},
104: {
l: {
59: {
c: [ 8462 ]
}
}
}
}
}
}
},
107: {
l: {
118: {
l: {
59: {
c: [ 8463 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
115: {
l: {
97: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10787 ]
}
}
}
}
}
}
}
}
},
98: {
l: {
59: {
c: [ 8862 ]
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10786 ]
}
}
}
}
}
}
},
59: {
c: [ 43 ]
},
100: {
l: {
111: {
l: {
59: {
c: [ 8724 ]
}
}
},
117: {
l: {
59: {
c: [ 10789 ]
}
}
}
}
},
101: {
l: {
59: {
c: [ 10866 ]
}
}
},
109: {
l: {
110: {
l: {
59: {
c: [ 177 ]
}
},
c: [ 177 ]
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 10790 ]
}
}
}
}
}
}
},
116: {
l: {
119: {
l: {
111: {
l: {
59: {
c: [ 10791 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 177 ]
}
}
},
111: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10773 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120161 ]
}
}
}
}
},
117: {
l: {
110: {
l: {
100: {
l: {
59: {
c: [ 163 ]
}
},
c: [ 163 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10935 ]
}
}
}
}
},
59: {
c: [ 8826 ]
},
99: {
l: {
117: {
l: {
101: {
l: {
59: {
c: [ 8828 ]
}
}
}
}
}
}
},
101: {
l: {
99: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10935 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8826 ]
},
99: {
l: {
117: {
l: {
114: {
l: {
108: {
l: {
121: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8828 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
113: {
l: {
59: {
c: [ 10927 ]
}
}
}
}
},
110: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10937 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
113: {
l: {
113: {
l: {
59: {
c: [ 10933 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8936 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8830 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 10927 ]
}
}
},
69: {
l: {
59: {
c: [ 10931 ]
}
}
},
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 8242 ]
},
115: {
l: {
59: {
c: [ 8473 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10937 ]
}
}
}
}
},
69: {
l: {
59: {
c: [ 10933 ]
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8936 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
100: {
l: {
59: {
c: [ 8719 ]
}
}
},
102: {
l: {
97: {
l: {
108: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 9006 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 8978 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
117: {
l: {
114: {
l: {
102: {
l: {
59: {
c: [ 8979 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8733 ]
},
116: {
l: {
111: {
l: {
59: {
c: [ 8733 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8830 ]
}
}
}
}
}
}
},
117: {
l: {
114: {
l: {
101: {
l: {
108: {
l: {
59: {
c: [ 8880 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120005 ]
}
}
}
}
},
105: {
l: {
59: {
c: [ 968 ]
}
}
}
}
},
117: {
l: {
110: {
l: {
99: {
l: {
115: {
l: {
112: {
l: {
59: {
c: [ 8200 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
80: {
l: {
97: {
l: {
114: {
l: {
116: {
l: {
105: {
l: {
97: {
l: {
108: {
l: {
68: {
l: {
59: {
c: [ 8706 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1055 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120083 ]
}
}
}
}
},
104: {
l: {
105: {
l: {
59: {
c: [ 934 ]
}
}
}
}
},
105: {
l: {
59: {
c: [ 928 ]
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
77: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 177 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
105: {
l: {
110: {
l: {
99: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
112: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 8460 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 8473 ]
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 10939 ]
},
101: {
l: {
99: {
l: {
101: {
l: {
100: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8826 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10927 ]
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8828 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8830 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 8243 ]
}
}
}
}
}
}
},
111: {
l: {
100: {
l: {
117: {
l: {
99: {
l: {
116: {
l: {
59: {
c: [ 8719 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
111: {
l: {
114: {
l: {
116: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8733 ]
}
}
}
}
},
59: {
c: [ 8759 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119979 ]
}
}
}
}
},
105: {
l: {
59: {
c: [ 936 ]
}
}
}
}
}
}
},
81: {
l: {
102: {
l: {
114: {
l: {
59: {
c: [ 120084 ]
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 8474 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119980 ]
}
}
}
}
}
}
},
85: {
l: {
79: {
l: {
84: {
l: {
59: {
c: [ 34 ]
}
},
c: [ 34 ]
}
}
}
}
}
}
},
113: {
l: {
102: {
l: {
114: {
l: {
59: {
c: [ 120110 ]
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10764 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120162 ]
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 8279 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120006 ]
}
}
}
}
}
}
},
117: {
l: {
97: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
110: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
115: {
l: {
59: {
c: [ 8461 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10774 ]
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
115: {
l: {
116: {
l: {
59: {
c: [ 63 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8799 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
116: {
l: {
59: {
c: [ 34 ]
}
},
c: [ 34 ]
}
}
}
}
}
}
},
114: {
l: {
65: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8667 ]
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8658 ]
}
}
}
}
},
116: {
l: {
97: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 10524 ]
}
}
}
}
}
}
}
}
}
}
},
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8765, 817 ]
}
}
},
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 341 ]
}
}
}
}
}
}
}
}
},
100: {
l: {
105: {
l: {
99: {
l: {
59: {
c: [ 8730 ]
}
}
}
}
}
}
},
101: {
l: {
109: {
l: {
112: {
l: {
116: {
l: {
121: {
l: {
118: {
l: {
59: {
c: [ 10675 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 10217 ]
},
100: {
l: {
59: {
c: [ 10642 ]
}
}
},
101: {
l: {
59: {
c: [ 10661 ]
}
}
},
108: {
l: {
101: {
l: {
59: {
c: [ 10217 ]
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 187 ]
}
},
c: [ 187 ]
}
}
}
}
},
114: {
l: {
114: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10613 ]
}
}
}
}
},
98: {
l: {
59: {
c: [ 8677 ]
},
102: {
l: {
115: {
l: {
59: {
c: [ 10528 ]
}
}
}
}
}
}
},
99: {
l: {
59: {
c: [ 10547 ]
}
}
},
59: {
c: [ 8594 ]
},
102: {
l: {
115: {
l: {
59: {
c: [ 10526 ]
}
}
}
}
},
104: {
l: {
107: {
l: {
59: {
c: [ 8618 ]
}
}
}
}
},
108: {
l: {
112: {
l: {
59: {
c: [ 8620 ]
}
}
}
}
},
112: {
l: {
108: {
l: {
59: {
c: [ 10565 ]
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 10612 ]
}
}
}
}
}
}
},
116: {
l: {
108: {
l: {
59: {
c: [ 8611 ]
}
}
}
}
},
119: {
l: {
59: {
c: [ 8605 ]
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 10522 ]
}
}
}
}
}
}
},
105: {
l: {
111: {
l: {
59: {
c: [ 8758 ]
},
110: {
l: {
97: {
l: {
108: {
l: {
115: {
l: {
59: {
c: [ 8474 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
98: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10509 ]
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 10099 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 125 ]
}
}
},
107: {
l: {
59: {
c: [ 93 ]
}
}
}
}
}
}
},
107: {
l: {
101: {
l: {
59: {
c: [ 10636 ]
}
}
},
115: {
l: {
108: {
l: {
100: {
l: {
59: {
c: [ 10638 ]
}
}
},
117: {
l: {
59: {
c: [ 10640 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
66: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10511 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 345 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 343 ]
}
}
}
}
}
}
},
105: {
l: {
108: {
l: {
59: {
c: [ 8969 ]
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 125 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1088 ]
}
}
}
}
},
100: {
l: {
99: {
l: {
97: {
l: {
59: {
c: [ 10551 ]
}
}
}
}
},
108: {
l: {
100: {
l: {
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10601 ]
}
}
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 8221 ]
},
114: {
l: {
59: {
c: [ 8221 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
104: {
l: {
59: {
c: [ 8627 ]
}
}
}
}
}
}
},
101: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8476 ]
},
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 8475 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
116: {
l: {
59: {
c: [ 8476 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
59: {
c: [ 8477 ]
}
}
}
}
}
}
},
99: {
l: {
116: {
l: {
59: {
c: [ 9645 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 174 ]
}
},
c: [ 174 ]
}
}
},
102: {
l: {
105: {
l: {
115: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 10621 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
111: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 8971 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120111 ]
}
}
}
}
},
72: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10596 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
100: {
l: {
59: {
c: [ 8641 ]
}
}
},
117: {
l: {
59: {
c: [ 8640 ]
},
108: {
l: {
59: {
c: [ 10604 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
59: {
c: [ 961 ]
},
118: {
l: {
59: {
c: [ 1009 ]
}
}
}
}
}
}
},
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8594 ]
},
116: {
l: {
97: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 8611 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
111: {
l: {
111: {
l: {
110: {
l: {
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 8641 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 8640 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
115: {
l: {
59: {
c: [ 8644 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
111: {
l: {
111: {
l: {
110: {
l: {
115: {
l: {
59: {
c: [ 8652 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
115: {
l: {
59: {
c: [ 8649 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
113: {
l: {
117: {
l: {
105: {
l: {
103: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8605 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
104: {
l: {
114: {
l: {
101: {
l: {
101: {
l: {
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8908 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 730 ]
}
}
}
}
},
115: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
115: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8787 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8644 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8652 ]
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 8207 ]
}
}
}
}
},
109: {
l: {
111: {
l: {
117: {
l: {
115: {
l: {
116: {
l: {
97: {
l: {
99: {
l: {
104: {
l: {
101: {
l: {
59: {
c: [ 9137 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 9137 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
109: {
l: {
105: {
l: {
100: {
l: {
59: {
c: [ 10990 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 10221 ]
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8702 ]
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 10215 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10630 ]
}
}
}
}
},
102: {
l: {
59: {
c: [ 120163 ]
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10798 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 10805 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 41 ]
},
103: {
l: {
116: {
l: {
59: {
c: [ 10644 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
111: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10770 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8649 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
97: {
l: {
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 8250 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
114: {
l: {
59: {
c: [ 120007 ]
}
}
}
}
},
104: {
l: {
59: {
c: [ 8625 ]
}
}
},
113: {
l: {
98: {
l: {
59: {
c: [ 93 ]
}
}
},
117: {
l: {
111: {
l: {
59: {
c: [ 8217 ]
},
114: {
l: {
59: {
c: [ 8217 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
104: {
l: {
114: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8908 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 8906 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
59: {
c: [ 9657 ]
},
101: {
l: {
59: {
c: [ 8885 ]
}
}
},
102: {
l: {
59: {
c: [ 9656 ]
}
}
},
108: {
l: {
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 10702 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
108: {
l: {
117: {
l: {
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10600 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
120: {
l: {
59: {
c: [ 8478 ]
}
}
}
}
},
82: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 340 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 10219 ]
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8608 ]
},
116: {
l: {
108: {
l: {
59: {
c: [ 10518 ]
}
}
}
}
}
}
}
}
}
}
},
66: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10512 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 344 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 342 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1056 ]
}
}
}
}
},
101: {
l: {
59: {
c: [ 8476 ]
},
118: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
69: {
l: {
108: {
l: {
101: {
l: {
109: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 8715 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
113: {
l: {
117: {
l: {
105: {
l: {
108: {
l: {
105: {
l: {
98: {
l: {
114: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
59: {
c: [ 8651 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
112: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
105: {
l: {
108: {
l: {
105: {
l: {
98: {
l: {
114: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
59: {
c: [ 10607 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
71: {
l: {
59: {
c: [ 174 ]
}
},
c: [ 174 ]
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 8476 ]
}
}
}
}
},
104: {
l: {
111: {
l: {
59: {
c: [ 929 ]
}
}
}
}
},
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
114: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 10217 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8677 ]
}
}
}
}
}
}
},
59: {
c: [ 8594 ]
},
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8644 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8658 ]
}
}
}
}
}
}
}
}
}
}
},
67: {
l: {
101: {
l: {
105: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 8969 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
117: {
l: {
98: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
114: {
l: {
97: {
l: {
99: {
l: {
107: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 10215 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
110: {
l: {
84: {
l: {
101: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10589 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10581 ]
}
}
}
}
}
}
},
59: {
c: [ 8642 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
108: {
l: {
111: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 8971 ]
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8614 ]
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8866 ]
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10587 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10704 ]
}
}
}
}
}
}
},
59: {
c: [ 8883 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8885 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
112: {
l: {
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10575 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10588 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10580 ]
}
}
}
}
}
}
},
59: {
c: [ 8638 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10579 ]
}
}
}
}
}
}
},
59: {
c: [ 8640 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 8477 ]
}
}
}
}
},
117: {
l: {
110: {
l: {
100: {
l: {
73: {
l: {
109: {
l: {
112: {
l: {
108: {
l: {
105: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 10608 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8667 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 8475 ]
}
}
}
}
},
104: {
l: {
59: {
c: [ 8625 ]
}
}
}
}
},
117: {
l: {
108: {
l: {
101: {
l: {
68: {
l: {
101: {
l: {
108: {
l: {
97: {
l: {
121: {
l: {
101: {
l: {
100: {
l: {
59: {
c: [ 10740 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 346 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 352 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 10940 ]
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 350 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 348 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1057 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120086 ]
}
}
}
}
},
72: {
l: {
67: {
l: {
72: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1065 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1064 ]
}
}
}
}
}
}
},
104: {
l: {
111: {
l: {
114: {
l: {
116: {
l: {
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8595 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8592 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8594 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
112: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8593 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
103: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 931 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
67: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 8728 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
79: {
l: {
70: {
l: {
84: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1068 ]
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120138 ]
}
}
}
}
}
}
},
113: {
l: {
114: {
l: {
116: {
l: {
59: {
c: [ 8730 ]
}
}
}
}
},
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9633 ]
},
73: {
l: {
110: {
l: {
116: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
99: {
l: {
116: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8851 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
117: {
l: {
98: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8847 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8849 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8848 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8850 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
110: {
l: {
105: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8852 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119982 ]
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8902 ]
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 8912 ]
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8912 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8838 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
99: {
l: {
101: {
l: {
101: {
l: {
100: {
l: {
115: {
l: {
59: {
c: [ 8827 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 10928 ]
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
108: {
l: {
97: {
l: {
110: {
l: {
116: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8829 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8831 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
84: {
l: {
104: {
l: {
97: {
l: {
116: {
l: {
59: {
c: [ 8715 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 8721 ]
}
}
},
112: {
l: {
59: {
c: [ 8913 ]
},
101: {
l: {
114: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8835 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8839 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8913 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 347 ]
}
}
}
}
}
}
}
}
}
}
},
98: {
l: {
113: {
l: {
117: {
l: {
111: {
l: {
59: {
c: [ 8218 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10936 ]
}
}
},
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 353 ]
}
}
}
}
}
}
}
}
},
59: {
c: [ 8827 ]
},
99: {
l: {
117: {
l: {
101: {
l: {
59: {
c: [ 8829 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 10928 ]
},
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 351 ]
}
}
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 10932 ]
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 349 ]
}
}
}
}
}
}
},
110: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10938 ]
}
}
}
}
},
69: {
l: {
59: {
c: [ 10934 ]
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8937 ]
}
}
}
}
}
}
}
}
},
112: {
l: {
111: {
l: {
108: {
l: {
105: {
l: {
110: {
l: {
116: {
l: {
59: {
c: [ 10771 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8831 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1089 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
98: {
l: {
59: {
c: [ 8865 ]
}
}
},
59: {
c: [ 8901 ]
},
101: {
l: {
59: {
c: [ 10854 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
97: {
l: {
114: {
l: {
104: {
l: {
107: {
l: {
59: {
c: [ 10533 ]
}
}
}
}
},
114: {
l: {
59: {
c: [ 8600 ]
},
111: {
l: {
119: {
l: {
59: {
c: [ 8600 ]
}
}
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8664 ]
}
}
}
}
}
}
},
99: {
l: {
116: {
l: {
59: {
c: [ 167 ]
}
},
c: [ 167 ]
}
}
},
109: {
l: {
105: {
l: {
59: {
c: [ 59 ]
}
}
}
}
},
115: {
l: {
119: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10537 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
109: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8726 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
59: {
c: [ 8726 ]
}
}
}
}
}
}
},
120: {
l: {
116: {
l: {
59: {
c: [ 10038 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120112 ]
},
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 8994 ]
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
59: {
c: [ 9839 ]
}
}
}
}
}
}
},
99: {
l: {
104: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1097 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1096 ]
}
}
}
}
},
111: {
l: {
114: {
l: {
116: {
l: {
109: {
l: {
105: {
l: {
100: {
l: {
59: {
c: [ 8739 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
101: {
l: {
108: {
l: {
59: {
c: [ 8741 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 173 ]
}
},
c: [ 173 ]
}
}
},
105: {
l: {
103: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 963 ]
},
102: {
l: {
59: {
c: [ 962 ]
}
}
},
118: {
l: {
59: {
c: [ 962 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 8764 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10858 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 8771 ]
},
113: {
l: {
59: {
c: [ 8771 ]
}
}
}
}
},
103: {
l: {
59: {
c: [ 10910 ]
},
69: {
l: {
59: {
c: [ 10912 ]
}
}
}
}
},
108: {
l: {
59: {
c: [ 10909 ]
},
69: {
l: {
59: {
c: [ 10911 ]
}
}
}
}
},
110: {
l: {
101: {
l: {
59: {
c: [ 8774 ]
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10788 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10610 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8592 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
108: {
l: {
108: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
109: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8726 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
104: {
l: {
112: {
l: {
59: {
c: [ 10803 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
112: {
l: {
97: {
l: {
114: {
l: {
115: {
l: {
108: {
l: {
59: {
c: [ 10724 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
100: {
l: {
59: {
c: [ 8739 ]
}
}
},
108: {
l: {
101: {
l: {
59: {
c: [ 8995 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 10922 ]
},
101: {
l: {
59: {
c: [ 10924 ]
},
115: {
l: {
59: {
c: [ 10924, 65024 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
102: {
l: {
116: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1100 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 9023 ]
}
}
}
}
},
59: {
c: [ 10692 ]
}
}
},
59: {
c: [ 47 ]
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120164 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
100: {
l: {
101: {
l: {
115: {
l: {
59: {
c: [ 9824 ]
},
117: {
l: {
105: {
l: {
116: {
l: {
59: {
c: [ 9824 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 8741 ]
}
}
}
}
}
}
},
113: {
l: {
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8851 ]
},
115: {
l: {
59: {
c: [ 8851, 65024 ]
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 8852 ]
},
115: {
l: {
59: {
c: [ 8852, 65024 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
117: {
l: {
98: {
l: {
59: {
c: [ 8847 ]
},
101: {
l: {
59: {
c: [ 8849 ]
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8847 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8849 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8848 ]
},
101: {
l: {
59: {
c: [ 8850 ]
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8848 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8850 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 9633 ]
}
}
},
102: {
l: {
59: {
c: [ 9642 ]
}
}
}
}
}
}
},
59: {
c: [ 9633 ]
},
102: {
l: {
59: {
c: [ 9642 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8594 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120008 ]
}
}
}
}
},
101: {
l: {
116: {
l: {
109: {
l: {
110: {
l: {
59: {
c: [ 8726 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
105: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 8995 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
114: {
l: {
102: {
l: {
59: {
c: [ 8902 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 9734 ]
},
102: {
l: {
59: {
c: [ 9733 ]
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
101: {
l: {
112: {
l: {
115: {
l: {
105: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 1013 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
104: {
l: {
105: {
l: {
59: {
c: [ 981 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
115: {
l: {
59: {
c: [ 175 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 8834 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10941 ]
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 10949 ]
}
}
},
101: {
l: {
59: {
c: [ 8838 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10947 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
117: {
l: {
108: {
l: {
116: {
l: {
59: {
c: [ 10945 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
69: {
l: {
59: {
c: [ 10955 ]
}
}
},
101: {
l: {
59: {
c: [ 8842 ]
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10943 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10617 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8834 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8838 ]
},
113: {
l: {
59: {
c: [ 10949 ]
}
}
}
}
}
}
},
110: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8842 ]
},
113: {
l: {
59: {
c: [ 10955 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 10951 ]
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 10965 ]
}
}
},
112: {
l: {
59: {
c: [ 10963 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
99: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10936 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8827 ]
},
99: {
l: {
117: {
l: {
114: {
l: {
108: {
l: {
121: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8829 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
113: {
l: {
59: {
c: [ 10928 ]
}
}
}
}
},
110: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 10938 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
101: {
l: {
113: {
l: {
113: {
l: {
59: {
c: [ 10934 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8937 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8831 ]
}
}
}
}
}
}
}
}
}
}
},
109: {
l: {
59: {
c: [ 8721 ]
}
}
},
110: {
l: {
103: {
l: {
59: {
c: [ 9834 ]
}
}
}
}
},
112: {
l: {
49: {
l: {
59: {
c: [ 185 ]
}
},
c: [ 185 ]
},
50: {
l: {
59: {
c: [ 178 ]
}
},
c: [ 178 ]
},
51: {
l: {
59: {
c: [ 179 ]
}
},
c: [ 179 ]
},
59: {
c: [ 8835 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10942 ]
}
}
}
}
},
115: {
l: {
117: {
l: {
98: {
l: {
59: {
c: [ 10968 ]
}
}
}
}
}
}
}
}
},
69: {
l: {
59: {
c: [ 10950 ]
}
}
},
101: {
l: {
59: {
c: [ 8839 ]
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10948 ]
}
}
}
}
}
}
}
}
},
104: {
l: {
115: {
l: {
111: {
l: {
108: {
l: {
59: {
c: [ 10185 ]
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 10967 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10619 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
117: {
l: {
108: {
l: {
116: {
l: {
59: {
c: [ 10946 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
69: {
l: {
59: {
c: [ 10956 ]
}
}
},
101: {
l: {
59: {
c: [ 8843 ]
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10944 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8835 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8839 ]
},
113: {
l: {
59: {
c: [ 10950 ]
}
}
}
}
}
}
},
110: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8843 ]
},
113: {
l: {
59: {
c: [ 10956 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
109: {
l: {
59: {
c: [ 10952 ]
}
}
}
}
},
117: {
l: {
98: {
l: {
59: {
c: [ 10964 ]
}
}
},
112: {
l: {
59: {
c: [ 10966 ]
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
97: {
l: {
114: {
l: {
104: {
l: {
107: {
l: {
59: {
c: [ 10534 ]
}
}
}
}
},
114: {
l: {
59: {
c: [ 8601 ]
},
111: {
l: {
119: {
l: {
59: {
c: [ 8601 ]
}
}
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8665 ]
}
}
}
}
}
}
},
110: {
l: {
119: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10538 ]
}
}
}
}
}
}
}
}
}
}
},
122: {
l: {
108: {
l: {
105: {
l: {
103: {
l: {
59: {
c: [ 223 ]
}
},
c: [ 223 ]
}
}
}
}
}
}
}
}
},
84: {
l: {
97: {
l: {
98: {
l: {
59: {
c: [ 9 ]
}
}
},
117: {
l: {
59: {
c: [ 932 ]
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 356 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 354 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1058 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120087 ]
}
}
}
}
},
104: {
l: {
101: {
l: {
114: {
l: {
101: {
l: {
102: {
l: {
111: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 8756 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 920 ]
}
}
}
}
}
}
},
105: {
l: {
99: {
l: {
107: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8287, 8202 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8201 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
72: {
l: {
79: {
l: {
82: {
l: {
78: {
l: {
59: {
c: [ 222 ]
}
},
c: [ 222 ]
}
}
}
}
}
}
},
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8764 ]
},
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8771 ]
}
}
}
}
}
}
}
}
}
}
},
70: {
l: {
117: {
l: {
108: {
l: {
108: {
l: {
69: {
l: {
113: {
l: {
117: {
l: {
97: {
l: {
108: {
l: {
59: {
c: [ 8773 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8776 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120139 ]
}
}
}
}
}
}
},
82: {
l: {
65: {
l: {
68: {
l: {
69: {
l: {
59: {
c: [ 8482 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
112: {
l: {
108: {
l: {
101: {
l: {
68: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8411 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119983 ]
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 358 ]
}
}
}
}
}
}
}
}
}
}
},
83: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1062 ]
}
}
}
}
},
72: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1035 ]
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
114: {
l: {
103: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 8982 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
59: {
c: [ 964 ]
}
}
}
}
},
98: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 9140 ]
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 357 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
105: {
l: {
108: {
l: {
59: {
c: [ 355 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1090 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8411 ]
}
}
}
}
}
}
},
101: {
l: {
108: {
l: {
114: {
l: {
101: {
l: {
99: {
l: {
59: {
c: [ 8981 ]
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120113 ]
}
}
}
}
},
104: {
l: {
101: {
l: {
114: {
l: {
101: {
l: {
52: {
l: {
59: {
c: [ 8756 ]
}
}
},
102: {
l: {
111: {
l: {
114: {
l: {
101: {
l: {
59: {
c: [ 8756 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 952 ]
},
115: {
l: {
121: {
l: {
109: {
l: {
59: {
c: [ 977 ]
}
}
}
}
}
}
},
118: {
l: {
59: {
c: [ 977 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
99: {
l: {
107: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
114: {
l: {
111: {
l: {
120: {
l: {
59: {
c: [ 8776 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8764 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
115: {
l: {
112: {
l: {
59: {
c: [ 8201 ]
}
}
}
}
}
}
}
}
},
107: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8776 ]
}
}
}
}
},
115: {
l: {
105: {
l: {
109: {
l: {
59: {
c: [ 8764 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
114: {
l: {
110: {
l: {
59: {
c: [ 254 ]
}
},
c: [ 254 ]
}
}
}
}
}
}
},
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 732 ]
}
}
}
}
}
}
},
109: {
l: {
101: {
l: {
115: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10801 ]
}
}
}
}
},
59: {
c: [ 8864 ]
}
}
},
59: {
c: [ 215 ]
},
100: {
l: {
59: {
c: [ 10800 ]
}
}
}
},
c: [ 215 ]
}
}
}
}
},
110: {
l: {
116: {
l: {
59: {
c: [ 8749 ]
}
}
}
}
}
}
},
111: {
l: {
101: {
l: {
97: {
l: {
59: {
c: [ 10536 ]
}
}
}
}
},
112: {
l: {
98: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 9014 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10993 ]
}
}
}
}
}
}
},
59: {
c: [ 8868 ]
},
102: {
l: {
59: {
c: [ 120165 ]
},
111: {
l: {
114: {
l: {
107: {
l: {
59: {
c: [ 10970 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
97: {
l: {
59: {
c: [ 10537 ]
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 8244 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8482 ]
}
}
}
}
}
}
},
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 9653 ]
},
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
59: {
c: [ 9663 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 9667 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8884 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
113: {
l: {
59: {
c: [ 8796 ]
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 9657 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8885 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 9708 ]
}
}
}
}
}
}
},
101: {
l: {
59: {
c: [ 8796 ]
}
}
},
109: {
l: {
105: {
l: {
110: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10810 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10809 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
98: {
l: {
59: {
c: [ 10701 ]
}
}
}
}
},
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 10811 ]
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
122: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
59: {
c: [ 9186 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120009 ]
}
}
},
121: {
l: {
59: {
c: [ 1094 ]
}
}
}
}
},
104: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1115 ]
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
111: {
l: {
107: {
l: {
59: {
c: [ 359 ]
}
}
}
}
}
}
}
}
}
}
},
119: {
l: {
105: {
l: {
120: {
l: {
116: {
l: {
59: {
c: [ 8812 ]
}
}
}
}
}
}
},
111: {
l: {
104: {
l: {
101: {
l: {
97: {
l: {
100: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8606 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8608 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
85: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 218 ]
}
},
c: [ 218 ]
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8607 ]
},
111: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
59: {
c: [ 10569 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1038 ]
}
}
}
}
},
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 364 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 219 ]
}
},
c: [ 219 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1059 ]
}
}
}
}
},
100: {
l: {
98: {
l: {
108: {
l: {
97: {
l: {
99: {
l: {
59: {
c: [ 368 ]
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120088 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 217 ]
}
},
c: [ 217 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 362 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
100: {
l: {
101: {
l: {
114: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 95 ]
}
}
}
}
},
114: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 9183 ]
}
}
},
107: {
l: {
101: {
l: {
116: {
l: {
59: {
c: [ 9141 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
80: {
l: {
97: {
l: {
114: {
l: {
101: {
l: {
110: {
l: {
116: {
l: {
104: {
l: {
101: {
l: {
115: {
l: {
105: {
l: {
115: {
l: {
59: {
c: [ 9181 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
105: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 8899 ]
},
80: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8846 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 370 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120140 ]
}
}
}
}
}
}
},
112: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10514 ]
}
}
}
}
}
}
},
59: {
c: [ 8593 ]
},
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8645 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8657 ]
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8597 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8661 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
69: {
l: {
113: {
l: {
117: {
l: {
105: {
l: {
108: {
l: {
105: {
l: {
98: {
l: {
114: {
l: {
105: {
l: {
117: {
l: {
109: {
l: {
59: {
c: [ 10606 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
101: {
l: {
114: {
l: {
76: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8598 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
82: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8599 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
59: {
c: [ 978 ]
},
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 933 ]
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
101: {
l: {
101: {
l: {
65: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8613 ]
}
}
}
}
}
}
}
}
}
}
},
59: {
c: [ 8869 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 366 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119984 ]
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 360 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 220 ]
}
},
c: [ 220 ]
}
}
}
}
}
}
},
117: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 250 ]
}
},
c: [ 250 ]
}
}
}
}
}
}
},
114: {
l: {
114: {
l: {
59: {
c: [ 8593 ]
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8657 ]
}
}
}
}
}
}
},
98: {
l: {
114: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1118 ]
}
}
}
}
},
101: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 365 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 251 ]
}
},
c: [ 251 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1091 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8645 ]
}
}
}
}
}
}
},
98: {
l: {
108: {
l: {
97: {
l: {
99: {
l: {
59: {
c: [ 369 ]
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10606 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
105: {
l: {
115: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 10622 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 120114 ]
}
}
}
}
},
103: {
l: {
114: {
l: {
97: {
l: {
118: {
l: {
101: {
l: {
59: {
c: [ 249 ]
}
},
c: [ 249 ]
}
}
}
}
}
}
}
}
},
72: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10595 ]
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
108: {
l: {
59: {
c: [ 8639 ]
}
}
},
114: {
l: {
59: {
c: [ 8638 ]
}
}
}
}
}
}
},
98: {
l: {
108: {
l: {
107: {
l: {
59: {
c: [ 9600 ]
}
}
}
}
}
}
}
}
},
108: {
l: {
99: {
l: {
111: {
l: {
114: {
l: {
110: {
l: {
59: {
c: [ 8988 ]
},
101: {
l: {
114: {
l: {
59: {
c: [ 8988 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
111: {
l: {
112: {
l: {
59: {
c: [ 8975 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 9720 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 363 ]
}
}
}
}
}
}
},
108: {
l: {
59: {
c: [ 168 ]
}
},
c: [ 168 ]
}
}
},
111: {
l: {
103: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 371 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120166 ]
}
}
}
}
}
}
},
112: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8593 ]
}
}
}
}
}
}
}
}
}
}
},
100: {
l: {
111: {
l: {
119: {
l: {
110: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
59: {
c: [ 8597 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
112: {
l: {
111: {
l: {
111: {
l: {
110: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8639 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8638 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 8846 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
59: {
c: [ 965 ]
},
104: {
l: {
59: {
c: [ 978 ]
}
}
},
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 965 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
111: {
l: {
119: {
l: {
115: {
l: {
59: {
c: [ 8648 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
99: {
l: {
111: {
l: {
114: {
l: {
110: {
l: {
59: {
c: [ 8989 ]
},
101: {
l: {
114: {
l: {
59: {
c: [ 8989 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
111: {
l: {
112: {
l: {
59: {
c: [ 8974 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 367 ]
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 9721 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120010 ]
}
}
}
}
}
}
},
116: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 8944 ]
}
}
}
}
}
}
},
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 361 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
59: {
c: [ 9653 ]
},
102: {
l: {
59: {
c: [ 9652 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8648 ]
}
}
}
}
}
}
},
109: {
l: {
108: {
l: {
59: {
c: [ 252 ]
}
},
c: [ 252 ]
}
}
}
}
},
119: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
59: {
c: [ 10663 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
118: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
114: {
l: {
116: {
l: {
59: {
c: [ 10652 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
101: {
l: {
112: {
l: {
115: {
l: {
105: {
l: {
108: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 1013 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
107: {
l: {
97: {
l: {
112: {
l: {
112: {
l: {
97: {
l: {
59: {
c: [ 1008 ]
}
}
}
}
}
}
}
}
}
}
},
110: {
l: {
111: {
l: {
116: {
l: {
104: {
l: {
105: {
l: {
110: {
l: {
103: {
l: {
59: {
c: [ 8709 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
104: {
l: {
105: {
l: {
59: {
c: [ 981 ]
}
}
}
}
},
105: {
l: {
59: {
c: [ 982 ]
}
}
},
114: {
l: {
111: {
l: {
112: {
l: {
116: {
l: {
111: {
l: {
59: {
c: [ 8733 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
59: {
c: [ 8597 ]
},
104: {
l: {
111: {
l: {
59: {
c: [ 1009 ]
}
}
}
}
}
}
},
115: {
l: {
105: {
l: {
103: {
l: {
109: {
l: {
97: {
l: {
59: {
c: [ 962 ]
}
}
}
}
}
}
}
}
},
117: {
l: {
98: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
110: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8842, 65024 ]
},
113: {
l: {
59: {
c: [ 10955, 65024 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
112: {
l: {
115: {
l: {
101: {
l: {
116: {
l: {
110: {
l: {
101: {
l: {
113: {
l: {
59: {
c: [ 8843, 65024 ]
},
113: {
l: {
59: {
c: [ 10956, 65024 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
104: {
l: {
101: {
l: {
116: {
l: {
97: {
l: {
59: {
c: [ 977 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
97: {
l: {
110: {
l: {
103: {
l: {
108: {
l: {
101: {
l: {
108: {
l: {
101: {
l: {
102: {
l: {
116: {
l: {
59: {
c: [ 8882 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
105: {
l: {
103: {
l: {
104: {
l: {
116: {
l: {
59: {
c: [ 8883 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8661 ]
}
}
}
}
}
}
},
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10984 ]
},
118: {
l: {
59: {
c: [ 10985 ]
}
}
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1074 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8866 ]
}
}
}
}
}
}
}
}
},
68: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8872 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
101: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8891 ]
}
}
}
}
}
}
},
59: {
c: [ 8744 ]
},
101: {
l: {
113: {
l: {
59: {
c: [ 8794 ]
}
}
}
}
}
}
},
108: {
l: {
108: {
l: {
105: {
l: {
112: {
l: {
59: {
c: [ 8942 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 124 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 124 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120115 ]
}
}
}
}
},
108: {
l: {
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 8882 ]
}
}
}
}
}
}
}
}
},
110: {
l: {
115: {
l: {
117: {
l: {
98: {
l: {
59: {
c: [ 8834, 8402 ]
}
}
},
112: {
l: {
59: {
c: [ 8835, 8402 ]
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120167 ]
}
}
}
}
}
}
},
112: {
l: {
114: {
l: {
111: {
l: {
112: {
l: {
59: {
c: [ 8733 ]
}
}
}
}
}
}
}
}
},
114: {
l: {
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 8883 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120011 ]
}
}
}
}
},
117: {
l: {
98: {
l: {
110: {
l: {
69: {
l: {
59: {
c: [ 10955, 65024 ]
}
}
},
101: {
l: {
59: {
c: [ 8842, 65024 ]
}
}
}
}
}
}
},
112: {
l: {
110: {
l: {
69: {
l: {
59: {
c: [ 10956, 65024 ]
}
}
},
101: {
l: {
59: {
c: [ 8843, 65024 ]
}
}
}
}
}
}
}
}
}
}
},
122: {
l: {
105: {
l: {
103: {
l: {
122: {
l: {
97: {
l: {
103: {
l: {
59: {
c: [ 10650 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
86: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10987 ]
}
}
}
}
}
}
},
99: {
l: {
121: {
l: {
59: {
c: [ 1042 ]
}
}
}
}
},
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8873 ]
},
108: {
l: {
59: {
c: [ 10982 ]
}
}
}
}
}
}
}
}
}
}
},
68: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8875 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
101: {
l: {
59: {
c: [ 8897 ]
}
}
},
114: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8214 ]
}
}
}
}
}
}
},
116: {
l: {
59: {
c: [ 8214 ]
},
105: {
l: {
99: {
l: {
97: {
l: {
108: {
l: {
66: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 8739 ]
}
}
}
}
}
}
},
76: {
l: {
105: {
l: {
110: {
l: {
101: {
l: {
59: {
c: [ 124 ]
}
}
}
}
}
}
}
}
},
83: {
l: {
101: {
l: {
112: {
l: {
97: {
l: {
114: {
l: {
97: {
l: {
116: {
l: {
111: {
l: {
114: {
l: {
59: {
c: [ 10072 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
84: {
l: {
105: {
l: {
108: {
l: {
100: {
l: {
101: {
l: {
59: {
c: [ 8768 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
121: {
l: {
84: {
l: {
104: {
l: {
105: {
l: {
110: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8202 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120089 ]
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120141 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119985 ]
}
}
}
}
}
}
},
118: {
l: {
100: {
l: {
97: {
l: {
115: {
l: {
104: {
l: {
59: {
c: [ 8874 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
87: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 372 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 8896 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120090 ]
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120142 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119986 ]
}
}
}
}
}
}
}
}
},
119: {
l: {
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 373 ]
}
}
}
}
}
}
}
}
},
101: {
l: {
100: {
l: {
98: {
l: {
97: {
l: {
114: {
l: {
59: {
c: [ 10847 ]
}
}
}
}
}
}
},
103: {
l: {
101: {
l: {
59: {
c: [ 8743 ]
},
113: {
l: {
59: {
c: [ 8793 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
101: {
l: {
114: {
l: {
112: {
l: {
59: {
c: [ 8472 ]
}
}
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120116 ]
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120168 ]
}
}
}
}
}
}
},
112: {
l: {
59: {
c: [ 8472 ]
}
}
},
114: {
l: {
59: {
c: [ 8768 ]
},
101: {
l: {
97: {
l: {
116: {
l: {
104: {
l: {
59: {
c: [ 8768 ]
}
}
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120012 ]
}
}
}
}
}
}
}
}
},
120: {
l: {
99: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 8898 ]
}
}
}
}
},
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 9711 ]
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
59: {
c: [ 8899 ]
}
}
}
}
}
}
},
100: {
l: {
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 9661 ]
}
}
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120117 ]
}
}
}
}
},
104: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10231 ]
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10234 ]
}
}
}
}
}
}
}
}
},
105: {
l: {
59: {
c: [ 958 ]
}
}
},
108: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10229 ]
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10232 ]
}
}
}
}
}
}
}
}
},
109: {
l: {
97: {
l: {
112: {
l: {
59: {
c: [ 10236 ]
}
}
}
}
}
}
},
110: {
l: {
105: {
l: {
115: {
l: {
59: {
c: [ 8955 ]
}
}
}
}
}
}
},
111: {
l: {
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 10752 ]
}
}
}
}
}
}
},
112: {
l: {
102: {
l: {
59: {
c: [ 120169 ]
}
}
},
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10753 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
105: {
l: {
109: {
l: {
101: {
l: {
59: {
c: [ 10754 ]
}
}
}
}
}
}
}
}
}
}
},
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10230 ]
}
}
}
}
}
}
},
65: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 10233 ]
}
}
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120013 ]
}
}
}
}
},
113: {
l: {
99: {
l: {
117: {
l: {
112: {
l: {
59: {
c: [ 10758 ]
}
}
}
}
}
}
}
}
}
}
},
117: {
l: {
112: {
l: {
108: {
l: {
117: {
l: {
115: {
l: {
59: {
c: [ 10756 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
114: {
l: {
105: {
l: {
59: {
c: [ 9651 ]
}
}
}
}
}
}
}
}
},
118: {
l: {
101: {
l: {
101: {
l: {
59: {
c: [ 8897 ]
}
}
}
}
}
}
},
119: {
l: {
101: {
l: {
100: {
l: {
103: {
l: {
101: {
l: {
59: {
c: [ 8896 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
88: {
l: {
102: {
l: {
114: {
l: {
59: {
c: [ 120091 ]
}
}
}
}
},
105: {
l: {
59: {
c: [ 926 ]
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120143 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119987 ]
}
}
}
}
}
}
}
}
},
89: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 221 ]
}
},
c: [ 221 ]
}
}
}
}
}
}
}
}
},
65: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1071 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 374 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1067 ]
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120092 ]
}
}
}
}
},
73: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1031 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120144 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119988 ]
}
}
}
}
}
}
},
85: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1070 ]
}
}
}
}
}
}
},
117: {
l: {
109: {
l: {
108: {
l: {
59: {
c: [ 376 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 253 ]
}
},
c: [ 253 ]
}
}
}
}
},
121: {
l: {
59: {
c: [ 1103 ]
}
}
}
}
}
}
},
99: {
l: {
105: {
l: {
114: {
l: {
99: {
l: {
59: {
c: [ 375 ]
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1099 ]
}
}
}
}
},
101: {
l: {
110: {
l: {
59: {
c: [ 165 ]
}
},
c: [ 165 ]
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120118 ]
}
}
}
}
},
105: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1111 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120170 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120014 ]
}
}
}
}
}
}
},
117: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1102 ]
}
}
}
}
},
109: {
l: {
108: {
l: {
59: {
c: [ 255 ]
}
},
c: [ 255 ]
}
}
}
}
}
}
},
90: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 377 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 381 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1047 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 379 ]
}
}
}
}
}
}
},
101: {
l: {
114: {
l: {
111: {
l: {
87: {
l: {
105: {
l: {
100: {
l: {
116: {
l: {
104: {
l: {
83: {
l: {
112: {
l: {
97: {
l: {
99: {
l: {
101: {
l: {
59: {
c: [ 8203 ]
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 918 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 8488 ]
}
}
}
}
},
72: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1046 ]
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 8484 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 119989 ]
}
}
}
}
}
}
}
}
},
122: {
l: {
97: {
l: {
99: {
l: {
117: {
l: {
116: {
l: {
101: {
l: {
59: {
c: [ 378 ]
}
}
}
}
}
}
}
}
}
}
},
99: {
l: {
97: {
l: {
114: {
l: {
111: {
l: {
110: {
l: {
59: {
c: [ 382 ]
}
}
}
}
}
}
}
}
},
121: {
l: {
59: {
c: [ 1079 ]
}
}
}
}
},
100: {
l: {
111: {
l: {
116: {
l: {
59: {
c: [ 380 ]
}
}
}
}
}
}
},
101: {
l: {
101: {
l: {
116: {
l: {
114: {
l: {
102: {
l: {
59: {
c: [ 8488 ]
}
}
}
}
}
}
}
}
},
116: {
l: {
97: {
l: {
59: {
c: [ 950 ]
}
}
}
}
}
}
},
102: {
l: {
114: {
l: {
59: {
c: [ 120119 ]
}
}
}
}
},
104: {
l: {
99: {
l: {
121: {
l: {
59: {
c: [ 1078 ]
}
}
}
}
}
}
},
105: {
l: {
103: {
l: {
114: {
l: {
97: {
l: {
114: {
l: {
114: {
l: {
59: {
c: [ 8669 ]
}
}
}
}
}
}
}
}
}
}
}
}
},
111: {
l: {
112: {
l: {
102: {
l: {
59: {
c: [ 120171 ]
}
}
}
}
}
}
},
115: {
l: {
99: {
l: {
114: {
l: {
59: {
c: [ 120015 ]
}
}
}
}
}
}
},
119: {
l: {
106: {
l: {
59: {
c: [ 8205 ]
}
}
},
110: {
l: {
106: {
l: {
59: {
c: [ 8204 ]
}
}
}
}
}
}
}
}
}
};
}, function(module, exports, __webpack_require__) {
"use strict";
var HTML = __webpack_require__(356);
var $ = HTML.TAG_NAMES, NS = HTML.NAMESPACES;
function isImpliedEndTagRequired(tn) {
switch (tn.length) {
case 1:
return tn === $.P;

case 2:
return tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI;

case 6:
return tn === $.OPTION;

case 8:
return tn === $.OPTGROUP;
}
return false;
}
function isScopingElement(tn, ns) {
switch (tn.length) {
case 2:
if (tn === $.TD || tn === $.TH) return ns === NS.HTML; else if (tn === $.MI || tn === $.MO || tn == $.MN || tn === $.MS) return ns === NS.MATHML;
break;

case 4:
if (tn === $.HTML) return ns === NS.HTML; else if (tn === $.DESC) return ns === NS.SVG;
break;

case 5:
if (tn === $.TABLE) return ns === NS.HTML; else if (tn === $.MTEXT) return ns === NS.MATHML; else if (tn === $.TITLE) return ns === NS.SVG;
break;

case 6:
return (tn === $.APPLET || tn === $.OBJECT) && ns === NS.HTML;

case 7:
return (tn === $.CAPTION || tn === $.MARQUEE) && ns === NS.HTML;

case 8:
return tn === $.TEMPLATE && ns === NS.HTML;

case 13:
return tn === $.FOREIGN_OBJECT && ns === NS.SVG;

case 14:
return tn === $.ANNOTATION_XML && ns === NS.MATHML;
}
return false;
}
var OpenElementStack = module.exports = function(document, treeAdapter) {
this.stackTop = -1;
this.items = [];
this.current = document;
this.currentTagName = null;
this.currentTmplContent = null;
this.tmplCount = 0;
this.treeAdapter = treeAdapter;
};
OpenElementStack.prototype._indexOf = function(element) {
var idx = -1;
for (var i = this.stackTop; i >= 0; i--) {
if (this.items[i] === element) {
idx = i;
break;
}
}
return idx;
};
OpenElementStack.prototype._isInTemplate = function() {
if (this.currentTagName !== $.TEMPLATE) return false;
return this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
};
OpenElementStack.prototype._updateCurrentElement = function() {
this.current = this.items[this.stackTop];
this.currentTagName = this.current && this.treeAdapter.getTagName(this.current);
this.currentTmplContent = this._isInTemplate() ? this.treeAdapter.getChildNodes(this.current)[0] : null;
};
OpenElementStack.prototype.push = function(element) {
this.items[++this.stackTop] = element;
this._updateCurrentElement();
if (this._isInTemplate()) this.tmplCount++;
};
OpenElementStack.prototype.pop = function() {
this.stackTop--;
if (this.tmplCount > 0 && this._isInTemplate()) this.tmplCount--;
this._updateCurrentElement();
};
OpenElementStack.prototype.replace = function(oldElement, newElement) {
var idx = this._indexOf(oldElement);
this.items[idx] = newElement;
if (idx === this.stackTop) this._updateCurrentElement();
};
OpenElementStack.prototype.insertAfter = function(referenceElement, newElement) {
var insertionIdx = this._indexOf(referenceElement) + 1;
this.items.splice(insertionIdx, 0, newElement);
if (insertionIdx == ++this.stackTop) this._updateCurrentElement();
};
OpenElementStack.prototype.popUntilTagNamePopped = function(tagName) {
while (this.stackTop > -1) {
var tn = this.currentTagName;
this.pop();
if (tn === tagName) break;
}
};
OpenElementStack.prototype.popUntilTemplatePopped = function() {
while (this.stackTop > -1) {
var tn = this.currentTagName, ns = this.treeAdapter.getNamespaceURI(this.current);
this.pop();
if (tn === $.TEMPLATE && ns === NS.HTML) break;
}
};
OpenElementStack.prototype.popUntilElementPopped = function(element) {
while (this.stackTop > -1) {
var poppedElement = this.current;
this.pop();
if (poppedElement === element) break;
}
};
OpenElementStack.prototype.popUntilNumberedHeaderPopped = function() {
while (this.stackTop > -1) {
var tn = this.currentTagName;
this.pop();
if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) break;
}
};
OpenElementStack.prototype.popAllUpToHtmlElement = function() {
this.stackTop = 0;
this._updateCurrentElement();
};
OpenElementStack.prototype.clearBackToTableContext = function() {
while (this.currentTagName !== $.TABLE && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML) this.pop();
};
OpenElementStack.prototype.clearBackToTableBodyContext = function() {
while (this.currentTagName !== $.TBODY && this.currentTagName !== $.TFOOT && this.currentTagName !== $.THEAD && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML) {
this.pop();
}
};
OpenElementStack.prototype.clearBackToTableRowContext = function() {
while (this.currentTagName !== $.TR && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML) this.pop();
};
OpenElementStack.prototype.remove = function(element) {
for (var i = this.stackTop; i >= 0; i--) {
if (this.items[i] === element) {
this.items.splice(i, 1);
this.stackTop--;
this._updateCurrentElement();
break;
}
}
};
OpenElementStack.prototype.tryPeekProperlyNestedBodyElement = function() {
var element = this.items[1];
return element && this.treeAdapter.getTagName(element) === $.BODY ? element : null;
};
OpenElementStack.prototype.contains = function(element) {
return this._indexOf(element) > -1;
};
OpenElementStack.prototype.getCommonAncestor = function(element) {
var elementIdx = this._indexOf(element);
return --elementIdx >= 0 ? this.items[elementIdx] : null;
};
OpenElementStack.prototype.isRootHtmlElementCurrent = function() {
return this.stackTop === 0 && this.currentTagName === $.HTML;
};
OpenElementStack.prototype.hasInScope = function(tagName) {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === tagName) return true;
var ns = this.treeAdapter.getNamespaceURI(this.items[i]);
if (isScopingElement(tn, ns)) return false;
}
return true;
};
OpenElementStack.prototype.hasNumberedHeaderInScope = function() {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) return true;
if (isScopingElement(tn, this.treeAdapter.getNamespaceURI(this.items[i]))) return false;
}
return true;
};
OpenElementStack.prototype.hasInListItemScope = function(tagName) {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === tagName) return true;
var ns = this.treeAdapter.getNamespaceURI(this.items[i]);
if ((tn === $.UL || tn === $.OL) && ns === NS.HTML || isScopingElement(tn, ns)) return false;
}
return true;
};
OpenElementStack.prototype.hasInButtonScope = function(tagName) {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === tagName) return true;
var ns = this.treeAdapter.getNamespaceURI(this.items[i]);
if (tn === $.BUTTON && ns === NS.HTML || isScopingElement(tn, ns)) return false;
}
return true;
};
OpenElementStack.prototype.hasInTableScope = function(tagName) {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === tagName) return true;
var ns = this.treeAdapter.getNamespaceURI(this.items[i]);
if ((tn === $.TABLE || tn === $.TEMPLATE || tn === $.HTML) && ns === NS.HTML) return false;
}
return true;
};
OpenElementStack.prototype.hasTableBodyContextInTableScope = function() {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === $.TBODY || tn === $.THEAD || tn === $.TFOOT) return true;
var ns = this.treeAdapter.getNamespaceURI(this.items[i]);
if ((tn === $.TABLE || tn === $.HTML) && ns === NS.HTML) return false;
}
return true;
};
OpenElementStack.prototype.hasInSelectScope = function(tagName) {
for (var i = this.stackTop; i >= 0; i--) {
var tn = this.treeAdapter.getTagName(this.items[i]);
if (tn === tagName) return true;
var ns = this.treeAdapter.getNamespaceURI(this.items[i]);
if (tn !== $.OPTION && tn !== $.OPTGROUP && ns === NS.HTML) return false;
}
return true;
};
OpenElementStack.prototype.generateImpliedEndTags = function() {
while (isImpliedEndTagRequired(this.currentTagName)) this.pop();
};
OpenElementStack.prototype.generateImpliedEndTagsWithExclusion = function(exclusionTagName) {
while (isImpliedEndTagRequired(this.currentTagName) && this.currentTagName !== exclusionTagName) this.pop();
};
}, function(module, exports) {
"use strict";
var NS = exports.NAMESPACES = {
HTML: "http://www.w3.org/1999/xhtml",
MATHML: "http://www.w3.org/1998/Math/MathML",
SVG: "http://www.w3.org/2000/svg",
XLINK: "http://www.w3.org/1999/xlink",
XML: "http://www.w3.org/XML/1998/namespace",
XMLNS: "http://www.w3.org/2000/xmlns/"
};
exports.ATTRS = {
TYPE: "type",
ACTION: "action",
ENCODING: "encoding",
PROMPT: "prompt",
NAME: "name",
COLOR: "color",
FACE: "face",
SIZE: "size"
};
var $ = exports.TAG_NAMES = {
A: "a",
ADDRESS: "address",
ANNOTATION_XML: "annotation-xml",
APPLET: "applet",
AREA: "area",
ARTICLE: "article",
ASIDE: "aside",
B: "b",
BASE: "base",
BASEFONT: "basefont",
BGSOUND: "bgsound",
BIG: "big",
BLOCKQUOTE: "blockquote",
BODY: "body",
BR: "br",
BUTTON: "button",
CAPTION: "caption",
CENTER: "center",
CODE: "code",
COL: "col",
COLGROUP: "colgroup",
COMMAND: "command",
DD: "dd",
DESC: "desc",
DETAILS: "details",
DIALOG: "dialog",
DIR: "dir",
DIV: "div",
DL: "dl",
DT: "dt",
EM: "em",
EMBED: "embed",
FIELDSET: "fieldset",
FIGCAPTION: "figcaption",
FIGURE: "figure",
FONT: "font",
FOOTER: "footer",
FOREIGN_OBJECT: "foreignObject",
FORM: "form",
FRAME: "frame",
FRAMESET: "frameset",
H1: "h1",
H2: "h2",
H3: "h3",
H4: "h4",
H5: "h5",
H6: "h6",
HEAD: "head",
HEADER: "header",
HGROUP: "hgroup",
HR: "hr",
HTML: "html",
I: "i",
IMG: "img",
IMAGE: "image",
INPUT: "input",
IFRAME: "iframe",
ISINDEX: "isindex",
KEYGEN: "keygen",
LABEL: "label",
LI: "li",
LINK: "link",
LISTING: "listing",
MAIN: "main",
MALIGNMARK: "malignmark",
MARQUEE: "marquee",
MATH: "math",
MENU: "menu",
MENUITEM: "menuitem",
META: "meta",
MGLYPH: "mglyph",
MI: "mi",
MO: "mo",
MN: "mn",
MS: "ms",
MTEXT: "mtext",
NAV: "nav",
NOBR: "nobr",
NOFRAMES: "noframes",
NOEMBED: "noembed",
NOSCRIPT: "noscript",
OBJECT: "object",
OL: "ol",
OPTGROUP: "optgroup",
OPTION: "option",
P: "p",
PARAM: "param",
PLAINTEXT: "plaintext",
PRE: "pre",
RP: "rp",
RT: "rt",
RUBY: "ruby",
S: "s",
SCRIPT: "script",
SECTION: "section",
SELECT: "select",
SOURCE: "source",
SMALL: "small",
SPAN: "span",
STRIKE: "strike",
STRONG: "strong",
STYLE: "style",
SUB: "sub",
SUMMARY: "summary",
SUP: "sup",
TABLE: "table",
TBODY: "tbody",
TEMPLATE: "template",
TEXTAREA: "textarea",
TFOOT: "tfoot",
TD: "td",
TH: "th",
THEAD: "thead",
TITLE: "title",
TR: "tr",
TRACK: "track",
TT: "tt",
U: "u",
UL: "ul",
SVG: "svg",
VAR: "var",
WBR: "wbr",
XMP: "xmp"
};
var SPECIAL_ELEMENTS = exports.SPECIAL_ELEMENTS = {};
SPECIAL_ELEMENTS[NS.HTML] = {};
SPECIAL_ELEMENTS[NS.HTML][$.ADDRESS] = true;
SPECIAL_ELEMENTS[NS.HTML][$.APPLET] = true;
SPECIAL_ELEMENTS[NS.HTML][$.AREA] = true;
SPECIAL_ELEMENTS[NS.HTML][$.ARTICLE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.ASIDE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BASE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BASEFONT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BGSOUND] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BLOCKQUOTE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BODY] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.BUTTON] = true;
SPECIAL_ELEMENTS[NS.HTML][$.CAPTION] = true;
SPECIAL_ELEMENTS[NS.HTML][$.CENTER] = true;
SPECIAL_ELEMENTS[NS.HTML][$.COL] = true;
SPECIAL_ELEMENTS[NS.HTML][$.COLGROUP] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DD] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DETAILS] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DIR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DIV] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DL] = true;
SPECIAL_ELEMENTS[NS.HTML][$.DT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.EMBED] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FIELDSET] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FIGCAPTION] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FIGURE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FOOTER] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FORM] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FRAME] = true;
SPECIAL_ELEMENTS[NS.HTML][$.FRAMESET] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H1] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H2] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H3] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H4] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H5] = true;
SPECIAL_ELEMENTS[NS.HTML][$.H6] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HEAD] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HEADER] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HGROUP] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.HTML] = true;
SPECIAL_ELEMENTS[NS.HTML][$.IFRAME] = true;
SPECIAL_ELEMENTS[NS.HTML][$.IMG] = true;
SPECIAL_ELEMENTS[NS.HTML][$.INPUT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.ISINDEX] = true;
SPECIAL_ELEMENTS[NS.HTML][$.LI] = true;
SPECIAL_ELEMENTS[NS.HTML][$.LINK] = true;
SPECIAL_ELEMENTS[NS.HTML][$.LISTING] = true;
SPECIAL_ELEMENTS[NS.HTML][$.MAIN] = true;
SPECIAL_ELEMENTS[NS.HTML][$.MARQUEE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.MENU] = true;
SPECIAL_ELEMENTS[NS.HTML][$.MENUITEM] = true;
SPECIAL_ELEMENTS[NS.HTML][$.META] = true;
SPECIAL_ELEMENTS[NS.HTML][$.NAV] = true;
SPECIAL_ELEMENTS[NS.HTML][$.NOEMBED] = true;
SPECIAL_ELEMENTS[NS.HTML][$.NOFRAMES] = true;
SPECIAL_ELEMENTS[NS.HTML][$.NOSCRIPT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.OBJECT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.OL] = true;
SPECIAL_ELEMENTS[NS.HTML][$.P] = true;
SPECIAL_ELEMENTS[NS.HTML][$.PARAM] = true;
SPECIAL_ELEMENTS[NS.HTML][$.PLAINTEXT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.PRE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SCRIPT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SECTION] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SELECT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SOURCE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.STYLE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.SUMMARY] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TABLE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TBODY] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TD] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TEMPLATE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TEXTAREA] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TFOOT] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TH] = true;
SPECIAL_ELEMENTS[NS.HTML][$.THEAD] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TITLE] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.TRACK] = true;
SPECIAL_ELEMENTS[NS.HTML][$.UL] = true;
SPECIAL_ELEMENTS[NS.HTML][$.WBR] = true;
SPECIAL_ELEMENTS[NS.HTML][$.XMP] = true;
SPECIAL_ELEMENTS[NS.MATHML] = {};
SPECIAL_ELEMENTS[NS.MATHML][$.MI] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.MO] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.MN] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.MS] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.MTEXT] = true;
SPECIAL_ELEMENTS[NS.MATHML][$.ANNOTATION_XML] = true;
SPECIAL_ELEMENTS[NS.SVG] = {};
SPECIAL_ELEMENTS[NS.SVG][$.TITLE] = true;
SPECIAL_ELEMENTS[NS.SVG][$.FOREIGN_OBJECT] = true;
SPECIAL_ELEMENTS[NS.SVG][$.DESC] = true;
}, function(module, exports) {
"use strict";
var NOAH_ARK_CAPACITY = 3;
var FormattingElementList = module.exports = function(treeAdapter) {
this.length = 0;
this.entries = [];
this.treeAdapter = treeAdapter;
this.bookmark = null;
};
FormattingElementList.MARKER_ENTRY = "MARKER_ENTRY";
FormattingElementList.ELEMENT_ENTRY = "ELEMENT_ENTRY";
FormattingElementList.prototype._getNoahArkConditionCandidates = function(newElement) {
var candidates = [];
if (this.length >= NOAH_ARK_CAPACITY) {
var neAttrsLength = this.treeAdapter.getAttrList(newElement).length, neTagName = this.treeAdapter.getTagName(newElement), neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);
for (var i = this.length - 1; i >= 0; i--) {
var entry = this.entries[i];
if (entry.type === FormattingElementList.MARKER_ENTRY) break;
var element = entry.element, elementAttrs = this.treeAdapter.getAttrList(element);
if (this.treeAdapter.getTagName(element) === neTagName && this.treeAdapter.getNamespaceURI(element) === neNamespaceURI && elementAttrs.length === neAttrsLength) {
candidates.push({
idx: i,
attrs: elementAttrs
});
}
}
}
return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;
};
FormattingElementList.prototype._ensureNoahArkCondition = function(newElement) {
var candidates = this._getNoahArkConditionCandidates(newElement), cLength = candidates.length;
if (cLength) {
var neAttrs = this.treeAdapter.getAttrList(newElement), neAttrsLength = neAttrs.length, neAttrsMap = {};
for (var i = 0; i < neAttrsLength; i++) {
var neAttr = neAttrs[i];
neAttrsMap[neAttr.name] = neAttr.value;
}
for (var i = 0; i < neAttrsLength; i++) {
for (var j = 0; j < cLength; j++) {
var cAttr = candidates[j].attrs[i];
if (neAttrsMap[cAttr.name] !== cAttr.value) {
candidates.splice(j, 1);
cLength--;
}
if (candidates.length < NOAH_ARK_CAPACITY) return;
}
}
for (var i = cLength - 1; i >= NOAH_ARK_CAPACITY - 1; i--) {
this.entries.splice(candidates[i].idx, 1);
this.length--;
}
}
};
FormattingElementList.prototype.insertMarker = function() {
this.entries.push({
type: FormattingElementList.MARKER_ENTRY
});
this.length++;
};
FormattingElementList.prototype.pushElement = function(element, token) {
this._ensureNoahArkCondition(element);
this.entries.push({
type: FormattingElementList.ELEMENT_ENTRY,
element: element,
token: token
});
this.length++;
};
FormattingElementList.prototype.insertElementAfterBookmark = function(element, token) {
var bookmarkIdx = this.length - 1;
for (;bookmarkIdx >= 0; bookmarkIdx--) {
if (this.entries[bookmarkIdx] === this.bookmark) break;
}
this.entries.splice(bookmarkIdx + 1, 0, {
type: FormattingElementList.ELEMENT_ENTRY,
element: element,
token: token
});
this.length++;
};
FormattingElementList.prototype.removeEntry = function(entry) {
for (var i = this.length - 1; i >= 0; i--) {
if (this.entries[i] === entry) {
this.entries.splice(i, 1);
this.length--;
break;
}
}
};
FormattingElementList.prototype.clearToLastMarker = function() {
while (this.length) {
var entry = this.entries.pop();
this.length--;
if (entry.type === FormattingElementList.MARKER_ENTRY) break;
}
};
FormattingElementList.prototype.getElementEntryInScopeWithTagName = function(tagName) {
for (var i = this.length - 1; i >= 0; i--) {
var entry = this.entries[i];
if (entry.type === FormattingElementList.MARKER_ENTRY) return null;
if (this.treeAdapter.getTagName(entry.element) === tagName) return entry;
}
return null;
};
FormattingElementList.prototype.getElementEntry = function(element) {
for (var i = this.length - 1; i >= 0; i--) {
var entry = this.entries[i];
if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element == element) return entry;
}
return null;
};
}, function(module, exports, __webpack_require__) {
"use strict";
var OpenElementStack = __webpack_require__(355), Tokenizer = __webpack_require__(350), HTML = __webpack_require__(356);
var $ = HTML.TAG_NAMES;
function setEndLocation(element, endTagToken) {
if (element.__location) element.__location.end = endTagToken.location.end;
}
function patchOpenElementsStack(stack, parser) {
stack.pop = function() {
setEndLocation(this.current, parser.currentToken);
OpenElementStack.prototype.pop.call(this);
};
stack.popAllUpToHtmlElement = function() {
for (var i = this.stackTop; i > 0; i--) setEndLocation(this.items[i], parser.currentToken);
OpenElementStack.prototype.popAllUpToHtmlElement.call(this);
};
stack.remove = function(element) {
setEndLocation(element, parser.currentToken);
OpenElementStack.prototype.remove.call(this, element);
};
}
exports.assign = function(parser) {
var parserProto = Object.getPrototypeOf(parser);
parser._reset = function(html, document, fragmentContext) {
parserProto._reset.call(this, html, document, fragmentContext);
this.attachableElementLocation = null;
this.lastFosterParentingLocation = null;
this.currentToken = null;
patchOpenElementsStack(this.openElements, parser);
};
parser._processTokenInForeignContent = function(token) {
this.currentToken = token;
parserProto._processTokenInForeignContent.call(this, token);
};
parser._processToken = function(token) {
this.currentToken = token;
parserProto._processToken.call(this, token);
if (token.type === Tokenizer.END_TAG_TOKEN && (token.tagName === $.HTML || token.tagName === $.BODY && this.openElements.hasInScope($.BODY))) {
for (var i = this.openElements.stackTop; i >= 0; i--) {
var element = this.openElements.items[i];
if (this.treeAdapter.getTagName(element) === token.tagName) {
setEndLocation(element, token);
break;
}
}
}
};
parser._setDocumentType = function(token) {
parserProto._setDocumentType.call(this, token);
var documentChildren = this.treeAdapter.getChildNodes(this.document), cnLength = documentChildren.length;
for (var i = 0; i < cnLength; i++) {
var node = documentChildren[i];
if (this.treeAdapter.isDocumentTypeNode(node)) {
node.__location = token.location;
break;
}
}
};
parser._attachElementToTree = function(element) {
element.__location = this.attachableElementLocation || null;
this.attachableElementLocation = null;
parserProto._attachElementToTree.call(this, element);
};
parser._appendElement = function(token, namespaceURI) {
this.attachableElementLocation = token.location;
parserProto._appendElement.call(this, token, namespaceURI);
};
parser._insertElement = function(token, namespaceURI) {
this.attachableElementLocation = token.location;
parserProto._insertElement.call(this, token, namespaceURI);
};
parser._insertTemplate = function(token) {
this.attachableElementLocation = token.location;
parserProto._insertTemplate.call(this, token);
var tmplContent = this.treeAdapter.getChildNodes(this.openElements.current)[0];
tmplContent.__location = null;
};
parser._insertFakeRootElement = function() {
parserProto._insertFakeRootElement.call(this);
this.openElements.current.__location = null;
};
parser._appendCommentNode = function(token, parent) {
parserProto._appendCommentNode.call(this, token, parent);
var children = this.treeAdapter.getChildNodes(parent), commentNode = children[children.length - 1];
commentNode.__location = token.location;
};
parser._findFosterParentingLocation = function() {
this.lastFosterParentingLocation = parserProto._findFosterParentingLocation.call(this);
return this.lastFosterParentingLocation;
};
parser._insertCharacters = function(token) {
parserProto._insertCharacters.call(this, token);
var hasFosterParent = this._shouldFosterParentOnInsertion(), parentingLocation = this.lastFosterParentingLocation, parent = hasFosterParent && parentingLocation.parent || this.openElements.currentTmplContent || this.openElements.current, siblings = this.treeAdapter.getChildNodes(parent), textNodeIdx = hasFosterParent && parentingLocation.beforeElement ? siblings.indexOf(parentingLocation.beforeElement) - 1 : siblings.length - 1, textNode = siblings[textNodeIdx];
if (textNode.__location) textNode.__location.end = token.location.end; else textNode.__location = token.location;
};
};
}, function(module, exports) {
"use strict";
exports.createDocument = function() {
return {
nodeName: "#document",
quirksMode: false,
childNodes: []
};
};
exports.createDocumentFragment = function() {
return {
nodeName: "#document-fragment",
quirksMode: false,
childNodes: []
};
};
exports.createElement = function(tagName, namespaceURI, attrs) {
return {
nodeName: tagName,
tagName: tagName,
attrs: attrs,
namespaceURI: namespaceURI,
childNodes: [],
parentNode: null
};
};
exports.createCommentNode = function(data) {
return {
nodeName: "#comment",
data: data,
parentNode: null
};
};
var createTextNode = function(value) {
return {
nodeName: "#text",
value: value,
parentNode: null
};
};
exports.setDocumentType = function(document, name, publicId, systemId) {
var doctypeNode = null;
for (var i = 0; i < document.childNodes.length; i++) {
if (document.childNodes[i].nodeName === "#documentType") {
doctypeNode = document.childNodes[i];
break;
}
}
if (doctypeNode) {
doctypeNode.name = name;
doctypeNode.publicId = publicId;
doctypeNode.systemId = systemId;
} else {
appendChild(document, {
nodeName: "#documentType",
name: name,
publicId: publicId,
systemId: systemId
});
}
};
exports.setQuirksMode = function(document) {
document.quirksMode = true;
};
exports.isQuirksMode = function(document) {
return document.quirksMode;
};
var appendChild = exports.appendChild = function(parentNode, newNode) {
parentNode.childNodes.push(newNode);
newNode.parentNode = parentNode;
};
var insertBefore = exports.insertBefore = function(parentNode, newNode, referenceNode) {
var insertionIdx = parentNode.childNodes.indexOf(referenceNode);
parentNode.childNodes.splice(insertionIdx, 0, newNode);
newNode.parentNode = parentNode;
};
exports.detachNode = function(node) {
if (node.parentNode) {
var idx = node.parentNode.childNodes.indexOf(node);
node.parentNode.childNodes.splice(idx, 1);
node.parentNode = null;
}
};
exports.insertText = function(parentNode, text) {
if (parentNode.childNodes.length) {
var prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];
if (prevNode.nodeName === "#text") {
prevNode.value += text;
return;
}
}
appendChild(parentNode, createTextNode(text));
};
exports.insertTextBefore = function(parentNode, text, referenceNode) {
var prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
if (prevNode && prevNode.nodeName === "#text") prevNode.value += text; else insertBefore(parentNode, createTextNode(text), referenceNode);
};
exports.adoptAttributes = function(recipientNode, attrs) {
var recipientAttrsMap = [];
for (var i = 0; i < recipientNode.attrs.length; i++) recipientAttrsMap.push(recipientNode.attrs[i].name);
for (var j = 0; j < attrs.length; j++) {
if (recipientAttrsMap.indexOf(attrs[j].name) === -1) recipientNode.attrs.push(attrs[j]);
}
};
exports.getFirstChild = function(node) {
return node.childNodes[0];
};
exports.getChildNodes = function(node) {
return node.childNodes;
};
exports.getParentNode = function(node) {
return node.parentNode;
};
exports.getAttrList = function(node) {
return node.attrs;
};
exports.getTagName = function(element) {
return element.tagName;
};
exports.getNamespaceURI = function(element) {
return element.namespaceURI;
};
exports.getTextNodeContent = function(textNode) {
return textNode.value;
};
exports.getCommentNodeContent = function(commentNode) {
return commentNode.data;
};
exports.getDocumentTypeNodeName = function(doctypeNode) {
return doctypeNode.name;
};
exports.getDocumentTypeNodePublicId = function(doctypeNode) {
return doctypeNode.publicId;
};
exports.getDocumentTypeNodeSystemId = function(doctypeNode) {
return doctypeNode.systemId;
};
exports.isTextNode = function(node) {
return node.nodeName === "#text";
};
exports.isCommentNode = function(node) {
return node.nodeName === "#comment";
};
exports.isDocumentTypeNode = function(node) {
return node.nodeName === "#documentType";
};
exports.isElementNode = function(node) {
return !!node.tagName;
};
}, function(module, exports) {
"use strict";
var VALID_DOCTYPE_NAME = "html", QUIRKS_MODE_SYSTEM_ID = "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd", QUIRKS_MODE_PUBLIC_ID_PREFIXES = [ "+//silmaril//dtd html pro v0r11 19970101//en", "-//advasoft ltd//dtd html 3.0 aswedit + extensions//en", "-//as//dtd html 3.0 aswedit + extensions//en", "-//ietf//dtd html 2.0 level 1//en", "-//ietf//dtd html 2.0 level 2//en", "-//ietf//dtd html 2.0 strict level 1//en", "-//ietf//dtd html 2.0 strict level 2//en", "-//ietf//dtd html 2.0 strict//en", "-//ietf//dtd html 2.0//en", "-//ietf//dtd html 2.1e//en", "-//ietf//dtd html 3.0//en", "-//ietf//dtd html 3.0//en//", "-//ietf//dtd html 3.2 final//en", "-//ietf//dtd html 3.2//en", "-//ietf//dtd html 3//en", "-//ietf//dtd html level 0//en", "-//ietf//dtd html level 0//en//2.0", "-//ietf//dtd html level 1//en", "-//ietf//dtd html level 1//en//2.0", "-//ietf//dtd html level 2//en", "-//ietf//dtd html level 2//en//2.0", "-//ietf//dtd html level 3//en", "-//ietf//dtd html level 3//en//3.0", "-//ietf//dtd html strict level 0//en", "-//ietf//dtd html strict level 0//en//2.0", "-//ietf//dtd html strict level 1//en", "-//ietf//dtd html strict level 1//en//2.0", "-//ietf//dtd html strict level 2//en", "-//ietf//dtd html strict level 2//en//2.0", "-//ietf//dtd html strict level 3//en", "-//ietf//dtd html strict level 3//en//3.0", "-//ietf//dtd html strict//en", "-//ietf//dtd html strict//en//2.0", "-//ietf//dtd html strict//en//3.0", "-//ietf//dtd html//en", "-//ietf//dtd html//en//2.0", "-//ietf//dtd html//en//3.0", "-//metrius//dtd metrius presentational//en", "-//microsoft//dtd internet explorer 2.0 html strict//en", "-//microsoft//dtd internet explorer 2.0 html//en", "-//microsoft//dtd internet explorer 2.0 tables//en", "-//microsoft//dtd internet explorer 3.0 html strict//en", "-//microsoft//dtd internet explorer 3.0 html//en", "-//microsoft//dtd internet explorer 3.0 tables//en", "-//netscape comm. corp.//dtd html//en", "-//netscape comm. corp.//dtd strict html//en", "-//o'reilly and associates//dtd html 2.0//en", "-//o'reilly and associates//dtd html extended 1.0//en", "-//spyglass//dtd html 2.0 extended//en", "-//sq//dtd html 2.0 hotmetal + extensions//en", "-//sun microsystems corp.//dtd hotjava html//en", "-//sun microsystems corp.//dtd hotjava strict html//en", "-//w3c//dtd html 3 1995-03-24//en", "-//w3c//dtd html 3.2 draft//en", "-//w3c//dtd html 3.2 final//en", "-//w3c//dtd html 3.2//en", "-//w3c//dtd html 3.2s draft//en", "-//w3c//dtd html 4.0 frameset//en", "-//w3c//dtd html 4.0 transitional//en", "-//w3c//dtd html experimental 19960712//en", "-//w3c//dtd html experimental 970421//en", "-//w3c//dtd w3 html//en", "-//w3o//dtd w3 html 3.0//en", "-//w3o//dtd w3 html 3.0//en//", "-//webtechs//dtd mozilla html 2.0//en", "-//webtechs//dtd mozilla html//en" ], QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [ "-//w3c//dtd html 4.01 frameset//", "-//w3c//dtd html 4.01 transitional//" ], QUIRKS_MODE_PUBLIC_IDS = [ "-//w3o//dtd w3 html strict 3.0//en//", "-/w3c/dtd html 4.0 transitional/en", "html" ];
function enquoteDoctypeId(id) {
var quote = id.indexOf('"') !== -1 ? "'" : '"';
return quote + id + quote;
}
exports.isQuirks = function(name, publicId, systemId) {
if (name !== VALID_DOCTYPE_NAME) return true;
if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) return true;
if (publicId !== null) {
publicId = publicId.toLowerCase();
if (QUIRKS_MODE_PUBLIC_IDS.indexOf(publicId) > -1) return true;
var prefixes = QUIRKS_MODE_PUBLIC_ID_PREFIXES;
if (systemId === null) prefixes = prefixes.concat(QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES);
for (var i = 0; i < prefixes.length; i++) {
if (publicId.indexOf(prefixes[i]) === 0) return true;
}
}
return false;
};
exports.serializeContent = function(name, publicId, systemId) {
var str = "!DOCTYPE " + name;
if (publicId !== null) str += " PUBLIC " + enquoteDoctypeId(publicId); else if (systemId !== null) str += " SYSTEM";
if (systemId !== null) str += " " + enquoteDoctypeId(systemId);
return str;
};
}, function(module, exports, __webpack_require__) {
"use strict";
var Tokenizer = __webpack_require__(350), HTML = __webpack_require__(356);
var $ = HTML.TAG_NAMES, NS = HTML.NAMESPACES, ATTRS = HTML.ATTRS;
var MIME_TYPES = {
TEXT_HTML: "text/html",
APPLICATION_XML: "application/xhtml+xml"
};
var DEFINITION_URL_ATTR = "definitionurl", ADJUSTED_DEFINITION_URL_ATTR = "definitionURL", SVG_ATTRS_ADJUSTMENT_MAP = {
attributename: "attributeName",
attributetype: "attributeType",
basefrequency: "baseFrequency",
baseprofile: "baseProfile",
calcmode: "calcMode",
clippathunits: "clipPathUnits",
contentscripttype: "contentScriptType",
contentstyletype: "contentStyleType",
diffuseconstant: "diffuseConstant",
edgemode: "edgeMode",
externalresourcesrequired: "externalResourcesRequired",
filterres: "filterRes",
filterunits: "filterUnits",
glyphref: "glyphRef",
gradienttransform: "gradientTransform",
gradientunits: "gradientUnits",
kernelmatrix: "kernelMatrix",
kernelunitlength: "kernelUnitLength",
keypoints: "keyPoints",
keysplines: "keySplines",
keytimes: "keyTimes",
lengthadjust: "lengthAdjust",
limitingconeangle: "limitingConeAngle",
markerheight: "markerHeight",
markerunits: "markerUnits",
markerwidth: "markerWidth",
maskcontentunits: "maskContentUnits",
maskunits: "maskUnits",
numoctaves: "numOctaves",
pathlength: "pathLength",
patterncontentunits: "patternContentUnits",
patterntransform: "patternTransform",
patternunits: "patternUnits",
pointsatx: "pointsAtX",
pointsaty: "pointsAtY",
pointsatz: "pointsAtZ",
preservealpha: "preserveAlpha",
preserveaspectratio: "preserveAspectRatio",
primitiveunits: "primitiveUnits",
refx: "refX",
refy: "refY",
repeatcount: "repeatCount",
repeatdur: "repeatDur",
requiredextensions: "requiredExtensions",
requiredfeatures: "requiredFeatures",
specularconstant: "specularConstant",
specularexponent: "specularExponent",
spreadmethod: "spreadMethod",
startoffset: "startOffset",
stddeviation: "stdDeviation",
stitchtiles: "stitchTiles",
surfacescale: "surfaceScale",
systemlanguage: "systemLanguage",
tablevalues: "tableValues",
targetx: "targetX",
targety: "targetY",
textlength: "textLength",
viewbox: "viewBox",
viewtarget: "viewTarget",
xchannelselector: "xChannelSelector",
ychannelselector: "yChannelSelector",
zoomandpan: "zoomAndPan"
}, XML_ATTRS_ADJUSTMENT_MAP = {
"xlink:actuate": {
prefix: "xlink",
name: "actuate",
namespace: NS.XLINK
},
"xlink:arcrole": {
prefix: "xlink",
name: "arcrole",
namespace: NS.XLINK
},
"xlink:href": {
prefix: "xlink",
name: "href",
namespace: NS.XLINK
},
"xlink:role": {
prefix: "xlink",
name: "role",
namespace: NS.XLINK
},
"xlink:show": {
prefix: "xlink",
name: "show",
namespace: NS.XLINK
},
"xlink:title": {
prefix: "xlink",
name: "title",
namespace: NS.XLINK
},
"xlink:type": {
prefix: "xlink",
name: "type",
namespace: NS.XLINK
},
"xml:base": {
prefix: "xml",
name: "base",
namespace: NS.XML
},
"xml:lang": {
prefix: "xml",
name: "lang",
namespace: NS.XML
},
"xml:space": {
prefix: "xml",
name: "space",
namespace: NS.XML
},
xmlns: {
prefix: "",
name: "xmlns",
namespace: NS.XMLNS
},
"xmlns:xlink": {
prefix: "xmlns",
name: "xlink",
namespace: NS.XMLNS
}
};
var SVG_TAG_NAMES_ADJUSTMENT_MAP = {
altglyph: "altGlyph",
altglyphdef: "altGlyphDef",
altglyphitem: "altGlyphItem",
animatecolor: "animateColor",
animatemotion: "animateMotion",
animatetransform: "animateTransform",
clippath: "clipPath",
feblend: "feBlend",
fecolormatrix: "feColorMatrix",
fecomponenttransfer: "feComponentTransfer",
fecomposite: "feComposite",
feconvolvematrix: "feConvolveMatrix",
fediffuselighting: "feDiffuseLighting",
fedisplacementmap: "feDisplacementMap",
fedistantlight: "feDistantLight",
feflood: "feFlood",
fefunca: "feFuncA",
fefuncb: "feFuncB",
fefuncg: "feFuncG",
fefuncr: "feFuncR",
fegaussianblur: "feGaussianBlur",
feimage: "feImage",
femerge: "feMerge",
femergenode: "feMergeNode",
femorphology: "feMorphology",
feoffset: "feOffset",
fepointlight: "fePointLight",
fespecularlighting: "feSpecularLighting",
fespotlight: "feSpotLight",
fetile: "feTile",
feturbulence: "feTurbulence",
foreignobject: "foreignObject",
glyphref: "glyphRef",
lineargradient: "linearGradient",
radialgradient: "radialGradient",
textpath: "textPath"
};
var EXITS_FOREIGN_CONTENT = {};
EXITS_FOREIGN_CONTENT[$.B] = true;
EXITS_FOREIGN_CONTENT[$.BIG] = true;
EXITS_FOREIGN_CONTENT[$.BLOCKQUOTE] = true;
EXITS_FOREIGN_CONTENT[$.BODY] = true;
EXITS_FOREIGN_CONTENT[$.BR] = true;
EXITS_FOREIGN_CONTENT[$.CENTER] = true;
EXITS_FOREIGN_CONTENT[$.CODE] = true;
EXITS_FOREIGN_CONTENT[$.DD] = true;
EXITS_FOREIGN_CONTENT[$.DIV] = true;
EXITS_FOREIGN_CONTENT[$.DL] = true;
EXITS_FOREIGN_CONTENT[$.DT] = true;
EXITS_FOREIGN_CONTENT[$.EM] = true;
EXITS_FOREIGN_CONTENT[$.EMBED] = true;
EXITS_FOREIGN_CONTENT[$.H1] = true;
EXITS_FOREIGN_CONTENT[$.H2] = true;
EXITS_FOREIGN_CONTENT[$.H3] = true;
EXITS_FOREIGN_CONTENT[$.H4] = true;
EXITS_FOREIGN_CONTENT[$.H5] = true;
EXITS_FOREIGN_CONTENT[$.H6] = true;
EXITS_FOREIGN_CONTENT[$.HEAD] = true;
EXITS_FOREIGN_CONTENT[$.HR] = true;
EXITS_FOREIGN_CONTENT[$.I] = true;
EXITS_FOREIGN_CONTENT[$.IMG] = true;
EXITS_FOREIGN_CONTENT[$.LI] = true;
EXITS_FOREIGN_CONTENT[$.LISTING] = true;
EXITS_FOREIGN_CONTENT[$.MENU] = true;
EXITS_FOREIGN_CONTENT[$.META] = true;
EXITS_FOREIGN_CONTENT[$.NOBR] = true;
EXITS_FOREIGN_CONTENT[$.OL] = true;
EXITS_FOREIGN_CONTENT[$.P] = true;
EXITS_FOREIGN_CONTENT[$.PRE] = true;
EXITS_FOREIGN_CONTENT[$.RUBY] = true;
EXITS_FOREIGN_CONTENT[$.S] = true;
EXITS_FOREIGN_CONTENT[$.SMALL] = true;
EXITS_FOREIGN_CONTENT[$.SPAN] = true;
EXITS_FOREIGN_CONTENT[$.STRONG] = true;
EXITS_FOREIGN_CONTENT[$.STRIKE] = true;
EXITS_FOREIGN_CONTENT[$.SUB] = true;
EXITS_FOREIGN_CONTENT[$.SUP] = true;
EXITS_FOREIGN_CONTENT[$.TABLE] = true;
EXITS_FOREIGN_CONTENT[$.TT] = true;
EXITS_FOREIGN_CONTENT[$.U] = true;
EXITS_FOREIGN_CONTENT[$.UL] = true;
EXITS_FOREIGN_CONTENT[$.VAR] = true;
exports.causesExit = function(startTagToken) {
var tn = startTagToken.tagName;
if (tn === $.FONT && (Tokenizer.getTokenAttr(startTagToken, ATTRS.COLOR) !== null || Tokenizer.getTokenAttr(startTagToken, ATTRS.SIZE) !== null || Tokenizer.getTokenAttr(startTagToken, ATTRS.FACE) !== null)) {
return true;
}
return EXITS_FOREIGN_CONTENT[tn];
};
exports.adjustTokenMathMLAttrs = function(token) {
for (var i = 0; i < token.attrs.length; i++) {
if (token.attrs[i].name === DEFINITION_URL_ATTR) {
token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
break;
}
}
};
exports.adjustTokenSVGAttrs = function(token) {
for (var i = 0; i < token.attrs.length; i++) {
var adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];
if (adjustedAttrName) token.attrs[i].name = adjustedAttrName;
}
};
exports.adjustTokenXMLAttrs = function(token) {
for (var i = 0; i < token.attrs.length; i++) {
var adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];
if (adjustedAttrEntry) {
token.attrs[i].prefix = adjustedAttrEntry.prefix;
token.attrs[i].name = adjustedAttrEntry.name;
token.attrs[i].namespace = adjustedAttrEntry.namespace;
}
}
};
exports.adjustTokenSVGTagName = function(token) {
var adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP[token.tagName];
if (adjustedTagName) token.tagName = adjustedTagName;
};
exports.isMathMLTextIntegrationPoint = function(tn, ns) {
return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);
};
exports.isHtmlIntegrationPoint = function(tn, ns, attrs) {
if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {
for (var i = 0; i < attrs.length; i++) {
if (attrs[i].name === ATTRS.ENCODING) {
var value = attrs[i].value.toLowerCase();
return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
}
}
}
return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);
};
}, function(module, exports) {
"use strict";
exports.mergeOptions = function(defaults, options) {
options = options || {};
return [ defaults, options ].reduce(function(merged, optObj) {
Object.keys(optObj).forEach(function(key) {
merged[key] = optObj[key];
});
return merged;
}, {});
};
}, function(module, exports, __webpack_require__) {
"use strict";
var Tokenizer = __webpack_require__(350), TokenizerProxy = __webpack_require__(364), Utils = __webpack_require__(362);
var DEFAULT_OPTIONS = {
decodeHtmlEntities: true,
locationInfo: false
};
function skip() {}
var SimpleApiParser = module.exports = function(handlers, options) {
this.options = Utils.mergeOptions(DEFAULT_OPTIONS, options);
this.handlers = {
doctype: this._wrapHandler(handlers.doctype),
startTag: this._wrapHandler(handlers.startTag),
endTag: this._wrapHandler(handlers.endTag),
text: this._wrapHandler(handlers.text),
comment: this._wrapHandler(handlers.comment)
};
};
SimpleApiParser.prototype._wrapHandler = function(handler) {
var parser = this;
handler = handler || skip;
if (this.options.locationInfo) {
return function() {
var args = Array.prototype.slice.call(arguments);
args.push(parser.currentTokenLocation);
handler.apply(handler, args);
};
}
return handler;
};
SimpleApiParser.prototype.parse = function(html) {
var token = null;
this._reset(html);
do {
token = this.tokenizerProxy.getNextToken();
if (token.type === Tokenizer.CHARACTER_TOKEN || token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN || token.type === Tokenizer.NULL_CHARACTER_TOKEN) {
if (this.options.locationInfo) {
if (this.pendingText === null) this.currentTokenLocation = token.location; else this.currentTokenLocation.end = token.location.end;
}
this.pendingText = (this.pendingText || "") + token.chars;
} else {
this._emitPendingText();
this._handleToken(token);
}
} while (token.type !== Tokenizer.EOF_TOKEN);
};
SimpleApiParser.prototype._handleToken = function(token) {
if (this.options.locationInfo) this.currentTokenLocation = token.location;
if (token.type === Tokenizer.START_TAG_TOKEN) this.handlers.startTag(token.tagName, token.attrs, token.selfClosing); else if (token.type === Tokenizer.END_TAG_TOKEN) this.handlers.endTag(token.tagName); else if (token.type === Tokenizer.COMMENT_TOKEN) this.handlers.comment(token.data); else if (token.type === Tokenizer.DOCTYPE_TOKEN) this.handlers.doctype(token.name, token.publicId, token.systemId);
};
SimpleApiParser.prototype._reset = function(html) {
this.tokenizerProxy = new TokenizerProxy(html, this.options);
this.pendingText = null;
this.currentTokenLocation = null;
};
SimpleApiParser.prototype._emitPendingText = function() {
if (this.pendingText !== null) {
this.handlers.text(this.pendingText);
this.pendingText = null;
}
};
}, function(module, exports, __webpack_require__) {
"use strict";
var Tokenizer = __webpack_require__(350), ForeignContent = __webpack_require__(361), UNICODE = __webpack_require__(352), HTML = __webpack_require__(356);
var $ = HTML.TAG_NAMES, NS = HTML.NAMESPACES;
var TokenizerProxy = module.exports = function(html, options) {
this.tokenizer = new Tokenizer(html, options);
this.namespaceStack = [];
this.namespaceStackTop = -1;
this.currentNamespace = null;
this.inForeignContent = false;
};
TokenizerProxy.prototype.getNextToken = function() {
var token = this.tokenizer.getNextToken();
if (token.type === Tokenizer.START_TAG_TOKEN) this._handleStartTagToken(token); else if (token.type === Tokenizer.END_TAG_TOKEN) this._handleEndTagToken(token); else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN && this.inForeignContent) {
token.type = Tokenizer.CHARACTER_TOKEN;
token.chars = UNICODE.REPLACEMENT_CHARACTER;
}
return token;
};
TokenizerProxy.prototype._enterNamespace = function(namespace) {
this.namespaceStackTop++;
this.namespaceStack.push(namespace);
this.inForeignContent = namespace !== NS.HTML;
this.currentNamespace = namespace;
this.tokenizer.allowCDATA = this.inForeignContent;
};
TokenizerProxy.prototype._leaveCurrentNamespace = function() {
this.namespaceStackTop--;
this.namespaceStack.pop();
this.currentNamespace = this.namespaceStack[this.namespaceStackTop];
this.inForeignContent = this.currentNamespace !== NS.HTML;
this.tokenizer.allowCDATA = this.inForeignContent;
};
TokenizerProxy.prototype._ensureTokenizerMode = function(tn) {
if (tn === $.TEXTAREA || tn === $.TITLE) this.tokenizer.state = Tokenizer.MODE.RCDATA; else if (tn === $.PLAINTEXT) this.tokenizer.state = Tokenizer.MODE.PLAINTEXT; else if (tn === $.SCRIPT) this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA; else if (tn === $.STYLE || tn === $.IFRAME || tn === $.XMP || tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT) {
this.tokenizer.state = Tokenizer.MODE.RAWTEXT;
}
};
TokenizerProxy.prototype._handleStartTagToken = function(token) {
var tn = token.tagName;
if (tn === $.SVG) this._enterNamespace(NS.SVG); else if (tn === $.MATH) this._enterNamespace(NS.MATHML); else {
if (this.inForeignContent) {
if (ForeignContent.causesExit(token)) this._leaveCurrentNamespace(); else if (ForeignContent.isMathMLTextIntegrationPoint(tn, this.currentNamespace) || ForeignContent.isHtmlIntegrationPoint(tn, this.currentNamespace, token.attrs)) {
this._enterNamespace(NS.HTML);
}
} else this._ensureTokenizerMode(tn);
}
};
TokenizerProxy.prototype._handleEndTagToken = function(token) {
var tn = token.tagName;
if (!this.inForeignContent) {
var previousNs = this.namespaceStack[this.namespaceStackTop - 1];
if (ForeignContent.isMathMLTextIntegrationPoint(tn, previousNs) || ForeignContent.isHtmlIntegrationPoint(tn, previousNs, token.attrs)) {
this._leaveCurrentNamespace();
} else if (tn === $.SCRIPT) this.tokenizer.state = Tokenizer.MODE.DATA;
} else if (tn === $.SVG && this.currentNamespace === NS.SVG || tn === $.MATH && this.currentNamespace === NS.MATHML) this._leaveCurrentNamespace();
};
}, function(module, exports, __webpack_require__) {
"use strict";
var DefaultTreeAdapter = __webpack_require__(359), Doctype = __webpack_require__(360), Utils = __webpack_require__(362), HTML = __webpack_require__(356);
var $ = HTML.TAG_NAMES, NS = HTML.NAMESPACES;
var DEFAULT_OPTIONS = {
encodeHtmlEntities: true
};
var AMP_REGEX = /&/g, NBSP_REGEX = /\u00a0/g, DOUBLE_QUOTE_REGEX = /"/g, LT_REGEX = /</g, GT_REGEX = />/g;
function escapeString(str, attrMode) {
str = str.replace(AMP_REGEX, "&amp;").replace(NBSP_REGEX, "&nbsp;");
if (attrMode) str = str.replace(DOUBLE_QUOTE_REGEX, "&quot;"); else {
str = str.replace(LT_REGEX, "&lt;").replace(GT_REGEX, "&gt;");
}
return str;
}
var Serializer = module.exports = function(treeAdapter, options) {
this.treeAdapter = treeAdapter || DefaultTreeAdapter;
this.options = Utils.mergeOptions(DEFAULT_OPTIONS, options);
};
Serializer.prototype.serialize = function(node) {
this.html = "";
this._serializeChildNodes(node);
return this.html;
};
Serializer.prototype._serializeChildNodes = function(parentNode) {
var childNodes = this.treeAdapter.getChildNodes(parentNode);
if (childNodes) {
for (var i = 0, cnLength = childNodes.length; i < cnLength; i++) {
var currentNode = childNodes[i];
if (this.treeAdapter.isElementNode(currentNode)) this._serializeElement(currentNode); else if (this.treeAdapter.isTextNode(currentNode)) this._serializeTextNode(currentNode); else if (this.treeAdapter.isCommentNode(currentNode)) this._serializeCommentNode(currentNode); else if (this.treeAdapter.isDocumentTypeNode(currentNode)) this._serializeDocumentTypeNode(currentNode);
}
}
};
Serializer.prototype._serializeElement = function(node) {
var tn = this.treeAdapter.getTagName(node), ns = this.treeAdapter.getNamespaceURI(node), qualifiedTn = ns === NS.HTML || ns === NS.SVG || ns === NS.MATHML ? tn : ns + ":" + tn;
this.html += "<" + qualifiedTn;
this._serializeAttributes(node);
this.html += ">";
if (tn !== $.AREA && tn !== $.BASE && tn !== $.BASEFONT && tn !== $.BGSOUND && tn !== $.BR && tn !== $.BR && tn !== $.COL && tn !== $.EMBED && tn !== $.FRAME && tn !== $.HR && tn !== $.IMG && tn !== $.INPUT && tn !== $.KEYGEN && tn !== $.LINK && tn !== $.MENUITEM && tn !== $.META && tn !== $.PARAM && tn !== $.SOURCE && tn !== $.TRACK && tn !== $.WBR) {
if (tn === $.PRE || tn === $.TEXTAREA || tn === $.LISTING) {
var firstChild = this.treeAdapter.getFirstChild(node);
if (firstChild && this.treeAdapter.isTextNode(firstChild)) {
var content = this.treeAdapter.getTextNodeContent(firstChild);
if (content[0] === "\n") this.html += "\n";
}
}
var childNodesHolder = tn === $.TEMPLATE && ns === NS.HTML ? this.treeAdapter.getChildNodes(node)[0] : node;
this._serializeChildNodes(childNodesHolder);
this.html += "</" + qualifiedTn + ">";
}
};
Serializer.prototype._serializeAttributes = function(node) {
var attrs = this.treeAdapter.getAttrList(node);
for (var i = 0, attrsLength = attrs.length; i < attrsLength; i++) {
var attr = attrs[i], value = this.options.encodeHtmlEntities ? escapeString(attr.value, true) : attr.value;
this.html += " ";
if (!attr.namespace) this.html += attr.name; else if (attr.namespace === NS.XML) this.html += "xml:" + attr.name; else if (attr.namespace === NS.XMLNS) {
if (attr.name !== "xmlns") this.html += "xmlns:";
this.html += attr.name;
} else if (attr.namespace === NS.XLINK) this.html += "xlink:" + attr.name; else this.html += attr.namespace + ":" + attr.name;
this.html += '="' + value + '"';
}
};
Serializer.prototype._serializeTextNode = function(node) {
var content = this.treeAdapter.getTextNodeContent(node), parent = this.treeAdapter.getParentNode(node), parentTn = void 0;
if (parent && this.treeAdapter.isElementNode(parent)) parentTn = this.treeAdapter.getTagName(parent);
if (parentTn === $.STYLE || parentTn === $.SCRIPT || parentTn === $.XMP || parentTn === $.IFRAME || parentTn === $.NOEMBED || parentTn === $.NOFRAMES || parentTn === $.PLAINTEXT || parentTn === $.NOSCRIPT) {
this.html += content;
} else this.html += this.options.encodeHtmlEntities ? escapeString(content, false) : content;
};
Serializer.prototype._serializeCommentNode = function(node) {
this.html += "<!--" + this.treeAdapter.getCommentNodeContent(node) + "-->";
};
Serializer.prototype._serializeDocumentTypeNode = function(node) {
var name = this.treeAdapter.getDocumentTypeNodeName(node), publicId = this.treeAdapter.getDocumentTypeNodePublicId(node), systemId = this.treeAdapter.getDocumentTypeNodeSystemId(node);
this.html += "<" + Doctype.serializeContent(name, publicId, systemId) + ">";
};
}, function(module, exports, __webpack_require__) {
"use strict";
var Parser = __webpack_require__(349), ParsingUnit = __webpack_require__(367);
exports.parseDocument = function(html, treeAdapter) {
var parser = new Parser(treeAdapter), parsingUnit = new ParsingUnit(parser);
parser._runParsingLoop = function() {
parsingUnit.parsingLoopLock = true;
while (!parsingUnit.suspended && !this.stopped) this._iterateParsingLoop();
parsingUnit.parsingLoopLock = false;
if (this.stopped) parsingUnit.callback(this.document);
};
process.nextTick(function() {
parser.parse(html);
});
return parsingUnit;
};
exports.parseInnerHtml = function(innerHtml, contextElement, treeAdapter) {
var parser = new Parser(treeAdapter);
return parser.parseFragment(innerHtml, contextElement);
};
}, function(module, exports) {
"use strict";
var ParsingUnit = module.exports = function(parser) {
this.parser = parser;
this.suspended = false;
this.parsingLoopLock = false;
this.callback = null;
};
ParsingUnit.prototype._stateGuard = function(suspend) {
if (this.suspended && suspend) throw new Error("parse5: Parser was already suspended. Please, check your control flow logic."); else if (!this.suspended && !suspend) throw new Error("parse5: Parser was already resumed. Please, check your control flow logic.");
return suspend;
};
ParsingUnit.prototype.suspend = function() {
this.suspended = this._stateGuard(true);
return this;
};
ParsingUnit.prototype.resume = function() {
this.suspended = this._stateGuard(false);
if (!this.parsingLoopLock) this.parser._runParsingLoop();
return this;
};
ParsingUnit.prototype.documentWrite = function(html) {
this.parser.tokenizer.preprocessor.write(html);
return this;
};
ParsingUnit.prototype.handleScripts = function(scriptHandler) {
this.parser.scriptHandler = scriptHandler;
return this;
};
ParsingUnit.prototype.done = function(callback) {
this.callback = callback;
return this;
};
}, function(module, exports, __webpack_require__) {
"use strict";
var Doctype = __webpack_require__(360);
var nodeTypes = {
element: 1,
text: 3,
cdata: 4,
comment: 8
};
var nodePropertyShorthands = {
tagName: "name",
childNodes: "children",
parentNode: "parent",
previousSibling: "prev",
nextSibling: "next",
nodeValue: "data"
};
var Node = function(props) {
for (var key in props) {
if (props.hasOwnProperty(key)) this[key] = props[key];
}
};
Node.prototype = {
get firstChild() {
var children = this.children;
return children && children[0] || null;
},
get lastChild() {
var children = this.children;
return children && children[children.length - 1] || null;
},
get nodeType() {
return nodeTypes[this.type] || nodeTypes.element;
}
};
Object.keys(nodePropertyShorthands).forEach(function(key) {
var shorthand = nodePropertyShorthands[key];
Object.defineProperty(Node.prototype, key, {
get: function() {
return this[shorthand] || null;
},
set: function(val) {
this[shorthand] = val;
return val;
}
});
});
exports.createDocument = exports.createDocumentFragment = function() {
return new Node({
type: "root",
name: "root",
parent: null,
prev: null,
next: null,
children: []
});
};
exports.createElement = function(tagName, namespaceURI, attrs) {
var attribs = {}, attribsNamespace = {}, attribsPrefix = {};
for (var i = 0; i < attrs.length; i++) {
var attrName = attrs[i].name;
attribs[attrName] = attrs[i].value;
attribsNamespace[attrName] = attrs[i].namespace;
attribsPrefix[attrName] = attrs[i].prefix;
}
return new Node({
type: tagName === "script" || tagName === "style" ? tagName : "tag",
name: tagName,
namespace: namespaceURI,
attribs: attribs,
"x-attribsNamespace": attribsNamespace,
"x-attribsPrefix": attribsPrefix,
children: [],
parent: null,
prev: null,
next: null
});
};
exports.createCommentNode = function(data) {
return new Node({
type: "comment",
data: data,
parent: null,
prev: null,
next: null
});
};
var createTextNode = function(value) {
return new Node({
type: "text",
data: value,
parent: null,
prev: null,
next: null
});
};
exports.setDocumentType = function(document, name, publicId, systemId) {
var data = Doctype.serializeContent(name, publicId, systemId), doctypeNode = null;
for (var i = 0; i < document.children.length; i++) {
if (document.children[i].type === "directive" && document.children[i].name === "!doctype") {
doctypeNode = document.children[i];
break;
}
}
if (doctypeNode) {
doctypeNode.data = data;
doctypeNode["x-name"] = name;
doctypeNode["x-publicId"] = publicId;
doctypeNode["x-systemId"] = systemId;
} else {
appendChild(document, new Node({
type: "directive",
name: "!doctype",
data: data,
"x-name": name,
"x-publicId": publicId,
"x-systemId": systemId
}));
}
};
exports.setQuirksMode = function(document) {
document.quirksMode = true;
};
exports.isQuirksMode = function(document) {
return document.quirksMode;
};
var appendChild = exports.appendChild = function(parentNode, newNode) {
var prev = parentNode.children[parentNode.children.length - 1];
if (prev) {
prev.next = newNode;
newNode.prev = prev;
}
parentNode.children.push(newNode);
newNode.parent = parentNode;
};
var insertBefore = exports.insertBefore = function(parentNode, newNode, referenceNode) {
var insertionIdx = parentNode.children.indexOf(referenceNode), prev = referenceNode.prev;
if (prev) {
prev.next = newNode;
newNode.prev = prev;
}
referenceNode.prev = newNode;
newNode.next = referenceNode;
parentNode.children.splice(insertionIdx, 0, newNode);
newNode.parent = parentNode;
};
exports.detachNode = function(node) {
if (node.parent) {
var idx = node.parent.children.indexOf(node), prev = node.prev, next = node.next;
node.prev = null;
node.next = null;
if (prev) prev.next = next;
if (next) next.prev = prev;
node.parent.children.splice(idx, 1);
node.parent = null;
}
};
exports.insertText = function(parentNode, text) {
var lastChild = parentNode.children[parentNode.children.length - 1];
if (lastChild && lastChild.type === "text") lastChild.data += text; else appendChild(parentNode, createTextNode(text));
};
exports.insertTextBefore = function(parentNode, text, referenceNode) {
var prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];
if (prevNode && prevNode.type === "text") prevNode.data += text; else insertBefore(parentNode, createTextNode(text), referenceNode);
};
exports.adoptAttributes = function(recipientNode, attrs) {
for (var i = 0; i < attrs.length; i++) {
var attrName = attrs[i].name;
if (typeof recipientNode.attribs[attrName] === "undefined") {
recipientNode.attribs[attrName] = attrs[i].value;
recipientNode["x-attribsNamespace"][attrName] = attrs[i].namespace;
recipientNode["x-attribsPrefix"][attrName] = attrs[i].prefix;
}
}
};
exports.getFirstChild = function(node) {
return node.children[0];
};
exports.getChildNodes = function(node) {
return node.children;
};
exports.getParentNode = function(node) {
return node.parent;
};
exports.getAttrList = function(node) {
var attrList = [];
for (var name in node.attribs) {
if (node.attribs.hasOwnProperty(name)) {
attrList.push({
name: name,
value: node.attribs[name],
namespace: node["x-attribsNamespace"][name],
prefix: node["x-attribsPrefix"][name]
});
}
}
return attrList;
};
exports.getTagName = function(element) {
return element.name;
};
exports.getNamespaceURI = function(element) {
return element.namespace;
};
exports.getTextNodeContent = function(textNode) {
return textNode.data;
};
exports.getCommentNodeContent = function(commentNode) {
return commentNode.data;
};
exports.getDocumentTypeNodeName = function(doctypeNode) {
return doctypeNode["x-name"];
};
exports.getDocumentTypeNodePublicId = function(doctypeNode) {
return doctypeNode["x-publicId"];
};
exports.getDocumentTypeNodeSystemId = function(doctypeNode) {
return doctypeNode["x-systemId"];
};
exports.isTextNode = function(node) {
return node.type === "text";
};
exports.isCommentNode = function(node) {
return node.type === "comment";
};
exports.isDocumentTypeNode = function(node) {
return node.type === "directive" && node.name === "!doctype";
};
exports.isElementNode = function(node) {
return !!node.attribs;
};
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(370);
exports.Map = lang_1.global.Map;
exports.Set = lang_1.global.Set;
var createMapFromPairs = function() {
try {
if (new exports.Map([ [ 1, 2 ] ]).size === 1) {
return function createMapFromPairs(pairs) {
return new exports.Map(pairs);
};
}
} catch (e) {}
return function createMapAndPopulateFromPairs(pairs) {
var map = new exports.Map();
for (var i = 0; i < pairs.length; i++) {
var pair = pairs[i];
map.set(pair[0], pair[1]);
}
return map;
};
}();
var createMapFromMap = function() {
try {
if (new exports.Map(new exports.Map())) {
return function createMapFromMap(m) {
return new exports.Map(m);
};
}
} catch (e) {}
return function createMapAndPopulateFromMap(m) {
var map = new exports.Map();
m.forEach(function(v, k) {
map.set(k, v);
});
return map;
};
}();
var _clearValues = function() {
if (new exports.Map().keys().next) {
return function _clearValues(m) {
var keyIterator = m.keys();
var k;
while (!(k = keyIterator.next()).done) {
m.set(k.value, null);
}
};
} else {
return function _clearValuesWithForeEach(m) {
m.forEach(function(v, k) {
m.set(k, null);
});
};
}
}();
var _arrayFromMap = function() {
try {
if (new exports.Map().values().next) {
return function createArrayFromMap(m, getValues) {
return getValues ? Array.from(m.values()) : Array.from(m.keys());
};
}
} catch (e) {}
return function createArrayFromMapWithForeach(m, getValues) {
var res = ListWrapper.createFixedSize(m.size), i = 0;
m.forEach(function(v, k) {
res[i] = getValues ? v : k;
i++;
});
return res;
};
}();
var MapWrapper = function() {
function MapWrapper() {}
MapWrapper.clone = function(m) {
return createMapFromMap(m);
};
MapWrapper.createFromStringMap = function(stringMap) {
var result = new exports.Map();
for (var prop in stringMap) {
result.set(prop, stringMap[prop]);
}
return result;
};
MapWrapper.toStringMap = function(m) {
var r = {};
m.forEach(function(v, k) {
return r[k] = v;
});
return r;
};
MapWrapper.createFromPairs = function(pairs) {
return createMapFromPairs(pairs);
};
MapWrapper.clearValues = function(m) {
_clearValues(m);
};
MapWrapper.iterable = function(m) {
return m;
};
MapWrapper.keys = function(m) {
return _arrayFromMap(m, false);
};
MapWrapper.values = function(m) {
return _arrayFromMap(m, true);
};
return MapWrapper;
}();
exports.MapWrapper = MapWrapper;
var StringMapWrapper = function() {
function StringMapWrapper() {}
StringMapWrapper.create = function() {
return {};
};
StringMapWrapper.contains = function(map, key) {
return map.hasOwnProperty(key);
};
StringMapWrapper.get = function(map, key) {
return map.hasOwnProperty(key) ? map[key] : undefined;
};
StringMapWrapper.set = function(map, key, value) {
map[key] = value;
};
StringMapWrapper.keys = function(map) {
return Object.keys(map);
};
StringMapWrapper.values = function(map) {
return Object.keys(map).reduce(function(r, a) {
r.push(map[a]);
return r;
}, []);
};
StringMapWrapper.isEmpty = function(map) {
for (var prop in map) {
return false;
}
return true;
};
StringMapWrapper.delete = function(map, key) {
delete map[key];
};
StringMapWrapper.forEach = function(map, callback) {
for (var prop in map) {
if (map.hasOwnProperty(prop)) {
callback(map[prop], prop);
}
}
};
StringMapWrapper.merge = function(m1, m2) {
var m = {};
for (var attr in m1) {
if (m1.hasOwnProperty(attr)) {
m[attr] = m1[attr];
}
}
for (var attr in m2) {
if (m2.hasOwnProperty(attr)) {
m[attr] = m2[attr];
}
}
return m;
};
StringMapWrapper.equals = function(m1, m2) {
var k1 = Object.keys(m1);
var k2 = Object.keys(m2);
if (k1.length != k2.length) {
return false;
}
var key;
for (var i = 0; i < k1.length; i++) {
key = k1[i];
if (m1[key] !== m2[key]) {
return false;
}
}
return true;
};
return StringMapWrapper;
}();
exports.StringMapWrapper = StringMapWrapper;
var ListWrapper = function() {
function ListWrapper() {}
ListWrapper.createFixedSize = function(size) {
return new Array(size);
};
ListWrapper.createGrowableSize = function(size) {
return new Array(size);
};
ListWrapper.clone = function(array) {
return array.slice(0);
};
ListWrapper.forEachWithIndex = function(array, fn) {
for (var i = 0; i < array.length; i++) {
fn(array[i], i);
}
};
ListWrapper.first = function(array) {
if (!array) return null;
return array[0];
};
ListWrapper.last = function(array) {
if (!array || array.length == 0) return null;
return array[array.length - 1];
};
ListWrapper.indexOf = function(array, value, startIndex) {
if (startIndex === void 0) {
startIndex = 0;
}
return array.indexOf(value, startIndex);
};
ListWrapper.contains = function(list, el) {
return list.indexOf(el) !== -1;
};
ListWrapper.reversed = function(array) {
var a = ListWrapper.clone(array);
return a.reverse();
};
ListWrapper.concat = function(a, b) {
return a.concat(b);
};
ListWrapper.insert = function(list, index, value) {
list.splice(index, 0, value);
};
ListWrapper.removeAt = function(list, index) {
var res = list[index];
list.splice(index, 1);
return res;
};
ListWrapper.removeAll = function(list, items) {
for (var i = 0; i < items.length; ++i) {
var index = list.indexOf(items[i]);
list.splice(index, 1);
}
};
ListWrapper.remove = function(list, el) {
var index = list.indexOf(el);
if (index > -1) {
list.splice(index, 1);
return true;
}
return false;
};
ListWrapper.clear = function(list) {
list.length = 0;
};
ListWrapper.isEmpty = function(list) {
return list.length == 0;
};
ListWrapper.fill = function(list, value, start, end) {
if (start === void 0) {
start = 0;
}
if (end === void 0) {
end = null;
}
list.fill(value, start, end === null ? list.length : end);
};
ListWrapper.equals = function(a, b) {
if (a.length != b.length) return false;
for (var i = 0; i < a.length; ++i) {
if (a[i] !== b[i]) return false;
}
return true;
};
ListWrapper.slice = function(l, from, to) {
if (from === void 0) {
from = 0;
}
if (to === void 0) {
to = null;
}
return l.slice(from, to === null ? undefined : to);
};
ListWrapper.splice = function(l, from, length) {
return l.splice(from, length);
};
ListWrapper.sort = function(l, compareFn) {
if (lang_1.isPresent(compareFn)) {
l.sort(compareFn);
} else {
l.sort();
}
};
ListWrapper.toString = function(l) {
return l.toString();
};
ListWrapper.toJSON = function(l) {
return JSON.stringify(l);
};
ListWrapper.maximum = function(list, predicate) {
if (list.length == 0) {
return null;
}
var solution = null;
var maxValue = -Infinity;
for (var index = 0; index < list.length; index++) {
var candidate = list[index];
if (lang_1.isBlank(candidate)) {
continue;
}
var candidateValue = predicate(candidate);
if (candidateValue > maxValue) {
solution = candidate;
maxValue = candidateValue;
}
}
return solution;
};
ListWrapper.flatten = function(list) {
var target = [];
_flattenArray(list, target);
return target;
};
ListWrapper.addAll = function(list, source) {
for (var i = 0; i < source.length; i++) {
list.push(source[i]);
}
};
return ListWrapper;
}();
exports.ListWrapper = ListWrapper;
function _flattenArray(source, target) {
if (lang_1.isPresent(source)) {
for (var i = 0; i < source.length; i++) {
var item = source[i];
if (lang_1.isArray(item)) {
_flattenArray(item, target);
} else {
target.push(item);
}
}
}
return target;
}
function isListLikeIterable(obj) {
if (!lang_1.isJsObject(obj)) return false;
return lang_1.isArray(obj) || !(obj instanceof exports.Map) && lang_1.getSymbolIterator() in obj;
}
exports.isListLikeIterable = isListLikeIterable;
function areIterablesEqual(a, b, comparator) {
var iterator1 = a[lang_1.getSymbolIterator()]();
var iterator2 = b[lang_1.getSymbolIterator()]();
while (true) {
var item1 = iterator1.next();
var item2 = iterator2.next();
if (item1.done && item2.done) return true;
if (item1.done || item2.done) return false;
if (!comparator(item1.value, item2.value)) return false;
}
}
exports.areIterablesEqual = areIterablesEqual;
function iterateListLike(obj, fn) {
if (lang_1.isArray(obj)) {
for (var i = 0; i < obj.length; i++) {
fn(obj[i]);
}
} else {
var iterator = obj[lang_1.getSymbolIterator()]();
var item;
while (!(item = iterator.next()).done) {
fn(item.value);
}
}
}
exports.iterateListLike = iterateListLike;
var createSetFromList = function() {
var test = new exports.Set([ 1, 2, 3 ]);
if (test.size === 3) {
return function createSetFromList(lst) {
return new exports.Set(lst);
};
} else {
return function createSetAndPopulateFromList(lst) {
var res = new exports.Set(lst);
if (res.size !== lst.length) {
for (var i = 0; i < lst.length; i++) {
res.add(lst[i]);
}
}
return res;
};
}
}();
var SetWrapper = function() {
function SetWrapper() {}
SetWrapper.createFromList = function(lst) {
return createSetFromList(lst);
};
SetWrapper.has = function(s, key) {
return s.has(key);
};
SetWrapper.delete = function(m, k) {
m.delete(k);
};
return SetWrapper;
}();
exports.SetWrapper = SetWrapper;
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var globalScope;
if (typeof window === "undefined") {
if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) {
globalScope = self;
} else {
globalScope = global;
}
} else {
globalScope = window;
}
function scheduleMicroTask(fn) {
Zone.current.scheduleMicroTask("scheduleMicrotask", fn);
}
exports.scheduleMicroTask = scheduleMicroTask;
exports.IS_DART = false;
var _global = globalScope;
exports.global = _global;
exports.Type = Function;
function getTypeNameForDebugging(type) {
if (type["name"]) {
return type["name"];
}
return typeof type;
}
exports.getTypeNameForDebugging = getTypeNameForDebugging;
exports.Math = _global.Math;
exports.Date = _global.Date;
var _devMode = true;
var _modeLocked = false;
function lockMode() {
_modeLocked = true;
}
exports.lockMode = lockMode;
function enableProdMode() {
if (_modeLocked) {
throw "Cannot enable prod mode after platform setup.";
}
_devMode = false;
}
exports.enableProdMode = enableProdMode;
function assertionsEnabled() {
return _devMode;
}
exports.assertionsEnabled = assertionsEnabled;
_global.assert = function assert(condition) {};
function isPresent(obj) {
return obj !== undefined && obj !== null;
}
exports.isPresent = isPresent;
function isBlank(obj) {
return obj === undefined || obj === null;
}
exports.isBlank = isBlank;
function isBoolean(obj) {
return typeof obj === "boolean";
}
exports.isBoolean = isBoolean;
function isNumber(obj) {
return typeof obj === "number";
}
exports.isNumber = isNumber;
function isString(obj) {
return typeof obj === "string";
}
exports.isString = isString;
function isFunction(obj) {
return typeof obj === "function";
}
exports.isFunction = isFunction;
function isType(obj) {
return isFunction(obj);
}
exports.isType = isType;
function isStringMap(obj) {
return typeof obj === "object" && obj !== null;
}
exports.isStringMap = isStringMap;
var STRING_MAP_PROTO = Object.getPrototypeOf({});
function isStrictStringMap(obj) {
return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
}
exports.isStrictStringMap = isStrictStringMap;
function isPromise(obj) {
return obj instanceof _global.Promise;
}
exports.isPromise = isPromise;
function isArray(obj) {
return Array.isArray(obj);
}
exports.isArray = isArray;
function isDate(obj) {
return obj instanceof exports.Date && !isNaN(obj.valueOf());
}
exports.isDate = isDate;
function noop() {}
exports.noop = noop;
function stringify(token) {
if (typeof token === "string") {
return token;
}
if (token === undefined || token === null) {
return "" + token;
}
if (token.name) {
return token.name;
}
if (token.overriddenName) {
return token.overriddenName;
}
var res = token.toString();
var newLineIndex = res.indexOf("\n");
return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
exports.stringify = stringify;
function serializeEnum(val) {
return val;
}
exports.serializeEnum = serializeEnum;
function deserializeEnum(val, values) {
return val;
}
exports.deserializeEnum = deserializeEnum;
function resolveEnumToken(enumValue, val) {
return enumValue[val];
}
exports.resolveEnumToken = resolveEnumToken;
var StringWrapper = function() {
function StringWrapper() {}
StringWrapper.fromCharCode = function(code) {
return String.fromCharCode(code);
};
StringWrapper.charCodeAt = function(s, index) {
return s.charCodeAt(index);
};
StringWrapper.split = function(s, regExp) {
return s.split(regExp);
};
StringWrapper.equals = function(s, s2) {
return s === s2;
};
StringWrapper.stripLeft = function(s, charVal) {
if (s && s.length) {
var pos = 0;
for (var i = 0; i < s.length; i++) {
if (s[i] != charVal) break;
pos++;
}
s = s.substring(pos);
}
return s;
};
StringWrapper.stripRight = function(s, charVal) {
if (s && s.length) {
var pos = s.length;
for (var i = s.length - 1; i >= 0; i--) {
if (s[i] != charVal) break;
pos--;
}
s = s.substring(0, pos);
}
return s;
};
StringWrapper.replace = function(s, from, replace) {
return s.replace(from, replace);
};
StringWrapper.replaceAll = function(s, from, replace) {
return s.replace(from, replace);
};
StringWrapper.slice = function(s, from, to) {
if (from === void 0) {
from = 0;
}
if (to === void 0) {
to = null;
}
return s.slice(from, to === null ? undefined : to);
};
StringWrapper.replaceAllMapped = function(s, from, cb) {
return s.replace(from, function() {
var matches = [];
for (var _i = 0; _i < arguments.length; _i++) {
matches[_i - 0] = arguments[_i];
}
matches.splice(-2, 2);
return cb(matches);
});
};
StringWrapper.contains = function(s, substr) {
return s.indexOf(substr) != -1;
};
StringWrapper.compare = function(a, b) {
if (a < b) {
return -1;
} else if (a > b) {
return 1;
} else {
return 0;
}
};
return StringWrapper;
}();
exports.StringWrapper = StringWrapper;
var StringJoiner = function() {
function StringJoiner(parts) {
if (parts === void 0) {
parts = [];
}
this.parts = parts;
}
StringJoiner.prototype.add = function(part) {
this.parts.push(part);
};
StringJoiner.prototype.toString = function() {
return this.parts.join("");
};
return StringJoiner;
}();
exports.StringJoiner = StringJoiner;
var NumberParseError = function(_super) {
__extends(NumberParseError, _super);
function NumberParseError(message) {
_super.call(this);
this.message = message;
}
NumberParseError.prototype.toString = function() {
return this.message;
};
return NumberParseError;
}(Error);
exports.NumberParseError = NumberParseError;
var NumberWrapper = function() {
function NumberWrapper() {}
NumberWrapper.toFixed = function(n, fractionDigits) {
return n.toFixed(fractionDigits);
};
NumberWrapper.equal = function(a, b) {
return a === b;
};
NumberWrapper.parseIntAutoRadix = function(text) {
var result = parseInt(text);
if (isNaN(result)) {
throw new NumberParseError("Invalid integer literal when parsing " + text);
}
return result;
};
NumberWrapper.parseInt = function(text, radix) {
if (radix == 10) {
if (/^(\-|\+)?[0-9]+$/.test(text)) {
return parseInt(text, radix);
}
} else if (radix == 16) {
if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
return parseInt(text, radix);
}
} else {
var result = parseInt(text, radix);
if (!isNaN(result)) {
return result;
}
}
throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " + radix);
};
NumberWrapper.parseFloat = function(text) {
return parseFloat(text);
};
Object.defineProperty(NumberWrapper, "NaN", {
get: function() {
return NaN;
},
enumerable: true,
configurable: true
});
NumberWrapper.isNaN = function(value) {
return isNaN(value);
};
NumberWrapper.isInteger = function(value) {
return Number.isInteger(value);
};
return NumberWrapper;
}();
exports.NumberWrapper = NumberWrapper;
exports.RegExp = _global.RegExp;
var RegExpWrapper = function() {
function RegExpWrapper() {}
RegExpWrapper.create = function(regExpStr, flags) {
if (flags === void 0) {
flags = "";
}
flags = flags.replace(/g/g, "");
return new _global.RegExp(regExpStr, flags + "g");
};
RegExpWrapper.firstMatch = function(regExp, input) {
regExp.lastIndex = 0;
return regExp.exec(input);
};
RegExpWrapper.test = function(regExp, input) {
regExp.lastIndex = 0;
return regExp.test(input);
};
RegExpWrapper.matcher = function(regExp, input) {
regExp.lastIndex = 0;
return {
re: regExp,
input: input
};
};
RegExpWrapper.replaceAll = function(regExp, input, replace) {
var c = regExp.exec(input);
var res = "";
regExp.lastIndex = 0;
var prev = 0;
while (c) {
res += input.substring(prev, c.index);
res += replace(c);
prev = c.index + c[0].length;
regExp.lastIndex = prev;
c = regExp.exec(input);
}
res += input.substring(prev);
return res;
};
return RegExpWrapper;
}();
exports.RegExpWrapper = RegExpWrapper;
var RegExpMatcherWrapper = function() {
function RegExpMatcherWrapper() {}
RegExpMatcherWrapper.next = function(matcher) {
return matcher.re.exec(matcher.input);
};
return RegExpMatcherWrapper;
}();
exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
var FunctionWrapper = function() {
function FunctionWrapper() {}
FunctionWrapper.apply = function(fn, posArgs) {
return fn.apply(null, posArgs);
};
return FunctionWrapper;
}();
exports.FunctionWrapper = FunctionWrapper;
function looseIdentical(a, b) {
return a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
}
exports.looseIdentical = looseIdentical;
function getMapKey(value) {
return value;
}
exports.getMapKey = getMapKey;
function normalizeBlank(obj) {
return isBlank(obj) ? null : obj;
}
exports.normalizeBlank = normalizeBlank;
function normalizeBool(obj) {
return isBlank(obj) ? false : obj;
}
exports.normalizeBool = normalizeBool;
function isJsObject(o) {
return o !== null && (typeof o === "function" || typeof o === "object");
}
exports.isJsObject = isJsObject;
function print(obj) {
console.log(obj);
}
exports.print = print;
function warn(obj) {
console.warn(obj);
}
exports.warn = warn;
var Json = function() {
function Json() {}
Json.parse = function(s) {
return _global.JSON.parse(s);
};
Json.stringify = function(data) {
return _global.JSON.stringify(data, null, 2);
};
return Json;
}();
exports.Json = Json;
var DateWrapper = function() {
function DateWrapper() {}
DateWrapper.create = function(year, month, day, hour, minutes, seconds, milliseconds) {
if (month === void 0) {
month = 1;
}
if (day === void 0) {
day = 1;
}
if (hour === void 0) {
hour = 0;
}
if (minutes === void 0) {
minutes = 0;
}
if (seconds === void 0) {
seconds = 0;
}
if (milliseconds === void 0) {
milliseconds = 0;
}
return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
};
DateWrapper.fromISOString = function(str) {
return new exports.Date(str);
};
DateWrapper.fromMillis = function(ms) {
return new exports.Date(ms);
};
DateWrapper.toMillis = function(date) {
return date.getTime();
};
DateWrapper.now = function() {
return new exports.Date();
};
DateWrapper.toJson = function(date) {
return date.toJSON();
};
return DateWrapper;
}();
exports.DateWrapper = DateWrapper;
function setValueOnPath(global, path, value) {
var parts = path.split(".");
var obj = global;
while (parts.length > 1) {
var name = parts.shift();
if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
obj = obj[name];
} else {
obj = obj[name] = {};
}
}
if (obj === undefined || obj === null) {
obj = {};
}
obj[parts.shift()] = value;
}
exports.setValueOnPath = setValueOnPath;
var _symbolIterator = null;
function getSymbolIterator() {
if (isBlank(_symbolIterator)) {
if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
_symbolIterator = Symbol.iterator;
} else {
var keys = Object.getOwnPropertyNames(Map.prototype);
for (var i = 0; i < keys.length; ++i) {
var key = keys[i];
if (key !== "entries" && key !== "size" && Map.prototype[key] === Map.prototype["entries"]) {
_symbolIterator = key;
}
}
}
}
return _symbolIterator;
}
exports.getSymbolIterator = getSymbolIterator;
function evalExpression(sourceUrl, expr, declarations, vars) {
var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
var fnArgNames = [];
var fnArgValues = [];
for (var argName in vars) {
fnArgNames.push(argName);
fnArgValues.push(vars[argName]);
}
return new (Function.bind.apply(Function, [ void 0 ].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
}
exports.evalExpression = evalExpression;
function isPrimitive(obj) {
return !isJsObject(obj);
}
exports.isPrimitive = isPrimitive;
function hasConstructor(value, type) {
return value.constructor === type;
}
exports.hasConstructor = hasConstructor;
function bitWiseOr(values) {
return values.reduce(function(a, b) {
return a | b;
});
}
exports.bitWiseOr = bitWiseOr;
function bitWiseAnd(values) {
return values.reduce(function(a, b) {
return a & b;
});
}
exports.bitWiseAnd = bitWiseAnd;
function escape(s) {
return _global.encodeURI(s);
}
exports.escape = escape;
}, function(module, exports, __webpack_require__) {
"use strict";
var platform_browser_1 = __webpack_require__(372);
exports.DomAdapter = platform_browser_1.__platform_browser_private__.DomAdapter;
exports.setRootDomAdapter = platform_browser_1.__platform_browser_private__.setRootDomAdapter;
exports.getDOM = platform_browser_1.__platform_browser_private__.getDOM;
}, function(module, exports, __webpack_require__) {
"use strict";
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
__export(__webpack_require__(373));
}, function(module, exports, __webpack_require__) {
"use strict";
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(219);
var browser_common_1 = __webpack_require__(374);
var dom_events_1 = __webpack_require__(447);
exports.DomEventsPlugin = dom_events_1.DomEventsPlugin;
var event_manager_1 = __webpack_require__(230);
exports.EventManager = event_manager_1.EventManager;
exports.EVENT_MANAGER_PLUGINS = event_manager_1.EVENT_MANAGER_PLUGINS;
var ng_probe_1 = __webpack_require__(446);
exports.ELEMENT_PROBE_PROVIDERS = ng_probe_1.ELEMENT_PROBE_PROVIDERS;
var browser_common_2 = __webpack_require__(374);
exports.BROWSER_APP_COMMON_PROVIDERS = browser_common_2.BROWSER_APP_COMMON_PROVIDERS;
exports.BROWSER_SANITIZATION_PROVIDERS = browser_common_2.BROWSER_SANITIZATION_PROVIDERS;
exports.BROWSER_PROVIDERS = browser_common_2.BROWSER_PROVIDERS;
exports.By = browser_common_2.By;
exports.Title = browser_common_2.Title;
exports.enableDebugTools = browser_common_2.enableDebugTools;
exports.disableDebugTools = browser_common_2.disableDebugTools;
exports.HAMMER_GESTURE_CONFIG = browser_common_2.HAMMER_GESTURE_CONFIG;
exports.HammerGestureConfig = browser_common_2.HammerGestureConfig;
__export(__webpack_require__(455));
var dom_tokens_1 = __webpack_require__(229);
exports.DOCUMENT = dom_tokens_1.DOCUMENT;
var dom_sanitization_service_1 = __webpack_require__(439);
exports.DomSanitizationService = dom_sanitization_service_1.DomSanitizationService;
exports.SecurityContext = dom_sanitization_service_1.SecurityContext;
var platform_browser_static_1 = __webpack_require__(456);
exports.bootstrapStatic = platform_browser_static_1.bootstrapStatic;
exports.browserStaticPlatform = platform_browser_static_1.browserStaticPlatform;
exports.BROWSER_APP_STATIC_PROVIDERS = platform_browser_static_1.BROWSER_APP_STATIC_PROVIDERS;
exports.BrowserPlatformLocation = platform_browser_static_1.BrowserPlatformLocation;
function browserPlatform() {
if (lang_1.isBlank(core_1.getPlatform())) {
core_1.createPlatform(core_1.ReflectiveInjector.resolveAndCreate(browser_common_1.BROWSER_PROVIDERS));
}
return core_1.assertPlatform(browser_common_1.BROWSER_PLATFORM_MARKER);
}
exports.browserPlatform = browserPlatform;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var core_private_1 = __webpack_require__(375);
var common_1 = __webpack_require__(376);
var dom_sanitization_service_1 = __webpack_require__(439);
var lang_1 = __webpack_require__(219);
var browser_adapter_1 = __webpack_require__(442);
var testability_1 = __webpack_require__(444);
var dom_adapter_1 = __webpack_require__(223);
var dom_tokens_1 = __webpack_require__(229);
var event_manager_1 = __webpack_require__(230);
var dom_renderer_1 = __webpack_require__(214);
var shared_styles_host_1 = __webpack_require__(228);
var key_events_1 = __webpack_require__(445);
var ng_probe_1 = __webpack_require__(446);
var dom_events_1 = __webpack_require__(447);
var hammer_gestures_1 = __webpack_require__(448);
var shared_styles_host_2 = __webpack_require__(228);
var animation_builder_1 = __webpack_require__(215);
var browser_details_1 = __webpack_require__(224);
var title_1 = __webpack_require__(450);
exports.Title = title_1.Title;
var browser_adapter_2 = __webpack_require__(442);
exports.BrowserDomAdapter = browser_adapter_2.BrowserDomAdapter;
var tools_1 = __webpack_require__(451);
exports.enableDebugTools = tools_1.enableDebugTools;
exports.disableDebugTools = tools_1.disableDebugTools;
var by_1 = __webpack_require__(454);
exports.By = by_1.By;
exports.BROWSER_PLATFORM_MARKER = new core_1.OpaqueToken("BrowserPlatformMarker");
exports.BROWSER_PROVIDERS = [ {
provide: exports.BROWSER_PLATFORM_MARKER,
useValue: true
}, core_1.PLATFORM_COMMON_PROVIDERS, {
provide: core_1.PLATFORM_INITIALIZER,
useValue: initDomAdapter,
multi: true
} ];
function _exceptionHandler() {
return new core_1.ExceptionHandler(dom_adapter_1.getDOM(), !lang_1.IS_DART);
}
function _document() {
return dom_adapter_1.getDOM().defaultDoc();
}
exports.BROWSER_SANITIZATION_PROVIDERS = [ {
provide: core_private_1.SanitizationService,
useExisting: dom_sanitization_service_1.DomSanitizationService
}, {
provide: dom_sanitization_service_1.DomSanitizationService,
useClass: dom_sanitization_service_1.DomSanitizationServiceImpl
} ];
exports.BROWSER_APP_COMMON_PROVIDERS = [ core_1.APPLICATION_COMMON_PROVIDERS, common_1.FORM_PROVIDERS, exports.BROWSER_SANITIZATION_PROVIDERS, {
provide: core_1.PLATFORM_PIPES,
useValue: common_1.COMMON_PIPES,
multi: true
}, {
provide: core_1.PLATFORM_DIRECTIVES,
useValue: common_1.COMMON_DIRECTIVES,
multi: true
}, {
provide: core_1.ExceptionHandler,
useFactory: _exceptionHandler,
deps: []
}, {
provide: dom_tokens_1.DOCUMENT,
useFactory: _document,
deps: []
}, {
provide: event_manager_1.EVENT_MANAGER_PLUGINS,
useClass: dom_events_1.DomEventsPlugin,
multi: true
}, {
provide: event_manager_1.EVENT_MANAGER_PLUGINS,
useClass: key_events_1.KeyEventsPlugin,
multi: true
}, {
provide: event_manager_1.EVENT_MANAGER_PLUGINS,
useClass: hammer_gestures_1.HammerGesturesPlugin,
multi: true
}, {
provide: hammer_gestures_1.HAMMER_GESTURE_CONFIG,
useClass: hammer_gestures_1.HammerGestureConfig
}, {
provide: dom_renderer_1.DomRootRenderer,
useClass: dom_renderer_1.DomRootRenderer_
}, {
provide: core_1.RootRenderer,
useExisting: dom_renderer_1.DomRootRenderer
}, {
provide: shared_styles_host_1.SharedStylesHost,
useExisting: shared_styles_host_2.DomSharedStylesHost
}, shared_styles_host_2.DomSharedStylesHost, core_1.Testability, browser_details_1.BrowserDetails, animation_builder_1.AnimationBuilder, event_manager_1.EventManager, ng_probe_1.ELEMENT_PROBE_PROVIDERS ];
var hammer_gestures_2 = __webpack_require__(448);
exports.HAMMER_GESTURE_CONFIG = hammer_gestures_2.HAMMER_GESTURE_CONFIG;
exports.HammerGestureConfig = hammer_gestures_2.HammerGestureConfig;
function initDomAdapter() {
browser_adapter_1.BrowserDomAdapter.makeCurrent();
core_private_1.wtfInit();
testability_1.BrowserGetTestability.init();
}
exports.initDomAdapter = initDomAdapter;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
exports.RenderDebugInfo = core_1.__core_private__.RenderDebugInfo;
exports.wtfInit = core_1.__core_private__.wtfInit;
exports.ReflectionCapabilities = core_1.__core_private__.ReflectionCapabilities;
exports.VIEW_ENCAPSULATION_VALUES = core_1.__core_private__.VIEW_ENCAPSULATION_VALUES;
exports.DebugDomRootRenderer = core_1.__core_private__.DebugDomRootRenderer;
exports.SecurityContext = core_1.__core_private__.SecurityContext;
exports.SanitizationService = core_1.__core_private__.SanitizationService;
}, function(module, exports, __webpack_require__) {
"use strict";
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
__export(__webpack_require__(377));
__export(__webpack_require__(398));
__export(__webpack_require__(408));
__export(__webpack_require__(432));
__export(__webpack_require__(433));
}, function(module, exports, __webpack_require__) {
"use strict";
var async_pipe_1 = __webpack_require__(378);
exports.AsyncPipe = async_pipe_1.AsyncPipe;
var date_pipe_1 = __webpack_require__(387);
exports.DatePipe = date_pipe_1.DatePipe;
var json_pipe_1 = __webpack_require__(389);
exports.JsonPipe = json_pipe_1.JsonPipe;
var slice_pipe_1 = __webpack_require__(390);
exports.SlicePipe = slice_pipe_1.SlicePipe;
var lowercase_pipe_1 = __webpack_require__(391);
exports.LowerCasePipe = lowercase_pipe_1.LowerCasePipe;
var number_pipe_1 = __webpack_require__(392);
exports.NumberPipe = number_pipe_1.NumberPipe;
exports.DecimalPipe = number_pipe_1.DecimalPipe;
exports.PercentPipe = number_pipe_1.PercentPipe;
exports.CurrencyPipe = number_pipe_1.CurrencyPipe;
var uppercase_pipe_1 = __webpack_require__(393);
exports.UpperCasePipe = uppercase_pipe_1.UpperCasePipe;
var replace_pipe_1 = __webpack_require__(394);
exports.ReplacePipe = replace_pipe_1.ReplacePipe;
var i18n_plural_pipe_1 = __webpack_require__(395);
exports.I18nPluralPipe = i18n_plural_pipe_1.I18nPluralPipe;
var i18n_select_pipe_1 = __webpack_require__(396);
exports.I18nSelectPipe = i18n_select_pipe_1.I18nSelectPipe;
var common_pipes_1 = __webpack_require__(397);
exports.COMMON_PIPES = common_pipes_1.COMMON_PIPES;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var async_1 = __webpack_require__(380);
var invalid_pipe_argument_exception_1 = __webpack_require__(382);
var ObservableStrategy = function() {
function ObservableStrategy() {}
ObservableStrategy.prototype.createSubscription = function(async, updateLatestValue) {
return async_1.ObservableWrapper.subscribe(async, updateLatestValue, function(e) {
throw e;
});
};
ObservableStrategy.prototype.dispose = function(subscription) {
async_1.ObservableWrapper.dispose(subscription);
};
ObservableStrategy.prototype.onDestroy = function(subscription) {
async_1.ObservableWrapper.dispose(subscription);
};
return ObservableStrategy;
}();
var PromiseStrategy = function() {
function PromiseStrategy() {}
PromiseStrategy.prototype.createSubscription = function(async, updateLatestValue) {
return async.then(updateLatestValue);
};
PromiseStrategy.prototype.dispose = function(subscription) {};
PromiseStrategy.prototype.onDestroy = function(subscription) {};
return PromiseStrategy;
}();
var _promiseStrategy = new PromiseStrategy();
var _observableStrategy = new ObservableStrategy();
var __unused;
var AsyncPipe = function() {
function AsyncPipe(_ref) {
this._latestValue = null;
this._latestReturnedValue = null;
this._subscription = null;
this._obj = null;
this._strategy = null;
this._ref = _ref;
}
AsyncPipe.prototype.ngOnDestroy = function() {
if (lang_1.isPresent(this._subscription)) {
this._dispose();
}
};
AsyncPipe.prototype.transform = function(obj) {
if (lang_1.isBlank(this._obj)) {
if (lang_1.isPresent(obj)) {
this._subscribe(obj);
}
this._latestReturnedValue = this._latestValue;
return this._latestValue;
}
if (obj !== this._obj) {
this._dispose();
return this.transform(obj);
}
if (this._latestValue === this._latestReturnedValue) {
return this._latestReturnedValue;
} else {
this._latestReturnedValue = this._latestValue;
return core_1.WrappedValue.wrap(this._latestValue);
}
};
AsyncPipe.prototype._subscribe = function(obj) {
var _this = this;
this._obj = obj;
this._strategy = this._selectStrategy(obj);
this._subscription = this._strategy.createSubscription(obj, function(value) {
return _this._updateLatestValue(obj, value);
});
};
AsyncPipe.prototype._selectStrategy = function(obj) {
if (lang_1.isPromise(obj)) {
return _promiseStrategy;
} else if (async_1.ObservableWrapper.isObservable(obj)) {
return _observableStrategy;
} else {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(AsyncPipe, obj);
}
};
AsyncPipe.prototype._dispose = function() {
this._strategy.dispose(this._subscription);
this._latestValue = null;
this._latestReturnedValue = null;
this._subscription = null;
this._obj = null;
};
AsyncPipe.prototype._updateLatestValue = function(async, value) {
if (async === this._obj) {
this._latestValue = value;
this._ref.markForCheck();
}
};
AsyncPipe.decorators = [ {
type: core_1.Pipe,
args: [ {
name: "async",
pure: false
} ]
}, {
type: core_1.Injectable
} ];
AsyncPipe.ctorParameters = [ {
type: core_1.ChangeDetectorRef
} ];
return AsyncPipe;
}();
exports.AsyncPipe = AsyncPipe;
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var globalScope;
if (typeof window === "undefined") {
if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) {
globalScope = self;
} else {
globalScope = global;
}
} else {
globalScope = window;
}
function scheduleMicroTask(fn) {
Zone.current.scheduleMicroTask("scheduleMicrotask", fn);
}
exports.scheduleMicroTask = scheduleMicroTask;
exports.IS_DART = false;
var _global = globalScope;
exports.global = _global;
exports.Type = Function;
function getTypeNameForDebugging(type) {
if (type["name"]) {
return type["name"];
}
return typeof type;
}
exports.getTypeNameForDebugging = getTypeNameForDebugging;
exports.Math = _global.Math;
exports.Date = _global.Date;
var _devMode = true;
var _modeLocked = false;
function lockMode() {
_modeLocked = true;
}
exports.lockMode = lockMode;
function enableProdMode() {
if (_modeLocked) {
throw "Cannot enable prod mode after platform setup.";
}
_devMode = false;
}
exports.enableProdMode = enableProdMode;
function assertionsEnabled() {
return _devMode;
}
exports.assertionsEnabled = assertionsEnabled;
_global.assert = function assert(condition) {};
function isPresent(obj) {
return obj !== undefined && obj !== null;
}
exports.isPresent = isPresent;
function isBlank(obj) {
return obj === undefined || obj === null;
}
exports.isBlank = isBlank;
function isBoolean(obj) {
return typeof obj === "boolean";
}
exports.isBoolean = isBoolean;
function isNumber(obj) {
return typeof obj === "number";
}
exports.isNumber = isNumber;
function isString(obj) {
return typeof obj === "string";
}
exports.isString = isString;
function isFunction(obj) {
return typeof obj === "function";
}
exports.isFunction = isFunction;
function isType(obj) {
return isFunction(obj);
}
exports.isType = isType;
function isStringMap(obj) {
return typeof obj === "object" && obj !== null;
}
exports.isStringMap = isStringMap;
var STRING_MAP_PROTO = Object.getPrototypeOf({});
function isStrictStringMap(obj) {
return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
}
exports.isStrictStringMap = isStrictStringMap;
function isPromise(obj) {
return obj instanceof _global.Promise;
}
exports.isPromise = isPromise;
function isArray(obj) {
return Array.isArray(obj);
}
exports.isArray = isArray;
function isDate(obj) {
return obj instanceof exports.Date && !isNaN(obj.valueOf());
}
exports.isDate = isDate;
function noop() {}
exports.noop = noop;
function stringify(token) {
if (typeof token === "string") {
return token;
}
if (token === undefined || token === null) {
return "" + token;
}
if (token.name) {
return token.name;
}
if (token.overriddenName) {
return token.overriddenName;
}
var res = token.toString();
var newLineIndex = res.indexOf("\n");
return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
exports.stringify = stringify;
function serializeEnum(val) {
return val;
}
exports.serializeEnum = serializeEnum;
function deserializeEnum(val, values) {
return val;
}
exports.deserializeEnum = deserializeEnum;
function resolveEnumToken(enumValue, val) {
return enumValue[val];
}
exports.resolveEnumToken = resolveEnumToken;
var StringWrapper = function() {
function StringWrapper() {}
StringWrapper.fromCharCode = function(code) {
return String.fromCharCode(code);
};
StringWrapper.charCodeAt = function(s, index) {
return s.charCodeAt(index);
};
StringWrapper.split = function(s, regExp) {
return s.split(regExp);
};
StringWrapper.equals = function(s, s2) {
return s === s2;
};
StringWrapper.stripLeft = function(s, charVal) {
if (s && s.length) {
var pos = 0;
for (var i = 0; i < s.length; i++) {
if (s[i] != charVal) break;
pos++;
}
s = s.substring(pos);
}
return s;
};
StringWrapper.stripRight = function(s, charVal) {
if (s && s.length) {
var pos = s.length;
for (var i = s.length - 1; i >= 0; i--) {
if (s[i] != charVal) break;
pos--;
}
s = s.substring(0, pos);
}
return s;
};
StringWrapper.replace = function(s, from, replace) {
return s.replace(from, replace);
};
StringWrapper.replaceAll = function(s, from, replace) {
return s.replace(from, replace);
};
StringWrapper.slice = function(s, from, to) {
if (from === void 0) {
from = 0;
}
if (to === void 0) {
to = null;
}
return s.slice(from, to === null ? undefined : to);
};
StringWrapper.replaceAllMapped = function(s, from, cb) {
return s.replace(from, function() {
var matches = [];
for (var _i = 0; _i < arguments.length; _i++) {
matches[_i - 0] = arguments[_i];
}
matches.splice(-2, 2);
return cb(matches);
});
};
StringWrapper.contains = function(s, substr) {
return s.indexOf(substr) != -1;
};
StringWrapper.compare = function(a, b) {
if (a < b) {
return -1;
} else if (a > b) {
return 1;
} else {
return 0;
}
};
return StringWrapper;
}();
exports.StringWrapper = StringWrapper;
var StringJoiner = function() {
function StringJoiner(parts) {
if (parts === void 0) {
parts = [];
}
this.parts = parts;
}
StringJoiner.prototype.add = function(part) {
this.parts.push(part);
};
StringJoiner.prototype.toString = function() {
return this.parts.join("");
};
return StringJoiner;
}();
exports.StringJoiner = StringJoiner;
var NumberParseError = function(_super) {
__extends(NumberParseError, _super);
function NumberParseError(message) {
_super.call(this);
this.message = message;
}
NumberParseError.prototype.toString = function() {
return this.message;
};
return NumberParseError;
}(Error);
exports.NumberParseError = NumberParseError;
var NumberWrapper = function() {
function NumberWrapper() {}
NumberWrapper.toFixed = function(n, fractionDigits) {
return n.toFixed(fractionDigits);
};
NumberWrapper.equal = function(a, b) {
return a === b;
};
NumberWrapper.parseIntAutoRadix = function(text) {
var result = parseInt(text);
if (isNaN(result)) {
throw new NumberParseError("Invalid integer literal when parsing " + text);
}
return result;
};
NumberWrapper.parseInt = function(text, radix) {
if (radix == 10) {
if (/^(\-|\+)?[0-9]+$/.test(text)) {
return parseInt(text, radix);
}
} else if (radix == 16) {
if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
return parseInt(text, radix);
}
} else {
var result = parseInt(text, radix);
if (!isNaN(result)) {
return result;
}
}
throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " + radix);
};
NumberWrapper.parseFloat = function(text) {
return parseFloat(text);
};
Object.defineProperty(NumberWrapper, "NaN", {
get: function() {
return NaN;
},
enumerable: true,
configurable: true
});
NumberWrapper.isNaN = function(value) {
return isNaN(value);
};
NumberWrapper.isInteger = function(value) {
return Number.isInteger(value);
};
return NumberWrapper;
}();
exports.NumberWrapper = NumberWrapper;
exports.RegExp = _global.RegExp;
var RegExpWrapper = function() {
function RegExpWrapper() {}
RegExpWrapper.create = function(regExpStr, flags) {
if (flags === void 0) {
flags = "";
}
flags = flags.replace(/g/g, "");
return new _global.RegExp(regExpStr, flags + "g");
};
RegExpWrapper.firstMatch = function(regExp, input) {
regExp.lastIndex = 0;
return regExp.exec(input);
};
RegExpWrapper.test = function(regExp, input) {
regExp.lastIndex = 0;
return regExp.test(input);
};
RegExpWrapper.matcher = function(regExp, input) {
regExp.lastIndex = 0;
return {
re: regExp,
input: input
};
};
RegExpWrapper.replaceAll = function(regExp, input, replace) {
var c = regExp.exec(input);
var res = "";
regExp.lastIndex = 0;
var prev = 0;
while (c) {
res += input.substring(prev, c.index);
res += replace(c);
prev = c.index + c[0].length;
regExp.lastIndex = prev;
c = regExp.exec(input);
}
res += input.substring(prev);
return res;
};
return RegExpWrapper;
}();
exports.RegExpWrapper = RegExpWrapper;
var RegExpMatcherWrapper = function() {
function RegExpMatcherWrapper() {}
RegExpMatcherWrapper.next = function(matcher) {
return matcher.re.exec(matcher.input);
};
return RegExpMatcherWrapper;
}();
exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
var FunctionWrapper = function() {
function FunctionWrapper() {}
FunctionWrapper.apply = function(fn, posArgs) {
return fn.apply(null, posArgs);
};
return FunctionWrapper;
}();
exports.FunctionWrapper = FunctionWrapper;
function looseIdentical(a, b) {
return a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
}
exports.looseIdentical = looseIdentical;
function getMapKey(value) {
return value;
}
exports.getMapKey = getMapKey;
function normalizeBlank(obj) {
return isBlank(obj) ? null : obj;
}
exports.normalizeBlank = normalizeBlank;
function normalizeBool(obj) {
return isBlank(obj) ? false : obj;
}
exports.normalizeBool = normalizeBool;
function isJsObject(o) {
return o !== null && (typeof o === "function" || typeof o === "object");
}
exports.isJsObject = isJsObject;
function print(obj) {
console.log(obj);
}
exports.print = print;
function warn(obj) {
console.warn(obj);
}
exports.warn = warn;
var Json = function() {
function Json() {}
Json.parse = function(s) {
return _global.JSON.parse(s);
};
Json.stringify = function(data) {
return _global.JSON.stringify(data, null, 2);
};
return Json;
}();
exports.Json = Json;
var DateWrapper = function() {
function DateWrapper() {}
DateWrapper.create = function(year, month, day, hour, minutes, seconds, milliseconds) {
if (month === void 0) {
month = 1;
}
if (day === void 0) {
day = 1;
}
if (hour === void 0) {
hour = 0;
}
if (minutes === void 0) {
minutes = 0;
}
if (seconds === void 0) {
seconds = 0;
}
if (milliseconds === void 0) {
milliseconds = 0;
}
return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
};
DateWrapper.fromISOString = function(str) {
return new exports.Date(str);
};
DateWrapper.fromMillis = function(ms) {
return new exports.Date(ms);
};
DateWrapper.toMillis = function(date) {
return date.getTime();
};
DateWrapper.now = function() {
return new exports.Date();
};
DateWrapper.toJson = function(date) {
return date.toJSON();
};
return DateWrapper;
}();
exports.DateWrapper = DateWrapper;
function setValueOnPath(global, path, value) {
var parts = path.split(".");
var obj = global;
while (parts.length > 1) {
var name = parts.shift();
if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
obj = obj[name];
} else {
obj = obj[name] = {};
}
}
if (obj === undefined || obj === null) {
obj = {};
}
obj[parts.shift()] = value;
}
exports.setValueOnPath = setValueOnPath;
var _symbolIterator = null;
function getSymbolIterator() {
if (isBlank(_symbolIterator)) {
if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
_symbolIterator = Symbol.iterator;
} else {
var keys = Object.getOwnPropertyNames(Map.prototype);
for (var i = 0; i < keys.length; ++i) {
var key = keys[i];
if (key !== "entries" && key !== "size" && Map.prototype[key] === Map.prototype["entries"]) {
_symbolIterator = key;
}
}
}
}
return _symbolIterator;
}
exports.getSymbolIterator = getSymbolIterator;
function evalExpression(sourceUrl, expr, declarations, vars) {
var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
var fnArgNames = [];
var fnArgValues = [];
for (var argName in vars) {
fnArgNames.push(argName);
fnArgValues.push(vars[argName]);
}
return new (Function.bind.apply(Function, [ void 0 ].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
}
exports.evalExpression = evalExpression;
function isPrimitive(obj) {
return !isJsObject(obj);
}
exports.isPrimitive = isPrimitive;
function hasConstructor(value, type) {
return value.constructor === type;
}
exports.hasConstructor = hasConstructor;
function bitWiseOr(values) {
return values.reduce(function(a, b) {
return a | b;
});
}
exports.bitWiseOr = bitWiseOr;
function bitWiseAnd(values) {
return values.reduce(function(a, b) {
return a & b;
});
}
exports.bitWiseAnd = bitWiseAnd;
function escape(s) {
return _global.encodeURI(s);
}
exports.escape = escape;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(379);
var promise_1 = __webpack_require__(381);
exports.PromiseWrapper = promise_1.PromiseWrapper;
exports.PromiseCompleter = promise_1.PromiseCompleter;
var Subject_1 = __webpack_require__(150);
var PromiseObservable_1 = __webpack_require__(169);
var toPromise_1 = __webpack_require__(170);
var Observable_1 = __webpack_require__(151);
exports.Observable = Observable_1.Observable;
var Subject_2 = __webpack_require__(150);
exports.Subject = Subject_2.Subject;
var TimerWrapper = function() {
function TimerWrapper() {}
TimerWrapper.setTimeout = function(fn, millis) {
return lang_1.global.setTimeout(fn, millis);
};
TimerWrapper.clearTimeout = function(id) {
lang_1.global.clearTimeout(id);
};
TimerWrapper.setInterval = function(fn, millis) {
return lang_1.global.setInterval(fn, millis);
};
TimerWrapper.clearInterval = function(id) {
lang_1.global.clearInterval(id);
};
return TimerWrapper;
}();
exports.TimerWrapper = TimerWrapper;
var ObservableWrapper = function() {
function ObservableWrapper() {}
ObservableWrapper.subscribe = function(emitter, onNext, onError, onComplete) {
if (onComplete === void 0) {
onComplete = function() {};
}
onError = typeof onError === "function" && onError || lang_1.noop;
onComplete = typeof onComplete === "function" && onComplete || lang_1.noop;
return emitter.subscribe({
next: onNext,
error: onError,
complete: onComplete
});
};
ObservableWrapper.isObservable = function(obs) {
return !!obs.subscribe;
};
ObservableWrapper.hasSubscribers = function(obs) {
return obs.observers.length > 0;
};
ObservableWrapper.dispose = function(subscription) {
subscription.unsubscribe();
};
ObservableWrapper.callNext = function(emitter, value) {
emitter.next(value);
};
ObservableWrapper.callEmit = function(emitter, value) {
emitter.emit(value);
};
ObservableWrapper.callError = function(emitter, error) {
emitter.error(error);
};
ObservableWrapper.callComplete = function(emitter) {
emitter.complete();
};
ObservableWrapper.fromPromise = function(promise) {
return PromiseObservable_1.PromiseObservable.create(promise);
};
ObservableWrapper.toPromise = function(obj) {
return toPromise_1.toPromise.call(obj);
};
return ObservableWrapper;
}();
exports.ObservableWrapper = ObservableWrapper;
var EventEmitter = function(_super) {
__extends(EventEmitter, _super);
function EventEmitter(isAsync) {
if (isAsync === void 0) {
isAsync = true;
}
_super.call(this);
this._isAsync = isAsync;
}
EventEmitter.prototype.emit = function(value) {
_super.prototype.next.call(this, value);
};
EventEmitter.prototype.next = function(value) {
_super.prototype.next.call(this, value);
};
EventEmitter.prototype.subscribe = function(generatorOrNext, error, complete) {
var schedulerFn;
var errorFn = function(err) {
return null;
};
var completeFn = function() {
return null;
};
if (generatorOrNext && typeof generatorOrNext === "object") {
schedulerFn = this._isAsync ? function(value) {
setTimeout(function() {
return generatorOrNext.next(value);
});
} : function(value) {
generatorOrNext.next(value);
};
if (generatorOrNext.error) {
errorFn = this._isAsync ? function(err) {
setTimeout(function() {
return generatorOrNext.error(err);
});
} : function(err) {
generatorOrNext.error(err);
};
}
if (generatorOrNext.complete) {
completeFn = this._isAsync ? function() {
setTimeout(function() {
return generatorOrNext.complete();
});
} : function() {
generatorOrNext.complete();
};
}
} else {
schedulerFn = this._isAsync ? function(value) {
setTimeout(function() {
return generatorOrNext(value);
});
} : function(value) {
generatorOrNext(value);
};
if (error) {
errorFn = this._isAsync ? function(err) {
setTimeout(function() {
return error(err);
});
} : function(err) {
error(err);
};
}
if (complete) {
completeFn = this._isAsync ? function() {
setTimeout(function() {
return complete();
});
} : function() {
complete();
};
}
}
return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
};
return EventEmitter;
}(Subject_1.Subject);
exports.EventEmitter = EventEmitter;
}, function(module, exports) {
"use strict";
var PromiseCompleter = function() {
function PromiseCompleter() {
var _this = this;
this.promise = new Promise(function(res, rej) {
_this.resolve = res;
_this.reject = rej;
});
}
return PromiseCompleter;
}();
exports.PromiseCompleter = PromiseCompleter;
var PromiseWrapper = function() {
function PromiseWrapper() {}
PromiseWrapper.resolve = function(obj) {
return Promise.resolve(obj);
};
PromiseWrapper.reject = function(obj, _) {
return Promise.reject(obj);
};
PromiseWrapper.catchError = function(promise, onError) {
return promise.catch(onError);
};
PromiseWrapper.all = function(promises) {
if (promises.length == 0) return Promise.resolve([]);
return Promise.all(promises);
};
PromiseWrapper.then = function(promise, success, rejection) {
return promise.then(success, rejection);
};
PromiseWrapper.wrap = function(computation) {
return new Promise(function(res, rej) {
try {
res(computation());
} catch (e) {
rej(e);
}
});
};
PromiseWrapper.scheduleMicrotask = function(computation) {
PromiseWrapper.then(PromiseWrapper.resolve(null), computation, function(_) {});
};
PromiseWrapper.isPromise = function(obj) {
return obj instanceof Promise;
};
PromiseWrapper.completer = function() {
return new PromiseCompleter();
};
return PromiseWrapper;
}();
exports.PromiseWrapper = PromiseWrapper;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(379);
var exceptions_1 = __webpack_require__(383);
var InvalidPipeArgumentException = function(_super) {
__extends(InvalidPipeArgumentException, _super);
function InvalidPipeArgumentException(type, value) {
_super.call(this, "Invalid argument '" + value + "' for pipe '" + lang_1.stringify(type) + "'");
}
return InvalidPipeArgumentException;
}(exceptions_1.BaseException);
exports.InvalidPipeArgumentException = InvalidPipeArgumentException;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var base_wrapped_exception_1 = __webpack_require__(384);
var exception_handler_1 = __webpack_require__(385);
var exception_handler_2 = __webpack_require__(385);
exports.ExceptionHandler = exception_handler_2.ExceptionHandler;
var BaseException = function(_super) {
__extends(BaseException, _super);
function BaseException(message) {
if (message === void 0) {
message = "--";
}
_super.call(this, message);
this.message = message;
this.stack = new Error(message).stack;
}
BaseException.prototype.toString = function() {
return this.message;
};
return BaseException;
}(Error);
exports.BaseException = BaseException;
var WrappedException = function(_super) {
__extends(WrappedException, _super);
function WrappedException(_wrapperMessage, _originalException, _originalStack, _context) {
_super.call(this, _wrapperMessage);
this._wrapperMessage = _wrapperMessage;
this._originalException = _originalException;
this._originalStack = _originalStack;
this._context = _context;
this._wrapperStack = new Error(_wrapperMessage).stack;
}
Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
get: function() {
return this._wrapperMessage;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "wrapperStack", {
get: function() {
return this._wrapperStack;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "originalException", {
get: function() {
return this._originalException;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "originalStack", {
get: function() {
return this._originalStack;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "context", {
get: function() {
return this._context;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "message", {
get: function() {
return exception_handler_1.ExceptionHandler.exceptionToString(this);
},
enumerable: true,
configurable: true
});
WrappedException.prototype.toString = function() {
return this.message;
};
return WrappedException;
}(base_wrapped_exception_1.BaseWrappedException);
exports.WrappedException = WrappedException;
function makeTypeError(message) {
return new TypeError(message);
}
exports.makeTypeError = makeTypeError;
function unimplemented() {
throw new BaseException("unimplemented");
}
exports.unimplemented = unimplemented;
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BaseWrappedException = function(_super) {
__extends(BaseWrappedException, _super);
function BaseWrappedException(message) {
_super.call(this, message);
}
Object.defineProperty(BaseWrappedException.prototype, "wrapperMessage", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "wrapperStack", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "originalException", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "originalStack", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "context", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "message", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
return BaseWrappedException;
}(Error);
exports.BaseWrappedException = BaseWrappedException;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(379);
var base_wrapped_exception_1 = __webpack_require__(384);
var collection_1 = __webpack_require__(386);
var _ArrayLogger = function() {
function _ArrayLogger() {
this.res = [];
}
_ArrayLogger.prototype.log = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logError = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logGroup = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logGroupEnd = function() {};
return _ArrayLogger;
}();
var ExceptionHandler = function() {
function ExceptionHandler(_logger, _rethrowException) {
if (_rethrowException === void 0) {
_rethrowException = true;
}
this._logger = _logger;
this._rethrowException = _rethrowException;
}
ExceptionHandler.exceptionToString = function(exception, stackTrace, reason) {
if (stackTrace === void 0) {
stackTrace = null;
}
if (reason === void 0) {
reason = null;
}
var l = new _ArrayLogger();
var e = new ExceptionHandler(l, false);
e.call(exception, stackTrace, reason);
return l.res.join("\n");
};
ExceptionHandler.prototype.call = function(exception, stackTrace, reason) {
if (stackTrace === void 0) {
stackTrace = null;
}
if (reason === void 0) {
reason = null;
}
var originalException = this._findOriginalException(exception);
var originalStack = this._findOriginalStack(exception);
var context = this._findContext(exception);
this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
this._logger.logError("STACKTRACE:");
this._logger.logError(this._longStackTrace(stackTrace));
}
if (lang_1.isPresent(reason)) {
this._logger.logError("REASON: " + reason);
}
if (lang_1.isPresent(originalException)) {
this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
}
if (lang_1.isPresent(originalStack)) {
this._logger.logError("ORIGINAL STACKTRACE:");
this._logger.logError(this._longStackTrace(originalStack));
}
if (lang_1.isPresent(context)) {
this._logger.logError("ERROR CONTEXT:");
this._logger.logError(context);
}
this._logger.logGroupEnd();
if (this._rethrowException) throw exception;
};
ExceptionHandler.prototype._extractMessage = function(exception) {
return exception instanceof base_wrapped_exception_1.BaseWrappedException ? exception.wrapperMessage : exception.toString();
};
ExceptionHandler.prototype._longStackTrace = function(stackTrace) {
return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join("\n\n-----async gap-----\n") : stackTrace.toString();
};
ExceptionHandler.prototype._findContext = function(exception) {
try {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
return lang_1.isPresent(exception.context) ? exception.context : this._findContext(exception.originalException);
} catch (e) {
return null;
}
};
ExceptionHandler.prototype._findOriginalException = function(exception) {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
var e = exception.originalException;
while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
e = e.originalException;
}
return e;
};
ExceptionHandler.prototype._findOriginalStack = function(exception) {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
var e = exception;
var stack = exception.originalStack;
while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
e = e.originalException;
if (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
stack = e.originalStack;
}
}
return stack;
};
return ExceptionHandler;
}();
exports.ExceptionHandler = ExceptionHandler;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(379);
exports.Map = lang_1.global.Map;
exports.Set = lang_1.global.Set;
var createMapFromPairs = function() {
try {
if (new exports.Map([ [ 1, 2 ] ]).size === 1) {
return function createMapFromPairs(pairs) {
return new exports.Map(pairs);
};
}
} catch (e) {}
return function createMapAndPopulateFromPairs(pairs) {
var map = new exports.Map();
for (var i = 0; i < pairs.length; i++) {
var pair = pairs[i];
map.set(pair[0], pair[1]);
}
return map;
};
}();
var createMapFromMap = function() {
try {
if (new exports.Map(new exports.Map())) {
return function createMapFromMap(m) {
return new exports.Map(m);
};
}
} catch (e) {}
return function createMapAndPopulateFromMap(m) {
var map = new exports.Map();
m.forEach(function(v, k) {
map.set(k, v);
});
return map;
};
}();
var _clearValues = function() {
if (new exports.Map().keys().next) {
return function _clearValues(m) {
var keyIterator = m.keys();
var k;
while (!(k = keyIterator.next()).done) {
m.set(k.value, null);
}
};
} else {
return function _clearValuesWithForeEach(m) {
m.forEach(function(v, k) {
m.set(k, null);
});
};
}
}();
var _arrayFromMap = function() {
try {
if (new exports.Map().values().next) {
return function createArrayFromMap(m, getValues) {
return getValues ? Array.from(m.values()) : Array.from(m.keys());
};
}
} catch (e) {}
return function createArrayFromMapWithForeach(m, getValues) {
var res = ListWrapper.createFixedSize(m.size), i = 0;
m.forEach(function(v, k) {
res[i] = getValues ? v : k;
i++;
});
return res;
};
}();
var MapWrapper = function() {
function MapWrapper() {}
MapWrapper.clone = function(m) {
return createMapFromMap(m);
};
MapWrapper.createFromStringMap = function(stringMap) {
var result = new exports.Map();
for (var prop in stringMap) {
result.set(prop, stringMap[prop]);
}
return result;
};
MapWrapper.toStringMap = function(m) {
var r = {};
m.forEach(function(v, k) {
return r[k] = v;
});
return r;
};
MapWrapper.createFromPairs = function(pairs) {
return createMapFromPairs(pairs);
};
MapWrapper.clearValues = function(m) {
_clearValues(m);
};
MapWrapper.iterable = function(m) {
return m;
};
MapWrapper.keys = function(m) {
return _arrayFromMap(m, false);
};
MapWrapper.values = function(m) {
return _arrayFromMap(m, true);
};
return MapWrapper;
}();
exports.MapWrapper = MapWrapper;
var StringMapWrapper = function() {
function StringMapWrapper() {}
StringMapWrapper.create = function() {
return {};
};
StringMapWrapper.contains = function(map, key) {
return map.hasOwnProperty(key);
};
StringMapWrapper.get = function(map, key) {
return map.hasOwnProperty(key) ? map[key] : undefined;
};
StringMapWrapper.set = function(map, key, value) {
map[key] = value;
};
StringMapWrapper.keys = function(map) {
return Object.keys(map);
};
StringMapWrapper.values = function(map) {
return Object.keys(map).reduce(function(r, a) {
r.push(map[a]);
return r;
}, []);
};
StringMapWrapper.isEmpty = function(map) {
for (var prop in map) {
return false;
}
return true;
};
StringMapWrapper.delete = function(map, key) {
delete map[key];
};
StringMapWrapper.forEach = function(map, callback) {
for (var prop in map) {
if (map.hasOwnProperty(prop)) {
callback(map[prop], prop);
}
}
};
StringMapWrapper.merge = function(m1, m2) {
var m = {};
for (var attr in m1) {
if (m1.hasOwnProperty(attr)) {
m[attr] = m1[attr];
}
}
for (var attr in m2) {
if (m2.hasOwnProperty(attr)) {
m[attr] = m2[attr];
}
}
return m;
};
StringMapWrapper.equals = function(m1, m2) {
var k1 = Object.keys(m1);
var k2 = Object.keys(m2);
if (k1.length != k2.length) {
return false;
}
var key;
for (var i = 0; i < k1.length; i++) {
key = k1[i];
if (m1[key] !== m2[key]) {
return false;
}
}
return true;
};
return StringMapWrapper;
}();
exports.StringMapWrapper = StringMapWrapper;
var ListWrapper = function() {
function ListWrapper() {}
ListWrapper.createFixedSize = function(size) {
return new Array(size);
};
ListWrapper.createGrowableSize = function(size) {
return new Array(size);
};
ListWrapper.clone = function(array) {
return array.slice(0);
};
ListWrapper.forEachWithIndex = function(array, fn) {
for (var i = 0; i < array.length; i++) {
fn(array[i], i);
}
};
ListWrapper.first = function(array) {
if (!array) return null;
return array[0];
};
ListWrapper.last = function(array) {
if (!array || array.length == 0) return null;
return array[array.length - 1];
};
ListWrapper.indexOf = function(array, value, startIndex) {
if (startIndex === void 0) {
startIndex = 0;
}
return array.indexOf(value, startIndex);
};
ListWrapper.contains = function(list, el) {
return list.indexOf(el) !== -1;
};
ListWrapper.reversed = function(array) {
var a = ListWrapper.clone(array);
return a.reverse();
};
ListWrapper.concat = function(a, b) {
return a.concat(b);
};
ListWrapper.insert = function(list, index, value) {
list.splice(index, 0, value);
};
ListWrapper.removeAt = function(list, index) {
var res = list[index];
list.splice(index, 1);
return res;
};
ListWrapper.removeAll = function(list, items) {
for (var i = 0; i < items.length; ++i) {
var index = list.indexOf(items[i]);
list.splice(index, 1);
}
};
ListWrapper.remove = function(list, el) {
var index = list.indexOf(el);
if (index > -1) {
list.splice(index, 1);
return true;
}
return false;
};
ListWrapper.clear = function(list) {
list.length = 0;
};
ListWrapper.isEmpty = function(list) {
return list.length == 0;
};
ListWrapper.fill = function(list, value, start, end) {
if (start === void 0) {
start = 0;
}
if (end === void 0) {
end = null;
}
list.fill(value, start, end === null ? list.length : end);
};
ListWrapper.equals = function(a, b) {
if (a.length != b.length) return false;
for (var i = 0; i < a.length; ++i) {
if (a[i] !== b[i]) return false;
}
return true;
};
ListWrapper.slice = function(l, from, to) {
if (from === void 0) {
from = 0;
}
if (to === void 0) {
to = null;
}
return l.slice(from, to === null ? undefined : to);
};
ListWrapper.splice = function(l, from, length) {
return l.splice(from, length);
};
ListWrapper.sort = function(l, compareFn) {
if (lang_1.isPresent(compareFn)) {
l.sort(compareFn);
} else {
l.sort();
}
};
ListWrapper.toString = function(l) {
return l.toString();
};
ListWrapper.toJSON = function(l) {
return JSON.stringify(l);
};
ListWrapper.maximum = function(list, predicate) {
if (list.length == 0) {
return null;
}
var solution = null;
var maxValue = -Infinity;
for (var index = 0; index < list.length; index++) {
var candidate = list[index];
if (lang_1.isBlank(candidate)) {
continue;
}
var candidateValue = predicate(candidate);
if (candidateValue > maxValue) {
solution = candidate;
maxValue = candidateValue;
}
}
return solution;
};
ListWrapper.flatten = function(list) {
var target = [];
_flattenArray(list, target);
return target;
};
ListWrapper.addAll = function(list, source) {
for (var i = 0; i < source.length; i++) {
list.push(source[i]);
}
};
return ListWrapper;
}();
exports.ListWrapper = ListWrapper;
function _flattenArray(source, target) {
if (lang_1.isPresent(source)) {
for (var i = 0; i < source.length; i++) {
var item = source[i];
if (lang_1.isArray(item)) {
_flattenArray(item, target);
} else {
target.push(item);
}
}
}
return target;
}
function isListLikeIterable(obj) {
if (!lang_1.isJsObject(obj)) return false;
return lang_1.isArray(obj) || !(obj instanceof exports.Map) && lang_1.getSymbolIterator() in obj;
}
exports.isListLikeIterable = isListLikeIterable;
function areIterablesEqual(a, b, comparator) {
var iterator1 = a[lang_1.getSymbolIterator()]();
var iterator2 = b[lang_1.getSymbolIterator()]();
while (true) {
var item1 = iterator1.next();
var item2 = iterator2.next();
if (item1.done && item2.done) return true;
if (item1.done || item2.done) return false;
if (!comparator(item1.value, item2.value)) return false;
}
}
exports.areIterablesEqual = areIterablesEqual;
function iterateListLike(obj, fn) {
if (lang_1.isArray(obj)) {
for (var i = 0; i < obj.length; i++) {
fn(obj[i]);
}
} else {
var iterator = obj[lang_1.getSymbolIterator()]();
var item;
while (!(item = iterator.next()).done) {
fn(item.value);
}
}
}
exports.iterateListLike = iterateListLike;
var createSetFromList = function() {
var test = new exports.Set([ 1, 2, 3 ]);
if (test.size === 3) {
return function createSetFromList(lst) {
return new exports.Set(lst);
};
} else {
return function createSetAndPopulateFromList(lst) {
var res = new exports.Set(lst);
if (res.size !== lst.length) {
for (var i = 0; i < lst.length; i++) {
res.add(lst[i]);
}
}
return res;
};
}
}();
var SetWrapper = function() {
function SetWrapper() {}
SetWrapper.createFromList = function(lst) {
return createSetFromList(lst);
};
SetWrapper.has = function(s, key) {
return s.has(key);
};
SetWrapper.delete = function(m, k) {
m.delete(k);
};
return SetWrapper;
}();
exports.SetWrapper = SetWrapper;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var intl_1 = __webpack_require__(388);
var collection_1 = __webpack_require__(386);
var invalid_pipe_argument_exception_1 = __webpack_require__(382);
var defaultLocale = "en-US";
var DatePipe = function() {
function DatePipe() {}
DatePipe.prototype.transform = function(value, pattern) {
if (pattern === void 0) {
pattern = "mediumDate";
}
if (lang_1.isBlank(value)) return null;
if (!this.supports(value)) {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(DatePipe, value);
}
if (lang_1.isNumber(value)) {
value = lang_1.DateWrapper.fromMillis(value);
}
if (collection_1.StringMapWrapper.contains(DatePipe._ALIASES, pattern)) {
pattern = collection_1.StringMapWrapper.get(DatePipe._ALIASES, pattern);
}
return intl_1.DateFormatter.format(value, defaultLocale, pattern);
};
DatePipe.prototype.supports = function(obj) {
return lang_1.isDate(obj) || lang_1.isNumber(obj);
};
DatePipe._ALIASES = {
medium: "yMMMdjms",
"short": "yMdjm",
fullDate: "yMMMMEEEEd",
longDate: "yMMMMd",
mediumDate: "yMMMd",
shortDate: "yMd",
mediumTime: "jms",
shortTime: "jm"
};
DatePipe.decorators = [ {
type: core_1.Pipe,
args: [ {
name: "date",
pure: true
} ]
}, {
type: core_1.Injectable
} ];
return DatePipe;
}();
exports.DatePipe = DatePipe;
}, function(module, exports) {
"use strict";
(function(NumberFormatStyle) {
NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
})(exports.NumberFormatStyle || (exports.NumberFormatStyle = {}));
var NumberFormatStyle = exports.NumberFormatStyle;
var NumberFormatter = function() {
function NumberFormatter() {}
NumberFormatter.format = function(num, locale, style, _a) {
var _b = _a === void 0 ? {} : _a, _c = _b.minimumIntegerDigits, minimumIntegerDigits = _c === void 0 ? 1 : _c, _d = _b.minimumFractionDigits, minimumFractionDigits = _d === void 0 ? 0 : _d, _e = _b.maximumFractionDigits, maximumFractionDigits = _e === void 0 ? 3 : _e, currency = _b.currency, _f = _b.currencyAsSymbol, currencyAsSymbol = _f === void 0 ? false : _f;
var intlOptions = {
minimumIntegerDigits: minimumIntegerDigits,
minimumFractionDigits: minimumFractionDigits,
maximumFractionDigits: maximumFractionDigits
};
intlOptions.style = NumberFormatStyle[style].toLowerCase();
if (style == NumberFormatStyle.Currency) {
intlOptions.currency = currency;
intlOptions.currencyDisplay = currencyAsSymbol ? "symbol" : "code";
}
return new Intl.NumberFormat(locale, intlOptions).format(num);
};
return NumberFormatter;
}();
exports.NumberFormatter = NumberFormatter;
function digitCondition(len) {
return len == 2 ? "2-digit" : "numeric";
}
function nameCondition(len) {
return len < 4 ? "short" : "long";
}
function extractComponents(pattern) {
var ret = {};
var i = 0, j;
while (i < pattern.length) {
j = i;
while (j < pattern.length && pattern[j] == pattern[i]) j++;
var len = j - i;
switch (pattern[i]) {
case "G":
ret.era = nameCondition(len);
break;

case "y":
ret.year = digitCondition(len);
break;

case "M":
if (len >= 3) ret.month = nameCondition(len); else ret.month = digitCondition(len);
break;

case "d":
ret.day = digitCondition(len);
break;

case "E":
ret.weekday = nameCondition(len);
break;

case "j":
ret.hour = digitCondition(len);
break;

case "h":
ret.hour = digitCondition(len);
ret.hour12 = true;
break;

case "H":
ret.hour = digitCondition(len);
ret.hour12 = false;
break;

case "m":
ret.minute = digitCondition(len);
break;

case "s":
ret.second = digitCondition(len);
break;

case "z":
ret.timeZoneName = "long";
break;

case "Z":
ret.timeZoneName = "short";
break;
}
i = j;
}
return ret;
}
var dateFormatterCache = new Map();
var DateFormatter = function() {
function DateFormatter() {}
DateFormatter.format = function(date, locale, pattern) {
var key = locale + pattern;
if (dateFormatterCache.has(key)) {
return dateFormatterCache.get(key).format(date);
}
var formatter = new Intl.DateTimeFormat(locale, extractComponents(pattern));
dateFormatterCache.set(key, formatter);
return formatter.format(date);
};
return DateFormatter;
}();
exports.DateFormatter = DateFormatter;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var JsonPipe = function() {
function JsonPipe() {}
JsonPipe.prototype.transform = function(value) {
return lang_1.Json.stringify(value);
};
JsonPipe.decorators = [ {
type: core_1.Pipe,
args: [ {
name: "json",
pure: false
} ]
}, {
type: core_1.Injectable
} ];
return JsonPipe;
}();
exports.JsonPipe = JsonPipe;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var collection_1 = __webpack_require__(386);
var invalid_pipe_argument_exception_1 = __webpack_require__(382);
var SlicePipe = function() {
function SlicePipe() {}
SlicePipe.prototype.transform = function(value, start, end) {
if (end === void 0) {
end = null;
}
if (!this.supports(value)) {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(SlicePipe, value);
}
if (lang_1.isBlank(value)) return value;
if (lang_1.isString(value)) {
return lang_1.StringWrapper.slice(value, start, end);
}
return collection_1.ListWrapper.slice(value, start, end);
};
SlicePipe.prototype.supports = function(obj) {
return lang_1.isString(obj) || lang_1.isArray(obj);
};
SlicePipe.decorators = [ {
type: core_1.Pipe,
args: [ {
name: "slice",
pure: false
} ]
}, {
type: core_1.Injectable
} ];
return SlicePipe;
}();
exports.SlicePipe = SlicePipe;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var invalid_pipe_argument_exception_1 = __webpack_require__(382);
var LowerCasePipe = function() {
function LowerCasePipe() {}
LowerCasePipe.prototype.transform = function(value) {
if (lang_1.isBlank(value)) return value;
if (!lang_1.isString(value)) {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(LowerCasePipe, value);
}
return value.toLowerCase();
};
LowerCasePipe.decorators = [ {
type: core_1.Pipe,
args: [ {
name: "lowercase"
} ]
}, {
type: core_1.Injectable
} ];
return LowerCasePipe;
}();
exports.LowerCasePipe = LowerCasePipe;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var exceptions_1 = __webpack_require__(383);
var intl_1 = __webpack_require__(388);
var invalid_pipe_argument_exception_1 = __webpack_require__(382);
var defaultLocale = "en-US";
var _re = lang_1.RegExpWrapper.create("^(\\d+)?\\.((\\d+)(\\-(\\d+))?)?$");
var NumberPipe = function() {
function NumberPipe() {}
NumberPipe._format = function(value, style, digits, currency, currencyAsSymbol) {
if (currency === void 0) {
currency = null;
}
if (currencyAsSymbol === void 0) {
currencyAsSymbol = false;
}
if (lang_1.isBlank(value)) return null;
if (!lang_1.isNumber(value)) {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(NumberPipe, value);
}
var minInt = 1, minFraction = 0, maxFraction = 3;
if (lang_1.isPresent(digits)) {
var parts = lang_1.RegExpWrapper.firstMatch(_re, digits);
if (lang_1.isBlank(parts)) {
throw new exceptions_1.BaseException(digits + " is not a valid digit info for number pipes");
}
if (lang_1.isPresent(parts[1])) {
minInt = lang_1.NumberWrapper.parseIntAutoRadix(parts[1]);
}
if (lang_1.isPresent(parts[3])) {
minFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[3]);
}
if (lang_1.isPresent(parts[5])) {
maxFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[5]);
}
}
return intl_1.NumberFormatter.format(value, defaultLocale, style, {
minimumIntegerDigits: minInt,
minimumFractionDigits: minFraction,
maximumFractionDigits: maxFraction,
currency: currency,
currencyAsSymbol: currencyAsSymbol
});
};
NumberPipe.decorators = [ {
type: core_1.Injectable
} ];
return NumberPipe;
}();
exports.NumberPipe = NumberPipe;
var DecimalPipe = function(_super) {
__extends(DecimalPipe, _super);
function DecimalPipe() {
_super.apply(this, arguments);
}
DecimalPipe.prototype.transform = function(value, digits) {
if (digits === void 0) {
digits = null;
}
return NumberPipe._format(value, intl_1.NumberFormatStyle.Decimal, digits);
};
DecimalPipe.decorators = [ {
type: core_1.Pipe,
args: [ {
name: "number"
} ]
}, {
type: core_1.Injectable
} ];
return DecimalPipe;
}(NumberPipe);
exports.DecimalPipe = DecimalPipe;
var PercentPipe = function(_super) {
__extends(PercentPipe, _super);
function PercentPipe() {
_super.apply(this, arguments);
}
PercentPipe.prototype.transform = function(value, digits) {
if (digits === void 0) {
digits = null;
}
return NumberPipe._format(value, intl_1.NumberFormatStyle.Percent, digits);
};
PercentPipe.decorators = [ {
type: core_1.Pipe,
args: [ {
name: "percent"
} ]
}, {
type: core_1.Injectable
} ];
return PercentPipe;
}(NumberPipe);
exports.PercentPipe = PercentPipe;
var CurrencyPipe = function(_super) {
__extends(CurrencyPipe, _super);
function CurrencyPipe() {
_super.apply(this, arguments);
}
CurrencyPipe.prototype.transform = function(value, currencyCode, symbolDisplay, digits) {
if (currencyCode === void 0) {
currencyCode = "USD";
}
if (symbolDisplay === void 0) {
symbolDisplay = false;
}
if (digits === void 0) {
digits = null;
}
return NumberPipe._format(value, intl_1.NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
};
CurrencyPipe.decorators = [ {
type: core_1.Pipe,
args: [ {
name: "currency"
} ]
}, {
type: core_1.Injectable
} ];
return CurrencyPipe;
}(NumberPipe);
exports.CurrencyPipe = CurrencyPipe;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var invalid_pipe_argument_exception_1 = __webpack_require__(382);
var UpperCasePipe = function() {
function UpperCasePipe() {}
UpperCasePipe.prototype.transform = function(value) {
if (lang_1.isBlank(value)) return value;
if (!lang_1.isString(value)) {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(UpperCasePipe, value);
}
return value.toUpperCase();
};
UpperCasePipe.decorators = [ {
type: core_1.Pipe,
args: [ {
name: "uppercase"
} ]
}, {
type: core_1.Injectable
} ];
return UpperCasePipe;
}();
exports.UpperCasePipe = UpperCasePipe;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var invalid_pipe_argument_exception_1 = __webpack_require__(382);
var ReplacePipe = function() {
function ReplacePipe() {}
ReplacePipe.prototype.transform = function(value, pattern, replacement) {
if (lang_1.isBlank(value)) {
return value;
}
if (!this._supportedInput(value)) {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(ReplacePipe, value);
}
var input = value.toString();
if (!this._supportedPattern(pattern)) {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(ReplacePipe, pattern);
}
if (!this._supportedReplacement(replacement)) {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(ReplacePipe, replacement);
}
if (lang_1.isFunction(replacement)) {
var rgxPattern = lang_1.isString(pattern) ? lang_1.RegExpWrapper.create(pattern) : pattern;
return lang_1.StringWrapper.replaceAllMapped(input, rgxPattern, replacement);
}
if (pattern instanceof RegExp) {
return lang_1.StringWrapper.replaceAll(input, pattern, replacement);
}
return lang_1.StringWrapper.replace(input, pattern, replacement);
};
ReplacePipe.prototype._supportedInput = function(input) {
return lang_1.isString(input) || lang_1.isNumber(input);
};
ReplacePipe.prototype._supportedPattern = function(pattern) {
return lang_1.isString(pattern) || pattern instanceof RegExp;
};
ReplacePipe.prototype._supportedReplacement = function(replacement) {
return lang_1.isString(replacement) || lang_1.isFunction(replacement);
};
ReplacePipe.decorators = [ {
type: core_1.Pipe,
args: [ {
name: "replace"
} ]
}, {
type: core_1.Injectable
} ];
return ReplacePipe;
}();
exports.ReplacePipe = ReplacePipe;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var invalid_pipe_argument_exception_1 = __webpack_require__(382);
var interpolationExp = lang_1.RegExpWrapper.create("#");
var I18nPluralPipe = function() {
function I18nPluralPipe() {}
I18nPluralPipe.prototype.transform = function(value, pluralMap) {
var key;
var valueStr;
if (!lang_1.isStringMap(pluralMap)) {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(I18nPluralPipe, pluralMap);
}
key = value === 0 || value === 1 ? "=" + value : "other";
valueStr = lang_1.isPresent(value) ? value.toString() : "";
return lang_1.StringWrapper.replaceAll(pluralMap[key], interpolationExp, valueStr);
};
I18nPluralPipe.decorators = [ {
type: core_1.Pipe,
args: [ {
name: "i18nPlural",
pure: true
} ]
}, {
type: core_1.Injectable
} ];
return I18nPluralPipe;
}();
exports.I18nPluralPipe = I18nPluralPipe;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var collection_1 = __webpack_require__(386);
var invalid_pipe_argument_exception_1 = __webpack_require__(382);
var I18nSelectPipe = function() {
function I18nSelectPipe() {}
I18nSelectPipe.prototype.transform = function(value, mapping) {
if (!lang_1.isStringMap(mapping)) {
throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(I18nSelectPipe, mapping);
}
return collection_1.StringMapWrapper.contains(mapping, value) ? mapping[value] : mapping["other"];
};
I18nSelectPipe.decorators = [ {
type: core_1.Pipe,
args: [ {
name: "i18nSelect",
pure: true
} ]
}, {
type: core_1.Injectable
} ];
return I18nSelectPipe;
}();
exports.I18nSelectPipe = I18nSelectPipe;
}, function(module, exports, __webpack_require__) {
"use strict";
var async_pipe_1 = __webpack_require__(378);
var uppercase_pipe_1 = __webpack_require__(393);
var lowercase_pipe_1 = __webpack_require__(391);
var json_pipe_1 = __webpack_require__(389);
var slice_pipe_1 = __webpack_require__(390);
var date_pipe_1 = __webpack_require__(387);
var number_pipe_1 = __webpack_require__(392);
var replace_pipe_1 = __webpack_require__(394);
var i18n_plural_pipe_1 = __webpack_require__(395);
var i18n_select_pipe_1 = __webpack_require__(396);
exports.COMMON_PIPES = [ async_pipe_1.AsyncPipe, uppercase_pipe_1.UpperCasePipe, lowercase_pipe_1.LowerCasePipe, json_pipe_1.JsonPipe, slice_pipe_1.SlicePipe, number_pipe_1.DecimalPipe, number_pipe_1.PercentPipe, number_pipe_1.CurrencyPipe, date_pipe_1.DatePipe, replace_pipe_1.ReplacePipe, i18n_plural_pipe_1.I18nPluralPipe, i18n_select_pipe_1.I18nSelectPipe ];
}, function(module, exports, __webpack_require__) {
"use strict";
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var ng_class_1 = __webpack_require__(399);
exports.NgClass = ng_class_1.NgClass;
var ng_for_1 = __webpack_require__(400);
exports.NgFor = ng_for_1.NgFor;
var ng_if_1 = __webpack_require__(401);
exports.NgIf = ng_if_1.NgIf;
var ng_template_outlet_1 = __webpack_require__(402);
exports.NgTemplateOutlet = ng_template_outlet_1.NgTemplateOutlet;
var ng_style_1 = __webpack_require__(403);
exports.NgStyle = ng_style_1.NgStyle;
var ng_switch_1 = __webpack_require__(404);
exports.NgSwitch = ng_switch_1.NgSwitch;
exports.NgSwitchWhen = ng_switch_1.NgSwitchWhen;
exports.NgSwitchDefault = ng_switch_1.NgSwitchDefault;
var ng_plural_1 = __webpack_require__(405);
exports.NgPlural = ng_plural_1.NgPlural;
exports.NgPluralCase = ng_plural_1.NgPluralCase;
exports.NgLocalization = ng_plural_1.NgLocalization;
__export(__webpack_require__(406));
var core_directives_1 = __webpack_require__(407);
exports.CORE_DIRECTIVES = core_directives_1.CORE_DIRECTIVES;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var collection_1 = __webpack_require__(386);
var NgClass = function() {
function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
this._iterableDiffers = _iterableDiffers;
this._keyValueDiffers = _keyValueDiffers;
this._ngEl = _ngEl;
this._renderer = _renderer;
this._initialClasses = [];
}
Object.defineProperty(NgClass.prototype, "initialClasses", {
set: function(v) {
this._applyInitialClasses(true);
this._initialClasses = lang_1.isPresent(v) && lang_1.isString(v) ? v.split(" ") : [];
this._applyInitialClasses(false);
this._applyClasses(this._rawClass, false);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgClass.prototype, "rawClass", {
set: function(v) {
this._cleanupClasses(this._rawClass);
if (lang_1.isString(v)) {
v = v.split(" ");
}
this._rawClass = v;
this._iterableDiffer = null;
this._keyValueDiffer = null;
if (lang_1.isPresent(v)) {
if (collection_1.isListLikeIterable(v)) {
this._iterableDiffer = this._iterableDiffers.find(v).create(null);
} else {
this._keyValueDiffer = this._keyValueDiffers.find(v).create(null);
}
}
},
enumerable: true,
configurable: true
});
NgClass.prototype.ngDoCheck = function() {
if (lang_1.isPresent(this._iterableDiffer)) {
var changes = this._iterableDiffer.diff(this._rawClass);
if (lang_1.isPresent(changes)) {
this._applyIterableChanges(changes);
}
}
if (lang_1.isPresent(this._keyValueDiffer)) {
var changes = this._keyValueDiffer.diff(this._rawClass);
if (lang_1.isPresent(changes)) {
this._applyKeyValueChanges(changes);
}
}
};
NgClass.prototype.ngOnDestroy = function() {
this._cleanupClasses(this._rawClass);
};
NgClass.prototype._cleanupClasses = function(rawClassVal) {
this._applyClasses(rawClassVal, true);
this._applyInitialClasses(false);
};
NgClass.prototype._applyKeyValueChanges = function(changes) {
var _this = this;
changes.forEachAddedItem(function(record) {
_this._toggleClass(record.key, record.currentValue);
});
changes.forEachChangedItem(function(record) {
_this._toggleClass(record.key, record.currentValue);
});
changes.forEachRemovedItem(function(record) {
if (record.previousValue) {
_this._toggleClass(record.key, false);
}
});
};
NgClass.prototype._applyIterableChanges = function(changes) {
var _this = this;
changes.forEachAddedItem(function(record) {
_this._toggleClass(record.item, true);
});
changes.forEachRemovedItem(function(record) {
_this._toggleClass(record.item, false);
});
};
NgClass.prototype._applyInitialClasses = function(isCleanup) {
var _this = this;
this._initialClasses.forEach(function(className) {
return _this._toggleClass(className, !isCleanup);
});
};
NgClass.prototype._applyClasses = function(rawClassVal, isCleanup) {
var _this = this;
if (lang_1.isPresent(rawClassVal)) {
if (lang_1.isArray(rawClassVal)) {
rawClassVal.forEach(function(className) {
return _this._toggleClass(className, !isCleanup);
});
} else if (rawClassVal instanceof Set) {
rawClassVal.forEach(function(className) {
return _this._toggleClass(className, !isCleanup);
});
} else {
collection_1.StringMapWrapper.forEach(rawClassVal, function(expVal, className) {
if (lang_1.isPresent(expVal)) _this._toggleClass(className, !isCleanup);
});
}
}
};
NgClass.prototype._toggleClass = function(className, enabled) {
className = className.trim();
if (className.length > 0) {
if (className.indexOf(" ") > -1) {
var classes = className.split(/\s+/g);
for (var i = 0, len = classes.length; i < len; i++) {
this._renderer.setElementClass(this._ngEl.nativeElement, classes[i], enabled);
}
} else {
this._renderer.setElementClass(this._ngEl.nativeElement, className, enabled);
}
}
};
NgClass.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "[ngClass]",
inputs: [ "rawClass: ngClass", "initialClasses: class" ]
} ]
} ];
NgClass.ctorParameters = [ {
type: core_1.IterableDiffers
}, {
type: core_1.KeyValueDiffers
}, {
type: core_1.ElementRef
}, {
type: core_1.Renderer
} ];
return NgClass;
}();
exports.NgClass = NgClass;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var exceptions_1 = __webpack_require__(383);
var NgForRow = function() {
function NgForRow($implicit, index, count) {
this.$implicit = $implicit;
this.index = index;
this.count = count;
}
Object.defineProperty(NgForRow.prototype, "first", {
get: function() {
return this.index === 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForRow.prototype, "last", {
get: function() {
return this.index === this.count - 1;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForRow.prototype, "even", {
get: function() {
return this.index % 2 === 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForRow.prototype, "odd", {
get: function() {
return !this.even;
},
enumerable: true,
configurable: true
});
return NgForRow;
}();
exports.NgForRow = NgForRow;
var NgFor = function() {
function NgFor(_viewContainer, _templateRef, _iterableDiffers, _cdr) {
this._viewContainer = _viewContainer;
this._templateRef = _templateRef;
this._iterableDiffers = _iterableDiffers;
this._cdr = _cdr;
}
Object.defineProperty(NgFor.prototype, "ngForOf", {
set: function(value) {
this._ngForOf = value;
if (lang_1.isBlank(this._differ) && lang_1.isPresent(value)) {
try {
this._differ = this._iterableDiffers.find(value).create(this._cdr, this._ngForTrackBy);
} catch (e) {
throw new exceptions_1.BaseException("Cannot find a differ supporting object '" + value + "' of type '" + lang_1.getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgFor.prototype, "ngForTemplate", {
set: function(value) {
if (lang_1.isPresent(value)) {
this._templateRef = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgFor.prototype, "ngForTrackBy", {
set: function(value) {
this._ngForTrackBy = value;
},
enumerable: true,
configurable: true
});
NgFor.prototype.ngDoCheck = function() {
if (lang_1.isPresent(this._differ)) {
var changes = this._differ.diff(this._ngForOf);
if (lang_1.isPresent(changes)) this._applyChanges(changes);
}
};
NgFor.prototype._applyChanges = function(changes) {
var _this = this;
var recordViewTuples = [];
changes.forEachRemovedItem(function(removedRecord) {
return recordViewTuples.push(new RecordViewTuple(removedRecord, null));
});
changes.forEachMovedItem(function(movedRecord) {
return recordViewTuples.push(new RecordViewTuple(movedRecord, null));
});
var insertTuples = this._bulkRemove(recordViewTuples);
changes.forEachAddedItem(function(addedRecord) {
return insertTuples.push(new RecordViewTuple(addedRecord, null));
});
this._bulkInsert(insertTuples);
for (var i = 0; i < insertTuples.length; i++) {
this._perViewChange(insertTuples[i].view, insertTuples[i].record);
}
for (var i = 0, ilen = this._viewContainer.length; i < ilen; i++) {
var viewRef = this._viewContainer.get(i);
viewRef.context.index = i;
viewRef.context.count = ilen;
}
changes.forEachIdentityChange(function(record) {
var viewRef = _this._viewContainer.get(record.currentIndex);
viewRef.context.$implicit = record.item;
});
};
NgFor.prototype._perViewChange = function(view, record) {
view.context.$implicit = record.item;
};
NgFor.prototype._bulkRemove = function(tuples) {
tuples.sort(function(a, b) {
return a.record.previousIndex - b.record.previousIndex;
});
var movedTuples = [];
for (var i = tuples.length - 1; i >= 0; i--) {
var tuple = tuples[i];
if (lang_1.isPresent(tuple.record.currentIndex)) {
tuple.view = this._viewContainer.detach(tuple.record.previousIndex);
movedTuples.push(tuple);
} else {
this._viewContainer.remove(tuple.record.previousIndex);
}
}
return movedTuples;
};
NgFor.prototype._bulkInsert = function(tuples) {
tuples.sort(function(a, b) {
return a.record.currentIndex - b.record.currentIndex;
});
for (var i = 0; i < tuples.length; i++) {
var tuple = tuples[i];
if (lang_1.isPresent(tuple.view)) {
this._viewContainer.insert(tuple.view, tuple.record.currentIndex);
} else {
tuple.view = this._viewContainer.createEmbeddedView(this._templateRef, new NgForRow(null, null, null), tuple.record.currentIndex);
}
}
return tuples;
};
NgFor.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "[ngFor][ngForOf]",
inputs: [ "ngForTrackBy", "ngForOf", "ngForTemplate" ]
} ]
} ];
NgFor.ctorParameters = [ {
type: core_1.ViewContainerRef
}, {
type: core_1.TemplateRef
}, {
type: core_1.IterableDiffers
}, {
type: core_1.ChangeDetectorRef
} ];
return NgFor;
}();
exports.NgFor = NgFor;
var RecordViewTuple = function() {
function RecordViewTuple(record, view) {
this.record = record;
this.view = view;
}
return RecordViewTuple;
}();
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var NgIf = function() {
function NgIf(_viewContainer, _templateRef) {
this._viewContainer = _viewContainer;
this._templateRef = _templateRef;
this._prevCondition = null;
}
Object.defineProperty(NgIf.prototype, "ngIf", {
set: function(newCondition) {
if (newCondition && (lang_1.isBlank(this._prevCondition) || !this._prevCondition)) {
this._prevCondition = true;
this._viewContainer.createEmbeddedView(this._templateRef);
} else if (!newCondition && (lang_1.isBlank(this._prevCondition) || this._prevCondition)) {
this._prevCondition = false;
this._viewContainer.clear();
}
},
enumerable: true,
configurable: true
});
NgIf.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "[ngIf]",
inputs: [ "ngIf" ]
} ]
} ];
NgIf.ctorParameters = [ {
type: core_1.ViewContainerRef
}, {
type: core_1.TemplateRef
} ];
return NgIf;
}();
exports.NgIf = NgIf;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var NgTemplateOutlet = function() {
function NgTemplateOutlet(_viewContainerRef) {
this._viewContainerRef = _viewContainerRef;
}
Object.defineProperty(NgTemplateOutlet.prototype, "ngTemplateOutlet", {
set: function(templateRef) {
if (lang_1.isPresent(this._insertedViewRef)) {
this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._insertedViewRef));
}
if (lang_1.isPresent(templateRef)) {
this._insertedViewRef = this._viewContainerRef.createEmbeddedView(templateRef);
}
},
enumerable: true,
configurable: true
});
NgTemplateOutlet.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "[ngTemplateOutlet]"
} ]
} ];
NgTemplateOutlet.ctorParameters = [ {
type: core_1.ViewContainerRef
} ];
NgTemplateOutlet.propDecorators = {
ngTemplateOutlet: [ {
type: core_1.Input
} ]
};
return NgTemplateOutlet;
}();
exports.NgTemplateOutlet = NgTemplateOutlet;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var NgStyle = function() {
function NgStyle(_differs, _ngEl, _renderer) {
this._differs = _differs;
this._ngEl = _ngEl;
this._renderer = _renderer;
}
Object.defineProperty(NgStyle.prototype, "rawStyle", {
set: function(v) {
this._rawStyle = v;
if (lang_1.isBlank(this._differ) && lang_1.isPresent(v)) {
this._differ = this._differs.find(this._rawStyle).create(null);
}
},
enumerable: true,
configurable: true
});
NgStyle.prototype.ngDoCheck = function() {
if (lang_1.isPresent(this._differ)) {
var changes = this._differ.diff(this._rawStyle);
if (lang_1.isPresent(changes)) {
this._applyChanges(changes);
}
}
};
NgStyle.prototype._applyChanges = function(changes) {
var _this = this;
changes.forEachAddedItem(function(record) {
_this._setStyle(record.key, record.currentValue);
});
changes.forEachChangedItem(function(record) {
_this._setStyle(record.key, record.currentValue);
});
changes.forEachRemovedItem(function(record) {
_this._setStyle(record.key, null);
});
};
NgStyle.prototype._setStyle = function(name, val) {
this._renderer.setElementStyle(this._ngEl.nativeElement, name, val);
};
NgStyle.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "[ngStyle]",
inputs: [ "rawStyle: ngStyle" ]
} ]
} ];
NgStyle.ctorParameters = [ {
type: core_1.KeyValueDiffers
}, {
type: core_1.ElementRef
}, {
type: core_1.Renderer
} ];
return NgStyle;
}();
exports.NgStyle = NgStyle;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var collection_1 = __webpack_require__(386);
var _WHEN_DEFAULT = new Object();
var SwitchView = function() {
function SwitchView(_viewContainerRef, _templateRef) {
this._viewContainerRef = _viewContainerRef;
this._templateRef = _templateRef;
}
SwitchView.prototype.create = function() {
this._viewContainerRef.createEmbeddedView(this._templateRef);
};
SwitchView.prototype.destroy = function() {
this._viewContainerRef.clear();
};
return SwitchView;
}();
exports.SwitchView = SwitchView;
var NgSwitch = function() {
function NgSwitch() {
this._useDefault = false;
this._valueViews = new collection_1.Map();
this._activeViews = [];
}
Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
set: function(value) {
this._emptyAllActiveViews();
this._useDefault = false;
var views = this._valueViews.get(value);
if (lang_1.isBlank(views)) {
this._useDefault = true;
views = lang_1.normalizeBlank(this._valueViews.get(_WHEN_DEFAULT));
}
this._activateViews(views);
this._switchValue = value;
},
enumerable: true,
configurable: true
});
NgSwitch.prototype._onWhenValueChanged = function(oldWhen, newWhen, view) {
this._deregisterView(oldWhen, view);
this._registerView(newWhen, view);
if (oldWhen === this._switchValue) {
view.destroy();
collection_1.ListWrapper.remove(this._activeViews, view);
} else if (newWhen === this._switchValue) {
if (this._useDefault) {
this._useDefault = false;
this._emptyAllActiveViews();
}
view.create();
this._activeViews.push(view);
}
if (this._activeViews.length === 0 && !this._useDefault) {
this._useDefault = true;
this._activateViews(this._valueViews.get(_WHEN_DEFAULT));
}
};
NgSwitch.prototype._emptyAllActiveViews = function() {
var activeContainers = this._activeViews;
for (var i = 0; i < activeContainers.length; i++) {
activeContainers[i].destroy();
}
this._activeViews = [];
};
NgSwitch.prototype._activateViews = function(views) {
if (lang_1.isPresent(views)) {
for (var i = 0; i < views.length; i++) {
views[i].create();
}
this._activeViews = views;
}
};
NgSwitch.prototype._registerView = function(value, view) {
var views = this._valueViews.get(value);
if (lang_1.isBlank(views)) {
views = [];
this._valueViews.set(value, views);
}
views.push(view);
};
NgSwitch.prototype._deregisterView = function(value, view) {
if (value === _WHEN_DEFAULT) return;
var views = this._valueViews.get(value);
if (views.length == 1) {
this._valueViews.delete(value);
} else {
collection_1.ListWrapper.remove(views, view);
}
};
NgSwitch.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "[ngSwitch]",
inputs: [ "ngSwitch" ]
} ]
} ];
return NgSwitch;
}();
exports.NgSwitch = NgSwitch;
var NgSwitchWhen = function() {
function NgSwitchWhen(viewContainer, templateRef, ngSwitch) {
this._value = _WHEN_DEFAULT;
this._switch = ngSwitch;
this._view = new SwitchView(viewContainer, templateRef);
}
Object.defineProperty(NgSwitchWhen.prototype, "ngSwitchWhen", {
set: function(value) {
this._switch._onWhenValueChanged(this._value, value, this._view);
this._value = value;
},
enumerable: true,
configurable: true
});
NgSwitchWhen.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "[ngSwitchWhen]",
inputs: [ "ngSwitchWhen" ]
} ]
} ];
NgSwitchWhen.ctorParameters = [ {
type: core_1.ViewContainerRef
}, {
type: core_1.TemplateRef
}, {
type: NgSwitch,
decorators: [ {
type: core_1.Host
} ]
} ];
return NgSwitchWhen;
}();
exports.NgSwitchWhen = NgSwitchWhen;
var NgSwitchDefault = function() {
function NgSwitchDefault(viewContainer, templateRef, sswitch) {
sswitch._registerView(_WHEN_DEFAULT, new SwitchView(viewContainer, templateRef));
}
NgSwitchDefault.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "[ngSwitchDefault]"
} ]
} ];
NgSwitchDefault.ctorParameters = [ {
type: core_1.ViewContainerRef
}, {
type: core_1.TemplateRef
}, {
type: NgSwitch,
decorators: [ {
type: core_1.Host
} ]
} ];
return NgSwitchDefault;
}();
exports.NgSwitchDefault = NgSwitchDefault;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var collection_1 = __webpack_require__(386);
var ng_switch_1 = __webpack_require__(404);
var _CATEGORY_DEFAULT = "other";
var NgLocalization = function() {
function NgLocalization() {}
return NgLocalization;
}();
exports.NgLocalization = NgLocalization;
var NgPluralCase = function() {
function NgPluralCase(value, template, viewContainer) {
this.value = value;
this._view = new ng_switch_1.SwitchView(viewContainer, template);
}
NgPluralCase.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "[ngPluralCase]"
} ]
} ];
NgPluralCase.ctorParameters = [ {
type: undefined,
decorators: [ {
type: core_1.Attribute,
args: [ "ngPluralCase" ]
} ]
}, {
type: core_1.TemplateRef
}, {
type: core_1.ViewContainerRef
} ];
return NgPluralCase;
}();
exports.NgPluralCase = NgPluralCase;
var NgPlural = function() {
function NgPlural(_localization) {
this._localization = _localization;
this._caseViews = new collection_1.Map();
this.cases = null;
}
Object.defineProperty(NgPlural.prototype, "ngPlural", {
set: function(value) {
this._switchValue = value;
this._updateView();
},
enumerable: true,
configurable: true
});
NgPlural.prototype.ngAfterContentInit = function() {
var _this = this;
this.cases.forEach(function(pluralCase) {
_this._caseViews.set(_this._formatValue(pluralCase), pluralCase._view);
});
this._updateView();
};
NgPlural.prototype._updateView = function() {
this._clearViews();
var view = this._caseViews.get(this._switchValue);
if (!lang_1.isPresent(view)) view = this._getCategoryView(this._switchValue);
this._activateView(view);
};
NgPlural.prototype._clearViews = function() {
if (lang_1.isPresent(this._activeView)) this._activeView.destroy();
};
NgPlural.prototype._activateView = function(view) {
if (!lang_1.isPresent(view)) return;
this._activeView = view;
this._activeView.create();
};
NgPlural.prototype._getCategoryView = function(value) {
var category = this._localization.getPluralCategory(value);
var categoryView = this._caseViews.get(category);
return lang_1.isPresent(categoryView) ? categoryView : this._caseViews.get(_CATEGORY_DEFAULT);
};
NgPlural.prototype._isValueView = function(pluralCase) {
return pluralCase.value[0] === "=";
};
NgPlural.prototype._formatValue = function(pluralCase) {
return this._isValueView(pluralCase) ? this._stripValue(pluralCase.value) : pluralCase.value;
};
NgPlural.prototype._stripValue = function(value) {
return lang_1.NumberWrapper.parseInt(value.substring(1), 10);
};
NgPlural.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "[ngPlural]"
} ]
} ];
NgPlural.ctorParameters = [ {
type: NgLocalization
} ];
NgPlural.propDecorators = {
cases: [ {
type: core_1.ContentChildren,
args: [ NgPluralCase ]
} ],
ngPlural: [ {
type: core_1.Input
} ]
};
return NgPlural;
}();
exports.NgPlural = NgPlural;
}, function(module, exports) {
"use strict";
}, function(module, exports, __webpack_require__) {
"use strict";
var ng_class_1 = __webpack_require__(399);
var ng_for_1 = __webpack_require__(400);
var ng_if_1 = __webpack_require__(401);
var ng_template_outlet_1 = __webpack_require__(402);
var ng_style_1 = __webpack_require__(403);
var ng_switch_1 = __webpack_require__(404);
var ng_plural_1 = __webpack_require__(405);
exports.CORE_DIRECTIVES = [ ng_class_1.NgClass, ng_for_1.NgFor, ng_if_1.NgIf, ng_template_outlet_1.NgTemplateOutlet, ng_style_1.NgStyle, ng_switch_1.NgSwitch, ng_switch_1.NgSwitchWhen, ng_switch_1.NgSwitchDefault, ng_plural_1.NgPlural, ng_plural_1.NgPluralCase ];
}, function(module, exports, __webpack_require__) {
"use strict";
var model_1 = __webpack_require__(409);
exports.AbstractControl = model_1.AbstractControl;
exports.Control = model_1.Control;
exports.ControlGroup = model_1.ControlGroup;
exports.ControlArray = model_1.ControlArray;
var abstract_control_directive_1 = __webpack_require__(410);
exports.AbstractControlDirective = abstract_control_directive_1.AbstractControlDirective;
var control_container_1 = __webpack_require__(411);
exports.ControlContainer = control_container_1.ControlContainer;
var ng_control_name_1 = __webpack_require__(412);
exports.NgControlName = ng_control_name_1.NgControlName;
var ng_form_control_1 = __webpack_require__(423);
exports.NgFormControl = ng_form_control_1.NgFormControl;
var ng_model_1 = __webpack_require__(424);
exports.NgModel = ng_model_1.NgModel;
var ng_control_1 = __webpack_require__(413);
exports.NgControl = ng_control_1.NgControl;
var ng_control_group_1 = __webpack_require__(425);
exports.NgControlGroup = ng_control_group_1.NgControlGroup;
var ng_form_model_1 = __webpack_require__(426);
exports.NgFormModel = ng_form_model_1.NgFormModel;
var ng_form_1 = __webpack_require__(427);
exports.NgForm = ng_form_1.NgForm;
var control_value_accessor_1 = __webpack_require__(414);
exports.NG_VALUE_ACCESSOR = control_value_accessor_1.NG_VALUE_ACCESSOR;
var default_value_accessor_1 = __webpack_require__(417);
exports.DefaultValueAccessor = default_value_accessor_1.DefaultValueAccessor;
var ng_control_status_1 = __webpack_require__(428);
exports.NgControlStatus = ng_control_status_1.NgControlStatus;
var checkbox_value_accessor_1 = __webpack_require__(419);
exports.CheckboxControlValueAccessor = checkbox_value_accessor_1.CheckboxControlValueAccessor;
var select_control_value_accessor_1 = __webpack_require__(420);
exports.NgSelectOption = select_control_value_accessor_1.NgSelectOption;
exports.SelectControlValueAccessor = select_control_value_accessor_1.SelectControlValueAccessor;
var directives_1 = __webpack_require__(429);
exports.FORM_DIRECTIVES = directives_1.FORM_DIRECTIVES;
exports.RadioButtonState = directives_1.RadioButtonState;
var validators_1 = __webpack_require__(416);
exports.NG_VALIDATORS = validators_1.NG_VALIDATORS;
exports.NG_ASYNC_VALIDATORS = validators_1.NG_ASYNC_VALIDATORS;
exports.Validators = validators_1.Validators;
var validators_2 = __webpack_require__(430);
exports.RequiredValidator = validators_2.RequiredValidator;
exports.MinLengthValidator = validators_2.MinLengthValidator;
exports.MaxLengthValidator = validators_2.MaxLengthValidator;
exports.PatternValidator = validators_2.PatternValidator;
var form_builder_1 = __webpack_require__(431);
exports.FormBuilder = form_builder_1.FormBuilder;
var form_builder_2 = __webpack_require__(431);
var radio_control_value_accessor_1 = __webpack_require__(421);
exports.FORM_PROVIDERS = [ form_builder_2.FormBuilder, radio_control_value_accessor_1.RadioControlRegistry ];
exports.FORM_BINDINGS = exports.FORM_PROVIDERS;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(379);
var async_1 = __webpack_require__(380);
var promise_1 = __webpack_require__(381);
var collection_1 = __webpack_require__(386);
exports.VALID = "VALID";
exports.INVALID = "INVALID";
exports.PENDING = "PENDING";
function isControl(control) {
return control instanceof AbstractControl;
}
exports.isControl = isControl;
function _find(control, path) {
if (lang_1.isBlank(path)) return null;
if (!(path instanceof Array)) {
path = path.split("/");
}
if (path instanceof Array && collection_1.ListWrapper.isEmpty(path)) return null;
return path.reduce(function(v, name) {
if (v instanceof ControlGroup) {
return lang_1.isPresent(v.controls[name]) ? v.controls[name] : null;
} else if (v instanceof ControlArray) {
var index = name;
return lang_1.isPresent(v.at(index)) ? v.at(index) : null;
} else {
return null;
}
}, control);
}
function toObservable(r) {
return promise_1.PromiseWrapper.isPromise(r) ? async_1.ObservableWrapper.fromPromise(r) : r;
}
var AbstractControl = function() {
function AbstractControl(validator, asyncValidator) {
this.validator = validator;
this.asyncValidator = asyncValidator;
this._pristine = true;
this._touched = false;
}
Object.defineProperty(AbstractControl.prototype, "value", {
get: function() {
return this._value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "status", {
get: function() {
return this._status;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "valid", {
get: function() {
return this._status === exports.VALID;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "errors", {
get: function() {
return this._errors;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "pristine", {
get: function() {
return this._pristine;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "dirty", {
get: function() {
return !this.pristine;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "touched", {
get: function() {
return this._touched;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "untouched", {
get: function() {
return !this._touched;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "valueChanges", {
get: function() {
return this._valueChanges;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "statusChanges", {
get: function() {
return this._statusChanges;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControl.prototype, "pending", {
get: function() {
return this._status == exports.PENDING;
},
enumerable: true,
configurable: true
});
AbstractControl.prototype.markAsTouched = function() {
this._touched = true;
};
AbstractControl.prototype.markAsDirty = function(_a) {
var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
onlySelf = lang_1.normalizeBool(onlySelf);
this._pristine = false;
if (lang_1.isPresent(this._parent) && !onlySelf) {
this._parent.markAsDirty({
onlySelf: onlySelf
});
}
};
AbstractControl.prototype.markAsPending = function(_a) {
var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
onlySelf = lang_1.normalizeBool(onlySelf);
this._status = exports.PENDING;
if (lang_1.isPresent(this._parent) && !onlySelf) {
this._parent.markAsPending({
onlySelf: onlySelf
});
}
};
AbstractControl.prototype.setParent = function(parent) {
this._parent = parent;
};
AbstractControl.prototype.updateValueAndValidity = function(_a) {
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
onlySelf = lang_1.normalizeBool(onlySelf);
emitEvent = lang_1.isPresent(emitEvent) ? emitEvent : true;
this._updateValue();
this._errors = this._runValidator();
this._status = this._calculateStatus();
if (this._status == exports.VALID || this._status == exports.PENDING) {
this._runAsyncValidator(emitEvent);
}
if (emitEvent) {
async_1.ObservableWrapper.callEmit(this._valueChanges, this._value);
async_1.ObservableWrapper.callEmit(this._statusChanges, this._status);
}
if (lang_1.isPresent(this._parent) && !onlySelf) {
this._parent.updateValueAndValidity({
onlySelf: onlySelf,
emitEvent: emitEvent
});
}
};
AbstractControl.prototype._runValidator = function() {
return lang_1.isPresent(this.validator) ? this.validator(this) : null;
};
AbstractControl.prototype._runAsyncValidator = function(emitEvent) {
var _this = this;
if (lang_1.isPresent(this.asyncValidator)) {
this._status = exports.PENDING;
this._cancelExistingSubscription();
var obs = toObservable(this.asyncValidator(this));
this._asyncValidationSubscription = async_1.ObservableWrapper.subscribe(obs, function(res) {
return _this.setErrors(res, {
emitEvent: emitEvent
});
});
}
};
AbstractControl.prototype._cancelExistingSubscription = function() {
if (lang_1.isPresent(this._asyncValidationSubscription)) {
async_1.ObservableWrapper.dispose(this._asyncValidationSubscription);
}
};
AbstractControl.prototype.setErrors = function(errors, _a) {
var emitEvent = (_a === void 0 ? {} : _a).emitEvent;
emitEvent = lang_1.isPresent(emitEvent) ? emitEvent : true;
this._errors = errors;
this._status = this._calculateStatus();
if (emitEvent) {
async_1.ObservableWrapper.callEmit(this._statusChanges, this._status);
}
if (lang_1.isPresent(this._parent)) {
this._parent._updateControlsErrors();
}
};
AbstractControl.prototype.find = function(path) {
return _find(this, path);
};
AbstractControl.prototype.getError = function(errorCode, path) {
if (path === void 0) {
path = null;
}
var control = lang_1.isPresent(path) && !collection_1.ListWrapper.isEmpty(path) ? this.find(path) : this;
if (lang_1.isPresent(control) && lang_1.isPresent(control._errors)) {
return collection_1.StringMapWrapper.get(control._errors, errorCode);
} else {
return null;
}
};
AbstractControl.prototype.hasError = function(errorCode, path) {
if (path === void 0) {
path = null;
}
return lang_1.isPresent(this.getError(errorCode, path));
};
Object.defineProperty(AbstractControl.prototype, "root", {
get: function() {
var x = this;
while (lang_1.isPresent(x._parent)) {
x = x._parent;
}
return x;
},
enumerable: true,
configurable: true
});
AbstractControl.prototype._updateControlsErrors = function() {
this._status = this._calculateStatus();
if (lang_1.isPresent(this._parent)) {
this._parent._updateControlsErrors();
}
};
AbstractControl.prototype._initObservables = function() {
this._valueChanges = new async_1.EventEmitter();
this._statusChanges = new async_1.EventEmitter();
};
AbstractControl.prototype._calculateStatus = function() {
if (lang_1.isPresent(this._errors)) return exports.INVALID;
if (this._anyControlsHaveStatus(exports.PENDING)) return exports.PENDING;
if (this._anyControlsHaveStatus(exports.INVALID)) return exports.INVALID;
return exports.VALID;
};
return AbstractControl;
}();
exports.AbstractControl = AbstractControl;
var Control = function(_super) {
__extends(Control, _super);
function Control(value, validator, asyncValidator) {
if (value === void 0) {
value = null;
}
if (validator === void 0) {
validator = null;
}
if (asyncValidator === void 0) {
asyncValidator = null;
}
_super.call(this, validator, asyncValidator);
this._value = value;
this.updateValueAndValidity({
onlySelf: true,
emitEvent: false
});
this._initObservables();
}
Control.prototype.updateValue = function(value, _a) {
var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange;
emitModelToViewChange = lang_1.isPresent(emitModelToViewChange) ? emitModelToViewChange : true;
this._value = value;
if (lang_1.isPresent(this._onChange) && emitModelToViewChange) this._onChange(this._value);
this.updateValueAndValidity({
onlySelf: onlySelf,
emitEvent: emitEvent
});
};
Control.prototype._updateValue = function() {};
Control.prototype._anyControlsHaveStatus = function(status) {
return false;
};
Control.prototype.registerOnChange = function(fn) {
this._onChange = fn;
};
return Control;
}(AbstractControl);
exports.Control = Control;
var ControlGroup = function(_super) {
__extends(ControlGroup, _super);
function ControlGroup(controls, optionals, validator, asyncValidator) {
if (optionals === void 0) {
optionals = null;
}
if (validator === void 0) {
validator = null;
}
if (asyncValidator === void 0) {
asyncValidator = null;
}
_super.call(this, validator, asyncValidator);
this.controls = controls;
this._optionals = lang_1.isPresent(optionals) ? optionals : {};
this._initObservables();
this._setParentForControls();
this.updateValueAndValidity({
onlySelf: true,
emitEvent: false
});
}
ControlGroup.prototype.addControl = function(name, control) {
this.controls[name] = control;
control.setParent(this);
};
ControlGroup.prototype.removeControl = function(name) {
collection_1.StringMapWrapper.delete(this.controls, name);
};
ControlGroup.prototype.include = function(controlName) {
collection_1.StringMapWrapper.set(this._optionals, controlName, true);
this.updateValueAndValidity();
};
ControlGroup.prototype.exclude = function(controlName) {
collection_1.StringMapWrapper.set(this._optionals, controlName, false);
this.updateValueAndValidity();
};
ControlGroup.prototype.contains = function(controlName) {
var c = collection_1.StringMapWrapper.contains(this.controls, controlName);
return c && this._included(controlName);
};
ControlGroup.prototype._setParentForControls = function() {
var _this = this;
collection_1.StringMapWrapper.forEach(this.controls, function(control, name) {
control.setParent(_this);
});
};
ControlGroup.prototype._updateValue = function() {
this._value = this._reduceValue();
};
ControlGroup.prototype._anyControlsHaveStatus = function(status) {
var _this = this;
var res = false;
collection_1.StringMapWrapper.forEach(this.controls, function(control, name) {
res = res || _this.contains(name) && control.status == status;
});
return res;
};
ControlGroup.prototype._reduceValue = function() {
return this._reduceChildren({}, function(acc, control, name) {
acc[name] = control.value;
return acc;
});
};
ControlGroup.prototype._reduceChildren = function(initValue, fn) {
var _this = this;
var res = initValue;
collection_1.StringMapWrapper.forEach(this.controls, function(control, name) {
if (_this._included(name)) {
res = fn(res, control, name);
}
});
return res;
};
ControlGroup.prototype._included = function(controlName) {
var isOptional = collection_1.StringMapWrapper.contains(this._optionals, controlName);
return !isOptional || collection_1.StringMapWrapper.get(this._optionals, controlName);
};
return ControlGroup;
}(AbstractControl);
exports.ControlGroup = ControlGroup;
var ControlArray = function(_super) {
__extends(ControlArray, _super);
function ControlArray(controls, validator, asyncValidator) {
if (validator === void 0) {
validator = null;
}
if (asyncValidator === void 0) {
asyncValidator = null;
}
_super.call(this, validator, asyncValidator);
this.controls = controls;
this._initObservables();
this._setParentForControls();
this.updateValueAndValidity({
onlySelf: true,
emitEvent: false
});
}
ControlArray.prototype.at = function(index) {
return this.controls[index];
};
ControlArray.prototype.push = function(control) {
this.controls.push(control);
control.setParent(this);
this.updateValueAndValidity();
};
ControlArray.prototype.insert = function(index, control) {
collection_1.ListWrapper.insert(this.controls, index, control);
control.setParent(this);
this.updateValueAndValidity();
};
ControlArray.prototype.removeAt = function(index) {
collection_1.ListWrapper.removeAt(this.controls, index);
this.updateValueAndValidity();
};
Object.defineProperty(ControlArray.prototype, "length", {
get: function() {
return this.controls.length;
},
enumerable: true,
configurable: true
});
ControlArray.prototype._updateValue = function() {
this._value = this.controls.map(function(control) {
return control.value;
});
};
ControlArray.prototype._anyControlsHaveStatus = function(status) {
return this.controls.some(function(c) {
return c.status == status;
});
};
ControlArray.prototype._setParentForControls = function() {
var _this = this;
this.controls.forEach(function(control) {
control.setParent(_this);
});
};
return ControlArray;
}(AbstractControl);
exports.ControlArray = ControlArray;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(379);
var exceptions_1 = __webpack_require__(383);
var AbstractControlDirective = function() {
function AbstractControlDirective() {}
Object.defineProperty(AbstractControlDirective.prototype, "control", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "value", {
get: function() {
return lang_1.isPresent(this.control) ? this.control.value : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "valid", {
get: function() {
return lang_1.isPresent(this.control) ? this.control.valid : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "errors", {
get: function() {
return lang_1.isPresent(this.control) ? this.control.errors : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
get: function() {
return lang_1.isPresent(this.control) ? this.control.pristine : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
get: function() {
return lang_1.isPresent(this.control) ? this.control.dirty : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "touched", {
get: function() {
return lang_1.isPresent(this.control) ? this.control.touched : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
get: function() {
return lang_1.isPresent(this.control) ? this.control.untouched : null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbstractControlDirective.prototype, "path", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
return AbstractControlDirective;
}();
exports.AbstractControlDirective = AbstractControlDirective;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var abstract_control_directive_1 = __webpack_require__(410);
var ControlContainer = function(_super) {
__extends(ControlContainer, _super);
function ControlContainer() {
_super.apply(this, arguments);
}
Object.defineProperty(ControlContainer.prototype, "formDirective", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ControlContainer.prototype, "path", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
return ControlContainer;
}(abstract_control_directive_1.AbstractControlDirective);
exports.ControlContainer = ControlContainer;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var async_1 = __webpack_require__(380);
var control_container_1 = __webpack_require__(411);
var ng_control_1 = __webpack_require__(413);
var control_value_accessor_1 = __webpack_require__(414);
var shared_1 = __webpack_require__(415);
var validators_1 = __webpack_require__(416);
exports.controlNameBinding = {
provide: ng_control_1.NgControl,
useExisting: core_1.forwardRef(function() {
return NgControlName;
})
};
var NgControlName = function(_super) {
__extends(NgControlName, _super);
function NgControlName(_parent, _validators, _asyncValidators, valueAccessors) {
_super.call(this);
this._parent = _parent;
this._validators = _validators;
this._asyncValidators = _asyncValidators;
this.update = new async_1.EventEmitter();
this._added = false;
this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
}
NgControlName.prototype.ngOnChanges = function(changes) {
if (!this._added) {
this.formDirective.addControl(this);
this._added = true;
}
if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
this.viewModel = this.model;
this.formDirective.updateModel(this, this.model);
}
};
NgControlName.prototype.ngOnDestroy = function() {
this.formDirective.removeControl(this);
};
NgControlName.prototype.viewToModelUpdate = function(newValue) {
this.viewModel = newValue;
async_1.ObservableWrapper.callEmit(this.update, newValue);
};
Object.defineProperty(NgControlName.prototype, "path", {
get: function() {
return shared_1.controlPath(this.name, this._parent);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlName.prototype, "formDirective", {
get: function() {
return this._parent.formDirective;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlName.prototype, "validator", {
get: function() {
return shared_1.composeValidators(this._validators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlName.prototype, "asyncValidator", {
get: function() {
return shared_1.composeAsyncValidators(this._asyncValidators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlName.prototype, "control", {
get: function() {
return this.formDirective.getControl(this);
},
enumerable: true,
configurable: true
});
NgControlName.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "[ngControl]",
bindings: [ exports.controlNameBinding ],
inputs: [ "name: ngControl", "model: ngModel" ],
outputs: [ "update: ngModelChange" ],
exportAs: "ngForm"
} ]
} ];
NgControlName.ctorParameters = [ {
type: control_container_1.ControlContainer,
decorators: [ {
type: core_1.Host
}, {
type: core_1.SkipSelf
} ]
}, {
type: undefined,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Self
}, {
type: core_1.Inject,
args: [ validators_1.NG_VALIDATORS ]
} ]
}, {
type: undefined,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Self
}, {
type: core_1.Inject,
args: [ validators_1.NG_ASYNC_VALIDATORS ]
} ]
}, {
type: undefined,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Self
}, {
type: core_1.Inject,
args: [ control_value_accessor_1.NG_VALUE_ACCESSOR ]
} ]
} ];
return NgControlName;
}(ng_control_1.NgControl);
exports.NgControlName = NgControlName;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var exceptions_1 = __webpack_require__(383);
var abstract_control_directive_1 = __webpack_require__(410);
var NgControl = function(_super) {
__extends(NgControl, _super);
function NgControl() {
_super.apply(this, arguments);
this.name = null;
this.valueAccessor = null;
}
Object.defineProperty(NgControl.prototype, "validator", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControl.prototype, "asyncValidator", {
get: function() {
return exceptions_1.unimplemented();
},
enumerable: true,
configurable: true
});
return NgControl;
}(abstract_control_directive_1.AbstractControlDirective);
exports.NgControl = NgControl;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
exports.NG_VALUE_ACCESSOR = new core_1.OpaqueToken("NgValueAccessor");
}, function(module, exports, __webpack_require__) {
"use strict";
var collection_1 = __webpack_require__(386);
var lang_1 = __webpack_require__(379);
var exceptions_1 = __webpack_require__(383);
var validators_1 = __webpack_require__(416);
var default_value_accessor_1 = __webpack_require__(417);
var number_value_accessor_1 = __webpack_require__(418);
var checkbox_value_accessor_1 = __webpack_require__(419);
var select_control_value_accessor_1 = __webpack_require__(420);
var radio_control_value_accessor_1 = __webpack_require__(421);
var normalize_validator_1 = __webpack_require__(422);
function controlPath(name, parent) {
var p = collection_1.ListWrapper.clone(parent.path);
p.push(name);
return p;
}
exports.controlPath = controlPath;
function setUpControl(control, dir) {
if (lang_1.isBlank(control)) _throwError(dir, "Cannot find control");
if (lang_1.isBlank(dir.valueAccessor)) _throwError(dir, "No value accessor for");
control.validator = validators_1.Validators.compose([ control.validator, dir.validator ]);
control.asyncValidator = validators_1.Validators.composeAsync([ control.asyncValidator, dir.asyncValidator ]);
dir.valueAccessor.writeValue(control.value);
dir.valueAccessor.registerOnChange(function(newValue) {
dir.viewToModelUpdate(newValue);
control.updateValue(newValue, {
emitModelToViewChange: false
});
control.markAsDirty();
});
control.registerOnChange(function(newValue) {
return dir.valueAccessor.writeValue(newValue);
});
dir.valueAccessor.registerOnTouched(function() {
return control.markAsTouched();
});
}
exports.setUpControl = setUpControl;
function setUpControlGroup(control, dir) {
if (lang_1.isBlank(control)) _throwError(dir, "Cannot find control");
control.validator = validators_1.Validators.compose([ control.validator, dir.validator ]);
control.asyncValidator = validators_1.Validators.composeAsync([ control.asyncValidator, dir.asyncValidator ]);
}
exports.setUpControlGroup = setUpControlGroup;
function _throwError(dir, message) {
var path = dir.path.join(" -> ");
throw new exceptions_1.BaseException(message + " '" + path + "'");
}
function composeValidators(validators) {
return lang_1.isPresent(validators) ? validators_1.Validators.compose(validators.map(normalize_validator_1.normalizeValidator)) : null;
}
exports.composeValidators = composeValidators;
function composeAsyncValidators(validators) {
return lang_1.isPresent(validators) ? validators_1.Validators.composeAsync(validators.map(normalize_validator_1.normalizeAsyncValidator)) : null;
}
exports.composeAsyncValidators = composeAsyncValidators;
function isPropertyUpdated(changes, viewModel) {
if (!collection_1.StringMapWrapper.contains(changes, "model")) return false;
var change = changes["model"];
if (change.isFirstChange()) return true;
return !lang_1.looseIdentical(viewModel, change.currentValue);
}
exports.isPropertyUpdated = isPropertyUpdated;
function selectValueAccessor(dir, valueAccessors) {
if (lang_1.isBlank(valueAccessors)) return null;
var defaultAccessor;
var builtinAccessor;
var customAccessor;
valueAccessors.forEach(function(v) {
if (lang_1.hasConstructor(v, default_value_accessor_1.DefaultValueAccessor)) {
defaultAccessor = v;
} else if (lang_1.hasConstructor(v, checkbox_value_accessor_1.CheckboxControlValueAccessor) || lang_1.hasConstructor(v, number_value_accessor_1.NumberValueAccessor) || lang_1.hasConstructor(v, select_control_value_accessor_1.SelectControlValueAccessor) || lang_1.hasConstructor(v, radio_control_value_accessor_1.RadioControlValueAccessor)) {
if (lang_1.isPresent(builtinAccessor)) _throwError(dir, "More than one built-in value accessor matches");
builtinAccessor = v;
} else {
if (lang_1.isPresent(customAccessor)) _throwError(dir, "More than one custom value accessor matches");
customAccessor = v;
}
});
if (lang_1.isPresent(customAccessor)) return customAccessor;
if (lang_1.isPresent(builtinAccessor)) return builtinAccessor;
if (lang_1.isPresent(defaultAccessor)) return defaultAccessor;
_throwError(dir, "No valid value accessor for");
return null;
}
exports.selectValueAccessor = selectValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var promise_1 = __webpack_require__(381);
var async_1 = __webpack_require__(380);
var collection_1 = __webpack_require__(386);
exports.NG_VALIDATORS = new core_1.OpaqueToken("NgValidators");
exports.NG_ASYNC_VALIDATORS = new core_1.OpaqueToken("NgAsyncValidators");
var Validators = function() {
function Validators() {}
Validators.required = function(control) {
return lang_1.isBlank(control.value) || lang_1.isString(control.value) && control.value == "" ? {
required: true
} : null;
};
Validators.minLength = function(minLength) {
return function(control) {
if (lang_1.isPresent(Validators.required(control))) return null;
var v = control.value;
return v.length < minLength ? {
minlength: {
requiredLength: minLength,
actualLength: v.length
}
} : null;
};
};
Validators.maxLength = function(maxLength) {
return function(control) {
if (lang_1.isPresent(Validators.required(control))) return null;
var v = control.value;
return v.length > maxLength ? {
maxlength: {
requiredLength: maxLength,
actualLength: v.length
}
} : null;
};
};
Validators.pattern = function(pattern) {
return function(control) {
if (lang_1.isPresent(Validators.required(control))) return null;
var regex = new RegExp("^" + pattern + "$");
var v = control.value;
return regex.test(v) ? null : {
pattern: {
requiredPattern: "^" + pattern + "$",
actualValue: v
}
};
};
};
Validators.nullValidator = function(c) {
return null;
};
Validators.compose = function(validators) {
if (lang_1.isBlank(validators)) return null;
var presentValidators = validators.filter(lang_1.isPresent);
if (presentValidators.length == 0) return null;
return function(control) {
return _mergeErrors(_executeValidators(control, presentValidators));
};
};
Validators.composeAsync = function(validators) {
if (lang_1.isBlank(validators)) return null;
var presentValidators = validators.filter(lang_1.isPresent);
if (presentValidators.length == 0) return null;
return function(control) {
var promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);
return promise_1.PromiseWrapper.all(promises).then(_mergeErrors);
};
};
return Validators;
}();
exports.Validators = Validators;
function _convertToPromise(obj) {
return promise_1.PromiseWrapper.isPromise(obj) ? obj : async_1.ObservableWrapper.toPromise(obj);
}
function _executeValidators(control, validators) {
return validators.map(function(v) {
return v(control);
});
}
function _executeAsyncValidators(control, validators) {
return validators.map(function(v) {
return v(control);
});
}
function _mergeErrors(arrayOfErrors) {
var res = arrayOfErrors.reduce(function(res, errors) {
return lang_1.isPresent(errors) ? collection_1.StringMapWrapper.merge(res, errors) : res;
}, {});
return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var control_value_accessor_1 = __webpack_require__(414);
exports.DEFAULT_VALUE_ACCESSOR = {
provide: control_value_accessor_1.NG_VALUE_ACCESSOR,
useExisting: core_1.forwardRef(function() {
return DefaultValueAccessor;
}),
multi: true
};
var DefaultValueAccessor = function() {
function DefaultValueAccessor(_renderer, _elementRef) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this.onChange = function(_) {};
this.onTouched = function() {};
}
DefaultValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = lang_1.isBlank(value) ? "" : value;
this._renderer.setElementProperty(this._elementRef.nativeElement, "value", normalizedValue);
};
DefaultValueAccessor.prototype.registerOnChange = function(fn) {
this.onChange = fn;
};
DefaultValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
DefaultValueAccessor.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "input:not([type=checkbox])[ngControl],textarea[ngControl],input:not([type=checkbox])[ngFormControl],textarea[ngFormControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]",
host: {
"(input)": "onChange($event.target.value)",
"(blur)": "onTouched()"
},
bindings: [ exports.DEFAULT_VALUE_ACCESSOR ]
} ]
} ];
DefaultValueAccessor.ctorParameters = [ {
type: core_1.Renderer
}, {
type: core_1.ElementRef
} ];
return DefaultValueAccessor;
}();
exports.DefaultValueAccessor = DefaultValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var control_value_accessor_1 = __webpack_require__(414);
exports.NUMBER_VALUE_ACCESSOR = {
provide: control_value_accessor_1.NG_VALUE_ACCESSOR,
useExisting: core_1.forwardRef(function() {
return NumberValueAccessor;
}),
multi: true
};
var NumberValueAccessor = function() {
function NumberValueAccessor(_renderer, _elementRef) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this.onChange = function(_) {};
this.onTouched = function() {};
}
NumberValueAccessor.prototype.writeValue = function(value) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "value", value);
};
NumberValueAccessor.prototype.registerOnChange = function(fn) {
this.onChange = function(value) {
fn(value == "" ? null : lang_1.NumberWrapper.parseFloat(value));
};
};
NumberValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
NumberValueAccessor.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "input[type=number][ngControl],input[type=number][ngFormControl],input[type=number][ngModel]",
host: {
"(change)": "onChange($event.target.value)",
"(input)": "onChange($event.target.value)",
"(blur)": "onTouched()"
},
bindings: [ exports.NUMBER_VALUE_ACCESSOR ]
} ]
} ];
NumberValueAccessor.ctorParameters = [ {
type: core_1.Renderer
}, {
type: core_1.ElementRef
} ];
return NumberValueAccessor;
}();
exports.NumberValueAccessor = NumberValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var control_value_accessor_1 = __webpack_require__(414);
exports.CHECKBOX_VALUE_ACCESSOR = {
provide: control_value_accessor_1.NG_VALUE_ACCESSOR,
useExisting: core_1.forwardRef(function() {
return CheckboxControlValueAccessor;
}),
multi: true
};
var CheckboxControlValueAccessor = function() {
function CheckboxControlValueAccessor(_renderer, _elementRef) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this.onChange = function(_) {};
this.onTouched = function() {};
}
CheckboxControlValueAccessor.prototype.writeValue = function(value) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "checked", value);
};
CheckboxControlValueAccessor.prototype.registerOnChange = function(fn) {
this.onChange = fn;
};
CheckboxControlValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
CheckboxControlValueAccessor.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "input[type=checkbox][ngControl],input[type=checkbox][ngFormControl],input[type=checkbox][ngModel]",
host: {
"(change)": "onChange($event.target.checked)",
"(blur)": "onTouched()"
},
providers: [ exports.CHECKBOX_VALUE_ACCESSOR ]
} ]
} ];
CheckboxControlValueAccessor.ctorParameters = [ {
type: core_1.Renderer
}, {
type: core_1.ElementRef
} ];
return CheckboxControlValueAccessor;
}();
exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var collection_1 = __webpack_require__(386);
var control_value_accessor_1 = __webpack_require__(414);
exports.SELECT_VALUE_ACCESSOR = {
provide: control_value_accessor_1.NG_VALUE_ACCESSOR,
useExisting: core_1.forwardRef(function() {
return SelectControlValueAccessor;
}),
multi: true
};
function _buildValueString(id, value) {
if (lang_1.isBlank(id)) return "" + value;
if (!lang_1.isPrimitive(value)) value = "Object";
return lang_1.StringWrapper.slice(id + ": " + value, 0, 50);
}
function _extractId(valueString) {
return valueString.split(":")[0];
}
var SelectControlValueAccessor = function() {
function SelectControlValueAccessor(_renderer, _elementRef) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this._optionMap = new Map();
this._idCounter = 0;
this.onChange = function(_) {};
this.onTouched = function() {};
}
SelectControlValueAccessor.prototype.writeValue = function(value) {
this.value = value;
var valueString = _buildValueString(this._getOptionId(value), value);
this._renderer.setElementProperty(this._elementRef.nativeElement, "value", valueString);
};
SelectControlValueAccessor.prototype.registerOnChange = function(fn) {
var _this = this;
this.onChange = function(valueString) {
fn(_this._getOptionValue(valueString));
};
};
SelectControlValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
SelectControlValueAccessor.prototype._registerOption = function() {
return (this._idCounter++).toString();
};
SelectControlValueAccessor.prototype._getOptionId = function(value) {
for (var _i = 0, _a = collection_1.MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {
var id = _a[_i];
if (lang_1.looseIdentical(this._optionMap.get(id), value)) return id;
}
return null;
};
SelectControlValueAccessor.prototype._getOptionValue = function(valueString) {
var value = this._optionMap.get(_extractId(valueString));
return lang_1.isPresent(value) ? value : valueString;
};
SelectControlValueAccessor.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "select[ngControl],select[ngFormControl],select[ngModel]",
host: {
"(change)": "onChange($event.target.value)",
"(blur)": "onTouched()"
},
providers: [ exports.SELECT_VALUE_ACCESSOR ]
} ]
} ];
SelectControlValueAccessor.ctorParameters = [ {
type: core_1.Renderer
}, {
type: core_1.ElementRef
} ];
return SelectControlValueAccessor;
}();
exports.SelectControlValueAccessor = SelectControlValueAccessor;
var NgSelectOption = function() {
function NgSelectOption(_element, _renderer, _select) {
this._element = _element;
this._renderer = _renderer;
this._select = _select;
if (lang_1.isPresent(this._select)) this.id = this._select._registerOption();
}
Object.defineProperty(NgSelectOption.prototype, "ngValue", {
set: function(value) {
if (this._select == null) return;
this._select._optionMap.set(this.id, value);
this._setElementValue(_buildValueString(this.id, value));
this._select.writeValue(this._select.value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgSelectOption.prototype, "value", {
set: function(value) {
this._setElementValue(value);
if (lang_1.isPresent(this._select)) this._select.writeValue(this._select.value);
},
enumerable: true,
configurable: true
});
NgSelectOption.prototype._setElementValue = function(value) {
this._renderer.setElementProperty(this._element.nativeElement, "value", value);
};
NgSelectOption.prototype.ngOnDestroy = function() {
if (lang_1.isPresent(this._select)) {
this._select._optionMap.delete(this.id);
this._select.writeValue(this._select.value);
}
};
NgSelectOption.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "option"
} ]
} ];
NgSelectOption.ctorParameters = [ {
type: core_1.ElementRef
}, {
type: core_1.Renderer
}, {
type: SelectControlValueAccessor,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Host
} ]
} ];
NgSelectOption.propDecorators = {
ngValue: [ {
type: core_1.Input,
args: [ "ngValue" ]
} ],
value: [ {
type: core_1.Input,
args: [ "value" ]
} ]
};
return NgSelectOption;
}();
exports.NgSelectOption = NgSelectOption;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var collection_1 = __webpack_require__(386);
var control_value_accessor_1 = __webpack_require__(414);
var ng_control_1 = __webpack_require__(413);
exports.RADIO_VALUE_ACCESSOR = {
provide: control_value_accessor_1.NG_VALUE_ACCESSOR,
useExisting: core_1.forwardRef(function() {
return RadioControlValueAccessor;
}),
multi: true
};
var RadioControlRegistry = function() {
function RadioControlRegistry() {
this._accessors = [];
}
RadioControlRegistry.prototype.add = function(control, accessor) {
this._accessors.push([ control, accessor ]);
};
RadioControlRegistry.prototype.remove = function(accessor) {
var indexToRemove = -1;
for (var i = 0; i < this._accessors.length; ++i) {
if (this._accessors[i][1] === accessor) {
indexToRemove = i;
}
}
collection_1.ListWrapper.removeAt(this._accessors, indexToRemove);
};
RadioControlRegistry.prototype.select = function(accessor) {
this._accessors.forEach(function(c) {
if (c[0].control.root === accessor._control.control.root && c[1] !== accessor) {
c[1].fireUncheck();
}
});
};
RadioControlRegistry.decorators = [ {
type: core_1.Injectable
} ];
return RadioControlRegistry;
}();
exports.RadioControlRegistry = RadioControlRegistry;
var RadioButtonState = function() {
function RadioButtonState(checked, value) {
this.checked = checked;
this.value = value;
}
return RadioButtonState;
}();
exports.RadioButtonState = RadioButtonState;
var RadioControlValueAccessor = function() {
function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
this._renderer = _renderer;
this._elementRef = _elementRef;
this._registry = _registry;
this._injector = _injector;
this.onChange = function() {};
this.onTouched = function() {};
}
RadioControlValueAccessor.prototype.ngOnInit = function() {
this._control = this._injector.get(ng_control_1.NgControl);
this._registry.add(this._control, this);
};
RadioControlValueAccessor.prototype.ngOnDestroy = function() {
this._registry.remove(this);
};
RadioControlValueAccessor.prototype.writeValue = function(value) {
this._state = value;
if (lang_1.isPresent(value) && value.checked) {
this._renderer.setElementProperty(this._elementRef.nativeElement, "checked", true);
}
};
RadioControlValueAccessor.prototype.registerOnChange = function(fn) {
var _this = this;
this._fn = fn;
this.onChange = function() {
fn(new RadioButtonState(true, _this._state.value));
_this._registry.select(_this);
};
};
RadioControlValueAccessor.prototype.fireUncheck = function() {
this._fn(new RadioButtonState(false, this._state.value));
};
RadioControlValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
RadioControlValueAccessor.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "input[type=radio][ngControl],input[type=radio][ngFormControl],input[type=radio][ngModel]",
host: {
"(change)": "onChange()",
"(blur)": "onTouched()"
},
providers: [ exports.RADIO_VALUE_ACCESSOR ]
} ]
} ];
RadioControlValueAccessor.ctorParameters = [ {
type: core_1.Renderer
}, {
type: core_1.ElementRef
}, {
type: RadioControlRegistry
}, {
type: core_1.Injector
} ];
RadioControlValueAccessor.propDecorators = {
name: [ {
type: core_1.Input
} ]
};
return RadioControlValueAccessor;
}();
exports.RadioControlValueAccessor = RadioControlValueAccessor;
}, function(module, exports) {
"use strict";
function normalizeValidator(validator) {
if (validator.validate !== undefined) {
return function(c) {
return validator.validate(c);
};
} else {
return validator;
}
}
exports.normalizeValidator = normalizeValidator;
function normalizeAsyncValidator(validator) {
if (validator.validate !== undefined) {
return function(c) {
return Promise.resolve(validator.validate(c));
};
} else {
return validator;
}
}
exports.normalizeAsyncValidator = normalizeAsyncValidator;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var collection_1 = __webpack_require__(386);
var async_1 = __webpack_require__(380);
var ng_control_1 = __webpack_require__(413);
var validators_1 = __webpack_require__(416);
var control_value_accessor_1 = __webpack_require__(414);
var shared_1 = __webpack_require__(415);
exports.formControlBinding = {
provide: ng_control_1.NgControl,
useExisting: core_1.forwardRef(function() {
return NgFormControl;
})
};
var NgFormControl = function(_super) {
__extends(NgFormControl, _super);
function NgFormControl(_validators, _asyncValidators, valueAccessors) {
_super.call(this);
this._validators = _validators;
this._asyncValidators = _asyncValidators;
this.update = new async_1.EventEmitter();
this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
}
NgFormControl.prototype.ngOnChanges = function(changes) {
if (this._isControlChanged(changes)) {
shared_1.setUpControl(this.form, this);
this.form.updateValueAndValidity({
emitEvent: false
});
}
if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
this.form.updateValue(this.model);
this.viewModel = this.model;
}
};
Object.defineProperty(NgFormControl.prototype, "path", {
get: function() {
return [];
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgFormControl.prototype, "validator", {
get: function() {
return shared_1.composeValidators(this._validators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgFormControl.prototype, "asyncValidator", {
get: function() {
return shared_1.composeAsyncValidators(this._asyncValidators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgFormControl.prototype, "control", {
get: function() {
return this.form;
},
enumerable: true,
configurable: true
});
NgFormControl.prototype.viewToModelUpdate = function(newValue) {
this.viewModel = newValue;
async_1.ObservableWrapper.callEmit(this.update, newValue);
};
NgFormControl.prototype._isControlChanged = function(changes) {
return collection_1.StringMapWrapper.contains(changes, "form");
};
NgFormControl.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "[ngFormControl]",
bindings: [ exports.formControlBinding ],
inputs: [ "form: ngFormControl", "model: ngModel" ],
outputs: [ "update: ngModelChange" ],
exportAs: "ngForm"
} ]
} ];
NgFormControl.ctorParameters = [ {
type: undefined,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Self
}, {
type: core_1.Inject,
args: [ validators_1.NG_VALIDATORS ]
} ]
}, {
type: undefined,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Self
}, {
type: core_1.Inject,
args: [ validators_1.NG_ASYNC_VALIDATORS ]
} ]
}, {
type: undefined,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Self
}, {
type: core_1.Inject,
args: [ control_value_accessor_1.NG_VALUE_ACCESSOR ]
} ]
} ];
return NgFormControl;
}(ng_control_1.NgControl);
exports.NgFormControl = NgFormControl;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var async_1 = __webpack_require__(380);
var control_value_accessor_1 = __webpack_require__(414);
var ng_control_1 = __webpack_require__(413);
var model_1 = __webpack_require__(409);
var validators_1 = __webpack_require__(416);
var shared_1 = __webpack_require__(415);
exports.formControlBinding = {
provide: ng_control_1.NgControl,
useExisting: core_1.forwardRef(function() {
return NgModel;
})
};
var NgModel = function(_super) {
__extends(NgModel, _super);
function NgModel(_validators, _asyncValidators, valueAccessors) {
_super.call(this);
this._validators = _validators;
this._asyncValidators = _asyncValidators;
this._control = new model_1.Control();
this._added = false;
this.update = new async_1.EventEmitter();
this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
}
NgModel.prototype.ngOnChanges = function(changes) {
if (!this._added) {
shared_1.setUpControl(this._control, this);
this._control.updateValueAndValidity({
emitEvent: false
});
this._added = true;
}
if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
this._control.updateValue(this.model);
this.viewModel = this.model;
}
};
Object.defineProperty(NgModel.prototype, "control", {
get: function() {
return this._control;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgModel.prototype, "path", {
get: function() {
return [];
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgModel.prototype, "validator", {
get: function() {
return shared_1.composeValidators(this._validators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgModel.prototype, "asyncValidator", {
get: function() {
return shared_1.composeAsyncValidators(this._asyncValidators);
},
enumerable: true,
configurable: true
});
NgModel.prototype.viewToModelUpdate = function(newValue) {
this.viewModel = newValue;
async_1.ObservableWrapper.callEmit(this.update, newValue);
};
NgModel.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "[ngModel]:not([ngControl]):not([ngFormControl])",
bindings: [ exports.formControlBinding ],
inputs: [ "model: ngModel" ],
outputs: [ "update: ngModelChange" ],
exportAs: "ngForm"
} ]
} ];
NgModel.ctorParameters = [ {
type: undefined,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Self
}, {
type: core_1.Inject,
args: [ validators_1.NG_VALIDATORS ]
} ]
}, {
type: undefined,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Self
}, {
type: core_1.Inject,
args: [ validators_1.NG_ASYNC_VALIDATORS ]
} ]
}, {
type: undefined,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Self
}, {
type: core_1.Inject,
args: [ control_value_accessor_1.NG_VALUE_ACCESSOR ]
} ]
} ];
return NgModel;
}(ng_control_1.NgControl);
exports.NgModel = NgModel;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var control_container_1 = __webpack_require__(411);
var shared_1 = __webpack_require__(415);
var validators_1 = __webpack_require__(416);
exports.controlGroupProvider = {
provide: control_container_1.ControlContainer,
useExisting: core_1.forwardRef(function() {
return NgControlGroup;
})
};
var NgControlGroup = function(_super) {
__extends(NgControlGroup, _super);
function NgControlGroup(parent, _validators, _asyncValidators) {
_super.call(this);
this._validators = _validators;
this._asyncValidators = _asyncValidators;
this._parent = parent;
}
NgControlGroup.prototype.ngOnInit = function() {
this.formDirective.addControlGroup(this);
};
NgControlGroup.prototype.ngOnDestroy = function() {
this.formDirective.removeControlGroup(this);
};
Object.defineProperty(NgControlGroup.prototype, "control", {
get: function() {
return this.formDirective.getControlGroup(this);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlGroup.prototype, "path", {
get: function() {
return shared_1.controlPath(this.name, this._parent);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlGroup.prototype, "formDirective", {
get: function() {
return this._parent.formDirective;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlGroup.prototype, "validator", {
get: function() {
return shared_1.composeValidators(this._validators);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlGroup.prototype, "asyncValidator", {
get: function() {
return shared_1.composeAsyncValidators(this._asyncValidators);
},
enumerable: true,
configurable: true
});
NgControlGroup.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "[ngControlGroup]",
providers: [ exports.controlGroupProvider ],
inputs: [ "name: ngControlGroup" ],
exportAs: "ngForm"
} ]
} ];
NgControlGroup.ctorParameters = [ {
type: control_container_1.ControlContainer,
decorators: [ {
type: core_1.Host
}, {
type: core_1.SkipSelf
} ]
}, {
type: undefined,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Self
}, {
type: core_1.Inject,
args: [ validators_1.NG_VALIDATORS ]
} ]
}, {
type: undefined,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Self
}, {
type: core_1.Inject,
args: [ validators_1.NG_ASYNC_VALIDATORS ]
} ]
} ];
return NgControlGroup;
}(control_container_1.ControlContainer);
exports.NgControlGroup = NgControlGroup;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var collection_1 = __webpack_require__(386);
var exceptions_1 = __webpack_require__(383);
var async_1 = __webpack_require__(380);
var control_container_1 = __webpack_require__(411);
var shared_1 = __webpack_require__(415);
var validators_1 = __webpack_require__(416);
exports.formDirectiveProvider = {
provide: control_container_1.ControlContainer,
useExisting: core_1.forwardRef(function() {
return NgFormModel;
})
};
var NgFormModel = function(_super) {
__extends(NgFormModel, _super);
function NgFormModel(_validators, _asyncValidators) {
_super.call(this);
this._validators = _validators;
this._asyncValidators = _asyncValidators;
this.form = null;
this.directives = [];
this.ngSubmit = new async_1.EventEmitter();
}
NgFormModel.prototype.ngOnChanges = function(changes) {
this._checkFormPresent();
if (collection_1.StringMapWrapper.contains(changes, "form")) {
var sync = shared_1.composeValidators(this._validators);
this.form.validator = validators_1.Validators.compose([ this.form.validator, sync ]);
var async = shared_1.composeAsyncValidators(this._asyncValidators);
this.form.asyncValidator = validators_1.Validators.composeAsync([ this.form.asyncValidator, async ]);
this.form.updateValueAndValidity({
onlySelf: true,
emitEvent: false
});
}
this._updateDomValue();
};
Object.defineProperty(NgFormModel.prototype, "formDirective", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgFormModel.prototype, "control", {
get: function() {
return this.form;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgFormModel.prototype, "path", {
get: function() {
return [];
},
enumerable: true,
configurable: true
});
NgFormModel.prototype.addControl = function(dir) {
var ctrl = this.form.find(dir.path);
shared_1.setUpControl(ctrl, dir);
ctrl.updateValueAndValidity({
emitEvent: false
});
this.directives.push(dir);
};
NgFormModel.prototype.getControl = function(dir) {
return this.form.find(dir.path);
};
NgFormModel.prototype.removeControl = function(dir) {
collection_1.ListWrapper.remove(this.directives, dir);
};
NgFormModel.prototype.addControlGroup = function(dir) {
var ctrl = this.form.find(dir.path);
shared_1.setUpControlGroup(ctrl, dir);
ctrl.updateValueAndValidity({
emitEvent: false
});
};
NgFormModel.prototype.removeControlGroup = function(dir) {};
NgFormModel.prototype.getControlGroup = function(dir) {
return this.form.find(dir.path);
};
NgFormModel.prototype.updateModel = function(dir, value) {
var ctrl = this.form.find(dir.path);
ctrl.updateValue(value);
};
NgFormModel.prototype.onSubmit = function() {
async_1.ObservableWrapper.callEmit(this.ngSubmit, null);
return false;
};
NgFormModel.prototype._updateDomValue = function() {
var _this = this;
this.directives.forEach(function(dir) {
var ctrl = _this.form.find(dir.path);
dir.valueAccessor.writeValue(ctrl.value);
});
};
NgFormModel.prototype._checkFormPresent = function() {
if (lang_1.isBlank(this.form)) {
throw new exceptions_1.BaseException('ngFormModel expects a form. Please pass one in. Example: <form [ngFormModel]="myCoolForm">');
}
};
NgFormModel.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "[ngFormModel]",
bindings: [ exports.formDirectiveProvider ],
inputs: [ "form: ngFormModel" ],
host: {
"(submit)": "onSubmit()"
},
outputs: [ "ngSubmit" ],
exportAs: "ngForm"
} ]
} ];
NgFormModel.ctorParameters = [ {
type: undefined,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Self
}, {
type: core_1.Inject,
args: [ validators_1.NG_VALIDATORS ]
} ]
}, {
type: undefined,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Self
}, {
type: core_1.Inject,
args: [ validators_1.NG_ASYNC_VALIDATORS ]
} ]
} ];
return NgFormModel;
}(control_container_1.ControlContainer);
exports.NgFormModel = NgFormModel;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var async_1 = __webpack_require__(380);
var collection_1 = __webpack_require__(386);
var lang_1 = __webpack_require__(379);
var control_container_1 = __webpack_require__(411);
var model_1 = __webpack_require__(409);
var shared_1 = __webpack_require__(415);
var validators_1 = __webpack_require__(416);
exports.formDirectiveProvider = {
provide: control_container_1.ControlContainer,
useExisting: core_1.forwardRef(function() {
return NgForm;
})
};
var NgForm = function(_super) {
__extends(NgForm, _super);
function NgForm(validators, asyncValidators) {
_super.call(this);
this.ngSubmit = new async_1.EventEmitter();
this.form = new model_1.ControlGroup({}, null, shared_1.composeValidators(validators), shared_1.composeAsyncValidators(asyncValidators));
}
Object.defineProperty(NgForm.prototype, "formDirective", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForm.prototype, "control", {
get: function() {
return this.form;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForm.prototype, "path", {
get: function() {
return [];
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgForm.prototype, "controls", {
get: function() {
return this.form.controls;
},
enumerable: true,
configurable: true
});
NgForm.prototype.addControl = function(dir) {
var _this = this;
async_1.PromiseWrapper.scheduleMicrotask(function() {
var container = _this._findContainer(dir.path);
var ctrl = new model_1.Control();
shared_1.setUpControl(ctrl, dir);
container.addControl(dir.name, ctrl);
ctrl.updateValueAndValidity({
emitEvent: false
});
});
};
NgForm.prototype.getControl = function(dir) {
return this.form.find(dir.path);
};
NgForm.prototype.removeControl = function(dir) {
var _this = this;
async_1.PromiseWrapper.scheduleMicrotask(function() {
var container = _this._findContainer(dir.path);
if (lang_1.isPresent(container)) {
container.removeControl(dir.name);
container.updateValueAndValidity({
emitEvent: false
});
}
});
};
NgForm.prototype.addControlGroup = function(dir) {
var _this = this;
async_1.PromiseWrapper.scheduleMicrotask(function() {
var container = _this._findContainer(dir.path);
var group = new model_1.ControlGroup({});
shared_1.setUpControlGroup(group, dir);
container.addControl(dir.name, group);
group.updateValueAndValidity({
emitEvent: false
});
});
};
NgForm.prototype.removeControlGroup = function(dir) {
var _this = this;
async_1.PromiseWrapper.scheduleMicrotask(function() {
var container = _this._findContainer(dir.path);
if (lang_1.isPresent(container)) {
container.removeControl(dir.name);
container.updateValueAndValidity({
emitEvent: false
});
}
});
};
NgForm.prototype.getControlGroup = function(dir) {
return this.form.find(dir.path);
};
NgForm.prototype.updateModel = function(dir, value) {
var _this = this;
async_1.PromiseWrapper.scheduleMicrotask(function() {
var ctrl = _this.form.find(dir.path);
ctrl.updateValue(value);
});
};
NgForm.prototype.onSubmit = function() {
async_1.ObservableWrapper.callEmit(this.ngSubmit, null);
return false;
};
NgForm.prototype._findContainer = function(path) {
path.pop();
return collection_1.ListWrapper.isEmpty(path) ? this.form : this.form.find(path);
};
NgForm.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "form:not([ngNoForm]):not([ngFormModel]),ngForm,[ngForm]",
bindings: [ exports.formDirectiveProvider ],
host: {
"(submit)": "onSubmit()"
},
outputs: [ "ngSubmit" ],
exportAs: "ngForm"
} ]
} ];
NgForm.ctorParameters = [ {
type: undefined,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Self
}, {
type: core_1.Inject,
args: [ validators_1.NG_VALIDATORS ]
} ]
}, {
type: undefined,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Self
}, {
type: core_1.Inject,
args: [ validators_1.NG_ASYNC_VALIDATORS ]
} ]
} ];
return NgForm;
}(control_container_1.ControlContainer);
exports.NgForm = NgForm;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var ng_control_1 = __webpack_require__(413);
var lang_1 = __webpack_require__(379);
var NgControlStatus = function() {
function NgControlStatus(cd) {
this._cd = cd;
}
Object.defineProperty(NgControlStatus.prototype, "ngClassUntouched", {
get: function() {
return lang_1.isPresent(this._cd.control) ? this._cd.control.untouched : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlStatus.prototype, "ngClassTouched", {
get: function() {
return lang_1.isPresent(this._cd.control) ? this._cd.control.touched : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlStatus.prototype, "ngClassPristine", {
get: function() {
return lang_1.isPresent(this._cd.control) ? this._cd.control.pristine : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlStatus.prototype, "ngClassDirty", {
get: function() {
return lang_1.isPresent(this._cd.control) ? this._cd.control.dirty : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlStatus.prototype, "ngClassValid", {
get: function() {
return lang_1.isPresent(this._cd.control) ? this._cd.control.valid : false;
},
enumerable: true,
configurable: true
});
Object.defineProperty(NgControlStatus.prototype, "ngClassInvalid", {
get: function() {
return lang_1.isPresent(this._cd.control) ? !this._cd.control.valid : false;
},
enumerable: true,
configurable: true
});
NgControlStatus.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "[ngControl],[ngModel],[ngFormControl]",
host: {
"[class.ng-untouched]": "ngClassUntouched",
"[class.ng-touched]": "ngClassTouched",
"[class.ng-pristine]": "ngClassPristine",
"[class.ng-dirty]": "ngClassDirty",
"[class.ng-valid]": "ngClassValid",
"[class.ng-invalid]": "ngClassInvalid"
}
} ]
} ];
NgControlStatus.ctorParameters = [ {
type: ng_control_1.NgControl,
decorators: [ {
type: core_1.Self
} ]
} ];
return NgControlStatus;
}();
exports.NgControlStatus = NgControlStatus;
}, function(module, exports, __webpack_require__) {
"use strict";
var ng_control_name_1 = __webpack_require__(412);
var ng_form_control_1 = __webpack_require__(423);
var ng_model_1 = __webpack_require__(424);
var ng_control_group_1 = __webpack_require__(425);
var ng_form_model_1 = __webpack_require__(426);
var ng_form_1 = __webpack_require__(427);
var default_value_accessor_1 = __webpack_require__(417);
var checkbox_value_accessor_1 = __webpack_require__(419);
var number_value_accessor_1 = __webpack_require__(418);
var radio_control_value_accessor_1 = __webpack_require__(421);
var ng_control_status_1 = __webpack_require__(428);
var select_control_value_accessor_1 = __webpack_require__(420);
var validators_1 = __webpack_require__(430);
var ng_control_name_2 = __webpack_require__(412);
exports.NgControlName = ng_control_name_2.NgControlName;
var ng_form_control_2 = __webpack_require__(423);
exports.NgFormControl = ng_form_control_2.NgFormControl;
var ng_model_2 = __webpack_require__(424);
exports.NgModel = ng_model_2.NgModel;
var ng_control_group_2 = __webpack_require__(425);
exports.NgControlGroup = ng_control_group_2.NgControlGroup;
var ng_form_model_2 = __webpack_require__(426);
exports.NgFormModel = ng_form_model_2.NgFormModel;
var ng_form_2 = __webpack_require__(427);
exports.NgForm = ng_form_2.NgForm;
var default_value_accessor_2 = __webpack_require__(417);
exports.DefaultValueAccessor = default_value_accessor_2.DefaultValueAccessor;
var checkbox_value_accessor_2 = __webpack_require__(419);
exports.CheckboxControlValueAccessor = checkbox_value_accessor_2.CheckboxControlValueAccessor;
var radio_control_value_accessor_2 = __webpack_require__(421);
exports.RadioControlValueAccessor = radio_control_value_accessor_2.RadioControlValueAccessor;
exports.RadioButtonState = radio_control_value_accessor_2.RadioButtonState;
var number_value_accessor_2 = __webpack_require__(418);
exports.NumberValueAccessor = number_value_accessor_2.NumberValueAccessor;
var ng_control_status_2 = __webpack_require__(428);
exports.NgControlStatus = ng_control_status_2.NgControlStatus;
var select_control_value_accessor_2 = __webpack_require__(420);
exports.SelectControlValueAccessor = select_control_value_accessor_2.SelectControlValueAccessor;
exports.NgSelectOption = select_control_value_accessor_2.NgSelectOption;
var validators_2 = __webpack_require__(430);
exports.RequiredValidator = validators_2.RequiredValidator;
exports.MinLengthValidator = validators_2.MinLengthValidator;
exports.MaxLengthValidator = validators_2.MaxLengthValidator;
exports.PatternValidator = validators_2.PatternValidator;
var ng_control_1 = __webpack_require__(413);
exports.NgControl = ng_control_1.NgControl;
exports.FORM_DIRECTIVES = [ ng_control_name_1.NgControlName, ng_control_group_1.NgControlGroup, ng_form_control_1.NgFormControl, ng_model_1.NgModel, ng_form_model_1.NgFormModel, ng_form_1.NgForm, select_control_value_accessor_1.NgSelectOption, default_value_accessor_1.DefaultValueAccessor, number_value_accessor_1.NumberValueAccessor, checkbox_value_accessor_1.CheckboxControlValueAccessor, select_control_value_accessor_1.SelectControlValueAccessor, radio_control_value_accessor_1.RadioControlValueAccessor, ng_control_status_1.NgControlStatus, validators_1.RequiredValidator, validators_1.MinLengthValidator, validators_1.MaxLengthValidator, validators_1.PatternValidator ];
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var validators_1 = __webpack_require__(416);
var REQUIRED = validators_1.Validators.required;
exports.REQUIRED_VALIDATOR = {
provide: validators_1.NG_VALIDATORS,
useValue: REQUIRED,
multi: true
};
var RequiredValidator = function() {
function RequiredValidator() {}
RequiredValidator.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "[required][ngControl],[required][ngFormControl],[required][ngModel]",
providers: [ exports.REQUIRED_VALIDATOR ]
} ]
} ];
return RequiredValidator;
}();
exports.RequiredValidator = RequiredValidator;
exports.MIN_LENGTH_VALIDATOR = {
provide: validators_1.NG_VALIDATORS,
useExisting: core_1.forwardRef(function() {
return MinLengthValidator;
}),
multi: true
};
var MinLengthValidator = function() {
function MinLengthValidator(minLength) {
this._validator = validators_1.Validators.minLength(lang_1.NumberWrapper.parseInt(minLength, 10));
}
MinLengthValidator.prototype.validate = function(c) {
return this._validator(c);
};
MinLengthValidator.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "[minlength][ngControl],[minlength][ngFormControl],[minlength][ngModel]",
providers: [ exports.MIN_LENGTH_VALIDATOR ]
} ]
} ];
MinLengthValidator.ctorParameters = [ {
type: undefined,
decorators: [ {
type: core_1.Attribute,
args: [ "minlength" ]
} ]
} ];
return MinLengthValidator;
}();
exports.MinLengthValidator = MinLengthValidator;
exports.MAX_LENGTH_VALIDATOR = {
provide: validators_1.NG_VALIDATORS,
useExisting: core_1.forwardRef(function() {
return MaxLengthValidator;
}),
multi: true
};
var MaxLengthValidator = function() {
function MaxLengthValidator(maxLength) {
this._validator = validators_1.Validators.maxLength(lang_1.NumberWrapper.parseInt(maxLength, 10));
}
MaxLengthValidator.prototype.validate = function(c) {
return this._validator(c);
};
MaxLengthValidator.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "[maxlength][ngControl],[maxlength][ngFormControl],[maxlength][ngModel]",
providers: [ exports.MAX_LENGTH_VALIDATOR ]
} ]
} ];
MaxLengthValidator.ctorParameters = [ {
type: undefined,
decorators: [ {
type: core_1.Attribute,
args: [ "maxlength" ]
} ]
} ];
return MaxLengthValidator;
}();
exports.MaxLengthValidator = MaxLengthValidator;
exports.PATTERN_VALIDATOR = {
provide: validators_1.NG_VALIDATORS,
useExisting: core_1.forwardRef(function() {
return PatternValidator;
}),
multi: true
};
var PatternValidator = function() {
function PatternValidator(pattern) {
this._validator = validators_1.Validators.pattern(pattern);
}
PatternValidator.prototype.validate = function(c) {
return this._validator(c);
};
PatternValidator.decorators = [ {
type: core_1.Directive,
args: [ {
selector: "[pattern][ngControl],[pattern][ngFormControl],[pattern][ngModel]",
providers: [ exports.PATTERN_VALIDATOR ]
} ]
} ];
PatternValidator.ctorParameters = [ {
type: undefined,
decorators: [ {
type: core_1.Attribute,
args: [ "pattern" ]
} ]
} ];
return PatternValidator;
}();
exports.PatternValidator = PatternValidator;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var collection_1 = __webpack_require__(386);
var lang_1 = __webpack_require__(379);
var modelModule = __webpack_require__(409);
var FormBuilder = function() {
function FormBuilder() {}
FormBuilder.prototype.group = function(controlsConfig, extra) {
if (extra === void 0) {
extra = null;
}
var controls = this._reduceControls(controlsConfig);
var optionals = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "optionals") : null;
var validator = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "validator") : null;
var asyncValidator = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "asyncValidator") : null;
return new modelModule.ControlGroup(controls, optionals, validator, asyncValidator);
};
FormBuilder.prototype.control = function(value, validator, asyncValidator) {
if (validator === void 0) {
validator = null;
}
if (asyncValidator === void 0) {
asyncValidator = null;
}
return new modelModule.Control(value, validator, asyncValidator);
};
FormBuilder.prototype.array = function(controlsConfig, validator, asyncValidator) {
var _this = this;
if (validator === void 0) {
validator = null;
}
if (asyncValidator === void 0) {
asyncValidator = null;
}
var controls = controlsConfig.map(function(c) {
return _this._createControl(c);
});
return new modelModule.ControlArray(controls, validator, asyncValidator);
};
FormBuilder.prototype._reduceControls = function(controlsConfig) {
var _this = this;
var controls = {};
collection_1.StringMapWrapper.forEach(controlsConfig, function(controlConfig, controlName) {
controls[controlName] = _this._createControl(controlConfig);
});
return controls;
};
FormBuilder.prototype._createControl = function(controlConfig) {
if (controlConfig instanceof modelModule.Control || controlConfig instanceof modelModule.ControlGroup || controlConfig instanceof modelModule.ControlArray) {
return controlConfig;
} else if (lang_1.isArray(controlConfig)) {
var value = controlConfig[0];
var validator = controlConfig.length > 1 ? controlConfig[1] : null;
var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
return this.control(value, validator, asyncValidator);
} else {
return this.control(controlConfig);
}
};
FormBuilder.decorators = [ {
type: core_1.Injectable
} ];
return FormBuilder;
}();
exports.FormBuilder = FormBuilder;
}, function(module, exports, __webpack_require__) {
"use strict";
var forms_1 = __webpack_require__(408);
var directives_1 = __webpack_require__(398);
exports.COMMON_DIRECTIVES = [ directives_1.CORE_DIRECTIVES, forms_1.FORM_DIRECTIVES ];
}, function(module, exports, __webpack_require__) {
"use strict";
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
__export(__webpack_require__(434));
__export(__webpack_require__(435));
__export(__webpack_require__(436));
__export(__webpack_require__(438));
__export(__webpack_require__(437));
}, function(module, exports) {
"use strict";
var PlatformLocation = function() {
function PlatformLocation() {}
Object.defineProperty(PlatformLocation.prototype, "pathname", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PlatformLocation.prototype, "search", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(PlatformLocation.prototype, "hash", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
return PlatformLocation;
}();
exports.PlatformLocation = PlatformLocation;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var LocationStrategy = function() {
function LocationStrategy() {}
return LocationStrategy;
}();
exports.LocationStrategy = LocationStrategy;
exports.APP_BASE_HREF = new core_1.OpaqueToken("appBaseHref");
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var location_strategy_1 = __webpack_require__(435);
var location_1 = __webpack_require__(437);
var platform_location_1 = __webpack_require__(434);
var HashLocationStrategy = function(_super) {
__extends(HashLocationStrategy, _super);
function HashLocationStrategy(_platformLocation, _baseHref) {
_super.call(this);
this._platformLocation = _platformLocation;
this._baseHref = "";
if (lang_1.isPresent(_baseHref)) {
this._baseHref = _baseHref;
}
}
HashLocationStrategy.prototype.onPopState = function(fn) {
this._platformLocation.onPopState(fn);
this._platformLocation.onHashChange(fn);
};
HashLocationStrategy.prototype.getBaseHref = function() {
return this._baseHref;
};
HashLocationStrategy.prototype.path = function() {
var path = this._platformLocation.hash;
if (!lang_1.isPresent(path)) path = "#";
return path.length > 0 ? path.substring(1) : path;
};
HashLocationStrategy.prototype.prepareExternalUrl = function(internal) {
var url = location_1.Location.joinWithSlash(this._baseHref, internal);
return url.length > 0 ? "#" + url : url;
};
HashLocationStrategy.prototype.pushState = function(state, title, path, queryParams) {
var url = this.prepareExternalUrl(path + location_1.Location.normalizeQueryParams(queryParams));
if (url.length == 0) {
url = this._platformLocation.pathname;
}
this._platformLocation.pushState(state, title, url);
};
HashLocationStrategy.prototype.replaceState = function(state, title, path, queryParams) {
var url = this.prepareExternalUrl(path + location_1.Location.normalizeQueryParams(queryParams));
if (url.length == 0) {
url = this._platformLocation.pathname;
}
this._platformLocation.replaceState(state, title, url);
};
HashLocationStrategy.prototype.forward = function() {
this._platformLocation.forward();
};
HashLocationStrategy.prototype.back = function() {
this._platformLocation.back();
};
HashLocationStrategy.decorators = [ {
type: core_1.Injectable
} ];
HashLocationStrategy.ctorParameters = [ {
type: platform_location_1.PlatformLocation
}, {
type: undefined,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Inject,
args: [ location_strategy_1.APP_BASE_HREF ]
} ]
} ];
return HashLocationStrategy;
}(location_strategy_1.LocationStrategy);
exports.HashLocationStrategy = HashLocationStrategy;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var async_1 = __webpack_require__(380);
var location_strategy_1 = __webpack_require__(435);
var Location = function() {
function Location(platformStrategy) {
var _this = this;
this.platformStrategy = platformStrategy;
this._subject = new async_1.EventEmitter();
var browserBaseHref = this.platformStrategy.getBaseHref();
this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
this.platformStrategy.onPopState(function(ev) {
async_1.ObservableWrapper.callEmit(_this._subject, {
url: _this.path(),
pop: true,
type: ev.type
});
});
}
Location.prototype.path = function() {
return this.normalize(this.platformStrategy.path());
};
Location.prototype.normalize = function(url) {
return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
};
Location.prototype.prepareExternalUrl = function(url) {
if (url.length > 0 && !url.startsWith("/")) {
url = "/" + url;
}
return this.platformStrategy.prepareExternalUrl(url);
};
Location.prototype.go = function(path, query) {
if (query === void 0) {
query = "";
}
this.platformStrategy.pushState(null, "", path, query);
};
Location.prototype.replaceState = function(path, query) {
if (query === void 0) {
query = "";
}
this.platformStrategy.replaceState(null, "", path, query);
};
Location.prototype.forward = function() {
this.platformStrategy.forward();
};
Location.prototype.back = function() {
this.platformStrategy.back();
};
Location.prototype.subscribe = function(onNext, onThrow, onReturn) {
if (onThrow === void 0) {
onThrow = null;
}
if (onReturn === void 0) {
onReturn = null;
}
return async_1.ObservableWrapper.subscribe(this._subject, onNext, onThrow, onReturn);
};
Location.normalizeQueryParams = function(params) {
return params.length > 0 && params.substring(0, 1) != "?" ? "?" + params : params;
};
Location.joinWithSlash = function(start, end) {
if (start.length == 0) {
return end;
}
if (end.length == 0) {
return start;
}
var slashes = 0;
if (start.endsWith("/")) {
slashes++;
}
if (end.startsWith("/")) {
slashes++;
}
if (slashes == 2) {
return start + end.substring(1);
}
if (slashes == 1) {
return start + end;
}
return start + "/" + end;
};
Location.stripTrailingSlash = function(url) {
if (/\/$/g.test(url)) {
url = url.substring(0, url.length - 1);
}
return url;
};
Location.decorators = [ {
type: core_1.Injectable
} ];
Location.ctorParameters = [ {
type: location_strategy_1.LocationStrategy
} ];
return Location;
}();
exports.Location = Location;
function _stripBaseHref(baseHref, url) {
if (baseHref.length > 0 && url.startsWith(baseHref)) {
return url.substring(baseHref.length);
}
return url;
}
function _stripIndexHtml(url) {
if (/\/index.html$/g.test(url)) {
return url.substring(0, url.length - 11);
}
return url;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(379);
var exceptions_1 = __webpack_require__(383);
var platform_location_1 = __webpack_require__(434);
var location_strategy_1 = __webpack_require__(435);
var location_1 = __webpack_require__(437);
var PathLocationStrategy = function(_super) {
__extends(PathLocationStrategy, _super);
function PathLocationStrategy(_platformLocation, href) {
_super.call(this);
this._platformLocation = _platformLocation;
if (lang_1.isBlank(href)) {
href = this._platformLocation.getBaseHrefFromDOM();
}
if (lang_1.isBlank(href)) {
throw new exceptions_1.BaseException("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
}
this._baseHref = href;
}
PathLocationStrategy.prototype.onPopState = function(fn) {
this._platformLocation.onPopState(fn);
this._platformLocation.onHashChange(fn);
};
PathLocationStrategy.prototype.getBaseHref = function() {
return this._baseHref;
};
PathLocationStrategy.prototype.prepareExternalUrl = function(internal) {
return location_1.Location.joinWithSlash(this._baseHref, internal);
};
PathLocationStrategy.prototype.path = function() {
return this._platformLocation.pathname + location_1.Location.normalizeQueryParams(this._platformLocation.search);
};
PathLocationStrategy.prototype.pushState = function(state, title, url, queryParams) {
var externalUrl = this.prepareExternalUrl(url + location_1.Location.normalizeQueryParams(queryParams));
this._platformLocation.pushState(state, title, externalUrl);
};
PathLocationStrategy.prototype.replaceState = function(state, title, url, queryParams) {
var externalUrl = this.prepareExternalUrl(url + location_1.Location.normalizeQueryParams(queryParams));
this._platformLocation.replaceState(state, title, externalUrl);
};
PathLocationStrategy.prototype.forward = function() {
this._platformLocation.forward();
};
PathLocationStrategy.prototype.back = function() {
this._platformLocation.back();
};
PathLocationStrategy.decorators = [ {
type: core_1.Injectable
} ];
PathLocationStrategy.ctorParameters = [ {
type: platform_location_1.PlatformLocation
}, {
type: undefined,
decorators: [ {
type: core_1.Optional
}, {
type: core_1.Inject,
args: [ location_strategy_1.APP_BASE_HREF ]
} ]
} ];
return PathLocationStrategy;
}(location_strategy_1.LocationStrategy);
exports.PathLocationStrategy = PathLocationStrategy;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var url_sanitizer_1 = __webpack_require__(440);
var style_sanitizer_1 = __webpack_require__(441);
var core_private_1 = __webpack_require__(375);
exports.SecurityContext = core_private_1.SecurityContext;
var core_1 = __webpack_require__(118);
var DomSanitizationService = function() {
function DomSanitizationService() {}
return DomSanitizationService;
}();
exports.DomSanitizationService = DomSanitizationService;
var DomSanitizationServiceImpl = function(_super) {
__extends(DomSanitizationServiceImpl, _super);
function DomSanitizationServiceImpl() {
_super.apply(this, arguments);
}
DomSanitizationServiceImpl.prototype.sanitize = function(ctx, value) {
if (value == null) return null;
switch (ctx) {
case core_private_1.SecurityContext.NONE:
return value;

case core_private_1.SecurityContext.HTML:
if (value instanceof SafeHtmlImpl) return value.changingThisBreaksApplicationSecurity;
this.checkNotSafeValue(value, "HTML");
return this.sanitizeHtml(String(value));

case core_private_1.SecurityContext.STYLE:
if (value instanceof SafeStyleImpl) return value.changingThisBreaksApplicationSecurity;
this.checkNotSafeValue(value, "Style");
return style_sanitizer_1.sanitizeStyle(value);

case core_private_1.SecurityContext.SCRIPT:
if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity;
this.checkNotSafeValue(value, "Script");
throw new Error("unsafe value used in a script context");

case core_private_1.SecurityContext.URL:
if (value instanceof SafeUrlImpl) return value.changingThisBreaksApplicationSecurity;
this.checkNotSafeValue(value, "URL");
return url_sanitizer_1.sanitizeUrl(String(value));

case core_private_1.SecurityContext.RESOURCE_URL:
if (value instanceof SafeResourceUrlImpl) {
return value.changingThisBreaksApplicationSecurity;
}
this.checkNotSafeValue(value, "ResourceURL");
throw new Error("unsafe value used in a resource URL context");

default:
throw new Error("Unexpected SecurityContext " + ctx);
}
};
DomSanitizationServiceImpl.prototype.checkNotSafeValue = function(value, expectedType) {
if (value instanceof SafeValueImpl) {
throw new Error("Required a safe " + expectedType + ", got a " + value.getTypeName());
}
};
DomSanitizationServiceImpl.prototype.sanitizeHtml = function(value) {
return value;
};
DomSanitizationServiceImpl.prototype.bypassSecurityTrustHtml = function(value) {
return new SafeHtmlImpl(value);
};
DomSanitizationServiceImpl.prototype.bypassSecurityTrustStyle = function(value) {
return new SafeStyleImpl(value);
};
DomSanitizationServiceImpl.prototype.bypassSecurityTrustScript = function(value) {
return new SafeScriptImpl(value);
};
DomSanitizationServiceImpl.prototype.bypassSecurityTrustUrl = function(value) {
return new SafeUrlImpl(value);
};
DomSanitizationServiceImpl.prototype.bypassSecurityTrustResourceUrl = function(value) {
return new SafeResourceUrlImpl(value);
};
DomSanitizationServiceImpl.decorators = [ {
type: core_1.Injectable
} ];
return DomSanitizationServiceImpl;
}(DomSanitizationService);
exports.DomSanitizationServiceImpl = DomSanitizationServiceImpl;
var SafeValueImpl = function() {
function SafeValueImpl(changingThisBreaksApplicationSecurity) {
this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
}
return SafeValueImpl;
}();
var SafeHtmlImpl = function(_super) {
__extends(SafeHtmlImpl, _super);
function SafeHtmlImpl() {
_super.apply(this, arguments);
}
SafeHtmlImpl.prototype.getTypeName = function() {
return "HTML";
};
return SafeHtmlImpl;
}(SafeValueImpl);
var SafeStyleImpl = function(_super) {
__extends(SafeStyleImpl, _super);
function SafeStyleImpl() {
_super.apply(this, arguments);
}
SafeStyleImpl.prototype.getTypeName = function() {
return "Style";
};
return SafeStyleImpl;
}(SafeValueImpl);
var SafeScriptImpl = function(_super) {
__extends(SafeScriptImpl, _super);
function SafeScriptImpl() {
_super.apply(this, arguments);
}
SafeScriptImpl.prototype.getTypeName = function() {
return "Script";
};
return SafeScriptImpl;
}(SafeValueImpl);
var SafeUrlImpl = function(_super) {
__extends(SafeUrlImpl, _super);
function SafeUrlImpl() {
_super.apply(this, arguments);
}
SafeUrlImpl.prototype.getTypeName = function() {
return "URL";
};
return SafeUrlImpl;
}(SafeValueImpl);
var SafeResourceUrlImpl = function(_super) {
__extends(SafeResourceUrlImpl, _super);
function SafeResourceUrlImpl() {
_super.apply(this, arguments);
}
SafeResourceUrlImpl.prototype.getTypeName = function() {
return "ResourceURL";
};
return SafeResourceUrlImpl;
}(SafeValueImpl);
}, function(module, exports) {
"use strict";
var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:\/?#]*(?:[\/?#]|$))/gi;
function sanitizeUrl(url) {
if (String(url).match(SAFE_URL_PATTERN)) return url;
return "unsafe:" + url;
}
exports.sanitizeUrl = sanitizeUrl;
}, function(module, exports) {
"use strict";
var SAFE_STYLE_VALUE = /^([-,."'%_!# a-zA-Z0-9]+|(?:rgb|hsl)a?\([0-9.%, ]+\))$/;
function hasBalancedQuotes(value) {
var outsideSingle = true;
var outsideDouble = true;
for (var i = 0; i < value.length; i++) {
var c = value.charAt(i);
if (c === "'" && outsideDouble) {
outsideSingle = !outsideSingle;
} else if (c === '"' && outsideSingle) {
outsideDouble = !outsideDouble;
}
}
return outsideSingle && outsideDouble;
}
function sanitizeStyle(value) {
if (String(value).match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) return value;
return "unsafe";
}
exports.sanitizeStyle = sanitizeStyle;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var collection_1 = __webpack_require__(221);
var lang_1 = __webpack_require__(219);
var generic_browser_adapter_1 = __webpack_require__(443);
var dom_adapter_1 = __webpack_require__(223);
var _attrToPropMap = {
"class": "className",
innerHtml: "innerHTML",
readonly: "readOnly",
tabindex: "tabIndex"
};
var DOM_KEY_LOCATION_NUMPAD = 3;
var _keyMap = {
"\b": "Backspace",
"	": "Tab",
"": "Delete",
"": "Escape",
Del: "Delete",
Esc: "Escape",
Left: "ArrowLeft",
Right: "ArrowRight",
Up: "ArrowUp",
Down: "ArrowDown",
Menu: "ContextMenu",
Scroll: "ScrollLock",
Win: "OS"
};
var _chromeNumKeyPadMap = {
A: "1",
B: "2",
C: "3",
D: "4",
E: "5",
F: "6",
G: "7",
H: "8",
I: "9",
J: "*",
K: "+",
M: "-",
N: ".",
O: "/",
"`": "0",
"": "NumLock"
};
var BrowserDomAdapter = function(_super) {
__extends(BrowserDomAdapter, _super);
function BrowserDomAdapter() {
_super.apply(this, arguments);
}
BrowserDomAdapter.prototype.parse = function(templateHtml) {
throw new Error("parse not implemented");
};
BrowserDomAdapter.makeCurrent = function() {
dom_adapter_1.setRootDomAdapter(new BrowserDomAdapter());
};
BrowserDomAdapter.prototype.hasProperty = function(element, name) {
return name in element;
};
BrowserDomAdapter.prototype.setProperty = function(el, name, value) {
el[name] = value;
};
BrowserDomAdapter.prototype.getProperty = function(el, name) {
return el[name];
};
BrowserDomAdapter.prototype.invoke = function(el, methodName, args) {
el[methodName].apply(el, args);
};
BrowserDomAdapter.prototype.logError = function(error) {
if (window.console.error) {
window.console.error(error);
} else {
window.console.log(error);
}
};
BrowserDomAdapter.prototype.log = function(error) {
window.console.log(error);
};
BrowserDomAdapter.prototype.logGroup = function(error) {
if (window.console.group) {
window.console.group(error);
this.logError(error);
} else {
window.console.log(error);
}
};
BrowserDomAdapter.prototype.logGroupEnd = function() {
if (window.console.groupEnd) {
window.console.groupEnd();
}
};
Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
get: function() {
return _attrToPropMap;
},
enumerable: true,
configurable: true
});
BrowserDomAdapter.prototype.query = function(selector) {
return document.querySelector(selector);
};
BrowserDomAdapter.prototype.querySelector = function(el, selector) {
return el.querySelector(selector);
};
BrowserDomAdapter.prototype.querySelectorAll = function(el, selector) {
return el.querySelectorAll(selector);
};
BrowserDomAdapter.prototype.on = function(el, evt, listener) {
el.addEventListener(evt, listener, false);
};
BrowserDomAdapter.prototype.onAndCancel = function(el, evt, listener) {
el.addEventListener(evt, listener, false);
return function() {
el.removeEventListener(evt, listener, false);
};
};
BrowserDomAdapter.prototype.dispatchEvent = function(el, evt) {
el.dispatchEvent(evt);
};
BrowserDomAdapter.prototype.createMouseEvent = function(eventType) {
var evt = document.createEvent("MouseEvent");
evt.initEvent(eventType, true, true);
return evt;
};
BrowserDomAdapter.prototype.createEvent = function(eventType) {
var evt = document.createEvent("Event");
evt.initEvent(eventType, true, true);
return evt;
};
BrowserDomAdapter.prototype.preventDefault = function(evt) {
evt.preventDefault();
evt.returnValue = false;
};
BrowserDomAdapter.prototype.isPrevented = function(evt) {
return evt.defaultPrevented || lang_1.isPresent(evt.returnValue) && !evt.returnValue;
};
BrowserDomAdapter.prototype.getInnerHTML = function(el) {
return el.innerHTML;
};
BrowserDomAdapter.prototype.getOuterHTML = function(el) {
return el.outerHTML;
};
BrowserDomAdapter.prototype.nodeName = function(node) {
return node.nodeName;
};
BrowserDomAdapter.prototype.nodeValue = function(node) {
return node.nodeValue;
};
BrowserDomAdapter.prototype.type = function(node) {
return node.type;
};
BrowserDomAdapter.prototype.content = function(node) {
if (this.hasProperty(node, "content")) {
return node.content;
} else {
return node;
}
};
BrowserDomAdapter.prototype.firstChild = function(el) {
return el.firstChild;
};
BrowserDomAdapter.prototype.nextSibling = function(el) {
return el.nextSibling;
};
BrowserDomAdapter.prototype.parentElement = function(el) {
return el.parentNode;
};
BrowserDomAdapter.prototype.childNodes = function(el) {
return el.childNodes;
};
BrowserDomAdapter.prototype.childNodesAsList = function(el) {
var childNodes = el.childNodes;
var res = collection_1.ListWrapper.createFixedSize(childNodes.length);
for (var i = 0; i < childNodes.length; i++) {
res[i] = childNodes[i];
}
return res;
};
BrowserDomAdapter.prototype.clearNodes = function(el) {
while (el.firstChild) {
el.removeChild(el.firstChild);
}
};
BrowserDomAdapter.prototype.appendChild = function(el, node) {
el.appendChild(node);
};
BrowserDomAdapter.prototype.removeChild = function(el, node) {
el.removeChild(node);
};
BrowserDomAdapter.prototype.replaceChild = function(el, newChild, oldChild) {
el.replaceChild(newChild, oldChild);
};
BrowserDomAdapter.prototype.remove = function(node) {
if (node.parentNode) {
node.parentNode.removeChild(node);
}
return node;
};
BrowserDomAdapter.prototype.insertBefore = function(el, node) {
el.parentNode.insertBefore(node, el);
};
BrowserDomAdapter.prototype.insertAllBefore = function(el, nodes) {
nodes.forEach(function(n) {
return el.parentNode.insertBefore(n, el);
});
};
BrowserDomAdapter.prototype.insertAfter = function(el, node) {
el.parentNode.insertBefore(node, el.nextSibling);
};
BrowserDomAdapter.prototype.setInnerHTML = function(el, value) {
el.innerHTML = value;
};
BrowserDomAdapter.prototype.getText = function(el) {
return el.textContent;
};
BrowserDomAdapter.prototype.setText = function(el, value) {
el.textContent = value;
};
BrowserDomAdapter.prototype.getValue = function(el) {
return el.value;
};
BrowserDomAdapter.prototype.setValue = function(el, value) {
el.value = value;
};
BrowserDomAdapter.prototype.getChecked = function(el) {
return el.checked;
};
BrowserDomAdapter.prototype.setChecked = function(el, value) {
el.checked = value;
};
BrowserDomAdapter.prototype.createComment = function(text) {
return document.createComment(text);
};
BrowserDomAdapter.prototype.createTemplate = function(html) {
var t = document.createElement("template");
t.innerHTML = html;
return t;
};
BrowserDomAdapter.prototype.createElement = function(tagName, doc) {
if (doc === void 0) {
doc = document;
}
return doc.createElement(tagName);
};
BrowserDomAdapter.prototype.createElementNS = function(ns, tagName, doc) {
if (doc === void 0) {
doc = document;
}
return doc.createElementNS(ns, tagName);
};
BrowserDomAdapter.prototype.createTextNode = function(text, doc) {
if (doc === void 0) {
doc = document;
}
return doc.createTextNode(text);
};
BrowserDomAdapter.prototype.createScriptTag = function(attrName, attrValue, doc) {
if (doc === void 0) {
doc = document;
}
var el = doc.createElement("SCRIPT");
el.setAttribute(attrName, attrValue);
return el;
};
BrowserDomAdapter.prototype.createStyleElement = function(css, doc) {
if (doc === void 0) {
doc = document;
}
var style = doc.createElement("style");
this.appendChild(style, this.createTextNode(css));
return style;
};
BrowserDomAdapter.prototype.createShadowRoot = function(el) {
return el.createShadowRoot();
};
BrowserDomAdapter.prototype.getShadowRoot = function(el) {
return el.shadowRoot;
};
BrowserDomAdapter.prototype.getHost = function(el) {
return el.host;
};
BrowserDomAdapter.prototype.clone = function(node) {
return node.cloneNode(true);
};
BrowserDomAdapter.prototype.getElementsByClassName = function(element, name) {
return element.getElementsByClassName(name);
};
BrowserDomAdapter.prototype.getElementsByTagName = function(element, name) {
return element.getElementsByTagName(name);
};
BrowserDomAdapter.prototype.classList = function(element) {
return Array.prototype.slice.call(element.classList, 0);
};
BrowserDomAdapter.prototype.addClass = function(element, className) {
element.classList.add(className);
};
BrowserDomAdapter.prototype.removeClass = function(element, className) {
element.classList.remove(className);
};
BrowserDomAdapter.prototype.hasClass = function(element, className) {
return element.classList.contains(className);
};
BrowserDomAdapter.prototype.setStyle = function(element, styleName, styleValue) {
element.style[styleName] = styleValue;
};
BrowserDomAdapter.prototype.removeStyle = function(element, stylename) {
element.style[stylename] = null;
};
BrowserDomAdapter.prototype.getStyle = function(element, stylename) {
return element.style[stylename];
};
BrowserDomAdapter.prototype.hasStyle = function(element, styleName, styleValue) {
if (styleValue === void 0) {
styleValue = null;
}
var value = this.getStyle(element, styleName) || "";
return styleValue ? value == styleValue : value.length > 0;
};
BrowserDomAdapter.prototype.tagName = function(element) {
return element.tagName;
};
BrowserDomAdapter.prototype.attributeMap = function(element) {
var res = new Map();
var elAttrs = element.attributes;
for (var i = 0; i < elAttrs.length; i++) {
var attrib = elAttrs[i];
res.set(attrib.name, attrib.value);
}
return res;
};
BrowserDomAdapter.prototype.hasAttribute = function(element, attribute) {
return element.hasAttribute(attribute);
};
BrowserDomAdapter.prototype.hasAttributeNS = function(element, ns, attribute) {
return element.hasAttributeNS(ns, attribute);
};
BrowserDomAdapter.prototype.getAttribute = function(element, attribute) {
return element.getAttribute(attribute);
};
BrowserDomAdapter.prototype.getAttributeNS = function(element, ns, name) {
return element.getAttributeNS(ns, name);
};
BrowserDomAdapter.prototype.setAttribute = function(element, name, value) {
element.setAttribute(name, value);
};
BrowserDomAdapter.prototype.setAttributeNS = function(element, ns, name, value) {
element.setAttributeNS(ns, name, value);
};
BrowserDomAdapter.prototype.removeAttribute = function(element, attribute) {
element.removeAttribute(attribute);
};
BrowserDomAdapter.prototype.removeAttributeNS = function(element, ns, name) {
element.removeAttributeNS(ns, name);
};
BrowserDomAdapter.prototype.templateAwareRoot = function(el) {
return this.isTemplateElement(el) ? this.content(el) : el;
};
BrowserDomAdapter.prototype.createHtmlDocument = function() {
return document.implementation.createHTMLDocument("fakeTitle");
};
BrowserDomAdapter.prototype.defaultDoc = function() {
return document;
};
BrowserDomAdapter.prototype.getBoundingClientRect = function(el) {
try {
return el.getBoundingClientRect();
} catch (e) {
return {
top: 0,
bottom: 0,
left: 0,
right: 0,
width: 0,
height: 0
};
}
};
BrowserDomAdapter.prototype.getTitle = function() {
return document.title;
};
BrowserDomAdapter.prototype.setTitle = function(newTitle) {
document.title = newTitle || "";
};
BrowserDomAdapter.prototype.elementMatches = function(n, selector) {
var matches = false;
if (n instanceof HTMLElement) {
if (n.matches) {
matches = n.matches(selector);
} else if (n.msMatchesSelector) {
matches = n.msMatchesSelector(selector);
} else if (n.webkitMatchesSelector) {
matches = n.webkitMatchesSelector(selector);
}
}
return matches;
};
BrowserDomAdapter.prototype.isTemplateElement = function(el) {
return el instanceof HTMLElement && el.nodeName == "TEMPLATE";
};
BrowserDomAdapter.prototype.isTextNode = function(node) {
return node.nodeType === Node.TEXT_NODE;
};
BrowserDomAdapter.prototype.isCommentNode = function(node) {
return node.nodeType === Node.COMMENT_NODE;
};
BrowserDomAdapter.prototype.isElementNode = function(node) {
return node.nodeType === Node.ELEMENT_NODE;
};
BrowserDomAdapter.prototype.hasShadowRoot = function(node) {
return node instanceof HTMLElement && lang_1.isPresent(node.shadowRoot);
};
BrowserDomAdapter.prototype.isShadowRoot = function(node) {
return node instanceof DocumentFragment;
};
BrowserDomAdapter.prototype.importIntoDoc = function(node) {
var toImport = node;
if (this.isTemplateElement(node)) {
toImport = this.content(node);
}
return document.importNode(toImport, true);
};
BrowserDomAdapter.prototype.adoptNode = function(node) {
return document.adoptNode(node);
};
BrowserDomAdapter.prototype.getHref = function(el) {
return el.href;
};
BrowserDomAdapter.prototype.getEventKey = function(event) {
var key = event.key;
if (lang_1.isBlank(key)) {
key = event.keyIdentifier;
if (lang_1.isBlank(key)) {
return "Unidentified";
}
if (key.startsWith("U+")) {
key = String.fromCharCode(parseInt(key.substring(2), 16));
if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
key = _chromeNumKeyPadMap[key];
}
}
}
if (_keyMap.hasOwnProperty(key)) {
key = _keyMap[key];
}
return key;
};
BrowserDomAdapter.prototype.getGlobalEventTarget = function(target) {
if (target == "window") {
return window;
} else if (target == "document") {
return document;
} else if (target == "body") {
return document.body;
}
};
BrowserDomAdapter.prototype.getHistory = function() {
return window.history;
};
BrowserDomAdapter.prototype.getLocation = function() {
return window.location;
};
BrowserDomAdapter.prototype.getBaseHref = function() {
var href = getBaseElementHref();
if (lang_1.isBlank(href)) {
return null;
}
return relativePath(href);
};
BrowserDomAdapter.prototype.resetBaseElement = function() {
baseElement = null;
};
BrowserDomAdapter.prototype.getUserAgent = function() {
return window.navigator.userAgent;
};
BrowserDomAdapter.prototype.setData = function(element, name, value) {
this.setAttribute(element, "data-" + name, value);
};
BrowserDomAdapter.prototype.getData = function(element, name) {
return this.getAttribute(element, "data-" + name);
};
BrowserDomAdapter.prototype.getComputedStyle = function(element) {
return getComputedStyle(element);
};
BrowserDomAdapter.prototype.setGlobalVar = function(path, value) {
lang_1.setValueOnPath(lang_1.global, path, value);
};
BrowserDomAdapter.prototype.requestAnimationFrame = function(callback) {
return window.requestAnimationFrame(callback);
};
BrowserDomAdapter.prototype.cancelAnimationFrame = function(id) {
window.cancelAnimationFrame(id);
};
BrowserDomAdapter.prototype.performanceNow = function() {
if (lang_1.isPresent(window.performance) && lang_1.isPresent(window.performance.now)) {
return window.performance.now();
} else {
return lang_1.DateWrapper.toMillis(lang_1.DateWrapper.now());
}
};
return BrowserDomAdapter;
}(generic_browser_adapter_1.GenericBrowserDomAdapter);
exports.BrowserDomAdapter = BrowserDomAdapter;
var baseElement = null;
function getBaseElementHref() {
if (lang_1.isBlank(baseElement)) {
baseElement = document.querySelector("base");
if (lang_1.isBlank(baseElement)) {
return null;
}
}
return baseElement.getAttribute("href");
}
var urlParsingNode = null;
function relativePath(url) {
if (lang_1.isBlank(urlParsingNode)) {
urlParsingNode = document.createElement("a");
}
urlParsingNode.setAttribute("href", url);
return urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var collection_1 = __webpack_require__(221);
var lang_1 = __webpack_require__(219);
var dom_adapter_1 = __webpack_require__(223);
var GenericBrowserDomAdapter = function(_super) {
__extends(GenericBrowserDomAdapter, _super);
function GenericBrowserDomAdapter() {
var _this = this;
_super.call(this);
this._animationPrefix = null;
this._transitionEnd = null;
try {
var element = this.createElement("div", this.defaultDoc());
if (lang_1.isPresent(this.getStyle(element, "animationName"))) {
this._animationPrefix = "";
} else {
var domPrefixes = [ "Webkit", "Moz", "O", "ms" ];
for (var i = 0; i < domPrefixes.length; i++) {
if (lang_1.isPresent(this.getStyle(element, domPrefixes[i] + "AnimationName"))) {
this._animationPrefix = "-" + domPrefixes[i].toLowerCase() + "-";
break;
}
}
}
var transEndEventNames = {
WebkitTransition: "webkitTransitionEnd",
MozTransition: "transitionend",
OTransition: "oTransitionEnd otransitionend",
transition: "transitionend"
};
collection_1.StringMapWrapper.forEach(transEndEventNames, function(value, key) {
if (lang_1.isPresent(_this.getStyle(element, key))) {
_this._transitionEnd = value;
}
});
} catch (e) {
this._animationPrefix = null;
this._transitionEnd = null;
}
}
GenericBrowserDomAdapter.prototype.getDistributedNodes = function(el) {
return el.getDistributedNodes();
};
GenericBrowserDomAdapter.prototype.resolveAndSetHref = function(el, baseUrl, href) {
el.href = href == null ? baseUrl : baseUrl + "/../" + href;
};
GenericBrowserDomAdapter.prototype.supportsDOMEvents = function() {
return true;
};
GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function() {
return lang_1.isFunction(this.defaultDoc().body.createShadowRoot);
};
GenericBrowserDomAdapter.prototype.getAnimationPrefix = function() {
return lang_1.isPresent(this._animationPrefix) ? this._animationPrefix : "";
};
GenericBrowserDomAdapter.prototype.getTransitionEnd = function() {
return lang_1.isPresent(this._transitionEnd) ? this._transitionEnd : "";
};
GenericBrowserDomAdapter.prototype.supportsAnimation = function() {
return lang_1.isPresent(this._animationPrefix) && lang_1.isPresent(this._transitionEnd);
};
return GenericBrowserDomAdapter;
}(dom_adapter_1.DomAdapter);
exports.GenericBrowserDomAdapter = GenericBrowserDomAdapter;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var collection_1 = __webpack_require__(221);
var lang_1 = __webpack_require__(219);
var dom_adapter_1 = __webpack_require__(223);
var PublicTestability = function() {
function PublicTestability(testability) {
this._testability = testability;
}
PublicTestability.prototype.isStable = function() {
return this._testability.isStable();
};
PublicTestability.prototype.whenStable = function(callback) {
this._testability.whenStable(callback);
};
PublicTestability.prototype.findBindings = function(using, provider, exactMatch) {
return this.findProviders(using, provider, exactMatch);
};
PublicTestability.prototype.findProviders = function(using, provider, exactMatch) {
return this._testability.findBindings(using, provider, exactMatch);
};
return PublicTestability;
}();
var BrowserGetTestability = function() {
function BrowserGetTestability() {}
BrowserGetTestability.init = function() {
core_1.setTestabilityGetter(new BrowserGetTestability());
};
BrowserGetTestability.prototype.addToWindow = function(registry) {
lang_1.global.getAngularTestability = function(elem, findInAncestors) {
if (findInAncestors === void 0) {
findInAncestors = true;
}
var testability = registry.findTestabilityInTree(elem, findInAncestors);
if (testability == null) {
throw new Error("Could not find testability for element.");
}
return new PublicTestability(testability);
};
lang_1.global.getAllAngularTestabilities = function() {
var testabilities = registry.getAllTestabilities();
return testabilities.map(function(testability) {
return new PublicTestability(testability);
});
};
lang_1.global.getAllAngularRootElements = function() {
return registry.getAllRootElements();
};
var whenAllStable = function(callback) {
var testabilities = lang_1.global.getAllAngularTestabilities();
var count = testabilities.length;
var didWork = false;
var decrement = function(didWork_) {
didWork = didWork || didWork_;
count--;
if (count == 0) {
callback(didWork);
}
};
testabilities.forEach(function(testability) {
testability.whenStable(decrement);
});
};
if (!lang_1.global.frameworkStabilizers) {
lang_1.global.frameworkStabilizers = collection_1.ListWrapper.createGrowableSize(0);
}
lang_1.global.frameworkStabilizers.push(whenAllStable);
};
BrowserGetTestability.prototype.findTestabilityInTree = function(registry, elem, findInAncestors) {
if (elem == null) {
return null;
}
var t = registry.getTestability(elem);
if (lang_1.isPresent(t)) {
return t;
} else if (!findInAncestors) {
return null;
}
if (dom_adapter_1.getDOM().isShadowRoot(elem)) {
return this.findTestabilityInTree(registry, dom_adapter_1.getDOM().getHost(elem), true);
}
return this.findTestabilityInTree(registry, dom_adapter_1.getDOM().parentElement(elem), true);
};
return BrowserGetTestability;
}();
exports.BrowserGetTestability = BrowserGetTestability;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(219);
var collection_1 = __webpack_require__(221);
var dom_adapter_1 = __webpack_require__(223);
var event_manager_1 = __webpack_require__(230);
var modifierKeys = [ "alt", "control", "meta", "shift" ];
var modifierKeyGetters = {
alt: function(event) {
return event.altKey;
},
control: function(event) {
return event.ctrlKey;
},
meta: function(event) {
return event.metaKey;
},
shift: function(event) {
return event.shiftKey;
}
};
var KeyEventsPlugin = function(_super) {
__extends(KeyEventsPlugin, _super);
function KeyEventsPlugin() {
_super.call(this);
}
KeyEventsPlugin.prototype.supports = function(eventName) {
return lang_1.isPresent(KeyEventsPlugin.parseEventName(eventName));
};
KeyEventsPlugin.prototype.addEventListener = function(element, eventName, handler) {
var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
var outsideHandler = KeyEventsPlugin.eventCallback(element, collection_1.StringMapWrapper.get(parsedEvent, "fullKey"), handler, this.manager.getZone());
return this.manager.getZone().runOutsideAngular(function() {
return dom_adapter_1.getDOM().onAndCancel(element, collection_1.StringMapWrapper.get(parsedEvent, "domEventName"), outsideHandler);
});
};
KeyEventsPlugin.parseEventName = function(eventName) {
var parts = eventName.toLowerCase().split(".");
var domEventName = parts.shift();
if (parts.length === 0 || !(lang_1.StringWrapper.equals(domEventName, "keydown") || lang_1.StringWrapper.equals(domEventName, "keyup"))) {
return null;
}
var key = KeyEventsPlugin._normalizeKey(parts.pop());
var fullKey = "";
modifierKeys.forEach(function(modifierName) {
if (collection_1.ListWrapper.contains(parts, modifierName)) {
collection_1.ListWrapper.remove(parts, modifierName);
fullKey += modifierName + ".";
}
});
fullKey += key;
if (parts.length != 0 || key.length === 0) {
return null;
}
var result = collection_1.StringMapWrapper.create();
collection_1.StringMapWrapper.set(result, "domEventName", domEventName);
collection_1.StringMapWrapper.set(result, "fullKey", fullKey);
return result;
};
KeyEventsPlugin.getEventFullKey = function(event) {
var fullKey = "";
var key = dom_adapter_1.getDOM().getEventKey(event);
key = key.toLowerCase();
if (lang_1.StringWrapper.equals(key, " ")) {
key = "space";
} else if (lang_1.StringWrapper.equals(key, ".")) {
key = "dot";
}
modifierKeys.forEach(function(modifierName) {
if (modifierName != key) {
var modifierGetter = collection_1.StringMapWrapper.get(modifierKeyGetters, modifierName);
if (modifierGetter(event)) {
fullKey += modifierName + ".";
}
}
});
fullKey += key;
return fullKey;
};
KeyEventsPlugin.eventCallback = function(element, fullKey, handler, zone) {
return function(event) {
if (lang_1.StringWrapper.equals(KeyEventsPlugin.getEventFullKey(event), fullKey)) {
zone.runGuarded(function() {
return handler(event);
});
}
};
};
KeyEventsPlugin._normalizeKey = function(keyName) {
switch (keyName) {
case "esc":
return "escape";

default:
return keyName;
}
};
KeyEventsPlugin.decorators = [ {
type: core_1.Injectable
} ];
KeyEventsPlugin.ctorParameters = [];
return KeyEventsPlugin;
}(event_manager_1.EventManagerPlugin);
exports.KeyEventsPlugin = KeyEventsPlugin;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var core_private_1 = __webpack_require__(375);
var lang_1 = __webpack_require__(219);
var dom_adapter_1 = __webpack_require__(223);
var dom_renderer_1 = __webpack_require__(214);
var CORE_TOKENS = {
ApplicationRef: core_1.ApplicationRef,
NgZone: core_1.NgZone
};
var INSPECT_GLOBAL_NAME = "ng.probe";
var CORE_TOKENS_GLOBAL_NAME = "ng.coreTokens";
function inspectNativeElement(element) {
return core_1.getDebugNode(element);
}
exports.inspectNativeElement = inspectNativeElement;
function _createConditionalRootRenderer(rootRenderer) {
if (lang_1.assertionsEnabled()) {
return _createRootRenderer(rootRenderer);
}
return rootRenderer;
}
function _createRootRenderer(rootRenderer) {
dom_adapter_1.getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
dom_adapter_1.getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, CORE_TOKENS);
return new core_private_1.DebugDomRootRenderer(rootRenderer);
}
exports.ELEMENT_PROBE_PROVIDERS = [ {
provide: core_1.RootRenderer,
useFactory: _createConditionalRootRenderer,
deps: [ dom_renderer_1.DomRootRenderer ]
} ];
exports.ELEMENT_PROBE_PROVIDERS_PROD_MODE = [ {
provide: core_1.RootRenderer,
useFactory: _createRootRenderer,
deps: [ dom_renderer_1.DomRootRenderer ]
} ];
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var dom_adapter_1 = __webpack_require__(223);
var event_manager_1 = __webpack_require__(230);
var DomEventsPlugin = function(_super) {
__extends(DomEventsPlugin, _super);
function DomEventsPlugin() {
_super.apply(this, arguments);
}
DomEventsPlugin.prototype.supports = function(eventName) {
return true;
};
DomEventsPlugin.prototype.addEventListener = function(element, eventName, handler) {
var zone = this.manager.getZone();
var outsideHandler = function(event) {
return zone.runGuarded(function() {
return handler(event);
});
};
return this.manager.getZone().runOutsideAngular(function() {
return dom_adapter_1.getDOM().onAndCancel(element, eventName, outsideHandler);
});
};
DomEventsPlugin.prototype.addGlobalEventListener = function(target, eventName, handler) {
var element = dom_adapter_1.getDOM().getGlobalEventTarget(target);
var zone = this.manager.getZone();
var outsideHandler = function(event) {
return zone.runGuarded(function() {
return handler(event);
});
};
return this.manager.getZone().runOutsideAngular(function() {
return dom_adapter_1.getDOM().onAndCancel(element, eventName, outsideHandler);
});
};
DomEventsPlugin.decorators = [ {
type: core_1.Injectable
} ];
return DomEventsPlugin;
}(event_manager_1.EventManagerPlugin);
exports.DomEventsPlugin = DomEventsPlugin;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(219);
var exceptions_1 = __webpack_require__(225);
var hammer_common_1 = __webpack_require__(449);
exports.HAMMER_GESTURE_CONFIG = new core_1.OpaqueToken("HammerGestureConfig");
var HammerGestureConfig = function() {
function HammerGestureConfig() {
this.events = [];
this.overrides = {};
}
HammerGestureConfig.prototype.buildHammer = function(element) {
var mc = new Hammer(element);
mc.get("pinch").set({
enable: true
});
mc.get("rotate").set({
enable: true
});
for (var eventName in this.overrides) {
mc.get(eventName).set(this.overrides[eventName]);
}
return mc;
};
HammerGestureConfig.decorators = [ {
type: core_1.Injectable
} ];
return HammerGestureConfig;
}();
exports.HammerGestureConfig = HammerGestureConfig;
var HammerGesturesPlugin = function(_super) {
__extends(HammerGesturesPlugin, _super);
function HammerGesturesPlugin(_config) {
_super.call(this);
this._config = _config;
}
HammerGesturesPlugin.prototype.supports = function(eventName) {
if (!_super.prototype.supports.call(this, eventName) && !this.isCustomEvent(eventName)) return false;
if (!lang_1.isPresent(window["Hammer"])) {
throw new exceptions_1.BaseException("Hammer.js is not loaded, can not bind " + eventName + " event");
}
return true;
};
HammerGesturesPlugin.prototype.addEventListener = function(element, eventName, handler) {
var _this = this;
var zone = this.manager.getZone();
eventName = eventName.toLowerCase();
return zone.runOutsideAngular(function() {
var mc = _this._config.buildHammer(element);
var callback = function(eventObj) {
zone.runGuarded(function() {
handler(eventObj);
});
};
mc.on(eventName, callback);
return function() {
mc.off(eventName, callback);
};
});
};
HammerGesturesPlugin.prototype.isCustomEvent = function(eventName) {
return this._config.events.indexOf(eventName) > -1;
};
HammerGesturesPlugin.decorators = [ {
type: core_1.Injectable
} ];
HammerGesturesPlugin.ctorParameters = [ {
type: HammerGestureConfig,
decorators: [ {
type: core_1.Inject,
args: [ exports.HAMMER_GESTURE_CONFIG ]
} ]
} ];
return HammerGesturesPlugin;
}(hammer_common_1.HammerGesturesPluginCommon);
exports.HammerGesturesPlugin = HammerGesturesPlugin;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var event_manager_1 = __webpack_require__(230);
var collection_1 = __webpack_require__(221);
var _eventNames = {
pan: true,
panstart: true,
panmove: true,
panend: true,
pancancel: true,
panleft: true,
panright: true,
panup: true,
pandown: true,
pinch: true,
pinchstart: true,
pinchmove: true,
pinchend: true,
pinchcancel: true,
pinchin: true,
pinchout: true,
press: true,
pressup: true,
rotate: true,
rotatestart: true,
rotatemove: true,
rotateend: true,
rotatecancel: true,
swipe: true,
swipeleft: true,
swiperight: true,
swipeup: true,
swipedown: true,
tap: true
};
var HammerGesturesPluginCommon = function(_super) {
__extends(HammerGesturesPluginCommon, _super);
function HammerGesturesPluginCommon() {
_super.call(this);
}
HammerGesturesPluginCommon.prototype.supports = function(eventName) {
eventName = eventName.toLowerCase();
return collection_1.StringMapWrapper.contains(_eventNames, eventName);
};
return HammerGesturesPluginCommon;
}(event_manager_1.EventManagerPlugin);
exports.HammerGesturesPluginCommon = HammerGesturesPluginCommon;
}, function(module, exports, __webpack_require__) {
"use strict";
var dom_adapter_1 = __webpack_require__(223);
var Title = function() {
function Title() {}
Title.prototype.getTitle = function() {
return dom_adapter_1.getDOM().getTitle();
};
Title.prototype.setTitle = function(newTitle) {
dom_adapter_1.getDOM().setTitle(newTitle);
};
return Title;
}();
exports.Title = Title;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(219);
var common_tools_1 = __webpack_require__(452);
var context = lang_1.global;
function enableDebugTools(ref) {
context.ng = new common_tools_1.AngularTools(ref);
}
exports.enableDebugTools = enableDebugTools;
function disableDebugTools() {
delete context.ng;
}
exports.disableDebugTools = disableDebugTools;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(219);
var browser_1 = __webpack_require__(453);
var dom_adapter_1 = __webpack_require__(223);
var ChangeDetectionPerfRecord = function() {
function ChangeDetectionPerfRecord(msPerTick, numTicks) {
this.msPerTick = msPerTick;
this.numTicks = numTicks;
}
return ChangeDetectionPerfRecord;
}();
exports.ChangeDetectionPerfRecord = ChangeDetectionPerfRecord;
var AngularTools = function() {
function AngularTools(ref) {
this.profiler = new AngularProfiler(ref);
}
return AngularTools;
}();
exports.AngularTools = AngularTools;
var AngularProfiler = function() {
function AngularProfiler(ref) {
this.appRef = ref.injector.get(core_1.ApplicationRef);
}
AngularProfiler.prototype.timeChangeDetection = function(config) {
var record = lang_1.isPresent(config) && config["record"];
var profileName = "Change Detection";
var isProfilerAvailable = lang_1.isPresent(browser_1.window.console.profile);
if (record && isProfilerAvailable) {
browser_1.window.console.profile(profileName);
}
var start = dom_adapter_1.getDOM().performanceNow();
var numTicks = 0;
while (numTicks < 5 || dom_adapter_1.getDOM().performanceNow() - start < 500) {
this.appRef.tick();
numTicks++;
}
var end = dom_adapter_1.getDOM().performanceNow();
if (record && isProfilerAvailable) {
browser_1.window.console.profileEnd(profileName);
}
var msPerTick = (end - start) / numTicks;
browser_1.window.console.log("ran " + numTicks + " change detection cycles");
browser_1.window.console.log(lang_1.NumberWrapper.toFixed(msPerTick, 2) + " ms per check");
return new ChangeDetectionPerfRecord(msPerTick, numTicks);
};
return AngularProfiler;
}();
exports.AngularProfiler = AngularProfiler;
}, function(module, exports) {
"use strict";
var win = typeof window !== "undefined" && window || {};
exports.window = win;
exports.document = win.document;
exports.location = win.location;
exports.gc = win["gc"] ? function() {
return win["gc"]();
} : function() {
return null;
};
exports.performance = win["performance"] ? win["performance"] : null;
exports.Event = win["Event"];
exports.MouseEvent = win["MouseEvent"];
exports.KeyboardEvent = win["KeyboardEvent"];
exports.EventTarget = win["EventTarget"];
exports.History = win["History"];
exports.Location = win["Location"];
exports.EventListener = win["EventListener"];
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(219);
var dom_adapter_1 = __webpack_require__(223);
var By = function() {
function By() {}
By.all = function() {
return function(debugElement) {
return true;
};
};
By.css = function(selector) {
return function(debugElement) {
return lang_1.isPresent(debugElement.nativeElement) ? dom_adapter_1.getDOM().elementMatches(debugElement.nativeElement, selector) : false;
};
};
By.directive = function(type) {
return function(debugElement) {
return debugElement.providerTokens.indexOf(type) !== -1;
};
};
return By;
}();
exports.By = By;
}, function(module, exports, __webpack_require__) {
"use strict";
var animation_builder = __webpack_require__(215);
var css_animation_builder = __webpack_require__(216);
var browser_details = __webpack_require__(224);
var css_animation_options = __webpack_require__(217);
var animation = __webpack_require__(218);
var dom_adapter = __webpack_require__(223);
var browser_adapter = __webpack_require__(442);
var __platform_browser_private__;
(function(__platform_browser_private__) {
__platform_browser_private__.DomAdapter = dom_adapter.DomAdapter;
function getDOM() {
return dom_adapter.getDOM();
}
__platform_browser_private__.getDOM = getDOM;
function setDOM(adapter) {
return dom_adapter.setDOM(adapter);
}
__platform_browser_private__.setDOM = setDOM;
__platform_browser_private__.setRootDomAdapter = dom_adapter.setRootDomAdapter;
__platform_browser_private__.BrowserDomAdapter = browser_adapter.BrowserDomAdapter;
__platform_browser_private__.AnimationBuilder = animation_builder.AnimationBuilder;
__platform_browser_private__.CssAnimationBuilder = css_animation_builder.CssAnimationBuilder;
__platform_browser_private__.CssAnimationOptions = css_animation_options.CssAnimationOptions;
__platform_browser_private__.Animation = animation.Animation;
__platform_browser_private__.BrowserDetails = browser_details.BrowserDetails;
})(__platform_browser_private__ = exports.__platform_browser_private__ || (exports.__platform_browser_private__ = {}));
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(219);
var browser_common_1 = __webpack_require__(374);
var ng_probe_1 = __webpack_require__(446);
exports.ELEMENT_PROBE_PROVIDERS = ng_probe_1.ELEMENT_PROBE_PROVIDERS;
var browser_platform_location_1 = __webpack_require__(457);
exports.BrowserPlatformLocation = browser_platform_location_1.BrowserPlatformLocation;
var browser_common_2 = __webpack_require__(374);
exports.BROWSER_PROVIDERS = browser_common_2.BROWSER_PROVIDERS;
exports.By = browser_common_2.By;
exports.Title = browser_common_2.Title;
exports.enableDebugTools = browser_common_2.enableDebugTools;
exports.disableDebugTools = browser_common_2.disableDebugTools;
exports.BROWSER_APP_STATIC_PROVIDERS = browser_common_1.BROWSER_APP_COMMON_PROVIDERS;
function browserStaticPlatform() {
if (lang_1.isBlank(core_1.getPlatform())) {
core_1.createPlatform(core_1.ReflectiveInjector.resolveAndCreate(browser_common_1.BROWSER_PROVIDERS));
}
return core_1.assertPlatform(browser_common_1.BROWSER_PLATFORM_MARKER);
}
exports.browserStaticPlatform = browserStaticPlatform;
function bootstrapStatic(appComponentType, customProviders, initReflector) {
if (lang_1.isPresent(initReflector)) {
initReflector();
}
var appProviders = lang_1.isPresent(customProviders) ? [ exports.BROWSER_APP_STATIC_PROVIDERS, customProviders ] : exports.BROWSER_APP_STATIC_PROVIDERS;
var appInjector = core_1.ReflectiveInjector.resolveAndCreate(appProviders, browserStaticPlatform().injector);
return core_1.coreLoadAndBootstrap(appInjector, appComponentType);
}
exports.bootstrapStatic = bootstrapStatic;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var common_1 = __webpack_require__(376);
var dom_adapter_1 = __webpack_require__(223);
var BrowserPlatformLocation = function(_super) {
__extends(BrowserPlatformLocation, _super);
function BrowserPlatformLocation() {
_super.call(this);
this._init();
}
BrowserPlatformLocation.prototype._init = function() {
this._location = dom_adapter_1.getDOM().getLocation();
this._history = dom_adapter_1.getDOM().getHistory();
};
Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
get: function() {
return this._location;
},
enumerable: true,
configurable: true
});
BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function() {
return dom_adapter_1.getDOM().getBaseHref();
};
BrowserPlatformLocation.prototype.onPopState = function(fn) {
dom_adapter_1.getDOM().getGlobalEventTarget("window").addEventListener("popstate", fn, false);
};
BrowserPlatformLocation.prototype.onHashChange = function(fn) {
dom_adapter_1.getDOM().getGlobalEventTarget("window").addEventListener("hashchange", fn, false);
};
Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
get: function() {
return this._location.pathname;
},
set: function(newPath) {
this._location.pathname = newPath;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
get: function() {
return this._location.search;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
get: function() {
return this._location.hash;
},
enumerable: true,
configurable: true
});
BrowserPlatformLocation.prototype.pushState = function(state, title, url) {
this._history.pushState(state, title, url);
};
BrowserPlatformLocation.prototype.replaceState = function(state, title, url) {
this._history.replaceState(state, title, url);
};
BrowserPlatformLocation.prototype.forward = function() {
this._history.forward();
};
BrowserPlatformLocation.prototype.back = function() {
this._history.back();
};
BrowserPlatformLocation.decorators = [ {
type: core_1.Injectable
} ];
BrowserPlatformLocation.ctorParameters = [];
return BrowserPlatformLocation;
}(common_1.PlatformLocation);
exports.BrowserPlatformLocation = BrowserPlatformLocation;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var base_wrapped_exception_1 = __webpack_require__(459);
var exception_handler_1 = __webpack_require__(460);
var exception_handler_2 = __webpack_require__(460);
exports.ExceptionHandler = exception_handler_2.ExceptionHandler;
var BaseException = function(_super) {
__extends(BaseException, _super);
function BaseException(message) {
if (message === void 0) {
message = "--";
}
_super.call(this, message);
this.message = message;
this.stack = new Error(message).stack;
}
BaseException.prototype.toString = function() {
return this.message;
};
return BaseException;
}(Error);
exports.BaseException = BaseException;
var WrappedException = function(_super) {
__extends(WrappedException, _super);
function WrappedException(_wrapperMessage, _originalException, _originalStack, _context) {
_super.call(this, _wrapperMessage);
this._wrapperMessage = _wrapperMessage;
this._originalException = _originalException;
this._originalStack = _originalStack;
this._context = _context;
this._wrapperStack = new Error(_wrapperMessage).stack;
}
Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
get: function() {
return this._wrapperMessage;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "wrapperStack", {
get: function() {
return this._wrapperStack;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "originalException", {
get: function() {
return this._originalException;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "originalStack", {
get: function() {
return this._originalStack;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "context", {
get: function() {
return this._context;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "message", {
get: function() {
return exception_handler_1.ExceptionHandler.exceptionToString(this);
},
enumerable: true,
configurable: true
});
WrappedException.prototype.toString = function() {
return this.message;
};
return WrappedException;
}(base_wrapped_exception_1.BaseWrappedException);
exports.WrappedException = WrappedException;
function makeTypeError(message) {
return new TypeError(message);
}
exports.makeTypeError = makeTypeError;
function unimplemented() {
throw new BaseException("unimplemented");
}
exports.unimplemented = unimplemented;
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BaseWrappedException = function(_super) {
__extends(BaseWrappedException, _super);
function BaseWrappedException(message) {
_super.call(this, message);
}
Object.defineProperty(BaseWrappedException.prototype, "wrapperMessage", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "wrapperStack", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "originalException", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "originalStack", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "context", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "message", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
return BaseWrappedException;
}(Error);
exports.BaseWrappedException = BaseWrappedException;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(370);
var base_wrapped_exception_1 = __webpack_require__(459);
var collection_1 = __webpack_require__(369);
var _ArrayLogger = function() {
function _ArrayLogger() {
this.res = [];
}
_ArrayLogger.prototype.log = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logError = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logGroup = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logGroupEnd = function() {};
return _ArrayLogger;
}();
var ExceptionHandler = function() {
function ExceptionHandler(_logger, _rethrowException) {
if (_rethrowException === void 0) {
_rethrowException = true;
}
this._logger = _logger;
this._rethrowException = _rethrowException;
}
ExceptionHandler.exceptionToString = function(exception, stackTrace, reason) {
if (stackTrace === void 0) {
stackTrace = null;
}
if (reason === void 0) {
reason = null;
}
var l = new _ArrayLogger();
var e = new ExceptionHandler(l, false);
e.call(exception, stackTrace, reason);
return l.res.join("\n");
};
ExceptionHandler.prototype.call = function(exception, stackTrace, reason) {
if (stackTrace === void 0) {
stackTrace = null;
}
if (reason === void 0) {
reason = null;
}
var originalException = this._findOriginalException(exception);
var originalStack = this._findOriginalStack(exception);
var context = this._findContext(exception);
this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
this._logger.logError("STACKTRACE:");
this._logger.logError(this._longStackTrace(stackTrace));
}
if (lang_1.isPresent(reason)) {
this._logger.logError("REASON: " + reason);
}
if (lang_1.isPresent(originalException)) {
this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
}
if (lang_1.isPresent(originalStack)) {
this._logger.logError("ORIGINAL STACKTRACE:");
this._logger.logError(this._longStackTrace(originalStack));
}
if (lang_1.isPresent(context)) {
this._logger.logError("ERROR CONTEXT:");
this._logger.logError(context);
}
this._logger.logGroupEnd();
if (this._rethrowException) throw exception;
};
ExceptionHandler.prototype._extractMessage = function(exception) {
return exception instanceof base_wrapped_exception_1.BaseWrappedException ? exception.wrapperMessage : exception.toString();
};
ExceptionHandler.prototype._longStackTrace = function(stackTrace) {
return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join("\n\n-----async gap-----\n") : stackTrace.toString();
};
ExceptionHandler.prototype._findContext = function(exception) {
try {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
return lang_1.isPresent(exception.context) ? exception.context : this._findContext(exception.originalException);
} catch (e) {
return null;
}
};
ExceptionHandler.prototype._findOriginalException = function(exception) {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
var e = exception.originalException;
while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
e = e.originalException;
}
return e;
};
ExceptionHandler.prototype._findOriginalStack = function(exception) {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
var e = exception;
var stack = exception.originalStack;
while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
e = e.originalException;
if (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
stack = e.originalStack;
}
}
return stack;
};
return ExceptionHandler;
}();
exports.ExceptionHandler = ExceptionHandler;
}, function(module, exports, __webpack_require__) {
"use strict";
var compiler_1 = __webpack_require__(277);
exports.SelectorMatcher = compiler_1.__compiler_private__.SelectorMatcher;
exports.CssSelector = compiler_1.__compiler_private__.CssSelector;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var file_system_1 = __webpack_require__(19);
var xhr_1 = __webpack_require__(329);
var FileSystemXHR = function(_super) {
__extends(FileSystemXHR, _super);
function FileSystemXHR() {
_super.apply(this, arguments);
}
FileSystemXHR.prototype.get = function(url) {
var appDir = file_system_1.knownFolders.currentApp().path;
var templatePath = file_system_1.path.join(appDir, url);
if (!file_system_1.File.exists(templatePath)) {
throw new Error("File " + url + " does not exist.");
}
var templateFile = file_system_1.File.fromPath(templatePath);
return templateFile.readText();
};
return FileSystemXHR;
}(xhr_1.XHR);
exports.FileSystemXHR = FileSystemXHR;
}, function(module, exports, __webpack_require__) {
"use strict";
var list_view_comp_1 = __webpack_require__(464);
var text_value_accessor_1 = __webpack_require__(465);
var checked_value_accessor_1 = __webpack_require__(467);
var date_value_accessor_1 = __webpack_require__(468);
var time_value_accessor_1 = __webpack_require__(469);
var number_value_accessor_1 = __webpack_require__(470);
var selectedIndex_value_accessor_1 = __webpack_require__(471);
var tab_view_1 = __webpack_require__(472);
var action_bar_1 = __webpack_require__(473);
var platform_filters_1 = __webpack_require__(474);
exports.NS_DIRECTIVES = [ list_view_comp_1.ListViewComponent, tab_view_1.TabViewDirective, tab_view_1.TabViewItemDirective, text_value_accessor_1.TextValueAccessor, checked_value_accessor_1.CheckedValueAccessor, date_value_accessor_1.DateValueAccessor, time_value_accessor_1.TimeValueAccessor, selectedIndex_value_accessor_1.SelectedIndexValueAccessor, number_value_accessor_1.NumberValueAccessor, action_bar_1.ActionBarComponent, action_bar_1.ActionBarScope, action_bar_1.ActionItemDirective, action_bar_1.NavigationButtonDirective, platform_filters_1.AndroidFilterComponent, platform_filters_1.IosFilterComponent ];
var list_view_comp_2 = __webpack_require__(464);
exports.ListViewComponent = list_view_comp_2.ListViewComponent;
var text_value_accessor_2 = __webpack_require__(465);
exports.TextValueAccessor = text_value_accessor_2.TextValueAccessor;
var checked_value_accessor_2 = __webpack_require__(467);
exports.CheckedValueAccessor = checked_value_accessor_2.CheckedValueAccessor;
var date_value_accessor_2 = __webpack_require__(468);
exports.DateValueAccessor = date_value_accessor_2.DateValueAccessor;
var time_value_accessor_2 = __webpack_require__(469);
exports.TimeValueAccessor = time_value_accessor_2.TimeValueAccessor;
var number_value_accessor_2 = __webpack_require__(470);
exports.NumberValueAccessor = number_value_accessor_2.NumberValueAccessor;
var selectedIndex_value_accessor_2 = __webpack_require__(471);
exports.SelectedIndexValueAccessor = selectedIndex_value_accessor_2.SelectedIndexValueAccessor;
var tab_view_2 = __webpack_require__(472);
exports.TabViewDirective = tab_view_2.TabViewDirective;
exports.TabViewItemDirective = tab_view_2.TabViewItemDirective;
var action_bar_2 = __webpack_require__(473);
exports.ActionBarComponent = action_bar_2.ActionBarComponent;
exports.ActionBarScope = action_bar_2.ActionBarScope;
exports.ActionItemDirective = action_bar_2.ActionItemDirective;
exports.NavigationButtonDirective = action_bar_2.NavigationButtonDirective;
var platform_filters_2 = __webpack_require__(474);
exports.AndroidFilterComponent = platform_filters_2.AndroidFilterComponent;
exports.IosFilterComponent = platform_filters_2.IosFilterComponent;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(118);
var collection_1 = __webpack_require__(134);
var observable_array_1 = __webpack_require__(62);
var layout_base_1 = __webpack_require__(79);
var NG_VIEW = "_ngViewRef";
var ListItemContext = function() {
function ListItemContext($implicit, item, index, even, odd) {
this.$implicit = $implicit;
this.item = item;
this.index = index;
this.even = even;
this.odd = odd;
}
return ListItemContext;
}();
exports.ListItemContext = ListItemContext;
var ListViewComponent = function() {
function ListViewComponent(_elementRef, _iterableDiffers, _cdr) {
this._elementRef = _elementRef;
this._iterableDiffers = _iterableDiffers;
this._cdr = _cdr;
this.setupItemView = new core_1.EventEmitter();
this.doCheckDelay = 5;
this.listView = _elementRef.nativeElement;
}
Object.defineProperty(ListViewComponent.prototype, "items", {
set: function(value) {
this._items = value;
var needDiffer = true;
if (value instanceof observable_array_1.ObservableArray) {
needDiffer = false;
}
if (needDiffer && !this._differ && collection_1.isListLikeIterable(value)) {
this._differ = this._iterableDiffers.find(this._items).create(this._cdr, function(index, item) {
return item;
});
}
this.listView.items = this._items;
},
enumerable: true,
configurable: true
});
ListViewComponent.prototype.onItemLoading = function(args) {
if (!this.itemTemplate) {
return;
}
var index = args.index;
var items = args.object.items;
var currentItem = typeof items.getItem === "function" ? items.getItem(index) : items[index];
var viewRef;
if (args.view) {
console.log("ListView.onItemLoading: " + index + " - Reusing exisiting view");
viewRef = args.view[NG_VIEW];
} else {
console.log("ListView.onItemLoading: " + index + " - Creating view from template");
viewRef = this.loader.createEmbeddedView(this.itemTemplate, new ListItemContext(), 0);
args.view = getSingleViewFromViewRef(viewRef);
args.view[NG_VIEW] = viewRef;
}
this.setupViewRef(viewRef, currentItem, index);
};
ListViewComponent.prototype.setupViewRef = function(viewRef, data, index) {
var context = viewRef.context;
context.$implicit = data;
context.item = data;
context.index = index;
context.even = index % 2 == 0;
context.odd = !context.even;
this.setupItemView.next({
view: viewRef,
data: data,
index: index,
context: context
});
};
ListViewComponent.prototype.ngDoCheck = function() {
var _this = this;
if (this.timerId) {
clearTimeout(this.timerId);
}
this.timerId = setTimeout(function() {
clearTimeout(_this.timerId);
if (_this._differ) {
var changes = _this._differ.diff(_this._items);
if (changes) {
_this.listView.refresh();
}
}
}, this.doCheckDelay);
};
__decorate([ core_1.ViewChild("loader", {
read: core_1.ViewContainerRef
}), __metadata("design:type", core_1.ViewContainerRef) ], ListViewComponent.prototype, "loader", void 0);
__decorate([ core_1.Output(), __metadata("design:type", core_1.EventEmitter) ], ListViewComponent.prototype, "setupItemView", void 0);
__decorate([ core_1.ContentChild(core_1.TemplateRef), __metadata("design:type", core_1.TemplateRef) ], ListViewComponent.prototype, "itemTemplate", void 0);
__decorate([ core_1.HostListener("itemLoading", [ "$event" ]), __metadata("design:type", Function), __metadata("design:paramtypes", [ Object ]), __metadata("design:returntype", void 0) ], ListViewComponent.prototype, "onItemLoading", null);
ListViewComponent = __decorate([ core_1.Component({
selector: "ListView",
template: "\n        <DetachedContainer>\n            <Placeholder #loader></Placeholder>\n        </DetachedContainer>",
inputs: [ "items" ]
}), __metadata("design:paramtypes", [ core_1.ElementRef, core_1.IterableDiffers, core_1.ChangeDetectorRef ]) ], ListViewComponent);
return ListViewComponent;
}();
exports.ListViewComponent = ListViewComponent;
function getSingleViewFromViewRef(viewRef) {
var getSingleViewRecursive = function(nodes, nestLevel) {
var actualNodes = nodes.filter(function(n) {
return !!n && n.nodeName !== "#text";
});
if (actualNodes.length === 0) {
throw new Error("No suitable views found in list template! Nesting level: " + nestLevel);
} else if (actualNodes.length > 1) {
throw new Error("More than one view found in list template! Nesting level: " + nestLevel);
} else {
if (actualNodes[0]) {
var parentLayout = actualNodes[0].parent;
if (parentLayout instanceof layout_base_1.LayoutBase) {
parentLayout.removeChild(actualNodes[0]);
}
return actualNodes[0];
} else {
return getSingleViewRecursive(actualNodes[0].children, nestLevel + 1);
}
}
};
return getSingleViewRecursive(viewRef.rootNodes, 0);
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(118);
var control_value_accessor_1 = __webpack_require__(414);
var lang_1 = __webpack_require__(117);
var base_value_accessor_1 = __webpack_require__(466);
var TEXT_VALUE_ACCESSOR = core_1.provide(control_value_accessor_1.NG_VALUE_ACCESSOR, {
useExisting: core_1.forwardRef(function() {
return TextValueAccessor;
}),
multi: true
});
var TextValueAccessor = function(_super) {
__extends(TextValueAccessor, _super);
function TextValueAccessor(elementRef) {
_super.call(this, elementRef.nativeElement);
this.onTouched = function() {};
}
TextValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = lang_1.isBlank(value) ? "" : value.toString();
this.view.text = normalizedValue;
};
TextValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
TextValueAccessor = __decorate([ core_1.Directive({
selector: "TextField[ngModel], TextView[ngModel], SearchBar[ngModel]",
host: {
"(textChange)": "onChange($event.value)"
},
bindings: [ TEXT_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], TextValueAccessor);
return TextValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
exports.TextValueAccessor = TextValueAccessor;
}, function(module, exports) {
"use strict";
var BaseValueAccessor = function() {
function BaseValueAccessor(view) {
this.view = view;
this.onChange = function(_) {};
this.pendingChangeNotification = 0;
}
BaseValueAccessor.prototype.registerOnChange = function(fn) {
var _this = this;
this.onChange = function(arg) {
if (_this.pendingChangeNotification) {
clearTimeout(_this.pendingChangeNotification);
}
_this.pendingChangeNotification = setTimeout(function() {
_this.pendingChangeNotification = 0;
fn(arg);
}, 20);
};
};
BaseValueAccessor.prototype.writeValue = function(value) {};
BaseValueAccessor.prototype.registerOnTouched = function(fn) {};
return BaseValueAccessor;
}();
exports.BaseValueAccessor = BaseValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(118);
var control_value_accessor_1 = __webpack_require__(414);
var lang_1 = __webpack_require__(117);
var base_value_accessor_1 = __webpack_require__(466);
var CHECKED_VALUE_ACCESSOR = core_1.provide(control_value_accessor_1.NG_VALUE_ACCESSOR, {
useExisting: core_1.forwardRef(function() {
return CheckedValueAccessor;
}),
multi: true
});
var CheckedValueAccessor = function(_super) {
__extends(CheckedValueAccessor, _super);
function CheckedValueAccessor(elementRef) {
_super.call(this, elementRef.nativeElement);
this.onTouched = function() {};
}
CheckedValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = false;
if (!lang_1.isBlank(value)) {
if (typeof value === "string") {
normalizedValue = value.toLowerCase() === "true" ? true : false;
} else {
normalizedValue = !!value;
}
}
this.view.checked = normalizedValue;
};
CheckedValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
CheckedValueAccessor = __decorate([ core_1.Directive({
selector: "Switch[ngModel]",
host: {
"(checkedChange)": "onChange($event.value)"
},
bindings: [ CHECKED_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], CheckedValueAccessor);
return CheckedValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
exports.CheckedValueAccessor = CheckedValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(118);
var control_value_accessor_1 = __webpack_require__(414);
var lang_1 = __webpack_require__(117);
var base_value_accessor_1 = __webpack_require__(466);
var DATE_VALUE_ACCESSOR = core_1.provide(control_value_accessor_1.NG_VALUE_ACCESSOR, {
useExisting: core_1.forwardRef(function() {
return DateValueAccessor;
}),
multi: true
});
var DateValueAccessor = function(_super) {
__extends(DateValueAccessor, _super);
function DateValueAccessor(elementRef) {
_super.call(this, elementRef.nativeElement);
this.onTouched = function() {};
}
DateValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = lang_1.isBlank(value) ? new Date() : value;
if (!lang_1.isDate(normalizedValue)) {
if (typeof normalizedValue === "string" || typeof normalizedValue === "number") {
normalizedValue = new Date(normalizedValue);
}
if (!lang_1.isDate(normalizedValue)) {
normalizedValue = new Date();
}
}
this.view.date = normalizedValue;
};
DateValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
DateValueAccessor = __decorate([ core_1.Directive({
selector: "DatePicker[ngModel]",
host: {
"(dateChange)": "onChange($event.value)"
},
bindings: [ DATE_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], DateValueAccessor);
return DateValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
exports.DateValueAccessor = DateValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(118);
var control_value_accessor_1 = __webpack_require__(414);
var lang_1 = __webpack_require__(117);
var base_value_accessor_1 = __webpack_require__(466);
var TIME_VALUE_ACCESSOR = core_1.provide(control_value_accessor_1.NG_VALUE_ACCESSOR, {
useExisting: core_1.forwardRef(function() {
return TimeValueAccessor;
}),
multi: true
});
var TimeValueAccessor = function(_super) {
__extends(TimeValueAccessor, _super);
function TimeValueAccessor(elementRef) {
_super.call(this, elementRef.nativeElement);
this.onTouched = function() {};
}
TimeValueAccessor.prototype.writeValue = function(value) {
var normalizedValue = lang_1.isBlank(value) ? new Date() : value;
if (!lang_1.isDate(normalizedValue)) {
if (typeof normalizedValue === "string" || typeof normalizedValue === "number") {
normalizedValue = new Date(normalizedValue);
}
if (!lang_1.isDate(normalizedValue)) {
normalizedValue = new Date();
}
}
this.view.time = normalizedValue;
};
TimeValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
TimeValueAccessor = __decorate([ core_1.Directive({
selector: "TimePicker[ngModel]",
host: {
"(timeChange)": "onChange($event.value)"
},
bindings: [ TIME_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], TimeValueAccessor);
return TimeValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
exports.TimeValueAccessor = TimeValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(118);
var control_value_accessor_1 = __webpack_require__(414);
var lang_1 = __webpack_require__(117);
var base_value_accessor_1 = __webpack_require__(466);
var NUMBER_VALUE_ACCESSOR = core_1.provide(control_value_accessor_1.NG_VALUE_ACCESSOR, {
useExisting: core_1.forwardRef(function() {
return NumberValueAccessor;
}),
multi: true
});
var NumberValueAccessor = function(_super) {
__extends(NumberValueAccessor, _super);
function NumberValueAccessor(elementRef) {
_super.call(this, elementRef.nativeElement);
this.onTouched = function() {};
}
NumberValueAccessor.prototype.writeValue = function(value) {
var normalizedValue;
if (lang_1.isBlank(value)) {
normalizedValue = 0;
} else {
if (lang_1.isNumber(value)) {
normalizedValue = value;
} else {
var parsedValue = Number(value);
normalizedValue = isNaN(parsedValue) ? 0 : parsedValue;
}
}
this.view.value = normalizedValue;
};
NumberValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
NumberValueAccessor = __decorate([ core_1.Directive({
selector: "Slider[ngModel]",
host: {
"(valueChange)": "onChange($event.value)"
},
bindings: [ NUMBER_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], NumberValueAccessor);
return NumberValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
exports.NumberValueAccessor = NumberValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(118);
var control_value_accessor_1 = __webpack_require__(414);
var lang_1 = __webpack_require__(117);
var base_value_accessor_1 = __webpack_require__(466);
var SELECTED_INDEX_VALUE_ACCESSOR = core_1.provide(control_value_accessor_1.NG_VALUE_ACCESSOR, {
useExisting: core_1.forwardRef(function() {
return SelectedIndexValueAccessor;
}),
multi: true
});
var SelectedIndexValueAccessor = function(_super) {
__extends(SelectedIndexValueAccessor, _super);
function SelectedIndexValueAccessor(elementRef) {
_super.call(this, elementRef.nativeElement);
this.onTouched = function() {};
}
SelectedIndexValueAccessor.prototype.writeValue = function(value) {
var normalizedValue;
if (lang_1.isBlank(value)) {
normalizedValue = 0;
} else {
if (lang_1.isNumber(value)) {
normalizedValue = value;
} else {
var parsedValue = parseInt(value);
normalizedValue = isNaN(parsedValue) ? 0 : parsedValue;
}
}
this._normalizedValue = Math.round(normalizedValue);
if (this.viewInitialized) {
this.view.selectedIndex = this._normalizedValue;
}
};
SelectedIndexValueAccessor.prototype.ngAfterViewInit = function() {
this.viewInitialized = true;
this.view.selectedIndex = this._normalizedValue;
};
SelectedIndexValueAccessor.prototype.registerOnTouched = function(fn) {
this.onTouched = fn;
};
SelectedIndexValueAccessor = __decorate([ core_1.Directive({
selector: "SegmentedBar[ngModel], ListPicker[ngModel], TabView[ngModel]",
host: {
"(selectedIndexChange)": "onChange($event.value)"
},
bindings: [ SELECTED_INDEX_VALUE_ACCESSOR ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], SelectedIndexValueAccessor);
return SelectedIndexValueAccessor;
}(base_value_accessor_1.BaseValueAccessor);
exports.SelectedIndexValueAccessor = SelectedIndexValueAccessor;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(118);
var tab_view_1 = __webpack_require__(264);
var TabViewDirective = function() {
function TabViewDirective(element) {
this.element = element;
this.tabView = element.nativeElement;
}
Object.defineProperty(TabViewDirective.prototype, "selectedIndex", {
get: function() {
return this._selectedIndex;
},
set: function(value) {
this._selectedIndex = value;
if (this.viewInitialized) {
this.tabView.selectedIndex = this._selectedIndex;
}
},
enumerable: true,
configurable: true
});
TabViewDirective.prototype.ngAfterViewInit = function() {
this.viewInitialized = true;
this.tabView.selectedIndex = this._selectedIndex;
};
TabViewDirective = __decorate([ core_1.Directive({
selector: "TabView",
inputs: [ "selectedIndex" ]
}), __metadata("design:paramtypes", [ core_1.ElementRef ]) ], TabViewDirective);
return TabViewDirective;
}();
exports.TabViewDirective = TabViewDirective;
var TabViewItemDirective = function() {
function TabViewItemDirective(owner, templateRef, viewContainer) {
this.owner = owner;
this.templateRef = templateRef;
this.viewContainer = viewContainer;
}
TabViewItemDirective.prototype.ngOnInit = function() {
this.item = new tab_view_1.TabViewItem();
this.item.title = this.config.title;
var viewRef = this.viewContainer.createEmbeddedView(this.templateRef);
var realViews = viewRef.rootNodes.filter(function(node) {
return node.nodeName && node.nodeName !== "#text";
});
if (realViews.length > 0) {
this.item.view = realViews[0];
var newItems = (this.owner.tabView.items || []).concat([ this.item ]);
this.owner.tabView.items = newItems;
}
};
__decorate([ core_1.Input("tabItem"), __metadata("design:type", Object) ], TabViewItemDirective.prototype, "config", void 0);
TabViewItemDirective = __decorate([ core_1.Directive({
selector: "[tabItem]"
}), __metadata("design:paramtypes", [ TabViewDirective, core_1.TemplateRef, core_1.ViewContainerRef ]) ], TabViewItemDirective);
return TabViewItemDirective;
}();
exports.TabViewItemDirective = TabViewItemDirective;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var core_1 = __webpack_require__(118);
var action_bar_1 = __webpack_require__(75);
var lang_1 = __webpack_require__(117);
var page_1 = __webpack_require__(72);
var view_1 = __webpack_require__(12);
var element_registry_1 = __webpack_require__(234);
var actionBarMeta = {
skipAddToDom: true,
insertChild: function(parent, child, atIndex) {
var bar = parent;
var childView = child;
if (child instanceof action_bar_1.NavigationButton) {
bar.navigationButton = childView;
childView.parent = bar;
} else if (child instanceof action_bar_1.ActionItem) {
bar.actionItems.addItem(childView);
childView.parent = bar;
} else if (child.nodeName === "template") {
child.templateParent = parent;
} else if (child.nodeName !== "#text" && child instanceof view_1.View) {
bar.titleView = childView;
}
},
removeChild: function(parent, child) {
var bar = parent;
var childView = child;
if (child instanceof action_bar_1.NavigationButton) {
if (bar.navigationButton === childView) {
bar.navigationButton = null;
}
childView.parent = null;
} else if (child instanceof action_bar_1.ActionItem) {
bar.actionItems.removeItem(childView);
childView.parent = null;
} else if (child.nodeName !== "template" && child instanceof view_1.View && bar.titleView && bar.titleView === childView) {
bar.titleView = null;
}
}
};
element_registry_1.registerElement("ActionBar", function() {
return __webpack_require__(75).ActionBar;
}, actionBarMeta);
element_registry_1.registerElement("ActionItem", function() {
return __webpack_require__(75).ActionItem;
});
element_registry_1.registerElement("NavigationButton", function() {
return __webpack_require__(75).NavigationButton;
});
var ActionBarComponent = function() {
function ActionBarComponent(element, page) {
this.element = element;
this.page = page;
if (lang_1.isBlank(this.page.actionBarHidden)) {
this.page.actionBarHidden = false;
}
this.page.actionBar = this.element.nativeElement;
this.page.actionBar.update();
}
ActionBarComponent = __decorate([ core_1.Component({
selector: "ActionBar",
template: "<ng-content></ng-content>"
}), __metadata("design:paramtypes", [ core_1.ElementRef, page_1.Page ]) ], ActionBarComponent);
return ActionBarComponent;
}();
exports.ActionBarComponent = ActionBarComponent;
var ActionBarScope = function() {
function ActionBarScope(page) {
this.page = page;
}
ActionBarScope.prototype.onNavButtonInit = function(navBtn) {
this.page.actionBar.navigationButton = navBtn.element.nativeElement;
};
ActionBarScope.prototype.onNavButtonDestroy = function(navBtn) {
var nav = navBtn.element.nativeElement;
if (nav && this.page.actionBar.navigationButton === nav) {
this.page.actionBar.navigationButton = null;
}
};
ActionBarScope.prototype.onActionInit = function(item) {
this.page.actionBar.actionItems.addItem(item.element.nativeElement);
};
ActionBarScope.prototype.onActionDestroy = function(item) {
this.page.actionBar.actionItems.removeItem(item.element.nativeElement);
};
ActionBarScope = __decorate([ core_1.Component({
selector: "ActionBarExtension",
template: ""
}), __metadata("design:paramtypes", [ page_1.Page ]) ], ActionBarScope);
return ActionBarScope;
}();
exports.ActionBarScope = ActionBarScope;
var ActionItemDirective = function() {
function ActionItemDirective(element, ownerScope) {
this.element = element;
this.ownerScope = ownerScope;
if (this.ownerScope) {
this.ownerScope.onActionInit(this);
}
}
ActionItemDirective.prototype.ngOnDestroy = function() {
if (this.ownerScope) {
this.ownerScope.onActionDestroy(this);
}
};
ActionItemDirective = __decorate([ core_1.Directive({
selector: "ActionItem"
}), __param(1, core_1.Optional()), __metadata("design:paramtypes", [ core_1.ElementRef, ActionBarScope ]) ], ActionItemDirective);
return ActionItemDirective;
}();
exports.ActionItemDirective = ActionItemDirective;
var NavigationButtonDirective = function() {
function NavigationButtonDirective(element, ownerScope) {
this.element = element;
this.ownerScope = ownerScope;
if (this.ownerScope) {
this.ownerScope.onNavButtonInit(this);
}
}
NavigationButtonDirective.prototype.ngOnDestroy = function() {
if (this.ownerScope) {
this.ownerScope.onNavButtonDestroy(this);
}
};
NavigationButtonDirective = __decorate([ core_1.Directive({
selector: "NavigationButton"
}), __param(1, core_1.Optional()), __metadata("design:paramtypes", [ core_1.ElementRef, ActionBarScope ]) ], NavigationButtonDirective);
return NavigationButtonDirective;
}();
exports.NavigationButtonDirective = NavigationButtonDirective;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var core_1 = __webpack_require__(118);
var platform_1 = __webpack_require__(45);
var platform_providers_1 = __webpack_require__(213);
var AndroidFilterComponent = function() {
function AndroidFilterComponent(device) {
this.show = device.os === platform_1.platformNames.android;
}
AndroidFilterComponent = __decorate([ core_1.Component({
selector: "android",
template: '<ng-content *ngIf="show"></ng-content>'
}), __param(0, core_1.Inject(platform_providers_1.DEVICE)), __metadata("design:paramtypes", [ Object ]) ], AndroidFilterComponent);
return AndroidFilterComponent;
}();
exports.AndroidFilterComponent = AndroidFilterComponent;
var IosFilterComponent = function() {
function IosFilterComponent(device) {
this.show = device.os === platform_1.platformNames.ios;
}
IosFilterComponent = __decorate([ core_1.Component({
selector: "ios",
template: '<ng-content *ngIf="show"></ng-content>'
}), __param(0, core_1.Inject(platform_providers_1.DEVICE)), __metadata("design:paramtypes", [ Object ]) ], IosFilterComponent);
return IosFilterComponent;
}();
exports.IosFilterComponent = IosFilterComponent;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var common = __webpack_require__(476);
var localesCache = new Map();
function getNativeLocale(locale) {
if (localesCache.has(locale)) {
return localesCache.get(locale);
}
var result;
if (locale) {
locale = locale.replace(/_/g, "-");
var firstHypenIndex = locale.indexOf("-");
var lang = "";
var country = "";
if (firstHypenIndex > -1) {
lang = locale.substr(0, firstHypenIndex);
var nextHypenIndex = locale.substr(firstHypenIndex + 1).indexOf("-");
country = locale.substr(firstHypenIndex + 1, nextHypenIndex > -1 ? nextHypenIndex : undefined);
} else {
lang = locale;
}
if (country !== "") {
result = new java.util.Locale(lang, country);
} else {
result = new java.util.Locale(lang);
}
} else {
result = new java.util.Locale("en", "US");
}
localesCache.set(locale, result);
return result;
}
var DateTimeFormat = function(_super) {
__extends(DateTimeFormat, _super);
function DateTimeFormat() {
_super.apply(this, arguments);
}
DateTimeFormat.prototype.getNativePattern = function(patternDefinition, locale) {
var result = "";
var flag = 0;
var nativeLocale;
if (locale) {
nativeLocale = getNativeLocale(locale);
flag++;
}
if (patternDefinition.date) {
flag = flag + 2;
}
if (patternDefinition.time) {
flag = flag + 4;
}
var dateFormat;
switch (flag) {
case 0:
dateFormat = java.text.DateFormat.getDateTimeInstance();
break;

case 1:
dateFormat = java.text.DateFormat.getDateTimeInstance(0, 0, nativeLocale);
break;

case 2:
dateFormat = java.text.DateFormat.getDateInstance(patternDefinition.date === common.FULL ? 0 : 3);
break;

case 3:
dateFormat = java.text.DateFormat.getDateInstance(patternDefinition.date === common.FULL ? 0 : 3, nativeLocale);
break;

case 4:
dateFormat = java.text.DateFormat.getTimeInstance(1);
break;

case 5:
dateFormat = java.text.DateFormat.getTimeInstance(1, nativeLocale);
break;

case 6:
dateFormat = java.text.DateFormat.getDateTimeInstance(patternDefinition.date === common.FULL ? 0 : 3, 1);
break;

case 7:
dateFormat = java.text.DateFormat.getDateTimeInstance(patternDefinition.date === common.FULL ? 0 : 3, 1, nativeLocale);
break;

default:
break;
}
result = dateFormat.toPattern();
return result;
};
DateTimeFormat.prototype.formatNative = function(pattern, locale, date) {
var sdf = locale ? new java.text.SimpleDateFormat(pattern, getNativeLocale(locale)) : new java.text.SimpleDateFormat(pattern);
return sdf.format(date ? new java.util.Date(date.valueOf()) : new java.util.Date()).toString();
};
return DateTimeFormat;
}(common.DateTimeFormat);
exports.DateTimeFormat = DateTimeFormat;
var NumberFormat = function(_super) {
__extends(NumberFormat, _super);
function NumberFormat() {
_super.apply(this, arguments);
}
NumberFormat.prototype.formatNative = function(value, locale, options, pattern) {
var numberFormat;
if (pattern) {
numberFormat = new java.text.DecimalFormat(pattern);
} else {
if (options) {
switch (options.style.toLowerCase()) {
case "decimal":
numberFormat = java.text.NumberFormat.getNumberInstance(getNativeLocale(locale));
break;

case "percent":
numberFormat = java.text.NumberFormat.getPercentInstance(getNativeLocale(locale));
break;

case "currency":
numberFormat = java.text.NumberFormat.getCurrencyInstance(getNativeLocale(locale));
if (options.currency !== void 0) {
numberFormat.setCurrency(java.util.Currency.getInstance(options.currency));
}
break;

default:
numberFormat = java.text.NumberFormat.getNumberInstance(getNativeLocale(locale));
break;
}
} else {
numberFormat = java.text.NumberFormat.getNumberInstance(getNativeLocale(locale));
}
}
if (options && options.minimumIntegerDigits !== void 0) {
numberFormat.setMinimumIntegerDigits(options.minimumIntegerDigits);
}
if (options && options.minimumFractionDigits !== void 0) {
numberFormat.setMinimumFractionDigits(options.minimumFractionDigits);
}
if (options && options.maximumFractionDigits !== void 0) {
numberFormat.setMaximumFractionDigits(options.maximumFractionDigits);
}
if (options && options.useGrouping !== void 0) {
numberFormat.setGroupingUsed(options.useGrouping);
}
var decimalFormatSymbols = locale ? new java.text.DecimalFormatSymbols(getNativeLocale(locale)) : new java.text.DecimalFormatSymbols();
numberFormat.setDecimalFormatSymbols(decimalFormatSymbols);
if (options && (options.style.toLowerCase() === "currency" && options.currencyDisplay === "code")) {
if (!pattern) {
var currrentPattern = numberFormat.toPattern();
currrentPattern = currrentPattern.replace("¤", "¤¤");
numberFormat = new java.text.DecimalFormat(currrentPattern);
numberFormat.setDecimalFormatSymbols(decimalFormatSymbols);
}
if (options.currency !== void 0) {
decimalFormatSymbols.setCurrency(java.util.Currency.getInstance(options.currency));
}
}
return numberFormat.format(value);
};
return NumberFormat;
}(common.NumberFormat);
exports.NumberFormat = NumberFormat;
}, function(module, exports) {
"use strict";
exports.NUMERIC = "numeric";
exports.LONG = "long";
exports.SHORT = "short";
exports.TWODIGIT = "2-digit";
exports.FULL = "full";
var DateTimeFormat = function() {
function DateTimeFormat(locale, options, pattern) {
this.locale = locale;
this.options = options;
this.pattern = pattern;
this.dateTimeFormatElements = {
M: "month",
E: "weekday",
c: "weekday",
d: "day",
y: "year",
h: "hour",
H: "hour",
m: "minute",
s: "second",
z: "timeZoneName",
G: "era",
a: "hour12"
};
if (options && options.minute === exports.NUMERIC) {
this.options.minute = exports.TWODIGIT;
}
if (options && options.hour === exports.NUMERIC) {
this.options.hour = exports.TWODIGIT;
}
}
DateTimeFormat.prototype.hasTimeOptions = function(options) {
return options.hour !== undefined || options.minute !== undefined || options.second !== undefined;
};
DateTimeFormat.prototype.hasDateOptions = function(options) {
return options.weekday !== undefined || options.year !== undefined || options.month !== undefined || options.day !== undefined;
};
DateTimeFormat.prototype.useFullDatePattern = function(intlOptions) {
var i;
var propsArray = Object.keys(intlOptions);
var propsArrayLength = propsArray.length;
var result = false;
for (i = 0; i < propsArrayLength; i++) {
if (intlOptions[propsArray[i]] === exports.LONG || intlOptions[propsArray[i]] === exports.SHORT) {
result = true;
break;
}
}
return result;
};
DateTimeFormat.prototype.getNativePattern = function(patternDefinition, locale) {
return "";
};
DateTimeFormat.prototype.getCorrectPatternForLocale = function() {
var dateTimePatternOptions = {};
if (this.hasDateOptions(this.options)) {
if (this.useFullDatePattern(this.options)) {
dateTimePatternOptions.date = exports.FULL;
} else {
dateTimePatternOptions.date = exports.SHORT;
}
}
if (this.hasTimeOptions(this.options)) {
dateTimePatternOptions.time = exports.FULL;
}
var result = this.getNativePattern(dateTimePatternOptions, this.locale);
if (this.options.hour) {
if (result.indexOf("H") > -1) {
this.options.hour12 = false;
} else {
this.options.hour12 = true;
}
}
return result;
};
DateTimeFormat.prototype.getDateElementsFromPattern = function(pattern) {
var result = [];
var patternLength = pattern.length;
var i = 0;
var stringInsidePattern = false;
while (i < patternLength) {
if (pattern[i] === '"' || pattern[i] === "'") {
var p = i + 1;
while (p < patternLength && pattern[i] !== pattern[p]) {
p++;
}
for (var j = i; j < p + 1; j++) {
result.push({
isDateElement: false,
patternValue: pattern[j]
});
}
i = p + 1;
continue;
}
if (this.dateTimeFormatElements.hasOwnProperty(pattern[i])) {
var j = i;
while (i < patternLength && pattern[i] === pattern[j]) {
i++;
}
result.push({
isDateElement: true,
patternValue: pattern.substr(j, i - j),
intlOption: this.dateTimeFormatElements[pattern[j]]
});
} else {
result.push({
isDateElement: false,
patternValue: pattern[i]
});
i++;
}
}
return result;
};
DateTimeFormat.prototype.prepareDateElement = function(intlOption, dateElement) {
switch (intlOption) {
case exports.NUMERIC:
return dateElement;

case exports.TWODIGIT:
return dateElement.repeat(2);

case exports.SHORT:
return dateElement.repeat(3);

case exports.LONG:
return dateElement.repeat(4);

case true:
return dateElement;

case false:
return "";

default:
return dateElement;
}
};
DateTimeFormat.prototype.preparePattern = function(pattern, options) {
var patternOptions = this.getDateElementsFromPattern(pattern);
var patternOptionsLength = patternOptions.length;
for (var i_1 = 0; i_1 < patternOptionsLength; i_1++) {
if (patternOptions[i_1].isDateElement) {
var formatChar = patternOptions[i_1].patternValue[0];
var intlOptionValue = options[patternOptions[i_1].intlOption];
if (intlOptionValue !== undefined) {
var newPatternValue = this.prepareDateElement(intlOptionValue, formatChar);
patternOptions[i_1].patternValue = newPatternValue;
} else {
if (i_1 > 0) {
var j = i_1 - 1;
while (patternOptions[j] && patternOptions[j].isDateElement === false) {
if (patternOptions[j].patternValue !== " ") {
if (patternOptions[j].patternValue !== '"' && patternOptions[j].patternValue !== "'") {
patternOptions[j].patternValue = "";
}
break;
} else {
patternOptions[j].patternValue = "";
}
j--;
}
}
patternOptions[i_1].patternValue = "";
}
}
}
var result = [];
var i = 0;
while (patternOptions[i].patternValue === "" || patternOptions[i].isDateElement === false) {
i++;
}
for (i; i < patternOptionsLength; i++) {
result.push(patternOptions[i].patternValue);
}
return result.join("");
};
DateTimeFormat.prototype.formatNative = function(pattern, locale, date) {
return "";
};
Object.defineProperty(DateTimeFormat.prototype, "preparedPattern", {
get: function() {
if (!this._preparedPattern) {
if (this.pattern) {
this._preparedPattern = this.pattern;
} else {
this._preparedPattern = this.preparePattern(this.getCorrectPatternForLocale(), this.options);
}
}
return this._preparedPattern;
},
enumerable: true,
configurable: true
});
DateTimeFormat.prototype.format = function(date) {
return this.formatNative(this.preparedPattern, this.locale, date);
};
return DateTimeFormat;
}();
exports.DateTimeFormat = DateTimeFormat;
var NumberFormat = function() {
function NumberFormat(locale, options, pattern) {
this.locale = locale;
this.options = options;
this.pattern = pattern;
}
NumberFormat.prototype.formatNative = function(value, locale, options, pattern) {
return "";
};
NumberFormat.prototype.format = function(value) {
return this.formatNative(value, this.locale, this.options, this.pattern);
};
return NumberFormat;
}();
exports.NumberFormat = NumberFormat;
}, function(module, exports, __webpack_require__) {
global.__requireOverride = function() {
var map = {
"./_embedded_script_.js": function() {
return {};
},
"@angular/common": function() {
return __webpack_require__(376);
},
"@angular/common/": function() {
return __webpack_require__(376);
},
"@angular/common/index": function() {
return __webpack_require__(376);
},
"@angular/common/index.js": function() {
return __webpack_require__(376);
},
"@angular/common/src/common_directives": function() {
return __webpack_require__(432);
},
"@angular/common/src/common_directives.js": function() {
return __webpack_require__(432);
},
"@angular/common/src/directives": function() {
return __webpack_require__(398);
},
"@angular/common/src/directives.js": function() {
return __webpack_require__(398);
},
"@angular/common/src/directives/core_directives": function() {
return __webpack_require__(407);
},
"@angular/common/src/directives/core_directives.js": function() {
return __webpack_require__(407);
},
"@angular/common/src/directives/ng_class": function() {
return __webpack_require__(399);
},
"@angular/common/src/directives/ng_class.js": function() {
return __webpack_require__(399);
},
"@angular/common/src/directives/ng_for": function() {
return __webpack_require__(400);
},
"@angular/common/src/directives/ng_for.js": function() {
return __webpack_require__(400);
},
"@angular/common/src/directives/ng_if": function() {
return __webpack_require__(401);
},
"@angular/common/src/directives/ng_if.js": function() {
return __webpack_require__(401);
},
"@angular/common/src/directives/ng_plural": function() {
return __webpack_require__(405);
},
"@angular/common/src/directives/ng_plural.js": function() {
return __webpack_require__(405);
},
"@angular/common/src/directives/ng_style": function() {
return __webpack_require__(403);
},
"@angular/common/src/directives/ng_style.js": function() {
return __webpack_require__(403);
},
"@angular/common/src/directives/ng_switch": function() {
return __webpack_require__(404);
},
"@angular/common/src/directives/ng_switch.js": function() {
return __webpack_require__(404);
},
"@angular/common/src/directives/ng_template_outlet": function() {
return __webpack_require__(402);
},
"@angular/common/src/directives/ng_template_outlet.js": function() {
return __webpack_require__(402);
},
"@angular/common/src/directives/observable_list_diff": function() {
return __webpack_require__(406);
},
"@angular/common/src/directives/observable_list_diff.js": function() {
return __webpack_require__(406);
},
"@angular/common/src/facade/async": function() {
return __webpack_require__(380);
},
"@angular/common/src/facade/async.js": function() {
return __webpack_require__(380);
},
"@angular/common/src/facade/base_wrapped_exception": function() {
return __webpack_require__(384);
},
"@angular/common/src/facade/base_wrapped_exception.js": function() {
return __webpack_require__(384);
},
"@angular/common/src/facade/collection": function() {
return __webpack_require__(386);
},
"@angular/common/src/facade/collection.js": function() {
return __webpack_require__(386);
},
"@angular/common/src/facade/exception_handler": function() {
return __webpack_require__(385);
},
"@angular/common/src/facade/exception_handler.js": function() {
return __webpack_require__(385);
},
"@angular/common/src/facade/exceptions": function() {
return __webpack_require__(383);
},
"@angular/common/src/facade/exceptions.js": function() {
return __webpack_require__(383);
},
"@angular/common/src/facade/intl": function() {
return __webpack_require__(388);
},
"@angular/common/src/facade/intl.js": function() {
return __webpack_require__(388);
},
"@angular/common/src/facade/lang": function() {
return __webpack_require__(379);
},
"@angular/common/src/facade/lang.js": function() {
return __webpack_require__(379);
},
"@angular/common/src/facade/promise": function() {
return __webpack_require__(381);
},
"@angular/common/src/facade/promise.js": function() {
return __webpack_require__(381);
},
"@angular/common/src/forms": function() {
return __webpack_require__(408);
},
"@angular/common/src/forms.js": function() {
return __webpack_require__(408);
},
"@angular/common/src/forms/directives": function() {
return __webpack_require__(429);
},
"@angular/common/src/forms/directives.js": function() {
return __webpack_require__(429);
},
"@angular/common/src/forms/directives/abstract_control_directive": function() {
return __webpack_require__(410);
},
"@angular/common/src/forms/directives/abstract_control_directive.js": function() {
return __webpack_require__(410);
},
"@angular/common/src/forms/directives/checkbox_value_accessor": function() {
return __webpack_require__(419);
},
"@angular/common/src/forms/directives/checkbox_value_accessor.js": function() {
return __webpack_require__(419);
},
"@angular/common/src/forms/directives/control_container": function() {
return __webpack_require__(411);
},
"@angular/common/src/forms/directives/control_container.js": function() {
return __webpack_require__(411);
},
"@angular/common/src/forms/directives/control_value_accessor": function() {
return __webpack_require__(414);
},
"@angular/common/src/forms/directives/control_value_accessor.js": function() {
return __webpack_require__(414);
},
"@angular/common/src/forms/directives/default_value_accessor": function() {
return __webpack_require__(417);
},
"@angular/common/src/forms/directives/default_value_accessor.js": function() {
return __webpack_require__(417);
},
"@angular/common/src/forms/directives/ng_control": function() {
return __webpack_require__(413);
},
"@angular/common/src/forms/directives/ng_control.js": function() {
return __webpack_require__(413);
},
"@angular/common/src/forms/directives/ng_control_group": function() {
return __webpack_require__(425);
},
"@angular/common/src/forms/directives/ng_control_group.js": function() {
return __webpack_require__(425);
},
"@angular/common/src/forms/directives/ng_control_name": function() {
return __webpack_require__(412);
},
"@angular/common/src/forms/directives/ng_control_name.js": function() {
return __webpack_require__(412);
},
"@angular/common/src/forms/directives/ng_control_status": function() {
return __webpack_require__(428);
},
"@angular/common/src/forms/directives/ng_control_status.js": function() {
return __webpack_require__(428);
},
"@angular/common/src/forms/directives/ng_form": function() {
return __webpack_require__(427);
},
"@angular/common/src/forms/directives/ng_form.js": function() {
return __webpack_require__(427);
},
"@angular/common/src/forms/directives/ng_form_control": function() {
return __webpack_require__(423);
},
"@angular/common/src/forms/directives/ng_form_control.js": function() {
return __webpack_require__(423);
},
"@angular/common/src/forms/directives/ng_form_model": function() {
return __webpack_require__(426);
},
"@angular/common/src/forms/directives/ng_form_model.js": function() {
return __webpack_require__(426);
},
"@angular/common/src/forms/directives/ng_model": function() {
return __webpack_require__(424);
},
"@angular/common/src/forms/directives/ng_model.js": function() {
return __webpack_require__(424);
},
"@angular/common/src/forms/directives/normalize_validator": function() {
return __webpack_require__(422);
},
"@angular/common/src/forms/directives/normalize_validator.js": function() {
return __webpack_require__(422);
},
"@angular/common/src/forms/directives/number_value_accessor": function() {
return __webpack_require__(418);
},
"@angular/common/src/forms/directives/number_value_accessor.js": function() {
return __webpack_require__(418);
},
"@angular/common/src/forms/directives/radio_control_value_accessor": function() {
return __webpack_require__(421);
},
"@angular/common/src/forms/directives/radio_control_value_accessor.js": function() {
return __webpack_require__(421);
},
"@angular/common/src/forms/directives/select_control_value_accessor": function() {
return __webpack_require__(420);
},
"@angular/common/src/forms/directives/select_control_value_accessor.js": function() {
return __webpack_require__(420);
},
"@angular/common/src/forms/directives/shared": function() {
return __webpack_require__(415);
},
"@angular/common/src/forms/directives/shared.js": function() {
return __webpack_require__(415);
},
"@angular/common/src/forms/directives/validators": function() {
return __webpack_require__(430);
},
"@angular/common/src/forms/directives/validators.js": function() {
return __webpack_require__(430);
},
"@angular/common/src/forms/form_builder": function() {
return __webpack_require__(431);
},
"@angular/common/src/forms/form_builder.js": function() {
return __webpack_require__(431);
},
"@angular/common/src/forms/model": function() {
return __webpack_require__(409);
},
"@angular/common/src/forms/model.js": function() {
return __webpack_require__(409);
},
"@angular/common/src/forms/validators": function() {
return __webpack_require__(416);
},
"@angular/common/src/forms/validators.js": function() {
return __webpack_require__(416);
},
"@angular/common/src/location": function() {
return __webpack_require__(433);
},
"@angular/common/src/location.js": function() {
return __webpack_require__(433);
},
"@angular/common/src/location/hash_location_strategy": function() {
return __webpack_require__(436);
},
"@angular/common/src/location/hash_location_strategy.js": function() {
return __webpack_require__(436);
},
"@angular/common/src/location/location": function() {
return __webpack_require__(437);
},
"@angular/common/src/location/location.js": function() {
return __webpack_require__(437);
},
"@angular/common/src/location/location_strategy": function() {
return __webpack_require__(435);
},
"@angular/common/src/location/location_strategy.js": function() {
return __webpack_require__(435);
},
"@angular/common/src/location/path_location_strategy": function() {
return __webpack_require__(438);
},
"@angular/common/src/location/path_location_strategy.js": function() {
return __webpack_require__(438);
},
"@angular/common/src/location/platform_location": function() {
return __webpack_require__(434);
},
"@angular/common/src/location/platform_location.js": function() {
return __webpack_require__(434);
},
"@angular/common/src/pipes": function() {
return __webpack_require__(377);
},
"@angular/common/src/pipes.js": function() {
return __webpack_require__(377);
},
"@angular/common/src/pipes/async_pipe": function() {
return __webpack_require__(378);
},
"@angular/common/src/pipes/async_pipe.js": function() {
return __webpack_require__(378);
},
"@angular/common/src/pipes/common_pipes": function() {
return __webpack_require__(397);
},
"@angular/common/src/pipes/common_pipes.js": function() {
return __webpack_require__(397);
},
"@angular/common/src/pipes/date_pipe": function() {
return __webpack_require__(387);
},
"@angular/common/src/pipes/date_pipe.js": function() {
return __webpack_require__(387);
},
"@angular/common/src/pipes/i18n_plural_pipe": function() {
return __webpack_require__(395);
},
"@angular/common/src/pipes/i18n_plural_pipe.js": function() {
return __webpack_require__(395);
},
"@angular/common/src/pipes/i18n_select_pipe": function() {
return __webpack_require__(396);
},
"@angular/common/src/pipes/i18n_select_pipe.js": function() {
return __webpack_require__(396);
},
"@angular/common/src/pipes/invalid_pipe_argument_exception": function() {
return __webpack_require__(382);
},
"@angular/common/src/pipes/invalid_pipe_argument_exception.js": function() {
return __webpack_require__(382);
},
"@angular/common/src/pipes/json_pipe": function() {
return __webpack_require__(389);
},
"@angular/common/src/pipes/json_pipe.js": function() {
return __webpack_require__(389);
},
"@angular/common/src/pipes/lowercase_pipe": function() {
return __webpack_require__(391);
},
"@angular/common/src/pipes/lowercase_pipe.js": function() {
return __webpack_require__(391);
},
"@angular/common/src/pipes/number_pipe": function() {
return __webpack_require__(392);
},
"@angular/common/src/pipes/number_pipe.js": function() {
return __webpack_require__(392);
},
"@angular/common/src/pipes/replace_pipe": function() {
return __webpack_require__(394);
},
"@angular/common/src/pipes/replace_pipe.js": function() {
return __webpack_require__(394);
},
"@angular/common/src/pipes/slice_pipe": function() {
return __webpack_require__(390);
},
"@angular/common/src/pipes/slice_pipe.js": function() {
return __webpack_require__(390);
},
"@angular/common/src/pipes/uppercase_pipe": function() {
return __webpack_require__(393);
},
"@angular/common/src/pipes/uppercase_pipe.js": function() {
return __webpack_require__(393);
},
"@angular/compiler": function() {
return __webpack_require__(277);
},
"@angular/compiler/": function() {
return __webpack_require__(277);
},
"@angular/compiler/compiler": function() {
return __webpack_require__(278);
},
"@angular/compiler/compiler.js": function() {
return __webpack_require__(278);
},
"@angular/compiler/core_private": function() {
return __webpack_require__(284);
},
"@angular/compiler/core_private.js": function() {
return __webpack_require__(284);
},
"@angular/compiler/index": function() {
return __webpack_require__(277);
},
"@angular/compiler/index.js": function() {
return __webpack_require__(277);
},
"@angular/compiler/private_export": function() {
return __webpack_require__(344);
},
"@angular/compiler/private_export.js": function() {
return __webpack_require__(344);
},
"@angular/compiler/src/assertions": function() {
return __webpack_require__(335);
},
"@angular/compiler/src/assertions.js": function() {
return __webpack_require__(335);
},
"@angular/compiler/src/compile_metadata": function() {
return __webpack_require__(302);
},
"@angular/compiler/src/compile_metadata.js": function() {
return __webpack_require__(302);
},
"@angular/compiler/src/compiler": function() {
return __webpack_require__(280);
},
"@angular/compiler/src/compiler.js": function() {
return __webpack_require__(280);
},
"@angular/compiler/src/config": function() {
return __webpack_require__(305);
},
"@angular/compiler/src/config.js": function() {
return __webpack_require__(305);
},
"@angular/compiler/src/directive_lifecycle_reflector": function() {
return __webpack_require__(334);
},
"@angular/compiler/src/directive_lifecycle_reflector.js": function() {
return __webpack_require__(334);
},
"@angular/compiler/src/directive_normalizer": function() {
return __webpack_require__(328);
},
"@angular/compiler/src/directive_normalizer.js": function() {
return __webpack_require__(328);
},
"@angular/compiler/src/directive_resolver": function() {
return __webpack_require__(331);
},
"@angular/compiler/src/directive_resolver.js": function() {
return __webpack_require__(331);
},
"@angular/compiler/src/expression_parser/ast": function() {
return __webpack_require__(289);
},
"@angular/compiler/src/expression_parser/ast.js": function() {
return __webpack_require__(289);
},
"@angular/compiler/src/expression_parser/lexer": function() {
return __webpack_require__(291);
},
"@angular/compiler/src/expression_parser/lexer.js": function() {
return __webpack_require__(291);
},
"@angular/compiler/src/expression_parser/parser": function() {
return __webpack_require__(290);
},
"@angular/compiler/src/expression_parser/parser.js": function() {
return __webpack_require__(290);
},
"@angular/compiler/src/facade/async": function() {
return __webpack_require__(309);
},
"@angular/compiler/src/facade/async.js": function() {
return __webpack_require__(309);
},
"@angular/compiler/src/facade/base_wrapped_exception": function() {
return __webpack_require__(287);
},
"@angular/compiler/src/facade/base_wrapped_exception.js": function() {
return __webpack_require__(287);
},
"@angular/compiler/src/facade/collection": function() {
return __webpack_require__(285);
},
"@angular/compiler/src/facade/collection.js": function() {
return __webpack_require__(285);
},
"@angular/compiler/src/facade/exception_handler": function() {
return __webpack_require__(288);
},
"@angular/compiler/src/facade/exception_handler.js": function() {
return __webpack_require__(288);
},
"@angular/compiler/src/facade/exceptions": function() {
return __webpack_require__(286);
},
"@angular/compiler/src/facade/exceptions.js": function() {
return __webpack_require__(286);
},
"@angular/compiler/src/facade/lang": function() {
return __webpack_require__(281);
},
"@angular/compiler/src/facade/lang.js": function() {
return __webpack_require__(281);
},
"@angular/compiler/src/facade/promise": function() {
return __webpack_require__(310);
},
"@angular/compiler/src/facade/promise.js": function() {
return __webpack_require__(310);
},
"@angular/compiler/src/html_ast": function() {
return __webpack_require__(293);
},
"@angular/compiler/src/html_ast.js": function() {
return __webpack_require__(293);
},
"@angular/compiler/src/html_lexer": function() {
return __webpack_require__(294);
},
"@angular/compiler/src/html_lexer.js": function() {
return __webpack_require__(294);
},
"@angular/compiler/src/html_parser": function() {
return __webpack_require__(292);
},
"@angular/compiler/src/html_parser.js": function() {
return __webpack_require__(292);
},
"@angular/compiler/src/html_tags": function() {
return __webpack_require__(296);
},
"@angular/compiler/src/html_tags.js": function() {
return __webpack_require__(296);
},
"@angular/compiler/src/identifiers": function() {
return __webpack_require__(301);
},
"@angular/compiler/src/identifiers.js": function() {
return __webpack_require__(301);
},
"@angular/compiler/src/metadata_resolver": function() {
return __webpack_require__(330);
},
"@angular/compiler/src/metadata_resolver.js": function() {
return __webpack_require__(330);
},
"@angular/compiler/src/offline_compiler": function() {
return __webpack_require__(306);
},
"@angular/compiler/src/offline_compiler.js": function() {
return __webpack_require__(306);
},
"@angular/compiler/src/output/abstract_emitter": function() {
return __webpack_require__(337);
},
"@angular/compiler/src/output/abstract_emitter.js": function() {
return __webpack_require__(337);
},
"@angular/compiler/src/output/abstract_js_emitter": function() {
return __webpack_require__(338);
},
"@angular/compiler/src/output/abstract_js_emitter.js": function() {
return __webpack_require__(338);
},
"@angular/compiler/src/output/dart_emitter": function() {
return __webpack_require__(340);
},
"@angular/compiler/src/output/dart_emitter.js": function() {
return __webpack_require__(340);
},
"@angular/compiler/src/output/interpretive_view": function() {
return __webpack_require__(342);
},
"@angular/compiler/src/output/interpretive_view.js": function() {
return __webpack_require__(342);
},
"@angular/compiler/src/output/output_ast": function() {
return __webpack_require__(307);
},
"@angular/compiler/src/output/output_ast.js": function() {
return __webpack_require__(307);
},
"@angular/compiler/src/output/output_interpreter": function() {
return __webpack_require__(339);
},
"@angular/compiler/src/output/output_interpreter.js": function() {
return __webpack_require__(339);
},
"@angular/compiler/src/output/output_jit": function() {
return __webpack_require__(336);
},
"@angular/compiler/src/output/output_jit.js": function() {
return __webpack_require__(336);
},
"@angular/compiler/src/output/path_util": function() {
return __webpack_require__(345);
},
"@angular/compiler/src/output/path_util.js": function() {
return __webpack_require__(345);
},
"@angular/compiler/src/output/ts_emitter": function() {
return __webpack_require__(341);
},
"@angular/compiler/src/output/ts_emitter.js": function() {
return __webpack_require__(341);
},
"@angular/compiler/src/parse_util": function() {
return __webpack_require__(295);
},
"@angular/compiler/src/parse_util.js": function() {
return __webpack_require__(295);
},
"@angular/compiler/src/pipe_resolver": function() {
return __webpack_require__(332);
},
"@angular/compiler/src/pipe_resolver.js": function() {
return __webpack_require__(332);
},
"@angular/compiler/src/provider_parser": function() {
return __webpack_require__(304);
},
"@angular/compiler/src/provider_parser.js": function() {
return __webpack_require__(304);
},
"@angular/compiler/src/runtime_compiler": function() {
return __webpack_require__(308);
},
"@angular/compiler/src/runtime_compiler.js": function() {
return __webpack_require__(308);
},
"@angular/compiler/src/schema/dom_element_schema_registry": function() {
return __webpack_require__(343);
},
"@angular/compiler/src/schema/dom_element_schema_registry.js": function() {
return __webpack_require__(343);
},
"@angular/compiler/src/schema/element_schema_registry": function() {
return __webpack_require__(279);
},
"@angular/compiler/src/schema/element_schema_registry.js": function() {
return __webpack_require__(279);
},
"@angular/compiler/src/selector": function() {
return __webpack_require__(297);
},
"@angular/compiler/src/selector.js": function() {
return __webpack_require__(297);
},
"@angular/compiler/src/shadow_css": function() {
return __webpack_require__(312);
},
"@angular/compiler/src/shadow_css.js": function() {
return __webpack_require__(312);
},
"@angular/compiler/src/style_compiler": function() {
return __webpack_require__(311);
},
"@angular/compiler/src/style_compiler.js": function() {
return __webpack_require__(311);
},
"@angular/compiler/src/style_url_resolver": function() {
return __webpack_require__(299);
},
"@angular/compiler/src/style_url_resolver.js": function() {
return __webpack_require__(299);
},
"@angular/compiler/src/template_ast": function() {
return __webpack_require__(282);
},
"@angular/compiler/src/template_ast.js": function() {
return __webpack_require__(282);
},
"@angular/compiler/src/template_parser": function() {
return __webpack_require__(283);
},
"@angular/compiler/src/template_parser.js": function() {
return __webpack_require__(283);
},
"@angular/compiler/src/template_preparser": function() {
return __webpack_require__(298);
},
"@angular/compiler/src/template_preparser.js": function() {
return __webpack_require__(298);
},
"@angular/compiler/src/url_resolver": function() {
return __webpack_require__(303);
},
"@angular/compiler/src/url_resolver.js": function() {
return __webpack_require__(303);
},
"@angular/compiler/src/util": function() {
return __webpack_require__(300);
},
"@angular/compiler/src/util.js": function() {
return __webpack_require__(300);
},
"@angular/compiler/src/view_compiler/compile_binding": function() {
return __webpack_require__(325);
},
"@angular/compiler/src/view_compiler/compile_binding.js": function() {
return __webpack_require__(325);
},
"@angular/compiler/src/view_compiler/compile_element": function() {
return __webpack_require__(314);
},
"@angular/compiler/src/view_compiler/compile_element.js": function() {
return __webpack_require__(314);
},
"@angular/compiler/src/view_compiler/compile_method": function() {
return __webpack_require__(318);
},
"@angular/compiler/src/view_compiler/compile_method.js": function() {
return __webpack_require__(318);
},
"@angular/compiler/src/view_compiler/compile_pipe": function() {
return __webpack_require__(320);
},
"@angular/compiler/src/view_compiler/compile_pipe.js": function() {
return __webpack_require__(320);
},
"@angular/compiler/src/view_compiler/compile_query": function() {
return __webpack_require__(317);
},
"@angular/compiler/src/view_compiler/compile_query.js": function() {
return __webpack_require__(317);
},
"@angular/compiler/src/view_compiler/compile_view": function() {
return __webpack_require__(319);
},
"@angular/compiler/src/view_compiler/compile_view.js": function() {
return __webpack_require__(319);
},
"@angular/compiler/src/view_compiler/constants": function() {
return __webpack_require__(315);
},
"@angular/compiler/src/view_compiler/constants.js": function() {
return __webpack_require__(315);
},
"@angular/compiler/src/view_compiler/event_binder": function() {
return __webpack_require__(326);
},
"@angular/compiler/src/view_compiler/event_binder.js": function() {
return __webpack_require__(326);
},
"@angular/compiler/src/view_compiler/expression_converter": function() {
return __webpack_require__(324);
},
"@angular/compiler/src/view_compiler/expression_converter.js": function() {
return __webpack_require__(324);
},
"@angular/compiler/src/view_compiler/lifecycle_binder": function() {
return __webpack_require__(327);
},
"@angular/compiler/src/view_compiler/lifecycle_binder.js": function() {
return __webpack_require__(327);
},
"@angular/compiler/src/view_compiler/property_binder": function() {
return __webpack_require__(323);
},
"@angular/compiler/src/view_compiler/property_binder.js": function() {
return __webpack_require__(323);
},
"@angular/compiler/src/view_compiler/util": function() {
return __webpack_require__(316);
},
"@angular/compiler/src/view_compiler/util.js": function() {
return __webpack_require__(316);
},
"@angular/compiler/src/view_compiler/view_binder": function() {
return __webpack_require__(322);
},
"@angular/compiler/src/view_compiler/view_binder.js": function() {
return __webpack_require__(322);
},
"@angular/compiler/src/view_compiler/view_builder": function() {
return __webpack_require__(321);
},
"@angular/compiler/src/view_compiler/view_builder.js": function() {
return __webpack_require__(321);
},
"@angular/compiler/src/view_compiler/view_compiler": function() {
return __webpack_require__(313);
},
"@angular/compiler/src/view_compiler/view_compiler.js": function() {
return __webpack_require__(313);
},
"@angular/compiler/src/view_resolver": function() {
return __webpack_require__(333);
},
"@angular/compiler/src/view_resolver.js": function() {
return __webpack_require__(333);
},
"@angular/compiler/src/xhr": function() {
return __webpack_require__(329);
},
"@angular/compiler/src/xhr.js": function() {
return __webpack_require__(329);
},
"@angular/core": function() {
return __webpack_require__(118);
},
"@angular/core/": function() {
return __webpack_require__(118);
},
"@angular/core/index": function() {
return __webpack_require__(118);
},
"@angular/core/index.js": function() {
return __webpack_require__(118);
},
"@angular/core/private_export": function() {
return __webpack_require__(205);
},
"@angular/core/private_export.js": function() {
return __webpack_require__(205);
},
"@angular/core/src/application_common_providers": function() {
return __webpack_require__(204);
},
"@angular/core/src/application_common_providers.js": function() {
return __webpack_require__(204);
},
"@angular/core/src/application_ref": function() {
return __webpack_require__(146);
},
"@angular/core/src/application_ref.js": function() {
return __webpack_require__(146);
},
"@angular/core/src/application_tokens": function() {
return __webpack_require__(172);
},
"@angular/core/src/application_tokens.js": function() {
return __webpack_require__(172);
},
"@angular/core/src/change_detection": function() {
return __webpack_require__(201);
},
"@angular/core/src/change_detection.js": function() {
return __webpack_require__(201);
},
"@angular/core/src/change_detection/change_detection": function() {
return __webpack_require__(184);
},
"@angular/core/src/change_detection/change_detection.js": function() {
return __webpack_require__(184);
},
"@angular/core/src/change_detection/change_detection_util": function() {
return __webpack_require__(190);
},
"@angular/core/src/change_detection/change_detection_util.js": function() {
return __webpack_require__(190);
},
"@angular/core/src/change_detection/change_detector_ref": function() {
return __webpack_require__(189);
},
"@angular/core/src/change_detection/change_detector_ref.js": function() {
return __webpack_require__(189);
},
"@angular/core/src/change_detection/constants": function() {
return __webpack_require__(124);
},
"@angular/core/src/change_detection/constants.js": function() {
return __webpack_require__(124);
},
"@angular/core/src/change_detection/differs/default_iterable_differ": function() {
return __webpack_require__(186);
},
"@angular/core/src/change_detection/differs/default_iterable_differ.js": function() {
return __webpack_require__(186);
},
"@angular/core/src/change_detection/differs/default_keyvalue_differ": function() {
return __webpack_require__(188);
},
"@angular/core/src/change_detection/differs/default_keyvalue_differ.js": function() {
return __webpack_require__(188);
},
"@angular/core/src/change_detection/differs/iterable_differs": function() {
return __webpack_require__(185);
},
"@angular/core/src/change_detection/differs/iterable_differs.js": function() {
return __webpack_require__(185);
},
"@angular/core/src/change_detection/differs/keyvalue_differs": function() {
return __webpack_require__(187);
},
"@angular/core/src/change_detection/differs/keyvalue_differs.js": function() {
return __webpack_require__(187);
},
"@angular/core/src/console": function() {
return __webpack_require__(192);
},
"@angular/core/src/console.js": function() {
return __webpack_require__(192);
},
"@angular/core/src/debug/debug_node": function() {
return __webpack_require__(200);
},
"@angular/core/src/debug/debug_node.js": function() {
return __webpack_require__(200);
},
"@angular/core/src/debug/debug_renderer": function() {
return __webpack_require__(211);
},
"@angular/core/src/debug/debug_renderer.js": function() {
return __webpack_require__(211);
},
"@angular/core/src/di": function() {
return __webpack_require__(128);
},
"@angular/core/src/di.js": function() {
return __webpack_require__(128);
},
"@angular/core/src/di/decorators": function() {
return __webpack_require__(129);
},
"@angular/core/src/di/decorators.js": function() {
return __webpack_require__(129);
},
"@angular/core/src/di/forward_ref": function() {
return __webpack_require__(122);
},
"@angular/core/src/di/forward_ref.js": function() {
return __webpack_require__(122);
},
"@angular/core/src/di/injector": function() {
return __webpack_require__(130);
},
"@angular/core/src/di/injector.js": function() {
return __webpack_require__(130);
},
"@angular/core/src/di/metadata": function() {
return __webpack_require__(121);
},
"@angular/core/src/di/metadata.js": function() {
return __webpack_require__(121);
},
"@angular/core/src/di/opaque_token": function() {
return __webpack_require__(145);
},
"@angular/core/src/di/opaque_token.js": function() {
return __webpack_require__(145);
},
"@angular/core/src/di/provider": function() {
return __webpack_require__(143);
},
"@angular/core/src/di/provider.js": function() {
return __webpack_require__(143);
},
"@angular/core/src/di/provider_util": function() {
return __webpack_require__(144);
},
"@angular/core/src/di/provider_util.js": function() {
return __webpack_require__(144);
},
"@angular/core/src/di/reflective_exceptions": function() {
return __webpack_require__(142);
},
"@angular/core/src/di/reflective_exceptions.js": function() {
return __webpack_require__(142);
},
"@angular/core/src/di/reflective_injector": function() {
return __webpack_require__(135);
},
"@angular/core/src/di/reflective_injector.js": function() {
return __webpack_require__(135);
},
"@angular/core/src/di/reflective_key": function() {
return __webpack_require__(141);
},
"@angular/core/src/di/reflective_key.js": function() {
return __webpack_require__(141);
},
"@angular/core/src/di/reflective_provider": function() {
return __webpack_require__(136);
},
"@angular/core/src/di/reflective_provider.js": function() {
return __webpack_require__(136);
},
"@angular/core/src/facade/async": function() {
return __webpack_require__(148);
},
"@angular/core/src/facade/async.js": function() {
return __webpack_require__(148);
},
"@angular/core/src/facade/base_wrapped_exception": function() {
return __webpack_require__(132);
},
"@angular/core/src/facade/base_wrapped_exception.js": function() {
return __webpack_require__(132);
},
"@angular/core/src/facade/collection": function() {
return __webpack_require__(134);
},
"@angular/core/src/facade/collection.js": function() {
return __webpack_require__(134);
},
"@angular/core/src/facade/exception_handler": function() {
return __webpack_require__(133);
},
"@angular/core/src/facade/exception_handler.js": function() {
return __webpack_require__(133);
},
"@angular/core/src/facade/exceptions": function() {
return __webpack_require__(131);
},
"@angular/core/src/facade/exceptions.js": function() {
return __webpack_require__(131);
},
"@angular/core/src/facade/lang": function() {
return __webpack_require__(117);
},
"@angular/core/src/facade/lang.js": function() {
return __webpack_require__(117);
},
"@angular/core/src/facade/promise": function() {
return __webpack_require__(149);
},
"@angular/core/src/facade/promise.js": function() {
return __webpack_require__(149);
},
"@angular/core/src/linker": function() {
return __webpack_require__(195);
},
"@angular/core/src/linker.js": function() {
return __webpack_require__(195);
},
"@angular/core/src/linker/component_factory": function() {
return __webpack_require__(175);
},
"@angular/core/src/linker/component_factory.js": function() {
return __webpack_require__(175);
},
"@angular/core/src/linker/component_resolver": function() {
return __webpack_require__(174);
},
"@angular/core/src/linker/component_resolver.js": function() {
return __webpack_require__(174);
},
"@angular/core/src/linker/debug_context": function() {
return __webpack_require__(208);
},
"@angular/core/src/linker/debug_context.js": function() {
return __webpack_require__(208);
},
"@angular/core/src/linker/dynamic_component_loader": function() {
return __webpack_require__(197);
},
"@angular/core/src/linker/dynamic_component_loader.js": function() {
return __webpack_require__(197);
},
"@angular/core/src/linker/element": function() {
return __webpack_require__(177);
},
"@angular/core/src/linker/element.js": function() {
return __webpack_require__(177);
},
"@angular/core/src/linker/element_injector": function() {
return __webpack_require__(209);
},
"@angular/core/src/linker/element_injector.js": function() {
return __webpack_require__(209);
},
"@angular/core/src/linker/element_ref": function() {
return __webpack_require__(179);
},
"@angular/core/src/linker/element_ref.js": function() {
return __webpack_require__(179);
},
"@angular/core/src/linker/exceptions": function() {
return __webpack_require__(183);
},
"@angular/core/src/linker/exceptions.js": function() {
return __webpack_require__(183);
},
"@angular/core/src/linker/query_list": function() {
return __webpack_require__(196);
},
"@angular/core/src/linker/query_list.js": function() {
return __webpack_require__(196);
},
"@angular/core/src/linker/template_ref": function() {
return __webpack_require__(198);
},
"@angular/core/src/linker/template_ref.js": function() {
return __webpack_require__(198);
},
"@angular/core/src/linker/view": function() {
return __webpack_require__(207);
},
"@angular/core/src/linker/view.js": function() {
return __webpack_require__(207);
},
"@angular/core/src/linker/view_container_ref": function() {
return __webpack_require__(180);
},
"@angular/core/src/linker/view_container_ref.js": function() {
return __webpack_require__(180);
},
"@angular/core/src/linker/view_ref": function() {
return __webpack_require__(199);
},
"@angular/core/src/linker/view_ref.js": function() {
return __webpack_require__(199);
},
"@angular/core/src/linker/view_type": function() {
return __webpack_require__(178);
},
"@angular/core/src/linker/view_type.js": function() {
return __webpack_require__(178);
},
"@angular/core/src/linker/view_utils": function() {
return __webpack_require__(176);
},
"@angular/core/src/linker/view_utils.js": function() {
return __webpack_require__(176);
},
"@angular/core/src/metadata": function() {
return __webpack_require__(119);
},
"@angular/core/src/metadata.js": function() {
return __webpack_require__(119);
},
"@angular/core/src/metadata/di": function() {
return __webpack_require__(120);
},
"@angular/core/src/metadata/di.js": function() {
return __webpack_require__(120);
},
"@angular/core/src/metadata/directives": function() {
return __webpack_require__(123);
},
"@angular/core/src/metadata/directives.js": function() {
return __webpack_require__(123);
},
"@angular/core/src/metadata/lifecycle_hooks": function() {
return __webpack_require__(206);
},
"@angular/core/src/metadata/lifecycle_hooks.js": function() {
return __webpack_require__(206);
},
"@angular/core/src/metadata/view": function() {
return __webpack_require__(125);
},
"@angular/core/src/metadata/view.js": function() {
return __webpack_require__(125);
},
"@angular/core/src/platform_common_providers": function() {
return __webpack_require__(203);
},
"@angular/core/src/platform_common_providers.js": function() {
return __webpack_require__(203);
},
"@angular/core/src/platform_directives_and_pipes": function() {
return __webpack_require__(202);
},
"@angular/core/src/platform_directives_and_pipes.js": function() {
return __webpack_require__(202);
},
"@angular/core/src/profile/profile": function() {
return __webpack_require__(181);
},
"@angular/core/src/profile/profile.js": function() {
return __webpack_require__(181);
},
"@angular/core/src/profile/wtf_impl": function() {
return __webpack_require__(182);
},
"@angular/core/src/profile/wtf_impl.js": function() {
return __webpack_require__(182);
},
"@angular/core/src/profile/wtf_init": function() {
return __webpack_require__(210);
},
"@angular/core/src/profile/wtf_init.js": function() {
return __webpack_require__(210);
},
"@angular/core/src/reflection/reflection": function() {
return __webpack_require__(137);
},
"@angular/core/src/reflection/reflection.js": function() {
return __webpack_require__(137);
},
"@angular/core/src/reflection/reflection_capabilities": function() {
return __webpack_require__(140);
},
"@angular/core/src/reflection/reflection_capabilities.js": function() {
return __webpack_require__(140);
},
"@angular/core/src/reflection/reflector": function() {
return __webpack_require__(138);
},
"@angular/core/src/reflection/reflector.js": function() {
return __webpack_require__(138);
},
"@angular/core/src/reflection/reflector_reader": function() {
return __webpack_require__(139);
},
"@angular/core/src/reflection/reflector_reader.js": function() {
return __webpack_require__(139);
},
"@angular/core/src/render": function() {
return __webpack_require__(194);
},
"@angular/core/src/render.js": function() {
return __webpack_require__(194);
},
"@angular/core/src/render/api": function() {
return __webpack_require__(191);
},
"@angular/core/src/render/api.js": function() {
return __webpack_require__(191);
},
"@angular/core/src/security": function() {
return __webpack_require__(116);
},
"@angular/core/src/security.js": function() {
return __webpack_require__(116);
},
"@angular/core/src/testability/testability": function() {
return __webpack_require__(173);
},
"@angular/core/src/testability/testability.js": function() {
return __webpack_require__(173);
},
"@angular/core/src/util": function() {
return __webpack_require__(127);
},
"@angular/core/src/util.js": function() {
return __webpack_require__(127);
},
"@angular/core/src/util/decorators": function() {
return __webpack_require__(126);
},
"@angular/core/src/util/decorators.js": function() {
return __webpack_require__(126);
},
"@angular/core/src/zone": function() {
return __webpack_require__(193);
},
"@angular/core/src/zone.js": function() {
return __webpack_require__(193);
},
"@angular/core/src/zone/ng_zone": function() {
return __webpack_require__(147);
},
"@angular/core/src/zone/ng_zone.js": function() {
return __webpack_require__(147);
},
"@angular/core/src/zone/ng_zone_impl": function() {
return __webpack_require__(171);
},
"@angular/core/src/zone/ng_zone_impl.js": function() {
return __webpack_require__(171);
},
"@angular/http": function() {
return __webpack_require__(478);
},
"@angular/http/": function() {
return __webpack_require__(478);
},
"@angular/http/http": function() {
return __webpack_require__(479);
},
"@angular/http/http.js": function() {
return __webpack_require__(479);
},
"@angular/http/index": function() {
return __webpack_require__(478);
},
"@angular/http/index.js": function() {
return __webpack_require__(478);
},
"@angular/http/src/backends/browser_jsonp": function() {
return __webpack_require__(498);
},
"@angular/http/src/backends/browser_jsonp.js": function() {
return __webpack_require__(498);
},
"@angular/http/src/backends/browser_xhr": function() {
return __webpack_require__(496);
},
"@angular/http/src/backends/browser_xhr.js": function() {
return __webpack_require__(496);
},
"@angular/http/src/backends/jsonp_backend": function() {
return __webpack_require__(497);
},
"@angular/http/src/backends/jsonp_backend.js": function() {
return __webpack_require__(497);
},
"@angular/http/src/backends/xhr_backend": function() {
return __webpack_require__(493);
},
"@angular/http/src/backends/xhr_backend.js": function() {
return __webpack_require__(493);
},
"@angular/http/src/base_request_options": function() {
return __webpack_require__(491);
},
"@angular/http/src/base_request_options.js": function() {
return __webpack_require__(491);
},
"@angular/http/src/base_response_options": function() {
return __webpack_require__(495);
},
"@angular/http/src/base_response_options.js": function() {
return __webpack_require__(495);
},
"@angular/http/src/enums": function() {
return __webpack_require__(490);
},
"@angular/http/src/enums.js": function() {
return __webpack_require__(490);
},
"@angular/http/src/facade/base_wrapped_exception": function() {
return __webpack_require__(483);
},
"@angular/http/src/facade/base_wrapped_exception.js": function() {
return __webpack_require__(483);
},
"@angular/http/src/facade/collection": function() {
return __webpack_require__(485);
},
"@angular/http/src/facade/collection.js": function() {
return __webpack_require__(485);
},
"@angular/http/src/facade/exception_handler": function() {
return __webpack_require__(484);
},
"@angular/http/src/facade/exception_handler.js": function() {
return __webpack_require__(484);
},
"@angular/http/src/facade/exceptions": function() {
return __webpack_require__(482);
},
"@angular/http/src/facade/exceptions.js": function() {
return __webpack_require__(482);
},
"@angular/http/src/facade/lang": function() {
return __webpack_require__(481);
},
"@angular/http/src/facade/lang.js": function() {
return __webpack_require__(481);
},
"@angular/http/src/headers": function() {
return __webpack_require__(488);
},
"@angular/http/src/headers.js": function() {
return __webpack_require__(488);
},
"@angular/http/src/http": function() {
return __webpack_require__(480);
},
"@angular/http/src/http.js": function() {
return __webpack_require__(480);
},
"@angular/http/src/http_utils": function() {
return __webpack_require__(489);
},
"@angular/http/src/http_utils.js": function() {
return __webpack_require__(489);
},
"@angular/http/src/interfaces": function() {
return __webpack_require__(486);
},
"@angular/http/src/interfaces.js": function() {
return __webpack_require__(486);
},
"@angular/http/src/static_request": function() {
return __webpack_require__(487);
},
"@angular/http/src/static_request.js": function() {
return __webpack_require__(487);
},
"@angular/http/src/static_response": function() {
return __webpack_require__(494);
},
"@angular/http/src/static_response.js": function() {
return __webpack_require__(494);
},
"@angular/http/src/url_search_params": function() {
return __webpack_require__(492);
},
"@angular/http/src/url_search_params.js": function() {
return __webpack_require__(492);
},
"@angular/platform-browser": function() {
return __webpack_require__(372);
},
"@angular/platform-browser-dynamic": function() {
return __webpack_require__(499);
},
"@angular/platform-browser-dynamic/": function() {
return __webpack_require__(499);
},
"@angular/platform-browser-dynamic/core_private": function() {
return __webpack_require__(509);
},
"@angular/platform-browser-dynamic/core_private.js": function() {
return __webpack_require__(509);
},
"@angular/platform-browser-dynamic/index": function() {
return __webpack_require__(499);
},
"@angular/platform-browser-dynamic/index.js": function() {
return __webpack_require__(499);
},
"@angular/platform-browser-dynamic/platform_browser_dynamic": function() {
return __webpack_require__(500);
},
"@angular/platform-browser-dynamic/platform_browser_dynamic.js": function() {
return __webpack_require__(500);
},
"@angular/platform-browser-dynamic/src/facade/base_wrapped_exception": function() {
return __webpack_require__(503);
},
"@angular/platform-browser-dynamic/src/facade/base_wrapped_exception.js": function() {
return __webpack_require__(503);
},
"@angular/platform-browser-dynamic/src/facade/collection": function() {
return __webpack_require__(506);
},
"@angular/platform-browser-dynamic/src/facade/collection.js": function() {
return __webpack_require__(506);
},
"@angular/platform-browser-dynamic/src/facade/exception_handler": function() {
return __webpack_require__(504);
},
"@angular/platform-browser-dynamic/src/facade/exception_handler.js": function() {
return __webpack_require__(504);
},
"@angular/platform-browser-dynamic/src/facade/exceptions": function() {
return __webpack_require__(502);
},
"@angular/platform-browser-dynamic/src/facade/exceptions.js": function() {
return __webpack_require__(502);
},
"@angular/platform-browser-dynamic/src/facade/lang": function() {
return __webpack_require__(505);
},
"@angular/platform-browser-dynamic/src/facade/lang.js": function() {
return __webpack_require__(505);
},
"@angular/platform-browser-dynamic/src/facade/promise": function() {
return __webpack_require__(507);
},
"@angular/platform-browser-dynamic/src/facade/promise.js": function() {
return __webpack_require__(507);
},
"@angular/platform-browser-dynamic/src/xhr/xhr_cache": function() {
return __webpack_require__(501);
},
"@angular/platform-browser-dynamic/src/xhr/xhr_cache.js": function() {
return __webpack_require__(501);
},
"@angular/platform-browser-dynamic/src/xhr/xhr_impl": function() {
return __webpack_require__(508);
},
"@angular/platform-browser-dynamic/src/xhr/xhr_impl.js": function() {
return __webpack_require__(508);
},
"@angular/platform-browser/": function() {
return __webpack_require__(372);
},
"@angular/platform-browser/core_private": function() {
return __webpack_require__(375);
},
"@angular/platform-browser/core_private.js": function() {
return __webpack_require__(375);
},
"@angular/platform-browser/index": function() {
return __webpack_require__(372);
},
"@angular/platform-browser/index.js": function() {
return __webpack_require__(372);
},
"@angular/platform-browser/private_export": function() {
return __webpack_require__(455);
},
"@angular/platform-browser/private_export.js": function() {
return __webpack_require__(455);
},
"@angular/platform-browser/src/animate/animation": function() {
return __webpack_require__(218);
},
"@angular/platform-browser/src/animate/animation.js": function() {
return __webpack_require__(218);
},
"@angular/platform-browser/src/animate/animation_builder": function() {
return __webpack_require__(215);
},
"@angular/platform-browser/src/animate/animation_builder.js": function() {
return __webpack_require__(215);
},
"@angular/platform-browser/src/animate/browser_details": function() {
return __webpack_require__(224);
},
"@angular/platform-browser/src/animate/browser_details.js": function() {
return __webpack_require__(224);
},
"@angular/platform-browser/src/animate/css_animation_builder": function() {
return __webpack_require__(216);
},
"@angular/platform-browser/src/animate/css_animation_builder.js": function() {
return __webpack_require__(216);
},
"@angular/platform-browser/src/animate/css_animation_options": function() {
return __webpack_require__(217);
},
"@angular/platform-browser/src/animate/css_animation_options.js": function() {
return __webpack_require__(217);
},
"@angular/platform-browser/src/browser/browser_adapter": function() {
return __webpack_require__(442);
},
"@angular/platform-browser/src/browser/browser_adapter.js": function() {
return __webpack_require__(442);
},
"@angular/platform-browser/src/browser/generic_browser_adapter": function() {
return __webpack_require__(443);
},
"@angular/platform-browser/src/browser/generic_browser_adapter.js": function() {
return __webpack_require__(443);
},
"@angular/platform-browser/src/browser/location/browser_platform_location": function() {
return __webpack_require__(457);
},
"@angular/platform-browser/src/browser/location/browser_platform_location.js": function() {
return __webpack_require__(457);
},
"@angular/platform-browser/src/browser/testability": function() {
return __webpack_require__(444);
},
"@angular/platform-browser/src/browser/testability.js": function() {
return __webpack_require__(444);
},
"@angular/platform-browser/src/browser/title": function() {
return __webpack_require__(450);
},
"@angular/platform-browser/src/browser/title.js": function() {
return __webpack_require__(450);
},
"@angular/platform-browser/src/browser/tools/common_tools": function() {
return __webpack_require__(452);
},
"@angular/platform-browser/src/browser/tools/common_tools.js": function() {
return __webpack_require__(452);
},
"@angular/platform-browser/src/browser/tools/tools": function() {
return __webpack_require__(451);
},
"@angular/platform-browser/src/browser/tools/tools.js": function() {
return __webpack_require__(451);
},
"@angular/platform-browser/src/browser_common": function() {
return __webpack_require__(374);
},
"@angular/platform-browser/src/browser_common.js": function() {
return __webpack_require__(374);
},
"@angular/platform-browser/src/dom/debug/by": function() {
return __webpack_require__(454);
},
"@angular/platform-browser/src/dom/debug/by.js": function() {
return __webpack_require__(454);
},
"@angular/platform-browser/src/dom/debug/ng_probe": function() {
return __webpack_require__(446);
},
"@angular/platform-browser/src/dom/debug/ng_probe.js": function() {
return __webpack_require__(446);
},
"@angular/platform-browser/src/dom/dom_adapter": function() {
return __webpack_require__(223);
},
"@angular/platform-browser/src/dom/dom_adapter.js": function() {
return __webpack_require__(223);
},
"@angular/platform-browser/src/dom/dom_renderer": function() {
return __webpack_require__(214);
},
"@angular/platform-browser/src/dom/dom_renderer.js": function() {
return __webpack_require__(214);
},
"@angular/platform-browser/src/dom/dom_tokens": function() {
return __webpack_require__(229);
},
"@angular/platform-browser/src/dom/dom_tokens.js": function() {
return __webpack_require__(229);
},
"@angular/platform-browser/src/dom/events/dom_events": function() {
return __webpack_require__(447);
},
"@angular/platform-browser/src/dom/events/dom_events.js": function() {
return __webpack_require__(447);
},
"@angular/platform-browser/src/dom/events/event_manager": function() {
return __webpack_require__(230);
},
"@angular/platform-browser/src/dom/events/event_manager.js": function() {
return __webpack_require__(230);
},
"@angular/platform-browser/src/dom/events/hammer_common": function() {
return __webpack_require__(449);
},
"@angular/platform-browser/src/dom/events/hammer_common.js": function() {
return __webpack_require__(449);
},
"@angular/platform-browser/src/dom/events/hammer_gestures": function() {
return __webpack_require__(448);
},
"@angular/platform-browser/src/dom/events/hammer_gestures.js": function() {
return __webpack_require__(448);
},
"@angular/platform-browser/src/dom/events/key_events": function() {
return __webpack_require__(445);
},
"@angular/platform-browser/src/dom/events/key_events.js": function() {
return __webpack_require__(445);
},
"@angular/platform-browser/src/dom/shared_styles_host": function() {
return __webpack_require__(228);
},
"@angular/platform-browser/src/dom/shared_styles_host.js": function() {
return __webpack_require__(228);
},
"@angular/platform-browser/src/dom/util": function() {
return __webpack_require__(222);
},
"@angular/platform-browser/src/dom/util.js": function() {
return __webpack_require__(222);
},
"@angular/platform-browser/src/facade/base_wrapped_exception": function() {
return __webpack_require__(226);
},
"@angular/platform-browser/src/facade/base_wrapped_exception.js": function() {
return __webpack_require__(226);
},
"@angular/platform-browser/src/facade/browser": function() {
return __webpack_require__(453);
},
"@angular/platform-browser/src/facade/browser.js": function() {
return __webpack_require__(453);
},
"@angular/platform-browser/src/facade/collection": function() {
return __webpack_require__(221);
},
"@angular/platform-browser/src/facade/collection.js": function() {
return __webpack_require__(221);
},
"@angular/platform-browser/src/facade/exception_handler": function() {
return __webpack_require__(227);
},
"@angular/platform-browser/src/facade/exception_handler.js": function() {
return __webpack_require__(227);
},
"@angular/platform-browser/src/facade/exceptions": function() {
return __webpack_require__(225);
},
"@angular/platform-browser/src/facade/exceptions.js": function() {
return __webpack_require__(225);
},
"@angular/platform-browser/src/facade/lang": function() {
return __webpack_require__(219);
},
"@angular/platform-browser/src/facade/lang.js": function() {
return __webpack_require__(219);
},
"@angular/platform-browser/src/facade/math": function() {
return __webpack_require__(220);
},
"@angular/platform-browser/src/facade/math.js": function() {
return __webpack_require__(220);
},
"@angular/platform-browser/src/platform_browser": function() {
return __webpack_require__(373);
},
"@angular/platform-browser/src/platform_browser.js": function() {
return __webpack_require__(373);
},
"@angular/platform-browser/src/platform_browser_static": function() {
return __webpack_require__(456);
},
"@angular/platform-browser/src/platform_browser_static.js": function() {
return __webpack_require__(456);
},
"@angular/platform-browser/src/security/dom_sanitization_service": function() {
return __webpack_require__(439);
},
"@angular/platform-browser/src/security/dom_sanitization_service.js": function() {
return __webpack_require__(439);
},
"@angular/platform-browser/src/security/style_sanitizer": function() {
return __webpack_require__(441);
},
"@angular/platform-browser/src/security/style_sanitizer.js": function() {
return __webpack_require__(441);
},
"@angular/platform-browser/src/security/url_sanitizer": function() {
return __webpack_require__(440);
},
"@angular/platform-browser/src/security/url_sanitizer.js": function() {
return __webpack_require__(440);
},
"@angular/platform-server": function() {
return __webpack_require__(346);
},
"@angular/platform-server/": function() {
return __webpack_require__(346);
},
"@angular/platform-server/compiler_private": function() {
return __webpack_require__(461);
},
"@angular/platform-server/compiler_private.js": function() {
return __webpack_require__(461);
},
"@angular/platform-server/index": function() {
return __webpack_require__(346);
},
"@angular/platform-server/index.js": function() {
return __webpack_require__(346);
},
"@angular/platform-server/platform_browser_private": function() {
return __webpack_require__(371);
},
"@angular/platform-server/platform_browser_private.js": function() {
return __webpack_require__(371);
},
"@angular/platform-server/src/facade/base_wrapped_exception": function() {
return __webpack_require__(459);
},
"@angular/platform-server/src/facade/base_wrapped_exception.js": function() {
return __webpack_require__(459);
},
"@angular/platform-server/src/facade/collection": function() {
return __webpack_require__(369);
},
"@angular/platform-server/src/facade/collection.js": function() {
return __webpack_require__(369);
},
"@angular/platform-server/src/facade/exception_handler": function() {
return __webpack_require__(460);
},
"@angular/platform-server/src/facade/exception_handler.js": function() {
return __webpack_require__(460);
},
"@angular/platform-server/src/facade/exceptions": function() {
return __webpack_require__(458);
},
"@angular/platform-server/src/facade/exceptions.js": function() {
return __webpack_require__(458);
},
"@angular/platform-server/src/facade/lang": function() {
return __webpack_require__(370);
},
"@angular/platform-server/src/facade/lang.js": function() {
return __webpack_require__(370);
},
"@angular/platform-server/src/parse5_adapter": function() {
return __webpack_require__(347);
},
"@angular/platform-server/src/parse5_adapter.js": function() {
return __webpack_require__(347);
},
"@angular/router-deprecated": function() {
return __webpack_require__(510);
},
"@angular/router-deprecated/": function() {
return __webpack_require__(510);
},
"@angular/router-deprecated/core_private": function() {
return __webpack_require__(534);
},
"@angular/router-deprecated/core_private.js": function() {
return __webpack_require__(534);
},
"@angular/router-deprecated/index": function() {
return __webpack_require__(510);
},
"@angular/router-deprecated/index.js": function() {
return __webpack_require__(510);
},
"@angular/router-deprecated/router": function() {
return __webpack_require__(511);
},
"@angular/router-deprecated/router.js": function() {
return __webpack_require__(511);
},
"@angular/router-deprecated/src/directives/router_link": function() {
return __webpack_require__(539);
},
"@angular/router-deprecated/src/directives/router_link.js": function() {
return __webpack_require__(539);
},
"@angular/router-deprecated/src/directives/router_outlet": function() {
return __webpack_require__(537);
},
"@angular/router-deprecated/src/directives/router_outlet.js": function() {
return __webpack_require__(537);
},
"@angular/router-deprecated/src/facade/async": function() {
return __webpack_require__(513);
},
"@angular/router-deprecated/src/facade/async.js": function() {
return __webpack_require__(513);
},
"@angular/router-deprecated/src/facade/base_wrapped_exception": function() {
return __webpack_require__(518);
},
"@angular/router-deprecated/src/facade/base_wrapped_exception.js": function() {
return __webpack_require__(518);
},
"@angular/router-deprecated/src/facade/collection": function() {
return __webpack_require__(516);
},
"@angular/router-deprecated/src/facade/collection.js": function() {
return __webpack_require__(516);
},
"@angular/router-deprecated/src/facade/exception_handler": function() {
return __webpack_require__(519);
},
"@angular/router-deprecated/src/facade/exception_handler.js": function() {
return __webpack_require__(519);
},
"@angular/router-deprecated/src/facade/exceptions": function() {
return __webpack_require__(517);
},
"@angular/router-deprecated/src/facade/exceptions.js": function() {
return __webpack_require__(517);
},
"@angular/router-deprecated/src/facade/lang": function() {
return __webpack_require__(514);
},
"@angular/router-deprecated/src/facade/lang.js": function() {
return __webpack_require__(514);
},
"@angular/router-deprecated/src/facade/promise": function() {
return __webpack_require__(515);
},
"@angular/router-deprecated/src/facade/promise.js": function() {
return __webpack_require__(515);
},
"@angular/router-deprecated/src/instruction": function() {
return __webpack_require__(524);
},
"@angular/router-deprecated/src/instruction.js": function() {
return __webpack_require__(524);
},
"@angular/router-deprecated/src/lifecycle/lifecycle_annotations": function() {
return __webpack_require__(538);
},
"@angular/router-deprecated/src/lifecycle/lifecycle_annotations.js": function() {
return __webpack_require__(538);
},
"@angular/router-deprecated/src/lifecycle/lifecycle_annotations_impl": function() {
return __webpack_require__(536);
},
"@angular/router-deprecated/src/lifecycle/lifecycle_annotations_impl.js": function() {
return __webpack_require__(536);
},
"@angular/router-deprecated/src/lifecycle/route_lifecycle_reflector": function() {
return __webpack_require__(535);
},
"@angular/router-deprecated/src/lifecycle/route_lifecycle_reflector.js": function() {
return __webpack_require__(535);
},
"@angular/router-deprecated/src/route_config/route_config_decorator": function() {
return __webpack_require__(533);
},
"@angular/router-deprecated/src/route_config/route_config_decorator.js": function() {
return __webpack_require__(533);
},
"@angular/router-deprecated/src/route_config/route_config_impl": function() {
return __webpack_require__(521);
},
"@angular/router-deprecated/src/route_config/route_config_impl.js": function() {
return __webpack_require__(521);
},
"@angular/router-deprecated/src/route_config/route_config_normalizer": function() {
return __webpack_require__(532);
},
"@angular/router-deprecated/src/route_config/route_config_normalizer.js": function() {
return __webpack_require__(532);
},
"@angular/router-deprecated/src/route_registry": function() {
return __webpack_require__(520);
},
"@angular/router-deprecated/src/route_registry.js": function() {
return __webpack_require__(520);
},
"@angular/router-deprecated/src/router": function() {
return __webpack_require__(512);
},
"@angular/router-deprecated/src/router.js": function() {
return __webpack_require__(512);
},
"@angular/router-deprecated/src/router_providers": function() {
return __webpack_require__(541);
},
"@angular/router-deprecated/src/router_providers.js": function() {
return __webpack_require__(541);
},
"@angular/router-deprecated/src/router_providers_common": function() {
return __webpack_require__(540);
},
"@angular/router-deprecated/src/router_providers_common.js": function() {
return __webpack_require__(540);
},
"@angular/router-deprecated/src/rules/route_handlers/async_route_handler": function() {
return __webpack_require__(526);
},
"@angular/router-deprecated/src/rules/route_handlers/async_route_handler.js": function() {
return __webpack_require__(526);
},
"@angular/router-deprecated/src/rules/route_handlers/sync_route_handler": function() {
return __webpack_require__(527);
},
"@angular/router-deprecated/src/rules/route_handlers/sync_route_handler.js": function() {
return __webpack_require__(527);
},
"@angular/router-deprecated/src/rules/route_paths/param_route_path": function() {
return __webpack_require__(528);
},
"@angular/router-deprecated/src/rules/route_paths/param_route_path.js": function() {
return __webpack_require__(528);
},
"@angular/router-deprecated/src/rules/route_paths/regex_route_path": function() {
return __webpack_require__(531);
},
"@angular/router-deprecated/src/rules/route_paths/regex_route_path.js": function() {
return __webpack_require__(531);
},
"@angular/router-deprecated/src/rules/route_paths/route_path": function() {
return __webpack_require__(530);
},
"@angular/router-deprecated/src/rules/route_paths/route_path.js": function() {
return __webpack_require__(530);
},
"@angular/router-deprecated/src/rules/rule_set": function() {
return __webpack_require__(525);
},
"@angular/router-deprecated/src/rules/rule_set.js": function() {
return __webpack_require__(525);
},
"@angular/router-deprecated/src/rules/rules": function() {
return __webpack_require__(522);
},
"@angular/router-deprecated/src/rules/rules.js": function() {
return __webpack_require__(522);
},
"@angular/router-deprecated/src/url_parser": function() {
return __webpack_require__(523);
},
"@angular/router-deprecated/src/url_parser.js": function() {
return __webpack_require__(523);
},
"@angular/router-deprecated/src/utils": function() {
return __webpack_require__(529);
},
"@angular/router-deprecated/src/utils.js": function() {
return __webpack_require__(529);
},
application: function() {
return __webpack_require__(16);
},
"application-settings": function() {
return __webpack_require__(542);
},
"application-settings/": function() {
return __webpack_require__(542);
},
"application-settings/application-settings": function() {
return __webpack_require__(542);
},
"application-settings/application-settings-common": function() {
return __webpack_require__(543);
},
"application-settings/application-settings-common.js": function() {
return __webpack_require__(543);
},
"application-settings/application-settings.js": function() {
return __webpack_require__(542);
},
"application/": function() {
return __webpack_require__(16);
},
"application/application": function() {
return __webpack_require__(16);
},
"application/application-common": function() {
return __webpack_require__(17);
},
"application/application-common.js": function() {
return __webpack_require__(17);
},
"application/application.js": function() {
return __webpack_require__(16);
},
camera: function() {
return __webpack_require__(544);
},
"camera/": function() {
return __webpack_require__(544);
},
"camera/camera": function() {
return __webpack_require__(544);
},
"camera/camera-common": function() {
return __webpack_require__(545);
},
"camera/camera-common.js": function() {
return __webpack_require__(545);
},
"camera/camera.js": function() {
return __webpack_require__(544);
},
color: function() {
return __webpack_require__(27);
},
"color/": function() {
return __webpack_require__(27);
},
"color/color": function() {
return __webpack_require__(27);
},
"color/color-common": function() {
return __webpack_require__(28);
},
"color/color-common.js": function() {
return __webpack_require__(28);
},
"color/color.js": function() {
return __webpack_require__(27);
},
"color/known-colors": function() {
return __webpack_require__(29);
},
"color/known-colors.js": function() {
return __webpack_require__(29);
},
connectivity: function() {
return __webpack_require__(546);
},
"connectivity/": function() {
return __webpack_require__(546);
},
"connectivity/connectivity": function() {
return __webpack_require__(546);
},
"connectivity/connectivity-common": function() {
return __webpack_require__(547);
},
"connectivity/connectivity-common.js": function() {
return __webpack_require__(547);
},
"connectivity/connectivity.js": function() {
return __webpack_require__(546);
},
console: function() {
return __webpack_require__(104);
},
"console/": function() {
return __webpack_require__(104);
},
"console/console": function() {
return __webpack_require__(104);
},
"console/console.js": function() {
return __webpack_require__(104);
},
css: function() {
return __webpack_require__(40);
},
"css-value": function() {
return __webpack_require__(50);
},
"css-value/": function() {
return __webpack_require__(50);
},
"css-value/index": function() {
return __webpack_require__(50);
},
"css-value/index.js": function() {
return __webpack_require__(50);
},
"css/": function() {
return __webpack_require__(40);
},
"css/index": function() {
return __webpack_require__(40);
},
"css/index.js": function() {
return __webpack_require__(40);
},
"css/lib/parse/index": function() {
return __webpack_require__(41);
},
"css/lib/parse/index.js": function() {
return __webpack_require__(41);
},
"data/observable": function() {
return __webpack_require__(18);
},
"data/observable-array": function() {
return __webpack_require__(62);
},
"data/observable-array/": function() {
return __webpack_require__(62);
},
"data/observable-array/observable-array": function() {
return __webpack_require__(62);
},
"data/observable-array/observable-array.js": function() {
return __webpack_require__(62);
},
"data/observable/": function() {
return __webpack_require__(18);
},
"data/observable/observable": function() {
return __webpack_require__(18);
},
"data/observable/observable.js": function() {
return __webpack_require__(18);
},
"data/virtual-array": function() {
return __webpack_require__(548);
},
"data/virtual-array/": function() {
return __webpack_require__(548);
},
"data/virtual-array/virtual-array": function() {
return __webpack_require__(548);
},
"data/virtual-array/virtual-array.js": function() {
return __webpack_require__(548);
},
"debugger": function() {
return __webpack_require__(549);
},
"debugger/": function() {
return __webpack_require__(549);
},
"debugger/debugger": function() {
return __webpack_require__(549);
},
"debugger/debugger.js": function() {
return __webpack_require__(549);
},
fetch: function() {
return __webpack_require__(103);
},
"fetch/": function() {
return __webpack_require__(103);
},
"fetch/fetch": function() {
return __webpack_require__(103);
},
"fetch/fetch.js": function() {
return __webpack_require__(103);
},
"file-system": function() {
return __webpack_require__(19);
},
"file-system/": function() {
return __webpack_require__(19);
},
"file-system/file-name-resolver": function() {
return __webpack_require__(44);
},
"file-system/file-name-resolver.js": function() {
return __webpack_require__(44);
},
"file-system/file-system": function() {
return __webpack_require__(19);
},
"file-system/file-system-access": function() {
return __webpack_require__(20);
},
"file-system/file-system-access.js": function() {
return __webpack_require__(20);
},
"file-system/file-system.js": function() {
return __webpack_require__(19);
},
"fps-meter": function() {
return __webpack_require__(550);
},
"fps-meter/": function() {
return __webpack_require__(550);
},
"fps-meter/fps-meter": function() {
return __webpack_require__(550);
},
"fps-meter/fps-meter.js": function() {
return __webpack_require__(550);
},
"fps-meter/fps-native": function() {
return __webpack_require__(551);
},
"fps-meter/fps-native.js": function() {
return __webpack_require__(551);
},
globals: function() {
return __webpack_require__(3);
},
"globals/": function() {
return __webpack_require__(3);
},
"globals/decorators": function() {
return __webpack_require__(5);
},
"globals/decorators.js": function() {
return __webpack_require__(5);
},
"globals/globals": function() {
return __webpack_require__(3);
},
"globals/globals.js": function() {
return __webpack_require__(3);
},
http: function() {
return __webpack_require__(66);
},
"http/": function() {
return __webpack_require__(66);
},
"http/http": function() {
return __webpack_require__(66);
},
"http/http-request": function() {
return __webpack_require__(67);
},
"http/http-request.js": function() {
return __webpack_require__(67);
},
"http/http.js": function() {
return __webpack_require__(66);
},
"image-source": function() {
return __webpack_require__(64);
},
"image-source/": function() {
return __webpack_require__(64);
},
"image-source/image-source": function() {
return __webpack_require__(64);
},
"image-source/image-source-common": function() {
return __webpack_require__(65);
},
"image-source/image-source-common.js": function() {
return __webpack_require__(65);
},
"image-source/image-source.js": function() {
return __webpack_require__(64);
},
"js-libs/easysax": function() {
return __webpack_require__(84);
},
"js-libs/easysax/": function() {
return __webpack_require__(84);
},
"js-libs/easysax/easysax": function() {
return __webpack_require__(84);
},
"js-libs/easysax/easysax.js": function() {
return __webpack_require__(84);
},
"js-libs/esprima": function() {
return __webpack_require__(58);
},
"js-libs/esprima/": function() {
return __webpack_require__(58);
},
"js-libs/esprima/esprima": function() {
return __webpack_require__(58);
},
"js-libs/esprima/esprima.js": function() {
return __webpack_require__(58);
},
"js-libs/polymer-expressions": function() {
return __webpack_require__(57);
},
"js-libs/polymer-expressions/": function() {
return __webpack_require__(57);
},
"js-libs/polymer-expressions/path-parser": function() {
return __webpack_require__(59);
},
"js-libs/polymer-expressions/path-parser.js": function() {
return __webpack_require__(59);
},
"js-libs/polymer-expressions/polymer-expressions": function() {
return __webpack_require__(57);
},
"js-libs/polymer-expressions/polymer-expressions.js": function() {
return __webpack_require__(57);
},
location: function() {
return __webpack_require__(552);
},
"location/": function() {
return __webpack_require__(552);
},
"location/location": function() {
return __webpack_require__(552);
},
"location/location-common": function() {
return __webpack_require__(553);
},
"location/location-common.js": function() {
return __webpack_require__(553);
},
"location/location.js": function() {
return __webpack_require__(552);
},
"nativescript-angular/application": function() {
return __webpack_require__(2);
},
"nativescript-angular/application.js": function() {
return __webpack_require__(2);
},
"nativescript-angular/common/detached-loader": function() {
return __webpack_require__(554);
},
"nativescript-angular/common/detached-loader.js": function() {
return __webpack_require__(554);
},
"nativescript-angular/directives": function() {
return __webpack_require__(463);
},
"nativescript-angular/directives.js": function() {
return __webpack_require__(463);
},
"nativescript-angular/directives/action-bar": function() {
return __webpack_require__(473);
},
"nativescript-angular/directives/action-bar.js": function() {
return __webpack_require__(473);
},
"nativescript-angular/directives/dialogs": function() {
return __webpack_require__(555);
},
"nativescript-angular/directives/dialogs.js": function() {
return __webpack_require__(555);
},
"nativescript-angular/directives/list-view-comp": function() {
return __webpack_require__(464);
},
"nativescript-angular/directives/list-view-comp.js": function() {
return __webpack_require__(464);
},
"nativescript-angular/directives/platform-filters": function() {
return __webpack_require__(474);
},
"nativescript-angular/directives/platform-filters.js": function() {
return __webpack_require__(474);
},
"nativescript-angular/directives/tab-view": function() {
return __webpack_require__(472);
},
"nativescript-angular/directives/tab-view.js": function() {
return __webpack_require__(472);
},
"nativescript-angular/dom_adapter": function() {
return __webpack_require__(276);
},
"nativescript-angular/dom_adapter.js": function() {
return __webpack_require__(276);
},
"nativescript-angular/element-registry": function() {
return __webpack_require__(234);
},
"nativescript-angular/element-registry.js": function() {
return __webpack_require__(234);
},
"nativescript-angular/hooks/before-livesync": function() {
return __webpack_require__(556);
},
"nativescript-angular/hooks/before-livesync.js": function() {
return __webpack_require__(556);
},
"nativescript-angular/hooks/hook-helper": function() {
return __webpack_require__(557);
},
"nativescript-angular/hooks/hook-helper.js": function() {
return __webpack_require__(557);
},
"nativescript-angular/modal-dialog": function() {
return __webpack_require__(559);
},
"nativescript-angular/modal-dialog.js": function() {
return __webpack_require__(559);
},
"nativescript-angular/platform-providers": function() {
return __webpack_require__(213);
},
"nativescript-angular/platform-providers.js": function() {
return __webpack_require__(213);
},
"nativescript-angular/polyfills/array": function() {
return __webpack_require__(115);
},
"nativescript-angular/polyfills/array.js": function() {
return __webpack_require__(115);
},
"nativescript-angular/postinstall": function() {
return __webpack_require__(560);
},
"nativescript-angular/postinstall.js": function() {
return __webpack_require__(560);
},
"nativescript-angular/renderer": function() {
return __webpack_require__(212);
},
"nativescript-angular/renderer.js": function() {
return __webpack_require__(212);
},
"nativescript-angular/router": function() {
return __webpack_require__(562);
},
"nativescript-angular/router.js": function() {
return __webpack_require__(562);
},
"nativescript-angular/router/common": function() {
return __webpack_require__(565);
},
"nativescript-angular/router/common.js": function() {
return __webpack_require__(565);
},
"nativescript-angular/router/ns-location-strategy": function() {
return __webpack_require__(567);
},
"nativescript-angular/router/ns-location-strategy.js": function() {
return __webpack_require__(567);
},
"nativescript-angular/router/ns-router": function() {
return __webpack_require__(563);
},
"nativescript-angular/router/ns-router-link": function() {
return __webpack_require__(564);
},
"nativescript-angular/router/ns-router-link.js": function() {
return __webpack_require__(564);
},
"nativescript-angular/router/ns-router.js": function() {
return __webpack_require__(563);
},
"nativescript-angular/router/page-router-outlet": function() {
return __webpack_require__(566);
},
"nativescript-angular/router/page-router-outlet.js": function() {
return __webpack_require__(566);
},
"nativescript-angular/value-accessors/base-value-accessor": function() {
return __webpack_require__(466);
},
"nativescript-angular/value-accessors/base-value-accessor.js": function() {
return __webpack_require__(466);
},
"nativescript-angular/value-accessors/checked-value-accessor": function() {
return __webpack_require__(467);
},
"nativescript-angular/value-accessors/checked-value-accessor.js": function() {
return __webpack_require__(467);
},
"nativescript-angular/value-accessors/date-value-accessor": function() {
return __webpack_require__(468);
},
"nativescript-angular/value-accessors/date-value-accessor.js": function() {
return __webpack_require__(468);
},
"nativescript-angular/value-accessors/number-value-accessor": function() {
return __webpack_require__(470);
},
"nativescript-angular/value-accessors/number-value-accessor.js": function() {
return __webpack_require__(470);
},
"nativescript-angular/value-accessors/selectedIndex-value-accessor": function() {
return __webpack_require__(471);
},
"nativescript-angular/value-accessors/selectedIndex-value-accessor.js": function() {
return __webpack_require__(471);
},
"nativescript-angular/value-accessors/text-value-accessor": function() {
return __webpack_require__(465);
},
"nativescript-angular/value-accessors/text-value-accessor.js": function() {
return __webpack_require__(465);
},
"nativescript-angular/value-accessors/time-value-accessor": function() {
return __webpack_require__(469);
},
"nativescript-angular/value-accessors/time-value-accessor.js": function() {
return __webpack_require__(469);
},
"nativescript-angular/view-util": function() {
return __webpack_require__(231);
},
"nativescript-angular/view-util.js": function() {
return __webpack_require__(231);
},
"nativescript-angular/xhr": function() {
return __webpack_require__(462);
},
"nativescript-angular/xhr.js": function() {
return __webpack_require__(462);
},
"nativescript-intl": function() {
return __webpack_require__(475);
},
"nativescript-intl/": function() {
return __webpack_require__(475);
},
"nativescript-intl/nativescript-intl": function() {
return __webpack_require__(475);
},
"nativescript-intl/nativescript-intl-common": function() {
return __webpack_require__(476);
},
"nativescript-intl/nativescript-intl-common.js": function() {
return __webpack_require__(476);
},
"nativescript-intl/nativescript-intl.js": function() {
return __webpack_require__(475);
},
"node_modules/tns-core-modules-widgets": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "node_modules/tns-core-modules-widgets"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"node_modules/tns-core-modules-widgets/": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "node_modules/tns-core-modules-widgets"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
parse5: function() {
return __webpack_require__(348);
},
"parse5/": function() {
return __webpack_require__(348);
},
"parse5/index": function() {
return __webpack_require__(348);
},
"parse5/index.js": function() {
return __webpack_require__(348);
},
"parse5/lib/common/doctype": function() {
return __webpack_require__(360);
},
"parse5/lib/common/doctype.js": function() {
return __webpack_require__(360);
},
"parse5/lib/common/foreign_content": function() {
return __webpack_require__(361);
},
"parse5/lib/common/foreign_content.js": function() {
return __webpack_require__(361);
},
"parse5/lib/common/html": function() {
return __webpack_require__(356);
},
"parse5/lib/common/html.js": function() {
return __webpack_require__(356);
},
"parse5/lib/common/unicode": function() {
return __webpack_require__(352);
},
"parse5/lib/common/unicode.js": function() {
return __webpack_require__(352);
},
"parse5/lib/common/utils": function() {
return __webpack_require__(362);
},
"parse5/lib/common/utils.js": function() {
return __webpack_require__(362);
},
"parse5/lib/jsdom/jsdom_parser": function() {
return __webpack_require__(366);
},
"parse5/lib/jsdom/jsdom_parser.js": function() {
return __webpack_require__(366);
},
"parse5/lib/jsdom/parsing_unit": function() {
return __webpack_require__(367);
},
"parse5/lib/jsdom/parsing_unit.js": function() {
return __webpack_require__(367);
},
"parse5/lib/serialization/serializer": function() {
return __webpack_require__(365);
},
"parse5/lib/serialization/serializer.js": function() {
return __webpack_require__(365);
},
"parse5/lib/simple_api/simple_api_parser": function() {
return __webpack_require__(363);
},
"parse5/lib/simple_api/simple_api_parser.js": function() {
return __webpack_require__(363);
},
"parse5/lib/simple_api/tokenizer_proxy": function() {
return __webpack_require__(364);
},
"parse5/lib/simple_api/tokenizer_proxy.js": function() {
return __webpack_require__(364);
},
"parse5/lib/tokenization/location_info_mixin": function() {
return __webpack_require__(353);
},
"parse5/lib/tokenization/location_info_mixin.js": function() {
return __webpack_require__(353);
},
"parse5/lib/tokenization/named_entity_trie": function() {
return __webpack_require__(354);
},
"parse5/lib/tokenization/named_entity_trie.js": function() {
return __webpack_require__(354);
},
"parse5/lib/tokenization/preprocessor": function() {
return __webpack_require__(351);
},
"parse5/lib/tokenization/preprocessor.js": function() {
return __webpack_require__(351);
},
"parse5/lib/tokenization/tokenizer": function() {
return __webpack_require__(350);
},
"parse5/lib/tokenization/tokenizer.js": function() {
return __webpack_require__(350);
},
"parse5/lib/tree_adapters/default": function() {
return __webpack_require__(359);
},
"parse5/lib/tree_adapters/default.js": function() {
return __webpack_require__(359);
},
"parse5/lib/tree_adapters/htmlparser2": function() {
return __webpack_require__(368);
},
"parse5/lib/tree_adapters/htmlparser2.js": function() {
return __webpack_require__(368);
},
"parse5/lib/tree_construction/formatting_element_list": function() {
return __webpack_require__(357);
},
"parse5/lib/tree_construction/formatting_element_list.js": function() {
return __webpack_require__(357);
},
"parse5/lib/tree_construction/location_info_mixin": function() {
return __webpack_require__(358);
},
"parse5/lib/tree_construction/location_info_mixin.js": function() {
return __webpack_require__(358);
},
"parse5/lib/tree_construction/open_element_stack": function() {
return __webpack_require__(355);
},
"parse5/lib/tree_construction/open_element_stack.js": function() {
return __webpack_require__(355);
},
"parse5/lib/tree_construction/parser": function() {
return __webpack_require__(349);
},
"parse5/lib/tree_construction/parser.js": function() {
return __webpack_require__(349);
},
platform: function() {
return __webpack_require__(45);
},
"platform/": function() {
return __webpack_require__(45);
},
"platform/platform": function() {
return __webpack_require__(45);
},
"platform/platform.js": function() {
return __webpack_require__(45);
},
punycode: function() {
return __webpack_require__(568);
},
"punycode/": function() {
return __webpack_require__(568);
},
"punycode/punycode": function() {
return __webpack_require__(568);
},
"punycode/punycode.js": function() {
return __webpack_require__(568);
},
"rxjs/Observable": function() {
return __webpack_require__(151);
},
"rxjs/Observable.js": function() {
return __webpack_require__(151);
},
"rxjs/Observer": function() {
return __webpack_require__(165);
},
"rxjs/Observer.js": function() {
return __webpack_require__(165);
},
"rxjs/Subject": function() {
return __webpack_require__(150);
},
"rxjs/Subject.js": function() {
return __webpack_require__(150);
},
"rxjs/SubjectSubscription": function() {
return __webpack_require__(166);
},
"rxjs/SubjectSubscription.js": function() {
return __webpack_require__(166);
},
"rxjs/Subscriber": function() {
return __webpack_require__(156);
},
"rxjs/Subscriber.js": function() {
return __webpack_require__(156);
},
"rxjs/Subscription": function() {
return __webpack_require__(158);
},
"rxjs/Subscription.js": function() {
return __webpack_require__(158);
},
"rxjs/observable/PromiseObservable": function() {
return __webpack_require__(169);
},
"rxjs/observable/PromiseObservable.js": function() {
return __webpack_require__(169);
},
"rxjs/operator/toPromise": function() {
return __webpack_require__(170);
},
"rxjs/operator/toPromise.js": function() {
return __webpack_require__(170);
},
"rxjs/symbol/observable": function() {
return __webpack_require__(154);
},
"rxjs/symbol/observable.js": function() {
return __webpack_require__(154);
},
"rxjs/symbol/rxSubscriber": function() {
return __webpack_require__(164);
},
"rxjs/symbol/rxSubscriber.js": function() {
return __webpack_require__(164);
},
"rxjs/util/ObjectUnsubscribedError": function() {
return __webpack_require__(168);
},
"rxjs/util/ObjectUnsubscribedError.js": function() {
return __webpack_require__(168);
},
"rxjs/util/UnsubscriptionError": function() {
return __webpack_require__(163);
},
"rxjs/util/UnsubscriptionError.js": function() {
return __webpack_require__(163);
},
"rxjs/util/errorObject": function() {
return __webpack_require__(162);
},
"rxjs/util/errorObject.js": function() {
return __webpack_require__(162);
},
"rxjs/util/isArray": function() {
return __webpack_require__(159);
},
"rxjs/util/isArray.js": function() {
return __webpack_require__(159);
},
"rxjs/util/isFunction": function() {
return __webpack_require__(157);
},
"rxjs/util/isFunction.js": function() {
return __webpack_require__(157);
},
"rxjs/util/isObject": function() {
return __webpack_require__(160);
},
"rxjs/util/isObject.js": function() {
return __webpack_require__(160);
},
"rxjs/util/root": function() {
return __webpack_require__(152);
},
"rxjs/util/root.js": function() {
return __webpack_require__(152);
},
"rxjs/util/throwError": function() {
return __webpack_require__(167);
},
"rxjs/util/throwError.js": function() {
return __webpack_require__(167);
},
"rxjs/util/toSubscriber": function() {
return __webpack_require__(155);
},
"rxjs/util/toSubscriber.js": function() {
return __webpack_require__(155);
},
"rxjs/util/tryCatch": function() {
return __webpack_require__(161);
},
"rxjs/util/tryCatch.js": function() {
return __webpack_require__(161);
},
text: function() {
return __webpack_require__(21);
},
"text/": function() {
return __webpack_require__(21);
},
"text/formatted-string": function() {
return __webpack_require__(60);
},
"text/formatted-string-common": function() {
return __webpack_require__(61);
},
"text/formatted-string-common.js": function() {
return __webpack_require__(61);
},
"text/formatted-string.js": function() {
return __webpack_require__(60);
},
"text/span": function() {
return __webpack_require__(274);
},
"text/span-common": function() {
return __webpack_require__(275);
},
"text/span-common.js": function() {
return __webpack_require__(275);
},
"text/span.js": function() {
return __webpack_require__(274);
},
"text/text": function() {
return __webpack_require__(21);
},
"text/text.js": function() {
return __webpack_require__(21);
},
timer: function() {
return __webpack_require__(7);
},
"timer/": function() {
return __webpack_require__(7);
},
"timer/timer": function() {
return __webpack_require__(7);
},
"timer/timer.js": function() {
return __webpack_require__(7);
},
"tns-core-modules-widgets": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "tns-core-modules-widgets"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
"tns-core-modules-widgets/": function() {
return __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "tns-core-modules-widgets"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
},
trace: function() {
return __webpack_require__(30);
},
"trace/": function() {
return __webpack_require__(30);
},
"trace/trace": function() {
return __webpack_require__(30);
},
"trace/trace.js": function() {
return __webpack_require__(30);
},
"ui/action-bar": function() {
return __webpack_require__(75);
},
"ui/action-bar/": function() {
return __webpack_require__(75);
},
"ui/action-bar/action-bar": function() {
return __webpack_require__(75);
},
"ui/action-bar/action-bar-common": function() {
return __webpack_require__(76);
},
"ui/action-bar/action-bar-common.js": function() {
return __webpack_require__(76);
},
"ui/action-bar/action-bar.js": function() {
return __webpack_require__(75);
},
"ui/activity-indicator": function() {
return __webpack_require__(235);
},
"ui/activity-indicator/": function() {
return __webpack_require__(235);
},
"ui/activity-indicator/activity-indicator": function() {
return __webpack_require__(235);
},
"ui/activity-indicator/activity-indicator-common": function() {
return __webpack_require__(236);
},
"ui/activity-indicator/activity-indicator-common.js": function() {
return __webpack_require__(236);
},
"ui/activity-indicator/activity-indicator.js": function() {
return __webpack_require__(235);
},
"ui/animation": function() {
return __webpack_require__(25);
},
"ui/animation/": function() {
return __webpack_require__(25);
},
"ui/animation/animation": function() {
return __webpack_require__(25);
},
"ui/animation/animation-common": function() {
return __webpack_require__(26);
},
"ui/animation/animation-common.js": function() {
return __webpack_require__(26);
},
"ui/animation/animation.js": function() {
return __webpack_require__(25);
},
"ui/animation/keyframe-animation": function() {
return __webpack_require__(36);
},
"ui/animation/keyframe-animation.js": function() {
return __webpack_require__(36);
},
"ui/border": function() {
return __webpack_require__(237);
},
"ui/border/": function() {
return __webpack_require__(237);
},
"ui/border/border": function() {
return __webpack_require__(237);
},
"ui/border/border.js": function() {
return __webpack_require__(237);
},
"ui/builder": function() {
return __webpack_require__(82);
},
"ui/builder/": function() {
return __webpack_require__(82);
},
"ui/builder/binding-builder": function() {
return __webpack_require__(56);
},
"ui/builder/binding-builder.js": function() {
return __webpack_require__(56);
},
"ui/builder/builder": function() {
return __webpack_require__(82);
},
"ui/builder/builder.js": function() {
return __webpack_require__(82);
},
"ui/builder/component-builder": function() {
return __webpack_require__(85);
},
"ui/builder/component-builder.js": function() {
return __webpack_require__(85);
},
"ui/builder/special-properties": function() {
return __webpack_require__(39);
},
"ui/builder/special-properties.js": function() {
return __webpack_require__(39);
},
"ui/button": function() {
return __webpack_require__(51);
},
"ui/button/": function() {
return __webpack_require__(51);
},
"ui/button/button": function() {
return __webpack_require__(51);
},
"ui/button/button-common": function() {
return __webpack_require__(52);
},
"ui/button/button-common.js": function() {
return __webpack_require__(52);
},
"ui/button/button.js": function() {
return __webpack_require__(51);
},
"ui/content-view": function() {
return __webpack_require__(74);
},
"ui/content-view/": function() {
return __webpack_require__(74);
},
"ui/content-view/content-view": function() {
return __webpack_require__(74);
},
"ui/content-view/content-view.js": function() {
return __webpack_require__(74);
},
"ui/core/bindable": function() {
return __webpack_require__(54);
},
"ui/core/bindable.js": function() {
return __webpack_require__(54);
},
"ui/core/dependency-observable": function() {
return __webpack_require__(34);
},
"ui/core/dependency-observable.js": function() {
return __webpack_require__(34);
},
"ui/core/proxy": function() {
return __webpack_require__(53);
},
"ui/core/proxy.js": function() {
return __webpack_require__(53);
},
"ui/core/view": function() {
return __webpack_require__(12);
},
"ui/core/view-common": function() {
return __webpack_require__(13);
},
"ui/core/view-common.js": function() {
return __webpack_require__(13);
},
"ui/core/view.js": function() {
return __webpack_require__(12);
},
"ui/core/weak-event-listener": function() {
return __webpack_require__(55);
},
"ui/core/weak-event-listener.js": function() {
return __webpack_require__(55);
},
"ui/date-picker": function() {
return __webpack_require__(238);
},
"ui/date-picker/": function() {
return __webpack_require__(238);
},
"ui/date-picker/date-picker": function() {
return __webpack_require__(238);
},
"ui/date-picker/date-picker-common": function() {
return __webpack_require__(239);
},
"ui/date-picker/date-picker-common.js": function() {
return __webpack_require__(239);
},
"ui/date-picker/date-picker.js": function() {
return __webpack_require__(238);
},
"ui/dialogs": function() {
return __webpack_require__(8);
},
"ui/dialogs/": function() {
return __webpack_require__(8);
},
"ui/dialogs/dialogs": function() {
return __webpack_require__(8);
},
"ui/dialogs/dialogs-common": function() {
return __webpack_require__(9);
},
"ui/dialogs/dialogs-common.js": function() {
return __webpack_require__(9);
},
"ui/dialogs/dialogs.js": function() {
return __webpack_require__(8);
},
"ui/editable-text-base": function() {
return __webpack_require__(98);
},
"ui/editable-text-base/": function() {
return __webpack_require__(98);
},
"ui/editable-text-base/editable-text-base": function() {
return __webpack_require__(98);
},
"ui/editable-text-base/editable-text-base-common": function() {
return __webpack_require__(99);
},
"ui/editable-text-base/editable-text-base-common.js": function() {
return __webpack_require__(99);
},
"ui/editable-text-base/editable-text-base.js": function() {
return __webpack_require__(98);
},
"ui/enums": function() {
return __webpack_require__(24);
},
"ui/enums/": function() {
return __webpack_require__(24);
},
"ui/enums/enums": function() {
return __webpack_require__(24);
},
"ui/enums/enums.js": function() {
return __webpack_require__(24);
},
"ui/frame": function() {
return __webpack_require__(10);
},
"ui/frame/": function() {
return __webpack_require__(10);
},
"ui/frame/frame": function() {
return __webpack_require__(10);
},
"ui/frame/frame-common": function() {
return __webpack_require__(11);
},
"ui/frame/frame-common.js": function() {
return __webpack_require__(11);
},
"ui/frame/frame.js": function() {
return __webpack_require__(10);
},
"ui/gestures": function() {
return __webpack_require__(69);
},
"ui/gestures/": function() {
return __webpack_require__(69);
},
"ui/gestures/gestures": function() {
return __webpack_require__(69);
},
"ui/gestures/gestures-common": function() {
return __webpack_require__(70);
},
"ui/gestures/gestures-common.js": function() {
return __webpack_require__(70);
},
"ui/gestures/gestures.js": function() {
return __webpack_require__(69);
},
"ui/html-view": function() {
return __webpack_require__(240);
},
"ui/html-view/": function() {
return __webpack_require__(240);
},
"ui/html-view/html-view": function() {
return __webpack_require__(240);
},
"ui/html-view/html-view-common": function() {
return __webpack_require__(241);
},
"ui/html-view/html-view-common.js": function() {
return __webpack_require__(241);
},
"ui/html-view/html-view.js": function() {
return __webpack_require__(240);
},
"ui/image": function() {
return __webpack_require__(242);
},
"ui/image-cache": function() {
return __webpack_require__(569);
},
"ui/image-cache/": function() {
return __webpack_require__(569);
},
"ui/image-cache/image-cache": function() {
return __webpack_require__(569);
},
"ui/image-cache/image-cache-common": function() {
return __webpack_require__(570);
},
"ui/image-cache/image-cache-common.js": function() {
return __webpack_require__(570);
},
"ui/image-cache/image-cache.js": function() {
return __webpack_require__(569);
},
"ui/image/": function() {
return __webpack_require__(242);
},
"ui/image/image": function() {
return __webpack_require__(242);
},
"ui/image/image-common": function() {
return __webpack_require__(243);
},
"ui/image/image-common.js": function() {
return __webpack_require__(243);
},
"ui/image/image.js": function() {
return __webpack_require__(242);
},
"ui/label": function() {
return __webpack_require__(100);
},
"ui/label/": function() {
return __webpack_require__(100);
},
"ui/label/label": function() {
return __webpack_require__(100);
},
"ui/label/label-common": function() {
return __webpack_require__(101);
},
"ui/label/label-common.js": function() {
return __webpack_require__(101);
},
"ui/label/label.js": function() {
return __webpack_require__(100);
},
"ui/layouts/absolute-layout": function() {
return __webpack_require__(88);
},
"ui/layouts/absolute-layout/": function() {
return __webpack_require__(88);
},
"ui/layouts/absolute-layout/absolute-layout": function() {
return __webpack_require__(88);
},
"ui/layouts/absolute-layout/absolute-layout-common": function() {
return __webpack_require__(89);
},
"ui/layouts/absolute-layout/absolute-layout-common.js": function() {
return __webpack_require__(89);
},
"ui/layouts/absolute-layout/absolute-layout.js": function() {
return __webpack_require__(88);
},
"ui/layouts/dock-layout": function() {
return __webpack_require__(86);
},
"ui/layouts/dock-layout/": function() {
return __webpack_require__(86);
},
"ui/layouts/dock-layout/dock-layout": function() {
return __webpack_require__(86);
},
"ui/layouts/dock-layout/dock-layout-common": function() {
return __webpack_require__(87);
},
"ui/layouts/dock-layout/dock-layout-common.js": function() {
return __webpack_require__(87);
},
"ui/layouts/dock-layout/dock-layout.js": function() {
return __webpack_require__(86);
},
"ui/layouts/grid-layout": function() {
return __webpack_require__(77);
},
"ui/layouts/grid-layout/": function() {
return __webpack_require__(77);
},
"ui/layouts/grid-layout/grid-layout": function() {
return __webpack_require__(77);
},
"ui/layouts/grid-layout/grid-layout-common": function() {
return __webpack_require__(78);
},
"ui/layouts/grid-layout/grid-layout-common.js": function() {
return __webpack_require__(78);
},
"ui/layouts/grid-layout/grid-layout.js": function() {
return __webpack_require__(77);
},
"ui/layouts/layout": function() {
return __webpack_require__(571);
},
"ui/layouts/layout-base": function() {
return __webpack_require__(79);
},
"ui/layouts/layout-base-common": function() {
return __webpack_require__(80);
},
"ui/layouts/layout-base-common.js": function() {
return __webpack_require__(80);
},
"ui/layouts/layout-base.js": function() {
return __webpack_require__(79);
},
"ui/layouts/layout.js": function() {
return __webpack_require__(571);
},
"ui/layouts/stack-layout": function() {
return __webpack_require__(248);
},
"ui/layouts/stack-layout/": function() {
return __webpack_require__(248);
},
"ui/layouts/stack-layout/stack-layout": function() {
return __webpack_require__(248);
},
"ui/layouts/stack-layout/stack-layout-common": function() {
return __webpack_require__(249);
},
"ui/layouts/stack-layout/stack-layout-common.js": function() {
return __webpack_require__(249);
},
"ui/layouts/stack-layout/stack-layout.js": function() {
return __webpack_require__(248);
},
"ui/layouts/wrap-layout": function() {
return __webpack_require__(272);
},
"ui/layouts/wrap-layout/": function() {
return __webpack_require__(272);
},
"ui/layouts/wrap-layout/wrap-layout": function() {
return __webpack_require__(272);
},
"ui/layouts/wrap-layout/wrap-layout-common": function() {
return __webpack_require__(273);
},
"ui/layouts/wrap-layout/wrap-layout-common.js": function() {
return __webpack_require__(273);
},
"ui/layouts/wrap-layout/wrap-layout.js": function() {
return __webpack_require__(272);
},
"ui/list-picker": function() {
return __webpack_require__(244);
},
"ui/list-picker/": function() {
return __webpack_require__(244);
},
"ui/list-picker/list-picker": function() {
return __webpack_require__(244);
},
"ui/list-picker/list-picker-common": function() {
return __webpack_require__(245);
},
"ui/list-picker/list-picker-common.js": function() {
return __webpack_require__(245);
},
"ui/list-picker/list-picker.js": function() {
return __webpack_require__(244);
},
"ui/list-view": function() {
return __webpack_require__(246);
},
"ui/list-view/": function() {
return __webpack_require__(246);
},
"ui/list-view/list-view": function() {
return __webpack_require__(246);
},
"ui/list-view/list-view-common": function() {
return __webpack_require__(247);
},
"ui/list-view/list-view-common.js": function() {
return __webpack_require__(247);
},
"ui/list-view/list-view.js": function() {
return __webpack_require__(246);
},
"ui/page": function() {
return __webpack_require__(72);
},
"ui/page/": function() {
return __webpack_require__(72);
},
"ui/page/page": function() {
return __webpack_require__(72);
},
"ui/page/page-common": function() {
return __webpack_require__(73);
},
"ui/page/page-common.js": function() {
return __webpack_require__(73);
},
"ui/page/page.js": function() {
return __webpack_require__(72);
},
"ui/placeholder": function() {
return __webpack_require__(232);
},
"ui/placeholder/": function() {
return __webpack_require__(232);
},
"ui/placeholder/placeholder": function() {
return __webpack_require__(232);
},
"ui/placeholder/placeholder-common": function() {
return __webpack_require__(233);
},
"ui/placeholder/placeholder-common.js": function() {
return __webpack_require__(233);
},
"ui/placeholder/placeholder.js": function() {
return __webpack_require__(232);
},
"ui/progress": function() {
return __webpack_require__(251);
},
"ui/progress/": function() {
return __webpack_require__(251);
},
"ui/progress/progress": function() {
return __webpack_require__(251);
},
"ui/progress/progress-common": function() {
return __webpack_require__(252);
},
"ui/progress/progress-common.js": function() {
return __webpack_require__(252);
},
"ui/progress/progress.js": function() {
return __webpack_require__(251);
},
"ui/proxy-view-container": function() {
return __webpack_require__(250);
},
"ui/proxy-view-container/": function() {
return __webpack_require__(250);
},
"ui/proxy-view-container/proxy-view-container": function() {
return __webpack_require__(250);
},
"ui/proxy-view-container/proxy-view-container.js": function() {
return __webpack_require__(250);
},
"ui/repeater": function() {
return __webpack_require__(253);
},
"ui/repeater/": function() {
return __webpack_require__(253);
},
"ui/repeater/repeater": function() {
return __webpack_require__(253);
},
"ui/repeater/repeater.js": function() {
return __webpack_require__(253);
},
"ui/scroll-view": function() {
return __webpack_require__(254);
},
"ui/scroll-view/": function() {
return __webpack_require__(254);
},
"ui/scroll-view/scroll-view": function() {
return __webpack_require__(254);
},
"ui/scroll-view/scroll-view-common": function() {
return __webpack_require__(255);
},
"ui/scroll-view/scroll-view-common.js": function() {
return __webpack_require__(255);
},
"ui/scroll-view/scroll-view.js": function() {
return __webpack_require__(254);
},
"ui/search-bar": function() {
return __webpack_require__(256);
},
"ui/search-bar/": function() {
return __webpack_require__(256);
},
"ui/search-bar/search-bar": function() {
return __webpack_require__(256);
},
"ui/search-bar/search-bar-common": function() {
return __webpack_require__(257);
},
"ui/search-bar/search-bar-common.js": function() {
return __webpack_require__(257);
},
"ui/search-bar/search-bar.js": function() {
return __webpack_require__(256);
},
"ui/segmented-bar": function() {
return __webpack_require__(258);
},
"ui/segmented-bar/": function() {
return __webpack_require__(258);
},
"ui/segmented-bar/segmented-bar": function() {
return __webpack_require__(258);
},
"ui/segmented-bar/segmented-bar-common": function() {
return __webpack_require__(259);
},
"ui/segmented-bar/segmented-bar-common.js": function() {
return __webpack_require__(259);
},
"ui/segmented-bar/segmented-bar.js": function() {
return __webpack_require__(258);
},
"ui/slider": function() {
return __webpack_require__(260);
},
"ui/slider/": function() {
return __webpack_require__(260);
},
"ui/slider/slider": function() {
return __webpack_require__(260);
},
"ui/slider/slider-common": function() {
return __webpack_require__(261);
},
"ui/slider/slider-common.js": function() {
return __webpack_require__(261);
},
"ui/slider/slider.js": function() {
return __webpack_require__(260);
},
"ui/styling": function() {
return __webpack_require__(68);
},
"ui/styling/": function() {
return __webpack_require__(68);
},
"ui/styling/background": function() {
return __webpack_require__(48);
},
"ui/styling/background-common": function() {
return __webpack_require__(49);
},
"ui/styling/background-common.js": function() {
return __webpack_require__(49);
},
"ui/styling/background.js": function() {
return __webpack_require__(48);
},
"ui/styling/converters": function() {
return __webpack_require__(38);
},
"ui/styling/converters.js": function() {
return __webpack_require__(38);
},
"ui/styling/css-animation-parser": function() {
return __webpack_require__(37);
},
"ui/styling/css-animation-parser.js": function() {
return __webpack_require__(37);
},
"ui/styling/css-selector": function() {
return __webpack_require__(33);
},
"ui/styling/css-selector.js": function() {
return __webpack_require__(33);
},
"ui/styling/font": function() {
return __webpack_require__(46);
},
"ui/styling/font-common": function() {
return __webpack_require__(47);
},
"ui/styling/font-common.js": function() {
return __webpack_require__(47);
},
"ui/styling/font.js": function() {
return __webpack_require__(46);
},
"ui/styling/style": function() {
return __webpack_require__(15);
},
"ui/styling/style-property": function() {
return __webpack_require__(35);
},
"ui/styling/style-property.js": function() {
return __webpack_require__(35);
},
"ui/styling/style-scope": function() {
return __webpack_require__(32);
},
"ui/styling/style-scope.js": function() {
return __webpack_require__(32);
},
"ui/styling/style.js": function() {
return __webpack_require__(15);
},
"ui/styling/styling": function() {
return __webpack_require__(68);
},
"ui/styling/styling.js": function() {
return __webpack_require__(68);
},
"ui/styling/visual-state": function() {
return __webpack_require__(42);
},
"ui/styling/visual-state-constants": function() {
return __webpack_require__(43);
},
"ui/styling/visual-state-constants.js": function() {
return __webpack_require__(43);
},
"ui/styling/visual-state.js": function() {
return __webpack_require__(42);
},
"ui/switch": function() {
return __webpack_require__(262);
},
"ui/switch/": function() {
return __webpack_require__(262);
},
"ui/switch/switch": function() {
return __webpack_require__(262);
},
"ui/switch/switch-common": function() {
return __webpack_require__(263);
},
"ui/switch/switch-common.js": function() {
return __webpack_require__(263);
},
"ui/switch/switch.js": function() {
return __webpack_require__(262);
},
"ui/tab-view": function() {
return __webpack_require__(264);
},
"ui/tab-view/": function() {
return __webpack_require__(264);
},
"ui/tab-view/tab-view": function() {
return __webpack_require__(264);
},
"ui/tab-view/tab-view-common": function() {
return __webpack_require__(265);
},
"ui/tab-view/tab-view-common.js": function() {
return __webpack_require__(265);
},
"ui/tab-view/tab-view.js": function() {
return __webpack_require__(264);
},
"ui/text-base": function() {
return __webpack_require__(96);
},
"ui/text-base/": function() {
return __webpack_require__(96);
},
"ui/text-base/text-base": function() {
return __webpack_require__(96);
},
"ui/text-base/text-base-common": function() {
return __webpack_require__(97);
},
"ui/text-base/text-base-common.js": function() {
return __webpack_require__(97);
},
"ui/text-base/text-base-styler": function() {
return __webpack_require__(63);
},
"ui/text-base/text-base-styler.js": function() {
return __webpack_require__(63);
},
"ui/text-base/text-base.js": function() {
return __webpack_require__(96);
},
"ui/text-field": function() {
return __webpack_require__(94);
},
"ui/text-field/": function() {
return __webpack_require__(94);
},
"ui/text-field/text-field": function() {
return __webpack_require__(94);
},
"ui/text-field/text-field-common": function() {
return __webpack_require__(95);
},
"ui/text-field/text-field-common.js": function() {
return __webpack_require__(95);
},
"ui/text-field/text-field.js": function() {
return __webpack_require__(94);
},
"ui/text-view": function() {
return __webpack_require__(266);
},
"ui/text-view/": function() {
return __webpack_require__(266);
},
"ui/text-view/text-view": function() {
return __webpack_require__(266);
},
"ui/text-view/text-view-common": function() {
return __webpack_require__(267);
},
"ui/text-view/text-view-common.js": function() {
return __webpack_require__(267);
},
"ui/text-view/text-view.js": function() {
return __webpack_require__(266);
},
"ui/time-picker": function() {
return __webpack_require__(268);
},
"ui/time-picker/": function() {
return __webpack_require__(268);
},
"ui/time-picker/time-picker": function() {
return __webpack_require__(268);
},
"ui/time-picker/time-picker-common": function() {
return __webpack_require__(269);
},
"ui/time-picker/time-picker-common.js": function() {
return __webpack_require__(269);
},
"ui/time-picker/time-picker.js": function() {
return __webpack_require__(268);
},
"ui/transition": function() {
return __webpack_require__(90);
},
"ui/transition/": function() {
return __webpack_require__(90);
},
"ui/transition/fade-transition": function() {
return __webpack_require__(92);
},
"ui/transition/fade-transition.js": function() {
return __webpack_require__(92);
},
"ui/transition/flip-transition": function() {
return __webpack_require__(93);
},
"ui/transition/flip-transition.js": function() {
return __webpack_require__(93);
},
"ui/transition/slide-transition": function() {
return __webpack_require__(91);
},
"ui/transition/slide-transition.js": function() {
return __webpack_require__(91);
},
"ui/transition/transition": function() {
return __webpack_require__(90);
},
"ui/transition/transition.js": function() {
return __webpack_require__(90);
},
"ui/web-view": function() {
return __webpack_require__(270);
},
"ui/web-view/": function() {
return __webpack_require__(270);
},
"ui/web-view/web-view": function() {
return __webpack_require__(270);
},
"ui/web-view/web-view-common": function() {
return __webpack_require__(271);
},
"ui/web-view/web-view-common.js": function() {
return __webpack_require__(271);
},
"ui/web-view/web-view.js": function() {
return __webpack_require__(270);
},
url: function() {
return __webpack_require__(572);
},
"url/": function() {
return __webpack_require__(572);
},
"url/test": function() {
return __webpack_require__(576);
},
"url/test.js": function() {
return __webpack_require__(576);
},
"url/url": function() {
return __webpack_require__(572);
},
"url/url.js": function() {
return __webpack_require__(572);
},
"utils/debug": function() {
return __webpack_require__(71);
},
"utils/debug.js": function() {
return __webpack_require__(71);
},
"utils/lazy": function() {
return __webpack_require__(31);
},
"utils/lazy.js": function() {
return __webpack_require__(31);
},
"utils/module-merge": function() {
return __webpack_require__(580);
},
"utils/module-merge.js": function() {
return __webpack_require__(580);
},
"utils/number-utils": function() {
return __webpack_require__(81);
},
"utils/number-utils.js": function() {
return __webpack_require__(81);
},
"utils/types": function() {
return __webpack_require__(14);
},
"utils/types.js": function() {
return __webpack_require__(14);
},
"utils/utils": function() {
return __webpack_require__(22);
},
"utils/utils-common": function() {
return __webpack_require__(23);
},
"utils/utils-common.js": function() {
return __webpack_require__(23);
},
"utils/utils.js": function() {
return __webpack_require__(22);
},
xhr: function() {
return __webpack_require__(102);
},
"xhr/": function() {
return __webpack_require__(102);
},
"xhr/xhr": function() {
return __webpack_require__(102);
},
"xhr/xhr.js": function() {
return __webpack_require__(102);
},
xml: function() {
return __webpack_require__(83);
},
"xml/": function() {
return __webpack_require__(83);
},
"xml/xml": function() {
return __webpack_require__(83);
},
"xml/xml.js": function() {
return __webpack_require__(83);
}
};
return function(moduleId) {
moduleId = moduleId.replace(/^\.\/tns_modules\//, "");
var module;
var moduleEntry = map[moduleId];
if (moduleEntry) {
module = moduleEntry();
if (module && module.evalLazy) {
module.evalLazy();
delete module.evalLazy;
}
}
return module;
};
}();
}, function(module, exports, __webpack_require__) {
"use strict";
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
__export(__webpack_require__(479));
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var http_1 = __webpack_require__(480);
var xhr_backend_1 = __webpack_require__(493);
var jsonp_backend_1 = __webpack_require__(497);
var browser_xhr_1 = __webpack_require__(496);
var browser_jsonp_1 = __webpack_require__(498);
var base_request_options_1 = __webpack_require__(491);
var base_response_options_1 = __webpack_require__(495);
var static_request_1 = __webpack_require__(487);
exports.Request = static_request_1.Request;
var static_response_1 = __webpack_require__(494);
exports.Response = static_response_1.Response;
var interfaces_1 = __webpack_require__(486);
exports.Connection = interfaces_1.Connection;
exports.ConnectionBackend = interfaces_1.ConnectionBackend;
var browser_xhr_2 = __webpack_require__(496);
exports.BrowserXhr = browser_xhr_2.BrowserXhr;
var base_request_options_2 = __webpack_require__(491);
exports.BaseRequestOptions = base_request_options_2.BaseRequestOptions;
exports.RequestOptions = base_request_options_2.RequestOptions;
var base_response_options_2 = __webpack_require__(495);
exports.BaseResponseOptions = base_response_options_2.BaseResponseOptions;
exports.ResponseOptions = base_response_options_2.ResponseOptions;
var xhr_backend_2 = __webpack_require__(493);
exports.XHRBackend = xhr_backend_2.XHRBackend;
exports.XHRConnection = xhr_backend_2.XHRConnection;
var jsonp_backend_2 = __webpack_require__(497);
exports.JSONPBackend = jsonp_backend_2.JSONPBackend;
exports.JSONPConnection = jsonp_backend_2.JSONPConnection;
var http_2 = __webpack_require__(480);
exports.Http = http_2.Http;
exports.Jsonp = http_2.Jsonp;
var headers_1 = __webpack_require__(488);
exports.Headers = headers_1.Headers;
var enums_1 = __webpack_require__(490);
exports.ResponseType = enums_1.ResponseType;
exports.ReadyState = enums_1.ReadyState;
exports.RequestMethod = enums_1.RequestMethod;
var url_search_params_1 = __webpack_require__(492);
exports.URLSearchParams = url_search_params_1.URLSearchParams;
exports.HTTP_PROVIDERS = [ core_1.provide(http_1.Http, {
useFactory: function(xhrBackend, requestOptions) {
return new http_1.Http(xhrBackend, requestOptions);
},
deps: [ xhr_backend_1.XHRBackend, base_request_options_1.RequestOptions ]
}), browser_xhr_1.BrowserXhr, core_1.provide(base_request_options_1.RequestOptions, {
useClass: base_request_options_1.BaseRequestOptions
}), core_1.provide(base_response_options_1.ResponseOptions, {
useClass: base_response_options_1.BaseResponseOptions
}), xhr_backend_1.XHRBackend ];
exports.HTTP_BINDINGS = exports.HTTP_PROVIDERS;
exports.JSONP_PROVIDERS = [ core_1.provide(http_1.Jsonp, {
useFactory: function(jsonpBackend, requestOptions) {
return new http_1.Jsonp(jsonpBackend, requestOptions);
},
deps: [ jsonp_backend_1.JSONPBackend, base_request_options_1.RequestOptions ]
}), browser_jsonp_1.BrowserJsonp, core_1.provide(base_request_options_1.RequestOptions, {
useClass: base_request_options_1.BaseRequestOptions
}), core_1.provide(base_response_options_1.ResponseOptions, {
useClass: base_response_options_1.BaseResponseOptions
}), core_1.provide(jsonp_backend_1.JSONPBackend, {
useClass: jsonp_backend_1.JSONPBackend_
}) ];
exports.JSON_BINDINGS = exports.JSONP_PROVIDERS;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(481);
var exceptions_1 = __webpack_require__(482);
var core_1 = __webpack_require__(118);
var interfaces_1 = __webpack_require__(486);
var static_request_1 = __webpack_require__(487);
var base_request_options_1 = __webpack_require__(491);
var enums_1 = __webpack_require__(490);
function httpRequest(backend, request) {
return backend.createConnection(request).response;
}
function mergeOptions(defaultOpts, providedOpts, method, url) {
var newOptions = defaultOpts;
if (lang_1.isPresent(providedOpts)) {
return newOptions.merge(new base_request_options_1.RequestOptions({
method: providedOpts.method || method,
url: providedOpts.url || url,
search: providedOpts.search,
headers: providedOpts.headers,
body: providedOpts.body
}));
}
if (lang_1.isPresent(method)) {
return newOptions.merge(new base_request_options_1.RequestOptions({
method: method,
url: url
}));
} else {
return newOptions.merge(new base_request_options_1.RequestOptions({
url: url
}));
}
}
var Http = function() {
function Http(_backend, _defaultOptions) {
this._backend = _backend;
this._defaultOptions = _defaultOptions;
}
Http.prototype.request = function(url, options) {
var responseObservable;
if (lang_1.isString(url)) {
responseObservable = httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_1.RequestMethod.Get, url)));
} else if (url instanceof static_request_1.Request) {
responseObservable = httpRequest(this._backend, url);
} else {
throw exceptions_1.makeTypeError("First argument must be a url string or Request instance.");
}
return responseObservable;
};
Http.prototype.get = function(url, options) {
return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_1.RequestMethod.Get, url)));
};
Http.prototype.post = function(url, body, options) {
return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions.merge(new base_request_options_1.RequestOptions({
body: body
})), options, enums_1.RequestMethod.Post, url)));
};
Http.prototype.put = function(url, body, options) {
return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions.merge(new base_request_options_1.RequestOptions({
body: body
})), options, enums_1.RequestMethod.Put, url)));
};
Http.prototype.delete = function(url, options) {
return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_1.RequestMethod.Delete, url)));
};
Http.prototype.patch = function(url, body, options) {
return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions.merge(new base_request_options_1.RequestOptions({
body: body
})), options, enums_1.RequestMethod.Patch, url)));
};
Http.prototype.head = function(url, options) {
return httpRequest(this._backend, new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_1.RequestMethod.Head, url)));
};
Http.decorators = [ {
type: core_1.Injectable
} ];
Http.ctorParameters = [ {
type: interfaces_1.ConnectionBackend
}, {
type: base_request_options_1.RequestOptions
} ];
return Http;
}();
exports.Http = Http;
var Jsonp = function(_super) {
__extends(Jsonp, _super);
function Jsonp(backend, defaultOptions) {
_super.call(this, backend, defaultOptions);
}
Jsonp.prototype.request = function(url, options) {
var responseObservable;
if (lang_1.isString(url)) {
url = new static_request_1.Request(mergeOptions(this._defaultOptions, options, enums_1.RequestMethod.Get, url));
}
if (url instanceof static_request_1.Request) {
if (url.method !== enums_1.RequestMethod.Get) {
exceptions_1.makeTypeError("JSONP requests must use GET request method.");
}
responseObservable = httpRequest(this._backend, url);
} else {
throw exceptions_1.makeTypeError("First argument must be a url string or Request instance.");
}
return responseObservable;
};
Jsonp.decorators = [ {
type: core_1.Injectable
} ];
Jsonp.ctorParameters = [ {
type: interfaces_1.ConnectionBackend
}, {
type: base_request_options_1.RequestOptions
} ];
return Jsonp;
}(Http);
exports.Jsonp = Jsonp;
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var globalScope;
if (typeof window === "undefined") {
if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) {
globalScope = self;
} else {
globalScope = global;
}
} else {
globalScope = window;
}
function scheduleMicroTask(fn) {
Zone.current.scheduleMicroTask("scheduleMicrotask", fn);
}
exports.scheduleMicroTask = scheduleMicroTask;
exports.IS_DART = false;
var _global = globalScope;
exports.global = _global;
exports.Type = Function;
function getTypeNameForDebugging(type) {
if (type["name"]) {
return type["name"];
}
return typeof type;
}
exports.getTypeNameForDebugging = getTypeNameForDebugging;
exports.Math = _global.Math;
exports.Date = _global.Date;
var _devMode = true;
var _modeLocked = false;
function lockMode() {
_modeLocked = true;
}
exports.lockMode = lockMode;
function enableProdMode() {
if (_modeLocked) {
throw "Cannot enable prod mode after platform setup.";
}
_devMode = false;
}
exports.enableProdMode = enableProdMode;
function assertionsEnabled() {
return _devMode;
}
exports.assertionsEnabled = assertionsEnabled;
_global.assert = function assert(condition) {};
function isPresent(obj) {
return obj !== undefined && obj !== null;
}
exports.isPresent = isPresent;
function isBlank(obj) {
return obj === undefined || obj === null;
}
exports.isBlank = isBlank;
function isBoolean(obj) {
return typeof obj === "boolean";
}
exports.isBoolean = isBoolean;
function isNumber(obj) {
return typeof obj === "number";
}
exports.isNumber = isNumber;
function isString(obj) {
return typeof obj === "string";
}
exports.isString = isString;
function isFunction(obj) {
return typeof obj === "function";
}
exports.isFunction = isFunction;
function isType(obj) {
return isFunction(obj);
}
exports.isType = isType;
function isStringMap(obj) {
return typeof obj === "object" && obj !== null;
}
exports.isStringMap = isStringMap;
var STRING_MAP_PROTO = Object.getPrototypeOf({});
function isStrictStringMap(obj) {
return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
}
exports.isStrictStringMap = isStrictStringMap;
function isPromise(obj) {
return obj instanceof _global.Promise;
}
exports.isPromise = isPromise;
function isArray(obj) {
return Array.isArray(obj);
}
exports.isArray = isArray;
function isDate(obj) {
return obj instanceof exports.Date && !isNaN(obj.valueOf());
}
exports.isDate = isDate;
function noop() {}
exports.noop = noop;
function stringify(token) {
if (typeof token === "string") {
return token;
}
if (token === undefined || token === null) {
return "" + token;
}
if (token.name) {
return token.name;
}
if (token.overriddenName) {
return token.overriddenName;
}
var res = token.toString();
var newLineIndex = res.indexOf("\n");
return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
exports.stringify = stringify;
function serializeEnum(val) {
return val;
}
exports.serializeEnum = serializeEnum;
function deserializeEnum(val, values) {
return val;
}
exports.deserializeEnum = deserializeEnum;
function resolveEnumToken(enumValue, val) {
return enumValue[val];
}
exports.resolveEnumToken = resolveEnumToken;
var StringWrapper = function() {
function StringWrapper() {}
StringWrapper.fromCharCode = function(code) {
return String.fromCharCode(code);
};
StringWrapper.charCodeAt = function(s, index) {
return s.charCodeAt(index);
};
StringWrapper.split = function(s, regExp) {
return s.split(regExp);
};
StringWrapper.equals = function(s, s2) {
return s === s2;
};
StringWrapper.stripLeft = function(s, charVal) {
if (s && s.length) {
var pos = 0;
for (var i = 0; i < s.length; i++) {
if (s[i] != charVal) break;
pos++;
}
s = s.substring(pos);
}
return s;
};
StringWrapper.stripRight = function(s, charVal) {
if (s && s.length) {
var pos = s.length;
for (var i = s.length - 1; i >= 0; i--) {
if (s[i] != charVal) break;
pos--;
}
s = s.substring(0, pos);
}
return s;
};
StringWrapper.replace = function(s, from, replace) {
return s.replace(from, replace);
};
StringWrapper.replaceAll = function(s, from, replace) {
return s.replace(from, replace);
};
StringWrapper.slice = function(s, from, to) {
if (from === void 0) {
from = 0;
}
if (to === void 0) {
to = null;
}
return s.slice(from, to === null ? undefined : to);
};
StringWrapper.replaceAllMapped = function(s, from, cb) {
return s.replace(from, function() {
var matches = [];
for (var _i = 0; _i < arguments.length; _i++) {
matches[_i - 0] = arguments[_i];
}
matches.splice(-2, 2);
return cb(matches);
});
};
StringWrapper.contains = function(s, substr) {
return s.indexOf(substr) != -1;
};
StringWrapper.compare = function(a, b) {
if (a < b) {
return -1;
} else if (a > b) {
return 1;
} else {
return 0;
}
};
return StringWrapper;
}();
exports.StringWrapper = StringWrapper;
var StringJoiner = function() {
function StringJoiner(parts) {
if (parts === void 0) {
parts = [];
}
this.parts = parts;
}
StringJoiner.prototype.add = function(part) {
this.parts.push(part);
};
StringJoiner.prototype.toString = function() {
return this.parts.join("");
};
return StringJoiner;
}();
exports.StringJoiner = StringJoiner;
var NumberParseError = function(_super) {
__extends(NumberParseError, _super);
function NumberParseError(message) {
_super.call(this);
this.message = message;
}
NumberParseError.prototype.toString = function() {
return this.message;
};
return NumberParseError;
}(Error);
exports.NumberParseError = NumberParseError;
var NumberWrapper = function() {
function NumberWrapper() {}
NumberWrapper.toFixed = function(n, fractionDigits) {
return n.toFixed(fractionDigits);
};
NumberWrapper.equal = function(a, b) {
return a === b;
};
NumberWrapper.parseIntAutoRadix = function(text) {
var result = parseInt(text);
if (isNaN(result)) {
throw new NumberParseError("Invalid integer literal when parsing " + text);
}
return result;
};
NumberWrapper.parseInt = function(text, radix) {
if (radix == 10) {
if (/^(\-|\+)?[0-9]+$/.test(text)) {
return parseInt(text, radix);
}
} else if (radix == 16) {
if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
return parseInt(text, radix);
}
} else {
var result = parseInt(text, radix);
if (!isNaN(result)) {
return result;
}
}
throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " + radix);
};
NumberWrapper.parseFloat = function(text) {
return parseFloat(text);
};
Object.defineProperty(NumberWrapper, "NaN", {
get: function() {
return NaN;
},
enumerable: true,
configurable: true
});
NumberWrapper.isNaN = function(value) {
return isNaN(value);
};
NumberWrapper.isInteger = function(value) {
return Number.isInteger(value);
};
return NumberWrapper;
}();
exports.NumberWrapper = NumberWrapper;
exports.RegExp = _global.RegExp;
var RegExpWrapper = function() {
function RegExpWrapper() {}
RegExpWrapper.create = function(regExpStr, flags) {
if (flags === void 0) {
flags = "";
}
flags = flags.replace(/g/g, "");
return new _global.RegExp(regExpStr, flags + "g");
};
RegExpWrapper.firstMatch = function(regExp, input) {
regExp.lastIndex = 0;
return regExp.exec(input);
};
RegExpWrapper.test = function(regExp, input) {
regExp.lastIndex = 0;
return regExp.test(input);
};
RegExpWrapper.matcher = function(regExp, input) {
regExp.lastIndex = 0;
return {
re: regExp,
input: input
};
};
RegExpWrapper.replaceAll = function(regExp, input, replace) {
var c = regExp.exec(input);
var res = "";
regExp.lastIndex = 0;
var prev = 0;
while (c) {
res += input.substring(prev, c.index);
res += replace(c);
prev = c.index + c[0].length;
regExp.lastIndex = prev;
c = regExp.exec(input);
}
res += input.substring(prev);
return res;
};
return RegExpWrapper;
}();
exports.RegExpWrapper = RegExpWrapper;
var RegExpMatcherWrapper = function() {
function RegExpMatcherWrapper() {}
RegExpMatcherWrapper.next = function(matcher) {
return matcher.re.exec(matcher.input);
};
return RegExpMatcherWrapper;
}();
exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
var FunctionWrapper = function() {
function FunctionWrapper() {}
FunctionWrapper.apply = function(fn, posArgs) {
return fn.apply(null, posArgs);
};
return FunctionWrapper;
}();
exports.FunctionWrapper = FunctionWrapper;
function looseIdentical(a, b) {
return a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
}
exports.looseIdentical = looseIdentical;
function getMapKey(value) {
return value;
}
exports.getMapKey = getMapKey;
function normalizeBlank(obj) {
return isBlank(obj) ? null : obj;
}
exports.normalizeBlank = normalizeBlank;
function normalizeBool(obj) {
return isBlank(obj) ? false : obj;
}
exports.normalizeBool = normalizeBool;
function isJsObject(o) {
return o !== null && (typeof o === "function" || typeof o === "object");
}
exports.isJsObject = isJsObject;
function print(obj) {
console.log(obj);
}
exports.print = print;
function warn(obj) {
console.warn(obj);
}
exports.warn = warn;
var Json = function() {
function Json() {}
Json.parse = function(s) {
return _global.JSON.parse(s);
};
Json.stringify = function(data) {
return _global.JSON.stringify(data, null, 2);
};
return Json;
}();
exports.Json = Json;
var DateWrapper = function() {
function DateWrapper() {}
DateWrapper.create = function(year, month, day, hour, minutes, seconds, milliseconds) {
if (month === void 0) {
month = 1;
}
if (day === void 0) {
day = 1;
}
if (hour === void 0) {
hour = 0;
}
if (minutes === void 0) {
minutes = 0;
}
if (seconds === void 0) {
seconds = 0;
}
if (milliseconds === void 0) {
milliseconds = 0;
}
return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
};
DateWrapper.fromISOString = function(str) {
return new exports.Date(str);
};
DateWrapper.fromMillis = function(ms) {
return new exports.Date(ms);
};
DateWrapper.toMillis = function(date) {
return date.getTime();
};
DateWrapper.now = function() {
return new exports.Date();
};
DateWrapper.toJson = function(date) {
return date.toJSON();
};
return DateWrapper;
}();
exports.DateWrapper = DateWrapper;
function setValueOnPath(global, path, value) {
var parts = path.split(".");
var obj = global;
while (parts.length > 1) {
var name = parts.shift();
if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
obj = obj[name];
} else {
obj = obj[name] = {};
}
}
if (obj === undefined || obj === null) {
obj = {};
}
obj[parts.shift()] = value;
}
exports.setValueOnPath = setValueOnPath;
var _symbolIterator = null;
function getSymbolIterator() {
if (isBlank(_symbolIterator)) {
if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
_symbolIterator = Symbol.iterator;
} else {
var keys = Object.getOwnPropertyNames(Map.prototype);
for (var i = 0; i < keys.length; ++i) {
var key = keys[i];
if (key !== "entries" && key !== "size" && Map.prototype[key] === Map.prototype["entries"]) {
_symbolIterator = key;
}
}
}
}
return _symbolIterator;
}
exports.getSymbolIterator = getSymbolIterator;
function evalExpression(sourceUrl, expr, declarations, vars) {
var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
var fnArgNames = [];
var fnArgValues = [];
for (var argName in vars) {
fnArgNames.push(argName);
fnArgValues.push(vars[argName]);
}
return new (Function.bind.apply(Function, [ void 0 ].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
}
exports.evalExpression = evalExpression;
function isPrimitive(obj) {
return !isJsObject(obj);
}
exports.isPrimitive = isPrimitive;
function hasConstructor(value, type) {
return value.constructor === type;
}
exports.hasConstructor = hasConstructor;
function bitWiseOr(values) {
return values.reduce(function(a, b) {
return a | b;
});
}
exports.bitWiseOr = bitWiseOr;
function bitWiseAnd(values) {
return values.reduce(function(a, b) {
return a & b;
});
}
exports.bitWiseAnd = bitWiseAnd;
function escape(s) {
return _global.encodeURI(s);
}
exports.escape = escape;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var base_wrapped_exception_1 = __webpack_require__(483);
var exception_handler_1 = __webpack_require__(484);
var exception_handler_2 = __webpack_require__(484);
exports.ExceptionHandler = exception_handler_2.ExceptionHandler;
var BaseException = function(_super) {
__extends(BaseException, _super);
function BaseException(message) {
if (message === void 0) {
message = "--";
}
_super.call(this, message);
this.message = message;
this.stack = new Error(message).stack;
}
BaseException.prototype.toString = function() {
return this.message;
};
return BaseException;
}(Error);
exports.BaseException = BaseException;
var WrappedException = function(_super) {
__extends(WrappedException, _super);
function WrappedException(_wrapperMessage, _originalException, _originalStack, _context) {
_super.call(this, _wrapperMessage);
this._wrapperMessage = _wrapperMessage;
this._originalException = _originalException;
this._originalStack = _originalStack;
this._context = _context;
this._wrapperStack = new Error(_wrapperMessage).stack;
}
Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
get: function() {
return this._wrapperMessage;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "wrapperStack", {
get: function() {
return this._wrapperStack;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "originalException", {
get: function() {
return this._originalException;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "originalStack", {
get: function() {
return this._originalStack;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "context", {
get: function() {
return this._context;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "message", {
get: function() {
return exception_handler_1.ExceptionHandler.exceptionToString(this);
},
enumerable: true,
configurable: true
});
WrappedException.prototype.toString = function() {
return this.message;
};
return WrappedException;
}(base_wrapped_exception_1.BaseWrappedException);
exports.WrappedException = WrappedException;
function makeTypeError(message) {
return new TypeError(message);
}
exports.makeTypeError = makeTypeError;
function unimplemented() {
throw new BaseException("unimplemented");
}
exports.unimplemented = unimplemented;
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BaseWrappedException = function(_super) {
__extends(BaseWrappedException, _super);
function BaseWrappedException(message) {
_super.call(this, message);
}
Object.defineProperty(BaseWrappedException.prototype, "wrapperMessage", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "wrapperStack", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "originalException", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "originalStack", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "context", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "message", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
return BaseWrappedException;
}(Error);
exports.BaseWrappedException = BaseWrappedException;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(481);
var base_wrapped_exception_1 = __webpack_require__(483);
var collection_1 = __webpack_require__(485);
var _ArrayLogger = function() {
function _ArrayLogger() {
this.res = [];
}
_ArrayLogger.prototype.log = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logError = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logGroup = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logGroupEnd = function() {};
return _ArrayLogger;
}();
var ExceptionHandler = function() {
function ExceptionHandler(_logger, _rethrowException) {
if (_rethrowException === void 0) {
_rethrowException = true;
}
this._logger = _logger;
this._rethrowException = _rethrowException;
}
ExceptionHandler.exceptionToString = function(exception, stackTrace, reason) {
if (stackTrace === void 0) {
stackTrace = null;
}
if (reason === void 0) {
reason = null;
}
var l = new _ArrayLogger();
var e = new ExceptionHandler(l, false);
e.call(exception, stackTrace, reason);
return l.res.join("\n");
};
ExceptionHandler.prototype.call = function(exception, stackTrace, reason) {
if (stackTrace === void 0) {
stackTrace = null;
}
if (reason === void 0) {
reason = null;
}
var originalException = this._findOriginalException(exception);
var originalStack = this._findOriginalStack(exception);
var context = this._findContext(exception);
this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
this._logger.logError("STACKTRACE:");
this._logger.logError(this._longStackTrace(stackTrace));
}
if (lang_1.isPresent(reason)) {
this._logger.logError("REASON: " + reason);
}
if (lang_1.isPresent(originalException)) {
this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
}
if (lang_1.isPresent(originalStack)) {
this._logger.logError("ORIGINAL STACKTRACE:");
this._logger.logError(this._longStackTrace(originalStack));
}
if (lang_1.isPresent(context)) {
this._logger.logError("ERROR CONTEXT:");
this._logger.logError(context);
}
this._logger.logGroupEnd();
if (this._rethrowException) throw exception;
};
ExceptionHandler.prototype._extractMessage = function(exception) {
return exception instanceof base_wrapped_exception_1.BaseWrappedException ? exception.wrapperMessage : exception.toString();
};
ExceptionHandler.prototype._longStackTrace = function(stackTrace) {
return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join("\n\n-----async gap-----\n") : stackTrace.toString();
};
ExceptionHandler.prototype._findContext = function(exception) {
try {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
return lang_1.isPresent(exception.context) ? exception.context : this._findContext(exception.originalException);
} catch (e) {
return null;
}
};
ExceptionHandler.prototype._findOriginalException = function(exception) {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
var e = exception.originalException;
while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
e = e.originalException;
}
return e;
};
ExceptionHandler.prototype._findOriginalStack = function(exception) {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
var e = exception;
var stack = exception.originalStack;
while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
e = e.originalException;
if (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
stack = e.originalStack;
}
}
return stack;
};
return ExceptionHandler;
}();
exports.ExceptionHandler = ExceptionHandler;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(481);
exports.Map = lang_1.global.Map;
exports.Set = lang_1.global.Set;
var createMapFromPairs = function() {
try {
if (new exports.Map([ [ 1, 2 ] ]).size === 1) {
return function createMapFromPairs(pairs) {
return new exports.Map(pairs);
};
}
} catch (e) {}
return function createMapAndPopulateFromPairs(pairs) {
var map = new exports.Map();
for (var i = 0; i < pairs.length; i++) {
var pair = pairs[i];
map.set(pair[0], pair[1]);
}
return map;
};
}();
var createMapFromMap = function() {
try {
if (new exports.Map(new exports.Map())) {
return function createMapFromMap(m) {
return new exports.Map(m);
};
}
} catch (e) {}
return function createMapAndPopulateFromMap(m) {
var map = new exports.Map();
m.forEach(function(v, k) {
map.set(k, v);
});
return map;
};
}();
var _clearValues = function() {
if (new exports.Map().keys().next) {
return function _clearValues(m) {
var keyIterator = m.keys();
var k;
while (!(k = keyIterator.next()).done) {
m.set(k.value, null);
}
};
} else {
return function _clearValuesWithForeEach(m) {
m.forEach(function(v, k) {
m.set(k, null);
});
};
}
}();
var _arrayFromMap = function() {
try {
if (new exports.Map().values().next) {
return function createArrayFromMap(m, getValues) {
return getValues ? Array.from(m.values()) : Array.from(m.keys());
};
}
} catch (e) {}
return function createArrayFromMapWithForeach(m, getValues) {
var res = ListWrapper.createFixedSize(m.size), i = 0;
m.forEach(function(v, k) {
res[i] = getValues ? v : k;
i++;
});
return res;
};
}();
var MapWrapper = function() {
function MapWrapper() {}
MapWrapper.clone = function(m) {
return createMapFromMap(m);
};
MapWrapper.createFromStringMap = function(stringMap) {
var result = new exports.Map();
for (var prop in stringMap) {
result.set(prop, stringMap[prop]);
}
return result;
};
MapWrapper.toStringMap = function(m) {
var r = {};
m.forEach(function(v, k) {
return r[k] = v;
});
return r;
};
MapWrapper.createFromPairs = function(pairs) {
return createMapFromPairs(pairs);
};
MapWrapper.clearValues = function(m) {
_clearValues(m);
};
MapWrapper.iterable = function(m) {
return m;
};
MapWrapper.keys = function(m) {
return _arrayFromMap(m, false);
};
MapWrapper.values = function(m) {
return _arrayFromMap(m, true);
};
return MapWrapper;
}();
exports.MapWrapper = MapWrapper;
var StringMapWrapper = function() {
function StringMapWrapper() {}
StringMapWrapper.create = function() {
return {};
};
StringMapWrapper.contains = function(map, key) {
return map.hasOwnProperty(key);
};
StringMapWrapper.get = function(map, key) {
return map.hasOwnProperty(key) ? map[key] : undefined;
};
StringMapWrapper.set = function(map, key, value) {
map[key] = value;
};
StringMapWrapper.keys = function(map) {
return Object.keys(map);
};
StringMapWrapper.values = function(map) {
return Object.keys(map).reduce(function(r, a) {
r.push(map[a]);
return r;
}, []);
};
StringMapWrapper.isEmpty = function(map) {
for (var prop in map) {
return false;
}
return true;
};
StringMapWrapper.delete = function(map, key) {
delete map[key];
};
StringMapWrapper.forEach = function(map, callback) {
for (var prop in map) {
if (map.hasOwnProperty(prop)) {
callback(map[prop], prop);
}
}
};
StringMapWrapper.merge = function(m1, m2) {
var m = {};
for (var attr in m1) {
if (m1.hasOwnProperty(attr)) {
m[attr] = m1[attr];
}
}
for (var attr in m2) {
if (m2.hasOwnProperty(attr)) {
m[attr] = m2[attr];
}
}
return m;
};
StringMapWrapper.equals = function(m1, m2) {
var k1 = Object.keys(m1);
var k2 = Object.keys(m2);
if (k1.length != k2.length) {
return false;
}
var key;
for (var i = 0; i < k1.length; i++) {
key = k1[i];
if (m1[key] !== m2[key]) {
return false;
}
}
return true;
};
return StringMapWrapper;
}();
exports.StringMapWrapper = StringMapWrapper;
var ListWrapper = function() {
function ListWrapper() {}
ListWrapper.createFixedSize = function(size) {
return new Array(size);
};
ListWrapper.createGrowableSize = function(size) {
return new Array(size);
};
ListWrapper.clone = function(array) {
return array.slice(0);
};
ListWrapper.forEachWithIndex = function(array, fn) {
for (var i = 0; i < array.length; i++) {
fn(array[i], i);
}
};
ListWrapper.first = function(array) {
if (!array) return null;
return array[0];
};
ListWrapper.last = function(array) {
if (!array || array.length == 0) return null;
return array[array.length - 1];
};
ListWrapper.indexOf = function(array, value, startIndex) {
if (startIndex === void 0) {
startIndex = 0;
}
return array.indexOf(value, startIndex);
};
ListWrapper.contains = function(list, el) {
return list.indexOf(el) !== -1;
};
ListWrapper.reversed = function(array) {
var a = ListWrapper.clone(array);
return a.reverse();
};
ListWrapper.concat = function(a, b) {
return a.concat(b);
};
ListWrapper.insert = function(list, index, value) {
list.splice(index, 0, value);
};
ListWrapper.removeAt = function(list, index) {
var res = list[index];
list.splice(index, 1);
return res;
};
ListWrapper.removeAll = function(list, items) {
for (var i = 0; i < items.length; ++i) {
var index = list.indexOf(items[i]);
list.splice(index, 1);
}
};
ListWrapper.remove = function(list, el) {
var index = list.indexOf(el);
if (index > -1) {
list.splice(index, 1);
return true;
}
return false;
};
ListWrapper.clear = function(list) {
list.length = 0;
};
ListWrapper.isEmpty = function(list) {
return list.length == 0;
};
ListWrapper.fill = function(list, value, start, end) {
if (start === void 0) {
start = 0;
}
if (end === void 0) {
end = null;
}
list.fill(value, start, end === null ? list.length : end);
};
ListWrapper.equals = function(a, b) {
if (a.length != b.length) return false;
for (var i = 0; i < a.length; ++i) {
if (a[i] !== b[i]) return false;
}
return true;
};
ListWrapper.slice = function(l, from, to) {
if (from === void 0) {
from = 0;
}
if (to === void 0) {
to = null;
}
return l.slice(from, to === null ? undefined : to);
};
ListWrapper.splice = function(l, from, length) {
return l.splice(from, length);
};
ListWrapper.sort = function(l, compareFn) {
if (lang_1.isPresent(compareFn)) {
l.sort(compareFn);
} else {
l.sort();
}
};
ListWrapper.toString = function(l) {
return l.toString();
};
ListWrapper.toJSON = function(l) {
return JSON.stringify(l);
};
ListWrapper.maximum = function(list, predicate) {
if (list.length == 0) {
return null;
}
var solution = null;
var maxValue = -Infinity;
for (var index = 0; index < list.length; index++) {
var candidate = list[index];
if (lang_1.isBlank(candidate)) {
continue;
}
var candidateValue = predicate(candidate);
if (candidateValue > maxValue) {
solution = candidate;
maxValue = candidateValue;
}
}
return solution;
};
ListWrapper.flatten = function(list) {
var target = [];
_flattenArray(list, target);
return target;
};
ListWrapper.addAll = function(list, source) {
for (var i = 0; i < source.length; i++) {
list.push(source[i]);
}
};
return ListWrapper;
}();
exports.ListWrapper = ListWrapper;
function _flattenArray(source, target) {
if (lang_1.isPresent(source)) {
for (var i = 0; i < source.length; i++) {
var item = source[i];
if (lang_1.isArray(item)) {
_flattenArray(item, target);
} else {
target.push(item);
}
}
}
return target;
}
function isListLikeIterable(obj) {
if (!lang_1.isJsObject(obj)) return false;
return lang_1.isArray(obj) || !(obj instanceof exports.Map) && lang_1.getSymbolIterator() in obj;
}
exports.isListLikeIterable = isListLikeIterable;
function areIterablesEqual(a, b, comparator) {
var iterator1 = a[lang_1.getSymbolIterator()]();
var iterator2 = b[lang_1.getSymbolIterator()]();
while (true) {
var item1 = iterator1.next();
var item2 = iterator2.next();
if (item1.done && item2.done) return true;
if (item1.done || item2.done) return false;
if (!comparator(item1.value, item2.value)) return false;
}
}
exports.areIterablesEqual = areIterablesEqual;
function iterateListLike(obj, fn) {
if (lang_1.isArray(obj)) {
for (var i = 0; i < obj.length; i++) {
fn(obj[i]);
}
} else {
var iterator = obj[lang_1.getSymbolIterator()]();
var item;
while (!(item = iterator.next()).done) {
fn(item.value);
}
}
}
exports.iterateListLike = iterateListLike;
var createSetFromList = function() {
var test = new exports.Set([ 1, 2, 3 ]);
if (test.size === 3) {
return function createSetFromList(lst) {
return new exports.Set(lst);
};
} else {
return function createSetAndPopulateFromList(lst) {
var res = new exports.Set(lst);
if (res.size !== lst.length) {
for (var i = 0; i < lst.length; i++) {
res.add(lst[i]);
}
}
return res;
};
}
}();
var SetWrapper = function() {
function SetWrapper() {}
SetWrapper.createFromList = function(lst) {
return createSetFromList(lst);
};
SetWrapper.has = function(s, key) {
return s.has(key);
};
SetWrapper.delete = function(m, k) {
m.delete(k);
};
return SetWrapper;
}();
exports.SetWrapper = SetWrapper;
}, function(module, exports) {
"use strict";
var ConnectionBackend = function() {
function ConnectionBackend() {}
return ConnectionBackend;
}();
exports.ConnectionBackend = ConnectionBackend;
var Connection = function() {
function Connection() {}
return Connection;
}();
exports.Connection = Connection;
}, function(module, exports, __webpack_require__) {
"use strict";
var headers_1 = __webpack_require__(488);
var http_utils_1 = __webpack_require__(489);
var lang_1 = __webpack_require__(481);
var Request = function() {
function Request(requestOptions) {
var url = requestOptions.url;
this.url = requestOptions.url;
if (lang_1.isPresent(requestOptions.search)) {
var search = requestOptions.search.toString();
if (search.length > 0) {
var prefix = "?";
if (lang_1.StringWrapper.contains(this.url, "?")) {
prefix = this.url[this.url.length - 1] == "&" ? "" : "&";
}
this.url = url + prefix + search;
}
}
this._body = requestOptions.body;
this.method = http_utils_1.normalizeMethodName(requestOptions.method);
this.headers = new headers_1.Headers(requestOptions.headers);
}
Request.prototype.text = function() {
return lang_1.isPresent(this._body) ? this._body.toString() : "";
};
return Request;
}();
exports.Request = Request;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(481);
var exceptions_1 = __webpack_require__(482);
var collection_1 = __webpack_require__(485);
var Headers = function() {
function Headers(headers) {
var _this = this;
if (headers instanceof Headers) {
this._headersMap = headers._headersMap;
return;
}
this._headersMap = new collection_1.Map();
if (lang_1.isBlank(headers)) {
return;
}
collection_1.StringMapWrapper.forEach(headers, function(v, k) {
_this._headersMap.set(k, collection_1.isListLikeIterable(v) ? v : [ v ]);
});
}
Headers.fromResponseHeaderString = function(headersString) {
return headersString.trim().split("\n").map(function(val) {
return val.split(":");
}).map(function(_a) {
var key = _a[0], parts = _a.slice(1);
return [ key.trim(), parts.join(":").trim() ];
}).reduce(function(headers, _a) {
var key = _a[0], value = _a[1];
return !headers.set(key, value) && headers;
}, new Headers());
};
Headers.prototype.append = function(name, value) {
var mapName = this._headersMap.get(name);
var list = collection_1.isListLikeIterable(mapName) ? mapName : [];
list.push(value);
this._headersMap.set(name, list);
};
Headers.prototype.delete = function(name) {
this._headersMap.delete(name);
};
Headers.prototype.forEach = function(fn) {
this._headersMap.forEach(fn);
};
Headers.prototype.get = function(header) {
return collection_1.ListWrapper.first(this._headersMap.get(header));
};
Headers.prototype.has = function(header) {
return this._headersMap.has(header);
};
Headers.prototype.keys = function() {
return collection_1.MapWrapper.keys(this._headersMap);
};
Headers.prototype.set = function(header, value) {
var list = [];
if (collection_1.isListLikeIterable(value)) {
var pushValue = value.join(",");
list.push(pushValue);
} else {
list.push(value);
}
this._headersMap.set(header, list);
};
Headers.prototype.values = function() {
return collection_1.MapWrapper.values(this._headersMap);
};
Headers.prototype.toJSON = function() {
var serializableHeaders = {};
this._headersMap.forEach(function(values, name) {
var list = [];
collection_1.iterateListLike(values, function(val) {
return list = collection_1.ListWrapper.concat(list, val.split(","));
});
serializableHeaders[name] = list;
});
return serializableHeaders;
};
Headers.prototype.getAll = function(header) {
var headers = this._headersMap.get(header);
return collection_1.isListLikeIterable(headers) ? headers : [];
};
Headers.prototype.entries = function() {
throw new exceptions_1.BaseException('"entries" method is not implemented on Headers class');
};
return Headers;
}();
exports.Headers = Headers;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(481);
var enums_1 = __webpack_require__(490);
var exceptions_1 = __webpack_require__(482);
function normalizeMethodName(method) {
if (lang_1.isString(method)) {
var originalMethod = method;
method = method.replace(/(\w)(\w*)/g, function(g0, g1, g2) {
return g1.toUpperCase() + g2.toLowerCase();
});
method = enums_1.RequestMethod[method];
if (typeof method !== "number") throw exceptions_1.makeTypeError('Invalid request method. The method "' + originalMethod + '" is not supported.');
}
return method;
}
exports.normalizeMethodName = normalizeMethodName;
exports.isSuccess = function(status) {
return status >= 200 && status < 300;
};
function getResponseURL(xhr) {
if ("responseURL" in xhr) {
return xhr.responseURL;
}
if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
return xhr.getResponseHeader("X-Request-URL");
}
return;
}
exports.getResponseURL = getResponseURL;
var lang_2 = __webpack_require__(481);
exports.isJsObject = lang_2.isJsObject;
}, function(module, exports) {
"use strict";
(function(RequestMethod) {
RequestMethod[RequestMethod["Get"] = 0] = "Get";
RequestMethod[RequestMethod["Post"] = 1] = "Post";
RequestMethod[RequestMethod["Put"] = 2] = "Put";
RequestMethod[RequestMethod["Delete"] = 3] = "Delete";
RequestMethod[RequestMethod["Options"] = 4] = "Options";
RequestMethod[RequestMethod["Head"] = 5] = "Head";
RequestMethod[RequestMethod["Patch"] = 6] = "Patch";
})(exports.RequestMethod || (exports.RequestMethod = {}));
var RequestMethod = exports.RequestMethod;
(function(ReadyState) {
ReadyState[ReadyState["Unsent"] = 0] = "Unsent";
ReadyState[ReadyState["Open"] = 1] = "Open";
ReadyState[ReadyState["HeadersReceived"] = 2] = "HeadersReceived";
ReadyState[ReadyState["Loading"] = 3] = "Loading";
ReadyState[ReadyState["Done"] = 4] = "Done";
ReadyState[ReadyState["Cancelled"] = 5] = "Cancelled";
})(exports.ReadyState || (exports.ReadyState = {}));
var ReadyState = exports.ReadyState;
(function(ResponseType) {
ResponseType[ResponseType["Basic"] = 0] = "Basic";
ResponseType[ResponseType["Cors"] = 1] = "Cors";
ResponseType[ResponseType["Default"] = 2] = "Default";
ResponseType[ResponseType["Error"] = 3] = "Error";
ResponseType[ResponseType["Opaque"] = 4] = "Opaque";
})(exports.ResponseType || (exports.ResponseType = {}));
var ResponseType = exports.ResponseType;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(481);
var headers_1 = __webpack_require__(488);
var enums_1 = __webpack_require__(490);
var core_1 = __webpack_require__(118);
var url_search_params_1 = __webpack_require__(492);
var http_utils_1 = __webpack_require__(489);
var RequestOptions = function() {
function RequestOptions(_a) {
var _b = _a === void 0 ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, url = _b.url, search = _b.search;
this.method = lang_1.isPresent(method) ? http_utils_1.normalizeMethodName(method) : null;
this.headers = lang_1.isPresent(headers) ? headers : null;
this.body = lang_1.isPresent(body) ? body : null;
this.url = lang_1.isPresent(url) ? url : null;
this.search = lang_1.isPresent(search) ? lang_1.isString(search) ? new url_search_params_1.URLSearchParams(search) : search : null;
}
RequestOptions.prototype.merge = function(options) {
return new RequestOptions({
method: lang_1.isPresent(options) && lang_1.isPresent(options.method) ? options.method : this.method,
headers: lang_1.isPresent(options) && lang_1.isPresent(options.headers) ? options.headers : this.headers,
body: lang_1.isPresent(options) && lang_1.isPresent(options.body) ? options.body : this.body,
url: lang_1.isPresent(options) && lang_1.isPresent(options.url) ? options.url : this.url,
search: lang_1.isPresent(options) && lang_1.isPresent(options.search) ? lang_1.isString(options.search) ? new url_search_params_1.URLSearchParams(options.search) : options.search.clone() : this.search
});
};
return RequestOptions;
}();
exports.RequestOptions = RequestOptions;
var BaseRequestOptions = function(_super) {
__extends(BaseRequestOptions, _super);
function BaseRequestOptions() {
_super.call(this, {
method: enums_1.RequestMethod.Get,
headers: new headers_1.Headers()
});
}
BaseRequestOptions.decorators = [ {
type: core_1.Injectable
} ];
BaseRequestOptions.ctorParameters = [];
return BaseRequestOptions;
}(RequestOptions);
exports.BaseRequestOptions = BaseRequestOptions;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(481);
var collection_1 = __webpack_require__(485);
function paramParser(rawParams) {
if (rawParams === void 0) {
rawParams = "";
}
var map = new collection_1.Map();
if (rawParams.length > 0) {
var params = rawParams.split("&");
params.forEach(function(param) {
var split = param.split("=");
var key = split[0];
var val = split[1];
var list = lang_1.isPresent(map.get(key)) ? map.get(key) : [];
list.push(val);
map.set(key, list);
});
}
return map;
}
var URLSearchParams = function() {
function URLSearchParams(rawParams) {
if (rawParams === void 0) {
rawParams = "";
}
this.rawParams = rawParams;
this.paramsMap = paramParser(rawParams);
}
URLSearchParams.prototype.clone = function() {
var clone = new URLSearchParams();
clone.appendAll(this);
return clone;
};
URLSearchParams.prototype.has = function(param) {
return this.paramsMap.has(param);
};
URLSearchParams.prototype.get = function(param) {
var storedParam = this.paramsMap.get(param);
if (collection_1.isListLikeIterable(storedParam)) {
return collection_1.ListWrapper.first(storedParam);
} else {
return null;
}
};
URLSearchParams.prototype.getAll = function(param) {
var mapParam = this.paramsMap.get(param);
return lang_1.isPresent(mapParam) ? mapParam : [];
};
URLSearchParams.prototype.set = function(param, val) {
var mapParam = this.paramsMap.get(param);
var list = lang_1.isPresent(mapParam) ? mapParam : [];
collection_1.ListWrapper.clear(list);
list.push(val);
this.paramsMap.set(param, list);
};
URLSearchParams.prototype.setAll = function(searchParams) {
var _this = this;
searchParams.paramsMap.forEach(function(value, param) {
var mapParam = _this.paramsMap.get(param);
var list = lang_1.isPresent(mapParam) ? mapParam : [];
collection_1.ListWrapper.clear(list);
list.push(value[0]);
_this.paramsMap.set(param, list);
});
};
URLSearchParams.prototype.append = function(param, val) {
var mapParam = this.paramsMap.get(param);
var list = lang_1.isPresent(mapParam) ? mapParam : [];
list.push(val);
this.paramsMap.set(param, list);
};
URLSearchParams.prototype.appendAll = function(searchParams) {
var _this = this;
searchParams.paramsMap.forEach(function(value, param) {
var mapParam = _this.paramsMap.get(param);
var list = lang_1.isPresent(mapParam) ? mapParam : [];
for (var i = 0; i < value.length; ++i) {
list.push(value[i]);
}
_this.paramsMap.set(param, list);
});
};
URLSearchParams.prototype.replaceAll = function(searchParams) {
var _this = this;
searchParams.paramsMap.forEach(function(value, param) {
var mapParam = _this.paramsMap.get(param);
var list = lang_1.isPresent(mapParam) ? mapParam : [];
collection_1.ListWrapper.clear(list);
for (var i = 0; i < value.length; ++i) {
list.push(value[i]);
}
_this.paramsMap.set(param, list);
});
};
URLSearchParams.prototype.toString = function() {
var paramsList = [];
this.paramsMap.forEach(function(values, k) {
values.forEach(function(v) {
return paramsList.push(k + "=" + v);
});
});
return paramsList.join("&");
};
URLSearchParams.prototype.delete = function(param) {
this.paramsMap.delete(param);
};
return URLSearchParams;
}();
exports.URLSearchParams = URLSearchParams;
}, function(module, exports, __webpack_require__) {
"use strict";
var enums_1 = __webpack_require__(490);
var static_response_1 = __webpack_require__(494);
var headers_1 = __webpack_require__(488);
var base_response_options_1 = __webpack_require__(495);
var core_1 = __webpack_require__(118);
var browser_xhr_1 = __webpack_require__(496);
var lang_1 = __webpack_require__(481);
var Observable_1 = __webpack_require__(151);
var http_utils_1 = __webpack_require__(489);
var XHRConnection = function() {
function XHRConnection(req, browserXHR, baseResponseOptions) {
var _this = this;
this.request = req;
this.response = new Observable_1.Observable(function(responseObserver) {
var _xhr = browserXHR.build();
_xhr.open(enums_1.RequestMethod[req.method].toUpperCase(), req.url);
var onLoad = function() {
var body = lang_1.isPresent(_xhr.response) ? _xhr.response : _xhr.responseText;
var headers = headers_1.Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());
var url = http_utils_1.getResponseURL(_xhr);
var status = _xhr.status === 1223 ? 204 : _xhr.status;
if (status === 0) {
status = body ? 200 : 0;
}
var responseOptions = new base_response_options_1.ResponseOptions({
body: body,
status: status,
headers: headers,
url: url
});
if (lang_1.isPresent(baseResponseOptions)) {
responseOptions = baseResponseOptions.merge(responseOptions);
}
var response = new static_response_1.Response(responseOptions);
if (http_utils_1.isSuccess(status)) {
responseObserver.next(response);
responseObserver.complete();
return;
}
responseObserver.error(response);
};
var onError = function(err) {
var responseOptions = new base_response_options_1.ResponseOptions({
body: err,
type: enums_1.ResponseType.Error
});
if (lang_1.isPresent(baseResponseOptions)) {
responseOptions = baseResponseOptions.merge(responseOptions);
}
responseObserver.error(new static_response_1.Response(responseOptions));
};
if (lang_1.isPresent(req.headers)) {
req.headers.forEach(function(values, name) {
return _xhr.setRequestHeader(name, values.join(","));
});
}
_xhr.addEventListener("load", onLoad);
_xhr.addEventListener("error", onError);
_xhr.send(_this.request.text());
return function() {
_xhr.removeEventListener("load", onLoad);
_xhr.removeEventListener("error", onError);
_xhr.abort();
};
});
}
return XHRConnection;
}();
exports.XHRConnection = XHRConnection;
var XHRBackend = function() {
function XHRBackend(_browserXHR, _baseResponseOptions) {
this._browserXHR = _browserXHR;
this._baseResponseOptions = _baseResponseOptions;
}
XHRBackend.prototype.createConnection = function(request) {
return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);
};
XHRBackend.decorators = [ {
type: core_1.Injectable
} ];
XHRBackend.ctorParameters = [ {
type: browser_xhr_1.BrowserXhr
}, {
type: base_response_options_1.ResponseOptions
} ];
return XHRBackend;
}();
exports.XHRBackend = XHRBackend;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(481);
var exceptions_1 = __webpack_require__(482);
var http_utils_1 = __webpack_require__(489);
var Response = function() {
function Response(responseOptions) {
this._body = responseOptions.body;
this.status = responseOptions.status;
this.ok = this.status >= 200 && this.status <= 299;
this.statusText = responseOptions.statusText;
this.headers = responseOptions.headers;
this.type = responseOptions.type;
this.url = responseOptions.url;
}
Response.prototype.blob = function() {
throw new exceptions_1.BaseException('"blob()" method not implemented on Response superclass');
};
Response.prototype.json = function() {
var jsonResponse;
if (http_utils_1.isJsObject(this._body)) {
jsonResponse = this._body;
} else if (lang_1.isString(this._body)) {
jsonResponse = lang_1.Json.parse(this._body);
}
return jsonResponse;
};
Response.prototype.text = function() {
return this._body.toString();
};
Response.prototype.arrayBuffer = function() {
throw new exceptions_1.BaseException('"arrayBuffer()" method not implemented on Response superclass');
};
return Response;
}();
exports.Response = Response;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(481);
var headers_1 = __webpack_require__(488);
var enums_1 = __webpack_require__(490);
var ResponseOptions = function() {
function ResponseOptions(_a) {
var _b = _a === void 0 ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url;
this.body = lang_1.isPresent(body) ? body : null;
this.status = lang_1.isPresent(status) ? status : null;
this.headers = lang_1.isPresent(headers) ? headers : null;
this.statusText = lang_1.isPresent(statusText) ? statusText : null;
this.type = lang_1.isPresent(type) ? type : null;
this.url = lang_1.isPresent(url) ? url : null;
}
ResponseOptions.prototype.merge = function(options) {
return new ResponseOptions({
body: lang_1.isPresent(options) && lang_1.isPresent(options.body) ? options.body : this.body,
status: lang_1.isPresent(options) && lang_1.isPresent(options.status) ? options.status : this.status,
headers: lang_1.isPresent(options) && lang_1.isPresent(options.headers) ? options.headers : this.headers,
statusText: lang_1.isPresent(options) && lang_1.isPresent(options.statusText) ? options.statusText : this.statusText,
type: lang_1.isPresent(options) && lang_1.isPresent(options.type) ? options.type : this.type,
url: lang_1.isPresent(options) && lang_1.isPresent(options.url) ? options.url : this.url
});
};
return ResponseOptions;
}();
exports.ResponseOptions = ResponseOptions;
var BaseResponseOptions = function(_super) {
__extends(BaseResponseOptions, _super);
function BaseResponseOptions() {
_super.call(this, {
status: 200,
statusText: "Ok",
type: enums_1.ResponseType.Default,
headers: new headers_1.Headers()
});
}
BaseResponseOptions.decorators = [ {
type: core_1.Injectable
} ];
BaseResponseOptions.ctorParameters = [];
return BaseResponseOptions;
}(ResponseOptions);
exports.BaseResponseOptions = BaseResponseOptions;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var BrowserXhr = function() {
function BrowserXhr() {}
BrowserXhr.prototype.build = function() {
return new XMLHttpRequest();
};
BrowserXhr.decorators = [ {
type: core_1.Injectable
} ];
BrowserXhr.ctorParameters = [];
return BrowserXhr;
}();
exports.BrowserXhr = BrowserXhr;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var interfaces_1 = __webpack_require__(486);
var enums_1 = __webpack_require__(490);
var static_response_1 = __webpack_require__(494);
var base_response_options_1 = __webpack_require__(495);
var core_1 = __webpack_require__(118);
var browser_jsonp_1 = __webpack_require__(498);
var exceptions_1 = __webpack_require__(482);
var lang_1 = __webpack_require__(481);
var Observable_1 = __webpack_require__(151);
var JSONP_ERR_NO_CALLBACK = "JSONP injected script did not invoke callback.";
var JSONP_ERR_WRONG_METHOD = "JSONP requests must use GET request method.";
var JSONPConnection = function() {
function JSONPConnection() {}
return JSONPConnection;
}();
exports.JSONPConnection = JSONPConnection;
var JSONPConnection_ = function(_super) {
__extends(JSONPConnection_, _super);
function JSONPConnection_(req, _dom, baseResponseOptions) {
var _this = this;
_super.call(this);
this._dom = _dom;
this.baseResponseOptions = baseResponseOptions;
this._finished = false;
if (req.method !== enums_1.RequestMethod.Get) {
throw exceptions_1.makeTypeError(JSONP_ERR_WRONG_METHOD);
}
this.request = req;
this.response = new Observable_1.Observable(function(responseObserver) {
_this.readyState = enums_1.ReadyState.Loading;
var id = _this._id = _dom.nextRequestID();
_dom.exposeConnection(id, _this);
var callback = _dom.requestCallback(_this._id);
var url = req.url;
if (url.indexOf("=JSONP_CALLBACK&") > -1) {
url = lang_1.StringWrapper.replace(url, "=JSONP_CALLBACK&", "=" + callback + "&");
} else if (url.lastIndexOf("=JSONP_CALLBACK") === url.length - "=JSONP_CALLBACK".length) {
url = url.substring(0, url.length - "=JSONP_CALLBACK".length) + ("=" + callback);
}
var script = _this._script = _dom.build(url);
var onLoad = function(event) {
if (_this.readyState === enums_1.ReadyState.Cancelled) return;
_this.readyState = enums_1.ReadyState.Done;
_dom.cleanup(script);
if (!_this._finished) {
var responseOptions_1 = new base_response_options_1.ResponseOptions({
body: JSONP_ERR_NO_CALLBACK,
type: enums_1.ResponseType.Error,
url: url
});
if (lang_1.isPresent(baseResponseOptions)) {
responseOptions_1 = baseResponseOptions.merge(responseOptions_1);
}
responseObserver.error(new static_response_1.Response(responseOptions_1));
return;
}
var responseOptions = new base_response_options_1.ResponseOptions({
body: _this._responseData,
url: url
});
if (lang_1.isPresent(_this.baseResponseOptions)) {
responseOptions = _this.baseResponseOptions.merge(responseOptions);
}
responseObserver.next(new static_response_1.Response(responseOptions));
responseObserver.complete();
};
var onError = function(error) {
if (_this.readyState === enums_1.ReadyState.Cancelled) return;
_this.readyState = enums_1.ReadyState.Done;
_dom.cleanup(script);
var responseOptions = new base_response_options_1.ResponseOptions({
body: error.message,
type: enums_1.ResponseType.Error
});
if (lang_1.isPresent(baseResponseOptions)) {
responseOptions = baseResponseOptions.merge(responseOptions);
}
responseObserver.error(new static_response_1.Response(responseOptions));
};
script.addEventListener("load", onLoad);
script.addEventListener("error", onError);
_dom.send(script);
return function() {
_this.readyState = enums_1.ReadyState.Cancelled;
script.removeEventListener("load", onLoad);
script.removeEventListener("error", onError);
if (lang_1.isPresent(script)) {
_this._dom.cleanup(script);
}
};
});
}
JSONPConnection_.prototype.finished = function(data) {
this._finished = true;
this._dom.removeConnection(this._id);
if (this.readyState === enums_1.ReadyState.Cancelled) return;
this._responseData = data;
};
return JSONPConnection_;
}(JSONPConnection);
exports.JSONPConnection_ = JSONPConnection_;
var JSONPBackend = function(_super) {
__extends(JSONPBackend, _super);
function JSONPBackend() {
_super.apply(this, arguments);
}
return JSONPBackend;
}(interfaces_1.ConnectionBackend);
exports.JSONPBackend = JSONPBackend;
var JSONPBackend_ = function(_super) {
__extends(JSONPBackend_, _super);
function JSONPBackend_(_browserJSONP, _baseResponseOptions) {
_super.call(this);
this._browserJSONP = _browserJSONP;
this._baseResponseOptions = _baseResponseOptions;
}
JSONPBackend_.prototype.createConnection = function(request) {
return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);
};
JSONPBackend_.decorators = [ {
type: core_1.Injectable
} ];
JSONPBackend_.ctorParameters = [ {
type: browser_jsonp_1.BrowserJsonp
}, {
type: base_response_options_1.ResponseOptions
} ];
return JSONPBackend_;
}(JSONPBackend);
exports.JSONPBackend_ = JSONPBackend_;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lang_1 = __webpack_require__(481);
var _nextRequestId = 0;
exports.JSONP_HOME = "__ng_jsonp__";
var _jsonpConnections = null;
function _getJsonpConnections() {
if (_jsonpConnections === null) {
_jsonpConnections = lang_1.global[exports.JSONP_HOME] = {};
}
return _jsonpConnections;
}
var BrowserJsonp = function() {
function BrowserJsonp() {}
BrowserJsonp.prototype.build = function(url) {
var node = document.createElement("script");
node.src = url;
return node;
};
BrowserJsonp.prototype.nextRequestID = function() {
return "__req" + _nextRequestId++;
};
BrowserJsonp.prototype.requestCallback = function(id) {
return exports.JSONP_HOME + "." + id + ".finished";
};
BrowserJsonp.prototype.exposeConnection = function(id, connection) {
var connections = _getJsonpConnections();
connections[id] = connection;
};
BrowserJsonp.prototype.removeConnection = function(id) {
var connections = _getJsonpConnections();
connections[id] = null;
};
BrowserJsonp.prototype.send = function(node) {
document.body.appendChild(node);
};
BrowserJsonp.prototype.cleanup = function(node) {
if (node.parentNode) {
node.parentNode.removeChild(node);
}
};
BrowserJsonp.decorators = [ {
type: core_1.Injectable
} ];
return BrowserJsonp;
}();
exports.BrowserJsonp = BrowserJsonp;
}, function(module, exports, __webpack_require__) {
"use strict";
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
__export(__webpack_require__(500));
}, function(module, exports, __webpack_require__) {
"use strict";
var compiler_1 = __webpack_require__(277);
var xhr_cache_1 = __webpack_require__(501);
var lang_1 = __webpack_require__(505);
var xhr_impl_1 = __webpack_require__(508);
var platform_browser_1 = __webpack_require__(372);
var core_1 = __webpack_require__(118);
var core_private_1 = __webpack_require__(509);
exports.CACHED_TEMPLATE_PROVIDER = [ {
provide: compiler_1.XHR,
useClass: xhr_cache_1.CachedXHR
} ];
exports.BROWSER_APP_DYNAMIC_PROVIDERS = [ platform_browser_1.BROWSER_APP_COMMON_PROVIDERS, compiler_1.COMPILER_PROVIDERS, {
provide: compiler_1.XHR,
useClass: xhr_impl_1.XHRImpl
} ];
function bootstrap(appComponentType, customProviders) {
core_1.reflector.reflectionCapabilities = new core_private_1.ReflectionCapabilities();
var appInjector = core_1.ReflectiveInjector.resolveAndCreate([ exports.BROWSER_APP_DYNAMIC_PROVIDERS, lang_1.isPresent(customProviders) ? customProviders : [] ], platform_browser_1.browserPlatform().injector);
return core_1.coreLoadAndBootstrap(appInjector, appComponentType);
}
exports.bootstrap = bootstrap;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var compiler_1 = __webpack_require__(277);
var exceptions_1 = __webpack_require__(502);
var lang_1 = __webpack_require__(505);
var promise_1 = __webpack_require__(507);
var CachedXHR = function(_super) {
__extends(CachedXHR, _super);
function CachedXHR() {
_super.call(this);
this._cache = lang_1.global.$templateCache;
if (this._cache == null) {
throw new exceptions_1.BaseException("CachedXHR: Template cache was not found in $templateCache.");
}
}
CachedXHR.prototype.get = function(url) {
if (this._cache.hasOwnProperty(url)) {
return promise_1.PromiseWrapper.resolve(this._cache[url]);
} else {
return promise_1.PromiseWrapper.reject("CachedXHR: Did not find cached template for " + url, null);
}
};
return CachedXHR;
}(compiler_1.XHR);
exports.CachedXHR = CachedXHR;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var base_wrapped_exception_1 = __webpack_require__(503);
var exception_handler_1 = __webpack_require__(504);
var exception_handler_2 = __webpack_require__(504);
exports.ExceptionHandler = exception_handler_2.ExceptionHandler;
var BaseException = function(_super) {
__extends(BaseException, _super);
function BaseException(message) {
if (message === void 0) {
message = "--";
}
_super.call(this, message);
this.message = message;
this.stack = new Error(message).stack;
}
BaseException.prototype.toString = function() {
return this.message;
};
return BaseException;
}(Error);
exports.BaseException = BaseException;
var WrappedException = function(_super) {
__extends(WrappedException, _super);
function WrappedException(_wrapperMessage, _originalException, _originalStack, _context) {
_super.call(this, _wrapperMessage);
this._wrapperMessage = _wrapperMessage;
this._originalException = _originalException;
this._originalStack = _originalStack;
this._context = _context;
this._wrapperStack = new Error(_wrapperMessage).stack;
}
Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
get: function() {
return this._wrapperMessage;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "wrapperStack", {
get: function() {
return this._wrapperStack;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "originalException", {
get: function() {
return this._originalException;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "originalStack", {
get: function() {
return this._originalStack;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "context", {
get: function() {
return this._context;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "message", {
get: function() {
return exception_handler_1.ExceptionHandler.exceptionToString(this);
},
enumerable: true,
configurable: true
});
WrappedException.prototype.toString = function() {
return this.message;
};
return WrappedException;
}(base_wrapped_exception_1.BaseWrappedException);
exports.WrappedException = WrappedException;
function makeTypeError(message) {
return new TypeError(message);
}
exports.makeTypeError = makeTypeError;
function unimplemented() {
throw new BaseException("unimplemented");
}
exports.unimplemented = unimplemented;
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BaseWrappedException = function(_super) {
__extends(BaseWrappedException, _super);
function BaseWrappedException(message) {
_super.call(this, message);
}
Object.defineProperty(BaseWrappedException.prototype, "wrapperMessage", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "wrapperStack", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "originalException", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "originalStack", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "context", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "message", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
return BaseWrappedException;
}(Error);
exports.BaseWrappedException = BaseWrappedException;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(505);
var base_wrapped_exception_1 = __webpack_require__(503);
var collection_1 = __webpack_require__(506);
var _ArrayLogger = function() {
function _ArrayLogger() {
this.res = [];
}
_ArrayLogger.prototype.log = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logError = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logGroup = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logGroupEnd = function() {};
return _ArrayLogger;
}();
var ExceptionHandler = function() {
function ExceptionHandler(_logger, _rethrowException) {
if (_rethrowException === void 0) {
_rethrowException = true;
}
this._logger = _logger;
this._rethrowException = _rethrowException;
}
ExceptionHandler.exceptionToString = function(exception, stackTrace, reason) {
if (stackTrace === void 0) {
stackTrace = null;
}
if (reason === void 0) {
reason = null;
}
var l = new _ArrayLogger();
var e = new ExceptionHandler(l, false);
e.call(exception, stackTrace, reason);
return l.res.join("\n");
};
ExceptionHandler.prototype.call = function(exception, stackTrace, reason) {
if (stackTrace === void 0) {
stackTrace = null;
}
if (reason === void 0) {
reason = null;
}
var originalException = this._findOriginalException(exception);
var originalStack = this._findOriginalStack(exception);
var context = this._findContext(exception);
this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
this._logger.logError("STACKTRACE:");
this._logger.logError(this._longStackTrace(stackTrace));
}
if (lang_1.isPresent(reason)) {
this._logger.logError("REASON: " + reason);
}
if (lang_1.isPresent(originalException)) {
this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
}
if (lang_1.isPresent(originalStack)) {
this._logger.logError("ORIGINAL STACKTRACE:");
this._logger.logError(this._longStackTrace(originalStack));
}
if (lang_1.isPresent(context)) {
this._logger.logError("ERROR CONTEXT:");
this._logger.logError(context);
}
this._logger.logGroupEnd();
if (this._rethrowException) throw exception;
};
ExceptionHandler.prototype._extractMessage = function(exception) {
return exception instanceof base_wrapped_exception_1.BaseWrappedException ? exception.wrapperMessage : exception.toString();
};
ExceptionHandler.prototype._longStackTrace = function(stackTrace) {
return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join("\n\n-----async gap-----\n") : stackTrace.toString();
};
ExceptionHandler.prototype._findContext = function(exception) {
try {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
return lang_1.isPresent(exception.context) ? exception.context : this._findContext(exception.originalException);
} catch (e) {
return null;
}
};
ExceptionHandler.prototype._findOriginalException = function(exception) {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
var e = exception.originalException;
while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
e = e.originalException;
}
return e;
};
ExceptionHandler.prototype._findOriginalStack = function(exception) {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
var e = exception;
var stack = exception.originalStack;
while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
e = e.originalException;
if (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
stack = e.originalStack;
}
}
return stack;
};
return ExceptionHandler;
}();
exports.ExceptionHandler = ExceptionHandler;
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var globalScope;
if (typeof window === "undefined") {
if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) {
globalScope = self;
} else {
globalScope = global;
}
} else {
globalScope = window;
}
function scheduleMicroTask(fn) {
Zone.current.scheduleMicroTask("scheduleMicrotask", fn);
}
exports.scheduleMicroTask = scheduleMicroTask;
exports.IS_DART = false;
var _global = globalScope;
exports.global = _global;
exports.Type = Function;
function getTypeNameForDebugging(type) {
if (type["name"]) {
return type["name"];
}
return typeof type;
}
exports.getTypeNameForDebugging = getTypeNameForDebugging;
exports.Math = _global.Math;
exports.Date = _global.Date;
var _devMode = true;
var _modeLocked = false;
function lockMode() {
_modeLocked = true;
}
exports.lockMode = lockMode;
function enableProdMode() {
if (_modeLocked) {
throw "Cannot enable prod mode after platform setup.";
}
_devMode = false;
}
exports.enableProdMode = enableProdMode;
function assertionsEnabled() {
return _devMode;
}
exports.assertionsEnabled = assertionsEnabled;
_global.assert = function assert(condition) {};
function isPresent(obj) {
return obj !== undefined && obj !== null;
}
exports.isPresent = isPresent;
function isBlank(obj) {
return obj === undefined || obj === null;
}
exports.isBlank = isBlank;
function isBoolean(obj) {
return typeof obj === "boolean";
}
exports.isBoolean = isBoolean;
function isNumber(obj) {
return typeof obj === "number";
}
exports.isNumber = isNumber;
function isString(obj) {
return typeof obj === "string";
}
exports.isString = isString;
function isFunction(obj) {
return typeof obj === "function";
}
exports.isFunction = isFunction;
function isType(obj) {
return isFunction(obj);
}
exports.isType = isType;
function isStringMap(obj) {
return typeof obj === "object" && obj !== null;
}
exports.isStringMap = isStringMap;
var STRING_MAP_PROTO = Object.getPrototypeOf({});
function isStrictStringMap(obj) {
return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
}
exports.isStrictStringMap = isStrictStringMap;
function isPromise(obj) {
return obj instanceof _global.Promise;
}
exports.isPromise = isPromise;
function isArray(obj) {
return Array.isArray(obj);
}
exports.isArray = isArray;
function isDate(obj) {
return obj instanceof exports.Date && !isNaN(obj.valueOf());
}
exports.isDate = isDate;
function noop() {}
exports.noop = noop;
function stringify(token) {
if (typeof token === "string") {
return token;
}
if (token === undefined || token === null) {
return "" + token;
}
if (token.name) {
return token.name;
}
if (token.overriddenName) {
return token.overriddenName;
}
var res = token.toString();
var newLineIndex = res.indexOf("\n");
return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
exports.stringify = stringify;
function serializeEnum(val) {
return val;
}
exports.serializeEnum = serializeEnum;
function deserializeEnum(val, values) {
return val;
}
exports.deserializeEnum = deserializeEnum;
function resolveEnumToken(enumValue, val) {
return enumValue[val];
}
exports.resolveEnumToken = resolveEnumToken;
var StringWrapper = function() {
function StringWrapper() {}
StringWrapper.fromCharCode = function(code) {
return String.fromCharCode(code);
};
StringWrapper.charCodeAt = function(s, index) {
return s.charCodeAt(index);
};
StringWrapper.split = function(s, regExp) {
return s.split(regExp);
};
StringWrapper.equals = function(s, s2) {
return s === s2;
};
StringWrapper.stripLeft = function(s, charVal) {
if (s && s.length) {
var pos = 0;
for (var i = 0; i < s.length; i++) {
if (s[i] != charVal) break;
pos++;
}
s = s.substring(pos);
}
return s;
};
StringWrapper.stripRight = function(s, charVal) {
if (s && s.length) {
var pos = s.length;
for (var i = s.length - 1; i >= 0; i--) {
if (s[i] != charVal) break;
pos--;
}
s = s.substring(0, pos);
}
return s;
};
StringWrapper.replace = function(s, from, replace) {
return s.replace(from, replace);
};
StringWrapper.replaceAll = function(s, from, replace) {
return s.replace(from, replace);
};
StringWrapper.slice = function(s, from, to) {
if (from === void 0) {
from = 0;
}
if (to === void 0) {
to = null;
}
return s.slice(from, to === null ? undefined : to);
};
StringWrapper.replaceAllMapped = function(s, from, cb) {
return s.replace(from, function() {
var matches = [];
for (var _i = 0; _i < arguments.length; _i++) {
matches[_i - 0] = arguments[_i];
}
matches.splice(-2, 2);
return cb(matches);
});
};
StringWrapper.contains = function(s, substr) {
return s.indexOf(substr) != -1;
};
StringWrapper.compare = function(a, b) {
if (a < b) {
return -1;
} else if (a > b) {
return 1;
} else {
return 0;
}
};
return StringWrapper;
}();
exports.StringWrapper = StringWrapper;
var StringJoiner = function() {
function StringJoiner(parts) {
if (parts === void 0) {
parts = [];
}
this.parts = parts;
}
StringJoiner.prototype.add = function(part) {
this.parts.push(part);
};
StringJoiner.prototype.toString = function() {
return this.parts.join("");
};
return StringJoiner;
}();
exports.StringJoiner = StringJoiner;
var NumberParseError = function(_super) {
__extends(NumberParseError, _super);
function NumberParseError(message) {
_super.call(this);
this.message = message;
}
NumberParseError.prototype.toString = function() {
return this.message;
};
return NumberParseError;
}(Error);
exports.NumberParseError = NumberParseError;
var NumberWrapper = function() {
function NumberWrapper() {}
NumberWrapper.toFixed = function(n, fractionDigits) {
return n.toFixed(fractionDigits);
};
NumberWrapper.equal = function(a, b) {
return a === b;
};
NumberWrapper.parseIntAutoRadix = function(text) {
var result = parseInt(text);
if (isNaN(result)) {
throw new NumberParseError("Invalid integer literal when parsing " + text);
}
return result;
};
NumberWrapper.parseInt = function(text, radix) {
if (radix == 10) {
if (/^(\-|\+)?[0-9]+$/.test(text)) {
return parseInt(text, radix);
}
} else if (radix == 16) {
if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
return parseInt(text, radix);
}
} else {
var result = parseInt(text, radix);
if (!isNaN(result)) {
return result;
}
}
throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " + radix);
};
NumberWrapper.parseFloat = function(text) {
return parseFloat(text);
};
Object.defineProperty(NumberWrapper, "NaN", {
get: function() {
return NaN;
},
enumerable: true,
configurable: true
});
NumberWrapper.isNaN = function(value) {
return isNaN(value);
};
NumberWrapper.isInteger = function(value) {
return Number.isInteger(value);
};
return NumberWrapper;
}();
exports.NumberWrapper = NumberWrapper;
exports.RegExp = _global.RegExp;
var RegExpWrapper = function() {
function RegExpWrapper() {}
RegExpWrapper.create = function(regExpStr, flags) {
if (flags === void 0) {
flags = "";
}
flags = flags.replace(/g/g, "");
return new _global.RegExp(regExpStr, flags + "g");
};
RegExpWrapper.firstMatch = function(regExp, input) {
regExp.lastIndex = 0;
return regExp.exec(input);
};
RegExpWrapper.test = function(regExp, input) {
regExp.lastIndex = 0;
return regExp.test(input);
};
RegExpWrapper.matcher = function(regExp, input) {
regExp.lastIndex = 0;
return {
re: regExp,
input: input
};
};
RegExpWrapper.replaceAll = function(regExp, input, replace) {
var c = regExp.exec(input);
var res = "";
regExp.lastIndex = 0;
var prev = 0;
while (c) {
res += input.substring(prev, c.index);
res += replace(c);
prev = c.index + c[0].length;
regExp.lastIndex = prev;
c = regExp.exec(input);
}
res += input.substring(prev);
return res;
};
return RegExpWrapper;
}();
exports.RegExpWrapper = RegExpWrapper;
var RegExpMatcherWrapper = function() {
function RegExpMatcherWrapper() {}
RegExpMatcherWrapper.next = function(matcher) {
return matcher.re.exec(matcher.input);
};
return RegExpMatcherWrapper;
}();
exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
var FunctionWrapper = function() {
function FunctionWrapper() {}
FunctionWrapper.apply = function(fn, posArgs) {
return fn.apply(null, posArgs);
};
return FunctionWrapper;
}();
exports.FunctionWrapper = FunctionWrapper;
function looseIdentical(a, b) {
return a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
}
exports.looseIdentical = looseIdentical;
function getMapKey(value) {
return value;
}
exports.getMapKey = getMapKey;
function normalizeBlank(obj) {
return isBlank(obj) ? null : obj;
}
exports.normalizeBlank = normalizeBlank;
function normalizeBool(obj) {
return isBlank(obj) ? false : obj;
}
exports.normalizeBool = normalizeBool;
function isJsObject(o) {
return o !== null && (typeof o === "function" || typeof o === "object");
}
exports.isJsObject = isJsObject;
function print(obj) {
console.log(obj);
}
exports.print = print;
function warn(obj) {
console.warn(obj);
}
exports.warn = warn;
var Json = function() {
function Json() {}
Json.parse = function(s) {
return _global.JSON.parse(s);
};
Json.stringify = function(data) {
return _global.JSON.stringify(data, null, 2);
};
return Json;
}();
exports.Json = Json;
var DateWrapper = function() {
function DateWrapper() {}
DateWrapper.create = function(year, month, day, hour, minutes, seconds, milliseconds) {
if (month === void 0) {
month = 1;
}
if (day === void 0) {
day = 1;
}
if (hour === void 0) {
hour = 0;
}
if (minutes === void 0) {
minutes = 0;
}
if (seconds === void 0) {
seconds = 0;
}
if (milliseconds === void 0) {
milliseconds = 0;
}
return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
};
DateWrapper.fromISOString = function(str) {
return new exports.Date(str);
};
DateWrapper.fromMillis = function(ms) {
return new exports.Date(ms);
};
DateWrapper.toMillis = function(date) {
return date.getTime();
};
DateWrapper.now = function() {
return new exports.Date();
};
DateWrapper.toJson = function(date) {
return date.toJSON();
};
return DateWrapper;
}();
exports.DateWrapper = DateWrapper;
function setValueOnPath(global, path, value) {
var parts = path.split(".");
var obj = global;
while (parts.length > 1) {
var name = parts.shift();
if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
obj = obj[name];
} else {
obj = obj[name] = {};
}
}
if (obj === undefined || obj === null) {
obj = {};
}
obj[parts.shift()] = value;
}
exports.setValueOnPath = setValueOnPath;
var _symbolIterator = null;
function getSymbolIterator() {
if (isBlank(_symbolIterator)) {
if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
_symbolIterator = Symbol.iterator;
} else {
var keys = Object.getOwnPropertyNames(Map.prototype);
for (var i = 0; i < keys.length; ++i) {
var key = keys[i];
if (key !== "entries" && key !== "size" && Map.prototype[key] === Map.prototype["entries"]) {
_symbolIterator = key;
}
}
}
}
return _symbolIterator;
}
exports.getSymbolIterator = getSymbolIterator;
function evalExpression(sourceUrl, expr, declarations, vars) {
var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
var fnArgNames = [];
var fnArgValues = [];
for (var argName in vars) {
fnArgNames.push(argName);
fnArgValues.push(vars[argName]);
}
return new (Function.bind.apply(Function, [ void 0 ].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
}
exports.evalExpression = evalExpression;
function isPrimitive(obj) {
return !isJsObject(obj);
}
exports.isPrimitive = isPrimitive;
function hasConstructor(value, type) {
return value.constructor === type;
}
exports.hasConstructor = hasConstructor;
function bitWiseOr(values) {
return values.reduce(function(a, b) {
return a | b;
});
}
exports.bitWiseOr = bitWiseOr;
function bitWiseAnd(values) {
return values.reduce(function(a, b) {
return a & b;
});
}
exports.bitWiseAnd = bitWiseAnd;
function escape(s) {
return _global.encodeURI(s);
}
exports.escape = escape;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(505);
exports.Map = lang_1.global.Map;
exports.Set = lang_1.global.Set;
var createMapFromPairs = function() {
try {
if (new exports.Map([ [ 1, 2 ] ]).size === 1) {
return function createMapFromPairs(pairs) {
return new exports.Map(pairs);
};
}
} catch (e) {}
return function createMapAndPopulateFromPairs(pairs) {
var map = new exports.Map();
for (var i = 0; i < pairs.length; i++) {
var pair = pairs[i];
map.set(pair[0], pair[1]);
}
return map;
};
}();
var createMapFromMap = function() {
try {
if (new exports.Map(new exports.Map())) {
return function createMapFromMap(m) {
return new exports.Map(m);
};
}
} catch (e) {}
return function createMapAndPopulateFromMap(m) {
var map = new exports.Map();
m.forEach(function(v, k) {
map.set(k, v);
});
return map;
};
}();
var _clearValues = function() {
if (new exports.Map().keys().next) {
return function _clearValues(m) {
var keyIterator = m.keys();
var k;
while (!(k = keyIterator.next()).done) {
m.set(k.value, null);
}
};
} else {
return function _clearValuesWithForeEach(m) {
m.forEach(function(v, k) {
m.set(k, null);
});
};
}
}();
var _arrayFromMap = function() {
try {
if (new exports.Map().values().next) {
return function createArrayFromMap(m, getValues) {
return getValues ? Array.from(m.values()) : Array.from(m.keys());
};
}
} catch (e) {}
return function createArrayFromMapWithForeach(m, getValues) {
var res = ListWrapper.createFixedSize(m.size), i = 0;
m.forEach(function(v, k) {
res[i] = getValues ? v : k;
i++;
});
return res;
};
}();
var MapWrapper = function() {
function MapWrapper() {}
MapWrapper.clone = function(m) {
return createMapFromMap(m);
};
MapWrapper.createFromStringMap = function(stringMap) {
var result = new exports.Map();
for (var prop in stringMap) {
result.set(prop, stringMap[prop]);
}
return result;
};
MapWrapper.toStringMap = function(m) {
var r = {};
m.forEach(function(v, k) {
return r[k] = v;
});
return r;
};
MapWrapper.createFromPairs = function(pairs) {
return createMapFromPairs(pairs);
};
MapWrapper.clearValues = function(m) {
_clearValues(m);
};
MapWrapper.iterable = function(m) {
return m;
};
MapWrapper.keys = function(m) {
return _arrayFromMap(m, false);
};
MapWrapper.values = function(m) {
return _arrayFromMap(m, true);
};
return MapWrapper;
}();
exports.MapWrapper = MapWrapper;
var StringMapWrapper = function() {
function StringMapWrapper() {}
StringMapWrapper.create = function() {
return {};
};
StringMapWrapper.contains = function(map, key) {
return map.hasOwnProperty(key);
};
StringMapWrapper.get = function(map, key) {
return map.hasOwnProperty(key) ? map[key] : undefined;
};
StringMapWrapper.set = function(map, key, value) {
map[key] = value;
};
StringMapWrapper.keys = function(map) {
return Object.keys(map);
};
StringMapWrapper.values = function(map) {
return Object.keys(map).reduce(function(r, a) {
r.push(map[a]);
return r;
}, []);
};
StringMapWrapper.isEmpty = function(map) {
for (var prop in map) {
return false;
}
return true;
};
StringMapWrapper.delete = function(map, key) {
delete map[key];
};
StringMapWrapper.forEach = function(map, callback) {
for (var prop in map) {
if (map.hasOwnProperty(prop)) {
callback(map[prop], prop);
}
}
};
StringMapWrapper.merge = function(m1, m2) {
var m = {};
for (var attr in m1) {
if (m1.hasOwnProperty(attr)) {
m[attr] = m1[attr];
}
}
for (var attr in m2) {
if (m2.hasOwnProperty(attr)) {
m[attr] = m2[attr];
}
}
return m;
};
StringMapWrapper.equals = function(m1, m2) {
var k1 = Object.keys(m1);
var k2 = Object.keys(m2);
if (k1.length != k2.length) {
return false;
}
var key;
for (var i = 0; i < k1.length; i++) {
key = k1[i];
if (m1[key] !== m2[key]) {
return false;
}
}
return true;
};
return StringMapWrapper;
}();
exports.StringMapWrapper = StringMapWrapper;
var ListWrapper = function() {
function ListWrapper() {}
ListWrapper.createFixedSize = function(size) {
return new Array(size);
};
ListWrapper.createGrowableSize = function(size) {
return new Array(size);
};
ListWrapper.clone = function(array) {
return array.slice(0);
};
ListWrapper.forEachWithIndex = function(array, fn) {
for (var i = 0; i < array.length; i++) {
fn(array[i], i);
}
};
ListWrapper.first = function(array) {
if (!array) return null;
return array[0];
};
ListWrapper.last = function(array) {
if (!array || array.length == 0) return null;
return array[array.length - 1];
};
ListWrapper.indexOf = function(array, value, startIndex) {
if (startIndex === void 0) {
startIndex = 0;
}
return array.indexOf(value, startIndex);
};
ListWrapper.contains = function(list, el) {
return list.indexOf(el) !== -1;
};
ListWrapper.reversed = function(array) {
var a = ListWrapper.clone(array);
return a.reverse();
};
ListWrapper.concat = function(a, b) {
return a.concat(b);
};
ListWrapper.insert = function(list, index, value) {
list.splice(index, 0, value);
};
ListWrapper.removeAt = function(list, index) {
var res = list[index];
list.splice(index, 1);
return res;
};
ListWrapper.removeAll = function(list, items) {
for (var i = 0; i < items.length; ++i) {
var index = list.indexOf(items[i]);
list.splice(index, 1);
}
};
ListWrapper.remove = function(list, el) {
var index = list.indexOf(el);
if (index > -1) {
list.splice(index, 1);
return true;
}
return false;
};
ListWrapper.clear = function(list) {
list.length = 0;
};
ListWrapper.isEmpty = function(list) {
return list.length == 0;
};
ListWrapper.fill = function(list, value, start, end) {
if (start === void 0) {
start = 0;
}
if (end === void 0) {
end = null;
}
list.fill(value, start, end === null ? list.length : end);
};
ListWrapper.equals = function(a, b) {
if (a.length != b.length) return false;
for (var i = 0; i < a.length; ++i) {
if (a[i] !== b[i]) return false;
}
return true;
};
ListWrapper.slice = function(l, from, to) {
if (from === void 0) {
from = 0;
}
if (to === void 0) {
to = null;
}
return l.slice(from, to === null ? undefined : to);
};
ListWrapper.splice = function(l, from, length) {
return l.splice(from, length);
};
ListWrapper.sort = function(l, compareFn) {
if (lang_1.isPresent(compareFn)) {
l.sort(compareFn);
} else {
l.sort();
}
};
ListWrapper.toString = function(l) {
return l.toString();
};
ListWrapper.toJSON = function(l) {
return JSON.stringify(l);
};
ListWrapper.maximum = function(list, predicate) {
if (list.length == 0) {
return null;
}
var solution = null;
var maxValue = -Infinity;
for (var index = 0; index < list.length; index++) {
var candidate = list[index];
if (lang_1.isBlank(candidate)) {
continue;
}
var candidateValue = predicate(candidate);
if (candidateValue > maxValue) {
solution = candidate;
maxValue = candidateValue;
}
}
return solution;
};
ListWrapper.flatten = function(list) {
var target = [];
_flattenArray(list, target);
return target;
};
ListWrapper.addAll = function(list, source) {
for (var i = 0; i < source.length; i++) {
list.push(source[i]);
}
};
return ListWrapper;
}();
exports.ListWrapper = ListWrapper;
function _flattenArray(source, target) {
if (lang_1.isPresent(source)) {
for (var i = 0; i < source.length; i++) {
var item = source[i];
if (lang_1.isArray(item)) {
_flattenArray(item, target);
} else {
target.push(item);
}
}
}
return target;
}
function isListLikeIterable(obj) {
if (!lang_1.isJsObject(obj)) return false;
return lang_1.isArray(obj) || !(obj instanceof exports.Map) && lang_1.getSymbolIterator() in obj;
}
exports.isListLikeIterable = isListLikeIterable;
function areIterablesEqual(a, b, comparator) {
var iterator1 = a[lang_1.getSymbolIterator()]();
var iterator2 = b[lang_1.getSymbolIterator()]();
while (true) {
var item1 = iterator1.next();
var item2 = iterator2.next();
if (item1.done && item2.done) return true;
if (item1.done || item2.done) return false;
if (!comparator(item1.value, item2.value)) return false;
}
}
exports.areIterablesEqual = areIterablesEqual;
function iterateListLike(obj, fn) {
if (lang_1.isArray(obj)) {
for (var i = 0; i < obj.length; i++) {
fn(obj[i]);
}
} else {
var iterator = obj[lang_1.getSymbolIterator()]();
var item;
while (!(item = iterator.next()).done) {
fn(item.value);
}
}
}
exports.iterateListLike = iterateListLike;
var createSetFromList = function() {
var test = new exports.Set([ 1, 2, 3 ]);
if (test.size === 3) {
return function createSetFromList(lst) {
return new exports.Set(lst);
};
} else {
return function createSetAndPopulateFromList(lst) {
var res = new exports.Set(lst);
if (res.size !== lst.length) {
for (var i = 0; i < lst.length; i++) {
res.add(lst[i]);
}
}
return res;
};
}
}();
var SetWrapper = function() {
function SetWrapper() {}
SetWrapper.createFromList = function(lst) {
return createSetFromList(lst);
};
SetWrapper.has = function(s, key) {
return s.has(key);
};
SetWrapper.delete = function(m, k) {
m.delete(k);
};
return SetWrapper;
}();
exports.SetWrapper = SetWrapper;
}, function(module, exports) {
"use strict";
var PromiseCompleter = function() {
function PromiseCompleter() {
var _this = this;
this.promise = new Promise(function(res, rej) {
_this.resolve = res;
_this.reject = rej;
});
}
return PromiseCompleter;
}();
exports.PromiseCompleter = PromiseCompleter;
var PromiseWrapper = function() {
function PromiseWrapper() {}
PromiseWrapper.resolve = function(obj) {
return Promise.resolve(obj);
};
PromiseWrapper.reject = function(obj, _) {
return Promise.reject(obj);
};
PromiseWrapper.catchError = function(promise, onError) {
return promise.catch(onError);
};
PromiseWrapper.all = function(promises) {
if (promises.length == 0) return Promise.resolve([]);
return Promise.all(promises);
};
PromiseWrapper.then = function(promise, success, rejection) {
return promise.then(success, rejection);
};
PromiseWrapper.wrap = function(computation) {
return new Promise(function(res, rej) {
try {
res(computation());
} catch (e) {
rej(e);
}
});
};
PromiseWrapper.scheduleMicrotask = function(computation) {
PromiseWrapper.then(PromiseWrapper.resolve(null), computation, function(_) {});
};
PromiseWrapper.isPromise = function(obj) {
return obj instanceof Promise;
};
PromiseWrapper.completer = function() {
return new PromiseCompleter();
};
return PromiseWrapper;
}();
exports.PromiseWrapper = PromiseWrapper;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var compiler_1 = __webpack_require__(277);
var promise_1 = __webpack_require__(507);
var lang_1 = __webpack_require__(505);
var XHRImpl = function(_super) {
__extends(XHRImpl, _super);
function XHRImpl() {
_super.apply(this, arguments);
}
XHRImpl.prototype.get = function(url) {
var completer = promise_1.PromiseWrapper.completer();
var xhr = new XMLHttpRequest();
xhr.open("GET", url, true);
xhr.responseType = "text";
xhr.onload = function() {
var response = lang_1.isPresent(xhr.response) ? xhr.response : xhr.responseText;
var status = xhr.status === 1223 ? 204 : xhr.status;
if (status === 0) {
status = response ? 200 : 0;
}
if (200 <= status && status <= 300) {
completer.resolve(response);
} else {
completer.reject("Failed to load " + url, null);
}
};
xhr.onerror = function() {
completer.reject("Failed to load " + url, null);
};
xhr.send();
return completer.promise;
};
return XHRImpl;
}(compiler_1.XHR);
exports.XHRImpl = XHRImpl;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
exports.ReflectionCapabilities = core_1.__core_private__.ReflectionCapabilities;
}, function(module, exports, __webpack_require__) {
"use strict";
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
__export(__webpack_require__(511));
}, function(module, exports, __webpack_require__) {
"use strict";
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var router_1 = __webpack_require__(512);
exports.Router = router_1.Router;
var router_outlet_1 = __webpack_require__(537);
exports.RouterOutlet = router_outlet_1.RouterOutlet;
var router_link_1 = __webpack_require__(539);
exports.RouterLink = router_link_1.RouterLink;
var instruction_1 = __webpack_require__(524);
exports.RouteParams = instruction_1.RouteParams;
exports.RouteData = instruction_1.RouteData;
var route_registry_1 = __webpack_require__(520);
exports.RouteRegistry = route_registry_1.RouteRegistry;
exports.ROUTER_PRIMARY_COMPONENT = route_registry_1.ROUTER_PRIMARY_COMPONENT;
__export(__webpack_require__(533));
var lifecycle_annotations_1 = __webpack_require__(538);
exports.CanActivate = lifecycle_annotations_1.CanActivate;
var instruction_2 = __webpack_require__(524);
exports.Instruction = instruction_2.Instruction;
exports.ComponentInstruction = instruction_2.ComponentInstruction;
var core_1 = __webpack_require__(118);
exports.OpaqueToken = core_1.OpaqueToken;
var router_providers_common_1 = __webpack_require__(540);
exports.ROUTER_PROVIDERS_COMMON = router_providers_common_1.ROUTER_PROVIDERS_COMMON;
var router_providers_1 = __webpack_require__(541);
exports.ROUTER_PROVIDERS = router_providers_1.ROUTER_PROVIDERS;
exports.ROUTER_BINDINGS = router_providers_1.ROUTER_BINDINGS;
var router_outlet_2 = __webpack_require__(537);
var router_link_2 = __webpack_require__(539);
exports.ROUTER_DIRECTIVES = [ router_outlet_2.RouterOutlet, router_link_2.RouterLink ];
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var async_1 = __webpack_require__(513);
var collection_1 = __webpack_require__(516);
var lang_1 = __webpack_require__(514);
var exceptions_1 = __webpack_require__(517);
var common_1 = __webpack_require__(376);
var route_registry_1 = __webpack_require__(520);
var route_lifecycle_reflector_1 = __webpack_require__(535);
var core_1 = __webpack_require__(118);
var _resolveToTrue = async_1.PromiseWrapper.resolve(true);
var _resolveToFalse = async_1.PromiseWrapper.resolve(false);
var Router = function() {
function Router(registry, parent, hostComponent, root) {
this.registry = registry;
this.parent = parent;
this.hostComponent = hostComponent;
this.root = root;
this.navigating = false;
this.currentInstruction = null;
this._currentNavigation = _resolveToTrue;
this._outlet = null;
this._auxRouters = new collection_1.Map();
this._subject = new async_1.EventEmitter();
}
Router.prototype.childRouter = function(hostComponent) {
return this._childRouter = new ChildRouter(this, hostComponent);
};
Router.prototype.auxRouter = function(hostComponent) {
return new ChildRouter(this, hostComponent);
};
Router.prototype.registerPrimaryOutlet = function(outlet) {
if (lang_1.isPresent(outlet.name)) {
throw new exceptions_1.BaseException("registerPrimaryOutlet expects to be called with an unnamed outlet.");
}
if (lang_1.isPresent(this._outlet)) {
throw new exceptions_1.BaseException("Primary outlet is already registered.");
}
this._outlet = outlet;
if (lang_1.isPresent(this.currentInstruction)) {
return this.commit(this.currentInstruction, false);
}
return _resolveToTrue;
};
Router.prototype.unregisterPrimaryOutlet = function(outlet) {
if (lang_1.isPresent(outlet.name)) {
throw new exceptions_1.BaseException("registerPrimaryOutlet expects to be called with an unnamed outlet.");
}
this._outlet = null;
};
Router.prototype.registerAuxOutlet = function(outlet) {
var outletName = outlet.name;
if (lang_1.isBlank(outletName)) {
throw new exceptions_1.BaseException("registerAuxOutlet expects to be called with an outlet with a name.");
}
var router = this.auxRouter(this.hostComponent);
this._auxRouters.set(outletName, router);
router._outlet = outlet;
var auxInstruction;
if (lang_1.isPresent(this.currentInstruction) && lang_1.isPresent(auxInstruction = this.currentInstruction.auxInstruction[outletName])) {
return router.commit(auxInstruction);
}
return _resolveToTrue;
};
Router.prototype.isRouteActive = function(instruction) {
var _this = this;
var router = this;
if (lang_1.isBlank(this.currentInstruction)) {
return false;
}
while (lang_1.isPresent(router.parent) && lang_1.isPresent(instruction.child)) {
router = router.parent;
instruction = instruction.child;
}
if (lang_1.isBlank(instruction.component) || lang_1.isBlank(this.currentInstruction.component) || this.currentInstruction.component.routeName != instruction.component.routeName) {
return false;
}
var paramEquals = true;
if (lang_1.isPresent(this.currentInstruction.component.params)) {
collection_1.StringMapWrapper.forEach(instruction.component.params, function(value, key) {
if (_this.currentInstruction.component.params[key] !== value) {
paramEquals = false;
}
});
}
return paramEquals;
};
Router.prototype.config = function(definitions) {
var _this = this;
definitions.forEach(function(routeDefinition) {
_this.registry.config(_this.hostComponent, routeDefinition);
});
return this.renavigate();
};
Router.prototype.navigate = function(linkParams) {
var instruction = this.generate(linkParams);
return this.navigateByInstruction(instruction, false);
};
Router.prototype.navigateByUrl = function(url, _skipLocationChange) {
var _this = this;
if (_skipLocationChange === void 0) {
_skipLocationChange = false;
}
return this._currentNavigation = this._currentNavigation.then(function(_) {
_this.lastNavigationAttempt = url;
_this._startNavigating();
return _this._afterPromiseFinishNavigating(_this.recognize(url).then(function(instruction) {
if (lang_1.isBlank(instruction)) {
return false;
}
return _this._navigate(instruction, _skipLocationChange);
}));
});
};
Router.prototype.navigateByInstruction = function(instruction, _skipLocationChange) {
var _this = this;
if (_skipLocationChange === void 0) {
_skipLocationChange = false;
}
if (lang_1.isBlank(instruction)) {
return _resolveToFalse;
}
return this._currentNavigation = this._currentNavigation.then(function(_) {
_this._startNavigating();
return _this._afterPromiseFinishNavigating(_this._navigate(instruction, _skipLocationChange));
});
};
Router.prototype._settleInstruction = function(instruction) {
var _this = this;
return instruction.resolveComponent().then(function(_) {
var unsettledInstructions = [];
if (lang_1.isPresent(instruction.component)) {
instruction.component.reuse = false;
}
if (lang_1.isPresent(instruction.child)) {
unsettledInstructions.push(_this._settleInstruction(instruction.child));
}
collection_1.StringMapWrapper.forEach(instruction.auxInstruction, function(instruction, _) {
unsettledInstructions.push(_this._settleInstruction(instruction));
});
return async_1.PromiseWrapper.all(unsettledInstructions);
});
};
Router.prototype._navigate = function(instruction, _skipLocationChange) {
var _this = this;
return this._settleInstruction(instruction).then(function(_) {
return _this._routerCanReuse(instruction);
}).then(function(_) {
return _this._canActivate(instruction);
}).then(function(result) {
if (!result) {
return false;
}
return _this._routerCanDeactivate(instruction).then(function(result) {
if (result) {
return _this.commit(instruction, _skipLocationChange).then(function(_) {
_this._emitNavigationFinish(instruction.toRootUrl());
return true;
});
}
});
});
};
Router.prototype._emitNavigationFinish = function(url) {
async_1.ObservableWrapper.callEmit(this._subject, url);
};
Router.prototype._emitNavigationFail = function(url) {
async_1.ObservableWrapper.callError(this._subject, url);
};
Router.prototype._afterPromiseFinishNavigating = function(promise) {
var _this = this;
return async_1.PromiseWrapper.catchError(promise.then(function(_) {
return _this._finishNavigating();
}), function(err) {
_this._finishNavigating();
throw err;
});
};
Router.prototype._routerCanReuse = function(instruction) {
var _this = this;
if (lang_1.isBlank(this._outlet)) {
return _resolveToFalse;
}
if (lang_1.isBlank(instruction.component)) {
return _resolveToTrue;
}
return this._outlet.routerCanReuse(instruction.component).then(function(result) {
instruction.component.reuse = result;
if (result && lang_1.isPresent(_this._childRouter) && lang_1.isPresent(instruction.child)) {
return _this._childRouter._routerCanReuse(instruction.child);
}
});
};
Router.prototype._canActivate = function(nextInstruction) {
return canActivateOne(nextInstruction, this.currentInstruction);
};
Router.prototype._routerCanDeactivate = function(instruction) {
var _this = this;
if (lang_1.isBlank(this._outlet)) {
return _resolveToTrue;
}
var next;
var childInstruction = null;
var reuse = false;
var componentInstruction = null;
if (lang_1.isPresent(instruction)) {
childInstruction = instruction.child;
componentInstruction = instruction.component;
reuse = lang_1.isBlank(instruction.component) || instruction.component.reuse;
}
if (reuse) {
next = _resolveToTrue;
} else {
next = this._outlet.routerCanDeactivate(componentInstruction);
}
return next.then(function(result) {
if (result == false) {
return false;
}
if (lang_1.isPresent(_this._childRouter)) {
return _this._childRouter._routerCanDeactivate(childInstruction);
}
return true;
});
};
Router.prototype.commit = function(instruction, _skipLocationChange) {
var _this = this;
if (_skipLocationChange === void 0) {
_skipLocationChange = false;
}
this.currentInstruction = instruction;
var next = _resolveToTrue;
if (lang_1.isPresent(this._outlet) && lang_1.isPresent(instruction.component)) {
var componentInstruction = instruction.component;
if (componentInstruction.reuse) {
next = this._outlet.reuse(componentInstruction);
} else {
next = this.deactivate(instruction).then(function(_) {
return _this._outlet.activate(componentInstruction);
});
}
if (lang_1.isPresent(instruction.child)) {
next = next.then(function(_) {
if (lang_1.isPresent(_this._childRouter)) {
return _this._childRouter.commit(instruction.child);
}
});
}
}
var promises = [];
this._auxRouters.forEach(function(router, name) {
if (lang_1.isPresent(instruction.auxInstruction[name])) {
promises.push(router.commit(instruction.auxInstruction[name]));
}
});
return next.then(function(_) {
return async_1.PromiseWrapper.all(promises);
});
};
Router.prototype._startNavigating = function() {
this.navigating = true;
};
Router.prototype._finishNavigating = function() {
this.navigating = false;
};
Router.prototype.subscribe = function(onNext, onError) {
return async_1.ObservableWrapper.subscribe(this._subject, onNext, onError);
};
Router.prototype.deactivate = function(instruction) {
var _this = this;
var childInstruction = null;
var componentInstruction = null;
if (lang_1.isPresent(instruction)) {
childInstruction = instruction.child;
componentInstruction = instruction.component;
}
var next = _resolveToTrue;
if (lang_1.isPresent(this._childRouter)) {
next = this._childRouter.deactivate(childInstruction);
}
if (lang_1.isPresent(this._outlet)) {
next = next.then(function(_) {
return _this._outlet.deactivate(componentInstruction);
});
}
return next;
};
Router.prototype.recognize = function(url) {
var ancestorComponents = this._getAncestorInstructions();
return this.registry.recognize(url, ancestorComponents);
};
Router.prototype._getAncestorInstructions = function() {
var ancestorInstructions = [ this.currentInstruction ];
var ancestorRouter = this;
while (lang_1.isPresent(ancestorRouter = ancestorRouter.parent)) {
ancestorInstructions.unshift(ancestorRouter.currentInstruction);
}
return ancestorInstructions;
};
Router.prototype.renavigate = function() {
if (lang_1.isBlank(this.lastNavigationAttempt)) {
return this._currentNavigation;
}
return this.navigateByUrl(this.lastNavigationAttempt);
};
Router.prototype.generate = function(linkParams) {
var ancestorInstructions = this._getAncestorInstructions();
return this.registry.generate(linkParams, ancestorInstructions);
};
Router = __decorate([ core_1.Injectable(), __metadata("design:paramtypes", [ route_registry_1.RouteRegistry, Router, Object, Router ]) ], Router);
return Router;
}();
exports.Router = Router;
var RootRouter = function(_super) {
__extends(RootRouter, _super);
function RootRouter(registry, location, primaryComponent) {
var _this = this;
_super.call(this, registry, null, primaryComponent);
this.root = this;
this._location = location;
this._locationSub = this._location.subscribe(function(change) {
_this.recognize(change["url"]).then(function(instruction) {
if (lang_1.isPresent(instruction)) {
_this.navigateByInstruction(instruction, lang_1.isPresent(change["pop"])).then(function(_) {
if (lang_1.isPresent(change["pop"]) && change["type"] != "hashchange") {
return;
}
var emitPath = instruction.toUrlPath();
var emitQuery = instruction.toUrlQuery();
if (emitPath.length > 0 && emitPath[0] != "/") {
emitPath = "/" + emitPath;
}
if (change["type"] == "hashchange") {
if (instruction.toRootUrl() != _this._location.path()) {
_this._location.replaceState(emitPath, emitQuery);
}
} else {
_this._location.go(emitPath, emitQuery);
}
});
} else {
_this._emitNavigationFail(change["url"]);
}
});
});
this.registry.configFromComponent(primaryComponent);
this.navigateByUrl(location.path());
}
RootRouter.prototype.commit = function(instruction, _skipLocationChange) {
var _this = this;
if (_skipLocationChange === void 0) {
_skipLocationChange = false;
}
var emitPath = instruction.toUrlPath();
var emitQuery = instruction.toUrlQuery();
if (emitPath.length > 0 && emitPath[0] != "/") {
emitPath = "/" + emitPath;
}
var promise = _super.prototype.commit.call(this, instruction);
if (!_skipLocationChange) {
promise = promise.then(function(_) {
_this._location.go(emitPath, emitQuery);
});
}
return promise;
};
RootRouter.prototype.dispose = function() {
if (lang_1.isPresent(this._locationSub)) {
async_1.ObservableWrapper.dispose(this._locationSub);
this._locationSub = null;
}
};
RootRouter = __decorate([ core_1.Injectable(), __param(2, core_1.Inject(route_registry_1.ROUTER_PRIMARY_COMPONENT)), __metadata("design:paramtypes", [ route_registry_1.RouteRegistry, common_1.Location, lang_1.Type ]) ], RootRouter);
return RootRouter;
}(Router);
exports.RootRouter = RootRouter;
var ChildRouter = function(_super) {
__extends(ChildRouter, _super);
function ChildRouter(parent, hostComponent) {
_super.call(this, parent.registry, parent, hostComponent, parent.root);
this.parent = parent;
}
ChildRouter.prototype.navigateByUrl = function(url, _skipLocationChange) {
if (_skipLocationChange === void 0) {
_skipLocationChange = false;
}
return this.parent.navigateByUrl(url, _skipLocationChange);
};
ChildRouter.prototype.navigateByInstruction = function(instruction, _skipLocationChange) {
if (_skipLocationChange === void 0) {
_skipLocationChange = false;
}
return this.parent.navigateByInstruction(instruction, _skipLocationChange);
};
return ChildRouter;
}(Router);
function canActivateOne(nextInstruction, prevInstruction) {
var next = _resolveToTrue;
if (lang_1.isBlank(nextInstruction.component)) {
return next;
}
if (lang_1.isPresent(nextInstruction.child)) {
next = canActivateOne(nextInstruction.child, lang_1.isPresent(prevInstruction) ? prevInstruction.child : null);
}
return next.then(function(result) {
if (result == false) {
return false;
}
if (nextInstruction.component.reuse) {
return true;
}
var hook = route_lifecycle_reflector_1.getCanActivateHook(nextInstruction.component.componentType);
if (lang_1.isPresent(hook)) {
return hook(nextInstruction.component, lang_1.isPresent(prevInstruction) ? prevInstruction.component : null);
}
return true;
});
}
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(514);
var promise_1 = __webpack_require__(515);
exports.PromiseWrapper = promise_1.PromiseWrapper;
exports.PromiseCompleter = promise_1.PromiseCompleter;
var Subject_1 = __webpack_require__(150);
var PromiseObservable_1 = __webpack_require__(169);
var toPromise_1 = __webpack_require__(170);
var Observable_1 = __webpack_require__(151);
exports.Observable = Observable_1.Observable;
var Subject_2 = __webpack_require__(150);
exports.Subject = Subject_2.Subject;
var TimerWrapper = function() {
function TimerWrapper() {}
TimerWrapper.setTimeout = function(fn, millis) {
return lang_1.global.setTimeout(fn, millis);
};
TimerWrapper.clearTimeout = function(id) {
lang_1.global.clearTimeout(id);
};
TimerWrapper.setInterval = function(fn, millis) {
return lang_1.global.setInterval(fn, millis);
};
TimerWrapper.clearInterval = function(id) {
lang_1.global.clearInterval(id);
};
return TimerWrapper;
}();
exports.TimerWrapper = TimerWrapper;
var ObservableWrapper = function() {
function ObservableWrapper() {}
ObservableWrapper.subscribe = function(emitter, onNext, onError, onComplete) {
if (onComplete === void 0) {
onComplete = function() {};
}
onError = typeof onError === "function" && onError || lang_1.noop;
onComplete = typeof onComplete === "function" && onComplete || lang_1.noop;
return emitter.subscribe({
next: onNext,
error: onError,
complete: onComplete
});
};
ObservableWrapper.isObservable = function(obs) {
return !!obs.subscribe;
};
ObservableWrapper.hasSubscribers = function(obs) {
return obs.observers.length > 0;
};
ObservableWrapper.dispose = function(subscription) {
subscription.unsubscribe();
};
ObservableWrapper.callNext = function(emitter, value) {
emitter.next(value);
};
ObservableWrapper.callEmit = function(emitter, value) {
emitter.emit(value);
};
ObservableWrapper.callError = function(emitter, error) {
emitter.error(error);
};
ObservableWrapper.callComplete = function(emitter) {
emitter.complete();
};
ObservableWrapper.fromPromise = function(promise) {
return PromiseObservable_1.PromiseObservable.create(promise);
};
ObservableWrapper.toPromise = function(obj) {
return toPromise_1.toPromise.call(obj);
};
return ObservableWrapper;
}();
exports.ObservableWrapper = ObservableWrapper;
var EventEmitter = function(_super) {
__extends(EventEmitter, _super);
function EventEmitter(isAsync) {
if (isAsync === void 0) {
isAsync = true;
}
_super.call(this);
this._isAsync = isAsync;
}
EventEmitter.prototype.emit = function(value) {
_super.prototype.next.call(this, value);
};
EventEmitter.prototype.next = function(value) {
_super.prototype.next.call(this, value);
};
EventEmitter.prototype.subscribe = function(generatorOrNext, error, complete) {
var schedulerFn;
var errorFn = function(err) {
return null;
};
var completeFn = function() {
return null;
};
if (generatorOrNext && typeof generatorOrNext === "object") {
schedulerFn = this._isAsync ? function(value) {
setTimeout(function() {
return generatorOrNext.next(value);
});
} : function(value) {
generatorOrNext.next(value);
};
if (generatorOrNext.error) {
errorFn = this._isAsync ? function(err) {
setTimeout(function() {
return generatorOrNext.error(err);
});
} : function(err) {
generatorOrNext.error(err);
};
}
if (generatorOrNext.complete) {
completeFn = this._isAsync ? function() {
setTimeout(function() {
return generatorOrNext.complete();
});
} : function() {
generatorOrNext.complete();
};
}
} else {
schedulerFn = this._isAsync ? function(value) {
setTimeout(function() {
return generatorOrNext(value);
});
} : function(value) {
generatorOrNext(value);
};
if (error) {
errorFn = this._isAsync ? function(err) {
setTimeout(function() {
return error(err);
});
} : function(err) {
error(err);
};
}
if (complete) {
completeFn = this._isAsync ? function() {
setTimeout(function() {
return complete();
});
} : function() {
complete();
};
}
}
return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
};
return EventEmitter;
}(Subject_1.Subject);
exports.EventEmitter = EventEmitter;
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var globalScope;
if (typeof window === "undefined") {
if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) {
globalScope = self;
} else {
globalScope = global;
}
} else {
globalScope = window;
}
function scheduleMicroTask(fn) {
Zone.current.scheduleMicroTask("scheduleMicrotask", fn);
}
exports.scheduleMicroTask = scheduleMicroTask;
exports.IS_DART = false;
var _global = globalScope;
exports.global = _global;
exports.Type = Function;
function getTypeNameForDebugging(type) {
if (type["name"]) {
return type["name"];
}
return typeof type;
}
exports.getTypeNameForDebugging = getTypeNameForDebugging;
exports.Math = _global.Math;
exports.Date = _global.Date;
var _devMode = true;
var _modeLocked = false;
function lockMode() {
_modeLocked = true;
}
exports.lockMode = lockMode;
function enableProdMode() {
if (_modeLocked) {
throw "Cannot enable prod mode after platform setup.";
}
_devMode = false;
}
exports.enableProdMode = enableProdMode;
function assertionsEnabled() {
return _devMode;
}
exports.assertionsEnabled = assertionsEnabled;
_global.assert = function assert(condition) {};
function isPresent(obj) {
return obj !== undefined && obj !== null;
}
exports.isPresent = isPresent;
function isBlank(obj) {
return obj === undefined || obj === null;
}
exports.isBlank = isBlank;
function isBoolean(obj) {
return typeof obj === "boolean";
}
exports.isBoolean = isBoolean;
function isNumber(obj) {
return typeof obj === "number";
}
exports.isNumber = isNumber;
function isString(obj) {
return typeof obj === "string";
}
exports.isString = isString;
function isFunction(obj) {
return typeof obj === "function";
}
exports.isFunction = isFunction;
function isType(obj) {
return isFunction(obj);
}
exports.isType = isType;
function isStringMap(obj) {
return typeof obj === "object" && obj !== null;
}
exports.isStringMap = isStringMap;
var STRING_MAP_PROTO = Object.getPrototypeOf({});
function isStrictStringMap(obj) {
return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
}
exports.isStrictStringMap = isStrictStringMap;
function isPromise(obj) {
return obj instanceof _global.Promise;
}
exports.isPromise = isPromise;
function isArray(obj) {
return Array.isArray(obj);
}
exports.isArray = isArray;
function isDate(obj) {
return obj instanceof exports.Date && !isNaN(obj.valueOf());
}
exports.isDate = isDate;
function noop() {}
exports.noop = noop;
function stringify(token) {
if (typeof token === "string") {
return token;
}
if (token === undefined || token === null) {
return "" + token;
}
if (token.name) {
return token.name;
}
if (token.overriddenName) {
return token.overriddenName;
}
var res = token.toString();
var newLineIndex = res.indexOf("\n");
return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
exports.stringify = stringify;
function serializeEnum(val) {
return val;
}
exports.serializeEnum = serializeEnum;
function deserializeEnum(val, values) {
return val;
}
exports.deserializeEnum = deserializeEnum;
function resolveEnumToken(enumValue, val) {
return enumValue[val];
}
exports.resolveEnumToken = resolveEnumToken;
var StringWrapper = function() {
function StringWrapper() {}
StringWrapper.fromCharCode = function(code) {
return String.fromCharCode(code);
};
StringWrapper.charCodeAt = function(s, index) {
return s.charCodeAt(index);
};
StringWrapper.split = function(s, regExp) {
return s.split(regExp);
};
StringWrapper.equals = function(s, s2) {
return s === s2;
};
StringWrapper.stripLeft = function(s, charVal) {
if (s && s.length) {
var pos = 0;
for (var i = 0; i < s.length; i++) {
if (s[i] != charVal) break;
pos++;
}
s = s.substring(pos);
}
return s;
};
StringWrapper.stripRight = function(s, charVal) {
if (s && s.length) {
var pos = s.length;
for (var i = s.length - 1; i >= 0; i--) {
if (s[i] != charVal) break;
pos--;
}
s = s.substring(0, pos);
}
return s;
};
StringWrapper.replace = function(s, from, replace) {
return s.replace(from, replace);
};
StringWrapper.replaceAll = function(s, from, replace) {
return s.replace(from, replace);
};
StringWrapper.slice = function(s, from, to) {
if (from === void 0) {
from = 0;
}
if (to === void 0) {
to = null;
}
return s.slice(from, to === null ? undefined : to);
};
StringWrapper.replaceAllMapped = function(s, from, cb) {
return s.replace(from, function() {
var matches = [];
for (var _i = 0; _i < arguments.length; _i++) {
matches[_i - 0] = arguments[_i];
}
matches.splice(-2, 2);
return cb(matches);
});
};
StringWrapper.contains = function(s, substr) {
return s.indexOf(substr) != -1;
};
StringWrapper.compare = function(a, b) {
if (a < b) {
return -1;
} else if (a > b) {
return 1;
} else {
return 0;
}
};
return StringWrapper;
}();
exports.StringWrapper = StringWrapper;
var StringJoiner = function() {
function StringJoiner(parts) {
if (parts === void 0) {
parts = [];
}
this.parts = parts;
}
StringJoiner.prototype.add = function(part) {
this.parts.push(part);
};
StringJoiner.prototype.toString = function() {
return this.parts.join("");
};
return StringJoiner;
}();
exports.StringJoiner = StringJoiner;
var NumberParseError = function(_super) {
__extends(NumberParseError, _super);
function NumberParseError(message) {
_super.call(this);
this.message = message;
}
NumberParseError.prototype.toString = function() {
return this.message;
};
return NumberParseError;
}(Error);
exports.NumberParseError = NumberParseError;
var NumberWrapper = function() {
function NumberWrapper() {}
NumberWrapper.toFixed = function(n, fractionDigits) {
return n.toFixed(fractionDigits);
};
NumberWrapper.equal = function(a, b) {
return a === b;
};
NumberWrapper.parseIntAutoRadix = function(text) {
var result = parseInt(text);
if (isNaN(result)) {
throw new NumberParseError("Invalid integer literal when parsing " + text);
}
return result;
};
NumberWrapper.parseInt = function(text, radix) {
if (radix == 10) {
if (/^(\-|\+)?[0-9]+$/.test(text)) {
return parseInt(text, radix);
}
} else if (radix == 16) {
if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
return parseInt(text, radix);
}
} else {
var result = parseInt(text, radix);
if (!isNaN(result)) {
return result;
}
}
throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " + radix);
};
NumberWrapper.parseFloat = function(text) {
return parseFloat(text);
};
Object.defineProperty(NumberWrapper, "NaN", {
get: function() {
return NaN;
},
enumerable: true,
configurable: true
});
NumberWrapper.isNaN = function(value) {
return isNaN(value);
};
NumberWrapper.isInteger = function(value) {
return Number.isInteger(value);
};
return NumberWrapper;
}();
exports.NumberWrapper = NumberWrapper;
exports.RegExp = _global.RegExp;
var RegExpWrapper = function() {
function RegExpWrapper() {}
RegExpWrapper.create = function(regExpStr, flags) {
if (flags === void 0) {
flags = "";
}
flags = flags.replace(/g/g, "");
return new _global.RegExp(regExpStr, flags + "g");
};
RegExpWrapper.firstMatch = function(regExp, input) {
regExp.lastIndex = 0;
return regExp.exec(input);
};
RegExpWrapper.test = function(regExp, input) {
regExp.lastIndex = 0;
return regExp.test(input);
};
RegExpWrapper.matcher = function(regExp, input) {
regExp.lastIndex = 0;
return {
re: regExp,
input: input
};
};
RegExpWrapper.replaceAll = function(regExp, input, replace) {
var c = regExp.exec(input);
var res = "";
regExp.lastIndex = 0;
var prev = 0;
while (c) {
res += input.substring(prev, c.index);
res += replace(c);
prev = c.index + c[0].length;
regExp.lastIndex = prev;
c = regExp.exec(input);
}
res += input.substring(prev);
return res;
};
return RegExpWrapper;
}();
exports.RegExpWrapper = RegExpWrapper;
var RegExpMatcherWrapper = function() {
function RegExpMatcherWrapper() {}
RegExpMatcherWrapper.next = function(matcher) {
return matcher.re.exec(matcher.input);
};
return RegExpMatcherWrapper;
}();
exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
var FunctionWrapper = function() {
function FunctionWrapper() {}
FunctionWrapper.apply = function(fn, posArgs) {
return fn.apply(null, posArgs);
};
return FunctionWrapper;
}();
exports.FunctionWrapper = FunctionWrapper;
function looseIdentical(a, b) {
return a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
}
exports.looseIdentical = looseIdentical;
function getMapKey(value) {
return value;
}
exports.getMapKey = getMapKey;
function normalizeBlank(obj) {
return isBlank(obj) ? null : obj;
}
exports.normalizeBlank = normalizeBlank;
function normalizeBool(obj) {
return isBlank(obj) ? false : obj;
}
exports.normalizeBool = normalizeBool;
function isJsObject(o) {
return o !== null && (typeof o === "function" || typeof o === "object");
}
exports.isJsObject = isJsObject;
function print(obj) {
console.log(obj);
}
exports.print = print;
function warn(obj) {
console.warn(obj);
}
exports.warn = warn;
var Json = function() {
function Json() {}
Json.parse = function(s) {
return _global.JSON.parse(s);
};
Json.stringify = function(data) {
return _global.JSON.stringify(data, null, 2);
};
return Json;
}();
exports.Json = Json;
var DateWrapper = function() {
function DateWrapper() {}
DateWrapper.create = function(year, month, day, hour, minutes, seconds, milliseconds) {
if (month === void 0) {
month = 1;
}
if (day === void 0) {
day = 1;
}
if (hour === void 0) {
hour = 0;
}
if (minutes === void 0) {
minutes = 0;
}
if (seconds === void 0) {
seconds = 0;
}
if (milliseconds === void 0) {
milliseconds = 0;
}
return new exports.Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
};
DateWrapper.fromISOString = function(str) {
return new exports.Date(str);
};
DateWrapper.fromMillis = function(ms) {
return new exports.Date(ms);
};
DateWrapper.toMillis = function(date) {
return date.getTime();
};
DateWrapper.now = function() {
return new exports.Date();
};
DateWrapper.toJson = function(date) {
return date.toJSON();
};
return DateWrapper;
}();
exports.DateWrapper = DateWrapper;
function setValueOnPath(global, path, value) {
var parts = path.split(".");
var obj = global;
while (parts.length > 1) {
var name = parts.shift();
if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
obj = obj[name];
} else {
obj = obj[name] = {};
}
}
if (obj === undefined || obj === null) {
obj = {};
}
obj[parts.shift()] = value;
}
exports.setValueOnPath = setValueOnPath;
var _symbolIterator = null;
function getSymbolIterator() {
if (isBlank(_symbolIterator)) {
if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
_symbolIterator = Symbol.iterator;
} else {
var keys = Object.getOwnPropertyNames(Map.prototype);
for (var i = 0; i < keys.length; ++i) {
var key = keys[i];
if (key !== "entries" && key !== "size" && Map.prototype[key] === Map.prototype["entries"]) {
_symbolIterator = key;
}
}
}
}
return _symbolIterator;
}
exports.getSymbolIterator = getSymbolIterator;
function evalExpression(sourceUrl, expr, declarations, vars) {
var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
var fnArgNames = [];
var fnArgValues = [];
for (var argName in vars) {
fnArgNames.push(argName);
fnArgValues.push(vars[argName]);
}
return new (Function.bind.apply(Function, [ void 0 ].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
}
exports.evalExpression = evalExpression;
function isPrimitive(obj) {
return !isJsObject(obj);
}
exports.isPrimitive = isPrimitive;
function hasConstructor(value, type) {
return value.constructor === type;
}
exports.hasConstructor = hasConstructor;
function bitWiseOr(values) {
return values.reduce(function(a, b) {
return a | b;
});
}
exports.bitWiseOr = bitWiseOr;
function bitWiseAnd(values) {
return values.reduce(function(a, b) {
return a & b;
});
}
exports.bitWiseAnd = bitWiseAnd;
function escape(s) {
return _global.encodeURI(s);
}
exports.escape = escape;
}, function(module, exports) {
"use strict";
var PromiseCompleter = function() {
function PromiseCompleter() {
var _this = this;
this.promise = new Promise(function(res, rej) {
_this.resolve = res;
_this.reject = rej;
});
}
return PromiseCompleter;
}();
exports.PromiseCompleter = PromiseCompleter;
var PromiseWrapper = function() {
function PromiseWrapper() {}
PromiseWrapper.resolve = function(obj) {
return Promise.resolve(obj);
};
PromiseWrapper.reject = function(obj, _) {
return Promise.reject(obj);
};
PromiseWrapper.catchError = function(promise, onError) {
return promise.catch(onError);
};
PromiseWrapper.all = function(promises) {
if (promises.length == 0) return Promise.resolve([]);
return Promise.all(promises);
};
PromiseWrapper.then = function(promise, success, rejection) {
return promise.then(success, rejection);
};
PromiseWrapper.wrap = function(computation) {
return new Promise(function(res, rej) {
try {
res(computation());
} catch (e) {
rej(e);
}
});
};
PromiseWrapper.scheduleMicrotask = function(computation) {
PromiseWrapper.then(PromiseWrapper.resolve(null), computation, function(_) {});
};
PromiseWrapper.isPromise = function(obj) {
return obj instanceof Promise;
};
PromiseWrapper.completer = function() {
return new PromiseCompleter();
};
return PromiseWrapper;
}();
exports.PromiseWrapper = PromiseWrapper;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(514);
exports.Map = lang_1.global.Map;
exports.Set = lang_1.global.Set;
var createMapFromPairs = function() {
try {
if (new exports.Map([ [ 1, 2 ] ]).size === 1) {
return function createMapFromPairs(pairs) {
return new exports.Map(pairs);
};
}
} catch (e) {}
return function createMapAndPopulateFromPairs(pairs) {
var map = new exports.Map();
for (var i = 0; i < pairs.length; i++) {
var pair = pairs[i];
map.set(pair[0], pair[1]);
}
return map;
};
}();
var createMapFromMap = function() {
try {
if (new exports.Map(new exports.Map())) {
return function createMapFromMap(m) {
return new exports.Map(m);
};
}
} catch (e) {}
return function createMapAndPopulateFromMap(m) {
var map = new exports.Map();
m.forEach(function(v, k) {
map.set(k, v);
});
return map;
};
}();
var _clearValues = function() {
if (new exports.Map().keys().next) {
return function _clearValues(m) {
var keyIterator = m.keys();
var k;
while (!(k = keyIterator.next()).done) {
m.set(k.value, null);
}
};
} else {
return function _clearValuesWithForeEach(m) {
m.forEach(function(v, k) {
m.set(k, null);
});
};
}
}();
var _arrayFromMap = function() {
try {
if (new exports.Map().values().next) {
return function createArrayFromMap(m, getValues) {
return getValues ? Array.from(m.values()) : Array.from(m.keys());
};
}
} catch (e) {}
return function createArrayFromMapWithForeach(m, getValues) {
var res = ListWrapper.createFixedSize(m.size), i = 0;
m.forEach(function(v, k) {
res[i] = getValues ? v : k;
i++;
});
return res;
};
}();
var MapWrapper = function() {
function MapWrapper() {}
MapWrapper.clone = function(m) {
return createMapFromMap(m);
};
MapWrapper.createFromStringMap = function(stringMap) {
var result = new exports.Map();
for (var prop in stringMap) {
result.set(prop, stringMap[prop]);
}
return result;
};
MapWrapper.toStringMap = function(m) {
var r = {};
m.forEach(function(v, k) {
return r[k] = v;
});
return r;
};
MapWrapper.createFromPairs = function(pairs) {
return createMapFromPairs(pairs);
};
MapWrapper.clearValues = function(m) {
_clearValues(m);
};
MapWrapper.iterable = function(m) {
return m;
};
MapWrapper.keys = function(m) {
return _arrayFromMap(m, false);
};
MapWrapper.values = function(m) {
return _arrayFromMap(m, true);
};
return MapWrapper;
}();
exports.MapWrapper = MapWrapper;
var StringMapWrapper = function() {
function StringMapWrapper() {}
StringMapWrapper.create = function() {
return {};
};
StringMapWrapper.contains = function(map, key) {
return map.hasOwnProperty(key);
};
StringMapWrapper.get = function(map, key) {
return map.hasOwnProperty(key) ? map[key] : undefined;
};
StringMapWrapper.set = function(map, key, value) {
map[key] = value;
};
StringMapWrapper.keys = function(map) {
return Object.keys(map);
};
StringMapWrapper.values = function(map) {
return Object.keys(map).reduce(function(r, a) {
r.push(map[a]);
return r;
}, []);
};
StringMapWrapper.isEmpty = function(map) {
for (var prop in map) {
return false;
}
return true;
};
StringMapWrapper.delete = function(map, key) {
delete map[key];
};
StringMapWrapper.forEach = function(map, callback) {
for (var prop in map) {
if (map.hasOwnProperty(prop)) {
callback(map[prop], prop);
}
}
};
StringMapWrapper.merge = function(m1, m2) {
var m = {};
for (var attr in m1) {
if (m1.hasOwnProperty(attr)) {
m[attr] = m1[attr];
}
}
for (var attr in m2) {
if (m2.hasOwnProperty(attr)) {
m[attr] = m2[attr];
}
}
return m;
};
StringMapWrapper.equals = function(m1, m2) {
var k1 = Object.keys(m1);
var k2 = Object.keys(m2);
if (k1.length != k2.length) {
return false;
}
var key;
for (var i = 0; i < k1.length; i++) {
key = k1[i];
if (m1[key] !== m2[key]) {
return false;
}
}
return true;
};
return StringMapWrapper;
}();
exports.StringMapWrapper = StringMapWrapper;
var ListWrapper = function() {
function ListWrapper() {}
ListWrapper.createFixedSize = function(size) {
return new Array(size);
};
ListWrapper.createGrowableSize = function(size) {
return new Array(size);
};
ListWrapper.clone = function(array) {
return array.slice(0);
};
ListWrapper.forEachWithIndex = function(array, fn) {
for (var i = 0; i < array.length; i++) {
fn(array[i], i);
}
};
ListWrapper.first = function(array) {
if (!array) return null;
return array[0];
};
ListWrapper.last = function(array) {
if (!array || array.length == 0) return null;
return array[array.length - 1];
};
ListWrapper.indexOf = function(array, value, startIndex) {
if (startIndex === void 0) {
startIndex = 0;
}
return array.indexOf(value, startIndex);
};
ListWrapper.contains = function(list, el) {
return list.indexOf(el) !== -1;
};
ListWrapper.reversed = function(array) {
var a = ListWrapper.clone(array);
return a.reverse();
};
ListWrapper.concat = function(a, b) {
return a.concat(b);
};
ListWrapper.insert = function(list, index, value) {
list.splice(index, 0, value);
};
ListWrapper.removeAt = function(list, index) {
var res = list[index];
list.splice(index, 1);
return res;
};
ListWrapper.removeAll = function(list, items) {
for (var i = 0; i < items.length; ++i) {
var index = list.indexOf(items[i]);
list.splice(index, 1);
}
};
ListWrapper.remove = function(list, el) {
var index = list.indexOf(el);
if (index > -1) {
list.splice(index, 1);
return true;
}
return false;
};
ListWrapper.clear = function(list) {
list.length = 0;
};
ListWrapper.isEmpty = function(list) {
return list.length == 0;
};
ListWrapper.fill = function(list, value, start, end) {
if (start === void 0) {
start = 0;
}
if (end === void 0) {
end = null;
}
list.fill(value, start, end === null ? list.length : end);
};
ListWrapper.equals = function(a, b) {
if (a.length != b.length) return false;
for (var i = 0; i < a.length; ++i) {
if (a[i] !== b[i]) return false;
}
return true;
};
ListWrapper.slice = function(l, from, to) {
if (from === void 0) {
from = 0;
}
if (to === void 0) {
to = null;
}
return l.slice(from, to === null ? undefined : to);
};
ListWrapper.splice = function(l, from, length) {
return l.splice(from, length);
};
ListWrapper.sort = function(l, compareFn) {
if (lang_1.isPresent(compareFn)) {
l.sort(compareFn);
} else {
l.sort();
}
};
ListWrapper.toString = function(l) {
return l.toString();
};
ListWrapper.toJSON = function(l) {
return JSON.stringify(l);
};
ListWrapper.maximum = function(list, predicate) {
if (list.length == 0) {
return null;
}
var solution = null;
var maxValue = -Infinity;
for (var index = 0; index < list.length; index++) {
var candidate = list[index];
if (lang_1.isBlank(candidate)) {
continue;
}
var candidateValue = predicate(candidate);
if (candidateValue > maxValue) {
solution = candidate;
maxValue = candidateValue;
}
}
return solution;
};
ListWrapper.flatten = function(list) {
var target = [];
_flattenArray(list, target);
return target;
};
ListWrapper.addAll = function(list, source) {
for (var i = 0; i < source.length; i++) {
list.push(source[i]);
}
};
return ListWrapper;
}();
exports.ListWrapper = ListWrapper;
function _flattenArray(source, target) {
if (lang_1.isPresent(source)) {
for (var i = 0; i < source.length; i++) {
var item = source[i];
if (lang_1.isArray(item)) {
_flattenArray(item, target);
} else {
target.push(item);
}
}
}
return target;
}
function isListLikeIterable(obj) {
if (!lang_1.isJsObject(obj)) return false;
return lang_1.isArray(obj) || !(obj instanceof exports.Map) && lang_1.getSymbolIterator() in obj;
}
exports.isListLikeIterable = isListLikeIterable;
function areIterablesEqual(a, b, comparator) {
var iterator1 = a[lang_1.getSymbolIterator()]();
var iterator2 = b[lang_1.getSymbolIterator()]();
while (true) {
var item1 = iterator1.next();
var item2 = iterator2.next();
if (item1.done && item2.done) return true;
if (item1.done || item2.done) return false;
if (!comparator(item1.value, item2.value)) return false;
}
}
exports.areIterablesEqual = areIterablesEqual;
function iterateListLike(obj, fn) {
if (lang_1.isArray(obj)) {
for (var i = 0; i < obj.length; i++) {
fn(obj[i]);
}
} else {
var iterator = obj[lang_1.getSymbolIterator()]();
var item;
while (!(item = iterator.next()).done) {
fn(item.value);
}
}
}
exports.iterateListLike = iterateListLike;
var createSetFromList = function() {
var test = new exports.Set([ 1, 2, 3 ]);
if (test.size === 3) {
return function createSetFromList(lst) {
return new exports.Set(lst);
};
} else {
return function createSetAndPopulateFromList(lst) {
var res = new exports.Set(lst);
if (res.size !== lst.length) {
for (var i = 0; i < lst.length; i++) {
res.add(lst[i]);
}
}
return res;
};
}
}();
var SetWrapper = function() {
function SetWrapper() {}
SetWrapper.createFromList = function(lst) {
return createSetFromList(lst);
};
SetWrapper.has = function(s, key) {
return s.has(key);
};
SetWrapper.delete = function(m, k) {
m.delete(k);
};
return SetWrapper;
}();
exports.SetWrapper = SetWrapper;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var base_wrapped_exception_1 = __webpack_require__(518);
var exception_handler_1 = __webpack_require__(519);
var exception_handler_2 = __webpack_require__(519);
exports.ExceptionHandler = exception_handler_2.ExceptionHandler;
var BaseException = function(_super) {
__extends(BaseException, _super);
function BaseException(message) {
if (message === void 0) {
message = "--";
}
_super.call(this, message);
this.message = message;
this.stack = new Error(message).stack;
}
BaseException.prototype.toString = function() {
return this.message;
};
return BaseException;
}(Error);
exports.BaseException = BaseException;
var WrappedException = function(_super) {
__extends(WrappedException, _super);
function WrappedException(_wrapperMessage, _originalException, _originalStack, _context) {
_super.call(this, _wrapperMessage);
this._wrapperMessage = _wrapperMessage;
this._originalException = _originalException;
this._originalStack = _originalStack;
this._context = _context;
this._wrapperStack = new Error(_wrapperMessage).stack;
}
Object.defineProperty(WrappedException.prototype, "wrapperMessage", {
get: function() {
return this._wrapperMessage;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "wrapperStack", {
get: function() {
return this._wrapperStack;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "originalException", {
get: function() {
return this._originalException;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "originalStack", {
get: function() {
return this._originalStack;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "context", {
get: function() {
return this._context;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrappedException.prototype, "message", {
get: function() {
return exception_handler_1.ExceptionHandler.exceptionToString(this);
},
enumerable: true,
configurable: true
});
WrappedException.prototype.toString = function() {
return this.message;
};
return WrappedException;
}(base_wrapped_exception_1.BaseWrappedException);
exports.WrappedException = WrappedException;
function makeTypeError(message) {
return new TypeError(message);
}
exports.makeTypeError = makeTypeError;
function unimplemented() {
throw new BaseException("unimplemented");
}
exports.unimplemented = unimplemented;
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BaseWrappedException = function(_super) {
__extends(BaseWrappedException, _super);
function BaseWrappedException(message) {
_super.call(this, message);
}
Object.defineProperty(BaseWrappedException.prototype, "wrapperMessage", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "wrapperStack", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "originalException", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "originalStack", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "context", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(BaseWrappedException.prototype, "message", {
get: function() {
return "";
},
enumerable: true,
configurable: true
});
return BaseWrappedException;
}(Error);
exports.BaseWrappedException = BaseWrappedException;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(514);
var base_wrapped_exception_1 = __webpack_require__(518);
var collection_1 = __webpack_require__(516);
var _ArrayLogger = function() {
function _ArrayLogger() {
this.res = [];
}
_ArrayLogger.prototype.log = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logError = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logGroup = function(s) {
this.res.push(s);
};
_ArrayLogger.prototype.logGroupEnd = function() {};
return _ArrayLogger;
}();
var ExceptionHandler = function() {
function ExceptionHandler(_logger, _rethrowException) {
if (_rethrowException === void 0) {
_rethrowException = true;
}
this._logger = _logger;
this._rethrowException = _rethrowException;
}
ExceptionHandler.exceptionToString = function(exception, stackTrace, reason) {
if (stackTrace === void 0) {
stackTrace = null;
}
if (reason === void 0) {
reason = null;
}
var l = new _ArrayLogger();
var e = new ExceptionHandler(l, false);
e.call(exception, stackTrace, reason);
return l.res.join("\n");
};
ExceptionHandler.prototype.call = function(exception, stackTrace, reason) {
if (stackTrace === void 0) {
stackTrace = null;
}
if (reason === void 0) {
reason = null;
}
var originalException = this._findOriginalException(exception);
var originalStack = this._findOriginalStack(exception);
var context = this._findContext(exception);
this._logger.logGroup("EXCEPTION: " + this._extractMessage(exception));
if (lang_1.isPresent(stackTrace) && lang_1.isBlank(originalStack)) {
this._logger.logError("STACKTRACE:");
this._logger.logError(this._longStackTrace(stackTrace));
}
if (lang_1.isPresent(reason)) {
this._logger.logError("REASON: " + reason);
}
if (lang_1.isPresent(originalException)) {
this._logger.logError("ORIGINAL EXCEPTION: " + this._extractMessage(originalException));
}
if (lang_1.isPresent(originalStack)) {
this._logger.logError("ORIGINAL STACKTRACE:");
this._logger.logError(this._longStackTrace(originalStack));
}
if (lang_1.isPresent(context)) {
this._logger.logError("ERROR CONTEXT:");
this._logger.logError(context);
}
this._logger.logGroupEnd();
if (this._rethrowException) throw exception;
};
ExceptionHandler.prototype._extractMessage = function(exception) {
return exception instanceof base_wrapped_exception_1.BaseWrappedException ? exception.wrapperMessage : exception.toString();
};
ExceptionHandler.prototype._longStackTrace = function(stackTrace) {
return collection_1.isListLikeIterable(stackTrace) ? stackTrace.join("\n\n-----async gap-----\n") : stackTrace.toString();
};
ExceptionHandler.prototype._findContext = function(exception) {
try {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
return lang_1.isPresent(exception.context) ? exception.context : this._findContext(exception.originalException);
} catch (e) {
return null;
}
};
ExceptionHandler.prototype._findOriginalException = function(exception) {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
var e = exception.originalException;
while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
e = e.originalException;
}
return e;
};
ExceptionHandler.prototype._findOriginalStack = function(exception) {
if (!(exception instanceof base_wrapped_exception_1.BaseWrappedException)) return null;
var e = exception;
var stack = exception.originalStack;
while (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
e = e.originalException;
if (e instanceof base_wrapped_exception_1.BaseWrappedException && lang_1.isPresent(e.originalException)) {
stack = e.originalStack;
}
}
return stack;
};
return ExceptionHandler;
}();
exports.ExceptionHandler = ExceptionHandler;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var collection_1 = __webpack_require__(516);
var async_1 = __webpack_require__(513);
var lang_1 = __webpack_require__(514);
var exceptions_1 = __webpack_require__(517);
var core_1 = __webpack_require__(118);
var route_config_impl_1 = __webpack_require__(521);
var rules_1 = __webpack_require__(522);
var rule_set_1 = __webpack_require__(525);
var instruction_1 = __webpack_require__(524);
var route_config_normalizer_1 = __webpack_require__(532);
var url_parser_1 = __webpack_require__(523);
var _resolveToNull = async_1.PromiseWrapper.resolve(null);
exports.ROUTER_PRIMARY_COMPONENT = new core_1.OpaqueToken("RouterPrimaryComponent");
var RouteRegistry = function() {
function RouteRegistry(_rootComponent) {
this._rootComponent = _rootComponent;
this._rules = new collection_1.Map();
}
RouteRegistry.prototype.config = function(parentComponent, config) {
config = route_config_normalizer_1.normalizeRouteConfig(config, this);
if (config instanceof route_config_impl_1.Route) {
route_config_normalizer_1.assertComponentExists(config.component, config.path);
} else if (config instanceof route_config_impl_1.AuxRoute) {
route_config_normalizer_1.assertComponentExists(config.component, config.path);
}
var rules = this._rules.get(parentComponent);
if (lang_1.isBlank(rules)) {
rules = new rule_set_1.RuleSet();
this._rules.set(parentComponent, rules);
}
var terminal = rules.config(config);
if (config instanceof route_config_impl_1.Route) {
if (terminal) {
assertTerminalComponent(config.component, config.path);
} else {
this.configFromComponent(config.component);
}
}
};
RouteRegistry.prototype.configFromComponent = function(component) {
var _this = this;
if (!lang_1.isType(component)) {
return;
}
if (this._rules.has(component)) {
return;
}
var annotations = core_1.reflector.annotations(component);
if (lang_1.isPresent(annotations)) {
for (var i = 0; i < annotations.length; i++) {
var annotation = annotations[i];
if (annotation instanceof route_config_impl_1.RouteConfig) {
var routeCfgs = annotation.configs;
routeCfgs.forEach(function(config) {
return _this.config(component, config);
});
}
}
}
};
RouteRegistry.prototype.recognize = function(url, ancestorInstructions) {
var parsedUrl = url_parser_1.parser.parse(url);
return this._recognize(parsedUrl, []);
};
RouteRegistry.prototype._recognize = function(parsedUrl, ancestorInstructions, _aux) {
var _this = this;
if (_aux === void 0) {
_aux = false;
}
var parentInstruction = collection_1.ListWrapper.last(ancestorInstructions);
var parentComponent = lang_1.isPresent(parentInstruction) ? parentInstruction.component.componentType : this._rootComponent;
var rules = this._rules.get(parentComponent);
if (lang_1.isBlank(rules)) {
return _resolveToNull;
}
var possibleMatches = _aux ? rules.recognizeAuxiliary(parsedUrl) : rules.recognize(parsedUrl);
var matchPromises = possibleMatches.map(function(candidate) {
return candidate.then(function(candidate) {
if (candidate instanceof rules_1.PathMatch) {
var auxParentInstructions = ancestorInstructions.length > 0 ? [ collection_1.ListWrapper.last(ancestorInstructions) ] : [];
var auxInstructions = _this._auxRoutesToUnresolved(candidate.remainingAux, auxParentInstructions);
var instruction = new instruction_1.ResolvedInstruction(candidate.instruction, null, auxInstructions);
if (lang_1.isBlank(candidate.instruction) || candidate.instruction.terminal) {
return instruction;
}
var newAncestorInstructions = ancestorInstructions.concat([ instruction ]);
return _this._recognize(candidate.remaining, newAncestorInstructions).then(function(childInstruction) {
if (lang_1.isBlank(childInstruction)) {
return null;
}
if (childInstruction instanceof instruction_1.RedirectInstruction) {
return childInstruction;
}
instruction.child = childInstruction;
return instruction;
});
}
if (candidate instanceof rules_1.RedirectMatch) {
var instruction = _this.generate(candidate.redirectTo, ancestorInstructions.concat([ null ]));
return new instruction_1.RedirectInstruction(instruction.component, instruction.child, instruction.auxInstruction, candidate.specificity);
}
});
});
if ((lang_1.isBlank(parsedUrl) || parsedUrl.path == "") && possibleMatches.length == 0) {
return async_1.PromiseWrapper.resolve(this.generateDefault(parentComponent));
}
return async_1.PromiseWrapper.all(matchPromises).then(mostSpecific);
};
RouteRegistry.prototype._auxRoutesToUnresolved = function(auxRoutes, parentInstructions) {
var _this = this;
var unresolvedAuxInstructions = {};
auxRoutes.forEach(function(auxUrl) {
unresolvedAuxInstructions[auxUrl.path] = new instruction_1.UnresolvedInstruction(function() {
return _this._recognize(auxUrl, parentInstructions, true);
});
});
return unresolvedAuxInstructions;
};
RouteRegistry.prototype.generate = function(linkParams, ancestorInstructions, _aux) {
if (_aux === void 0) {
_aux = false;
}
var params = splitAndFlattenLinkParams(linkParams);
var prevInstruction;
if (collection_1.ListWrapper.first(params) == "") {
params.shift();
prevInstruction = collection_1.ListWrapper.first(ancestorInstructions);
ancestorInstructions = [];
} else {
prevInstruction = ancestorInstructions.length > 0 ? ancestorInstructions.pop() : null;
if (collection_1.ListWrapper.first(params) == ".") {
params.shift();
} else if (collection_1.ListWrapper.first(params) == "..") {
while (collection_1.ListWrapper.first(params) == "..") {
if (ancestorInstructions.length <= 0) {
throw new exceptions_1.BaseException('Link "' + collection_1.ListWrapper.toJSON(linkParams) + '" has too many "../" segments.');
}
prevInstruction = ancestorInstructions.pop();
params = collection_1.ListWrapper.slice(params, 1);
}
} else {
var routeName = collection_1.ListWrapper.first(params);
var parentComponentType = this._rootComponent;
var grandparentComponentType = null;
if (ancestorInstructions.length > 1) {
var parentComponentInstruction = ancestorInstructions[ancestorInstructions.length - 1];
var grandComponentInstruction = ancestorInstructions[ancestorInstructions.length - 2];
parentComponentType = parentComponentInstruction.component.componentType;
grandparentComponentType = grandComponentInstruction.component.componentType;
} else if (ancestorInstructions.length == 1) {
parentComponentType = ancestorInstructions[0].component.componentType;
grandparentComponentType = this._rootComponent;
}
var childRouteExists = this.hasRoute(routeName, parentComponentType);
var parentRouteExists = lang_1.isPresent(grandparentComponentType) && this.hasRoute(routeName, grandparentComponentType);
if (parentRouteExists && childRouteExists) {
var msg = 'Link "' + collection_1.ListWrapper.toJSON(linkParams) + '" is ambiguous, use "./" or "../" to disambiguate.';
throw new exceptions_1.BaseException(msg);
}
if (parentRouteExists) {
prevInstruction = ancestorInstructions.pop();
}
}
}
if (params[params.length - 1] == "") {
params.pop();
}
if (params.length > 0 && params[0] == "") {
params.shift();
}
if (params.length < 1) {
var msg = 'Link "' + collection_1.ListWrapper.toJSON(linkParams) + '" must include a route name.';
throw new exceptions_1.BaseException(msg);
}
var generatedInstruction = this._generate(params, ancestorInstructions, prevInstruction, _aux, linkParams);
for (var i = ancestorInstructions.length - 1; i >= 0; i--) {
var ancestorInstruction = ancestorInstructions[i];
if (lang_1.isBlank(ancestorInstruction)) {
break;
}
generatedInstruction = ancestorInstruction.replaceChild(generatedInstruction);
}
return generatedInstruction;
};
RouteRegistry.prototype._generate = function(linkParams, ancestorInstructions, prevInstruction, _aux, _originalLink) {
var _this = this;
if (_aux === void 0) {
_aux = false;
}
var parentComponentType = this._rootComponent;
var componentInstruction = null;
var auxInstructions = {};
var parentInstruction = collection_1.ListWrapper.last(ancestorInstructions);
if (lang_1.isPresent(parentInstruction) && lang_1.isPresent(parentInstruction.component)) {
parentComponentType = parentInstruction.component.componentType;
}
if (linkParams.length == 0) {
var defaultInstruction = this.generateDefault(parentComponentType);
if (lang_1.isBlank(defaultInstruction)) {
throw new exceptions_1.BaseException('Link "' + collection_1.ListWrapper.toJSON(_originalLink) + '" does not resolve to a terminal instruction.');
}
return defaultInstruction;
}
if (lang_1.isPresent(prevInstruction) && !_aux) {
auxInstructions = collection_1.StringMapWrapper.merge(prevInstruction.auxInstruction, auxInstructions);
componentInstruction = prevInstruction.component;
}
var rules = this._rules.get(parentComponentType);
if (lang_1.isBlank(rules)) {
throw new exceptions_1.BaseException('Component "' + lang_1.getTypeNameForDebugging(parentComponentType) + '" has no route config.');
}
var linkParamIndex = 0;
var routeParams = {};
if (linkParamIndex < linkParams.length && lang_1.isString(linkParams[linkParamIndex])) {
var routeName = linkParams[linkParamIndex];
if (routeName == "" || routeName == "." || routeName == "..") {
throw new exceptions_1.BaseException('"' + routeName + '/" is only allowed at the beginning of a link DSL.');
}
linkParamIndex += 1;
if (linkParamIndex < linkParams.length) {
var linkParam = linkParams[linkParamIndex];
if (lang_1.isStringMap(linkParam) && !lang_1.isArray(linkParam)) {
routeParams = linkParam;
linkParamIndex += 1;
}
}
var routeRecognizer = (_aux ? rules.auxRulesByName : rules.rulesByName).get(routeName);
if (lang_1.isBlank(routeRecognizer)) {
throw new exceptions_1.BaseException('Component "' + lang_1.getTypeNameForDebugging(parentComponentType) + '" has no route named "' + routeName + '".');
}
if (lang_1.isBlank(routeRecognizer.handler.componentType)) {
var generatedUrl = routeRecognizer.generateComponentPathValues(routeParams);
return new instruction_1.UnresolvedInstruction(function() {
return routeRecognizer.handler.resolveComponentType().then(function(_) {
return _this._generate(linkParams, ancestorInstructions, prevInstruction, _aux, _originalLink);
});
}, generatedUrl.urlPath, url_parser_1.convertUrlParamsToArray(generatedUrl.urlParams));
}
componentInstruction = _aux ? rules.generateAuxiliary(routeName, routeParams) : rules.generate(routeName, routeParams);
}
while (linkParamIndex < linkParams.length && lang_1.isArray(linkParams[linkParamIndex])) {
var auxParentInstruction = [ parentInstruction ];
var auxInstruction = this._generate(linkParams[linkParamIndex], auxParentInstruction, null, true, _originalLink);
auxInstructions[auxInstruction.component.urlPath] = auxInstruction;
linkParamIndex += 1;
}
var instruction = new instruction_1.ResolvedInstruction(componentInstruction, null, auxInstructions);
if (lang_1.isPresent(componentInstruction) && lang_1.isPresent(componentInstruction.componentType)) {
var childInstruction = null;
if (componentInstruction.terminal) {
if (linkParamIndex >= linkParams.length) {}
} else {
var childAncestorComponents = ancestorInstructions.concat([ instruction ]);
var remainingLinkParams = linkParams.slice(linkParamIndex);
childInstruction = this._generate(remainingLinkParams, childAncestorComponents, null, false, _originalLink);
}
instruction.child = childInstruction;
}
return instruction;
};
RouteRegistry.prototype.hasRoute = function(name, parentComponent) {
var rules = this._rules.get(parentComponent);
if (lang_1.isBlank(rules)) {
return false;
}
return rules.hasRoute(name);
};
RouteRegistry.prototype.generateDefault = function(componentCursor) {
var _this = this;
if (lang_1.isBlank(componentCursor)) {
return null;
}
var rules = this._rules.get(componentCursor);
if (lang_1.isBlank(rules) || lang_1.isBlank(rules.defaultRule)) {
return null;
}
var defaultChild = null;
if (lang_1.isPresent(rules.defaultRule.handler.componentType)) {
var componentInstruction = rules.defaultRule.generate({});
if (!rules.defaultRule.terminal) {
defaultChild = this.generateDefault(rules.defaultRule.handler.componentType);
}
return new instruction_1.DefaultInstruction(componentInstruction, defaultChild);
}
return new instruction_1.UnresolvedInstruction(function() {
return rules.defaultRule.handler.resolveComponentType().then(function(_) {
return _this.generateDefault(componentCursor);
});
});
};
RouteRegistry = __decorate([ core_1.Injectable(), __param(0, core_1.Inject(exports.ROUTER_PRIMARY_COMPONENT)), __metadata("design:paramtypes", [ lang_1.Type ]) ], RouteRegistry);
return RouteRegistry;
}();
exports.RouteRegistry = RouteRegistry;
function splitAndFlattenLinkParams(linkParams) {
var accumulation = [];
linkParams.forEach(function(item) {
if (lang_1.isString(item)) {
var strItem = item;
accumulation = accumulation.concat(strItem.split("/"));
} else {
accumulation.push(item);
}
});
return accumulation;
}
function mostSpecific(instructions) {
instructions = instructions.filter(function(instruction) {
return lang_1.isPresent(instruction);
});
if (instructions.length == 0) {
return null;
}
if (instructions.length == 1) {
return instructions[0];
}
var first = instructions[0];
var rest = instructions.slice(1);
return rest.reduce(function(instruction, contender) {
if (compareSpecificityStrings(contender.specificity, instruction.specificity) == -1) {
return contender;
}
return instruction;
}, first);
}
function compareSpecificityStrings(a, b) {
var l = lang_1.Math.min(a.length, b.length);
for (var i = 0; i < l; i += 1) {
var ai = lang_1.StringWrapper.charCodeAt(a, i);
var bi = lang_1.StringWrapper.charCodeAt(b, i);
var difference = bi - ai;
if (difference != 0) {
return difference;
}
}
return a.length - b.length;
}
function assertTerminalComponent(component, path) {
if (!lang_1.isType(component)) {
return;
}
var annotations = core_1.reflector.annotations(component);
if (lang_1.isPresent(annotations)) {
for (var i = 0; i < annotations.length; i++) {
var annotation = annotations[i];
if (annotation instanceof route_config_impl_1.RouteConfig) {
throw new exceptions_1.BaseException('Child routes are not allowed for "' + path + '". Use "..." on the parent\'s route path.');
}
}
}
}
}, function(module, exports) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __make_dart_analyzer_happy = null;
var RouteConfig = function() {
function RouteConfig(configs) {
this.configs = configs;
}
return RouteConfig;
}();
exports.RouteConfig = RouteConfig;
var AbstractRoute = function() {
function AbstractRoute(_a) {
var name = _a.name, useAsDefault = _a.useAsDefault, path = _a.path, regex = _a.regex, serializer = _a.serializer, data = _a.data;
this.name = name;
this.useAsDefault = useAsDefault;
this.path = path;
this.regex = regex;
this.serializer = serializer;
this.data = data;
}
return AbstractRoute;
}();
exports.AbstractRoute = AbstractRoute;
var Route = function(_super) {
__extends(Route, _super);
function Route(_a) {
var name = _a.name, useAsDefault = _a.useAsDefault, path = _a.path, regex = _a.regex, serializer = _a.serializer, data = _a.data, component = _a.component;
_super.call(this, {
name: name,
useAsDefault: useAsDefault,
path: path,
regex: regex,
serializer: serializer,
data: data
});
this.aux = null;
this.component = component;
}
return Route;
}(AbstractRoute);
exports.Route = Route;
var AuxRoute = function(_super) {
__extends(AuxRoute, _super);
function AuxRoute(_a) {
var name = _a.name, useAsDefault = _a.useAsDefault, path = _a.path, regex = _a.regex, serializer = _a.serializer, data = _a.data, component = _a.component;
_super.call(this, {
name: name,
useAsDefault: useAsDefault,
path: path,
regex: regex,
serializer: serializer,
data: data
});
this.component = component;
}
return AuxRoute;
}(AbstractRoute);
exports.AuxRoute = AuxRoute;
var AsyncRoute = function(_super) {
__extends(AsyncRoute, _super);
function AsyncRoute(_a) {
var name = _a.name, useAsDefault = _a.useAsDefault, path = _a.path, regex = _a.regex, serializer = _a.serializer, data = _a.data, loader = _a.loader;
_super.call(this, {
name: name,
useAsDefault: useAsDefault,
path: path,
regex: regex,
serializer: serializer,
data: data
});
this.aux = null;
this.loader = loader;
}
return AsyncRoute;
}(AbstractRoute);
exports.AsyncRoute = AsyncRoute;
var Redirect = function(_super) {
__extends(Redirect, _super);
function Redirect(_a) {
var name = _a.name, useAsDefault = _a.useAsDefault, path = _a.path, regex = _a.regex, serializer = _a.serializer, data = _a.data, redirectTo = _a.redirectTo;
_super.call(this, {
name: name,
useAsDefault: useAsDefault,
path: path,
regex: regex,
serializer: serializer,
data: data
});
this.redirectTo = redirectTo;
}
return Redirect;
}(AbstractRoute);
exports.Redirect = Redirect;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var lang_1 = __webpack_require__(514);
var exceptions_1 = __webpack_require__(517);
var promise_1 = __webpack_require__(515);
var collection_1 = __webpack_require__(516);
var url_parser_1 = __webpack_require__(523);
var instruction_1 = __webpack_require__(524);
var RouteMatch = function() {
function RouteMatch() {}
return RouteMatch;
}();
exports.RouteMatch = RouteMatch;
var PathMatch = function(_super) {
__extends(PathMatch, _super);
function PathMatch(instruction, remaining, remainingAux) {
_super.call(this);
this.instruction = instruction;
this.remaining = remaining;
this.remainingAux = remainingAux;
}
return PathMatch;
}(RouteMatch);
exports.PathMatch = PathMatch;
var RedirectMatch = function(_super) {
__extends(RedirectMatch, _super);
function RedirectMatch(redirectTo, specificity) {
_super.call(this);
this.redirectTo = redirectTo;
this.specificity = specificity;
}
return RedirectMatch;
}(RouteMatch);
exports.RedirectMatch = RedirectMatch;
var RedirectRule = function() {
function RedirectRule(_pathRecognizer, redirectTo) {
this._pathRecognizer = _pathRecognizer;
this.redirectTo = redirectTo;
this.hash = this._pathRecognizer.hash;
}
Object.defineProperty(RedirectRule.prototype, "path", {
get: function() {
return this._pathRecognizer.toString();
},
set: function(val) {
throw new exceptions_1.BaseException("you cannot set the path of a RedirectRule directly");
},
enumerable: true,
configurable: true
});
RedirectRule.prototype.recognize = function(beginningSegment) {
var match = null;
if (lang_1.isPresent(this._pathRecognizer.matchUrl(beginningSegment))) {
match = new RedirectMatch(this.redirectTo, this._pathRecognizer.specificity);
}
return promise_1.PromiseWrapper.resolve(match);
};
RedirectRule.prototype.generate = function(params) {
throw new exceptions_1.BaseException("Tried to generate a redirect.");
};
return RedirectRule;
}();
exports.RedirectRule = RedirectRule;
var RouteRule = function() {
function RouteRule(_routePath, handler, _routeName) {
this._routePath = _routePath;
this.handler = handler;
this._routeName = _routeName;
this._cache = new collection_1.Map();
this.specificity = this._routePath.specificity;
this.hash = this._routePath.hash;
this.terminal = this._routePath.terminal;
}
Object.defineProperty(RouteRule.prototype, "path", {
get: function() {
return this._routePath.toString();
},
set: function(val) {
throw new exceptions_1.BaseException("you cannot set the path of a RouteRule directly");
},
enumerable: true,
configurable: true
});
RouteRule.prototype.recognize = function(beginningSegment) {
var _this = this;
var res = this._routePath.matchUrl(beginningSegment);
if (lang_1.isBlank(res)) {
return null;
}
return this.handler.resolveComponentType().then(function(_) {
var componentInstruction = _this._getInstruction(res.urlPath, res.urlParams, res.allParams);
return new PathMatch(componentInstruction, res.rest, res.auxiliary);
});
};
RouteRule.prototype.generate = function(params) {
var generated = this._routePath.generateUrl(params);
var urlPath = generated.urlPath;
var urlParams = generated.urlParams;
return this._getInstruction(urlPath, url_parser_1.convertUrlParamsToArray(urlParams), params);
};
RouteRule.prototype.generateComponentPathValues = function(params) {
return this._routePath.generateUrl(params);
};
RouteRule.prototype._getInstruction = function(urlPath, urlParams, params) {
if (lang_1.isBlank(this.handler.componentType)) {
throw new exceptions_1.BaseException("Tried to get instruction before the type was loaded.");
}
var hashKey = urlPath + "?" + urlParams.join("&");
if (this._cache.has(hashKey)) {
return this._cache.get(hashKey);
}
var instruction = new instruction_1.ComponentInstruction(urlPath, urlParams, this.handler.data, this.handler.componentType, this.terminal, this.specificity, params, this._routeName);
this._cache.set(hashKey, instruction);
return instruction;
};
return RouteRule;
}();
exports.RouteRule = RouteRule;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var collection_1 = __webpack_require__(516);
var lang_1 = __webpack_require__(514);
var exceptions_1 = __webpack_require__(517);
function convertUrlParamsToArray(urlParams) {
var paramsArray = [];
if (lang_1.isBlank(urlParams)) {
return [];
}
collection_1.StringMapWrapper.forEach(urlParams, function(value, key) {
paramsArray.push(value === true ? key : key + "=" + value);
});
return paramsArray;
}
exports.convertUrlParamsToArray = convertUrlParamsToArray;
function serializeParams(urlParams, joiner) {
if (joiner === void 0) {
joiner = "&";
}
return convertUrlParamsToArray(urlParams).join(joiner);
}
exports.serializeParams = serializeParams;
var Url = function() {
function Url(path, child, auxiliary, params) {
if (child === void 0) {
child = null;
}
if (auxiliary === void 0) {
auxiliary = [];
}
if (params === void 0) {
params = {};
}
this.path = path;
this.child = child;
this.auxiliary = auxiliary;
this.params = params;
}
Url.prototype.toString = function() {
return this.path + this._matrixParamsToString() + this._auxToString() + this._childString();
};
Url.prototype.segmentToString = function() {
return this.path + this._matrixParamsToString();
};
Url.prototype._auxToString = function() {
return this.auxiliary.length > 0 ? "(" + this.auxiliary.map(function(sibling) {
return sibling.toString();
}).join("//") + ")" : "";
};
Url.prototype._matrixParamsToString = function() {
var paramString = serializeParams(this.params, ";");
if (paramString.length > 0) {
return ";" + paramString;
}
return "";
};
Url.prototype._childString = function() {
return lang_1.isPresent(this.child) ? "/" + this.child.toString() : "";
};
return Url;
}();
exports.Url = Url;
var RootUrl = function(_super) {
__extends(RootUrl, _super);
function RootUrl(path, child, auxiliary, params) {
if (child === void 0) {
child = null;
}
if (auxiliary === void 0) {
auxiliary = [];
}
if (params === void 0) {
params = null;
}
_super.call(this, path, child, auxiliary, params);
}
RootUrl.prototype.toString = function() {
return this.path + this._auxToString() + this._childString() + this._queryParamsToString();
};
RootUrl.prototype.segmentToString = function() {
return this.path + this._queryParamsToString();
};
RootUrl.prototype._queryParamsToString = function() {
if (lang_1.isBlank(this.params)) {
return "";
}
return "?" + serializeParams(this.params);
};
return RootUrl;
}(Url);
exports.RootUrl = RootUrl;
function pathSegmentsToUrl(pathSegments) {
var url = new Url(pathSegments[pathSegments.length - 1]);
for (var i = pathSegments.length - 2; i >= 0; i -= 1) {
url = new Url(pathSegments[i], url);
}
return url;
}
exports.pathSegmentsToUrl = pathSegmentsToUrl;
var SEGMENT_RE = lang_1.RegExpWrapper.create("^[^\\/\\(\\)\\?;=&#]+");
function matchUrlSegment(str) {
var match = lang_1.RegExpWrapper.firstMatch(SEGMENT_RE, str);
return lang_1.isPresent(match) ? match[0] : "";
}
var QUERY_PARAM_VALUE_RE = lang_1.RegExpWrapper.create("^[^\\(\\)\\?;&#]+");
function matchUrlQueryParamValue(str) {
var match = lang_1.RegExpWrapper.firstMatch(QUERY_PARAM_VALUE_RE, str);
return lang_1.isPresent(match) ? match[0] : "";
}
var UrlParser = function() {
function UrlParser() {}
UrlParser.prototype.peekStartsWith = function(str) {
return this._remaining.startsWith(str);
};
UrlParser.prototype.capture = function(str) {
if (!this._remaining.startsWith(str)) {
throw new exceptions_1.BaseException('Expected "' + str + '".');
}
this._remaining = this._remaining.substring(str.length);
};
UrlParser.prototype.parse = function(url) {
this._remaining = url;
if (url == "" || url == "/") {
return new Url("");
}
return this.parseRoot();
};
UrlParser.prototype.parseRoot = function() {
if (this.peekStartsWith("/")) {
this.capture("/");
}
var path = matchUrlSegment(this._remaining);
this.capture(path);
var aux = [];
if (this.peekStartsWith("(")) {
aux = this.parseAuxiliaryRoutes();
}
if (this.peekStartsWith(";")) {
this.parseMatrixParams();
}
var child = null;
if (this.peekStartsWith("/") && !this.peekStartsWith("//")) {
this.capture("/");
child = this.parseSegment();
}
var queryParams = null;
if (this.peekStartsWith("?")) {
queryParams = this.parseQueryParams();
}
return new RootUrl(path, child, aux, queryParams);
};
UrlParser.prototype.parseSegment = function() {
if (this._remaining.length == 0) {
return null;
}
if (this.peekStartsWith("/")) {
this.capture("/");
}
var path = matchUrlSegment(this._remaining);
this.capture(path);
var matrixParams = null;
if (this.peekStartsWith(";")) {
matrixParams = this.parseMatrixParams();
}
var aux = [];
if (this.peekStartsWith("(")) {
aux = this.parseAuxiliaryRoutes();
}
var child = null;
if (this.peekStartsWith("/") && !this.peekStartsWith("//")) {
this.capture("/");
child = this.parseSegment();
}
return new Url(path, child, aux, matrixParams);
};
UrlParser.prototype.parseQueryParams = function() {
var params = {};
this.capture("?");
this.parseQueryParam(params);
while (this._remaining.length > 0 && this.peekStartsWith("&")) {
this.capture("&");
this.parseQueryParam(params);
}
return params;
};
UrlParser.prototype.parseMatrixParams = function() {
var params = {};
while (this._remaining.length > 0 && this.peekStartsWith(";")) {
this.capture(";");
this.parseParam(params);
}
return params;
};
UrlParser.prototype.parseParam = function(params) {
var key = matchUrlSegment(this._remaining);
if (lang_1.isBlank(key)) {
return;
}
this.capture(key);
var value = true;
if (this.peekStartsWith("=")) {
this.capture("=");
var valueMatch = matchUrlSegment(this._remaining);
if (lang_1.isPresent(valueMatch)) {
value = valueMatch;
this.capture(value);
}
}
params[key] = value;
};
UrlParser.prototype.parseQueryParam = function(params) {
var key = matchUrlSegment(this._remaining);
if (lang_1.isBlank(key)) {
return;
}
this.capture(key);
var value = true;
if (this.peekStartsWith("=")) {
this.capture("=");
var valueMatch = matchUrlQueryParamValue(this._remaining);
if (lang_1.isPresent(valueMatch)) {
value = valueMatch;
this.capture(value);
}
}
params[key] = value;
};
UrlParser.prototype.parseAuxiliaryRoutes = function() {
var routes = [];
this.capture("(");
while (!this.peekStartsWith(")") && this._remaining.length > 0) {
routes.push(this.parseSegment());
if (this.peekStartsWith("//")) {
this.capture("//");
}
}
this.capture(")");
return routes;
};
return UrlParser;
}();
exports.UrlParser = UrlParser;
exports.parser = new UrlParser();
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var collection_1 = __webpack_require__(516);
var lang_1 = __webpack_require__(514);
var async_1 = __webpack_require__(513);
var RouteParams = function() {
function RouteParams(params) {
this.params = params;
}
RouteParams.prototype.get = function(param) {
return lang_1.normalizeBlank(collection_1.StringMapWrapper.get(this.params, param));
};
return RouteParams;
}();
exports.RouteParams = RouteParams;
var RouteData = function() {
function RouteData(data) {
if (data === void 0) {
data = {};
}
this.data = data;
}
RouteData.prototype.get = function(key) {
return lang_1.normalizeBlank(collection_1.StringMapWrapper.get(this.data, key));
};
return RouteData;
}();
exports.RouteData = RouteData;
exports.BLANK_ROUTE_DATA = new RouteData();
var Instruction = function() {
function Instruction(component, child, auxInstruction) {
this.component = component;
this.child = child;
this.auxInstruction = auxInstruction;
}
Object.defineProperty(Instruction.prototype, "urlPath", {
get: function() {
return lang_1.isPresent(this.component) ? this.component.urlPath : "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(Instruction.prototype, "urlParams", {
get: function() {
return lang_1.isPresent(this.component) ? this.component.urlParams : [];
},
enumerable: true,
configurable: true
});
Object.defineProperty(Instruction.prototype, "specificity", {
get: function() {
var total = "";
if (lang_1.isPresent(this.component)) {
total += this.component.specificity;
}
if (lang_1.isPresent(this.child)) {
total += this.child.specificity;
}
return total;
},
enumerable: true,
configurable: true
});
Instruction.prototype.toRootUrl = function() {
return this.toUrlPath() + this.toUrlQuery();
};
Instruction.prototype._toNonRootUrl = function() {
return this._stringifyPathMatrixAuxPrefixed() + (lang_1.isPresent(this.child) ? this.child._toNonRootUrl() : "");
};
Instruction.prototype.toUrlQuery = function() {
return this.urlParams.length > 0 ? "?" + this.urlParams.join("&") : "";
};
Instruction.prototype.replaceChild = function(child) {
return new ResolvedInstruction(this.component, child, this.auxInstruction);
};
Instruction.prototype.toUrlPath = function() {
return this.urlPath + this._stringifyAux() + (lang_1.isPresent(this.child) ? this.child._toNonRootUrl() : "");
};
Instruction.prototype.toLinkUrl = function() {
return this.urlPath + this._stringifyAux() + (lang_1.isPresent(this.child) ? this.child._toLinkUrl() : "") + this.toUrlQuery();
};
Instruction.prototype._toLinkUrl = function() {
return this._stringifyPathMatrixAuxPrefixed() + (lang_1.isPresent(this.child) ? this.child._toLinkUrl() : "");
};
Instruction.prototype._stringifyPathMatrixAuxPrefixed = function() {
var primary = this._stringifyPathMatrixAux();
if (primary.length > 0) {
primary = "/" + primary;
}
return primary;
};
Instruction.prototype._stringifyMatrixParams = function() {
return this.urlParams.length > 0 ? ";" + this.urlParams.join(";") : "";
};
Instruction.prototype._stringifyPathMatrixAux = function() {
if (lang_1.isBlank(this.component)) {
return "";
}
return this.urlPath + this._stringifyMatrixParams() + this._stringifyAux();
};
Instruction.prototype._stringifyAux = function() {
var routes = [];
collection_1.StringMapWrapper.forEach(this.auxInstruction, function(auxInstruction, _) {
routes.push(auxInstruction._stringifyPathMatrixAux());
});
if (routes.length > 0) {
return "(" + routes.join("//") + ")";
}
return "";
};
return Instruction;
}();
exports.Instruction = Instruction;
var ResolvedInstruction = function(_super) {
__extends(ResolvedInstruction, _super);
function ResolvedInstruction(component, child, auxInstruction) {
_super.call(this, component, child, auxInstruction);
}
ResolvedInstruction.prototype.resolveComponent = function() {
return async_1.PromiseWrapper.resolve(this.component);
};
return ResolvedInstruction;
}(Instruction);
exports.ResolvedInstruction = ResolvedInstruction;
var DefaultInstruction = function(_super) {
__extends(DefaultInstruction, _super);
function DefaultInstruction(component, child) {
_super.call(this, component, child, {});
}
DefaultInstruction.prototype.toLinkUrl = function() {
return "";
};
DefaultInstruction.prototype._toLinkUrl = function() {
return "";
};
return DefaultInstruction;
}(ResolvedInstruction);
exports.DefaultInstruction = DefaultInstruction;
var UnresolvedInstruction = function(_super) {
__extends(UnresolvedInstruction, _super);
function UnresolvedInstruction(_resolver, _urlPath, _urlParams) {
if (_urlPath === void 0) {
_urlPath = "";
}
if (_urlParams === void 0) {
_urlParams = [];
}
_super.call(this, null, null, {});
this._resolver = _resolver;
this._urlPath = _urlPath;
this._urlParams = _urlParams;
}
Object.defineProperty(UnresolvedInstruction.prototype, "urlPath", {
get: function() {
if (lang_1.isPresent(this.component)) {
return this.component.urlPath;
}
if (lang_1.isPresent(this._urlPath)) {
return this._urlPath;
}
return "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(UnresolvedInstruction.prototype, "urlParams", {
get: function() {
if (lang_1.isPresent(this.component)) {
return this.component.urlParams;
}
if (lang_1.isPresent(this._urlParams)) {
return this._urlParams;
}
return [];
},
enumerable: true,
configurable: true
});
UnresolvedInstruction.prototype.resolveComponent = function() {
var _this = this;
if (lang_1.isPresent(this.component)) {
return async_1.PromiseWrapper.resolve(this.component);
}
return this._resolver().then(function(instruction) {
_this.child = lang_1.isPresent(instruction) ? instruction.child : null;
return _this.component = lang_1.isPresent(instruction) ? instruction.component : null;
});
};
return UnresolvedInstruction;
}(Instruction);
exports.UnresolvedInstruction = UnresolvedInstruction;
var RedirectInstruction = function(_super) {
__extends(RedirectInstruction, _super);
function RedirectInstruction(component, child, auxInstruction, _specificity) {
_super.call(this, component, child, auxInstruction);
this._specificity = _specificity;
}
Object.defineProperty(RedirectInstruction.prototype, "specificity", {
get: function() {
return this._specificity;
},
enumerable: true,
configurable: true
});
return RedirectInstruction;
}(ResolvedInstruction);
exports.RedirectInstruction = RedirectInstruction;
var ComponentInstruction = function() {
function ComponentInstruction(urlPath, urlParams, data, componentType, terminal, specificity, params, routeName) {
if (params === void 0) {
params = null;
}
this.urlPath = urlPath;
this.urlParams = urlParams;
this.componentType = componentType;
this.terminal = terminal;
this.specificity = specificity;
this.params = params;
this.routeName = routeName;
this.reuse = false;
this.routeData = lang_1.isPresent(data) ? data : exports.BLANK_ROUTE_DATA;
}
return ComponentInstruction;
}();
exports.ComponentInstruction = ComponentInstruction;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(514);
var exceptions_1 = __webpack_require__(517);
var collection_1 = __webpack_require__(516);
var async_1 = __webpack_require__(513);
var rules_1 = __webpack_require__(522);
var route_config_impl_1 = __webpack_require__(521);
var async_route_handler_1 = __webpack_require__(526);
var sync_route_handler_1 = __webpack_require__(527);
var param_route_path_1 = __webpack_require__(528);
var regex_route_path_1 = __webpack_require__(531);
var RuleSet = function() {
function RuleSet() {
this.rulesByName = new collection_1.Map();
this.auxRulesByName = new collection_1.Map();
this.auxRulesByPath = new collection_1.Map();
this.rules = [];
this.defaultRule = null;
}
RuleSet.prototype.config = function(config) {
var handler;
if (lang_1.isPresent(config.name) && config.name[0].toUpperCase() != config.name[0]) {
var suggestedName = config.name[0].toUpperCase() + config.name.substring(1);
throw new exceptions_1.BaseException('Route "' + config.path + '" with name "' + config.name + '" does not begin with an uppercase letter. Route names should be CamelCase like "' + suggestedName + '".');
}
if (config instanceof route_config_impl_1.AuxRoute) {
handler = new sync_route_handler_1.SyncRouteHandler(config.component, config.data);
var routePath_1 = this._getRoutePath(config);
var auxRule = new rules_1.RouteRule(routePath_1, handler, config.name);
this.auxRulesByPath.set(routePath_1.toString(), auxRule);
if (lang_1.isPresent(config.name)) {
this.auxRulesByName.set(config.name, auxRule);
}
return auxRule.terminal;
}
var useAsDefault = false;
if (config instanceof route_config_impl_1.Redirect) {
var routePath_2 = this._getRoutePath(config);
var redirector = new rules_1.RedirectRule(routePath_2, config.redirectTo);
this._assertNoHashCollision(redirector.hash, config.path);
this.rules.push(redirector);
return true;
}
if (config instanceof route_config_impl_1.Route) {
handler = new sync_route_handler_1.SyncRouteHandler(config.component, config.data);
useAsDefault = lang_1.isPresent(config.useAsDefault) && config.useAsDefault;
} else if (config instanceof route_config_impl_1.AsyncRoute) {
handler = new async_route_handler_1.AsyncRouteHandler(config.loader, config.data);
useAsDefault = lang_1.isPresent(config.useAsDefault) && config.useAsDefault;
}
var routePath = this._getRoutePath(config);
var newRule = new rules_1.RouteRule(routePath, handler, config.name);
this._assertNoHashCollision(newRule.hash, config.path);
if (useAsDefault) {
if (lang_1.isPresent(this.defaultRule)) {
throw new exceptions_1.BaseException("Only one route can be default");
}
this.defaultRule = newRule;
}
this.rules.push(newRule);
if (lang_1.isPresent(config.name)) {
this.rulesByName.set(config.name, newRule);
}
return newRule.terminal;
};
RuleSet.prototype.recognize = function(urlParse) {
var solutions = [];
this.rules.forEach(function(routeRecognizer) {
var pathMatch = routeRecognizer.recognize(urlParse);
if (lang_1.isPresent(pathMatch)) {
solutions.push(pathMatch);
}
});
if (solutions.length == 0 && lang_1.isPresent(urlParse) && urlParse.auxiliary.length > 0) {
return [ async_1.PromiseWrapper.resolve(new rules_1.PathMatch(null, null, urlParse.auxiliary)) ];
}
return solutions;
};
RuleSet.prototype.recognizeAuxiliary = function(urlParse) {
var routeRecognizer = this.auxRulesByPath.get(urlParse.path);
if (lang_1.isPresent(routeRecognizer)) {
return [ routeRecognizer.recognize(urlParse) ];
}
return [ async_1.PromiseWrapper.resolve(null) ];
};
RuleSet.prototype.hasRoute = function(name) {
return this.rulesByName.has(name);
};
RuleSet.prototype.componentLoaded = function(name) {
return this.hasRoute(name) && lang_1.isPresent(this.rulesByName.get(name).handler.componentType);
};
RuleSet.prototype.loadComponent = function(name) {
return this.rulesByName.get(name).handler.resolveComponentType();
};
RuleSet.prototype.generate = function(name, params) {
var rule = this.rulesByName.get(name);
if (lang_1.isBlank(rule)) {
return null;
}
return rule.generate(params);
};
RuleSet.prototype.generateAuxiliary = function(name, params) {
var rule = this.auxRulesByName.get(name);
if (lang_1.isBlank(rule)) {
return null;
}
return rule.generate(params);
};
RuleSet.prototype._assertNoHashCollision = function(hash, path) {
this.rules.forEach(function(rule) {
if (hash == rule.hash) {
throw new exceptions_1.BaseException("Configuration '" + path + "' conflicts with existing route '" + rule.path + "'");
}
});
};
RuleSet.prototype._getRoutePath = function(config) {
if (lang_1.isPresent(config.regex)) {
if (lang_1.isFunction(config.serializer)) {
return new regex_route_path_1.RegexRoutePath(config.regex, config.serializer);
} else {
throw new exceptions_1.BaseException("Route provides a regex property, '" + config.regex + "', but no serializer property");
}
}
if (lang_1.isPresent(config.path)) {
var path = config instanceof route_config_impl_1.AuxRoute && config.path.startsWith("/") ? config.path.substring(1) : config.path;
return new param_route_path_1.ParamRoutePath(path);
}
throw new exceptions_1.BaseException("Route must provide either a path or regex property");
};
return RuleSet;
}();
exports.RuleSet = RuleSet;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(514);
var instruction_1 = __webpack_require__(524);
var AsyncRouteHandler = function() {
function AsyncRouteHandler(_loader, data) {
if (data === void 0) {
data = null;
}
this._loader = _loader;
this._resolvedComponent = null;
this.data = lang_1.isPresent(data) ? new instruction_1.RouteData(data) : instruction_1.BLANK_ROUTE_DATA;
}
AsyncRouteHandler.prototype.resolveComponentType = function() {
var _this = this;
if (lang_1.isPresent(this._resolvedComponent)) {
return this._resolvedComponent;
}
return this._resolvedComponent = this._loader().then(function(componentType) {
_this.componentType = componentType;
return componentType;
});
};
return AsyncRouteHandler;
}();
exports.AsyncRouteHandler = AsyncRouteHandler;
}, function(module, exports, __webpack_require__) {
"use strict";
var async_1 = __webpack_require__(513);
var lang_1 = __webpack_require__(514);
var instruction_1 = __webpack_require__(524);
var SyncRouteHandler = function() {
function SyncRouteHandler(componentType, data) {
this.componentType = componentType;
this._resolvedComponent = null;
this._resolvedComponent = async_1.PromiseWrapper.resolve(componentType);
this.data = lang_1.isPresent(data) ? new instruction_1.RouteData(data) : instruction_1.BLANK_ROUTE_DATA;
}
SyncRouteHandler.prototype.resolveComponentType = function() {
return this._resolvedComponent;
};
return SyncRouteHandler;
}();
exports.SyncRouteHandler = SyncRouteHandler;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(514);
var exceptions_1 = __webpack_require__(517);
var collection_1 = __webpack_require__(516);
var utils_1 = __webpack_require__(529);
var url_parser_1 = __webpack_require__(523);
var route_path_1 = __webpack_require__(530);
var ContinuationPathSegment = function() {
function ContinuationPathSegment() {
this.name = "";
this.specificity = "";
this.hash = "...";
}
ContinuationPathSegment.prototype.generate = function(params) {
return "";
};
ContinuationPathSegment.prototype.match = function(path) {
return true;
};
return ContinuationPathSegment;
}();
var StaticPathSegment = function() {
function StaticPathSegment(path) {
this.path = path;
this.name = "";
this.specificity = "2";
this.hash = path;
}
StaticPathSegment.prototype.match = function(path) {
return path == this.path;
};
StaticPathSegment.prototype.generate = function(params) {
return this.path;
};
return StaticPathSegment;
}();
var DynamicPathSegment = function() {
function DynamicPathSegment(name) {
this.name = name;
this.specificity = "1";
this.hash = ":";
}
DynamicPathSegment.prototype.match = function(path) {
return path.length > 0;
};
DynamicPathSegment.prototype.generate = function(params) {
if (!collection_1.StringMapWrapper.contains(params.map, this.name)) {
throw new exceptions_1.BaseException("Route generator for '" + this.name + "' was not included in parameters passed.");
}
return encodeDynamicSegment(utils_1.normalizeString(params.get(this.name)));
};
DynamicPathSegment.paramMatcher = /^:([^\/]+)$/g;
return DynamicPathSegment;
}();
var StarPathSegment = function() {
function StarPathSegment(name) {
this.name = name;
this.specificity = "0";
this.hash = "*";
}
StarPathSegment.prototype.match = function(path) {
return true;
};
StarPathSegment.prototype.generate = function(params) {
return utils_1.normalizeString(params.get(this.name));
};
StarPathSegment.wildcardMatcher = /^\*([^\/]+)$/g;
return StarPathSegment;
}();
var ParamRoutePath = function() {
function ParamRoutePath(routePath) {
this.routePath = routePath;
this.terminal = true;
this._assertValidPath(routePath);
this._parsePathString(routePath);
this.specificity = this._calculateSpecificity();
this.hash = this._calculateHash();
var lastSegment = this._segments[this._segments.length - 1];
this.terminal = !(lastSegment instanceof ContinuationPathSegment);
}
ParamRoutePath.prototype.matchUrl = function(url) {
var nextUrlSegment = url;
var currentUrlSegment;
var positionalParams = {};
var captured = [];
for (var i = 0; i < this._segments.length; i += 1) {
var pathSegment = this._segments[i];
currentUrlSegment = nextUrlSegment;
if (pathSegment instanceof ContinuationPathSegment) {
break;
}
if (lang_1.isPresent(currentUrlSegment)) {
if (pathSegment instanceof StarPathSegment) {
positionalParams[pathSegment.name] = currentUrlSegment.toString();
captured.push(currentUrlSegment.toString());
nextUrlSegment = null;
break;
}
captured.push(currentUrlSegment.path);
if (pathSegment instanceof DynamicPathSegment) {
positionalParams[pathSegment.name] = decodeDynamicSegment(currentUrlSegment.path);
} else if (!pathSegment.match(currentUrlSegment.path)) {
return null;
}
nextUrlSegment = currentUrlSegment.child;
} else if (!pathSegment.match("")) {
return null;
}
}
if (this.terminal && lang_1.isPresent(nextUrlSegment)) {
return null;
}
var urlPath = captured.join("/");
var auxiliary = [];
var urlParams = [];
var allParams = positionalParams;
if (lang_1.isPresent(currentUrlSegment)) {
var paramsSegment = url instanceof url_parser_1.RootUrl ? url : currentUrlSegment;
if (lang_1.isPresent(paramsSegment.params)) {
allParams = collection_1.StringMapWrapper.merge(paramsSegment.params, positionalParams);
urlParams = url_parser_1.convertUrlParamsToArray(paramsSegment.params);
} else {
allParams = positionalParams;
}
auxiliary = currentUrlSegment.auxiliary;
}
return new route_path_1.MatchedUrl(urlPath, urlParams, allParams, auxiliary, nextUrlSegment);
};
ParamRoutePath.prototype.generateUrl = function(params) {
var paramTokens = new utils_1.TouchMap(params);
var path = [];
for (var i = 0; i < this._segments.length; i++) {
var segment = this._segments[i];
if (!(segment instanceof ContinuationPathSegment)) {
path.push(segment.generate(paramTokens));
}
}
var urlPath = path.join("/");
var nonPositionalParams = paramTokens.getUnused();
var urlParams = nonPositionalParams;
return new route_path_1.GeneratedUrl(urlPath, urlParams);
};
ParamRoutePath.prototype.toString = function() {
return this.routePath;
};
ParamRoutePath.prototype._parsePathString = function(routePath) {
if (routePath.startsWith("/")) {
routePath = routePath.substring(1);
}
var segmentStrings = routePath.split("/");
this._segments = [];
var limit = segmentStrings.length - 1;
for (var i = 0; i <= limit; i++) {
var segment = segmentStrings[i], match;
if (lang_1.isPresent(match = lang_1.RegExpWrapper.firstMatch(DynamicPathSegment.paramMatcher, segment))) {
this._segments.push(new DynamicPathSegment(match[1]));
} else if (lang_1.isPresent(match = lang_1.RegExpWrapper.firstMatch(StarPathSegment.wildcardMatcher, segment))) {
this._segments.push(new StarPathSegment(match[1]));
} else if (segment == "...") {
if (i < limit) {
throw new exceptions_1.BaseException('Unexpected "..." before the end of the path for "' + routePath + '".');
}
this._segments.push(new ContinuationPathSegment());
} else {
this._segments.push(new StaticPathSegment(segment));
}
}
};
ParamRoutePath.prototype._calculateSpecificity = function() {
var i, length = this._segments.length, specificity;
if (length == 0) {
specificity += "2";
} else {
specificity = "";
for (i = 0; i < length; i++) {
specificity += this._segments[i].specificity;
}
}
return specificity;
};
ParamRoutePath.prototype._calculateHash = function() {
var i, length = this._segments.length;
var hashParts = [];
for (i = 0; i < length; i++) {
hashParts.push(this._segments[i].hash);
}
return hashParts.join("/");
};
ParamRoutePath.prototype._assertValidPath = function(path) {
if (lang_1.StringWrapper.contains(path, "#")) {
throw new exceptions_1.BaseException('Path "' + path + '" should not include "#". Use "HashLocationStrategy" instead.');
}
var illegalCharacter = lang_1.RegExpWrapper.firstMatch(ParamRoutePath.RESERVED_CHARS, path);
if (lang_1.isPresent(illegalCharacter)) {
throw new exceptions_1.BaseException('Path "' + path + '" contains "' + illegalCharacter[0] + '" which is not allowed in a route config.');
}
};
ParamRoutePath.RESERVED_CHARS = lang_1.RegExpWrapper.create("//|\\(|\\)|;|\\?|=");
return ParamRoutePath;
}();
exports.ParamRoutePath = ParamRoutePath;
var REGEXP_PERCENT = /%/g;
var REGEXP_SLASH = /\//g;
var REGEXP_OPEN_PARENT = /\(/g;
var REGEXP_CLOSE_PARENT = /\)/g;
var REGEXP_SEMICOLON = /;/g;
function encodeDynamicSegment(value) {
if (lang_1.isBlank(value)) {
return null;
}
value = lang_1.StringWrapper.replaceAll(value, REGEXP_PERCENT, "%25");
value = lang_1.StringWrapper.replaceAll(value, REGEXP_SLASH, "%2F");
value = lang_1.StringWrapper.replaceAll(value, REGEXP_OPEN_PARENT, "%28");
value = lang_1.StringWrapper.replaceAll(value, REGEXP_CLOSE_PARENT, "%29");
value = lang_1.StringWrapper.replaceAll(value, REGEXP_SEMICOLON, "%3B");
return value;
}
var REGEXP_ENC_SEMICOLON = /%3B/gi;
var REGEXP_ENC_CLOSE_PARENT = /%29/gi;
var REGEXP_ENC_OPEN_PARENT = /%28/gi;
var REGEXP_ENC_SLASH = /%2F/gi;
var REGEXP_ENC_PERCENT = /%25/gi;
function decodeDynamicSegment(value) {
if (lang_1.isBlank(value)) {
return null;
}
value = lang_1.StringWrapper.replaceAll(value, REGEXP_ENC_SEMICOLON, ";");
value = lang_1.StringWrapper.replaceAll(value, REGEXP_ENC_CLOSE_PARENT, ")");
value = lang_1.StringWrapper.replaceAll(value, REGEXP_ENC_OPEN_PARENT, "(");
value = lang_1.StringWrapper.replaceAll(value, REGEXP_ENC_SLASH, "/");
value = lang_1.StringWrapper.replaceAll(value, REGEXP_ENC_PERCENT, "%");
return value;
}
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(514);
var collection_1 = __webpack_require__(516);
var TouchMap = function() {
function TouchMap(map) {
var _this = this;
this.map = {};
this.keys = {};
if (lang_1.isPresent(map)) {
collection_1.StringMapWrapper.forEach(map, function(value, key) {
_this.map[key] = lang_1.isPresent(value) ? value.toString() : null;
_this.keys[key] = true;
});
}
}
TouchMap.prototype.get = function(key) {
collection_1.StringMapWrapper.delete(this.keys, key);
return this.map[key];
};
TouchMap.prototype.getUnused = function() {
var _this = this;
var unused = {};
var keys = collection_1.StringMapWrapper.keys(this.keys);
keys.forEach(function(key) {
return unused[key] = collection_1.StringMapWrapper.get(_this.map, key);
});
return unused;
};
return TouchMap;
}();
exports.TouchMap = TouchMap;
function normalizeString(obj) {
if (lang_1.isBlank(obj)) {
return null;
} else {
return obj.toString();
}
}
exports.normalizeString = normalizeString;
}, function(module, exports) {
"use strict";
var MatchedUrl = function() {
function MatchedUrl(urlPath, urlParams, allParams, auxiliary, rest) {
this.urlPath = urlPath;
this.urlParams = urlParams;
this.allParams = allParams;
this.auxiliary = auxiliary;
this.rest = rest;
}
return MatchedUrl;
}();
exports.MatchedUrl = MatchedUrl;
var GeneratedUrl = function() {
function GeneratedUrl(urlPath, urlParams) {
this.urlPath = urlPath;
this.urlParams = urlParams;
}
return GeneratedUrl;
}();
exports.GeneratedUrl = GeneratedUrl;
}, function(module, exports, __webpack_require__) {
"use strict";
var lang_1 = __webpack_require__(514);
var route_path_1 = __webpack_require__(530);
var RegexRoutePath = function() {
function RegexRoutePath(_reString, _serializer) {
this._reString = _reString;
this._serializer = _serializer;
this.terminal = true;
this.specificity = "2";
this.hash = this._reString;
this._regex = lang_1.RegExpWrapper.create(this._reString);
}
RegexRoutePath.prototype.matchUrl = function(url) {
var urlPath = url.toString();
var params = {};
var matcher = lang_1.RegExpWrapper.matcher(this._regex, urlPath);
var match = lang_1.RegExpMatcherWrapper.next(matcher);
if (lang_1.isBlank(match)) {
return null;
}
for (var i = 0; i < match.length; i += 1) {
params[i.toString()] = match[i];
}
return new route_path_1.MatchedUrl(urlPath, [], params, [], null);
};
RegexRoutePath.prototype.generateUrl = function(params) {
return this._serializer(params);
};
RegexRoutePath.prototype.toString = function() {
return this._reString;
};
return RegexRoutePath;
}();
exports.RegexRoutePath = RegexRoutePath;
}, function(module, exports, __webpack_require__) {
"use strict";
var route_config_decorator_1 = __webpack_require__(533);
var lang_1 = __webpack_require__(514);
var exceptions_1 = __webpack_require__(517);
function normalizeRouteConfig(config, registry) {
if (config instanceof route_config_decorator_1.AsyncRoute) {
var wrappedLoader = wrapLoaderToReconfigureRegistry(config.loader, registry);
return new route_config_decorator_1.AsyncRoute({
path: config.path,
loader: wrappedLoader,
name: config.name,
data: config.data,
useAsDefault: config.useAsDefault
});
}
if (config instanceof route_config_decorator_1.Route || config instanceof route_config_decorator_1.Redirect || config instanceof route_config_decorator_1.AuxRoute) {
return config;
}
if (+!!config.component + +!!config.redirectTo + +!!config.loader != 1) {
throw new exceptions_1.BaseException('Route config should contain exactly one "component", "loader", or "redirectTo" property.');
}
if (config.as && config.name) {
throw new exceptions_1.BaseException('Route config should contain exactly one "as" or "name" property.');
}
if (config.as) {
config.name = config.as;
}
if (config.loader) {
var wrappedLoader = wrapLoaderToReconfigureRegistry(config.loader, registry);
return new route_config_decorator_1.AsyncRoute({
path: config.path,
loader: wrappedLoader,
name: config.name,
data: config.data,
useAsDefault: config.useAsDefault
});
}
if (config.aux) {
return new route_config_decorator_1.AuxRoute({
path: config.aux,
component: config.component,
name: config.name
});
}
if (config.component) {
if (typeof config.component == "object") {
var componentDefinitionObject = config.component;
if (componentDefinitionObject.type == "constructor") {
return new route_config_decorator_1.Route({
path: config.path,
component: componentDefinitionObject.constructor,
name: config.name,
data: config.data,
useAsDefault: config.useAsDefault
});
} else if (componentDefinitionObject.type == "loader") {
return new route_config_decorator_1.AsyncRoute({
path: config.path,
loader: componentDefinitionObject.loader,
name: config.name,
data: config.data,
useAsDefault: config.useAsDefault
});
} else {
throw new exceptions_1.BaseException('Invalid component type "' + componentDefinitionObject.type + '". Valid types are "constructor" and "loader".');
}
}
return new route_config_decorator_1.Route(config);
}
if (config.redirectTo) {
return new route_config_decorator_1.Redirect({
path: config.path,
redirectTo: config.redirectTo
});
}
return config;
}
exports.normalizeRouteConfig = normalizeRouteConfig;
function wrapLoaderToReconfigureRegistry(loader, registry) {
return function() {
return loader().then(function(componentType) {
registry.configFromComponent(componentType);
return componentType;
});
};
}
function assertComponentExists(component, path) {
if (!lang_1.isType(component)) {
throw new exceptions_1.BaseException('Component for route "' + path + '" is not defined, or is not a class.');
}
}
exports.assertComponentExists = assertComponentExists;
}, function(module, exports, __webpack_require__) {
"use strict";
var route_config_impl_1 = __webpack_require__(521);
var core_private_1 = __webpack_require__(534);
var route_config_impl_2 = __webpack_require__(521);
exports.Route = route_config_impl_2.Route;
exports.Redirect = route_config_impl_2.Redirect;
exports.AuxRoute = route_config_impl_2.AuxRoute;
exports.AsyncRoute = route_config_impl_2.AsyncRoute;
exports.RouteConfig = core_private_1.makeDecorator(route_config_impl_1.RouteConfig);
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
exports.makeDecorator = core_1.__core_private__.makeDecorator;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var lifecycle_annotations_impl_1 = __webpack_require__(536);
var core_2 = __webpack_require__(118);
function hasLifecycleHook(e, type) {
if (!(type instanceof core_1.Type)) return false;
return e.name in type.prototype;
}
exports.hasLifecycleHook = hasLifecycleHook;
function getCanActivateHook(type) {
var annotations = core_2.reflector.annotations(type);
for (var i = 0; i < annotations.length; i += 1) {
var annotation = annotations[i];
if (annotation instanceof lifecycle_annotations_impl_1.CanActivate) {
return annotation.fn;
}
}
return null;
}
exports.getCanActivateHook = getCanActivateHook;
}, function(module, exports) {
"use strict";
var RouteLifecycleHook = function() {
function RouteLifecycleHook(name) {
this.name = name;
}
return RouteLifecycleHook;
}();
exports.RouteLifecycleHook = RouteLifecycleHook;
var CanActivate = function() {
function CanActivate(fn) {
this.fn = fn;
}
return CanActivate;
}();
exports.CanActivate = CanActivate;
exports.routerCanReuse = new RouteLifecycleHook("routerCanReuse");
exports.routerCanDeactivate = new RouteLifecycleHook("routerCanDeactivate");
exports.routerOnActivate = new RouteLifecycleHook("routerOnActivate");
exports.routerOnReuse = new RouteLifecycleHook("routerOnReuse");
exports.routerOnDeactivate = new RouteLifecycleHook("routerOnDeactivate");
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var async_1 = __webpack_require__(513);
var collection_1 = __webpack_require__(516);
var lang_1 = __webpack_require__(514);
var core_1 = __webpack_require__(118);
var routerMod = __webpack_require__(512);
var instruction_1 = __webpack_require__(524);
var hookMod = __webpack_require__(538);
var route_lifecycle_reflector_1 = __webpack_require__(535);
var _resolveToTrue = async_1.PromiseWrapper.resolve(true);
var RouterOutlet = function() {
function RouterOutlet(_viewContainerRef, _loader, _parentRouter, nameAttr) {
this._viewContainerRef = _viewContainerRef;
this._loader = _loader;
this._parentRouter = _parentRouter;
this.name = null;
this._componentRef = null;
this._currentInstruction = null;
this.activateEvents = new async_1.EventEmitter();
if (lang_1.isPresent(nameAttr)) {
this.name = nameAttr;
this._parentRouter.registerAuxOutlet(this);
} else {
this._parentRouter.registerPrimaryOutlet(this);
}
}
RouterOutlet.prototype.activate = function(nextInstruction) {
var _this = this;
var previousInstruction = this._currentInstruction;
this._currentInstruction = nextInstruction;
var componentType = nextInstruction.componentType;
var childRouter = this._parentRouter.childRouter(componentType);
var providers = core_1.ReflectiveInjector.resolve([ core_1.provide(instruction_1.RouteData, {
useValue: nextInstruction.routeData
}), core_1.provide(instruction_1.RouteParams, {
useValue: new instruction_1.RouteParams(nextInstruction.params)
}), core_1.provide(routerMod.Router, {
useValue: childRouter
}) ]);
this._componentRef = this._loader.loadNextToLocation(componentType, this._viewContainerRef, providers);
return this._componentRef.then(function(componentRef) {
_this.activateEvents.emit(componentRef.instance);
if (route_lifecycle_reflector_1.hasLifecycleHook(hookMod.routerOnActivate, componentType)) {
return _this._componentRef.then(function(ref) {
return ref.instance.routerOnActivate(nextInstruction, previousInstruction);
});
} else {
return componentRef;
}
});
};
RouterOutlet.prototype.reuse = function(nextInstruction) {
var previousInstruction = this._currentInstruction;
this._currentInstruction = nextInstruction;
if (lang_1.isBlank(this._componentRef)) {
return this.activate(nextInstruction);
} else {
return async_1.PromiseWrapper.resolve(route_lifecycle_reflector_1.hasLifecycleHook(hookMod.routerOnReuse, this._currentInstruction.componentType) ? this._componentRef.then(function(ref) {
return ref.instance.routerOnReuse(nextInstruction, previousInstruction);
}) : true);
}
};
RouterOutlet.prototype.deactivate = function(nextInstruction) {
var _this = this;
var next = _resolveToTrue;
if (lang_1.isPresent(this._componentRef) && lang_1.isPresent(this._currentInstruction) && route_lifecycle_reflector_1.hasLifecycleHook(hookMod.routerOnDeactivate, this._currentInstruction.componentType)) {
next = this._componentRef.then(function(ref) {
return ref.instance.routerOnDeactivate(nextInstruction, _this._currentInstruction);
});
}
return next.then(function(_) {
if (lang_1.isPresent(_this._componentRef)) {
var onDispose = _this._componentRef.then(function(ref) {
return ref.destroy();
});
_this._componentRef = null;
return onDispose;
}
});
};
RouterOutlet.prototype.routerCanDeactivate = function(nextInstruction) {
var _this = this;
if (lang_1.isBlank(this._currentInstruction)) {
return _resolveToTrue;
}
if (route_lifecycle_reflector_1.hasLifecycleHook(hookMod.routerCanDeactivate, this._currentInstruction.componentType)) {
return this._componentRef.then(function(ref) {
return ref.instance.routerCanDeactivate(nextInstruction, _this._currentInstruction);
});
} else {
return _resolveToTrue;
}
};
RouterOutlet.prototype.routerCanReuse = function(nextInstruction) {
var _this = this;
var result;
if (lang_1.isBlank(this._currentInstruction) || this._currentInstruction.componentType != nextInstruction.componentType) {
result = false;
} else if (route_lifecycle_reflector_1.hasLifecycleHook(hookMod.routerCanReuse, this._currentInstruction.componentType)) {
result = this._componentRef.then(function(ref) {
return ref.instance.routerCanReuse(nextInstruction, _this._currentInstruction);
});
} else {
result = nextInstruction == this._currentInstruction || lang_1.isPresent(nextInstruction.params) && lang_1.isPresent(this._currentInstruction.params) && collection_1.StringMapWrapper.equals(nextInstruction.params, this._currentInstruction.params);
}
return async_1.PromiseWrapper.resolve(result);
};
RouterOutlet.prototype.ngOnDestroy = function() {
this._parentRouter.unregisterPrimaryOutlet(this);
};
__decorate([ core_1.Output("activate"), __metadata("design:type", Object) ], RouterOutlet.prototype, "activateEvents", void 0);
RouterOutlet = __decorate([ core_1.Directive({
selector: "router-outlet"
}), __param(3, core_1.Attribute("name")), __metadata("design:paramtypes", [ core_1.ViewContainerRef, core_1.DynamicComponentLoader, routerMod.Router, String ]) ], RouterOutlet);
return RouterOutlet;
}();
exports.RouterOutlet = RouterOutlet;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_private_1 = __webpack_require__(534);
var lifecycle_annotations_impl_1 = __webpack_require__(536);
var lifecycle_annotations_impl_2 = __webpack_require__(536);
exports.routerCanReuse = lifecycle_annotations_impl_2.routerCanReuse;
exports.routerCanDeactivate = lifecycle_annotations_impl_2.routerCanDeactivate;
exports.routerOnActivate = lifecycle_annotations_impl_2.routerOnActivate;
exports.routerOnReuse = lifecycle_annotations_impl_2.routerOnReuse;
exports.routerOnDeactivate = lifecycle_annotations_impl_2.routerOnDeactivate;
exports.CanActivate = core_private_1.makeDecorator(lifecycle_annotations_impl_1.CanActivate);
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(118);
var common_1 = __webpack_require__(376);
var lang_1 = __webpack_require__(514);
var router_1 = __webpack_require__(512);
var RouterLink = function() {
function RouterLink(_router, _location) {
var _this = this;
this._router = _router;
this._location = _location;
this._router.subscribe(function(_) {
return _this._updateLink();
});
}
RouterLink.prototype._updateLink = function() {
this._navigationInstruction = this._router.generate(this._routeParams);
var navigationHref = this._navigationInstruction.toLinkUrl();
this.visibleHref = this._location.prepareExternalUrl(navigationHref);
};
Object.defineProperty(RouterLink.prototype, "isRouteActive", {
get: function() {
return this._router.isRouteActive(this._navigationInstruction);
},
enumerable: true,
configurable: true
});
Object.defineProperty(RouterLink.prototype, "routeParams", {
set: function(changes) {
this._routeParams = changes;
this._updateLink();
},
enumerable: true,
configurable: true
});
RouterLink.prototype.onClick = function() {
if (!lang_1.isString(this.target) || this.target == "_self") {
this._router.navigateByInstruction(this._navigationInstruction);
return false;
}
return true;
};
RouterLink = __decorate([ core_1.Directive({
selector: "[routerLink]",
inputs: [ "routeParams: routerLink", "target: target" ],
host: {
"(click)": "onClick()",
"[attr.href]": "visibleHref",
"[class.router-link-active]": "isRouteActive"
}
}), __metadata("design:paramtypes", [ router_1.Router, common_1.Location ]) ], RouterLink);
return RouterLink;
}();
exports.RouterLink = RouterLink;
}, function(module, exports, __webpack_require__) {
"use strict";
var core_1 = __webpack_require__(118);
var common_1 = __webpack_require__(376);
var router_1 = __webpack_require__(512);
var route_registry_1 = __webpack_require__(520);
var exceptions_1 = __webpack_require__(517);
exports.ROUTER_PROVIDERS_COMMON = [ route_registry_1.RouteRegistry, {
provide: common_1.LocationStrategy,
useClass: common_1.PathLocationStrategy
}, common_1.Location, {
provide: router_1.Router,
useFactory: routerFactory,
deps: [ route_registry_1.RouteRegistry, common_1.Location, route_registry_1.ROUTER_PRIMARY_COMPONENT, core_1.ApplicationRef ]
}, {
provide: route_registry_1.ROUTER_PRIMARY_COMPONENT,
useFactory: routerPrimaryComponentFactory,
deps: [ core_1.ApplicationRef ]
} ];
function routerFactory(registry, location, primaryComponent, appRef) {
var rootRouter = new router_1.RootRouter(registry, location, primaryComponent);
appRef.registerDisposeListener(function() {
return rootRouter.dispose();
});
return rootRouter;
}
function routerPrimaryComponentFactory(app) {
if (app.componentTypes.length == 0) {
throw new exceptions_1.BaseException("Bootstrap at least one component before injecting Router.");
}
return app.componentTypes[0];
}
}, function(module, exports, __webpack_require__) {
"use strict";
var router_providers_common_1 = __webpack_require__(540);
var platform_browser_1 = __webpack_require__(372);
var common_1 = __webpack_require__(376);
exports.ROUTER_PROVIDERS = [ router_providers_common_1.ROUTER_PROVIDERS_COMMON, {
provide: common_1.PlatformLocation,
useClass: platform_browser_1.BrowserPlatformLocation
} ];
exports.ROUTER_BINDINGS = exports.ROUTER_PROVIDERS;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(543);
var utils = __webpack_require__(22);
var sharedPreferences;
function ensureSharedPreferences() {
if (!sharedPreferences) {
sharedPreferences = utils.ad.getApplicationContext().getSharedPreferences("prefs.db", 0);
}
}
function verify(key) {
common.checkKey(key);
ensureSharedPreferences();
}
exports.hasKey = function(key) {
verify(key);
return sharedPreferences.contains(key);
};
exports.getBoolean = function(key, defaultValue) {
verify(key);
if (exports.hasKey(key)) {
return sharedPreferences.getBoolean(key, false);
}
return defaultValue;
};
exports.getString = function(key, defaultValue) {
verify(key);
if (exports.hasKey(key)) {
return sharedPreferences.getString(key, "");
}
return defaultValue;
};
exports.getNumber = function(key, defaultValue) {
verify(key);
if (exports.hasKey(key)) {
return sharedPreferences.getFloat(key, float(0));
}
return defaultValue;
};
exports.setBoolean = function(key, value) {
verify(key);
common.ensureValidValue(value, "boolean");
var editor = sharedPreferences.edit();
editor.putBoolean(key, value);
editor.commit();
};
exports.setString = function(key, value) {
verify(key);
common.ensureValidValue(value, "string");
var editor = sharedPreferences.edit();
editor.putString(key, value);
editor.commit();
};
exports.setNumber = function(key, value) {
verify(key);
common.ensureValidValue(value, "number");
var editor = sharedPreferences.edit();
editor.putFloat(key, float(value));
editor.commit();
};
exports.remove = function(key) {
verify(key);
var editor = sharedPreferences.edit();
editor.remove(key);
editor.commit();
};
exports.clear = function() {
ensureSharedPreferences();
sharedPreferences.edit().clear().commit();
};
}, function(module, exports) {
exports.checkKey = function(key) {
if ("string" !== typeof key) {
throw new Error("key: '" + key + "' must be a string");
}
};
exports.ensureValidValue = function(value, valueType) {
if (valueType !== typeof value) {
throw new Error("value: '" + value + "' must be a " + valueType);
}
};
}, function(module, exports, __webpack_require__) {
var REQUEST_IMAGE_CAPTURE = 3453;
exports.takePicture = function(options) {
return new Promise(function(resolve, reject) {
try {
var types = __webpack_require__(14);
var utils = __webpack_require__(22);
var saveToGallery = void 0;
var reqWidth_1;
var reqHeight_1;
var shouldKeepAspectRatio_1;
var density = utils.layout.getDisplayDensity();
if (options) {
saveToGallery = options.saveToGallery ? true : false;
reqWidth_1 = options.width ? options.width * density : 0;
reqHeight_1 = options.height ? options.height * density : reqWidth_1;
shouldKeepAspectRatio_1 = types.isNullOrUndefined(options.keepAspectRatio) ? true : options.keepAspectRatio;
}
var takePictureIntent = new android.content.Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
var dateStamp = createDateTimeStamp();
var picturePath_1;
var nativeFile = void 0;
var tempPictureUri = void 0;
if (saveToGallery) {
picturePath_1 = android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_PICTURES).getAbsolutePath() + "/" + "cameraPicture_" + dateStamp + ".jpg";
nativeFile = new java.io.File(picturePath_1);
tempPictureUri = android.net.Uri.fromFile(nativeFile);
takePictureIntent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT, tempPictureUri);
} else {
picturePath_1 = utils.ad.getApplicationContext().getExternalFilesDir(null).getAbsolutePath() + "/" + "cameraPicture_" + dateStamp + ".jpg";
nativeFile = new java.io.File(picturePath_1);
tempPictureUri = android.net.Uri.fromFile(nativeFile);
takePictureIntent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT, tempPictureUri);
}
if (takePictureIntent.resolveActivity(utils.ad.getApplicationContext().getPackageManager()) != null) {
var appModule_1 = __webpack_require__(16);
var previousResult_1 = appModule_1.android.onActivityResult;
appModule_1.android.onActivityResult = function(requestCode, resultCode, data) {
appModule_1.android.onActivityResult = previousResult_1;
if (requestCode === REQUEST_IMAGE_CAPTURE && resultCode === android.app.Activity.RESULT_OK) {
var imageSource = __webpack_require__(64);
var options_1 = new android.graphics.BitmapFactory.Options();
options_1.inJustDecodeBounds = true;
android.graphics.BitmapFactory.decodeFile(picturePath_1, options_1);
var sampleSize = calculateInSampleSize(options_1.outWidth, options_1.outHeight, reqWidth_1, reqHeight_1);
var finalBitmapOptions = new android.graphics.BitmapFactory.Options();
finalBitmapOptions.inSampleSize = sampleSize;
var bitmap = android.graphics.BitmapFactory.decodeFile(picturePath_1, finalBitmapOptions);
var scaledSizeImage = null;
if (reqHeight_1 > 0 && reqWidth_1 > 0) {
if (shouldKeepAspectRatio_1) {
var common = __webpack_require__(545);
var aspectSafeSize = common.getAspectSafeDimensions(bitmap.getWidth(), bitmap.getHeight(), reqWidth_1, reqHeight_1);
scaledSizeImage = android.graphics.Bitmap.createScaledBitmap(bitmap, aspectSafeSize.width, aspectSafeSize.height, true);
} else {
scaledSizeImage = android.graphics.Bitmap.createScaledBitmap(bitmap, reqWidth_1, reqHeight_1, true);
}
} else {
scaledSizeImage = bitmap;
}
var ei = new android.media.ExifInterface(picturePath_1);
var orientation_1 = ei.getAttributeInt(android.media.ExifInterface.TAG_ORIENTATION, android.media.ExifInterface.ORIENTATION_NORMAL);
switch (orientation_1) {
case android.media.ExifInterface.ORIENTATION_ROTATE_90:
scaledSizeImage = rotateBitmap(scaledSizeImage, 90);
break;

case android.media.ExifInterface.ORIENTATION_ROTATE_180:
scaledSizeImage = rotateBitmap(scaledSizeImage, 180);
break;

case android.media.ExifInterface.ORIENTATION_ROTATE_270:
scaledSizeImage = rotateBitmap(scaledSizeImage, 270);
break;
}
resolve(imageSource.fromNativeSource(scaledSizeImage));
}
};
appModule_1.android.foregroundActivity.startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);
}
} catch (e) {
if (reject) {
reject(e);
}
}
});
};
exports.isAvailable = function() {
var utils = __webpack_require__(22);
return utils.ad.getApplicationContext().getPackageManager().hasSystemFeature(android.content.pm.PackageManager.FEATURE_CAMERA);
};
var calculateInSampleSize = function(imageWidth, imageHeight, reqWidth, reqHeight) {
var sampleSize = 1;
if (imageWidth > reqWidth && imageHeight > reqHeight) {
var halfWidth = imageWidth / 2;
var halfHeight = imageHeight / 2;
while (halfWidth / sampleSize > reqWidth && halfHeight / sampleSize > reqHeight) {
sampleSize *= 2;
}
}
return sampleSize;
};
var createDateTimeStamp = function() {
var result = "";
var date = new Date();
result = (date.getDate() < 10 ? "0" + date.getDate().toString() : date.getDate().toString()) + (date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1).toString() : (date.getMonth() + 1).toString()) + date.getFullYear().toString() + date.getHours().toString() + date.getMinutes().toString() + date.getSeconds().toString();
return result;
};
var rotateBitmap = function(source, angle) {
var matrix = new android.graphics.Matrix();
matrix.postRotate(angle);
return android.graphics.Bitmap.createBitmap(source, 0, 0, source.getWidth(), source.getHeight(), matrix, true);
};
}, function(module, exports) {
function getAspectSafeDimensions(sourceWidth, sourceHeight, reqWidth, reqHeight) {
var widthCoef = sourceWidth / reqWidth;
var heightCoef = sourceHeight / reqHeight;
var aspectCoef = widthCoef > heightCoef ? widthCoef : heightCoef;
return {
width: Math.floor(sourceWidth / aspectCoef),
height: Math.floor(sourceHeight / aspectCoef)
};
}
exports.getAspectSafeDimensions = getAspectSafeDimensions;
}, function(module, exports, __webpack_require__) {
var appModule = __webpack_require__(16);
var common = __webpack_require__(547);
var utils = __webpack_require__(22);
global.moduleMerge(common, exports);
var WIFI = "WIFI";
var MOBILE = "MOBILE";
function getConnectivityManager() {
return utils.ad.getApplicationContext().getSystemService(android.content.Context.CONNECTIVITY_SERVICE);
}
function getActiveNetworkInfo() {
var connectivityManager = getConnectivityManager();
if (!connectivityManager) {
return null;
}
return connectivityManager.getActiveNetworkInfo();
}
function getConnectionType() {
var activeNetworkInfo = getActiveNetworkInfo();
if (!activeNetworkInfo || !activeNetworkInfo.isConnected()) {
return common.connectionType.none;
}
var connectionType = activeNetworkInfo.getTypeName();
switch (connectionType) {
case WIFI:
return common.connectionType.wifi;

case MOBILE:
return common.connectionType.mobile;
}
}
exports.getConnectionType = getConnectionType;
function startMonitoring(connectionTypeChangedCallback) {
var onReceiveCallback = function onReceiveCallback(context, intent) {
var newConnectionType = getConnectionType();
connectionTypeChangedCallback(newConnectionType);
};
appModule.android.registerBroadcastReceiver(android.net.ConnectivityManager.CONNECTIVITY_ACTION, onReceiveCallback);
}
exports.startMonitoring = startMonitoring;
function stopMonitoring() {
appModule.android.unregisterBroadcastReceiver(android.net.ConnectivityManager.CONNECTIVITY_ACTION);
}
exports.stopMonitoring = stopMonitoring;
}, function(module, exports) {
var connectionType;
(function(connectionType) {
connectionType.none = 0;
connectionType.wifi = 1;
connectionType.mobile = 2;
})(connectionType = exports.connectionType || (exports.connectionType = {}));
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(18);
var types = __webpack_require__(14);
var CHANGE = "change", UPDATE = "update", DELETE = "delete", ADD = "add";
var ChangeType = function() {
function ChangeType() {}
ChangeType.Add = "add";
ChangeType.Delete = "delete";
ChangeType.Update = "update";
ChangeType.Splice = "splice";
return ChangeType;
}();
exports.ChangeType = ChangeType;
var VirtualArray = function(_super) {
__extends(VirtualArray, _super);
function VirtualArray(length) {
if (length === void 0) {
length = 0;
}
_super.call(this);
this._length = length;
this._cache = {};
this._requestedIndexes = [];
this._loadedIndexes = [];
}
Object.defineProperty(VirtualArray.prototype, "length", {
get: function() {
return this._length;
},
set: function(value) {
if (this._length !== value) {
var index = this._length;
var count = value - this._length;
this._length = value;
this.notify({
eventName: CHANGE,
object: this,
action: count > 0 ? ADD : DELETE,
index: index,
removed: new Array(count < 0 ? Math.abs(count) : 0),
addedCount: count > 0 ? count : 0
});
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(VirtualArray.prototype, "loadSize", {
get: function() {
return this._loadSize;
},
set: function(value) {
this._loadSize = value;
},
enumerable: true,
configurable: true
});
VirtualArray.prototype.getItem = function(index) {
var item = this._cache[index];
if (types.isUndefined(item)) {
if (index >= 0 && index < this.length && this._requestedIndexes.indexOf(index) < 0 && this._loadedIndexes.indexOf(index) < 0) {
this.requestItems(index);
}
}
return item;
};
VirtualArray.prototype.setItem = function(index, value) {
if (this._cache[index] !== value) {
this.load(index, [ value ]);
}
};
VirtualArray.prototype.load = function(index, items) {
var i;
for (i = 0; i < items.length; i++) {
var itemIndex = index + i;
this._cache[itemIndex] = items[i];
this._requestedIndexes.splice(this._requestedIndexes.indexOf(itemIndex), 1);
if (this._loadedIndexes.indexOf(itemIndex) < 0) {
this._loadedIndexes.push(itemIndex);
}
}
if (this._requestedIndexes.length > 0) {
for (i = 0; i < this.loadSize - items.length; i++) {
this._requestedIndexes.splice(this._requestedIndexes.indexOf(index + i), 1);
}
}
this.notify({
eventName: CHANGE,
object: this,
action: UPDATE,
index: index,
removed: new Array(items.length),
addedCount: items.length
});
};
VirtualArray.prototype.requestItems = function(index) {
var indexesToLoad = [];
var pageIndex = this._loadSize > 0 ? this._loadSize * Math.floor(index / this._loadSize) : index;
var count = 0;
var start = -1;
for (var i = 0; i < this.loadSize; i++) {
var itemIndex = pageIndex + i;
if (itemIndex >= this._length) {
break;
}
if (this._loadedIndexes.indexOf(itemIndex) < 0) {
if (start < 0) {
start = itemIndex;
}
indexesToLoad.push(itemIndex);
if (this._requestedIndexes.indexOf(itemIndex) < 0) {
this._requestedIndexes.push(itemIndex);
}
count++;
} else {
if (count > 0) {
this.notify({
eventName: VirtualArray.itemsLoadingEvent,
object: this,
index: start,
count: count
});
}
start = -1;
count = 0;
}
}
if (start >= 0 && count > 0) {
this.notify({
eventName: VirtualArray.itemsLoadingEvent,
object: this,
index: start,
count: count
});
}
};
VirtualArray.changeEvent = CHANGE;
VirtualArray.itemsLoadingEvent = "itemsLoading";
return VirtualArray;
}(observable.Observable);
exports.VirtualArray = VirtualArray;
}, function(module, exports) {}, function(module, exports, __webpack_require__) {
var fpsNative = __webpack_require__(551);
var callbacks = {}, idCounter = 0, _minFps = 1e3, framesRendered = 0, frameStartTime = 0;
function doFrame(currentTimeMillis) {
var fps = 0;
if (frameStartTime > 0) {
var timeSpan = currentTimeMillis - frameStartTime;
framesRendered++;
if (timeSpan > 1e3) {
fps = framesRendered * 1e3 / timeSpan;
if (fps < _minFps) {
_minFps = fps;
}
notify(fps);
frameStartTime = currentTimeMillis;
framesRendered = 0;
}
} else {
frameStartTime = currentTimeMillis;
}
}
var native;
function ensureNative() {
if (!native) {
native = new fpsNative.FPSCallback(doFrame);
}
}
function reset() {
_minFps = 1e3;
frameStartTime = 0;
framesRendered = 0;
}
exports.reset = reset;
function running() {
if (!native) {
return false;
}
return native.running;
}
exports.running = running;
function minFps() {
return _minFps;
}
exports.minFps = minFps;
function start() {
ensureNative();
native.start();
}
exports.start = start;
function stop() {
if (!native) {
return;
}
native.stop();
reset();
}
exports.stop = stop;
function addCallback(callback) {
var id = idCounter;
callbacks[id] = callback;
idCounter++;
return id;
}
exports.addCallback = addCallback;
function removeCallback(id) {
if (id in callbacks) {
delete callbacks[id];
}
}
exports.removeCallback = removeCallback;
function notify(fps) {
var callback;
for (var id in callbacks) {
callback = callbacks[id];
callback(fps, _minFps);
}
}
}, function(module, exports) {
var FPSCallback = function() {
function FPSCallback(onFrame) {
var _this = this;
this.running = false;
this.onFrame = onFrame;
this.impl = new android.view.Choreographer.FrameCallback({
doFrame: function(nanos) {
_this.handleFrame(nanos);
}
});
}
FPSCallback.prototype.start = function() {
if (this.running) {
return;
}
android.view.Choreographer.getInstance().postFrameCallback(this.impl);
this.running = true;
};
FPSCallback.prototype.stop = function() {
if (!this.running) {
return;
}
android.view.Choreographer.getInstance().removeFrameCallback(this.impl);
this.running = false;
};
FPSCallback.prototype.handleFrame = function(nanos) {
if (!this.running) {
return;
}
this.onFrame(nanos / 1e6);
android.view.Choreographer.getInstance().postFrameCallback(this.impl);
};
return FPSCallback;
}();
exports.FPSCallback = FPSCallback;
}, function(module, exports, __webpack_require__) {
var enums = __webpack_require__(24);
var common = __webpack_require__(553);
var utils = __webpack_require__(22);
global.moduleMerge(common, exports);
var LocationManager = function() {
function LocationManager() {
this.desiredAccuracy = enums.Accuracy.any;
this.updateDistance = 0;
var alm = utils.ad.getApplicationContext().getSystemService(android.content.Context.LOCATION_SERVICE);
this.androidLocationManager = new AndroidLocationManager(alm);
this.androidLocationManager.minimumUpdateTime = 200;
}
Object.defineProperty(LocationManager.prototype, "android", {
get: function() {
return this.androidLocationManager;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LocationManager.prototype, "ios", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LocationManager.prototype, "locationListener", {
get: function() {
if (!this._locationListener) {
this._locationListener = new android.location.LocationListener({
onLocationChanged: function(location1) {
if (this._onLocation) {
var location = LocationManager.locationFromAndroidLocation(location1);
if (this.maximumAge) {
if (location.timestamp.valueOf() + this.maximumAge > new Date().valueOf()) {
this._onLocation(location);
}
} else {
this._onLocation(location);
}
}
},
onProviderDisabled: function(provider) {},
onProviderEnabled: function(provider) {},
onStatusChanged: function(arg1, arg2, arg3) {}
});
}
return this._locationListener;
},
enumerable: true,
configurable: true
});
LocationManager.locationFromAndroidLocation = function(androidLocation) {
var location = new common.Location();
location.latitude = androidLocation.getLatitude();
location.longitude = androidLocation.getLongitude();
location.altitude = androidLocation.getAltitude();
location.horizontalAccuracy = androidLocation.getAccuracy();
location.verticalAccuracy = androidLocation.getAccuracy();
location.speed = androidLocation.getSpeed();
location.direction = androidLocation.getBearing();
location.timestamp = new Date(androidLocation.getTime());
location.android = androidLocation;
return location;
};
LocationManager.androidLocationFromLocation = function(location) {
var androidLocation = new android.location.Location("custom");
androidLocation.setLatitude(location.latitude);
androidLocation.setLongitude(location.longitude);
if (location.altitude) {
androidLocation.setAltitude(location.altitude);
}
if (location.speed) {
androidLocation.setSpeed(float(location.speed));
}
if (location.direction) {
androidLocation.setBearing(float(location.direction));
}
if (location.timestamp) {
try {
androidLocation.setTime(long(location.timestamp.getTime()));
} catch (e) {
console.error("invalid location timestamp");
}
}
return androidLocation;
};
LocationManager.isEnabled = function() {
var criteria = new android.location.Criteria();
criteria.setAccuracy(android.location.Criteria.ACCURACY_COARSE);
var lm = utils.ad.getApplicationContext().getSystemService(android.content.Context.LOCATION_SERVICE);
var enabledProviders = lm.getProviders(criteria, true);
return enabledProviders.size() > 0 ? true : false;
};
LocationManager.distance = function(loc1, loc2) {
if (!loc1.android) {
loc1.android = LocationManager.androidLocationFromLocation(loc1);
}
if (!loc2.android) {
loc2.android = LocationManager.androidLocationFromLocation(loc2);
}
return loc1.android.distanceTo(loc2.android);
};
LocationManager.prototype.startLocationMonitoring = function(onLocation, onError, options) {
var criteria = new android.location.Criteria();
if (options) {
if (options.desiredAccuracy) {
this.desiredAccuracy = options.desiredAccuracy;
}
if (options.updateDistance) {
this.updateDistance = options.updateDistance;
}
if (options.minimumUpdateTime) {
this.androidLocationManager.minimumUpdateTime = options.minimumUpdateTime;
}
}
criteria.setAccuracy(this.desiredAccuracy === enums.Accuracy.high ? android.location.Criteria.ACCURACY_FINE : android.location.Criteria.ACCURACY_COARSE);
this.locationListener._onLocation = onLocation;
this.locationListener._onError = onError;
this.locationListener.maximumAge = options && "number" === typeof options.maximumAge ? options.maximumAge : undefined;
try {
this.androidLocationManager.manager.requestLocationUpdates(this.androidLocationManager.minimumUpdateTime, this.updateDistance, criteria, this.locationListener, null);
this.isStarted = true;
} catch (e) {
if (onError) {
onError(e);
}
}
};
LocationManager.prototype.stopLocationMonitoring = function() {
this.androidLocationManager.manager.removeUpdates(this.locationListener);
this.isStarted = false;
};
Object.defineProperty(LocationManager.prototype, "lastKnownLocation", {
get: function() {
var criteria = new android.location.Criteria();
criteria.setAccuracy(this.desiredAccuracy === enums.Accuracy.high ? android.location.Criteria.ACCURACY_FINE : android.location.Criteria.ACCURACY_COARSE);
try {
var providers = this.androidLocationManager.manager.getProviders(criteria, false);
var it = providers.iterator();
var location;
var tempLocation;
while (it.hasNext()) {
var element = it.next();
tempLocation = this.androidLocationManager.manager.getLastKnownLocation(element);
if (!location) {
location = tempLocation;
} else {
if (tempLocation.getTime() < location.getTime()) {
location = tempLocation;
}
}
}
if (location) {
return LocationManager.locationFromAndroidLocation(location);
}
} catch (e) {
console.error(e.message);
}
return null;
},
enumerable: true,
configurable: true
});
LocationManager = __decorate([ Deprecated ], LocationManager);
return LocationManager;
}();
exports.LocationManager = LocationManager;
var AndroidLocationManager = function() {
function AndroidLocationManager(manager) {
this._manager = manager;
}
Object.defineProperty(AndroidLocationManager.prototype, "minimumUpdateTime", {
get: function() {
return this._minimumUpdateTime;
},
set: function(value) {
this._minimumUpdateTime = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidLocationManager.prototype, "manager", {
get: function() {
return this._manager;
},
enumerable: true,
configurable: true
});
AndroidLocationManager = __decorate([ Deprecated ], AndroidLocationManager);
return AndroidLocationManager;
}();
exports.AndroidLocationManager = AndroidLocationManager;
}, function(module, exports, __webpack_require__) {
var defModule = __webpack_require__(552);
var defaultGetLocationTimeout = 2e4;
var Location = function() {
function Location() {}
Location = __decorate([ Deprecated ], Location);
return Location;
}();
exports.Location = Location;
exports.getLocation = function(options) {
var timerId;
var locationManager = new defModule.LocationManager();
if (options && 0 === options.timeout) {
return new Promise(function(resolve, reject) {
var location = locationManager.lastKnownLocation;
if (location) {
if (options && "number" === typeof options.maximumAge) {
if (location.timestamp.valueOf() + options.maximumAge > new Date().valueOf()) {
resolve(location);
} else {
reject(new Error("timeout is 0 and last known location is older than maximumAge"));
}
} else {
resolve(location);
}
} else {
reject(new Error("timeout is 0 and no known location found"));
}
});
}
return new Promise(function(resolve, reject) {
if (!defModule.LocationManager.isEnabled()) {
return reject(new Error("Location service is disabled"));
}
var timer = __webpack_require__(7);
locationManager.startLocationMonitoring(function(location) {
if (options && "number" === typeof options.maximumAge) {
if (location.timestamp.valueOf() + options.maximumAge > new Date().valueOf()) {
locationManager.stopLocationMonitoring();
if ("undefined" !== typeof timerId) {
timer.clearTimeout(timerId);
}
resolve(location);
}
} else {
locationManager.stopLocationMonitoring();
if ("undefined" !== typeof timerId) {
timer.clearTimeout(timerId);
}
resolve(location);
}
}, function(error) {
console.error("Location error received: " + error);
locationManager.stopLocationMonitoring();
if ("undefined" !== typeof timerId) {
timer.clearTimeout(timerId);
}
reject(error);
}, options);
if (options && "number" === typeof options.timeout) {
timerId = timer.setTimeout(function() {
locationManager.stopLocationMonitoring();
reject(new Error("timeout searching for location"));
}, options.timeout || defaultGetLocationTimeout);
}
});
};
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(118);
var DetachedLoader = function() {
function DetachedLoader(loader) {
this.loader = loader;
this.viewLoaded = false;
this.pendingLoads = [];
}
DetachedLoader.prototype.ngAfterViewInit = function() {
var _this = this;
this.viewLoaded = true;
this.pendingLoads.forEach(function(loadEntry) {
_this.loadInLocation(loadEntry.componentType).then(function(loadedRef) {
loadEntry.resolveCallback(loadedRef);
});
});
};
DetachedLoader.prototype.loadInLocation = function(componentType) {
return this.loader.loadNextToLocation(componentType, this.containerRef);
};
DetachedLoader.prototype.loadComponent = function(componentType) {
var _this = this;
if (this.viewLoaded) {
return this.loadInLocation(componentType);
} else {
return new Promise(function(resolve, reject) {
_this.pendingLoads.push({
componentType: componentType,
resolveCallback: resolve
});
});
}
};
__decorate([ core_1.ViewChild("loader", {
read: core_1.ViewContainerRef
}), __metadata("design:type", core_1.ViewContainerRef) ], DetachedLoader.prototype, "containerRef", void 0);
DetachedLoader = __decorate([ core_1.Component({
selector: "DetachedContainer",
template: "<Placeholder #loader></Placeholder>"
}), __metadata("design:paramtypes", [ core_1.DynamicComponentLoader ]) ], DetachedLoader);
return DetachedLoader;
}();
exports.DetachedLoader = DetachedLoader;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(118);
var page_1 = __webpack_require__(72);
var detached_loader_1 = __webpack_require__(554);
var ModalDialogParams = function() {
function ModalDialogParams(context, closeCallback) {
if (context === void 0) {
context = {};
}
this.context = context;
this.closeCallback = closeCallback;
}
return ModalDialogParams;
}();
exports.ModalDialogParams = ModalDialogParams;
var ModalDialogService = function() {
function ModalDialogService(page, loader) {
this.page = page;
this.loader = loader;
}
ModalDialogService.prototype.registerViewContainerRef = function(ref) {
this.containerRef = ref;
};
ModalDialogService.prototype.showModal = function(type, options) {
var _this = this;
if (!this.containerRef) {
throw new Error("No viewContainerRef: Make sure you have the modal-dialog-host directive inside your component.");
}
return new Promise(function(resove, reject) {
var page = new page_1.Page();
var detachedLoaderRef;
var closeCallback = function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
resove.apply(undefined, args);
page.closeModal();
detachedLoaderRef.destroy();
};
var modalParams = new ModalDialogParams(options.context, closeCallback);
var providers = core_1.ReflectiveInjector.resolve([ core_1.provide(page_1.Page, {
useValue: page
}), core_1.provide(ModalDialogParams, {
useValue: modalParams
}) ]);
_this.loader.loadNextToLocation(detached_loader_1.DetachedLoader, _this.containerRef, providers).then(function(loaderRef) {
detachedLoaderRef = loaderRef;
return loaderRef.instance.loadComponent(type);
}).then(function(compRef) {
var componentView = compRef.location.nativeElement;
if (componentView.parent) {
componentView.parent.removeChild(componentView);
}
page.content = componentView;
_this.page.showModal(page, options.context, closeCallback, options.fullscreen);
});
});
};
ModalDialogService = __decorate([ core_1.Injectable(), __metadata("design:paramtypes", [ page_1.Page, core_1.DynamicComponentLoader ]) ], ModalDialogService);
return ModalDialogService;
}();
exports.ModalDialogService = ModalDialogService;
var ModalDialogHost = function() {
function ModalDialogHost(containerRef, modalService) {
modalService.registerViewContainerRef(containerRef);
}
ModalDialogHost = __decorate([ core_1.Directive({
selector: "[modal-dialog-host]"
}), __metadata("design:paramtypes", [ core_1.ViewContainerRef, ModalDialogService ]) ], ModalDialogHost);
return ModalDialogHost;
}();
exports.ModalDialogHost = ModalDialogHost;
}, function(module, exports) {
module.exports = function($usbLiveSyncService) {
$usbLiveSyncService.forceExecuteFullSync = true;
};
}, function(module, exports, __webpack_require__) {
"use strict";
var fs = __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "fs"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
var path = __webpack_require__(558);
exports.findProjectDir = function findProjectDir() {
var candidateDir = path.join(__dirname, "..");
while (true) {
var oldCandidateDir = candidateDir;
candidateDir = path.dirname(candidateDir);
if (path.basename(candidateDir) === "node_modules") {
continue;
}
var packageJsonFile = path.join(candidateDir, "package.json");
if (fs.existsSync(packageJsonFile)) {
return candidateDir;
}
if (oldCandidateDir === candidateDir) {
return;
}
}
};
exports.getHooksDir = function getHooksDir() {
return path.join(exports.findProjectDir(), "hooks");
};
exports.getBeforeLivesyncHookDir = function getBeforeLivesyncHookDir() {
return path.join(exports.getHooksDir(), "before-livesync");
};
exports.getHookFilePath = function getHookFilePath() {
return path.join(exports.getBeforeLivesyncHookDir(), "nativescript-angular-sync .js");
};
}, function(module, exports) {
function normalizeArray(parts, allowAboveRoot) {
var up = 0;
for (var i = parts.length - 1; i >= 0; i--) {
var last = parts[i];
if (last === ".") {
parts.splice(i, 1);
} else if (last === "..") {
parts.splice(i, 1);
up++;
} else if (up) {
parts.splice(i, 1);
up--;
}
}
if (allowAboveRoot) {
for (;up--; up) {
parts.unshift("..");
}
}
return parts;
}
var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
return splitPathRe.exec(filename).slice(1);
};
exports.resolve = function() {
var resolvedPath = "", resolvedAbsolute = false;
for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
var path = i >= 0 ? arguments[i] : process.cwd();
if (typeof path !== "string") {
throw new TypeError("Arguments to path.resolve must be strings");
} else if (!path) {
continue;
}
resolvedPath = path + "/" + resolvedPath;
resolvedAbsolute = path.charAt(0) === "/";
}
resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function(p) {
return !!p;
}), !resolvedAbsolute).join("/");
return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
};
exports.normalize = function(path) {
var isAbsolute = exports.isAbsolute(path), trailingSlash = substr(path, -1) === "/";
path = normalizeArray(filter(path.split("/"), function(p) {
return !!p;
}), !isAbsolute).join("/");
if (!path && !isAbsolute) {
path = ".";
}
if (path && trailingSlash) {
path += "/";
}
return (isAbsolute ? "/" : "") + path;
};
exports.isAbsolute = function(path) {
return path.charAt(0) === "/";
};
exports.join = function() {
var paths = Array.prototype.slice.call(arguments, 0);
return exports.normalize(filter(paths, function(p, index) {
if (typeof p !== "string") {
throw new TypeError("Arguments to path.join must be strings");
}
return p;
}).join("/"));
};
exports.relative = function(from, to) {
from = exports.resolve(from).substr(1);
to = exports.resolve(to).substr(1);
function trim(arr) {
var start = 0;
for (;start < arr.length; start++) {
if (arr[start] !== "") break;
}
var end = arr.length - 1;
for (;end >= 0; end--) {
if (arr[end] !== "") break;
}
if (start > end) return [];
return arr.slice(start, end - start + 1);
}
var fromParts = trim(from.split("/"));
var toParts = trim(to.split("/"));
var length = Math.min(fromParts.length, toParts.length);
var samePartsLength = length;
for (var i = 0; i < length; i++) {
if (fromParts[i] !== toParts[i]) {
samePartsLength = i;
break;
}
}
var outputParts = [];
for (var i = samePartsLength; i < fromParts.length; i++) {
outputParts.push("..");
}
outputParts = outputParts.concat(toParts.slice(samePartsLength));
return outputParts.join("/");
};
exports.sep = "/";
exports.delimiter = ":";
exports.dirname = function(path) {
var result = splitPath(path), root = result[0], dir = result[1];
if (!root && !dir) {
return ".";
}
if (dir) {
dir = dir.substr(0, dir.length - 1);
}
return root + dir;
};
exports.basename = function(path, ext) {
var f = splitPath(path)[2];
if (ext && f.substr(-1 * ext.length) === ext) {
f = f.substr(0, f.length - ext.length);
}
return f;
};
exports.extname = function(path) {
return splitPath(path)[3];
};
function filter(xs, f) {
if (xs.filter) return xs.filter(f);
var res = [];
for (var i = 0; i < xs.length; i++) {
if (f(xs[i], i, xs)) res.push(xs[i]);
}
return res;
}
var substr = "ab".substr(-1) === "b" ? function(str, start, len) {
return str.substr(start, len);
} : function(str, start, len) {
if (start < 0) start = str.length + start;
return str.substr(start, len);
};
}, function(module, exports, __webpack_require__) {
"use strict";
var dialogs_1 = __webpack_require__(555);
exports.ModalDialogHost = dialogs_1.ModalDialogHost;
exports.ModalDialogParams = dialogs_1.ModalDialogParams;
exports.ModalDialogService = dialogs_1.ModalDialogService;
}, function(module, exports, __webpack_require__) {
var fs = __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "fs"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
var os = __webpack_require__(561);
var hookHelper = __webpack_require__(557);
var projectDir = hookHelper.findProjectDir();
if (projectDir) {
var hooksDir = hookHelper.getHooksDir(), beforeLivesyncHookDir = hookHelper.getBeforeLivesyncHookDir(), content = 'module.exports = require("nativescript-angular/hooks/before-livesync");';
if (!fs.existsSync(hooksDir)) {
fs.mkdirSync(hooksDir);
}
if (!fs.existsSync(beforeLivesyncHookDir)) {
fs.mkdirSync(beforeLivesyncHookDir);
}
fs.writeFileSync(hookHelper.getHookFilePath(), content + os.EOL);
}
}, function(module, exports) {
exports.endianness = function() {
return "LE";
};
exports.hostname = function() {
if (typeof location !== "undefined") {
return location.hostname;
} else return "";
};
exports.loadavg = function() {
return [];
};
exports.uptime = function() {
return 0;
};
exports.freemem = function() {
return Number.MAX_VALUE;
};
exports.totalmem = function() {
return Number.MAX_VALUE;
};
exports.cpus = function() {
return [];
};
exports.type = function() {
return "Browser";
};
exports.release = function() {
if (typeof navigator !== "undefined") {
return navigator.appVersion;
}
return "";
};
exports.networkInterfaces = exports.getNetworkInterfaces = function() {
return {};
};
exports.arch = function() {
return "javascript";
};
exports.platform = function() {
return "browser";
};
exports.tmpdir = exports.tmpDir = function() {
return "/tmp";
};
exports.EOL = "\n";
}, function(module, exports, __webpack_require__) {
"use strict";
var ns_router_1 = __webpack_require__(563);
exports.NS_ROUTER_PROVIDERS = ns_router_1.NS_ROUTER_PROVIDERS;
exports.NS_ROUTER_DIRECTIVES = ns_router_1.NS_ROUTER_DIRECTIVES;
exports.routerTraceCategory = ns_router_1.routerTraceCategory;
}, function(module, exports, __webpack_require__) {
"use strict";
var ns_router_link_1 = __webpack_require__(564);
var page_router_outlet_1 = __webpack_require__(566);
var ns_location_strategy_1 = __webpack_require__(567);
var router_deprecated_1 = __webpack_require__(510);
var common_1 = __webpack_require__(376);
var core_1 = __webpack_require__(118);
var common_2 = __webpack_require__(565);
exports.NS_ROUTER_PROVIDERS = [ router_deprecated_1.ROUTER_PROVIDERS, ns_location_strategy_1.NSLocationStrategy, core_1.provide(common_1.LocationStrategy, {
useExisting: ns_location_strategy_1.NSLocationStrategy
}) ];
exports.NS_ROUTER_DIRECTIVES = [ ns_router_link_1.NSRouterLink, page_router_outlet_1.PageRouterOutlet ];
exports.routerTraceCategory = common_2.CATEGORY;
}, function(module, exports, __webpack_require__) {
"use strict";
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(118);
var router_deprecated_1 = __webpack_require__(510);
var common_1 = __webpack_require__(376);
var common_2 = __webpack_require__(565);
var NSRouterLink = function() {
function NSRouterLink(_router, _location) {
this._router = _router;
this._location = _location;
}
Object.defineProperty(NSRouterLink.prototype, "isRouteActive", {
get: function() {
return this._router.isRouteActive(this._navigationInstruction);
},
enumerable: true,
configurable: true
});
Object.defineProperty(NSRouterLink.prototype, "params", {
set: function(changes) {
this._routeParams = changes;
this._navigationInstruction = this._router.generate(this._routeParams);
},
enumerable: true,
configurable: true
});
NSRouterLink.prototype.onTap = function() {
common_2.log("NSRouterLink onTap() instruction: " + JSON.stringify(this._navigationInstruction));
this._router.navigateByInstruction(this._navigationInstruction);
};
NSRouterLink = __decorate([ core_1.Directive({
selector: "[nsRouterLink]",
inputs: [ "params: nsRouterLink" ],
host: {
"(tap)": "onTap()",
"[class.router-link-active]": "isRouteActive"
}
}), __metadata("design:paramtypes", [ router_deprecated_1.Router, common_1.Location ]) ], NSRouterLink);
return NSRouterLink;
}();
exports.NSRouterLink = NSRouterLink;
}, function(module, exports, __webpack_require__) {
"use strict";
var trace = __webpack_require__(30);
exports.CATEGORY = "ns-router";
function log(message) {
trace.write(message, exports.CATEGORY);
}
exports.log = log;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = this && this.__metadata || function(k, v) {
if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = this && this.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
var async_1 = __webpack_require__(148);
var lang_1 = __webpack_require__(117);
var collection_1 = __webpack_require__(134);
var core_1 = __webpack_require__(118);
var routerHooks = __webpack_require__(538);
var route_lifecycle_reflector_1 = __webpack_require__(535);
var router_deprecated_1 = __webpack_require__(510);
var frame_1 = __webpack_require__(10);
var page_1 = __webpack_require__(72);
var platform_providers_1 = __webpack_require__(213);
var common_1 = __webpack_require__(565);
var ns_location_strategy_1 = __webpack_require__(567);
var detached_loader_1 = __webpack_require__(554);
var view_util_1 = __webpack_require__(231);
var _resolveToTrue = async_1.PromiseWrapper.resolve(true);
var RefCache = function() {
function RefCache() {
this.cache = new Array();
}
RefCache.prototype.push = function(comp, router, loaderRef) {
this.cache.push({
componentRef: comp,
router: router,
loaderRef: loaderRef
});
};
RefCache.prototype.pop = function() {
return this.cache.pop();
};
RefCache.prototype.peek = function() {
return this.cache[this.cache.length - 1];
};
return RefCache;
}();
var PageRouterOutlet = function(_super) {
__extends(PageRouterOutlet, _super);
function PageRouterOutlet(containerRef, loader, parentRouter, nameAttr, location, device) {
_super.call(this, containerRef, loader, parentRouter, nameAttr);
this.containerRef = containerRef;
this.loader = loader;
this.parentRouter = parentRouter;
this.location = location;
this.isInitalPage = true;
this.refCache = new RefCache();
this.componentRef = null;
this.currentInstruction = null;
this.viewUtil = new view_util_1.ViewUtil(device);
}
PageRouterOutlet.prototype.activate = function(nextInstruction) {
this.log("activate", nextInstruction);
var previousInstruction = this.currentInstruction;
this.currentInstruction = nextInstruction;
if (this.location.isPageNavigatingBack()) {
return this.activateOnGoBack(nextInstruction, previousInstruction);
} else {
return this.activateOnGoForward(nextInstruction, previousInstruction);
}
};
PageRouterOutlet.prototype.activateOnGoBack = function(nextInstruction, previousInstruction) {
common_1.log("PageRouterOutlet.activate() - Back naviation, so load from cache: " + nextInstruction.componentType.name);
this.location.finishBackPageNavigation();
var cacheItem = this.refCache.peek();
this.componentRef = cacheItem.componentRef;
this.replaceChildRouter(cacheItem.router);
if (route_lifecycle_reflector_1.hasLifecycleHook(routerHooks.routerOnActivate, this.componentRef.componentType)) {
return this.componentRef.instance.routerOnActivate(nextInstruction, previousInstruction);
}
};
PageRouterOutlet.prototype.activateOnGoForward = function(nextInstruction, previousInstruction) {
var _this = this;
var componentType = nextInstruction.componentType;
var resultPromise;
var loaderRef = undefined;
var childRouter = this.parentRouter.childRouter(componentType);
var providersArray = [ core_1.provide(router_deprecated_1.RouteData, {
useValue: nextInstruction.routeData
}), core_1.provide(router_deprecated_1.RouteParams, {
useValue: new router_deprecated_1.RouteParams(nextInstruction.params)
}), core_1.provide(router_deprecated_1.Router, {
useValue: childRouter
}) ];
if (this.isInitalPage) {
common_1.log("PageRouterOutlet.activate() inital page - just load component: " + componentType.name);
this.isInitalPage = false;
resultPromise = this.loader.loadNextToLocation(componentType, this.containerRef, core_1.ReflectiveInjector.resolve(providersArray));
} else {
common_1.log("PageRouterOutlet.activate() forward navigation - create detached loader in the loader container: " + componentType.name);
var page_2 = new page_1.Page();
providersArray.push(core_1.provide(page_1.Page, {
useValue: page_2
}));
resultPromise = this.loader.loadNextToLocation(detached_loader_1.DetachedLoader, this.childContainerRef, core_1.ReflectiveInjector.resolve(providersArray)).then(function(pageComponentRef) {
loaderRef = pageComponentRef;
return loaderRef.instance.loadComponent(componentType);
}).then(function(actualCoponenetRef) {
return _this.loadComponentInPage(page_2, actualCoponenetRef);
});
}
return resultPromise.then(function(componentRef) {
_this.componentRef = componentRef;
_this.refCache.push(componentRef, childRouter, loaderRef);
if (route_lifecycle_reflector_1.hasLifecycleHook(routerHooks.routerOnActivate, componentType)) {
return _this.componentRef.instance.routerOnActivate(nextInstruction, previousInstruction);
}
});
};
PageRouterOutlet.prototype.loadComponentInPage = function(page, componentRef) {
var _this = this;
var componentView = componentRef.location.nativeElement;
this.viewUtil.removeChild(componentView.parent, componentView);
page.content = componentView;
this.location.navigateToNewPage();
return new Promise(function(resolve, reject) {
page.on("navigatedTo", function() {
resolve(componentRef);
});
page.on("navigatingFrom", global.Zone.current.wrap(function(args) {
if (args.isBackNavigation) {
_this.location.beginBackPageNavigation();
_this.location.back();
}
}));
frame_1.topmost().navigate({
animated: true,
create: function() {
return page;
}
});
});
};
PageRouterOutlet.prototype.deactivate = function(nextInstruction) {
var _this = this;
this.log("deactivate", nextInstruction);
var instruction = this.currentInstruction;
var next = _resolveToTrue;
if (lang_1.isPresent(this.componentRef) && lang_1.isPresent(instruction) && route_lifecycle_reflector_1.hasLifecycleHook(routerHooks.routerOnDeactivate, this.componentRef.componentType)) {
next = async_1.PromiseWrapper.resolve(this.componentRef.instance.routerOnDeactivate(nextInstruction, this.currentInstruction));
}
if (this.location.isPageNavigatingBack()) {
common_1.log("PageRouterOutlet.deactivate() while going back - should destroy: " + instruction.componentType.name);
return next.then(function(_) {
var popedItem = _this.refCache.pop();
var popedRef = popedItem.componentRef;
if (_this.componentRef !== popedRef) {
throw new Error("Current componentRef is different for cached componentRef");
}
if (lang_1.isPresent(_this.componentRef)) {
_this.componentRef.destroy();
_this.componentRef = null;
}
if (lang_1.isPresent(popedItem.loaderRef)) {
popedItem.loaderRef.destroy();
}
});
} else {
return next;
}
};
PageRouterOutlet.prototype.routerCanDeactivate = function(nextInstruction) {
this.log("routerCanDeactivate", nextInstruction);
return _resolveToTrue;
};
PageRouterOutlet.prototype.routerCanReuse = function(nextInstruction) {
this.log("routerCanReuse", nextInstruction);
var result;
if (lang_1.isBlank(this.currentInstruction) || this.currentInstruction.componentType != nextInstruction.componentType) {
result = false;
} else if (route_lifecycle_reflector_1.hasLifecycleHook(routerHooks.routerCanReuse, this.currentInstruction.componentType)) {
result = this.componentRef.instance.routerCanReuse(nextInstruction, this.currentInstruction);
} else {
result = nextInstruction == this.currentInstruction || lang_1.isPresent(nextInstruction.params) && lang_1.isPresent(this.currentInstruction.params) && collection_1.StringMapWrapper.equals(nextInstruction.params, this.currentInstruction.params);
}
common_1.log("PageRouterOutlet.routerCanReuse(): " + result);
return async_1.PromiseWrapper.resolve(result);
};
PageRouterOutlet.prototype.reuse = function(nextInstruction) {
var previousInstruction = this.currentInstruction;
this.currentInstruction = nextInstruction;
if (lang_1.isBlank(this.componentRef)) {
throw new Error("Cannot reuse an outlet that does not contain a component.");
}
return async_1.PromiseWrapper.resolve(route_lifecycle_reflector_1.hasLifecycleHook(routerHooks.routerOnReuse, this.componentRef.componentType) ? this.componentRef.instance.routerOnReuse(nextInstruction, previousInstruction) : true);
};
PageRouterOutlet.prototype.replaceChildRouter = function(childRouter) {
this.parentRouter["_childRouter"] = childRouter;
};
PageRouterOutlet.prototype.log = function(method, nextInstruction) {
common_1.log("PageRouterOutlet." + method + " isBack: " + this.location.isPageNavigatingBack() + " nextUrl: " + nextInstruction.urlPath);
};
__decorate([ core_1.ViewChild("loader", {
read: core_1.ViewContainerRef
}), __metadata("design:type", core_1.ViewContainerRef) ], PageRouterOutlet.prototype, "childContainerRef", void 0);
PageRouterOutlet = __decorate([ core_1.Component({
selector: "page-router-outlet",
template: "\n        <DetachedContainer>\n            <Placeholder #loader></Placeholder>\n        </DetachedContainer>"
}), __param(3, core_1.Attribute("name")), __param(5, core_1.Inject(platform_providers_1.DEVICE)), __metadata("design:paramtypes", [ core_1.ViewContainerRef, core_1.DynamicComponentLoader, router_deprecated_1.Router, String, ns_location_strategy_1.NSLocationStrategy, Object ]) ], PageRouterOutlet);
return PageRouterOutlet;
}(router_deprecated_1.RouterOutlet);
exports.PageRouterOutlet = PageRouterOutlet;
}, function(module, exports, __webpack_require__) {
"use strict";
var __extends = this && this.__extends || function(d, b) {
for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var common_1 = __webpack_require__(376);
var common_2 = __webpack_require__(565);
var frame_1 = __webpack_require__(10);
var NSLocationStrategy = function(_super) {
__extends(NSLocationStrategy, _super);
function NSLocationStrategy() {
_super.apply(this, arguments);
this.states = new Array();
this.popStateCallbacks = new Array();
this._isPageNavigationgBack = false;
this._isPageNavigatingForward = false;
}
NSLocationStrategy.prototype.path = function() {
common_2.log("NSLocationStrategy.path()");
var state = this.peekState();
return state ? state.url : "/";
};
NSLocationStrategy.prototype.prepareExternalUrl = function(internal) {
common_2.log("NSLocationStrategy.prepareExternalUrl() internal: " + internal);
return internal;
};
NSLocationStrategy.prototype.pushState = function(state, title, url, queryParams) {
common_2.log("NSLocationStrategy.pushState state: " + state + ", title: " + title + ", url: " + url + ", queryParams: " + queryParams);
var isNewPage = this._isPageNavigatingForward;
this._isPageNavigatingForward = false;
this.states.push({
state: state,
title: title,
url: url,
queryParams: queryParams,
isPageNavigation: isNewPage
});
};
NSLocationStrategy.prototype.replaceState = function(state, title, url, queryParams) {
common_2.log("NSLocationStrategy.replaceState state: " + state + ", title: " + title + ", url: " + url + ", queryParams: " + queryParams);
throw new Error("Not implemented");
};
NSLocationStrategy.prototype.forward = function() {
common_2.log("NSLocationStrategy.forward");
throw new Error("Not implemented");
};
NSLocationStrategy.prototype.back = function() {
if (this._isPageNavigationgBack) {
var state = this.states.pop();
var count = 1;
while (!state.isPageNavigation) {
state = this.states.pop();
count++;
}
common_2.log("NSLocationStrategy.back() while navigating back. States popped: " + count);
this.callPopState(state, true);
} else {
var state = this.peekState();
if (state.isPageNavigation) {
common_2.log("NSLocationStrategy.back() while not navigating back but top state is page - will call frame.goback()");
frame_1.topmost().goBack();
} else {
common_2.log("NSLocationStrategy.back() while not navigating back but top state is not page - just pop");
this.callPopState(this.states.pop(), true);
}
}
};
NSLocationStrategy.prototype.onPopState = function(fn) {
common_2.log("NSLocationStrategy.onPopState");
this.popStateCallbacks.push(fn);
};
NSLocationStrategy.prototype.getBaseHref = function() {
common_2.log("NSLocationStrategy.getBaseHref()");
return "";
};
NSLocationStrategy.prototype.callPopState = function(state, pop) {
if (pop === void 0) {
pop = true;
}
var change = {
url: state.url,
pop: pop
};
for (var _i = 0, _a = this.popStateCallbacks; _i < _a.length; _i++) {
var fn = _a[_i];
fn(change);
}
};
NSLocationStrategy.prototype.peekState = function() {
if (this.states.length > 0) {
return this.states[this.states.length - 1];
}
return null;
};
NSLocationStrategy.prototype.beginBackPageNavigation = function() {
common_2.log("NSLocationStrategy.startGoBack()");
if (this._isPageNavigationgBack) {
throw new Error("Calling startGoBack while going back.");
}
this._isPageNavigationgBack = true;
};
NSLocationStrategy.prototype.finishBackPageNavigation = function() {
common_2.log("NSLocationStrategy.finishBackPageNavigation()");
if (!this._isPageNavigationgBack) {
throw new Error("Calling endGoBack while not going back.");
}
this._isPageNavigationgBack = false;
};
NSLocationStrategy.prototype.isPageNavigatingBack = function() {
return this._isPageNavigationgBack;
};
NSLocationStrategy.prototype.navigateToNewPage = function() {
common_2.log("NSLocationStrategy.navigateToNewPage()");
if (this._isPageNavigatingForward) {
throw new Error("Calling navigateToNewPage while already navigating to new page.");
}
this._isPageNavigatingForward = true;
};
return NSLocationStrategy;
}(common_1.LocationStrategy);
exports.NSLocationStrategy = NSLocationStrategy;
}, function(module, exports, __webpack_require__) {
var __WEBPACK_AMD_DEFINE_RESULT__;
(function(module) {
(function(root) {
var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule = typeof module == "object" && module && !module.nodeType && module;
var freeGlobal = typeof global == "object" && global;
if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
root = freeGlobal;
}
var punycode, maxInt = 2147483647, base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors = {
overflow: "Overflow: input needs wider integers to process",
"not-basic": "Illegal input >= 0x80 (not a basic code point)",
"invalid-input": "Invalid input"
}, baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, key;
function error(type) {
throw RangeError(errors[type]);
}
function map(array, fn) {
var length = array.length;
var result = [];
while (length--) {
result[length] = fn(array[length]);
}
return result;
}
function mapDomain(string, fn) {
var parts = string.split("@");
var result = "";
if (parts.length > 1) {
result = parts[0] + "@";
string = parts[1];
}
string = string.replace(regexSeparators, ".");
var labels = string.split(".");
var encoded = map(labels, fn).join(".");
return result + encoded;
}
function ucs2decode(string) {
var output = [], counter = 0, length = string.length, value, extra;
while (counter < length) {
value = string.charCodeAt(counter++);
if (value >= 55296 && value <= 56319 && counter < length) {
extra = string.charCodeAt(counter++);
if ((extra & 64512) == 56320) {
output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
} else {
output.push(value);
counter--;
}
} else {
output.push(value);
}
}
return output;
}
function ucs2encode(array) {
return map(array, function(value) {
var output = "";
if (value > 65535) {
value -= 65536;
output += stringFromCharCode(value >>> 10 & 1023 | 55296);
value = 56320 | value & 1023;
}
output += stringFromCharCode(value);
return output;
}).join("");
}
function basicToDigit(codePoint) {
if (codePoint - 48 < 10) {
return codePoint - 22;
}
if (codePoint - 65 < 26) {
return codePoint - 65;
}
if (codePoint - 97 < 26) {
return codePoint - 97;
}
return base;
}
function digitToBasic(digit, flag) {
return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
}
function adapt(delta, numPoints, firstTime) {
var k = 0;
delta = firstTime ? floor(delta / damp) : delta >> 1;
delta += floor(delta / numPoints);
for (;delta > baseMinusTMin * tMax >> 1; k += base) {
delta = floor(delta / baseMinusTMin);
}
return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
}
function decode(input) {
var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, baseMinusT;
basic = input.lastIndexOf(delimiter);
if (basic < 0) {
basic = 0;
}
for (j = 0; j < basic; ++j) {
if (input.charCodeAt(j) >= 128) {
error("not-basic");
}
output.push(input.charCodeAt(j));
}
for (index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
for (oldi = i, w = 1, k = base; ;k += base) {
if (index >= inputLength) {
error("invalid-input");
}
digit = basicToDigit(input.charCodeAt(index++));
if (digit >= base || digit > floor((maxInt - i) / w)) {
error("overflow");
}
i += digit * w;
t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
if (digit < t) {
break;
}
baseMinusT = base - t;
if (w > floor(maxInt / baseMinusT)) {
error("overflow");
}
w *= baseMinusT;
}
out = output.length + 1;
bias = adapt(i - oldi, out, oldi == 0);
if (floor(i / out) > maxInt - n) {
error("overflow");
}
n += floor(i / out);
i %= out;
output.splice(i++, 0, n);
}
return ucs2encode(output);
}
function encode(input) {
var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
input = ucs2decode(input);
inputLength = input.length;
n = initialN;
delta = 0;
bias = initialBias;
for (j = 0; j < inputLength; ++j) {
currentValue = input[j];
if (currentValue < 128) {
output.push(stringFromCharCode(currentValue));
}
}
handledCPCount = basicLength = output.length;
if (basicLength) {
output.push(delimiter);
}
while (handledCPCount < inputLength) {
for (m = maxInt, j = 0; j < inputLength; ++j) {
currentValue = input[j];
if (currentValue >= n && currentValue < m) {
m = currentValue;
}
}
handledCPCountPlusOne = handledCPCount + 1;
if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
error("overflow");
}
delta += (m - n) * handledCPCountPlusOne;
n = m;
for (j = 0; j < inputLength; ++j) {
currentValue = input[j];
if (currentValue < n && ++delta > maxInt) {
error("overflow");
}
if (currentValue == n) {
for (q = delta, k = base; ;k += base) {
t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
if (q < t) {
break;
}
qMinusT = q - t;
baseMinusT = base - t;
output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
q = floor(qMinusT / baseMinusT);
}
output.push(stringFromCharCode(digitToBasic(q, 0)));
bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
delta = 0;
++handledCPCount;
}
}
++delta;
++n;
}
return output.join("");
}
function toUnicode(input) {
return mapDomain(input, function(string) {
return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
});
}
function toASCII(input) {
return mapDomain(input, function(string) {
return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
});
}
punycode = {
version: "1.3.2",
ucs2: {
decode: ucs2decode,
encode: ucs2encode
},
decode: decode,
encode: encode,
toASCII: toASCII,
toUnicode: toUnicode
};
if (true) {
!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
return punycode;
}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else if (freeExports && freeModule) {
if (module.exports == freeExports) {
freeModule.exports = punycode;
} else {
for (key in punycode) {
punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
}
}
} else {
root.punycode = punycode;
}
})(this);
}).call(exports, __webpack_require__(153)(module));
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(570);
var LruBitmapCacheClass;
function ensureLruBitmapCacheClass() {
if (LruBitmapCacheClass) {
return;
}
var LruBitmapCache = function(_super) {
__extends(LruBitmapCache, _super);
function LruBitmapCache(cacheSize) {
_super.call(this, cacheSize);
return global.__native(this);
}
LruBitmapCache.prototype.sizeOf = function(key, bitmap) {
var result = Math.round(bitmap.getByteCount() / 1024);
return result;
};
return LruBitmapCache;
}(android.util.LruCache);
LruBitmapCacheClass = LruBitmapCache;
}
var Cache = function(_super) {
__extends(Cache, _super);
function Cache() {
_super.call(this);
ensureLruBitmapCacheClass();
var maxMemory = java.lang.Runtime.getRuntime().maxMemory() / 1024;
var cacheSize = maxMemory / 8;
this._cache = new LruBitmapCacheClass(cacheSize);
var that = new WeakRef(this);
this._callback = new com.tns.Async.CompleteCallback({
onComplete: function(result, context) {
var instance = that.get();
if (instance) {
instance._onDownloadCompleted(context, result);
}
}
});
}
Cache.prototype._downloadCore = function(request) {
com.tns.Async.DownloadImage(request.url, this._callback, request.key);
};
Cache.prototype.get = function(key) {
var result = this._cache.get(key);
return result;
};
Cache.prototype.set = function(key, image) {
this._cache.put(key, image);
};
Cache.prototype.remove = function(key) {
this._cache.remove(key);
};
Cache.prototype.clear = function() {
this._cache.evictAll();
};
return Cache;
}(common.Cache);
exports.Cache = Cache;
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(18);
var Cache = function(_super) {
__extends(Cache, _super);
function Cache() {
_super.apply(this, arguments);
this.maxRequests = 5;
this._enabled = true;
this._pendingDownloads = {};
this._queue = [];
this._currentDownloads = 0;
}
Cache.prototype.enableDownload = function() {
if (this._enabled) {
return;
}
this._enabled = true;
var request;
while (this._queue.length > 0 && this._currentDownloads < this.maxRequests) {
request = this._queue.pop();
if (!(request.key in this._pendingDownloads)) {
this._download(request);
}
}
};
Cache.prototype.disableDownload = function() {
if (!this._enabled) {
return;
}
this._enabled = false;
};
Cache.prototype.push = function(request) {
this._addRequest(request, true);
};
Cache.prototype.enqueue = function(request) {
this._addRequest(request, false);
};
Cache.prototype._addRequest = function(request, onTop) {
if (request.key in this._pendingDownloads) {
var existingRequest = this._pendingDownloads[request.key];
this._mergeRequests(existingRequest, request);
} else {
var queueRequest;
for (var i = 0; i < this._queue.length; i++) {
if (this._queue[i].key === request.key) {
queueRequest = this._queue[i];
break;
}
}
if (queueRequest) {
this._mergeRequests(queueRequest, request);
} else {
if (this._shouldDownload(request, onTop)) {
this._download(request);
}
}
}
};
Cache.prototype._mergeRequests = function(existingRequest, newRequest) {
if (existingRequest.completed) {
if (newRequest.completed) {
var existingCompleted = existingRequest.completed;
var stackCompleted = function(result, key) {
existingCompleted(result, key);
newRequest.completed(result, key);
};
existingRequest.completed = stackCompleted;
}
} else {
existingRequest.completed = newRequest.completed;
}
};
Cache.prototype.get = function(key) {
throw new Error("Abstract");
};
Cache.prototype.set = function(key, image) {
throw new Error("Abstract");
};
Cache.prototype.remove = function(key) {
throw new Error("Abstract");
};
Cache.prototype.clear = function() {
throw new Error("Abstract");
};
Cache.prototype._downloadCore = function(request) {
throw new Error("Abstract");
};
Cache.prototype._onDownloadCompleted = function(key, image) {
var request = this._pendingDownloads[key];
if (request.key && image) {
this.set(request.key, image);
}
this._currentDownloads--;
if (request.completed) {
request.completed(image, request.key);
}
if (this.hasListeners(Cache.downloadedEvent)) {
this.notify({
eventName: Cache.downloadedEvent,
object: this,
key: key,
image: image
});
}
delete this._pendingDownloads[request.key];
this._updateQueue();
};
Cache.prototype._shouldDownload = function(request, onTop) {
if (this.get(request.key) || request.key in this._pendingDownloads) {
return false;
}
if (this._currentDownloads >= this.maxRequests || !this._enabled) {
if (onTop) {
this._queue.push(request);
} else {
this._queue.unshift(request);
}
return false;
}
return true;
};
Cache.prototype._download = function(request) {
this._currentDownloads++;
this._pendingDownloads[request.key] = request;
this._downloadCore(request);
};
Cache.prototype._updateQueue = function() {
if (!this._enabled || this._queue.length === 0 || this._currentDownloads === this.maxRequests) {
return;
}
var request = this._queue.pop();
this._download(request);
};
Cache.downloadedEvent = "downloaded";
return Cache;
}(observable.Observable);
exports.Cache = Cache;
}, function(module, exports, __webpack_require__) {
var layoutBase = __webpack_require__(79);
var trace = __webpack_require__(30);
var utils = __webpack_require__(22);
var OWNER = "_owner";
var NativeViewGroupClass;
function ensureNativeViewGroupClass() {
if (NativeViewGroupClass) {
return;
}
NativeViewGroupClass = android.view.ViewGroup.extend({
onMeasure: function(widthMeasureSpec, heightMeasureSpec) {
var owner = this[OWNER];
owner.onMeasure(widthMeasureSpec, heightMeasureSpec);
this.setMeasuredDimension(owner.getMeasuredWidth(), owner.getMeasuredHeight());
},
onLayout: function(changed, left, top, right, bottom) {
var owner = this[OWNER];
owner.onLayout(left, top, right, bottom);
}
});
}
var Layout = function(_super) {
__extends(Layout, _super);
function Layout() {
_super.apply(this, arguments);
}
Object.defineProperty(Layout.prototype, "android", {
get: function() {
return this._viewGroup;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Layout.prototype, "_nativeView", {
get: function() {
return this._viewGroup;
},
enumerable: true,
configurable: true
});
Layout.prototype._createUI = function() {
ensureNativeViewGroupClass();
this._viewGroup = new NativeViewGroupClass(this._context);
this._viewGroup[OWNER] = this;
};
Layout.prototype._onDetached = function(force) {
delete this._viewGroup[OWNER];
_super.prototype._onDetached.call(this, force);
};
Layout.prototype.measure = function(widthMeasureSpec, heightMeasureSpec) {
this._setCurrentMeasureSpecs(widthMeasureSpec, heightMeasureSpec);
var view = this._nativeView;
if (view) {
var width = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var height = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = utils.layout.getMeasureSpecMode(heightMeasureSpec);
trace.write(this + " :measure: " + utils.layout.getMode(widthMode) + " " + width + ", " + utils.layout.getMode(heightMode) + " " + height, trace.categories.Layout);
view.measure(widthMeasureSpec, heightMeasureSpec);
}
};
Layout.prototype.layout = function(left, top, right, bottom) {
this._setCurrentLayoutBounds(left, top, right, bottom);
var view = this._nativeView;
if (view) {
this.layoutNativeView(left, top, right, bottom);
trace.write(this + " :layout: " + left + ", " + top + ", " + (right - left) + ", " + (bottom - top), trace.categories.Layout);
}
};
Layout.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {};
Layout.prototype.onLayout = function(left, top, right, bottom) {};
return Layout;
}(layoutBase.LayoutBase);
exports.Layout = Layout;
}, function(module, exports, __webpack_require__) {
var punycode = __webpack_require__(568);
exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;
exports.Url = Url;
function Url() {
this.protocol = null;
this.slashes = null;
this.auth = null;
this.host = null;
this.port = null;
this.hostname = null;
this.hash = null;
this.search = null;
this.query = null;
this.pathname = null;
this.path = null;
this.href = null;
}
var protocolPattern = /^([a-z0-9.+-]+:)/i, portPattern = /:[0-9]*$/, delims = [ "<", ">", '"', "`", " ", "\r", "\n", "	" ], unwise = [ "{", "}", "|", "\\", "^", "`" ].concat(delims), autoEscape = [ "'" ].concat(unwise), nonHostChars = [ "%", "/", "?", ";", "#" ].concat(autoEscape), hostEndingChars = [ "/", "?", "#" ], hostnameMaxLen = 255, hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/, hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/, unsafeProtocol = {
javascript: true,
"javascript:": true
}, hostlessProtocol = {
javascript: true,
"javascript:": true
}, slashedProtocol = {
http: true,
https: true,
ftp: true,
gopher: true,
file: true,
"http:": true,
"https:": true,
"ftp:": true,
"gopher:": true,
"file:": true
}, querystring = __webpack_require__(573);
function urlParse(url, parseQueryString, slashesDenoteHost) {
if (url && isObject(url) && url instanceof Url) return url;
var u = new Url();
u.parse(url, parseQueryString, slashesDenoteHost);
return u;
}
Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
if (!isString(url)) {
throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
}
var rest = url;
rest = rest.trim();
var proto = protocolPattern.exec(rest);
if (proto) {
proto = proto[0];
var lowerProto = proto.toLowerCase();
this.protocol = lowerProto;
rest = rest.substr(proto.length);
}
if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
var slashes = rest.substr(0, 2) === "//";
if (slashes && !(proto && hostlessProtocol[proto])) {
rest = rest.substr(2);
this.slashes = true;
}
}
if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
var hostEnd = -1;
for (var i = 0; i < hostEndingChars.length; i++) {
var hec = rest.indexOf(hostEndingChars[i]);
if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
}
var auth, atSign;
if (hostEnd === -1) {
atSign = rest.lastIndexOf("@");
} else {
atSign = rest.lastIndexOf("@", hostEnd);
}
if (atSign !== -1) {
auth = rest.slice(0, atSign);
rest = rest.slice(atSign + 1);
this.auth = decodeURIComponent(auth);
}
hostEnd = -1;
for (var i = 0; i < nonHostChars.length; i++) {
var hec = rest.indexOf(nonHostChars[i]);
if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
}
if (hostEnd === -1) hostEnd = rest.length;
this.host = rest.slice(0, hostEnd);
rest = rest.slice(hostEnd);
this.parseHost();
this.hostname = this.hostname || "";
var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
if (!ipv6Hostname) {
var hostparts = this.hostname.split(/\./);
for (var i = 0, l = hostparts.length; i < l; i++) {
var part = hostparts[i];
if (!part) continue;
if (!part.match(hostnamePartPattern)) {
var newpart = "";
for (var j = 0, k = part.length; j < k; j++) {
if (part.charCodeAt(j) > 127) {
newpart += "x";
} else {
newpart += part[j];
}
}
if (!newpart.match(hostnamePartPattern)) {
var validParts = hostparts.slice(0, i);
var notHost = hostparts.slice(i + 1);
var bit = part.match(hostnamePartStart);
if (bit) {
validParts.push(bit[1]);
notHost.unshift(bit[2]);
}
if (notHost.length) {
rest = "/" + notHost.join(".") + rest;
}
this.hostname = validParts.join(".");
break;
}
}
}
}
if (this.hostname.length > hostnameMaxLen) {
this.hostname = "";
} else {
this.hostname = this.hostname.toLowerCase();
}
if (!ipv6Hostname) {
var domainArray = this.hostname.split(".");
var newOut = [];
for (var i = 0; i < domainArray.length; ++i) {
var s = domainArray[i];
newOut.push(s.match(/[^A-Za-z0-9_-]/) ? "xn--" + punycode.encode(s) : s);
}
this.hostname = newOut.join(".");
}
var p = this.port ? ":" + this.port : "";
var h = this.hostname || "";
this.host = h + p;
this.href += this.host;
if (ipv6Hostname) {
this.hostname = this.hostname.substr(1, this.hostname.length - 2);
if (rest[0] !== "/") {
rest = "/" + rest;
}
}
}
if (!unsafeProtocol[lowerProto]) {
for (var i = 0, l = autoEscape.length; i < l; i++) {
var ae = autoEscape[i];
var esc = encodeURIComponent(ae);
if (esc === ae) {
esc = escape(ae);
}
rest = rest.split(ae).join(esc);
}
}
var hash = rest.indexOf("#");
if (hash !== -1) {
this.hash = rest.substr(hash);
rest = rest.slice(0, hash);
}
var qm = rest.indexOf("?");
if (qm !== -1) {
this.search = rest.substr(qm);
this.query = rest.substr(qm + 1);
if (parseQueryString) {
this.query = querystring.parse(this.query);
}
rest = rest.slice(0, qm);
} else if (parseQueryString) {
this.search = "";
this.query = {};
}
if (rest) this.pathname = rest;
if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
this.pathname = "/";
}
if (this.pathname || this.search) {
var p = this.pathname || "";
var s = this.search || "";
this.path = p + s;
}
this.href = this.format();
return this;
};
function urlFormat(obj) {
if (isString(obj)) obj = urlParse(obj);
if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
return obj.format();
}
Url.prototype.format = function() {
var auth = this.auth || "";
if (auth) {
auth = encodeURIComponent(auth);
auth = auth.replace(/%3A/i, ":");
auth += "@";
}
var protocol = this.protocol || "", pathname = this.pathname || "", hash = this.hash || "", host = false, query = "";
if (this.host) {
host = auth + this.host;
} else if (this.hostname) {
host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
if (this.port) {
host += ":" + this.port;
}
}
if (this.query && isObject(this.query) && Object.keys(this.query).length) {
query = querystring.stringify(this.query);
}
var search = this.search || query && "?" + query || "";
if (protocol && protocol.substr(-1) !== ":") protocol += ":";
if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
host = "//" + (host || "");
if (pathname && pathname.charAt(0) !== "/") pathname = "/" + pathname;
} else if (!host) {
host = "";
}
if (hash && hash.charAt(0) !== "#") hash = "#" + hash;
if (search && search.charAt(0) !== "?") search = "?" + search;
pathname = pathname.replace(/[?#]/g, function(match) {
return encodeURIComponent(match);
});
search = search.replace("#", "%23");
return protocol + host + pathname + search + hash;
};
function urlResolve(source, relative) {
return urlParse(source, false, true).resolve(relative);
}
Url.prototype.resolve = function(relative) {
return this.resolveObject(urlParse(relative, false, true)).format();
};
function urlResolveObject(source, relative) {
if (!source) return relative;
return urlParse(source, false, true).resolveObject(relative);
}
Url.prototype.resolveObject = function(relative) {
if (isString(relative)) {
var rel = new Url();
rel.parse(relative, false, true);
relative = rel;
}
var result = new Url();
Object.keys(this).forEach(function(k) {
result[k] = this[k];
}, this);
result.hash = relative.hash;
if (relative.href === "") {
result.href = result.format();
return result;
}
if (relative.slashes && !relative.protocol) {
Object.keys(relative).forEach(function(k) {
if (k !== "protocol") result[k] = relative[k];
});
if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
result.path = result.pathname = "/";
}
result.href = result.format();
return result;
}
if (relative.protocol && relative.protocol !== result.protocol) {
if (!slashedProtocol[relative.protocol]) {
Object.keys(relative).forEach(function(k) {
result[k] = relative[k];
});
result.href = result.format();
return result;
}
result.protocol = relative.protocol;
if (!relative.host && !hostlessProtocol[relative.protocol]) {
var relPath = (relative.pathname || "").split("/");
while (relPath.length && !(relative.host = relPath.shift())) ;
if (!relative.host) relative.host = "";
if (!relative.hostname) relative.hostname = "";
if (relPath[0] !== "") relPath.unshift("");
if (relPath.length < 2) relPath.unshift("");
result.pathname = relPath.join("/");
} else {
result.pathname = relative.pathname;
}
result.search = relative.search;
result.query = relative.query;
result.host = relative.host || "";
result.auth = relative.auth;
result.hostname = relative.hostname || relative.host;
result.port = relative.port;
if (result.pathname || result.search) {
var p = result.pathname || "";
var s = result.search || "";
result.path = p + s;
}
result.slashes = result.slashes || relative.slashes;
result.href = result.format();
return result;
}
var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
if (psychotic) {
result.hostname = "";
result.port = null;
if (result.host) {
if (srcPath[0] === "") srcPath[0] = result.host; else srcPath.unshift(result.host);
}
result.host = "";
if (relative.protocol) {
relative.hostname = null;
relative.port = null;
if (relative.host) {
if (relPath[0] === "") relPath[0] = relative.host; else relPath.unshift(relative.host);
}
relative.host = null;
}
mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
}
if (isRelAbs) {
result.host = relative.host || relative.host === "" ? relative.host : result.host;
result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
result.search = relative.search;
result.query = relative.query;
srcPath = relPath;
} else if (relPath.length) {
if (!srcPath) srcPath = [];
srcPath.pop();
srcPath = srcPath.concat(relPath);
result.search = relative.search;
result.query = relative.query;
} else if (!isNullOrUndefined(relative.search)) {
if (psychotic) {
result.hostname = result.host = srcPath.shift();
var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
if (authInHost) {
result.auth = authInHost.shift();
result.host = result.hostname = authInHost.shift();
}
}
result.search = relative.search;
result.query = relative.query;
if (!isNull(result.pathname) || !isNull(result.search)) {
result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
}
result.href = result.format();
return result;
}
if (!srcPath.length) {
result.pathname = null;
if (result.search) {
result.path = "/" + result.search;
} else {
result.path = null;
}
result.href = result.format();
return result;
}
var last = srcPath.slice(-1)[0];
var hasTrailingSlash = (result.host || relative.host) && (last === "." || last === "..") || last === "";
var up = 0;
for (var i = srcPath.length; i >= 0; i--) {
last = srcPath[i];
if (last == ".") {
srcPath.splice(i, 1);
} else if (last === "..") {
srcPath.splice(i, 1);
up++;
} else if (up) {
srcPath.splice(i, 1);
up--;
}
}
if (!mustEndAbs && !removeAllDots) {
for (;up--; up) {
srcPath.unshift("..");
}
}
if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
srcPath.unshift("");
}
if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
srcPath.push("");
}
var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
if (psychotic) {
result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
if (authInHost) {
result.auth = authInHost.shift();
result.host = result.hostname = authInHost.shift();
}
}
mustEndAbs = mustEndAbs || result.host && srcPath.length;
if (mustEndAbs && !isAbsolute) {
srcPath.unshift("");
}
if (!srcPath.length) {
result.pathname = null;
result.path = null;
} else {
result.pathname = srcPath.join("/");
}
if (!isNull(result.pathname) || !isNull(result.search)) {
result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
}
result.auth = relative.auth || result.auth;
result.slashes = result.slashes || relative.slashes;
result.href = result.format();
return result;
};
Url.prototype.parseHost = function() {
var host = this.host;
var port = portPattern.exec(host);
if (port) {
port = port[0];
if (port !== ":") {
this.port = port.substr(1);
}
host = host.substr(0, host.length - port.length);
}
if (host) this.hostname = host;
};
function isString(arg) {
return typeof arg === "string";
}
function isObject(arg) {
return typeof arg === "object" && arg !== null;
}
function isNull(arg) {
return arg === null;
}
function isNullOrUndefined(arg) {
return arg == null;
}
}, function(module, exports, __webpack_require__) {
"use strict";
exports.decode = exports.parse = __webpack_require__(574);
exports.encode = exports.stringify = __webpack_require__(575);
}, function(module, exports) {
"use strict";
function hasOwnProperty(obj, prop) {
return Object.prototype.hasOwnProperty.call(obj, prop);
}
module.exports = function(qs, sep, eq, options) {
sep = sep || "&";
eq = eq || "=";
var obj = {};
if (typeof qs !== "string" || qs.length === 0) {
return obj;
}
var regexp = /\+/g;
qs = qs.split(sep);
var maxKeys = 1e3;
if (options && typeof options.maxKeys === "number") {
maxKeys = options.maxKeys;
}
var len = qs.length;
if (maxKeys > 0 && len > maxKeys) {
len = maxKeys;
}
for (var i = 0; i < len; ++i) {
var x = qs[i].replace(regexp, "%20"), idx = x.indexOf(eq), kstr, vstr, k, v;
if (idx >= 0) {
kstr = x.substr(0, idx);
vstr = x.substr(idx + 1);
} else {
kstr = x;
vstr = "";
}
k = decodeURIComponent(kstr);
v = decodeURIComponent(vstr);
if (!hasOwnProperty(obj, k)) {
obj[k] = v;
} else if (Array.isArray(obj[k])) {
obj[k].push(v);
} else {
obj[k] = [ obj[k], v ];
}
}
return obj;
};
}, function(module, exports) {
"use strict";
var stringifyPrimitive = function(v) {
switch (typeof v) {
case "string":
return v;

case "boolean":
return v ? "true" : "false";

case "number":
return isFinite(v) ? v : "";

default:
return "";
}
};
module.exports = function(obj, sep, eq, name) {
sep = sep || "&";
eq = eq || "=";
if (obj === null) {
obj = undefined;
}
if (typeof obj === "object") {
return Object.keys(obj).map(function(k) {
var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
if (Array.isArray(obj[k])) {
return obj[k].map(function(v) {
return ks + encodeURIComponent(stringifyPrimitive(v));
}).join(sep);
} else {
return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
}
}).join(sep);
}
if (!name) return "";
return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};
}, function(module, exports, __webpack_require__) {
var assert = __webpack_require__(577);
var util = __webpack_require__(578);
var url = __webpack_require__(572);
test("god", function() {
var parseTests = {
"//some_path": {
href: "//some_path",
pathname: "//some_path",
path: "//some_path"
},
"HTTP://www.example.com/": {
href: "http://www.example.com/",
protocol: "http:",
slashes: true,
host: "www.example.com",
hostname: "www.example.com",
pathname: "/",
path: "/"
},
"HTTP://www.example.com": {
href: "http://www.example.com/",
protocol: "http:",
slashes: true,
host: "www.example.com",
hostname: "www.example.com",
pathname: "/",
path: "/"
},
"http://www.ExAmPlE.com/": {
href: "http://www.example.com/",
protocol: "http:",
slashes: true,
host: "www.example.com",
hostname: "www.example.com",
pathname: "/",
path: "/"
},
"http://user:pw@www.ExAmPlE.com/": {
href: "http://user:pw@www.example.com/",
protocol: "http:",
slashes: true,
auth: "user:pw",
host: "www.example.com",
hostname: "www.example.com",
pathname: "/",
path: "/"
},
"http://USER:PW@www.ExAmPlE.com/": {
href: "http://USER:PW@www.example.com/",
protocol: "http:",
slashes: true,
auth: "USER:PW",
host: "www.example.com",
hostname: "www.example.com",
pathname: "/",
path: "/"
},
"http://user@www.example.com/": {
href: "http://user@www.example.com/",
protocol: "http:",
slashes: true,
auth: "user",
host: "www.example.com",
hostname: "www.example.com",
pathname: "/",
path: "/"
},
"http://user%3Apw@www.example.com/": {
href: "http://user:pw@www.example.com/",
protocol: "http:",
slashes: true,
auth: "user:pw",
host: "www.example.com",
hostname: "www.example.com",
pathname: "/",
path: "/"
},
"http://x.com/path?that's#all, folks": {
href: "http://x.com/path?that%27s#all,%20folks",
protocol: "http:",
slashes: true,
host: "x.com",
hostname: "x.com",
search: "?that%27s",
query: "that%27s",
pathname: "/path",
hash: "#all,%20folks",
path: "/path?that%27s"
},
"HTTP://X.COM/Y": {
href: "http://x.com/Y",
protocol: "http:",
slashes: true,
host: "x.com",
hostname: "x.com",
pathname: "/Y",
path: "/Y"
},
"HtTp://x.y.cOm*a/b/c?d=e#f g<h>i": {
href: "http://x.y.com/*a/b/c?d=e#f%20g%3Ch%3Ei",
protocol: "http:",
slashes: true,
host: "x.y.com",
hostname: "x.y.com",
pathname: "/*a/b/c",
search: "?d=e",
query: "d=e",
hash: "#f%20g%3Ch%3Ei",
path: "/*a/b/c?d=e"
},
"HtTp://x.y.cOm*A/b/c?d=e#f g<h>i": {
href: "http://x.y.com/*A/b/c?d=e#f%20g%3Ch%3Ei",
protocol: "http:",
slashes: true,
host: "x.y.com",
hostname: "x.y.com",
pathname: "/*A/b/c",
search: "?d=e",
query: "d=e",
hash: "#f%20g%3Ch%3Ei",
path: "/*A/b/c?d=e"
},
"http://x...y...#p": {
href: "http://x...y.../#p",
protocol: "http:",
slashes: true,
host: "x...y...",
hostname: "x...y...",
hash: "#p",
pathname: "/",
path: "/"
},
'http://x/p/"quoted"': {
href: "http://x/p/%22quoted%22",
protocol: "http:",
slashes: true,
host: "x",
hostname: "x",
pathname: "/p/%22quoted%22",
path: "/p/%22quoted%22"
},
"<http://goo.corn/bread> Is a URL!": {
href: "%3Chttp://goo.corn/bread%3E%20Is%20a%20URL!",
pathname: "%3Chttp://goo.corn/bread%3E%20Is%20a%20URL!",
path: "%3Chttp://goo.corn/bread%3E%20Is%20a%20URL!"
},
"http://www.narwhaljs.org/blog/categories?id=news": {
href: "http://www.narwhaljs.org/blog/categories?id=news",
protocol: "http:",
slashes: true,
host: "www.narwhaljs.org",
hostname: "www.narwhaljs.org",
search: "?id=news",
query: "id=news",
pathname: "/blog/categories",
path: "/blog/categories?id=news"
},
"http://mt0.google.com/vt/lyrs=m@114&hl=en&src=api&x=2&y=2&z=3&s=": {
href: "http://mt0.google.com/vt/lyrs=m@114&hl=en&src=api&x=2&y=2&z=3&s=",
protocol: "http:",
slashes: true,
host: "mt0.google.com",
hostname: "mt0.google.com",
pathname: "/vt/lyrs=m@114&hl=en&src=api&x=2&y=2&z=3&s=",
path: "/vt/lyrs=m@114&hl=en&src=api&x=2&y=2&z=3&s="
},
"http://mt0.google.com/vt/lyrs=m@114???&hl=en&src=api&x=2&y=2&z=3&s=": {
href: "http://mt0.google.com/vt/lyrs=m@114???&hl=en&src=api" + "&x=2&y=2&z=3&s=",
protocol: "http:",
slashes: true,
host: "mt0.google.com",
hostname: "mt0.google.com",
search: "???&hl=en&src=api&x=2&y=2&z=3&s=",
query: "??&hl=en&src=api&x=2&y=2&z=3&s=",
pathname: "/vt/lyrs=m@114",
path: "/vt/lyrs=m@114???&hl=en&src=api&x=2&y=2&z=3&s="
},
"http://user:pass@mt0.google.com/vt/lyrs=m@114???&hl=en&src=api&x=2&y=2&z=3&s=": {
href: "http://user:pass@mt0.google.com/vt/lyrs=m@114???" + "&hl=en&src=api&x=2&y=2&z=3&s=",
protocol: "http:",
slashes: true,
host: "mt0.google.com",
auth: "user:pass",
hostname: "mt0.google.com",
search: "???&hl=en&src=api&x=2&y=2&z=3&s=",
query: "??&hl=en&src=api&x=2&y=2&z=3&s=",
pathname: "/vt/lyrs=m@114",
path: "/vt/lyrs=m@114???&hl=en&src=api&x=2&y=2&z=3&s="
},
"file:///etc/passwd": {
href: "file:///etc/passwd",
slashes: true,
protocol: "file:",
pathname: "/etc/passwd",
hostname: "",
host: "",
path: "/etc/passwd"
},
"file://localhost/etc/passwd": {
href: "file://localhost/etc/passwd",
protocol: "file:",
slashes: true,
pathname: "/etc/passwd",
hostname: "localhost",
host: "localhost",
path: "/etc/passwd"
},
"file://foo/etc/passwd": {
href: "file://foo/etc/passwd",
protocol: "file:",
slashes: true,
pathname: "/etc/passwd",
hostname: "foo",
host: "foo",
path: "/etc/passwd"
},
"file:///etc/node/": {
href: "file:///etc/node/",
slashes: true,
protocol: "file:",
pathname: "/etc/node/",
hostname: "",
host: "",
path: "/etc/node/"
},
"file://localhost/etc/node/": {
href: "file://localhost/etc/node/",
protocol: "file:",
slashes: true,
pathname: "/etc/node/",
hostname: "localhost",
host: "localhost",
path: "/etc/node/"
},
"file://foo/etc/node/": {
href: "file://foo/etc/node/",
protocol: "file:",
slashes: true,
pathname: "/etc/node/",
hostname: "foo",
host: "foo",
path: "/etc/node/"
},
"http:/baz/../foo/bar": {
href: "http:/baz/../foo/bar",
protocol: "http:",
pathname: "/baz/../foo/bar",
path: "/baz/../foo/bar"
},
"http://user:pass@example.com:8000/foo/bar?baz=quux#frag": {
href: "http://user:pass@example.com:8000/foo/bar?baz=quux#frag",
protocol: "http:",
slashes: true,
host: "example.com:8000",
auth: "user:pass",
port: "8000",
hostname: "example.com",
hash: "#frag",
search: "?baz=quux",
query: "baz=quux",
pathname: "/foo/bar",
path: "/foo/bar?baz=quux"
},
"//user:pass@example.com:8000/foo/bar?baz=quux#frag": {
href: "//user:pass@example.com:8000/foo/bar?baz=quux#frag",
slashes: true,
host: "example.com:8000",
auth: "user:pass",
port: "8000",
hostname: "example.com",
hash: "#frag",
search: "?baz=quux",
query: "baz=quux",
pathname: "/foo/bar",
path: "/foo/bar?baz=quux"
},
"/foo/bar?baz=quux#frag": {
href: "/foo/bar?baz=quux#frag",
hash: "#frag",
search: "?baz=quux",
query: "baz=quux",
pathname: "/foo/bar",
path: "/foo/bar?baz=quux"
},
"http:/foo/bar?baz=quux#frag": {
href: "http:/foo/bar?baz=quux#frag",
protocol: "http:",
hash: "#frag",
search: "?baz=quux",
query: "baz=quux",
pathname: "/foo/bar",
path: "/foo/bar?baz=quux"
},
"mailto:foo@bar.com?subject=hello": {
href: "mailto:foo@bar.com?subject=hello",
protocol: "mailto:",
host: "bar.com",
auth: "foo",
hostname: "bar.com",
search: "?subject=hello",
query: "subject=hello",
path: "?subject=hello"
},
"javascript:alert('hello');": {
href: "javascript:alert('hello');",
protocol: "javascript:",
pathname: "alert('hello');",
path: "alert('hello');"
},
"xmpp:isaacschlueter@jabber.org": {
href: "xmpp:isaacschlueter@jabber.org",
protocol: "xmpp:",
host: "jabber.org",
auth: "isaacschlueter",
hostname: "jabber.org"
},
"http://atpass:foo%40bar@127.0.0.1:8080/path?search=foo#bar": {
href: "http://atpass:foo%40bar@127.0.0.1:8080/path?search=foo#bar",
protocol: "http:",
slashes: true,
host: "127.0.0.1:8080",
auth: "atpass:foo@bar",
hostname: "127.0.0.1",
port: "8080",
pathname: "/path",
search: "?search=foo",
query: "search=foo",
hash: "#bar",
path: "/path?search=foo"
},
"svn+ssh://foo/bar": {
href: "svn+ssh://foo/bar",
host: "foo",
hostname: "foo",
protocol: "svn+ssh:",
pathname: "/bar",
path: "/bar",
slashes: true
},
"dash-test://foo/bar": {
href: "dash-test://foo/bar",
host: "foo",
hostname: "foo",
protocol: "dash-test:",
pathname: "/bar",
path: "/bar",
slashes: true
},
"dash-test:foo/bar": {
href: "dash-test:foo/bar",
host: "foo",
hostname: "foo",
protocol: "dash-test:",
pathname: "/bar",
path: "/bar"
},
"dot.test://foo/bar": {
href: "dot.test://foo/bar",
host: "foo",
hostname: "foo",
protocol: "dot.test:",
pathname: "/bar",
path: "/bar",
slashes: true
},
"dot.test:foo/bar": {
href: "dot.test:foo/bar",
host: "foo",
hostname: "foo",
protocol: "dot.test:",
pathname: "/bar",
path: "/bar"
},
"http://www.日本語.com/": {
href: "http://www.xn--wgv71a119e.com/",
protocol: "http:",
slashes: true,
host: "www.xn--wgv71a119e.com",
hostname: "www.xn--wgv71a119e.com",
pathname: "/",
path: "/"
},
"http://example.Bücher.com/": {
href: "http://example.xn--bcher-kva.com/",
protocol: "http:",
slashes: true,
host: "example.xn--bcher-kva.com",
hostname: "example.xn--bcher-kva.com",
pathname: "/",
path: "/"
},
"http://www.Äffchen.com/": {
href: "http://www.xn--ffchen-9ta.com/",
protocol: "http:",
slashes: true,
host: "www.xn--ffchen-9ta.com",
hostname: "www.xn--ffchen-9ta.com",
pathname: "/",
path: "/"
},
"http://www.Äffchen.cOm*A/b/c?d=e#f g<h>i": {
href: "http://www.xn--ffchen-9ta.com/*A/b/c?d=e#f%20g%3Ch%3Ei",
protocol: "http:",
slashes: true,
host: "www.xn--ffchen-9ta.com",
hostname: "www.xn--ffchen-9ta.com",
pathname: "/*A/b/c",
search: "?d=e",
query: "d=e",
hash: "#f%20g%3Ch%3Ei",
path: "/*A/b/c?d=e"
},
"http://SÉLIER.COM/": {
href: "http://xn--slier-bsa.com/",
protocol: "http:",
slashes: true,
host: "xn--slier-bsa.com",
hostname: "xn--slier-bsa.com",
pathname: "/",
path: "/"
},
"http://ليهمابتكلموشعربي؟.ي؟/": {
href: "http://xn--egbpdaj6bu4bxfgehfvwxn.xn--egb9f/",
protocol: "http:",
slashes: true,
host: "xn--egbpdaj6bu4bxfgehfvwxn.xn--egb9f",
hostname: "xn--egbpdaj6bu4bxfgehfvwxn.xn--egb9f",
pathname: "/",
path: "/"
},
"http://➡.ws/➡": {
href: "http://xn--hgi.ws/➡",
protocol: "http:",
slashes: true,
host: "xn--hgi.ws",
hostname: "xn--hgi.ws",
pathname: "/➡",
path: "/➡"
},
"http://bucket_name.s3.amazonaws.com/image.jpg": {
protocol: "http:",
slashes: true,
host: "bucket_name.s3.amazonaws.com",
hostname: "bucket_name.s3.amazonaws.com",
pathname: "/image.jpg",
href: "http://bucket_name.s3.amazonaws.com/image.jpg",
path: "/image.jpg"
},
"git+http://github.com/joyent/node.git": {
protocol: "git+http:",
slashes: true,
host: "github.com",
hostname: "github.com",
pathname: "/joyent/node.git",
path: "/joyent/node.git",
href: "git+http://github.com/joyent/node.git"
},
"local1@domain1": {
pathname: "local1@domain1",
path: "local1@domain1",
href: "local1@domain1"
},
"www.example.com": {
href: "www.example.com",
pathname: "www.example.com",
path: "www.example.com"
},
"[fe80::1]": {
href: "[fe80::1]",
pathname: "[fe80::1]",
path: "[fe80::1]"
},
"coap://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]": {
protocol: "coap:",
slashes: true,
host: "[fedc:ba98:7654:3210:fedc:ba98:7654:3210]",
hostname: "fedc:ba98:7654:3210:fedc:ba98:7654:3210",
href: "coap://[fedc:ba98:7654:3210:fedc:ba98:7654:3210]/",
pathname: "/",
path: "/"
},
"coap://[1080:0:0:0:8:800:200C:417A]:61616/": {
protocol: "coap:",
slashes: true,
host: "[1080:0:0:0:8:800:200c:417a]:61616",
port: "61616",
hostname: "1080:0:0:0:8:800:200c:417a",
href: "coap://[1080:0:0:0:8:800:200c:417a]:61616/",
pathname: "/",
path: "/"
},
"http://user:password@[3ffe:2a00:100:7031::1]:8080": {
protocol: "http:",
slashes: true,
auth: "user:password",
host: "[3ffe:2a00:100:7031::1]:8080",
port: "8080",
hostname: "3ffe:2a00:100:7031::1",
href: "http://user:password@[3ffe:2a00:100:7031::1]:8080/",
pathname: "/",
path: "/"
},
"coap://u:p@[::192.9.5.5]:61616/.well-known/r?n=Temperature": {
protocol: "coap:",
slashes: true,
auth: "u:p",
host: "[::192.9.5.5]:61616",
port: "61616",
hostname: "::192.9.5.5",
href: "coap://u:p@[::192.9.5.5]:61616/.well-known/r?n=Temperature",
search: "?n=Temperature",
query: "n=Temperature",
pathname: "/.well-known/r",
path: "/.well-known/r?n=Temperature"
},
"http://example.com:": {
protocol: "http:",
slashes: true,
host: "example.com",
hostname: "example.com",
href: "http://example.com/",
pathname: "/",
path: "/"
},
"http://example.com:/a/b.html": {
protocol: "http:",
slashes: true,
host: "example.com",
hostname: "example.com",
href: "http://example.com/a/b.html",
pathname: "/a/b.html",
path: "/a/b.html"
},
"http://example.com:?a=b": {
protocol: "http:",
slashes: true,
host: "example.com",
hostname: "example.com",
href: "http://example.com/?a=b",
search: "?a=b",
query: "a=b",
pathname: "/",
path: "/?a=b"
},
"http://example.com:#abc": {
protocol: "http:",
slashes: true,
host: "example.com",
hostname: "example.com",
href: "http://example.com/#abc",
hash: "#abc",
pathname: "/",
path: "/"
},
"http://[fe80::1]:/a/b?a=b#abc": {
protocol: "http:",
slashes: true,
host: "[fe80::1]",
hostname: "fe80::1",
href: "http://[fe80::1]/a/b?a=b#abc",
search: "?a=b",
query: "a=b",
hash: "#abc",
pathname: "/a/b",
path: "/a/b?a=b"
},
"http://-lovemonsterz.tumblr.com/rss": {
protocol: "http:",
slashes: true,
host: "-lovemonsterz.tumblr.com",
hostname: "-lovemonsterz.tumblr.com",
href: "http://-lovemonsterz.tumblr.com/rss",
pathname: "/rss",
path: "/rss"
},
"http://-lovemonsterz.tumblr.com:80/rss": {
protocol: "http:",
slashes: true,
port: "80",
host: "-lovemonsterz.tumblr.com:80",
hostname: "-lovemonsterz.tumblr.com",
href: "http://-lovemonsterz.tumblr.com:80/rss",
pathname: "/rss",
path: "/rss"
},
"http://user:pass@-lovemonsterz.tumblr.com/rss": {
protocol: "http:",
slashes: true,
auth: "user:pass",
host: "-lovemonsterz.tumblr.com",
hostname: "-lovemonsterz.tumblr.com",
href: "http://user:pass@-lovemonsterz.tumblr.com/rss",
pathname: "/rss",
path: "/rss"
},
"http://user:pass@-lovemonsterz.tumblr.com:80/rss": {
protocol: "http:",
slashes: true,
auth: "user:pass",
port: "80",
host: "-lovemonsterz.tumblr.com:80",
hostname: "-lovemonsterz.tumblr.com",
href: "http://user:pass@-lovemonsterz.tumblr.com:80/rss",
pathname: "/rss",
path: "/rss"
},
"http://_jabber._tcp.google.com/test": {
protocol: "http:",
slashes: true,
host: "_jabber._tcp.google.com",
hostname: "_jabber._tcp.google.com",
href: "http://_jabber._tcp.google.com/test",
pathname: "/test",
path: "/test"
},
"http://user:pass@_jabber._tcp.google.com/test": {
protocol: "http:",
slashes: true,
auth: "user:pass",
host: "_jabber._tcp.google.com",
hostname: "_jabber._tcp.google.com",
href: "http://user:pass@_jabber._tcp.google.com/test",
pathname: "/test",
path: "/test"
},
"http://_jabber._tcp.google.com:80/test": {
protocol: "http:",
slashes: true,
port: "80",
host: "_jabber._tcp.google.com:80",
hostname: "_jabber._tcp.google.com",
href: "http://_jabber._tcp.google.com:80/test",
pathname: "/test",
path: "/test"
},
"http://user:pass@_jabber._tcp.google.com:80/test": {
protocol: "http:",
slashes: true,
auth: "user:pass",
port: "80",
host: "_jabber._tcp.google.com:80",
hostname: "_jabber._tcp.google.com",
href: "http://user:pass@_jabber._tcp.google.com:80/test",
pathname: "/test",
path: "/test"
},
"http://a@b@c/": {
protocol: "http:",
slashes: true,
auth: "a@b",
host: "c",
hostname: "c",
href: "http://a%40b@c/",
path: "/",
pathname: "/"
},
"http://a@b?@c": {
protocol: "http:",
slashes: true,
auth: "a",
host: "b",
hostname: "b",
href: "http://a@b/?@c",
path: "/?@c",
pathname: "/",
search: "?@c",
query: "@c"
},
"http://a\r\" 	\n<'b:b@c\r\nd/e?f": {
protocol: "http:",
slashes: true,
auth: "a\r\" 	\n<'b:b",
host: "c",
port: null,
hostname: "c",
hash: null,
search: "?f",
query: "f",
pathname: "%0D%0Ad/e",
path: "%0D%0Ad/e?f",
href: "http://a%0D%22%20%09%0A%3C'b:b@c/%0D%0Ad/e?f"
}
};
for (var u in parseTests) {
var actual = url.parse(u), spaced = url.parse("     	  " + u + "\n	");
expected = parseTests[u];
Object.keys(actual).forEach(function(i) {
if (expected[i] === undefined && actual[i] === null) {
expected[i] = null;
}
});
assert.deepEqual(actual, expected);
assert.deepEqual(spaced, expected);
var expected = parseTests[u].href, actual = url.format(parseTests[u]);
assert.equal(actual, expected, "format(" + u + ") == " + u + "\nactual:" + actual);
}
var parseTestsWithQueryString = {
"/foo/bar?baz=quux#frag": {
href: "/foo/bar?baz=quux#frag",
hash: "#frag",
search: "?baz=quux",
query: {
baz: "quux"
},
pathname: "/foo/bar",
path: "/foo/bar?baz=quux"
},
"http://example.com": {
href: "http://example.com/",
protocol: "http:",
slashes: true,
host: "example.com",
hostname: "example.com",
query: {},
search: "",
pathname: "/",
path: "/"
}
};
for (var u in parseTestsWithQueryString) {
var actual = url.parse(u, true);
var expected = parseTestsWithQueryString[u];
for (var i in actual) {
if (actual[i] === null && expected[i] === undefined) {
expected[i] = null;
}
}
assert.deepEqual(actual, expected);
}
var formatTests = {
"http://example.com?": {
href: "http://example.com/?",
protocol: "http:",
slashes: true,
host: "example.com",
hostname: "example.com",
search: "?",
query: {},
pathname: "/"
},
"http://example.com?foo=bar#frag": {
href: "http://example.com/?foo=bar#frag",
protocol: "http:",
host: "example.com",
hostname: "example.com",
hash: "#frag",
search: "?foo=bar",
query: "foo=bar",
pathname: "/"
},
"http://example.com?foo=@bar#frag": {
href: "http://example.com/?foo=@bar#frag",
protocol: "http:",
host: "example.com",
hostname: "example.com",
hash: "#frag",
search: "?foo=@bar",
query: "foo=@bar",
pathname: "/"
},
"http://example.com?foo=/bar/#frag": {
href: "http://example.com/?foo=/bar/#frag",
protocol: "http:",
host: "example.com",
hostname: "example.com",
hash: "#frag",
search: "?foo=/bar/",
query: "foo=/bar/",
pathname: "/"
},
"http://example.com?foo=?bar/#frag": {
href: "http://example.com/?foo=?bar/#frag",
protocol: "http:",
host: "example.com",
hostname: "example.com",
hash: "#frag",
search: "?foo=?bar/",
query: "foo=?bar/",
pathname: "/"
},
"http://example.com#frag=?bar/#frag": {
href: "http://example.com/#frag=?bar/#frag",
protocol: "http:",
host: "example.com",
hostname: "example.com",
hash: "#frag=?bar/#frag",
pathname: "/"
},
'http://google.com" onload="alert(42)/': {
href: "http://google.com/%22%20onload=%22alert(42)/",
protocol: "http:",
host: "google.com",
pathname: "/%22%20onload=%22alert(42)/"
},
"http://a.com/a/b/c?s#h": {
href: "http://a.com/a/b/c?s#h",
protocol: "http",
host: "a.com",
pathname: "a/b/c",
hash: "h",
search: "s"
},
"xmpp:isaacschlueter@jabber.org": {
href: "xmpp:isaacschlueter@jabber.org",
protocol: "xmpp:",
host: "jabber.org",
auth: "isaacschlueter",
hostname: "jabber.org"
},
"http://atpass:foo%40bar@127.0.0.1/": {
href: "http://atpass:foo%40bar@127.0.0.1/",
auth: "atpass:foo@bar",
hostname: "127.0.0.1",
protocol: "http:",
pathname: "/"
},
"http://atslash%2F%40:%2F%40@foo/": {
href: "http://atslash%2F%40:%2F%40@foo/",
auth: "atslash/@:/@",
hostname: "foo",
protocol: "http:",
pathname: "/"
},
"svn+ssh://foo/bar": {
href: "svn+ssh://foo/bar",
hostname: "foo",
protocol: "svn+ssh:",
pathname: "/bar",
slashes: true
},
"dash-test://foo/bar": {
href: "dash-test://foo/bar",
hostname: "foo",
protocol: "dash-test:",
pathname: "/bar",
slashes: true
},
"dash-test:foo/bar": {
href: "dash-test:foo/bar",
hostname: "foo",
protocol: "dash-test:",
pathname: "/bar"
},
"dot.test://foo/bar": {
href: "dot.test://foo/bar",
hostname: "foo",
protocol: "dot.test:",
pathname: "/bar",
slashes: true
},
"dot.test:foo/bar": {
href: "dot.test:foo/bar",
hostname: "foo",
protocol: "dot.test:",
pathname: "/bar"
},
"coap:u:p@[::1]:61616/.well-known/r?n=Temperature": {
href: "coap:u:p@[::1]:61616/.well-known/r?n=Temperature",
protocol: "coap:",
auth: "u:p",
hostname: "::1",
port: "61616",
pathname: "/.well-known/r",
search: "n=Temperature"
},
"coap:[fedc:ba98:7654:3210:fedc:ba98:7654:3210]:61616/s/stopButton": {
href: "coap:[fedc:ba98:7654:3210:fedc:ba98:7654:3210]:61616/s/stopButton",
protocol: "coap",
host: "[fedc:ba98:7654:3210:fedc:ba98:7654:3210]:61616",
pathname: "/s/stopButton"
},
"/path/to/%%23%3F+=&.txt?foo=theA1#bar": {
href: "/path/to/%%23%3F+=&.txt?foo=theA1#bar",
pathname: "/path/to/%#?+=&.txt",
query: {
foo: "theA1"
},
hash: "#bar"
},
"/path/to/%%23%3F+=&.txt?foo=the%231#bar": {
href: "/path/to/%%23%3F+=&.txt?foo=the%231#bar",
pathname: "/path/to/%#?+=&.txt",
query: {
foo: "the#1"
},
hash: "#bar"
},
"http://ex.com/foo%3F100%m%23r?abc=the%231?&foo=bar#frag": {
href: "http://ex.com/foo%3F100%m%23r?abc=the%231?&foo=bar#frag",
protocol: "http:",
hostname: "ex.com",
hash: "#frag",
search: "?abc=the#1?&foo=bar",
pathname: "/foo?100%m#r"
},
"http://ex.com/fooA100%mBr?abc=the%231?&foo=bar#frag": {
href: "http://ex.com/fooA100%mBr?abc=the%231?&foo=bar#frag",
protocol: "http:",
hostname: "ex.com",
hash: "#frag",
search: "?abc=the#1?&foo=bar",
pathname: "/fooA100%mBr"
}
};
for (var u in formatTests) {
var expect = formatTests[u].href;
delete formatTests[u].href;
var actual = url.format(u);
var actualObj = url.format(formatTests[u]);
assert.equal(actual, expect, "wonky format(" + u + ") == " + expect + "\nactual:" + actual);
assert.equal(actualObj, expect, "wonky format(" + JSON.stringify(formatTests[u]) + ") == " + expect + "\nactual: " + actualObj);
}
var relativeTests = [ [ "/foo/bar/baz", "quux", "/foo/bar/quux" ], [ "/foo/bar/baz", "quux/asdf", "/foo/bar/quux/asdf" ], [ "/foo/bar/baz", "quux/baz", "/foo/bar/quux/baz" ], [ "/foo/bar/baz", "../quux/baz", "/foo/quux/baz" ], [ "/foo/bar/baz", "/bar", "/bar" ], [ "/foo/bar/baz/", "quux", "/foo/bar/baz/quux" ], [ "/foo/bar/baz/", "quux/baz", "/foo/bar/baz/quux/baz" ], [ "/foo/bar/baz", "../../../../../../../../quux/baz", "/quux/baz" ], [ "/foo/bar/baz", "../../../../../../../quux/baz", "/quux/baz" ], [ "foo/bar", "../../../baz", "../../baz" ], [ "foo/bar/", "../../../baz", "../baz" ], [ "http://example.com/b//c//d;p?q#blarg", "https:#hash2", "https:///#hash2" ], [ "http://example.com/b//c//d;p?q#blarg", "https:/p/a/t/h?s#hash2", "https://p/a/t/h?s#hash2" ], [ "http://example.com/b//c//d;p?q#blarg", "https://u:p@h.com/p/a/t/h?s#hash2", "https://u:p@h.com/p/a/t/h?s#hash2" ], [ "http://example.com/b//c//d;p?q#blarg", "https:/a/b/c/d", "https://a/b/c/d" ], [ "http://example.com/b//c//d;p?q#blarg", "http:#hash2", "http://example.com/b//c//d;p?q#hash2" ], [ "http://example.com/b//c//d;p?q#blarg", "http:/p/a/t/h?s#hash2", "http://example.com/p/a/t/h?s#hash2" ], [ "http://example.com/b//c//d;p?q#blarg", "http://u:p@h.com/p/a/t/h?s#hash2", "http://u:p@h.com/p/a/t/h?s#hash2" ], [ "http://example.com/b//c//d;p?q#blarg", "http:/a/b/c/d", "http://example.com/a/b/c/d" ], [ "/foo/bar/baz", "/../etc/passwd", "/etc/passwd" ] ];
relativeTests.forEach(function(relativeTest) {
var a = url.resolve(relativeTest[0], relativeTest[1]), e = relativeTest[2];
assert.equal(a, e, "resolve(" + [ relativeTest[0], relativeTest[1] ] + ") == " + e + "\n  actual=" + a);
});
[ undefined, null, true, false, 0, 0, [], {} ].forEach(function(val) {
assert.throws(function() {
url.parse(val);
}, TypeError);
});
var bases = [ "http://a/b/c/d;p?q", "http://a/b/c/d;p?q=1/2", "http://a/b/c/d;p=1/2?q", "fred:///s//a/b/c", "http:///s//a/b/c" ];
var relativeTests2 = [ [ "../c", "foo:a/b", "foo:c" ], [ "foo:.", "foo:a", "foo:" ], [ "/foo/../../../bar", "zz:abc", "zz:/bar" ], [ "/foo/../bar", "zz:abc", "zz:/bar" ], [ "foo/../../../bar", "zz:abc", "zz:bar" ], [ "foo/../bar", "zz:abc", "zz:bar" ], [ "zz:.", "zz:abc", "zz:" ], [ "/.", bases[0], "http://a/" ], [ "/.foo", bases[0], "http://a/.foo" ], [ ".foo", bases[0], "http://a/b/c/.foo" ], [ "g:h", bases[0], "g:h" ], [ "g", bases[0], "http://a/b/c/g" ], [ "./g", bases[0], "http://a/b/c/g" ], [ "g/", bases[0], "http://a/b/c/g/" ], [ "/g", bases[0], "http://a/g" ], [ "//g", bases[0], "http://g/" ], [ "?y", bases[0], "http://a/b/c/d;p?y" ], [ "g?y", bases[0], "http://a/b/c/g?y" ], [ "#s", bases[0], "http://a/b/c/d;p?q#s" ], [ "g#s", bases[0], "http://a/b/c/g#s" ], [ "g?y#s", bases[0], "http://a/b/c/g?y#s" ], [ ";x", bases[0], "http://a/b/c/;x" ], [ "g;x", bases[0], "http://a/b/c/g;x" ], [ "g;x?y#s", bases[0], "http://a/b/c/g;x?y#s" ], [ "", bases[0], "http://a/b/c/d;p?q" ], [ ".", bases[0], "http://a/b/c/" ], [ "./", bases[0], "http://a/b/c/" ], [ "..", bases[0], "http://a/b/" ], [ "../", bases[0], "http://a/b/" ], [ "../g", bases[0], "http://a/b/g" ], [ "../..", bases[0], "http://a/" ], [ "../../", bases[0], "http://a/" ], [ "../../g", bases[0], "http://a/g" ], [ "../../../g", bases[0], ("http://a/../g", 
"http://a/g") ], [ "../../../../g", bases[0], ("http://a/../../g", "http://a/g") ], [ "/./g", bases[0], "http://a/g" ], [ "/../g", bases[0], "http://a/g" ], [ "g.", bases[0], "http://a/b/c/g." ], [ ".g", bases[0], "http://a/b/c/.g" ], [ "g..", bases[0], "http://a/b/c/g.." ], [ "..g", bases[0], "http://a/b/c/..g" ], [ "./../g", bases[0], "http://a/b/g" ], [ "./g/.", bases[0], "http://a/b/c/g/" ], [ "g/./h", bases[0], "http://a/b/c/g/h" ], [ "g/../h", bases[0], "http://a/b/c/h" ], [ "g;x=1/./y", bases[0], "http://a/b/c/g;x=1/y" ], [ "g;x=1/../y", bases[0], "http://a/b/c/y" ], [ "g?y/./x", bases[0], "http://a/b/c/g?y/./x" ], [ "g?y/../x", bases[0], "http://a/b/c/g?y/../x" ], [ "g#s/./x", bases[0], "http://a/b/c/g#s/./x" ], [ "g#s/../x", bases[0], "http://a/b/c/g#s/../x" ], [ "http:g", bases[0], ("http:g", 
"http://a/b/c/g") ], [ "http:", bases[0], ("http:", bases[0]) ], [ "/a/b/c/./../../g", bases[0], "http://a/a/g" ], [ "g", bases[1], "http://a/b/c/g" ], [ "./g", bases[1], "http://a/b/c/g" ], [ "g/", bases[1], "http://a/b/c/g/" ], [ "/g", bases[1], "http://a/g" ], [ "//g", bases[1], "http://g/" ], [ "?y", bases[1], "http://a/b/c/d;p?y" ], [ "g?y", bases[1], "http://a/b/c/g?y" ], [ "g?y/./x", bases[1], "http://a/b/c/g?y/./x" ], [ "g?y/../x", bases[1], "http://a/b/c/g?y/../x" ], [ "g#s", bases[1], "http://a/b/c/g#s" ], [ "g#s/./x", bases[1], "http://a/b/c/g#s/./x" ], [ "g#s/../x", bases[1], "http://a/b/c/g#s/../x" ], [ "./", bases[1], "http://a/b/c/" ], [ "../", bases[1], "http://a/b/" ], [ "../g", bases[1], "http://a/b/g" ], [ "../../", bases[1], "http://a/" ], [ "../../g", bases[1], "http://a/g" ], [ "g", bases[2], "http://a/b/c/d;p=1/g" ], [ "./g", bases[2], "http://a/b/c/d;p=1/g" ], [ "g/", bases[2], "http://a/b/c/d;p=1/g/" ], [ "g?y", bases[2], "http://a/b/c/d;p=1/g?y" ], [ ";x", bases[2], "http://a/b/c/d;p=1/;x" ], [ "g;x", bases[2], "http://a/b/c/d;p=1/g;x" ], [ "g;x=1/./y", bases[2], "http://a/b/c/d;p=1/g;x=1/y" ], [ "g;x=1/../y", bases[2], "http://a/b/c/d;p=1/y" ], [ "./", bases[2], "http://a/b/c/d;p=1/" ], [ "../", bases[2], "http://a/b/c/" ], [ "../g", bases[2], "http://a/b/c/g" ], [ "../../", bases[2], "http://a/b/" ], [ "../../g", bases[2], "http://a/b/g" ], [ "g:h", bases[3], "g:h" ], [ "g", bases[3], "fred:///s//a/b/g" ], [ "./g", bases[3], "fred:///s//a/b/g" ], [ "g/", bases[3], "fred:///s//a/b/g/" ], [ "/g", bases[3], "fred:///g" ], [ "//g", bases[3], "fred://g" ], [ "//g/x", bases[3], "fred://g/x" ], [ "///g", bases[3], "fred:///g" ], [ "./", bases[3], "fred:///s//a/b/" ], [ "../", bases[3], "fred:///s//a/" ], [ "../g", bases[3], "fred:///s//a/g" ], [ "../../", bases[3], "fred:///s//" ], [ "../../g", bases[3], "fred:///s//g" ], [ "../../../g", bases[3], "fred:///s/g" ], [ "../../../../g", bases[3], "fred:///g" ], [ "g:h", bases[4], "g:h" ], [ "g", bases[4], "http:///s//a/b/g" ], [ "./g", bases[4], "http:///s//a/b/g" ], [ "g/", bases[4], "http:///s//a/b/g/" ], [ "/g", bases[4], "http:///g" ], [ "//g", bases[4], "http://g/" ], [ "//g/x", bases[4], "http://g/x" ], [ "///g", bases[4], "http:///g" ], [ "./", bases[4], "http:///s//a/b/" ], [ "../", bases[4], "http:///s//a/" ], [ "../g", bases[4], "http:///s//a/g" ], [ "../../", bases[4], "http:///s//" ], [ "../../g", bases[4], "http:///s//g" ], [ "../../../g", bases[4], "http:///s/g" ], [ "../../../../g", bases[4], "http:///g" ], [ "bar:abc", "foo:xyz", "bar:abc" ], [ "../abc", "http://example/x/y/z", "http://example/x/abc" ], [ "http://example/x/abc", "http://example2/x/y/z", "http://example/x/abc" ], [ "../r", "http://ex/x/y/z", "http://ex/x/r" ], [ "q/r", "http://ex/x/y", "http://ex/x/q/r" ], [ "q/r#s", "http://ex/x/y", "http://ex/x/q/r#s" ], [ "q/r#s/t", "http://ex/x/y", "http://ex/x/q/r#s/t" ], [ "ftp://ex/x/q/r", "http://ex/x/y", "ftp://ex/x/q/r" ], [ "", "http://ex/x/y", "http://ex/x/y" ], [ "", "http://ex/x/y/", "http://ex/x/y/" ], [ "", "http://ex/x/y/pdq", "http://ex/x/y/pdq" ], [ "z/", "http://ex/x/y/", "http://ex/x/y/z/" ], [ "#Animal", "file:/swap/test/animal.rdf", "file:/swap/test/animal.rdf#Animal" ], [ "../abc", "file:/e/x/y/z", "file:/e/x/abc" ], [ "/example/x/abc", "file:/example2/x/y/z", "file:/example/x/abc" ], [ "../r", "file:/ex/x/y/z", "file:/ex/x/r" ], [ "/r", "file:/ex/x/y/z", "file:/r" ], [ "q/r", "file:/ex/x/y", "file:/ex/x/q/r" ], [ "q/r#s", "file:/ex/x/y", "file:/ex/x/q/r#s" ], [ "q/r#", "file:/ex/x/y", "file:/ex/x/q/r#" ], [ "q/r#s/t", "file:/ex/x/y", "file:/ex/x/q/r#s/t" ], [ "ftp://ex/x/q/r", "file:/ex/x/y", "ftp://ex/x/q/r" ], [ "", "file:/ex/x/y", "file:/ex/x/y" ], [ "", "file:/ex/x/y/", "file:/ex/x/y/" ], [ "", "file:/ex/x/y/pdq", "file:/ex/x/y/pdq" ], [ "z/", "file:/ex/x/y/", "file:/ex/x/y/z/" ], [ "file://meetings.example.com/cal#m1", "file:/devel/WWW/2000/10/swap/test/reluri-1.n3", "file://meetings.example.com/cal#m1" ], [ "file://meetings.example.com/cal#m1", "file:/home/connolly/w3ccvs/WWW/2000/10/swap/test/reluri-1.n3", "file://meetings.example.com/cal#m1" ], [ "./#blort", "file:/some/dir/foo", "file:/some/dir/#blort" ], [ "./#", "file:/some/dir/foo", "file:/some/dir/#" ], [ "./", "http://example/x/abc.efg", "http://example/x/" ], [ "./q:r", "http://ex/x/y", "http://ex/x/q:r" ], [ "./p=q:r", "http://ex/x/y", "http://ex/x/p=q:r" ], [ "?pp/rr", "http://ex/x/y?pp/qq", "http://ex/x/y?pp/rr" ], [ "y/z", "http://ex/x/y?pp/qq", "http://ex/x/y/z" ], [ "local/qual@domain.org#frag", "mailto:local", "mailto:local/qual@domain.org#frag" ], [ "more/qual2@domain2.org#frag", "mailto:local/qual1@domain1.org", "mailto:local/more/qual2@domain2.org#frag" ], [ "y?q", "http://ex/x/y?q", "http://ex/x/y?q" ], [ "/x/y?q", "http://ex?p", "http://ex/x/y?q" ], [ "c/d", "foo:a/b", "foo:a/c/d" ], [ "/c/d", "foo:a/b", "foo:/c/d" ], [ "", "foo:a/b?c#d", "foo:a/b?c" ], [ "b/c", "foo:a", "foo:b/c" ], [ "../b/c", "foo:/a/y/z", "foo:/a/b/c" ], [ "./b/c", "foo:a", "foo:b/c" ], [ "/./b/c", "foo:a", "foo:/b/c" ], [ "../../d", "foo://a//b/c", "foo://a/d" ], [ ".", "foo:a", "foo:" ], [ "..", "foo:a", "foo:" ], [ "abc", "http://example/x/y%2Fz", "http://example/x/abc" ], [ "../../x%2Fabc", "http://example/a/x/y/z", "http://example/a/x%2Fabc" ], [ "../x%2Fabc", "http://example/a/x/y%2Fz", "http://example/a/x%2Fabc" ], [ "abc", "http://example/x%2Fy/z", "http://example/x%2Fy/abc" ], [ "q%3Ar", "http://ex/x/y", "http://ex/x/q%3Ar" ], [ "/x%2Fabc", "http://example/x/y%2Fz", "http://example/x%2Fabc" ], [ "/x%2Fabc", "http://example/x/y/z", "http://example/x%2Fabc" ], [ "/x%2Fabc", "http://example/x/y%2Fz", "http://example/x%2Fabc" ], [ "local2@domain2", "mailto:local1@domain1?query1", "mailto:local2@domain2" ], [ "local2@domain2?query2", "mailto:local1@domain1", "mailto:local2@domain2?query2" ], [ "local2@domain2?query2", "mailto:local1@domain1?query1", "mailto:local2@domain2?query2" ], [ "?query2", "mailto:local@domain?query1", "mailto:local@domain?query2" ], [ "local@domain?query2", "mailto:?query1", "mailto:local@domain?query2" ], [ "?query2", "mailto:local@domain?query1", "mailto:local@domain?query2" ], [ "http://example/a/b?c/../d", "foo:bar", "http://example/a/b?c/../d" ], [ "http://example/a/b#c/../d", "foo:bar", "http://example/a/b#c/../d" ], [ "http:this", "http://example.org/base/uri", "http://example.org/base/this" ], [ "http:this", "http:base", "http:this" ], [ ".//g", "f:/a", "f://g" ], [ "b/c//d/e", "f://example.org/base/a", "f://example.org/base/b/c//d/e" ], [ "m2@example.ord/c2@example.org", "mid:m@example.ord/c@example.org", "mid:m@example.ord/m2@example.ord/c2@example.org" ], [ "mini1.xml", "file:///C:/DEV/Haskell/lib/HXmlToolbox-3.01/examples/", "file:///C:/DEV/Haskell/lib/HXmlToolbox-3.01/examples/mini1.xml" ], [ "../b/c", "foo:a/y/z", "foo:a/b/c" ], [ "http://diff:auth@www.example.com", "http://asdf:qwer@www.example.com", "http://diff:auth@www.example.com/" ] ];
relativeTests2.forEach(function(relativeTest) {
var a = url.resolve(relativeTest[1], relativeTest[0]), e = relativeTest[2];
assert.equal(a, e, "resolve(" + [ relativeTest[1], relativeTest[0] ] + ") == " + e + "\n  actual=" + a);
});
var emptyIsImportant = {
host: true,
hostname: ""
};
relativeTests.forEach(function(relativeTest) {
var actual = url.resolveObject(url.parse(relativeTest[0]), relativeTest[1]), expected = url.parse(relativeTest[2]);
assert.deepEqual(actual, expected);
expected = relativeTest[2];
actual = url.format(actual);
assert.equal(actual, expected, "format(" + actual + ") == " + expected + "\nactual:" + actual);
});
if (relativeTests2[181][0] === ".//g" && relativeTests2[181][1] === "f:/a" && relativeTests2[181][2] === "f://g") {
relativeTests2.splice(181, 1);
}
relativeTests2.forEach(function(relativeTest) {
var actual = url.resolveObject(url.parse(relativeTest[1]), relativeTest[0]), expected = url.parse(relativeTest[2]);
assert.deepEqual(actual, expected);
var expected = relativeTest[2], actual = url.format(actual);
assert.equal(actual, expected, "format(" + relativeTest[1] + ") == " + expected + "\nactual:" + actual);
});
});
}, function(module, exports, __webpack_require__) {
var util = __webpack_require__(578);
var pSlice = Array.prototype.slice;
var hasOwn = Object.prototype.hasOwnProperty;
var assert = module.exports = ok;
assert.AssertionError = function AssertionError(options) {
this.name = "AssertionError";
this.actual = options.actual;
this.expected = options.expected;
this.operator = options.operator;
if (options.message) {
this.message = options.message;
this.generatedMessage = false;
} else {
this.message = getMessage(this);
this.generatedMessage = true;
}
var stackStartFunction = options.stackStartFunction || fail;
if (Error.captureStackTrace) {
Error.captureStackTrace(this, stackStartFunction);
} else {
var err = new Error();
if (err.stack) {
var out = err.stack;
var fn_name = stackStartFunction.name;
var idx = out.indexOf("\n" + fn_name);
if (idx >= 0) {
var next_line = out.indexOf("\n", idx + 1);
out = out.substring(next_line + 1);
}
this.stack = out;
}
}
};
util.inherits(assert.AssertionError, Error);
function replacer(key, value) {
if (util.isUndefined(value)) {
return "" + value;
}
if (util.isNumber(value) && !isFinite(value)) {
return value.toString();
}
if (util.isFunction(value) || util.isRegExp(value)) {
return value.toString();
}
return value;
}
function truncate(s, n) {
if (util.isString(s)) {
return s.length < n ? s : s.slice(0, n);
} else {
return s;
}
}
function getMessage(self) {
return truncate(JSON.stringify(self.actual, replacer), 128) + " " + self.operator + " " + truncate(JSON.stringify(self.expected, replacer), 128);
}
function fail(actual, expected, message, operator, stackStartFunction) {
throw new assert.AssertionError({
message: message,
actual: actual,
expected: expected,
operator: operator,
stackStartFunction: stackStartFunction
});
}
assert.fail = fail;
function ok(value, message) {
if (!value) fail(value, true, message, "==", assert.ok);
}
assert.ok = ok;
assert.equal = function equal(actual, expected, message) {
if (actual != expected) fail(actual, expected, message, "==", assert.equal);
};
assert.notEqual = function notEqual(actual, expected, message) {
if (actual == expected) {
fail(actual, expected, message, "!=", assert.notEqual);
}
};
assert.deepEqual = function deepEqual(actual, expected, message) {
if (!_deepEqual(actual, expected)) {
fail(actual, expected, message, "deepEqual", assert.deepEqual);
}
};
function _deepEqual(actual, expected) {
if (actual === expected) {
return true;
} else if (util.isBuffer(actual) && util.isBuffer(expected)) {
if (actual.length != expected.length) return false;
for (var i = 0; i < actual.length; i++) {
if (actual[i] !== expected[i]) return false;
}
return true;
} else if (util.isDate(actual) && util.isDate(expected)) {
return actual.getTime() === expected.getTime();
} else if (util.isRegExp(actual) && util.isRegExp(expected)) {
return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;
} else if (!util.isObject(actual) && !util.isObject(expected)) {
return actual == expected;
} else {
return objEquiv(actual, expected);
}
}
function isArguments(object) {
return Object.prototype.toString.call(object) == "[object Arguments]";
}
function objEquiv(a, b) {
if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b)) return false;
if (a.prototype !== b.prototype) return false;
if (util.isPrimitive(a) || util.isPrimitive(b)) {
return a === b;
}
var aIsArgs = isArguments(a), bIsArgs = isArguments(b);
if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;
if (aIsArgs) {
a = pSlice.call(a);
b = pSlice.call(b);
return _deepEqual(a, b);
}
var ka = objectKeys(a), kb = objectKeys(b), key, i;
if (ka.length != kb.length) return false;
ka.sort();
kb.sort();
for (i = ka.length - 1; i >= 0; i--) {
if (ka[i] != kb[i]) return false;
}
for (i = ka.length - 1; i >= 0; i--) {
key = ka[i];
if (!_deepEqual(a[key], b[key])) return false;
}
return true;
}
assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
if (_deepEqual(actual, expected)) {
fail(actual, expected, message, "notDeepEqual", assert.notDeepEqual);
}
};
assert.strictEqual = function strictEqual(actual, expected, message) {
if (actual !== expected) {
fail(actual, expected, message, "===", assert.strictEqual);
}
};
assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
if (actual === expected) {
fail(actual, expected, message, "!==", assert.notStrictEqual);
}
};
function expectedException(actual, expected) {
if (!actual || !expected) {
return false;
}
if (Object.prototype.toString.call(expected) == "[object RegExp]") {
return expected.test(actual);
} else if (actual instanceof expected) {
return true;
} else if (expected.call({}, actual) === true) {
return true;
}
return false;
}
function _throws(shouldThrow, block, expected, message) {
var actual;
if (util.isString(expected)) {
message = expected;
expected = null;
}
try {
block();
} catch (e) {
actual = e;
}
message = (expected && expected.name ? " (" + expected.name + ")." : ".") + (message ? " " + message : ".");
if (shouldThrow && !actual) {
fail(actual, expected, "Missing expected exception" + message);
}
if (!shouldThrow && expectedException(actual, expected)) {
fail(actual, expected, "Got unwanted exception" + message);
}
if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
throw actual;
}
}
assert.throws = function(block, error, message) {
_throws.apply(this, [ true ].concat(pSlice.call(arguments)));
};
assert.doesNotThrow = function(block, message) {
_throws.apply(this, [ false ].concat(pSlice.call(arguments)));
};
assert.ifError = function(err) {
if (err) {
throw err;
}
};
var objectKeys = Object.keys || function(obj) {
var keys = [];
for (var key in obj) {
if (hasOwn.call(obj, key)) keys.push(key);
}
return keys;
};
}, function(module, exports, __webpack_require__) {
var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
if (!isString(f)) {
var objects = [];
for (var i = 0; i < arguments.length; i++) {
objects.push(inspect(arguments[i]));
}
return objects.join(" ");
}
var i = 1;
var args = arguments;
var len = args.length;
var str = String(f).replace(formatRegExp, function(x) {
if (x === "%%") return "%";
if (i >= len) return x;
switch (x) {
case "%s":
return String(args[i++]);

case "%d":
return Number(args[i++]);

case "%j":
try {
return JSON.stringify(args[i++]);
} catch (_) {
return "[Circular]";
}

default:
return x;
}
});
for (var x = args[i]; i < len; x = args[++i]) {
if (isNull(x) || !isObject(x)) {
str += " " + x;
} else {
str += " " + inspect(x);
}
}
return str;
};
exports.deprecate = function(fn, msg) {
if (isUndefined(global.process)) {
return function() {
return exports.deprecate(fn, msg).apply(this, arguments);
};
}
if (process.noDeprecation === true) {
return fn;
}
var warned = false;
function deprecated() {
if (!warned) {
if (process.throwDeprecation) {
throw new Error(msg);
} else if (process.traceDeprecation) {
console.trace(msg);
} else {
console.error(msg);
}
warned = true;
}
return fn.apply(this, arguments);
}
return deprecated;
};
var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || "";
set = set.toUpperCase();
if (!debugs[set]) {
if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
var pid = process.pid;
debugs[set] = function() {
var msg = exports.format.apply(exports, arguments);
console.error("%s %d: %s", set, pid, msg);
};
} else {
debugs[set] = function() {};
}
}
return debugs[set];
};
function inspect(obj, opts) {
var ctx = {
seen: [],
stylize: stylizeNoColor
};
if (arguments.length >= 3) ctx.depth = arguments[2];
if (arguments.length >= 4) ctx.colors = arguments[3];
if (isBoolean(opts)) {
ctx.showHidden = opts;
} else if (opts) {
exports._extend(ctx, opts);
}
if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
if (isUndefined(ctx.depth)) ctx.depth = 2;
if (isUndefined(ctx.colors)) ctx.colors = false;
if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
if (ctx.colors) ctx.stylize = stylizeWithColor;
return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;
inspect.colors = {
bold: [ 1, 22 ],
italic: [ 3, 23 ],
underline: [ 4, 24 ],
inverse: [ 7, 27 ],
white: [ 37, 39 ],
grey: [ 90, 39 ],
black: [ 30, 39 ],
blue: [ 34, 39 ],
cyan: [ 36, 39 ],
green: [ 32, 39 ],
magenta: [ 35, 39 ],
red: [ 31, 39 ],
yellow: [ 33, 39 ]
};
inspect.styles = {
special: "cyan",
number: "yellow",
"boolean": "yellow",
undefined: "grey",
"null": "bold",
string: "green",
date: "magenta",
regexp: "red"
};
function stylizeWithColor(str, styleType) {
var style = inspect.styles[styleType];
if (style) {
return "[" + inspect.colors[style][0] + "m" + str + "[" + inspect.colors[style][1] + "m";
} else {
return str;
}
}
function stylizeNoColor(str, styleType) {
return str;
}
function arrayToHash(array) {
var hash = {};
array.forEach(function(val, idx) {
hash[val] = true;
});
return hash;
}
function formatValue(ctx, value, recurseTimes) {
if (ctx.customInspect && value && isFunction(value.inspect) && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
var ret = value.inspect(recurseTimes, ctx);
if (!isString(ret)) {
ret = formatValue(ctx, ret, recurseTimes);
}
return ret;
}
var primitive = formatPrimitive(ctx, value);
if (primitive) {
return primitive;
}
var keys = Object.keys(value);
var visibleKeys = arrayToHash(keys);
if (ctx.showHidden) {
keys = Object.getOwnPropertyNames(value);
}
if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
return formatError(value);
}
if (keys.length === 0) {
if (isFunction(value)) {
var name = value.name ? ": " + value.name : "";
return ctx.stylize("[Function" + name + "]", "special");
}
if (isRegExp(value)) {
return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
}
if (isDate(value)) {
return ctx.stylize(Date.prototype.toString.call(value), "date");
}
if (isError(value)) {
return formatError(value);
}
}
var base = "", array = false, braces = [ "{", "}" ];
if (isArray(value)) {
array = true;
braces = [ "[", "]" ];
}
if (isFunction(value)) {
var n = value.name ? ": " + value.name : "";
base = " [Function" + n + "]";
}
if (isRegExp(value)) {
base = " " + RegExp.prototype.toString.call(value);
}
if (isDate(value)) {
base = " " + Date.prototype.toUTCString.call(value);
}
if (isError(value)) {
base = " " + formatError(value);
}
if (keys.length === 0 && (!array || value.length == 0)) {
return braces[0] + base + braces[1];
}
if (recurseTimes < 0) {
if (isRegExp(value)) {
return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
} else {
return ctx.stylize("[Object]", "special");
}
}
ctx.seen.push(value);
var output;
if (array) {
output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
} else {
output = keys.map(function(key) {
return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
});
}
ctx.seen.pop();
return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
if (isUndefined(value)) return ctx.stylize("undefined", "undefined");
if (isString(value)) {
var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
return ctx.stylize(simple, "string");
}
if (isNumber(value)) return ctx.stylize("" + value, "number");
if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
if (isNull(value)) return ctx.stylize("null", "null");
}
function formatError(value) {
return "[" + Error.prototype.toString.call(value) + "]";
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
var output = [];
for (var i = 0, l = value.length; i < l; ++i) {
if (hasOwnProperty(value, String(i))) {
output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
} else {
output.push("");
}
}
keys.forEach(function(key) {
if (!key.match(/^\d+$/)) {
output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
}
});
return output;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
var name, str, desc;
desc = Object.getOwnPropertyDescriptor(value, key) || {
value: value[key]
};
if (desc.get) {
if (desc.set) {
str = ctx.stylize("[Getter/Setter]", "special");
} else {
str = ctx.stylize("[Getter]", "special");
}
} else {
if (desc.set) {
str = ctx.stylize("[Setter]", "special");
}
}
if (!hasOwnProperty(visibleKeys, key)) {
name = "[" + key + "]";
}
if (!str) {
if (ctx.seen.indexOf(desc.value) < 0) {
if (isNull(recurseTimes)) {
str = formatValue(ctx, desc.value, null);
} else {
str = formatValue(ctx, desc.value, recurseTimes - 1);
}
if (str.indexOf("\n") > -1) {
if (array) {
str = str.split("\n").map(function(line) {
return "  " + line;
}).join("\n").substr(2);
} else {
str = "\n" + str.split("\n").map(function(line) {
return "   " + line;
}).join("\n");
}
}
} else {
str = ctx.stylize("[Circular]", "special");
}
}
if (isUndefined(name)) {
if (array && key.match(/^\d+$/)) {
return str;
}
name = JSON.stringify("" + key);
if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
name = name.substr(1, name.length - 2);
name = ctx.stylize(name, "name");
} else {
name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
name = ctx.stylize(name, "string");
}
}
return name + ": " + str;
}
function reduceToSingleString(output, base, braces) {
var numLinesEst = 0;
var length = output.reduce(function(prev, cur) {
numLinesEst++;
if (cur.indexOf("\n") >= 0) numLinesEst++;
return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
}, 0);
if (length > 60) {
return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
}
return braces[0] + base + " " + output.join(", ") + " " + braces[1];
}
function isArray(ar) {
return Array.isArray(ar);
}
exports.isArray = isArray;
function isBoolean(arg) {
return typeof arg === "boolean";
}
exports.isBoolean = isBoolean;
function isNull(arg) {
return arg === null;
}
exports.isNull = isNull;
function isNullOrUndefined(arg) {
return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function isNumber(arg) {
return typeof arg === "number";
}
exports.isNumber = isNumber;
function isString(arg) {
return typeof arg === "string";
}
exports.isString = isString;
function isSymbol(arg) {
return typeof arg === "symbol";
}
exports.isSymbol = isSymbol;
function isUndefined(arg) {
return arg === void 0;
}
exports.isUndefined = isUndefined;
function isRegExp(re) {
return isObject(re) && objectToString(re) === "[object RegExp]";
}
exports.isRegExp = isRegExp;
function isObject(arg) {
return typeof arg === "object" && arg !== null;
}
exports.isObject = isObject;
function isDate(d) {
return isObject(d) && objectToString(d) === "[object Date]";
}
exports.isDate = isDate;
function isError(e) {
return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
}
exports.isError = isError;
function isFunction(arg) {
return typeof arg === "function";
}
exports.isFunction = isFunction;
function isPrimitive(arg) {
return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || typeof arg === "undefined";
}
exports.isPrimitive = isPrimitive;
exports.isBuffer = __webpack_require__(579);
function objectToString(o) {
return Object.prototype.toString.call(o);
}
function pad(n) {
return n < 10 ? "0" + n.toString(10) : n.toString(10);
}
var months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
function timestamp() {
var d = new Date();
var time = [ pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds()) ].join(":");
return [ d.getDate(), months[d.getMonth()], time ].join(" ");
}
exports.log = function() {
console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
};
exports.inherits = __webpack_require__(!function webpackMissingModule() {
var e = new Error('Cannot find module "inherits"');
e.code = "MODULE_NOT_FOUND";
throw e;
}());
exports._extend = function(origin, add) {
if (!add || !isObject(add)) return origin;
var keys = Object.keys(add);
var i = keys.length;
while (i--) {
origin[keys[i]] = add[keys[i]];
}
return origin;
};
function hasOwnProperty(obj, prop) {
return Object.prototype.hasOwnProperty.call(obj, prop);
}
}, function(module, exports) {
module.exports = function isBuffer(arg) {
return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
};
}, function(module, exports) {
exports.merge = function(sourceExports, destExports) {
for (var key in sourceExports) {
destExports[key] = sourceExports[key];
}
};
} ]);
